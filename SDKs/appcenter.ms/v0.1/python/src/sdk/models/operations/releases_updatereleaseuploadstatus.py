"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ReleasesUpdateReleaseUploadStatusSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    
class ReleasesUpdateReleaseUploadStatusRequestBodyUploadStatusEnum(str, Enum):
    r"""The new status of the release upload"""
    UPLOAD_FINISHED = 'uploadFinished'
    UPLOAD_CANCELED = 'uploadCanceled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesUpdateReleaseUploadStatusRequestBody:
    r"""The release upload status information."""
    
    upload_status: ReleasesUpdateReleaseUploadStatusRequestBodyUploadStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_status') }})
    r"""The new status of the release upload"""  
    

@dataclasses.dataclass
class ReleasesUpdateReleaseUploadStatusRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    request_body: ReleasesUpdateReleaseUploadStatusRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""The release upload status information."""  
    upload_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'upload_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the release upload"""  
    extract: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'extract', 'style': 'form', 'explode': True }})
    r"""A flag that indicates to extract release or not, true by default"""  
    
class ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesUpdateReleaseUploadStatus404ApplicationJSON:
    r"""Error codes:
    - `not_found` - The app or upload doesn't exist.
    """
    
    code: ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    
class ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesUpdateReleaseUploadStatus400ApplicationJSON:
    r"""The request contained invalid properties."""
    
    code: ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    
class ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnum(str, Enum):
    r"""The current upload status."""
    UPLOAD_STARTED = 'uploadStarted'
    UPLOAD_FINISHED = 'uploadFinished'
    UPLOAD_CANCELED = 'uploadCanceled'
    READY_TO_BE_PUBLISHED = 'readyToBePublished'
    MALWARE_DETECTED = 'malwareDetected'
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesUpdateReleaseUploadStatus200ApplicationJSON:
    r"""Success"""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The ID for the upload."""  
    upload_status: ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_status') }})
    r"""The current upload status."""  
    

@dataclasses.dataclass
class ReleasesUpdateReleaseUploadStatusResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    releases_update_release_upload_status_200_application_json_object: Optional[ReleasesUpdateReleaseUploadStatus200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    releases_update_release_upload_status_400_application_json_object: Optional[ReleasesUpdateReleaseUploadStatus400ApplicationJSON] = dataclasses.field(default=None)
    r"""The request contained invalid properties."""  
    releases_update_release_upload_status_404_application_json_object: Optional[ReleasesUpdateReleaseUploadStatus404ApplicationJSON] = dataclasses.field(default=None)
    r"""Error codes:
    - `not_found` - The app or upload doesn't exist.
    """  
    