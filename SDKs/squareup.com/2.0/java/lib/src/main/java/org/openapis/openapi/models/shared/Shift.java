/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Shift - A record of the hourly rate, start, and end times for a single work shift
 * for an employee. This might include a record of the start and end times for breaks
 * taken during the shift.
 */
public class Shift {
    /**
     * A list of all the paid or unpaid breaks that were taken during this shift.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("breaks")
    public Break[] breaks;

    public Shift withBreaks(Break[] breaks) {
        this.breaks = breaks;
        return this;
    }
    
    /**
     * A read-only timestamp in RFC 3339 format; presented in UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;

    public Shift withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The ID of the employee this shift belongs to. DEPRECATED at version 2020-08-26. Use `team_member_id` instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_id")
    public String employeeId;

    public Shift withEmployeeId(String employeeId) {
        this.employeeId = employeeId;
        return this;
    }
    
    /**
     * RFC 3339; shifted to the timezone + offset. Precision up to the minute is
     * respected; seconds are truncated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_at")
    public String endAt;

    public Shift withEndAt(String endAt) {
        this.endAt = endAt;
        return this;
    }
    
    /**
     * The UUID for this object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Shift withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The ID of the location this shift occurred at. The location should be based on
     * where the employee clocked in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    public String locationId;

    public Shift withLocationId(String locationId) {
        this.locationId = locationId;
        return this;
    }
    
    /**
     * RFC 3339; shifted to the location timezone + offset. Precision up to the
     * minute is respected; seconds are truncated.
     */
    @JsonProperty("start_at")
    public String startAt;

    public Shift withStartAt(String startAt) {
        this.startAt = startAt;
        return this;
    }
    
    /**
     * Describes the working state of the current `Shift`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public Shift withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * The ID of the team member this shift belongs to. Replaced `employee_id` at version "2020-08-26".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("team_member_id")
    public String teamMemberId;

    public Shift withTeamMemberId(String teamMemberId) {
        this.teamMemberId = teamMemberId;
        return this;
    }
    
    /**
     * The read-only convenience value that is calculated from the location based
     * on the `location_id`. Format: the IANA timezone database identifier for the
     * location timezone.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;

    public Shift withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * A read-only timestamp in RFC 3339 format; presented in UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public String updatedAt;

    public Shift withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Used for resolving concurrency issues. The request fails if the version
     * provided does not match the server version at the time of the request. If not provided,
     * Square executes a blind write; potentially overwriting data from another
     * write.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Long version;

    public Shift withVersion(Long version) {
        this.version = version;
        return this;
    }
    
    /**
     * The hourly wage rate used to compensate an employee for this shift.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wage")
    public ShiftWage wage;

    public Shift withWage(ShiftWage wage) {
        this.wage = wage;
        return this;
    }
    
    public Shift(@JsonProperty("start_at") String startAt) {
        this.startAt = startAt;
  }
}
