/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The Transactions endpoint allows you to buy or sell Investment Products. The endpoint supports single or bulk transactions.
 *
 * @remarks
 *
 * A transaction to buy or sell an investment product can be specified in units (i.e. buy/sell n number of units of the investment product) or as a value (i.e. buy/sell up to n value of the investment product).
 *
 */
export class InvestmentProductTransactions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Execute Buy Transaction(s)
   *
   * @remarks
   * Invoke execution of one or more buy transactions as defined in the request
   */
  executeBuyTrasaction(
    req: operations.ExecuteBuyTrasactionRequest,
    security: operations.ExecuteBuyTrasactionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ExecuteBuyTrasactionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExecuteBuyTrasactionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/tenant/transactions/v1/buy";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ExecuteBuyTrasactionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExecuteBuyTrasactionResponse =
        new operations.ExecuteBuyTrasactionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeBuyTrasaction200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteBuyTrasaction200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeBuyTrasaction400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteBuyTrasaction400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeBuyTrasaction401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteBuyTrasaction401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeBuyTrasaction403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteBuyTrasaction403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeBuyTrasaction404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteBuyTrasaction404ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeBuyTrasaction409ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteBuyTrasaction409ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeBuyTrasaction429ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteBuyTrasaction429ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeBuyTrasaction500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteBuyTrasaction500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Execute Sell Transaction(s)
   *
   * @remarks
   * Invoke execution of one or more Sell transactions as defined in the request
   */
  executeSellTrasaction(
    req: operations.ExecuteSellTrasactionRequest,
    security: operations.ExecuteSellTrasactionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ExecuteSellTrasactionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExecuteSellTrasactionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/tenant/transactions/v1/sell";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ExecuteSellTrasactionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExecuteSellTrasactionResponse =
        new operations.ExecuteSellTrasactionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeSellTrasaction200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteSellTrasaction200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeSellTrasaction400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteSellTrasaction400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeSellTrasaction401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteSellTrasaction401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeSellTrasaction403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteSellTrasaction403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeSellTrasaction404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteSellTrasaction404ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeSellTrasaction409ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteSellTrasaction409ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeSellTrasaction429ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteSellTrasaction429ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeSellTrasaction500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteSellTrasaction500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
