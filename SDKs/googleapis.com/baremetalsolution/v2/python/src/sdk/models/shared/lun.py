"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LunMultiprotocolTypeEnum(str, Enum):
    r"""The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system."""
    MULTIPROTOCOL_TYPE_UNSPECIFIED = 'MULTIPROTOCOL_TYPE_UNSPECIFIED'
    LINUX = 'LINUX'

class LunStateEnum(str, Enum):
    r"""The state of this storage volume."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    READY = 'READY'
    DELETING = 'DELETING'
    COOL_OFF = 'COOL_OFF'

class LunStorageTypeEnum(str, Enum):
    r"""The storage type for this LUN."""
    STORAGE_TYPE_UNSPECIFIED = 'STORAGE_TYPE_UNSPECIFIED'
    SSD = 'SSD'
    HDD = 'HDD'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Lun:
    r"""A storage volume logical unit number (LUN)."""
    
    boot_lun: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bootLun'), 'exclude': lambda f: f is None }})
    r"""Display if this LUN is a boot LUN."""  
    expire_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expireTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Time after which LUN will be fully deleted. It is filled only for LUNs in COOL_OFF state."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""An identifier for the LUN, generated by the backend."""  
    instances: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instances'), 'exclude': lambda f: f is None }})
    r"""Output only. Instances this Lun is attached to."""  
    multiprotocol_type: Optional[LunMultiprotocolTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multiprotocolType'), 'exclude': lambda f: f is None }})
    r"""The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The name of the LUN."""  
    shareable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shareable'), 'exclude': lambda f: f is None }})
    r"""Display if this LUN can be shared between multiple physical servers."""  
    size_gb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sizeGb'), 'exclude': lambda f: f is None }})
    r"""The size of this LUN, in gigabytes."""  
    state: Optional[LunStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The state of this storage volume."""  
    storage_type: Optional[LunStorageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storageType'), 'exclude': lambda f: f is None }})
    r"""The storage type for this LUN."""  
    storage_volume: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storageVolume'), 'exclude': lambda f: f is None }})
    r"""Display the storage volume for this LUN."""  
    wwid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wwid'), 'exclude': lambda f: f is None }})
    r"""The WWID for this LUN."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LunInput:
    r"""A storage volume logical unit number (LUN)."""
    
    boot_lun: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bootLun'), 'exclude': lambda f: f is None }})
    r"""Display if this LUN is a boot LUN."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""An identifier for the LUN, generated by the backend."""  
    multiprotocol_type: Optional[LunMultiprotocolTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multiprotocolType'), 'exclude': lambda f: f is None }})
    r"""The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system."""  
    shareable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shareable'), 'exclude': lambda f: f is None }})
    r"""Display if this LUN can be shared between multiple physical servers."""  
    size_gb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sizeGb'), 'exclude': lambda f: f is None }})
    r"""The size of this LUN, in gigabytes."""  
    state: Optional[LunStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The state of this storage volume."""  
    storage_type: Optional[LunStorageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storageType'), 'exclude': lambda f: f is None }})
    r"""The storage type for this LUN."""  
    storage_volume: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storageVolume'), 'exclude': lambda f: f is None }})
    r"""Display the storage volume for this LUN."""  
    wwid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wwid'), 'exclude': lambda f: f is None }})
    r"""The WWID for this LUN."""  
    