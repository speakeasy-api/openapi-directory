"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Plan:
    r"""A plan is the set of actions and associated goals for a patient."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def fetch_patient_plan_summaries(self, request: operations.FetchPatientPlanSummariesRequest) -> operations.FetchPatientPlanSummariesResponse:
        r"""List patient plan summaries
        Get a list of patient plan summaries
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/patient_plan_summary'
        
        query_params = utils.get_query_params(operations.FetchPatientPlanSummariesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchPatientPlanSummariesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchPatientPlanSummariesResponse])
                res.fetch_patient_plan_summaries_response = out
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchErrorResponse])
                res.fetch_error_response = out

        return res

    def fetch_patient_plan_summary(self, request: operations.FetchPatientPlanSummaryRequest) -> operations.FetchPatientPlanSummaryResponse:
        r"""Get the plan summary for a patient
        Get the plan summary for a patient.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FetchPatientPlanSummaryRequest, base_url, '/patient_plan_summary/{id}', request)
        
        query_params = utils.get_query_params(operations.FetchPatientPlanSummaryRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchPatientPlanSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchPatientPlanSummaryResponse])
                res.fetch_patient_plan_summary_response = out
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchErrorResponse])
                res.fetch_error_response = out

        return res

    def update_patient_plan_summary(self, request: operations.UpdatePatientPlanSummaryRequest) -> operations.UpdatePatientPlanSummaryResponse:
        r"""Update a plan summary
        Update a plan summary record for a patient.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePatientPlanSummaryRequest, base_url, '/patient_plan_summary/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_patient_plan_summary_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePatientPlanSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdatePatientPlanSummaryResponse])
                res.update_patient_plan_summary_response = out
        elif http_res.status_code in [401, 403, 409]:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateOrUpdateErrorResponse])
                res.create_or_update_error_response = out

        return res

    