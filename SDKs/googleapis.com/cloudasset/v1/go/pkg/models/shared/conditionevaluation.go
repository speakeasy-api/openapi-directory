// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConditionEvaluationEvaluationValueEnum - The evaluation result.
type ConditionEvaluationEvaluationValueEnum string

const (
	ConditionEvaluationEvaluationValueEnumEvaluationValueUnspecified ConditionEvaluationEvaluationValueEnum = "EVALUATION_VALUE_UNSPECIFIED"
	ConditionEvaluationEvaluationValueEnumTrue                       ConditionEvaluationEvaluationValueEnum = "TRUE"
	ConditionEvaluationEvaluationValueEnumFalse                      ConditionEvaluationEvaluationValueEnum = "FALSE"
	ConditionEvaluationEvaluationValueEnumConditional                ConditionEvaluationEvaluationValueEnum = "CONDITIONAL"
)

func (e *ConditionEvaluationEvaluationValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EVALUATION_VALUE_UNSPECIFIED":
		fallthrough
	case "TRUE":
		fallthrough
	case "FALSE":
		fallthrough
	case "CONDITIONAL":
		*e = ConditionEvaluationEvaluationValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConditionEvaluationEvaluationValueEnum: %s", s)
	}
}

// ConditionEvaluation - The Condition evaluation.
type ConditionEvaluation struct {
	// The evaluation result.
	EvaluationValue *ConditionEvaluationEvaluationValueEnum `json:"evaluationValue,omitempty"`
}
