// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ContractualRelationshipLevelEnum string

const (
	ContractualRelationshipLevelEnumConfidential ContractualRelationshipLevelEnum = "confidential"
	ContractualRelationshipLevelEnumRegular      ContractualRelationshipLevelEnum = "regular"
	ContractualRelationshipLevelEnumPublic       ContractualRelationshipLevelEnum = "public"
)

func (e ContractualRelationshipLevelEnum) ToPointer() *ContractualRelationshipLevelEnum {
	return &e
}

func (e *ContractualRelationshipLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "confidential":
		fallthrough
	case "regular":
		fallthrough
	case "public":
		*e = ContractualRelationshipLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContractualRelationshipLevelEnum: %v", v)
	}
}

// ContractualRelationship - A contractual relationship folder
type ContractualRelationship struct {
	About             *string                           `json:"About,omitempty"`
	ArchivalDate      *string                           `json:"ArchivalDate,omitempty"`
	Class             *string                           `json:"Class,omitempty"`
	Comment           *string                           `json:"Comment,omitempty"`
	ContractReference *string                           `json:"ContractReference,omitempty"`
	Designation       *string                           `json:"Designation,omitempty"`
	End               *string                           `json:"End,omitempty"`
	Home              *bool                             `json:"Home,omitempty"`
	ID                *string                           `json:"Id,omitempty"`
	Keywords          []string                          `json:"Keywords,omitempty"`
	Level             *ContractualRelationshipLevelEnum `json:"Level,omitempty"`
	ModificationDate  *string                           `json:"ModificationDate,omitempty"`
	Name              *string                           `json:"Name,omitempty"`
	Parent            *string                           `json:"Parent,omitempty"`
	Start             *string                           `json:"Start,omitempty"`
}
