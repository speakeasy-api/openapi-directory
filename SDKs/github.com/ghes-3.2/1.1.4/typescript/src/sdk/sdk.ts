/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Actions } from "./actions";
import { Activity } from "./activity";
import { Apps } from "./apps";
import { Checks } from "./checks";
import { CodeScanning } from "./codescanning";
import { CodesOfConduct } from "./codesofconduct";
import { Emojis } from "./emojis";
import { EnterpriseAdmin } from "./enterpriseadmin";
import { Gists } from "./gists";
import { Git } from "./git";
import { Gitignore } from "./gitignore";
import { Issues } from "./issues";
import { Licenses } from "./licenses";
import { Markdown } from "./markdown";
import { Meta } from "./meta";
import { OauthAuthorizations } from "./oauthauthorizations";
import { Orgs } from "./orgs";
import { Projects } from "./projects";
import { Pulls } from "./pulls";
import { RateLimit } from "./ratelimit";
import { Reactions } from "./reactions";
import { Repos } from "./repos";
import { Search } from "./search";
import { SecretScanning } from "./secretscanning";
import { Teams } from "./teams";
import { Users } from "./users";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "https://github.com/",
  "https://{protocol}://{hostname}/api/v3",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * GitHub's v3 REST API.
 *
 * @see {@link https://docs.github.com/enterprise-server@3.2/rest/} - GitHub Enterprise Developer Docs
 */
export class SDK {
  /**
   * Endpoints to manage GitHub Actions using the REST API.
   */
  public actions: Actions;
  /**
   * Activity APIs provide access to notifications, subscriptions, and timelines.
   */
  public activity: Activity;
  /**
   * Information for integrations and installations.
   */
  public apps: Apps;
  /**
   * Rich interactions with checks run by your integrations.
   */
  public checks: Checks;
  /**
   * Retrieve code scanning alerts from a repository.
   */
  public codeScanning: CodeScanning;
  /**
   * Insight into codes of conduct for your communities.
   */
  public codesOfConduct: CodesOfConduct;
  /**
   * List emojis available to use on GitHub.
   */
  public emojis: Emojis;
  /**
   * Administer a GitHub enterprise.
   */
  public enterpriseAdmin: EnterpriseAdmin;
  /**
   * View, modify your gists.
   */
  public gists: Gists;
  /**
   * Raw Git functionality.
   */
  public git: Git;
  /**
   * View gitignore templates
   */
  public gitignore: Gitignore;
  /**
   * Interact with GitHub Issues.
   */
  public issues: Issues;
  /**
   * View various OSS licenses.
   */
  public licenses: Licenses;
  /**
   * Render GitHub flavored markdown
   */
  public markdown: Markdown;
  /**
   * Endpoints that give information about the API.
   */
  public meta: Meta;
  public oauthAuthorizations: OauthAuthorizations;
  /**
   * Interact with GitHub Orgs.
   */
  public orgs: Orgs;
  /**
   * Interact with GitHub Projects.
   */
  public projects: Projects;
  /**
   * Interact with GitHub Pull Requests.
   */
  public pulls: Pulls;
  /**
   * Check your current rate limit status
   */
  public rateLimit: RateLimit;
  /**
   * Interact with reactions to various GitHub entities.
   */
  public reactions: Reactions;
  /**
   * Interact with GitHub Repos.
   */
  public repos: Repos;
  /**
   * Look for stuff on GitHub.
   */
  public search: Search;
  /**
   * Retrieve secret scanning alerts from a repository.
   */
  public secretScanning: SecretScanning;
  /**
   * Interact with GitHub Teams.
   */
  public teams: Teams;
  /**
   * Interact with and view information about users and also current user.
   */
  public users: Users;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.actions = new Actions(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.activity = new Activity(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.apps = new Apps(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.checks = new Checks(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.codeScanning = new CodeScanning(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.codesOfConduct = new CodesOfConduct(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.emojis = new Emojis(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.enterpriseAdmin = new EnterpriseAdmin(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.gists = new Gists(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.git = new Git(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.gitignore = new Gitignore(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.issues = new Issues(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.licenses = new Licenses(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.markdown = new Markdown(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.meta = new Meta(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.oauthAuthorizations = new OauthAuthorizations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.orgs = new Orgs(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.projects = new Projects(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.pulls = new Pulls(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.rateLimit = new RateLimit(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.reactions = new Reactions(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.repos = new Repos(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.search = new Search(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.secretScanning = new SecretScanning(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.teams = new Teams(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.users = new Users(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
