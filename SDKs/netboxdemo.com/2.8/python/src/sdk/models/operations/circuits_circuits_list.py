"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import circuit as shared_circuit
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class CircuitsCircuitsListRequest:
    
    cid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cid', 'style': 'form', 'explode': True }})  
    cid_ic: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cid__ic', 'style': 'form', 'explode': True }})  
    cid_ie: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cid__ie', 'style': 'form', 'explode': True }})  
    cid_iew: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cid__iew', 'style': 'form', 'explode': True }})  
    cid_isw: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cid__isw', 'style': 'form', 'explode': True }})  
    cid_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cid__n', 'style': 'form', 'explode': True }})  
    cid_nic: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cid__nic', 'style': 'form', 'explode': True }})  
    cid_nie: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cid__nie', 'style': 'form', 'explode': True }})  
    cid_niew: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cid__niew', 'style': 'form', 'explode': True }})  
    cid_nisw: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cid__nisw', 'style': 'form', 'explode': True }})  
    commit_rate: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'commit_rate', 'style': 'form', 'explode': True }})  
    commit_rate_gt: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'commit_rate__gt', 'style': 'form', 'explode': True }})  
    commit_rate_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'commit_rate__gte', 'style': 'form', 'explode': True }})  
    commit_rate_lt: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'commit_rate__lt', 'style': 'form', 'explode': True }})  
    commit_rate_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'commit_rate__lte', 'style': 'form', 'explode': True }})  
    commit_rate_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'commit_rate__n', 'style': 'form', 'explode': True }})  
    created: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'created', 'style': 'form', 'explode': True }})  
    created_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'created__gte', 'style': 'form', 'explode': True }})  
    created_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'created__lte', 'style': 'form', 'explode': True }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id', 'style': 'form', 'explode': True }})  
    id_gt: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id__gt', 'style': 'form', 'explode': True }})  
    id_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id__gte', 'style': 'form', 'explode': True }})  
    id_lt: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id__lt', 'style': 'form', 'explode': True }})  
    id_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id__lte', 'style': 'form', 'explode': True }})  
    id_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id__n', 'style': 'form', 'explode': True }})  
    install_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'install_date', 'style': 'form', 'explode': True }})  
    install_date_gt: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'install_date__gt', 'style': 'form', 'explode': True }})  
    install_date_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'install_date__gte', 'style': 'form', 'explode': True }})  
    install_date_lt: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'install_date__lt', 'style': 'form', 'explode': True }})  
    install_date_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'install_date__lte', 'style': 'form', 'explode': True }})  
    install_date_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'install_date__n', 'style': 'form', 'explode': True }})  
    last_updated: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'last_updated', 'style': 'form', 'explode': True }})  
    last_updated_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'last_updated__gte', 'style': 'form', 'explode': True }})  
    last_updated_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'last_updated__lte', 'style': 'form', 'explode': True }})  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Number of results to return per page."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""The initial index from which to return the results."""  
    provider: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'provider', 'style': 'form', 'explode': True }})  
    provider_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'provider__n', 'style': 'form', 'explode': True }})  
    provider_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'provider_id', 'style': 'form', 'explode': True }})  
    provider_id_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'provider_id__n', 'style': 'form', 'explode': True }})  
    q: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})  
    region: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'region', 'style': 'form', 'explode': True }})  
    region_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'region__n', 'style': 'form', 'explode': True }})  
    region_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'region_id', 'style': 'form', 'explode': True }})  
    region_id_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'region_id__n', 'style': 'form', 'explode': True }})  
    site: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'site', 'style': 'form', 'explode': True }})  
    site_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'site__n', 'style': 'form', 'explode': True }})  
    site_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'site_id', 'style': 'form', 'explode': True }})  
    site_id_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'site_id__n', 'style': 'form', 'explode': True }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})  
    status_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status__n', 'style': 'form', 'explode': True }})  
    tag: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tag', 'style': 'form', 'explode': True }})  
    tag_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tag__n', 'style': 'form', 'explode': True }})  
    tenant: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tenant', 'style': 'form', 'explode': True }})  
    tenant_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tenant__n', 'style': 'form', 'explode': True }})  
    tenant_group: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tenant_group', 'style': 'form', 'explode': True }})  
    tenant_group_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tenant_group__n', 'style': 'form', 'explode': True }})  
    tenant_group_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tenant_group_id', 'style': 'form', 'explode': True }})  
    tenant_group_id_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tenant_group_id__n', 'style': 'form', 'explode': True }})  
    tenant_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tenant_id', 'style': 'form', 'explode': True }})  
    tenant_id_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tenant_id__n', 'style': 'form', 'explode': True }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})  
    type_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type__n', 'style': 'form', 'explode': True }})  
    type_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type_id', 'style': 'form', 'explode': True }})  
    type_id_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type_id__n', 'style': 'form', 'explode': True }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CircuitsCircuitsList200ApplicationJSON:
    
    count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count') }})  
    results: list[shared_circuit.Circuit] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results') }})  
    next: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next'), 'exclude': lambda f: f is None }})  
    previous: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CircuitsCircuitsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    circuits_circuits_list_200_application_json_object: Optional[CircuitsCircuitsList200ApplicationJSON] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    