"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Pullrequests:
    r"""Pull requests are a feature that makes it easier for developers
    to collaborate using Bitbucket. They provide a user-friendly web
    interface for discussing proposed changes before integrating them
    into the official project.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_repositories_workspace_repo_slug_default_reviewers_target_username_(self, request: operations.DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameRequest, security: operations.DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameSecurity) -> operations.DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse:
        r"""Remove a user from the default reviewers
        Removes a default reviewer from the repository.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameRequest, base_url, '/repositories/{workspace}/{repo_slug}/default-reviewers/{target_username}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def delete_repositories_workspace_repo_slug_pullrequests_pull_request_id_approve(self, request: operations.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveRequest, security: operations.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveSecurity) -> operations.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveResponse:
        r"""Unapprove a pull request
        Redact the authenticated user's approval of the specified pull
        request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/approve', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def delete_repositories_workspace_repo_slug_pullrequests_pull_request_id_comments_comment_id_(self, request: operations.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDRequest, security: operations.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDSecurity) -> operations.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDResponse:
        r"""Delete a comment on a pull request
        Deletes a specific pull request comment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def delete_repositories_workspace_repo_slug_pullrequests_pull_request_id_request_changes(self, request: operations.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDRequestChangesRequest, security: operations.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDRequestChangesSecurity) -> operations.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDRequestChangesResponse:
        r"""Remove change request for a pull request"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDRequestChangesRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/request-changes', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDRequestChangesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_pullrequests_for_commit(self, request: operations.GetPullrequestsForCommitRequest) -> operations.GetPullrequestsForCommitResponse:
        r"""List pull requests that contain a commit
        Returns a paginated list of all pull requests as part of which this commit was reviewed. Pull Request Commit Links app must be installed first before using this API; installation automatically occurs when 'Go to pull request' is clicked from the web interface for a commit's details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPullrequestsForCommitRequest, base_url, '/repositories/{workspace}/{repo_slug}/commit/{commit}/pullrequests', request)
        
        query_params = utils.get_query_params(operations.GetPullrequestsForCommitRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPullrequestsForCommitResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 202]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedPullrequests])
                res.paginated_pullrequests = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_pullrequests_selected_user_(self, request: operations.GetPullrequestsSelectedUserRequest, security: operations.GetPullrequestsSelectedUserSecurity) -> operations.GetPullrequestsSelectedUserResponse:
        r"""List pull requests for a user
        Returns all pull requests authored by the specified user.
        
        By default only open pull requests are returned. This can be controlled
        using the `state` query parameter. To retrieve pull requests that are
        in one of multiple states, repeat the `state` parameter for each
        individual state.
        
        This endpoint also supports filtering and sorting of the results. See
        [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for more details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPullrequestsSelectedUserRequest, base_url, '/pullrequests/{selected_user}', request)
        
        query_params = utils.get_query_params(operations.GetPullrequestsSelectedUserRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPullrequestsSelectedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedPullrequests])
                res.paginated_pullrequests = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_default_reviewers(self, request: operations.GetRepositoriesWorkspaceRepoSlugDefaultReviewersRequest, security: operations.GetRepositoriesWorkspaceRepoSlugDefaultReviewersSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugDefaultReviewersResponse:
        r"""List default reviewers
        Returns the repository's default reviewers.
        
        These are the users that are automatically added as reviewers on every
        new pull request that is created. To obtain the repository's default reviewers
        as well as the default reviewers inherited from the project, use the
        [effective-default-reveiwers](#api-repositories-workspace-repo-slug-effective-default-reviewers-get) endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugDefaultReviewersRequest, base_url, '/repositories/{workspace}/{repo_slug}/default-reviewers', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugDefaultReviewersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedAccounts])
                res.paginated_accounts = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_default_reviewers_target_username_(self, request: operations.GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameRequest, security: operations.GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse:
        r"""Get a default reviewer
        Returns the specified reviewer.
        
        This can be used to test whether a user is among the repository's
        default reviewers list. A 404 indicates that that specified user is not
        a default reviewer.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameRequest, base_url, '/repositories/{workspace}/{repo_slug}/default-reviewers/{target_username}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.account = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_effective_default_reviewers(self, request: operations.GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersRequest, security: operations.GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersResponse:
        r"""List effective default reviewers
        Returns the repository's effective default reviewers. This includes both default
        reviewers defined at the repository level as well as those inherited from its project.
        
        These are the users that are automatically added as reviewers on every
        new pull request that is created.
        
        ```
        $ curl https://api.bitbucket.org/2.0/repositories/{workspace_slug}/{repo_slug}/effective-default-reviewers?page=1&pagelen=20
        {
            \"pagelen\": 20,
            \"values\": [
                {
                    \"user\": {
                        \"display_name\": \"Patrick Wolf\",
                        \"uuid\": \"{9565301a-a3cf-4b5d-88f4-dd6af8078d7e}\"
                    },
                    \"reviewer_type\": \"project\",
                    \"type\": \"default_reviewer\",
                },
                {
                    \"user\": {
                        \"display_name\": \"Davis Lee\",
                        \"uuid\": \"{f0e0e8e9-66c1-4b85-a784-44a9eb9ef1a6}\"
                    },
                    \"reviewer_type\": \"repository\",
                    \"type\": \"default_reviewer\",
                }
            ],
            \"page\": 1,
            \"size\": 2
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersRequest, base_url, '/repositories/{workspace}/{repo_slug}/effective-default-reviewers', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedDefaultReviewerAndType])
                res.paginated_default_reviewer_and_type = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_pullrequests(self, request: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsRequest, security: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugPullrequestsResponse:
        r"""List pull requests
        Returns all pull requests on the specified repository.
        
        By default only open pull requests are returned. This can be controlled
        using the `state` query parameter. To retrieve pull requests that are
        in one of multiple states, repeat the `state` parameter for each
        individual state.
        
        This endpoint also supports filtering and sorting of the results. See
        [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for more details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugPullrequestsRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests', request)
        
        query_params = utils.get_query_params(operations.GetRepositoriesWorkspaceRepoSlugPullrequestsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugPullrequestsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedPullrequests])
                res.paginated_pullrequests = out
        elif http_res.status_code == 401:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_pullrequests_activity(self, request: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsActivityRequest, security: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsActivitySecurity) -> operations.GetRepositoriesWorkspaceRepoSlugPullrequestsActivityResponse:
        r"""List a pull request activity log
        Returns a paginated list of the pull request's activity log.
        
        This handler serves both a v20 and internal endpoint. The v20 endpoint
        returns reviewer comments, updates, approvals and request changes. The internal
        endpoint includes those plus tasks and attachments.
        
        Comments created on a file or a line of code have an inline property.
        
        Comment example:
        ```
        {
            \"pagelen\": 20,
            \"values\": [
                {
                    \"comment\": {
                        \"links\": {
                            \"self\": {
                                \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695/comments/118571088\"
                            },
                            \"html\": {
                                \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695/_/diff#comment-118571088\"
                            }
                        },
                        \"deleted\": false,
                        \"pullrequest\": {
                            \"type\": \"pullrequest\",
                            \"id\": 5695,
                            \"links\": {
                                \"self\": {
                                    \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"
                                },
                                \"html\": {
                                    \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"
                                }
                            },
                            \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"
                        },
                        \"content\": {
                            \"raw\": \"inline with to a dn from lines\",
                            \"markup\": \"markdown\",
                            \"html\": \"<p>inline with to a dn from lines</p>\",
                            \"type\": \"rendered\"
                        },
                        \"created_on\": \"2019-09-27T00:33:46.039178+00:00\",
                        \"user\": {
                            \"display_name\": \"Name Lastname\",
                            \"uuid\": \"{}\",
                            \"links\": {
                                \"self\": {
                                    \"href\": \"https://api.bitbucket.org/2.0/users/%7B%7D\"
                                },
                                \"html\": {
                                    \"href\": \"https://bitbucket.org/%7B%7D/\"
                                },
                                \"avatar\": {
                                    \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128\"
                                }
                            },
                            \"type\": \"user\",
                            \"nickname\": \"Name\",
                            \"account_id\": \"\"
                        },
                        \"created_on\": \"2019-09-27T00:33:46.039178+00:00\",
                        \"user\": {
                            \"display_name\": \"Name Lastname\",
                            \"uuid\": \"{}\",
                            \"links\": {
                                \"self\": {
                                    \"href\": \"https://api.bitbucket.org/2.0/users/%7B%7D\"
                                },
                                \"html\": {
                                    \"href\": \"https://bitbucket.org/%7B%7D/\"
                                },
                                \"avatar\": {
                                    \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128\"
                                }
                            },
                            \"type\": \"user\",
                            \"nickname\": \"Name\",
                            \"account_id\": \"\"
                        },
                        \"updated_on\": \"2019-09-27T00:33:46.055384+00:00\",
                        \"inline\": {
                            \"context_lines\": \"\",
                            \"to\": null,
                            \"path\": \"\",
                            \"outdated\": false,
                            \"from\": 211
                        },
                        \"type\": \"pullrequest_comment\",
                        \"id\": 118571088
                    },
                    \"pull_request\": {
                        \"type\": \"pullrequest\",
                        \"id\": 5695,
                        \"links\": {
                            \"self\": {
                                \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"
                            },
                            \"html\": {
                                \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"
                            }
                        },
                        \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"
                    }
                }
            ]
        }
        ```
        
        Updates include a state property of OPEN, MERGED, or DECLINED.
        
        Update example:
        ```
        {
            \"pagelen\": 20,
            \"values\": [
                {
                    \"update\": {
                        \"description\": \"\",
                        \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\",
                        \"destination\": {
                            \"commit\": {
                                \"type\": \"commit\",
                                \"hash\": \"6a2c16e4a152\",
                                \"links\": {
                                    \"self\": {
                                        \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/commit/6a2c16e4a152\"
                                    },
                                    \"html\": {
                                        \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/commits/6a2c16e4a152\"
                                    }
                                }
                            },
                            \"branch\": {
                                \"name\": \"master\"
                            },
                            \"repository\": {
                                \"name\": \"Atlaskit-MK-2\",
                                \"type\": \"repository\",
                                \"full_name\": \"atlassian/atlaskit-mk-2\",
                                \"links\": {
                                    \"self\": {
                                        \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2\"
                                    },
                                    \"html\": {
                                        \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2\"
                                    },
                                    \"avatar\": {
                                        \"href\": \"https://bytebucket.org/ravatar/%7B%7D?ts=js\"
                                    }
                                },
                                \"uuid\": \"{}\"
                            }
                        },
                        \"reason\": \"\",
                        \"source\": {
                            \"commit\": {
                                \"type\": \"commit\",
                                \"hash\": \"728c8bad1813\",
                                \"links\": {
                                    \"self\": {
                                        \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/commit/728c8bad1813\"
                                    },
                                    \"html\": {
                                        \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/commits/728c8bad1813\"
                                    }
                                }
                            },
                            \"branch\": {
                                \"name\": \"username/NONE-add-onClick-prop-for-accessibility\"
                            },
                            \"repository\": {
                                \"name\": \"Atlaskit-MK-2\",
                                \"type\": \"repository\",
                                \"full_name\": \"atlassian/atlaskit-mk-2\",
                                \"links\": {
                                    \"self\": {
                                        \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2\"
                                    },
                                    \"html\": {
                                        \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2\"
                                    },
                                    \"avatar\": {
                                        \"href\": \"https://bytebucket.org/ravatar/%7B%7D?ts=js\"
                                    }
                                },
                                \"uuid\": \"{}\"
                            }
                        },
                        \"state\": \"OPEN\",
                        \"author\": {
                            \"display_name\": \"Name Lastname\",
                            \"uuid\": \"{}\",
                            \"links\": {
                                \"self\": {
                                    \"href\": \"https://api.bitbucket.org/2.0/users/%7B%7D\"
                                },
                                \"html\": {
                                    \"href\": \"https://bitbucket.org/%7B%7D/\"
                                },
                                \"avatar\": {
                                    \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128\"
                                }
                            },
                            \"type\": \"user\",
                            \"nickname\": \"Name\",
                            \"account_id\": \"\"
                        },
                        \"date\": \"2019-05-10T06:48:25.305565+00:00\"
                    },
                    \"pull_request\": {
                        \"type\": \"pullrequest\",
                        \"id\": 5695,
                        \"links\": {
                            \"self\": {
                                \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"
                            },
                            \"html\": {
                                \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"
                            }
                        },
                        \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"
                    }
                }
            ]
        }
        ```
        
        Approval example:
        ```
        {
            \"pagelen\": 20,
            \"values\": [
                {
                    \"approval\": {
                        \"date\": \"2019-09-27T00:37:19.849534+00:00\",
                        \"pullrequest\": {
                            \"type\": \"pullrequest\",
                            \"id\": 5695,
                            \"links\": {
                                \"self\": {
                                    \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"
                                },
                                \"html\": {
                                    \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"
                                }
                            },
                            \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"
                        },
                        \"user\": {
                            \"display_name\": \"Name Lastname\",
                            \"uuid\": \"{}\",
                            \"links\": {
                                \"self\": {
                                    \"href\": \"https://api.bitbucket.org/2.0/users/%7B%7D\"
                                },
                                \"html\": {
                                    \"href\": \"https://bitbucket.org/%7B%7D/\"
                                },
                                \"avatar\": {
                                    \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128\"
                                }
                            },
                            \"type\": \"user\",
                            \"nickname\": \"Name\",
                            \"account_id\": \"\"
                        }
                    },
                    \"pull_request\": {
                        \"type\": \"pullrequest\",
                        \"id\": 5695,
                        \"links\": {
                            \"self\": {
                                \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"
                            },
                            \"html\": {
                                \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"
                            }
                        },
                        \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"
                    }
                }
            ]
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugPullrequestsActivityRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/activity', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugPullrequestsActivityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 401]:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_pullrequests_pull_request_id_(self, request: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDRequest, security: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDResponse:
        r"""Get a pull request
        Returns the specified pull request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.pullrequest = out
        elif http_res.status_code == 401:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_pullrequests_pull_request_id_activity(self, request: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityRequest, security: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivitySecurity) -> operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityResponse:
        r"""List a pull request activity log
        Returns a paginated list of the pull request's activity log.
        
        This handler serves both a v20 and internal endpoint. The v20 endpoint
        returns reviewer comments, updates, approvals and request changes. The internal
        endpoint includes those plus tasks and attachments.
        
        Comments created on a file or a line of code have an inline property.
        
        Comment example:
        ```
        {
            \"pagelen\": 20,
            \"values\": [
                {
                    \"comment\": {
                        \"links\": {
                            \"self\": {
                                \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695/comments/118571088\"
                            },
                            \"html\": {
                                \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695/_/diff#comment-118571088\"
                            }
                        },
                        \"deleted\": false,
                        \"pullrequest\": {
                            \"type\": \"pullrequest\",
                            \"id\": 5695,
                            \"links\": {
                                \"self\": {
                                    \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"
                                },
                                \"html\": {
                                    \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"
                                }
                            },
                            \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"
                        },
                        \"content\": {
                            \"raw\": \"inline with to a dn from lines\",
                            \"markup\": \"markdown\",
                            \"html\": \"<p>inline with to a dn from lines</p>\",
                            \"type\": \"rendered\"
                        },
                        \"created_on\": \"2019-09-27T00:33:46.039178+00:00\",
                        \"user\": {
                            \"display_name\": \"Name Lastname\",
                            \"uuid\": \"{}\",
                            \"links\": {
                                \"self\": {
                                    \"href\": \"https://api.bitbucket.org/2.0/users/%7B%7D\"
                                },
                                \"html\": {
                                    \"href\": \"https://bitbucket.org/%7B%7D/\"
                                },
                                \"avatar\": {
                                    \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128\"
                                }
                            },
                            \"type\": \"user\",
                            \"nickname\": \"Name\",
                            \"account_id\": \"\"
                        },
                        \"created_on\": \"2019-09-27T00:33:46.039178+00:00\",
                        \"user\": {
                            \"display_name\": \"Name Lastname\",
                            \"uuid\": \"{}\",
                            \"links\": {
                                \"self\": {
                                    \"href\": \"https://api.bitbucket.org/2.0/users/%7B%7D\"
                                },
                                \"html\": {
                                    \"href\": \"https://bitbucket.org/%7B%7D/\"
                                },
                                \"avatar\": {
                                    \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128\"
                                }
                            },
                            \"type\": \"user\",
                            \"nickname\": \"Name\",
                            \"account_id\": \"\"
                        },
                        \"updated_on\": \"2019-09-27T00:33:46.055384+00:00\",
                        \"inline\": {
                            \"context_lines\": \"\",
                            \"to\": null,
                            \"path\": \"\",
                            \"outdated\": false,
                            \"from\": 211
                        },
                        \"type\": \"pullrequest_comment\",
                        \"id\": 118571088
                    },
                    \"pull_request\": {
                        \"type\": \"pullrequest\",
                        \"id\": 5695,
                        \"links\": {
                            \"self\": {
                                \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"
                            },
                            \"html\": {
                                \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"
                            }
                        },
                        \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"
                    }
                }
            ]
        }
        ```
        
        Updates include a state property of OPEN, MERGED, or DECLINED.
        
        Update example:
        ```
        {
            \"pagelen\": 20,
            \"values\": [
                {
                    \"update\": {
                        \"description\": \"\",
                        \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\",
                        \"destination\": {
                            \"commit\": {
                                \"type\": \"commit\",
                                \"hash\": \"6a2c16e4a152\",
                                \"links\": {
                                    \"self\": {
                                        \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/commit/6a2c16e4a152\"
                                    },
                                    \"html\": {
                                        \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/commits/6a2c16e4a152\"
                                    }
                                }
                            },
                            \"branch\": {
                                \"name\": \"master\"
                            },
                            \"repository\": {
                                \"name\": \"Atlaskit-MK-2\",
                                \"type\": \"repository\",
                                \"full_name\": \"atlassian/atlaskit-mk-2\",
                                \"links\": {
                                    \"self\": {
                                        \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2\"
                                    },
                                    \"html\": {
                                        \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2\"
                                    },
                                    \"avatar\": {
                                        \"href\": \"https://bytebucket.org/ravatar/%7B%7D?ts=js\"
                                    }
                                },
                                \"uuid\": \"{}\"
                            }
                        },
                        \"reason\": \"\",
                        \"source\": {
                            \"commit\": {
                                \"type\": \"commit\",
                                \"hash\": \"728c8bad1813\",
                                \"links\": {
                                    \"self\": {
                                        \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/commit/728c8bad1813\"
                                    },
                                    \"html\": {
                                        \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/commits/728c8bad1813\"
                                    }
                                }
                            },
                            \"branch\": {
                                \"name\": \"username/NONE-add-onClick-prop-for-accessibility\"
                            },
                            \"repository\": {
                                \"name\": \"Atlaskit-MK-2\",
                                \"type\": \"repository\",
                                \"full_name\": \"atlassian/atlaskit-mk-2\",
                                \"links\": {
                                    \"self\": {
                                        \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2\"
                                    },
                                    \"html\": {
                                        \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2\"
                                    },
                                    \"avatar\": {
                                        \"href\": \"https://bytebucket.org/ravatar/%7B%7D?ts=js\"
                                    }
                                },
                                \"uuid\": \"{}\"
                            }
                        },
                        \"state\": \"OPEN\",
                        \"author\": {
                            \"display_name\": \"Name Lastname\",
                            \"uuid\": \"{}\",
                            \"links\": {
                                \"self\": {
                                    \"href\": \"https://api.bitbucket.org/2.0/users/%7B%7D\"
                                },
                                \"html\": {
                                    \"href\": \"https://bitbucket.org/%7B%7D/\"
                                },
                                \"avatar\": {
                                    \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128\"
                                }
                            },
                            \"type\": \"user\",
                            \"nickname\": \"Name\",
                            \"account_id\": \"\"
                        },
                        \"date\": \"2019-05-10T06:48:25.305565+00:00\"
                    },
                    \"pull_request\": {
                        \"type\": \"pullrequest\",
                        \"id\": 5695,
                        \"links\": {
                            \"self\": {
                                \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"
                            },
                            \"html\": {
                                \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"
                            }
                        },
                        \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"
                    }
                }
            ]
        }
        ```
        
        Approval example:
        ```
        {
            \"pagelen\": 20,
            \"values\": [
                {
                    \"approval\": {
                        \"date\": \"2019-09-27T00:37:19.849534+00:00\",
                        \"pullrequest\": {
                            \"type\": \"pullrequest\",
                            \"id\": 5695,
                            \"links\": {
                                \"self\": {
                                    \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"
                                },
                                \"html\": {
                                    \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"
                                }
                            },
                            \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"
                        },
                        \"user\": {
                            \"display_name\": \"Name Lastname\",
                            \"uuid\": \"{}\",
                            \"links\": {
                                \"self\": {
                                    \"href\": \"https://api.bitbucket.org/2.0/users/%7B%7D\"
                                },
                                \"html\": {
                                    \"href\": \"https://bitbucket.org/%7B%7D/\"
                                },
                                \"avatar\": {
                                    \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128\"
                                }
                            },
                            \"type\": \"user\",
                            \"nickname\": \"Name\",
                            \"account_id\": \"\"
                        }
                    },
                    \"pull_request\": {
                        \"type\": \"pullrequest\",
                        \"id\": 5695,
                        \"links\": {
                            \"self\": {
                                \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"
                            },
                            \"html\": {
                                \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"
                            }
                        },
                        \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"
                    }
                }
            ]
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/activity', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 401]:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_pullrequests_pull_request_id_comments(self, request: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsRequest, security: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsResponse:
        r"""List comments on a pull request
        Returns a paginated list of the pull request's comments.
        
        This includes both global, inline comments and replies.
        
        The default sorting is oldest to newest and can be overridden with
        the `sort` query parameter.
        
        This endpoint also supports filtering and sorting of the results. See
        [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for more
        details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedPullrequestComments])
                res.paginated_pullrequest_comments = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_pullrequests_pull_request_id_comments_comment_id_(self, request: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDRequest, security: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDResponse:
        r"""Get a comment on a pull request
        Returns a specific pull request comment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.pullrequest_comment = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_pullrequests_pull_request_id_commits(self, request: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommitsRequest, security: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommitsSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommitsResponse:
        r"""List commits on a pull request
        Returns a paginated list of the pull request's commits.
        
        These are the commits that are being merged into the destination
        branch when the pull requests gets accepted.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommitsRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/commits', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommitsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_pullrequests_pull_request_id_diff(self, request: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffRequest, security: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffResponse:
        r"""List changes in a pull request
        Redirects to the [repository diff](/cloud/bitbucket/rest/api-group-commits/#api-repositories-workspace-repo-slug-diff-spec-get)
        with the revspec that corresponds to the pull request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/diff', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_repositories_workspace_repo_slug_pullrequests_pull_request_id_diffstat(self, request: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffstatRequest, security: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffstatSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffstatResponse:
        r"""Get the diff stat for a pull request
        Redirects to the [repository diffstat](/cloud/bitbucket/rest/api-group-commits/#api-repositories-workspace-repo-slug-diffstat-spec-get)
        with the revspec that corresponds to the pull request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffstatRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/diffstat', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffstatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_repositories_workspace_repo_slug_pullrequests_pull_request_id_merge_task_status_task_id_(self, request: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskIDRequest, security: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskIDSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskIDResponse:
        r"""Get the merge task status for a pull request
        When merging a pull request takes too long, the client receives a
        task ID along with a 202 status code. The task ID can be used in a call
        to this endpoint to check the status of a merge task.
        
        ```
        curl -X GET https://api.bitbucket.org/2.0/repositories/atlassian/bitbucket/pullrequests/2286/merge/task-status/<task_id>
        ```
        
        If the merge task is not yet finished, a PENDING status will be returned.
        
        ```
        HTTP/2 200
        {
            \"task_status\": \"PENDING\",
            \"links\": {
                \"self\": {
                    \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/bitbucket/pullrequests/2286/merge/task-status/<task_id>\"
                }
            }
        }
        ```
        
        If the merge was successful, a SUCCESS status will be returned.
        
        ```
        HTTP/2 200
        {
            \"task_status\": \"SUCCESS\",
            \"links\": {
                \"self\": {
                    \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/bitbucket/pullrequests/2286/merge/task-status/<task_id>\"
                }
            },
            \"merge_result\": <the merged pull request object>
        }
        ```
        
        If the merge task failed, an error will be returned.
        
        ```
        {
            \"type\": \"error\",
            \"error\": {
                \"message\": \"<error message>\"
            }
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskIDRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/merge/task-status/{task_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_repositories_workspace_repo_slug_pullrequests_pull_request_id_patch(self, request: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDPatchRequest, security: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDPatchSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDPatchResponse:
        r"""Get the patch for a pull request
        Redirects to the [repository patch](/cloud/bitbucket/rest/api-group-commits/#api-repositories-workspace-repo-slug-patch-spec-get)
        with the revspec that corresponds to pull request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDPatchRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/patch', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_repositories_workspace_repo_slug_pullrequests_pull_request_id_statuses(self, request: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesRequest, security: operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesResponse:
        r"""List commit statuses for a pull request
        Returns all statuses (e.g. build results) for the given pull
        request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/statuses', request)
        
        query_params = utils.get_query_params(operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedCommitstatuses])
                res.paginated_commitstatuses = out
        elif http_res.status_code == 401:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def post_repositories_workspace_repo_slug_pullrequests(self, request: operations.PostRepositoriesWorkspaceRepoSlugPullrequestsRequest, security: operations.PostRepositoriesWorkspaceRepoSlugPullrequestsSecurity) -> operations.PostRepositoriesWorkspaceRepoSlugPullrequestsResponse:
        r"""Create a pull request
        Creates a new pull request where the destination repository is
        this repository and the author is the authenticated user.
        
        The minimum required fields to create a pull request are `title` and
        `source`, specified by a branch name.
        
        ```
        curl https://api.bitbucket.org/2.0/repositories/my-workspace/my-repository/pullrequests \
            -u my-username:my-password \
            --request POST \
            --header 'Content-Type: application/json' \
            --data '{
                \"title\": \"My Title\",
                \"source\": {
                    \"branch\": {
                        \"name\": \"staging\"
                    }
                }
            }'
        ```
        
        If the pull request's `destination` is not specified, it will default
        to the `repository.mainbranch`. To open a pull request to a
        different branch, say from a feature branch to a staging branch,
        specify a `destination` (same format as the `source`):
        
        ```
        {
            \"title\": \"My Title\",
            \"source\": {
                \"branch\": {
                    \"name\": \"my-feature-branch\"
                }
            },
            \"destination\": {
                \"branch\": {
                    \"name\": \"staging\"
                }
            }
        }
        ```
        
        Reviewers can be specified by adding an array of user objects as the
        `reviewers` property.
        
        ```
        {
            \"title\": \"My Title\",
            \"source\": {
                \"branch\": {
                    \"name\": \"my-feature-branch\"
                }
            },
            \"reviewers\": [
                {
                    \"uuid\": \"{504c3b62-8120-4f0c-a7bc-87800b9d6f70}\"
                }
            ]
        }
        ```
        
        Other fields:
        
        * `description` - a string
        * `close_source_branch` - boolean that specifies if the source branch should be closed upon merging
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRepositoriesWorkspaceRepoSlugPullrequestsRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRepositoriesWorkspaceRepoSlugPullrequestsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.pullrequest = out
        elif http_res.status_code in [400, 401]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def post_repositories_workspace_repo_slug_pullrequests_pull_request_id_approve(self, request: operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveRequest, security: operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveSecurity) -> operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveResponse:
        r"""Approve a pull request
        Approve the specified pull request as the authenticated user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/approve', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.participant = out
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def post_repositories_workspace_repo_slug_pullrequests_pull_request_id_comments(self, request: operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsRequest, security: operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsSecurity) -> operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsResponse:
        r"""Create a comment on a pull request
        Creates a new pull request comment.
        
        Returns the newly created pull request comment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.pullrequest_comment = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def post_repositories_workspace_repo_slug_pullrequests_pull_request_id_decline(self, request: operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDeclineRequest, security: operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDeclineSecurity) -> operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDeclineResponse:
        r"""Decline a pull request
        Declines the pull request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDeclineRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/decline', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDeclineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.pullrequest = out
        elif http_res.status_code == 555:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def post_repositories_workspace_repo_slug_pullrequests_pull_request_id_merge(self, request: operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeRequest, security: operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeSecurity) -> operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeResponse:
        r"""Merge a pull request
        Merges the pull request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/merge', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.pullrequest = out
        elif http_res.status_code == 202:
            pass
        elif http_res.status_code == 555:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def post_repositories_workspace_repo_slug_pullrequests_pull_request_id_request_changes(self, request: operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDRequestChangesRequest, security: operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDRequestChangesSecurity) -> operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDRequestChangesResponse:
        r"""Request changes for a pull request"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDRequestChangesRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/request-changes', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDRequestChangesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.participant = out
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def put_repositories_workspace_repo_slug_default_reviewers_target_username_(self, request: operations.PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameRequest, security: operations.PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameSecurity) -> operations.PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse:
        r"""Add a user to the default reviewers
        Adds the specified user to the repository's list of default
        reviewers.
        
        This method is idempotent. Adding a user a second time has no effect.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameRequest, base_url, '/repositories/{workspace}/{repo_slug}/default-reviewers/{target_username}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.account = out
        elif http_res.status_code in [400, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def put_repositories_workspace_repo_slug_pullrequests_pull_request_id_(self, request: operations.PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDRequest, security: operations.PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDSecurity) -> operations.PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDResponse:
        r"""Update a pull request
        Mutates the specified pull request.
        
        This can be used to change the pull request's branches or description.
        
        Only open pull requests can be mutated.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.pullrequest = out
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def put_repositories_workspace_repo_slug_pullrequests_pull_request_id_comments_comment_id_(self, request: operations.PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDRequest, security: operations.PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDSecurity) -> operations.PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDResponse:
        r"""Update a comment on a pull request
        Updates a specific pull request comment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.pullrequest_comment = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    