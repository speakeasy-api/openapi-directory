"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import repository_pre_receive_hook as shared_repository_pre_receive_hook
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequestBodyEnforcementEnum(str, Enum):
    r"""The state of enforcement for the hook on this repository."""
    ENABLED = 'enabled'
    DISABLED = 'disabled'
    TESTING = 'testing'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequestBody:
    
    enforcement: Optional[EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequestBodyEnforcementEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforcement'), 'exclude': lambda f: f is None }})
    r"""The state of enforcement for the hook on this repository."""  
    

@dataclasses.dataclass
class EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    pre_receive_hook_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'pre_receive_hook_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the pre-receive hook."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    request_body: Optional[EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    repository_pre_receive_hook: Optional[shared_repository_pre_receive_hook.RepositoryPreReceiveHook] = dataclasses.field(default=None)
    r"""Response"""  
    