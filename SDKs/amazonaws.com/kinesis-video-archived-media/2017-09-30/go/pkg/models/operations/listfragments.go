// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

// ListFragmentsRequestBodyFragmentSelector - <p>Describes the timestamp range and timestamp origin of a range of fragments.</p> <p>Only fragments with a start timestamp greater than or equal to the given start time and less than or equal to the end time are returned. For example, if a stream contains fragments with the following start timestamps: </p> <ul> <li> <p>00:00:00</p> </li> <li> <p>00:00:02</p> </li> <li> <p>00:00:04</p> </li> <li> <p>00:00:06</p> </li> </ul> <p> A fragment selector range with a start time of 00:00:01 and end time of 00:00:04 would return the fragments with start times of 00:00:02 and 00:00:04. </p>
type ListFragmentsRequestBodyFragmentSelector struct {
	FragmentSelectorType *shared.FragmentSelectorTypeEnum `json:"FragmentSelectorType,omitempty"`
	TimestampRange       *shared.TimestampRange           `json:"TimestampRange,omitempty"`
}

type ListFragmentsRequestBody struct {
	// <p>Describes the timestamp range and timestamp origin of a range of fragments.</p> <p>Only fragments with a start timestamp greater than or equal to the given start time and less than or equal to the end time are returned. For example, if a stream contains fragments with the following start timestamps: </p> <ul> <li> <p>00:00:00</p> </li> <li> <p>00:00:02</p> </li> <li> <p>00:00:04</p> </li> <li> <p>00:00:06</p> </li> </ul> <p> A fragment selector range with a start time of 00:00:01 and end time of 00:00:04 would return the fragments with start times of 00:00:02 and 00:00:04. </p>
	FragmentSelector *ListFragmentsRequestBodyFragmentSelector `json:"FragmentSelector,omitempty"`
	// The total number of fragments to return. If the total number of fragments available is more than the value specified in <code>max-results</code>, then a <a>ListFragmentsOutput$NextToken</a> is provided in the output that you can use to resume pagination.
	MaxResults *int64 `json:"MaxResults,omitempty"`
	// A token to specify where to start paginating. This is the <a>ListFragmentsOutput$NextToken</a> from a previously truncated response.
	NextToken *string `json:"NextToken,omitempty"`
	// The Amazon Resource Name (ARN) of the stream from which to retrieve a fragment list. Specify either this parameter or the <code>StreamName</code> parameter.
	StreamARN *string `json:"StreamARN,omitempty"`
	// The name of the stream from which to retrieve a fragment list. Specify either this parameter or the <code>StreamARN</code> parameter.
	StreamName *string `json:"StreamName,omitempty"`
}

type ListFragmentsRequest struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken         *string                  `queryParam:"style=form,explode=true,name=NextToken"`
	RequestBody       ListFragmentsRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type ListFragmentsResponse struct {
	// ClientLimitExceededException
	ClientLimitExceededException interface{}
	ContentType                  string
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// Success
	ListFragmentsOutput *shared.ListFragmentsOutput
	// NotAuthorizedException
	NotAuthorizedException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
