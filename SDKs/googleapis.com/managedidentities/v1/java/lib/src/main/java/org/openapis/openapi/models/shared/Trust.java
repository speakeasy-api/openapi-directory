/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Trust - Represents a relationship between two domains. This allows a controller in one domain to authenticate a user in another domain. If the trust is being changed, it will be placed into the UPDATING state, which indicates that the resource is being reconciled. At this point, Get will reflect an intermediate state.
 */
public class Trust {
    /**
     * Output only. The time the instance was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Trust withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. The last heartbeat time when the trust was known to be connected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastTrustHeartbeatTime")
    public String lastTrustHeartbeatTime;
    public Trust withLastTrustHeartbeatTime(String lastTrustHeartbeatTime) {
        this.lastTrustHeartbeatTime = lastTrustHeartbeatTime;
        return this;
    }
    
    /**
     * Optional. The trust authentication type, which decides whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectiveAuthentication")
    public Boolean selectiveAuthentication;
    public Trust withSelectiveAuthentication(Boolean selectiveAuthentication) {
        this.selectiveAuthentication = selectiveAuthentication;
        return this;
    }
    
    /**
     * Output only. The current state of the trust.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public TrustStateEnum state;
    public Trust withState(TrustStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. Additional information about the current state of the trust, if available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stateDescription")
    public String stateDescription;
    public Trust withStateDescription(String stateDescription) {
        this.stateDescription = stateDescription;
        return this;
    }
    
    /**
     * Required. The target DNS server IP addresses which can resolve the remote domain involved in the trust.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetDnsIpAddresses")
    public String[] targetDnsIpAddresses;
    public Trust withTargetDnsIpAddresses(String[] targetDnsIpAddresses) {
        this.targetDnsIpAddresses = targetDnsIpAddresses;
        return this;
    }
    
    /**
     * Required. The fully qualified target domain name which will be in trust with the current domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetDomainName")
    public String targetDomainName;
    public Trust withTargetDomainName(String targetDomainName) {
        this.targetDomainName = targetDomainName;
        return this;
    }
    
    /**
     * Required. The trust direction, which decides if the current domain is trusted, trusting, or both.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustDirection")
    public TrustTrustDirectionEnum trustDirection;
    public Trust withTrustDirection(TrustTrustDirectionEnum trustDirection) {
        this.trustDirection = trustDirection;
        return this;
    }
    
    /**
     * Required. The trust secret used for the handshake with the target domain. This will not be stored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustHandshakeSecret")
    public String trustHandshakeSecret;
    public Trust withTrustHandshakeSecret(String trustHandshakeSecret) {
        this.trustHandshakeSecret = trustHandshakeSecret;
        return this;
    }
    
    /**
     * Required. The type of trust represented by the trust resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustType")
    public TrustTrustTypeEnum trustType;
    public Trust withTrustType(TrustTrustTypeEnum trustType) {
        this.trustType = trustType;
        return this;
    }
    
    /**
     * Output only. The last update time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Trust withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
