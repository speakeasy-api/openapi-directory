// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetSectionFormatFormatEnum - if this is JSONP or JSON
type GetSectionFormatFormatEnum string

const (
	GetSectionFormatFormatEnumJSON  GetSectionFormatFormatEnum = "json"
	GetSectionFormatFormatEnumJsonp GetSectionFormatFormatEnum = "jsonp"
)

func (e *GetSectionFormatFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "jsonp":
		*e = GetSectionFormatFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSectionFormatFormatEnum: %s", s)
	}
}

// GetSectionFormatSectionEnum - The section the story appears in.
type GetSectionFormatSectionEnum string

const (
	GetSectionFormatSectionEnumHome         GetSectionFormatSectionEnum = "home"
	GetSectionFormatSectionEnumOpinion      GetSectionFormatSectionEnum = "opinion"
	GetSectionFormatSectionEnumWorld        GetSectionFormatSectionEnum = "world"
	GetSectionFormatSectionEnumNational     GetSectionFormatSectionEnum = "national"
	GetSectionFormatSectionEnumPolitics     GetSectionFormatSectionEnum = "politics"
	GetSectionFormatSectionEnumUpshot       GetSectionFormatSectionEnum = "upshot"
	GetSectionFormatSectionEnumNyregion     GetSectionFormatSectionEnum = "nyregion"
	GetSectionFormatSectionEnumBusiness     GetSectionFormatSectionEnum = "business"
	GetSectionFormatSectionEnumTechnology   GetSectionFormatSectionEnum = "technology"
	GetSectionFormatSectionEnumScience      GetSectionFormatSectionEnum = "science"
	GetSectionFormatSectionEnumHealth       GetSectionFormatSectionEnum = "health"
	GetSectionFormatSectionEnumSports       GetSectionFormatSectionEnum = "sports"
	GetSectionFormatSectionEnumArts         GetSectionFormatSectionEnum = "arts"
	GetSectionFormatSectionEnumBooks        GetSectionFormatSectionEnum = "books"
	GetSectionFormatSectionEnumMovies       GetSectionFormatSectionEnum = "movies"
	GetSectionFormatSectionEnumTheater      GetSectionFormatSectionEnum = "theater"
	GetSectionFormatSectionEnumSundayreview GetSectionFormatSectionEnum = "sundayreview"
	GetSectionFormatSectionEnumFashion      GetSectionFormatSectionEnum = "fashion"
	GetSectionFormatSectionEnumTmagazine    GetSectionFormatSectionEnum = "tmagazine"
	GetSectionFormatSectionEnumFood         GetSectionFormatSectionEnum = "food"
	GetSectionFormatSectionEnumTravel       GetSectionFormatSectionEnum = "travel"
	GetSectionFormatSectionEnumMagazine     GetSectionFormatSectionEnum = "magazine"
	GetSectionFormatSectionEnumRealestate   GetSectionFormatSectionEnum = "realestate"
	GetSectionFormatSectionEnumAutomobiles  GetSectionFormatSectionEnum = "automobiles"
	GetSectionFormatSectionEnumObituaries   GetSectionFormatSectionEnum = "obituaries"
	GetSectionFormatSectionEnumInsider      GetSectionFormatSectionEnum = "insider"
)

func (e *GetSectionFormatSectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "home":
		fallthrough
	case "opinion":
		fallthrough
	case "world":
		fallthrough
	case "national":
		fallthrough
	case "politics":
		fallthrough
	case "upshot":
		fallthrough
	case "nyregion":
		fallthrough
	case "business":
		fallthrough
	case "technology":
		fallthrough
	case "science":
		fallthrough
	case "health":
		fallthrough
	case "sports":
		fallthrough
	case "arts":
		fallthrough
	case "books":
		fallthrough
	case "movies":
		fallthrough
	case "theater":
		fallthrough
	case "sundayreview":
		fallthrough
	case "fashion":
		fallthrough
	case "tmagazine":
		fallthrough
	case "food":
		fallthrough
	case "travel":
		fallthrough
	case "magazine":
		fallthrough
	case "realestate":
		fallthrough
	case "automobiles":
		fallthrough
	case "obituaries":
		fallthrough
	case "insider":
		*e = GetSectionFormatSectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSectionFormatSectionEnum: %s", s)
	}
}

type GetSectionFormatRequest struct {
	// The name of the function the API call results will be passed to. Required when using JSONP. This parameter has only one valid value per section. The format is {section_name}TopStoriesCallback.
	//
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// if this is JSONP or JSON
	Format GetSectionFormatFormatEnum `pathParam:"style=simple,explode=false,name=format"`
	// The section the story appears in.
	Section GetSectionFormatSectionEnum `pathParam:"style=simple,explode=false,name=section"`
}

// GetSectionFormat200ApplicationJSON - An array of articles
type GetSectionFormat200ApplicationJSON struct {
	Results []shared.Article `json:"results,omitempty"`
}

type GetSectionFormatResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// An array of articles
	GetSectionFormat200ApplicationJSONObject *GetSectionFormat200ApplicationJSON
}
