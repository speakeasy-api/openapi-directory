"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DimensionFilterOperatorEnum(str, Enum):
    r"""How to match the dimension to the expression. The default is REGEXP."""
    OPERATOR_UNSPECIFIED = 'OPERATOR_UNSPECIFIED'
    REGEXP = 'REGEXP'
    BEGINS_WITH = 'BEGINS_WITH'
    ENDS_WITH = 'ENDS_WITH'
    PARTIAL = 'PARTIAL'
    EXACT = 'EXACT'
    NUMERIC_EQUAL = 'NUMERIC_EQUAL'
    NUMERIC_GREATER_THAN = 'NUMERIC_GREATER_THAN'
    NUMERIC_LESS_THAN = 'NUMERIC_LESS_THAN'
    IN_LIST = 'IN_LIST'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DimensionFilter:
    r"""Dimension filter specifies the filtering options on a dimension."""
    
    case_sensitive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caseSensitive'), 'exclude': lambda f: f is None }})
    r"""Should the match be case sensitive? Default is false."""  
    dimension_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimensionName'), 'exclude': lambda f: f is None }})
    r"""The dimension to filter on. A DimensionFilter must contain a dimension."""  
    expressions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expressions'), 'exclude': lambda f: f is None }})
    r"""Strings or regular expression to match against. Only the first value of the list is used for comparison unless the operator is `IN_LIST`. If `IN_LIST` operator, then the entire list is used to filter the dimensions as explained in the description of the `IN_LIST` operator."""  
    not_: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('not'), 'exclude': lambda f: f is None }})
    r"""Logical `NOT` operator. If this boolean is set to true, then the matching dimension values will be excluded in the report. The default is false."""  
    operator: Optional[DimensionFilterOperatorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operator'), 'exclude': lambda f: f is None }})
    r"""How to match the dimension to the expression. The default is REGEXP."""  
    