"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Employees:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_employee(self, request: operations.CreateEmployeeRequest) -> operations.CreateEmployeeResponse:
        r"""Create Employee
        When you add employees to your group, youâ€™ll pass information like their hire date, employment status, and basic demographic information (address, DOB, SSN, etc.).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateEmployeeRequest, base_url, '/api/v1/groups/{group_id}/employees', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "employee_create_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EmployeeResult])
                res.employee_result = out

        return res

    def edit_employee(self, request: operations.EditEmployeeRequest) -> operations.EditEmployeeResponse:
        r"""Edit an Employee
        Edit an employee based on the ID provided. The version parameter must match the latest employee version.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditEmployeeRequest, base_url, '/api/v1/employees/{employee_id}/{version}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "employee_edit_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EmployeeResult])
                res.employee_result = out

        return res

    def get_employee(self, request: operations.GetEmployeeRequest) -> operations.GetEmployeeResponse:
        r"""Get Employee
        Returns the latest version of a single employee based on the ID provided.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEmployeeRequest, base_url, '/api/v1/employees/{employee_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EmployeeResult])
                res.employee_result = out

        return res

    def get_group_employees_list(self, request: operations.GetGroupEmployeesListRequest) -> operations.GetGroupEmployeesListResponse:
        r"""Get all Group Employees
        Returns a list of all employees for a given group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGroupEmployeesListRequest, base_url, '/api/v1/groups/{group_id}/employees', request)
        
        query_params = utils.get_query_params(operations.GetGroupEmployeesListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGroupEmployeesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedEmployeeResult])
                res.paginated_employee_result = out

        return res

    