"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class IndexStatusInspectionResultCrawledAsEnum(str, Enum):
    r"""Primary crawler that was used by Google to crawl your site."""
    CRAWLING_USER_AGENT_UNSPECIFIED = 'CRAWLING_USER_AGENT_UNSPECIFIED'
    DESKTOP = 'DESKTOP'
    MOBILE = 'MOBILE'

class IndexStatusInspectionResultIndexingStateEnum(str, Enum):
    r"""Whether or not the page blocks indexing through a noindex rule."""
    INDEXING_STATE_UNSPECIFIED = 'INDEXING_STATE_UNSPECIFIED'
    INDEXING_ALLOWED = 'INDEXING_ALLOWED'
    BLOCKED_BY_META_TAG = 'BLOCKED_BY_META_TAG'
    BLOCKED_BY_HTTP_HEADER = 'BLOCKED_BY_HTTP_HEADER'
    BLOCKED_BY_ROBOTS_TXT = 'BLOCKED_BY_ROBOTS_TXT'

class IndexStatusInspectionResultPageFetchStateEnum(str, Enum):
    r"""Whether or not Google could retrieve the page from your server. Equivalent to [\\"page fetch\\"](https://support.google.com/webmasters/answer/9012289#index_coverage) in the URL inspection report."""
    PAGE_FETCH_STATE_UNSPECIFIED = 'PAGE_FETCH_STATE_UNSPECIFIED'
    SUCCESSFUL = 'SUCCESSFUL'
    SOFT_404 = 'SOFT_404'
    BLOCKED_ROBOTS_TXT = 'BLOCKED_ROBOTS_TXT'
    NOT_FOUND = 'NOT_FOUND'
    ACCESS_DENIED = 'ACCESS_DENIED'
    SERVER_ERROR = 'SERVER_ERROR'
    REDIRECT_ERROR = 'REDIRECT_ERROR'
    ACCESS_FORBIDDEN = 'ACCESS_FORBIDDEN'
    BLOCKED_4_XX = 'BLOCKED_4XX'
    INTERNAL_CRAWL_ERROR = 'INTERNAL_CRAWL_ERROR'
    INVALID_URL = 'INVALID_URL'

class IndexStatusInspectionResultRobotsTxtStateEnum(str, Enum):
    r"""Whether or not the page is blocked to Google by a robots.txt rule."""
    ROBOTS_TXT_STATE_UNSPECIFIED = 'ROBOTS_TXT_STATE_UNSPECIFIED'
    ALLOWED = 'ALLOWED'
    DISALLOWED = 'DISALLOWED'

class IndexStatusInspectionResultVerdictEnum(str, Enum):
    r"""High level verdict about whether the URL *is* indexed (indexed status), or *can be* indexed (live inspection)."""
    VERDICT_UNSPECIFIED = 'VERDICT_UNSPECIFIED'
    PASS = 'PASS'
    PARTIAL = 'PARTIAL'
    FAIL = 'FAIL'
    NEUTRAL = 'NEUTRAL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IndexStatusInspectionResult:
    r"""Results of index status inspection for either the live page or the version in Google's index, depending on whether you requested a live inspection or not. For more information, see the [Index coverage report documentation](https://support.google.com/webmasters/answer/7440203)."""
    
    coverage_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coverageState'), 'exclude': lambda f: f is None }})
    r"""Could Google find and index the page. More details about page indexing appear in 'indexing_state'."""  
    crawled_as: Optional[IndexStatusInspectionResultCrawledAsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crawledAs'), 'exclude': lambda f: f is None }})
    r"""Primary crawler that was used by Google to crawl your site."""  
    google_canonical: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('googleCanonical'), 'exclude': lambda f: f is None }})
    r"""The URL of the page that Google selected as canonical. If the page was not indexed, this field is absent."""  
    indexing_state: Optional[IndexStatusInspectionResultIndexingStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indexingState'), 'exclude': lambda f: f is None }})
    r"""Whether or not the page blocks indexing through a noindex rule."""  
    last_crawl_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastCrawlTime'), 'exclude': lambda f: f is None }})
    r"""Last time this URL was crawled by Google using the [primary crawler](https://support.google.com/webmasters/answer/7440203#primary_crawler). Absent if the URL was never crawled successfully."""  
    page_fetch_state: Optional[IndexStatusInspectionResultPageFetchStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageFetchState'), 'exclude': lambda f: f is None }})
    r"""Whether or not Google could retrieve the page from your server. Equivalent to [\\"page fetch\\"](https://support.google.com/webmasters/answer/9012289#index_coverage) in the URL inspection report."""  
    referring_urls: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referringUrls'), 'exclude': lambda f: f is None }})
    r"""URLs that link to the inspected URL, directly and indirectly."""  
    robots_txt_state: Optional[IndexStatusInspectionResultRobotsTxtStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('robotsTxtState'), 'exclude': lambda f: f is None }})
    r"""Whether or not the page is blocked to Google by a robots.txt rule."""  
    sitemap: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sitemap'), 'exclude': lambda f: f is None }})
    r"""Any sitemaps that this URL was listed in, as known by Google. Not guaranteed to be an exhaustive list, especially if Google did not discover this URL through a sitemap. Absent if no sitemaps were found."""  
    user_canonical: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userCanonical'), 'exclude': lambda f: f is None }})
    r"""The URL that your page or site [declares as canonical](https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls?#define-canonical). If you did not declare a canonical URL, this field is absent."""  
    verdict: Optional[IndexStatusInspectionResultVerdictEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verdict'), 'exclude': lambda f: f is None }})
    r"""High level verdict about whether the URL *is* indexed (indexed status), or *can be* indexed (live inspection)."""  
    