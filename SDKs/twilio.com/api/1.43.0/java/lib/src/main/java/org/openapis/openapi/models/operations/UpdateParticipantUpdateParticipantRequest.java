/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class UpdateParticipantUpdateParticipantRequest {
    /**
     * The HTTP method we should use to call `announce_url`. Can be: `GET` or `POST` and defaults to `POST`.
     */
    @SpeakeasyMetadata("form:name=AnnounceMethod")
    public UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum announceMethod;

    public UpdateParticipantUpdateParticipantRequest withAnnounceMethod(UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum announceMethod) {
        this.announceMethod = announceMethod;
        return this;
    }
    
    /**
     * The URL we call using the `announce_method` for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `&lt;Play&gt;`, `&lt;Say&gt;`, `&lt;Pause&gt;`, or `&lt;Redirect&gt;` verbs.
     */
    @SpeakeasyMetadata("form:name=AnnounceUrl")
    public String announceUrl;

    public UpdateParticipantUpdateParticipantRequest withAnnounceUrl(String announceUrl) {
        this.announceUrl = announceUrl;
        return this;
    }
    
    /**
     * Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`.
     */
    @SpeakeasyMetadata("form:name=BeepOnExit")
    public Boolean beepOnExit;

    public UpdateParticipantUpdateParticipantRequest withBeepOnExit(Boolean beepOnExit) {
        this.beepOnExit = beepOnExit;
        return this;
    }
    
    /**
     * The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
     */
    @SpeakeasyMetadata("form:name=CallSidToCoach")
    public String callSidToCoach;

    public UpdateParticipantUpdateParticipantRequest withCallSidToCoach(String callSidToCoach) {
        this.callSidToCoach = callSidToCoach;
        return this;
    }
    
    /**
     * Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
     */
    @SpeakeasyMetadata("form:name=Coaching")
    public Boolean coaching;

    public UpdateParticipantUpdateParticipantRequest withCoaching(Boolean coaching) {
        this.coaching = coaching;
        return this;
    }
    
    /**
     * Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
     */
    @SpeakeasyMetadata("form:name=EndConferenceOnExit")
    public Boolean endConferenceOnExit;

    public UpdateParticipantUpdateParticipantRequest withEndConferenceOnExit(Boolean endConferenceOnExit) {
        this.endConferenceOnExit = endConferenceOnExit;
        return this;
    }
    
    /**
     * Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference.
     */
    @SpeakeasyMetadata("form:name=Hold")
    public Boolean hold;

    public UpdateParticipantUpdateParticipantRequest withHold(Boolean hold) {
        this.hold = hold;
        return this;
    }
    
    /**
     * The HTTP method we should use to call `hold_url`. Can be: `GET` or `POST` and the default is `GET`.
     */
    @SpeakeasyMetadata("form:name=HoldMethod")
    public UpdateParticipantUpdateParticipantRequestHoldMethodEnum holdMethod;

    public UpdateParticipantUpdateParticipantRequest withHoldMethod(UpdateParticipantUpdateParticipantRequestHoldMethodEnum holdMethod) {
        this.holdMethod = holdMethod;
        return this;
    }
    
    /**
     * The URL we call using the `hold_method` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `&lt;Play&gt;`, `&lt;Say&gt;`, `&lt;Pause&gt;`, or `&lt;Redirect&gt;` verbs.
     */
    @SpeakeasyMetadata("form:name=HoldUrl")
    public String holdUrl;

    public UpdateParticipantUpdateParticipantRequest withHoldUrl(String holdUrl) {
        this.holdUrl = holdUrl;
        return this;
    }
    
    /**
     * Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`.
     */
    @SpeakeasyMetadata("form:name=Muted")
    public Boolean muted;

    public UpdateParticipantUpdateParticipantRequest withMuted(Boolean muted) {
        this.muted = muted;
        return this;
    }
    
    /**
     * The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
     */
    @SpeakeasyMetadata("form:name=WaitMethod")
    public UpdateParticipantUpdateParticipantRequestWaitMethodEnum waitMethod;

    public UpdateParticipantUpdateParticipantRequest withWaitMethod(UpdateParticipantUpdateParticipantRequestWaitMethodEnum waitMethod) {
        this.waitMethod = waitMethod;
        return this;
    }
    
    /**
     * The URL we call using the `wait_method` for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `&lt;Play&gt;`, `&lt;Say&gt;`, `&lt;Pause&gt;`, or `&lt;Redirect&gt;` verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
     */
    @SpeakeasyMetadata("form:name=WaitUrl")
    public String waitUrl;

    public UpdateParticipantUpdateParticipantRequest withWaitUrl(String waitUrl) {
        this.waitUrl = waitUrl;
        return this;
    }
    
    public UpdateParticipantUpdateParticipantRequest(){}
}
