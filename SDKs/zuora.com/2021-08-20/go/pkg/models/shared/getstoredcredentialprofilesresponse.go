// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type GetStoredCredentialProfilesResponseProfilesConsentAgreementSrcEnum string

const (
	GetStoredCredentialProfilesResponseProfilesConsentAgreementSrcEnumExternal GetStoredCredentialProfilesResponseProfilesConsentAgreementSrcEnum = "External"
)

func (e *GetStoredCredentialProfilesResponseProfilesConsentAgreementSrcEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "External":
		*e = GetStoredCredentialProfilesResponseProfilesConsentAgreementSrcEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetStoredCredentialProfilesResponseProfilesConsentAgreementSrcEnum: %s", s)
	}
}

// GetStoredCredentialProfilesResponseProfilesStatusEnum - The status of the stored credential profile.
//
// * `Agreed` - The stored credential profile has not been validated via an authorization transaction with the payment gateway.
// * `Active` - The stored credential profile has been validated via an authorization transaction with the payment gateway.
// * `Cancelled` - The stored credentials are no longer valid, per a customer request. Zuora cannot use the stored credentials in transactions.
// * `Expired` - The stored credentials are no longer valid, per an expiration policy in the stored credential transaction framework. Zuora cannot use the stored credentials in transactions.
type GetStoredCredentialProfilesResponseProfilesStatusEnum string

const (
	GetStoredCredentialProfilesResponseProfilesStatusEnumAgreed    GetStoredCredentialProfilesResponseProfilesStatusEnum = "Agreed"
	GetStoredCredentialProfilesResponseProfilesStatusEnumActive    GetStoredCredentialProfilesResponseProfilesStatusEnum = "Active"
	GetStoredCredentialProfilesResponseProfilesStatusEnumCancelled GetStoredCredentialProfilesResponseProfilesStatusEnum = "Cancelled"
	GetStoredCredentialProfilesResponseProfilesStatusEnumExpired   GetStoredCredentialProfilesResponseProfilesStatusEnum = "Expired"
)

func (e *GetStoredCredentialProfilesResponseProfilesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Agreed":
		fallthrough
	case "Active":
		fallthrough
	case "Cancelled":
		fallthrough
	case "Expired":
		*e = GetStoredCredentialProfilesResponseProfilesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetStoredCredentialProfilesResponseProfilesStatusEnum: %s", s)
	}
}

type GetStoredCredentialProfilesResponseProfilesTypeEnum string

const (
	GetStoredCredentialProfilesResponseProfilesTypeEnumRecurring   GetStoredCredentialProfilesResponseProfilesTypeEnum = "Recurring"
	GetStoredCredentialProfilesResponseProfilesTypeEnumUnscheduled GetStoredCredentialProfilesResponseProfilesTypeEnum = "Unscheduled"
)

func (e *GetStoredCredentialProfilesResponseProfilesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Recurring":
		fallthrough
	case "Unscheduled":
		*e = GetStoredCredentialProfilesResponseProfilesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetStoredCredentialProfilesResponseProfilesTypeEnum: %s", s)
	}
}

// GetStoredCredentialProfilesResponseProfiles - Container for stored credential profiles.
type GetStoredCredentialProfilesResponseProfiles struct {
	// The date when the stored credential profile was activated (if applicable).
	//
	ActivatedOn *time.Time `json:"activatedOn,omitempty"`
	// The date when the stored credential profile was created.
	//
	AgreedOn *time.Time `json:"agreedOn,omitempty"`
	// The stored credential transaction framework. For example, Visa.
	//
	Brand *string `json:"brand,omitempty"`
	// The date when the stored credential profile was cancelled (if applicable).
	//
	CancelledOn *time.Time `json:"cancelledOn,omitempty"`
	// Your reference for the consent agreement that you have established with the customer.
	//
	ConsentAgreementRef *string                                                             `json:"consentAgreementRef,omitempty"`
	ConsentAgreementSrc *GetStoredCredentialProfilesResponseProfilesConsentAgreementSrcEnum `json:"consentAgreementSrc,omitempty"`
	// The date when the stored credential profile was expired (if applicable).
	//
	ExpiredOn *time.Time `json:"expiredOn,omitempty"`
	// The number that identifies the stored credential profile within the payment method.
	//
	Number *int64 `json:"number,omitempty"`
	// ID of the payment method.
	//
	PaymentMethodID *string `json:"paymentMethodId,omitempty"`
	// The status of the stored credential profile.
	//
	// * `Agreed` - The stored credential profile has not been validated via an authorization transaction with the payment gateway.
	// * `Active` - The stored credential profile has been validated via an authorization transaction with the payment gateway.
	// * `Cancelled` - The stored credentials are no longer valid, per a customer request. Zuora cannot use the stored credentials in transactions.
	// * `Expired` - The stored credentials are no longer valid, per an expiration policy in the stored credential transaction framework. Zuora cannot use the stored credentials in transactions.
	//
	Status *GetStoredCredentialProfilesResponseProfilesStatusEnum `json:"status,omitempty"`
	Type   *GetStoredCredentialProfilesResponseProfilesTypeEnum   `json:"type,omitempty"`
}

type GetStoredCredentialProfilesResponse struct {
	// Container for stored credential profiles.
	//
	Profiles *GetStoredCredentialProfilesResponseProfiles `json:"profiles,omitempty"`
	Success  *bool                                        `json:"success,omitempty"`
}
