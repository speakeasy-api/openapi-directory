"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import effectivedeploymentexecutionstatus_enum as shared_effectivedeploymentexecutionstatus_enum
from ..shared import effectivedeploymentstatusdetails as shared_effectivedeploymentstatusdetails
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EffectiveDeployment:
    r"""Contains information about a deployment job that IoT Greengrass sends to a Greengrass core device."""
    
    core_device_execution_status: shared_effectivedeploymentexecutionstatus_enum.EffectiveDeploymentExecutionStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coreDeviceExecutionStatus') }})  
    creation_timestamp: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationTimestamp'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    deployment_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentId') }})  
    deployment_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentName') }})  
    modified_timestamp: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modifiedTimestamp'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    target_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetArn') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    iot_job_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iotJobArn'), 'exclude': lambda f: f is None }})  
    iot_job_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iotJobId'), 'exclude': lambda f: f is None }})  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})  
    status_details: Optional[shared_effectivedeploymentstatusdetails.EffectiveDeploymentStatusDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusDetails'), 'exclude': lambda f: f is None }})  
    