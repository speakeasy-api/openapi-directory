// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type HealthProfileResourceAttributesStatsCategoryEnum string

const (
	HealthProfileResourceAttributesStatsCategoryEnumLifestyleBehaviors HealthProfileResourceAttributesStatsCategoryEnum = "lifestyle_behaviors"
	HealthProfileResourceAttributesStatsCategoryEnumMentalWellbeing    HealthProfileResourceAttributesStatsCategoryEnum = "mental_wellbeing"
	HealthProfileResourceAttributesStatsCategoryEnumPreventativeCare   HealthProfileResourceAttributesStatsCategoryEnum = "preventative_care"
	HealthProfileResourceAttributesStatsCategoryEnumOverall            HealthProfileResourceAttributesStatsCategoryEnum = "overall"
)

func (e HealthProfileResourceAttributesStatsCategoryEnum) ToPointer() *HealthProfileResourceAttributesStatsCategoryEnum {
	return &e
}

func (e *HealthProfileResourceAttributesStatsCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "lifestyle_behaviors":
		fallthrough
	case "mental_wellbeing":
		fallthrough
	case "preventative_care":
		fallthrough
	case "overall":
		*e = HealthProfileResourceAttributesStatsCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HealthProfileResourceAttributesStatsCategoryEnum: %v", v)
	}
}

// HealthProfileResourceAttributesStats - The category, answered and total counts for questions in the health profile
type HealthProfileResourceAttributesStats struct {
	Answered *float64                                          `json:"answered,omitempty"`
	Category *HealthProfileResourceAttributesStatsCategoryEnum `json:"category,omitempty"`
	Total    *float64                                          `json:"total,omitempty"`
}

type HealthProfileResourceAttributes struct {
	// List of category, answered and total counts for questions in the health profile
	Stats []HealthProfileResourceAttributesStats `json:"stats,omitempty"`
}

type HealthProfileResourceLinks struct {
	Self string `json:"self"`
}

type HealthProfileResourceRelationshipsPatientData struct {
	ID   *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

type HealthProfileResourceRelationshipsPatientLinks struct {
	Related *string `json:"related,omitempty"`
}

type HealthProfileResourceRelationshipsPatient struct {
	Data  *HealthProfileResourceRelationshipsPatientData  `json:"data,omitempty"`
	Links *HealthProfileResourceRelationshipsPatientLinks `json:"links,omitempty"`
}

type HealthProfileResourceRelationshipsQuestionsData struct {
	ID   *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

type HealthProfileResourceRelationshipsQuestionsLinks struct {
	Related *string `json:"related,omitempty"`
}

type HealthProfileResourceRelationshipsQuestions struct {
	Data  []HealthProfileResourceRelationshipsQuestionsData `json:"data,omitempty"`
	Links *HealthProfileResourceRelationshipsQuestionsLinks `json:"links,omitempty"`
}

type HealthProfileResourceRelationships struct {
	Patient   *HealthProfileResourceRelationshipsPatient   `json:"patient,omitempty"`
	Questions *HealthProfileResourceRelationshipsQuestions `json:"questions,omitempty"`
}

type HealthProfileResource struct {
	Attributes    *HealthProfileResourceAttributes    `json:"attributes,omitempty"`
	ID            *string                             `json:"id,omitempty"`
	Links         *HealthProfileResourceLinks         `json:"links,omitempty"`
	Relationships *HealthProfileResourceRelationships `json:"relationships,omitempty"`
	Type          string                              `json:"type"`
}
