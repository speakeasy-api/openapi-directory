"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class PrimaryIPActions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_primary_ips_id_actions_assign(self, request: operations.PostPrimaryIpsIDActionsAssignRequest) -> operations.PostPrimaryIpsIDActionsAssignResponse:
        r"""Assign a Primary IP to a resource
        Assigns a Primary IP to a Server.
        
        A Server can only have one Primary IP of type `ipv4` and one of type `ipv6` assigned. If you need more IPs use Floating IPs.
        
        The Server must be powered off (status `off`) in order for this operation to succeed.
        
        #### Call specific error codes
        
        | Code                          | Description                                                   |
        |------------------------------ |-------------------------------------------------------------- |
        | `server_not_stopped`          | The server is running, but needs to be powered off            |
        | `primary_ip_already_assigned` | Primary ip is already assigned to a different server          |
        | `server_has_ipv4`             | The server already has an ipv4 address                        |
        | `server_has_ipv6`             | The server already has an ipv6 address                        |
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostPrimaryIpsIDActionsAssignRequest, base_url, '/primary_ips/{id}/actions/assign', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPrimaryIpsIDActionsAssignResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPrimaryIpsIDActionsAssignActionResponse])
                res.action_response = out

        return res

    def post_primary_ips_id_actions_change_dns_ptr(self, request: operations.PostPrimaryIpsIDActionsChangeDNSPtrRequest) -> operations.PostPrimaryIpsIDActionsChangeDNSPtrResponse:
        r"""Change reverse DNS entry for a Primary IP
        Changes the hostname that will appear when getting the hostname belonging to this Primary IP.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostPrimaryIpsIDActionsChangeDNSPtrRequest, base_url, '/primary_ips/{id}/actions/change_dns_ptr', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPrimaryIpsIDActionsChangeDNSPtrResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPrimaryIpsIDActionsChangeDNSPtrActionResponse])
                res.action_response = out

        return res

    def post_primary_ips_id_actions_change_protection(self, request: operations.PostPrimaryIpsIDActionsChangeProtectionRequest) -> operations.PostPrimaryIpsIDActionsChangeProtectionResponse:
        r"""Change Primary IP Protection
        Changes the protection configuration of a Primary IP.
        
        A Primary IP can only be delete protected if its `auto_delete` property is set to `false`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostPrimaryIpsIDActionsChangeProtectionRequest, base_url, '/primary_ips/{id}/actions/change_protection', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPrimaryIpsIDActionsChangeProtectionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPrimaryIpsIDActionsChangeProtectionActionResponse])
                res.action_response = out

        return res

    def post_primary_ips_id_actions_unassign(self, request: operations.PostPrimaryIpsIDActionsUnassignRequest) -> operations.PostPrimaryIpsIDActionsUnassignResponse:
        r"""Unassign a Primary IP from a resource
        Unassigns a Primary IP from a Server.
        
        The Server must be powered off (status `off`) in order for this operation to succeed.
        
        Note that only Servers that have at least one network interface (public or private) attached can be powered on.
        
        #### Call specific error codes
        
        | Code                              | Description                                                   |
        |---------------------------------- |-------------------------------------------------------------- |
        | `server_not_stopped`              | The server is running, but needs to be powered off            |
        | `server_is_load_balancer_target`  | The server ipv4 address is a loadbalancer target              |
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostPrimaryIpsIDActionsUnassignRequest, base_url, '/primary_ips/{id}/actions/unassign', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPrimaryIpsIDActionsUnassignResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPrimaryIpsIDActionsUnassignActionResponse])
                res.action_response = out

        return res

    