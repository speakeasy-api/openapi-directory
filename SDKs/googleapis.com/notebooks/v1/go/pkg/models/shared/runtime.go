// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RuntimeInput - The definition of a Runtime for a managed notebook instance.
type RuntimeInput struct {
	// Specifies the login configuration for Runtime
	AccessConfig *RuntimeAccessConfigInput `json:"accessConfig,omitempty"`
	// Optional. The labels to associate with this Managed Notebook or Runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
	Labels map[string]string `json:"labels,omitempty"`
	// Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
	SoftwareConfig *RuntimeSoftwareConfigInput `json:"softwareConfig,omitempty"`
	// Runtime using Virtual Machine for computing.
	VirtualMachine *VirtualMachineInput `json:"virtualMachine,omitempty"`
}

// RuntimeHealthStateEnum - Output only. Runtime health_state.
type RuntimeHealthStateEnum string

const (
	RuntimeHealthStateEnumHealthStateUnspecified RuntimeHealthStateEnum = "HEALTH_STATE_UNSPECIFIED"
	RuntimeHealthStateEnumHealthy                RuntimeHealthStateEnum = "HEALTHY"
	RuntimeHealthStateEnumUnhealthy              RuntimeHealthStateEnum = "UNHEALTHY"
	RuntimeHealthStateEnumAgentNotInstalled      RuntimeHealthStateEnum = "AGENT_NOT_INSTALLED"
	RuntimeHealthStateEnumAgentNotRunning        RuntimeHealthStateEnum = "AGENT_NOT_RUNNING"
)

func (e *RuntimeHealthStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HEALTH_STATE_UNSPECIFIED":
		fallthrough
	case "HEALTHY":
		fallthrough
	case "UNHEALTHY":
		fallthrough
	case "AGENT_NOT_INSTALLED":
		fallthrough
	case "AGENT_NOT_RUNNING":
		*e = RuntimeHealthStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RuntimeHealthStateEnum: %s", s)
	}
}

// RuntimeStateEnum - Output only. Runtime state.
type RuntimeStateEnum string

const (
	RuntimeStateEnumStateUnspecified RuntimeStateEnum = "STATE_UNSPECIFIED"
	RuntimeStateEnumStarting         RuntimeStateEnum = "STARTING"
	RuntimeStateEnumProvisioning     RuntimeStateEnum = "PROVISIONING"
	RuntimeStateEnumActive           RuntimeStateEnum = "ACTIVE"
	RuntimeStateEnumStopping         RuntimeStateEnum = "STOPPING"
	RuntimeStateEnumStopped          RuntimeStateEnum = "STOPPED"
	RuntimeStateEnumDeleting         RuntimeStateEnum = "DELETING"
	RuntimeStateEnumUpgrading        RuntimeStateEnum = "UPGRADING"
	RuntimeStateEnumInitializing     RuntimeStateEnum = "INITIALIZING"
)

func (e *RuntimeStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "STARTING":
		fallthrough
	case "PROVISIONING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "STOPPING":
		fallthrough
	case "STOPPED":
		fallthrough
	case "DELETING":
		fallthrough
	case "UPGRADING":
		fallthrough
	case "INITIALIZING":
		*e = RuntimeStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RuntimeStateEnum: %s", s)
	}
}

// Runtime - The definition of a Runtime for a managed notebook instance.
type Runtime struct {
	// Specifies the login configuration for Runtime
	AccessConfig *RuntimeAccessConfig `json:"accessConfig,omitempty"`
	// Output only. Runtime creation time.
	CreateTime *string `json:"createTime,omitempty"`
	// Output only. Runtime health_state.
	HealthState *RuntimeHealthStateEnum `json:"healthState,omitempty"`
	// Optional. The labels to associate with this Managed Notebook or Runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
	Labels map[string]string `json:"labels,omitempty"`
	// Contains runtime daemon metrics, such as OS and kernels and sessions stats.
	Metrics *RuntimeMetrics `json:"metrics,omitempty"`
	// Output only. The resource name of the runtime. Format: `projects/{project}/locations/{location}/runtimes/{runtimeId}`
	Name *string `json:"name,omitempty"`
	// Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
	SoftwareConfig *RuntimeSoftwareConfig `json:"softwareConfig,omitempty"`
	// Output only. Runtime state.
	State *RuntimeStateEnum `json:"state,omitempty"`
	// Output only. Runtime update time.
	UpdateTime *string `json:"updateTime,omitempty"`
	// Runtime using Virtual Machine for computing.
	VirtualMachine *VirtualMachine `json:"virtualMachine,omitempty"`
}
