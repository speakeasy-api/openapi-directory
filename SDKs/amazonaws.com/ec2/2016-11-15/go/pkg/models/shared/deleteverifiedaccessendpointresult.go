// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum - The type of attachment used to provide connectivity between the Amazon Web Services Verified Access endpoint and the application.
type DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum string

const (
	DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnumVpc DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum = "vpc"
)

func (e DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum) ToPointer() *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum {
	return &e
}

func (e *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vpc":
		*e = DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum: %v", v)
	}
}

// DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum - The type of Amazon Web Services Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.
type DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum string

const (
	DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnumLoadBalancer     DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum = "load-balancer"
	DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnumNetworkInterface DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum = "network-interface"
)

func (e DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum) ToPointer() *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum {
	return &e
}

func (e *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "load-balancer":
		fallthrough
	case "network-interface":
		*e = DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum: %v", v)
	}
}

// DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum - The IP protocol.
type DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum string

const (
	DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnumHTTP  DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum = "http"
	DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnumHTTPS DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum = "https"
)

func (e DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum) ToPointer() *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum {
	return &e
}

func (e *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum: %v", v)
	}
}

// DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptions - The load balancer details if creating the Amazon Web Services Verified Access endpoint as <code>load-balancer</code>type.
type DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptions struct {
	LoadBalancerArn *string
	Port            *int64
	Protocol        *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum
	SubnetIds       []string
}

// DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum - The IP protocol.
type DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum string

const (
	DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnumHTTP  DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum = "http"
	DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnumHTTPS DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum = "https"
)

func (e DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum) ToPointer() *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum {
	return &e
}

func (e *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum: %v", v)
	}
}

// DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptions - The options for network-interface type endpoint.
type DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptions struct {
	NetworkInterfaceID *string
	Port               *int64
	Protocol           *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum
}

// DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum - The status code of the Verified Access endpoint.
type DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum string

const (
	DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnumPending  DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum = "pending"
	DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnumActive   DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum = "active"
	DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnumUpdating DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum = "updating"
	DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnumDeleting DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum = "deleting"
	DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnumDeleted  DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum = "deleted"
)

func (e DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum) ToPointer() *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum {
	return &e
}

func (e *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "active":
		fallthrough
	case "updating":
		fallthrough
	case "deleting":
		fallthrough
	case "deleted":
		*e = DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum: %v", v)
	}
}

// DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatus - The endpoint status.
type DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatus struct {
	Code    *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum
	Message *string
}

// DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointTags - Describes a tag.
type DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointTags struct {
	Key   *string
	Value *string
}

// DeleteVerifiedAccessEndpointResultVerifiedAccessEndpoint - The ID of the Verified Access endpoint.
type DeleteVerifiedAccessEndpointResultVerifiedAccessEndpoint struct {
	ApplicationDomain        *string
	AttachmentType           *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum
	CreationTime             *string
	DeletionTime             *string
	Description              *string
	DeviceValidationDomain   *string
	DomainCertificateArn     *string
	EndpointDomain           *string
	EndpointType             *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum
	LastUpdatedTime          *string
	LoadBalancerOptions      *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptions
	NetworkInterfaceOptions  *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptions
	SecurityGroupIds         []string
	Status                   *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointStatus
	Tags                     []DeleteVerifiedAccessEndpointResultVerifiedAccessEndpointTags
	VerifiedAccessEndpointID *string
	VerifiedAccessGroupID    *string
	VerifiedAccessInstanceID *string
}

// DeleteVerifiedAccessEndpointResult - Success
type DeleteVerifiedAccessEndpointResult struct {
	VerifiedAccessEndpoint *DeleteVerifiedAccessEndpointResultVerifiedAccessEndpoint
}
