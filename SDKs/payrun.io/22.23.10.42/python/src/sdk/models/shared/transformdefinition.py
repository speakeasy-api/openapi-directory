"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransformDefinitionTransformDefinition:
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Active'), 'exclude': lambda f: f is None }})
    r"""The transform definitions' active"""  
    content_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContentType'), 'exclude': lambda f: f is None }})
    r"""The transform definitions' content type"""  
    definition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Definition'), 'exclude': lambda f: f is None }})
    r"""The transform definitions' definition"""  
    definition_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefinitionType'), 'exclude': lambda f: f is None }})
    r"""The transform definitions' definition type"""  
    readonly: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Readonly'), 'exclude': lambda f: f is None }})
    r"""The transform definitions' readonly"""  
    supported_reports: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedReports'), 'exclude': lambda f: f is None }})
    r"""The transform definitions' supported reports"""  
    tax_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxYear'), 'exclude': lambda f: f is None }})
    r"""The transform definitions' tax year"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Title'), 'exclude': lambda f: f is None }})
    r"""The transform definitions' title"""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Version'), 'exclude': lambda f: f is None }})
    r"""The transform definitions' version"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransformDefinition:
    r"""The transform definition object."""
    
    transform_definition: Optional[TransformDefinitionTransformDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransformDefinition'), 'exclude': lambda f: f is None }})  
    