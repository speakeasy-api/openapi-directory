/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Transfer - OK - the request has succeeded.
 */
public class Transfer {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountHolder")
    public ResourceReference accountHolder;

    public Transfer withAccountHolder(ResourceReference accountHolder) {
        this.accountHolder = accountHolder;
        return this;
    }
    
    @JsonProperty("amount")
    public Amount amount;

    public Transfer withAmount(Amount amount) {
        this.amount = amount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balanceAccount")
    public ResourceReference balanceAccount;

    public Transfer withBalanceAccount(ResourceReference balanceAccount) {
        this.balanceAccount = balanceAccount;
        return this;
    }
    
    /**
     * The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balanceAccountId")
    public String balanceAccountId;

    public Transfer withBalanceAccountId(String balanceAccountId) {
        this.balanceAccountId = balanceAccountId;
        return this;
    }
    
    /**
     * The type of transfer.
     * 
     * Possible values:
     * 
     *  - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.
     * 
     * - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.
     * 
     * - **issuedCard**: Transfer initiated by a Adyen-issued card.
     * 
     * - **platformPayment**: Fund movements related to payments that are acquired for your users.
     */
    @JsonProperty("category")
    public TransferCategoryEnum category;

    public Transfer withCategory(TransferCategoryEnum category) {
        this.category = category;
        return this;
    }
    
    @JsonProperty("counterparty")
    public CounterpartyV3 counterparty;

    public Transfer withCounterparty(CounterpartyV3 counterparty) {
        this.counterparty = counterparty;
        return this;
    }
    
    /**
     * Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.
     * 
     * Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , ' + Space**
     * 
     * Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] &amp; $ % # @** **~ = + - _ ' " ! ?**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Transfer withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The direction of the transfer.
     * 
     * Possible values: **incoming**, **outgoing**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("direction")
    public TransferDirectionEnum direction;

    public Transfer withDirection(TransferDirectionEnum direction) {
        this.direction = direction;
        return this;
    }
    
    /**
     * The ID of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Transfer withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentInstrument")
    public PaymentInstrument paymentInstrument;

    public Transfer withPaymentInstrument(PaymentInstrument paymentInstrument) {
        this.paymentInstrument = paymentInstrument;
        return this;
    }
    
    /**
     * The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) used in the transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentInstrumentId")
    public String paymentInstrumentId;

    public Transfer withPaymentInstrumentId(String paymentInstrumentId) {
        this.paymentInstrumentId = paymentInstrumentId;
        return this;
    }
    
    /**
     * The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.
     * 
     * Possible values:
     * 
     * * **regular**: For normal, low-value transactions.
     * 
     * * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.
     * 
     * * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.
     * 
     * * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).
     * 
     * * **crossBorder**: High-value transfer to a recipient in a different country.
     * 
     * * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public TransferPriorityEnum priority;

    public Transfer withPriority(TransferPriorityEnum priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * Additional information about the status of the transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    public TransferReasonEnum reason;

    public Transfer withReason(TransferReasonEnum reason) {
        this.reason = reason;
        return this;
    }
    
    /**
     * Your reference for the transfer, used internally within your platform. If you don't provide this in the request, Adyen generates a unique reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    public String reference;

    public Transfer withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     *  A reference that is sent to the recipient. This reference is also sent in all notification webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.
     * 
     *  Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the `category`.
     * 
     * - **internal**: 80 characters
     * 
     * - **bank**: 35 characters when transferring to an IBAN, 15 characters for others.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referenceForBeneficiary")
    public String referenceForBeneficiary;

    public Transfer withReferenceForBeneficiary(String referenceForBeneficiary) {
        this.referenceForBeneficiary = referenceForBeneficiary;
        return this;
    }
    
    /**
     * The result of the transfer.
     * 
     *  For example, **authorised**, **refused**, or **error**.
     */
    @JsonProperty("status")
    public TransferStatusEnum status;

    public Transfer withStatus(TransferStatusEnum status) {
        this.status = status;
        return this;
    }
    
    public Transfer(@JsonProperty("amount") Amount amount, @JsonProperty("category") TransferCategoryEnum category, @JsonProperty("counterparty") CounterpartyV3 counterparty, @JsonProperty("status") TransferStatusEnum status) {
        this.amount = amount;
        this.category = category;
        this.counterparty = counterparty;
        this.status = status;
  }
}
