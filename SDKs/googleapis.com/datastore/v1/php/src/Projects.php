<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsResponse
     */
	public function datastoreProjectsAllocateIds(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}:allocateIds', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "allocateIdsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsAllocateIdsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->allocateIdsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AllocateIdsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Begins a new transaction.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionResponse
     */
	public function datastoreProjectsBeginTransaction(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}:beginTransaction', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "beginTransactionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsBeginTransactionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beginTransactionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeginTransactionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Commits a transaction, optionally creating, deleting or modifying some entities.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitResponse
     */
	public function datastoreProjectsCommit(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}:commit', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "commitRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsCommitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commitResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommitResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Exports a copy of all or a subset of entities from Google Cloud Datastore to another storage system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsExportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsExportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsExportResponse
     */
	public function datastoreProjectsExport(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsExportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsExportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}:export', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleDatastoreAdminV1ExportEntitiesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsExportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports entities into Google Cloud Datastore. Existing entities with the same key are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportEntities operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Datastore.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsImportResponse
     */
	public function datastoreProjectsImport(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}:import', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleDatastoreAdminV1ImportEntitiesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be created.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesCreateResponse
     */
	public function datastoreProjectsIndexesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/indexes', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleDatastoreAdminV1IndexInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an existing index. An index can only be deleted if it is in a `READY` or `ERROR` state. On successful execution of the request, the index will be in a `DELETING` state. And on completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, followed by calling delete again.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesDeleteResponse
     */
	public function datastoreProjectsIndexesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/indexes/{indexId}', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets an index.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesGetResponse
     */
	public function datastoreProjectsIndexesGet(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/indexes/{indexId}', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleDatastoreAdminV1Index = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleDatastoreAdminV1Index', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesListResponse
     */
	public function datastoreProjectsIndexesList(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/indexes', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsIndexesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleDatastoreAdminV1ListIndexesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleDatastoreAdminV1ListIndexesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Looks up entities by key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupResponse
     */
	public function datastoreProjectsLookup(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}:lookup', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "lookupRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsLookupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lookupResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LookupResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsCancelResponse
     */
	public function datastoreProjectsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsDeleteResponse
     */
	public function datastoreProjectsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsGetResponse
     */
	public function datastoreProjectsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsListResponse
     */
	public function datastoreProjectsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsResponse
     */
	public function datastoreProjectsReserveIds(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}:reserveIds', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reserveIdsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsReserveIdsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reserveIdsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rolls back a transaction.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackResponse
     */
	public function datastoreProjectsRollback(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}:rollback', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rollbackRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRollbackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rollbackResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Runs an aggregation query.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQuerySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQueryResponse
     */
	public function datastoreProjectsRunAggregationQuery(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQuerySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQueryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}:runAggregationQuery', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "runAggregationQueryRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQueryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunAggregationQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runAggregationQueryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RunAggregationQueryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Queries for entities.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQuerySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQueryResponse
     */
	public function datastoreProjectsRunQuery(
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQuerySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQueryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}:runQuery', \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "runQueryRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQueryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatastoreProjectsRunQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runQueryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RunQueryResponse', 'json');
            }
        }

        return $response;
    }
}