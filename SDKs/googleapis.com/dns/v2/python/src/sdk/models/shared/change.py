"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import resourcerecordset as shared_resourcerecordset
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ChangeStatusEnum(str, Enum):
    r"""Status of the operation (output only). A status of \\"done\\" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet."""
    PENDING = 'PENDING'
    DONE = 'DONE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Change:
    r"""A Change represents a set of ResourceRecordSet additions and deletions applied atomically to a ManagedZone. ResourceRecordSets within a ManagedZone are modified by creating a new Change element in the Changes collection. In turn the Changes collection also records the past modifications to the ResourceRecordSets in a ManagedZone. The current state of the ManagedZone is the sum effect of applying all Change elements in the Changes collection in sequence."""
    
    additions: Optional[list[shared_resourcerecordset.ResourceRecordSet]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additions'), 'exclude': lambda f: f is None }})
    r"""Which ResourceRecordSets to add?"""  
    deletions: Optional[list[shared_resourcerecordset.ResourceRecordSet]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deletions'), 'exclude': lambda f: f is None }})
    r"""Which ResourceRecordSets to remove? Must match existing data exactly."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the resource; defined by the server (output only)."""  
    is_serving: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isServing'), 'exclude': lambda f: f is None }})
    r"""If the DNS queries for the zone will be served."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""The time that this operation was started by the server (output only). This is in RFC3339 text format."""  
    status: Optional[ChangeStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the operation (output only). A status of \\"done\\" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet."""  
    