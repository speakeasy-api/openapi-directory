"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Dependents:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_dependent(self, request: operations.CreateDependentRequest) -> operations.CreateDependentResponse:
        r"""Create Dependent
        Now, you can associate dependents who are electing coverage with respective employees.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateDependentRequest, base_url, '/api/v1/employees/{employee_id}/dependents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "dependent_create_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateDependentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DependentResult])
                res.dependent_result = out

        return res

    def edit_dependent(self, request: operations.EditDependentRequest) -> operations.EditDependentResponse:
        r"""Edit a Dependent
        Edit a dependent based on the ID provided. The version parameter must match the latest dependent version.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditDependentRequest, base_url, '/api/v1/dependents/{dependent_id}/{version}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "dependent_edit_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditDependentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DependentResult])
                res.dependent_result = out

        return res

    def get_dependent(self, request: operations.GetDependentRequest) -> operations.GetDependentResponse:
        r"""Get Dependent
        Returns the latest version of a single dependent based on the ID provided.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDependentRequest, base_url, '/api/v1/dependents/{dependent_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDependentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DependentResult])
                res.dependent_result = out

        return res

    def get_employee_dependents_list(self, request: operations.GetEmployeeDependentsListRequest) -> operations.GetEmployeeDependentsListResponse:
        r"""Get all Employee Dependents
        Returns a list of all dependents for a given employee
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEmployeeDependentsListRequest, base_url, '/api/v1/employees/{employee_id}/dependents', request)
        
        query_params = utils.get_query_params(operations.GetEmployeeDependentsListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEmployeeDependentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedDependentResult])
                res.paginated_dependent_result = out

        return res

    