// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CertificateIssuanceConfigKeyAlgorithmEnum - Required. The key algorithm to use when generating the private key.
type CertificateIssuanceConfigKeyAlgorithmEnum string

const (
	CertificateIssuanceConfigKeyAlgorithmEnumKeyAlgorithmUnspecified CertificateIssuanceConfigKeyAlgorithmEnum = "KEY_ALGORITHM_UNSPECIFIED"
	CertificateIssuanceConfigKeyAlgorithmEnumRsa2048                 CertificateIssuanceConfigKeyAlgorithmEnum = "RSA_2048"
	CertificateIssuanceConfigKeyAlgorithmEnumEcdsaP256               CertificateIssuanceConfigKeyAlgorithmEnum = "ECDSA_P256"
)

func (e CertificateIssuanceConfigKeyAlgorithmEnum) ToPointer() *CertificateIssuanceConfigKeyAlgorithmEnum {
	return &e
}

func (e *CertificateIssuanceConfigKeyAlgorithmEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "KEY_ALGORITHM_UNSPECIFIED":
		fallthrough
	case "RSA_2048":
		fallthrough
	case "ECDSA_P256":
		*e = CertificateIssuanceConfigKeyAlgorithmEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateIssuanceConfigKeyAlgorithmEnum: %v", v)
	}
}

// CertificateIssuanceConfig - CertificateIssuanceConfig specifies how to issue and manage a certificate.
type CertificateIssuanceConfig struct {
	// The CA that issues the workload certificate. It includes CA address, type, authentication to CA service, etc.
	CertificateAuthorityConfig *CertificateAuthorityConfig `json:"certificateAuthorityConfig,omitempty"`
	// Output only. The creation timestamp of a CertificateIssuanceConfig.
	CreateTime *string `json:"createTime,omitempty"`
	// One or more paragraphs of text description of a CertificateIssuanceConfig.
	Description *string `json:"description,omitempty"`
	// Required. The key algorithm to use when generating the private key.
	KeyAlgorithm *CertificateIssuanceConfigKeyAlgorithmEnum `json:"keyAlgorithm,omitempty"`
	// Set of labels associated with a CertificateIssuanceConfig.
	Labels map[string]string `json:"labels,omitempty"`
	// Required. Workload certificate lifetime requested.
	Lifetime *string `json:"lifetime,omitempty"`
	// A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern `projects/*/locations/*/certificateIssuanceConfigs/*`.
	Name *string `json:"name,omitempty"`
	// Required. Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive.
	RotationWindowPercentage *int `json:"rotationWindowPercentage,omitempty"`
	// Output only. The last update timestamp of a CertificateIssuanceConfig.
	UpdateTime *string `json:"updateTime,omitempty"`
}

// CertificateIssuanceConfigInput - CertificateIssuanceConfig specifies how to issue and manage a certificate.
type CertificateIssuanceConfigInput struct {
	// The CA that issues the workload certificate. It includes CA address, type, authentication to CA service, etc.
	CertificateAuthorityConfig *CertificateAuthorityConfig `json:"certificateAuthorityConfig,omitempty"`
	// One or more paragraphs of text description of a CertificateIssuanceConfig.
	Description *string `json:"description,omitempty"`
	// Required. The key algorithm to use when generating the private key.
	KeyAlgorithm *CertificateIssuanceConfigKeyAlgorithmEnum `json:"keyAlgorithm,omitempty"`
	// Set of labels associated with a CertificateIssuanceConfig.
	Labels map[string]string `json:"labels,omitempty"`
	// Required. Workload certificate lifetime requested.
	Lifetime *string `json:"lifetime,omitempty"`
	// A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern `projects/*/locations/*/certificateIssuanceConfigs/*`.
	Name *string `json:"name,omitempty"`
	// Required. Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive.
	RotationWindowPercentage *int `json:"rotationWindowPercentage,omitempty"`
}
