"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum(str, Enum):
    r"""Product type to rollback (if the network is a combined network)"""
    APPLIANCE = 'appliance'
    CAMERA = 'camera'
    CELLULAR_GATEWAY = 'cellularGateway'
    SWITCH = 'switch'
    WIRELESS = 'wireless'

class CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum(str, Enum):
    r"""Reason for the rollback"""
    BROKE_OLD_FEATURES = 'broke old features'
    OTHER = 'other'
    PERFORMANCE = 'performance'
    STABILITY = 'stability'
    TESTING = 'testing'
    UNIFYING_NETWORKS_VERSIONS = 'unifying networks versions'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkFirmwareUpgradesRollbackRequestBodyReasons:
    
    category: CreateNetworkFirmwareUpgradesRollbackRequestBodyReasonsCategoryEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})
    r"""Reason for the rollback"""  
    comment: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment') }})
    r"""Additional comment about the rollback"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkFirmwareUpgradesRollbackRequestBodyToVersion:
    r"""Version to downgrade to (if the network has firmware flexibility)"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The version ID"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkFirmwareUpgradesRollbackRequestBody:
    
    reasons: list[CreateNetworkFirmwareUpgradesRollbackRequestBodyReasons] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reasons') }})
    r"""Reasons for the rollback"""  
    product: Optional[CreateNetworkFirmwareUpgradesRollbackRequestBodyProductEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product'), 'exclude': lambda f: f is None }})
    r"""Product type to rollback (if the network is a combined network)"""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Scheduled time for the rollback"""  
    to_version: Optional[CreateNetworkFirmwareUpgradesRollbackRequestBodyToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Version to downgrade to (if the network has firmware flexibility)"""  
    

@dataclasses.dataclass
class CreateNetworkFirmwareUpgradesRollbackRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: CreateNetworkFirmwareUpgradesRollbackRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    
class CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum(str, Enum):
    r"""Product type to rollback (if the network is a combined network)"""
    APPLIANCE = 'appliance'
    CAMERA = 'camera'
    CELLULAR_GATEWAY = 'cellularGateway'
    SWITCH = 'switch'
    WIRELESS = 'wireless'

class CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum(str, Enum):
    r"""Reason for the rollback"""
    BROKE_OLD_FEATURES = 'broke old features'
    OTHER = 'other'
    PERFORMANCE = 'performance'
    STABILITY = 'stability'
    TESTING = 'testing'
    UNIFYING_NETWORKS_VERSIONS = 'unifying networks versions'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasons:
    
    category: Optional[CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasonsCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""Reason for the rollback"""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Additional comment about the rollback"""  
    
class CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnum(str, Enum):
    r"""Status of the rollback"""
    CANCELED = 'canceled'
    COMPLETED = 'completed'
    IN_PROGRESS = 'in_progress'
    PENDING = 'pending'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkFirmwareUpgradesRollback200ApplicationJSONToVersion:
    r"""Version to downgrade to (if the network has firmware flexibility)"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkFirmwareUpgradesRollback200ApplicationJSON:
    r"""Successful operation"""
    
    product: Optional[CreateNetworkFirmwareUpgradesRollback200ApplicationJSONProductEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product'), 'exclude': lambda f: f is None }})
    r"""Product type to rollback (if the network is a combined network)"""  
    reasons: Optional[list[CreateNetworkFirmwareUpgradesRollback200ApplicationJSONReasons]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reasons'), 'exclude': lambda f: f is None }})
    r"""Reasons for the rollback"""  
    status: Optional[CreateNetworkFirmwareUpgradesRollback200ApplicationJSONStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the rollback"""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Scheduled time for the rollback"""  
    to_version: Optional[CreateNetworkFirmwareUpgradesRollback200ApplicationJSONToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Version to downgrade to (if the network has firmware flexibility)"""  
    upgrade_batch_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeBatchId'), 'exclude': lambda f: f is None }})
    r"""Batch ID of the firmware rollback"""  
    

@dataclasses.dataclass
class CreateNetworkFirmwareUpgradesRollbackResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_network_firmware_upgrades_rollback_200_application_json_object: Optional[CreateNetworkFirmwareUpgradesRollback200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    