// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCreateCoipCidrActionEnum
type GETCreateCoipCidrActionEnum string

const (
	GETCreateCoipCidrActionEnumCreateCoipCidr GETCreateCoipCidrActionEnum = "CreateCoipCidr"
)

func (e GETCreateCoipCidrActionEnum) ToPointer() *GETCreateCoipCidrActionEnum {
	return &e
}

func (e *GETCreateCoipCidrActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CreateCoipCidr":
		*e = GETCreateCoipCidrActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateCoipCidrActionEnum: %v", v)
	}
}

// GETCreateCoipCidrVersionEnum
type GETCreateCoipCidrVersionEnum string

const (
	GETCreateCoipCidrVersionEnumTwoThousandAndSixteen1115 GETCreateCoipCidrVersionEnum = "2016-11-15"
)

func (e GETCreateCoipCidrVersionEnum) ToPointer() *GETCreateCoipCidrVersionEnum {
	return &e
}

func (e *GETCreateCoipCidrVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETCreateCoipCidrVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateCoipCidrVersionEnum: %v", v)
	}
}

type GETCreateCoipCidrRequest struct {
	Action GETCreateCoipCidrActionEnum `queryParam:"style=form,explode=true,name=Action"`
	//  A customer-owned IP address range to create.
	Cidr string `queryParam:"style=form,explode=true,name=Cidr"`
	//  The ID of the address pool.
	CoipPoolID string `queryParam:"style=form,explode=true,name=CoipPoolId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun            *bool                        `queryParam:"style=form,explode=true,name=DryRun"`
	Version           GETCreateCoipCidrVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCreateCoipCidrResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
