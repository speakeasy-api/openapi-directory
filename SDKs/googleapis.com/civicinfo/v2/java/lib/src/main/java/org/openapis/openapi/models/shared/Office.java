/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Office - Information about an Office held by one or more Officials.
 */
public class Office {
    /**
     * The OCD ID of the division with which this office is associated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("divisionId")
    public String divisionId;

    public Office withDivisionId(String divisionId) {
        this.divisionId = divisionId;
        return this;
    }
    
    /**
     * The levels of government of which this office is part. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at "locality" level, but also effectively at both "administrative-area-2" and "administrative-area-1".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("levels")
    public OfficeLevelsEnum[] levels;

    public Office withLevels(OfficeLevelsEnum[] levels) {
        this.levels = levels;
        return this;
    }
    
    /**
     * The human-readable name of the office.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Office withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * List of indices in the officials array of people who presently hold this office.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("officialIndices")
    public Long[] officialIndices;

    public Office withOfficialIndices(Long[] officialIndices) {
        this.officialIndices = officialIndices;
        return this;
    }
    
    /**
     * The roles which this office fulfills. Roles are not meant to be exhaustive, or to exactly specify the entire set of responsibilities of a given office, but are meant to be rough categories that are useful for general selection from or sorting of a list of offices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roles")
    public OfficeRolesEnum[] roles;

    public Office withRoles(OfficeRolesEnum[] roles) {
        this.roles = roles;
        return this;
    }
    
    /**
     * A list of sources for this office. If multiple sources are listed, the data has been aggregated from those sources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sources")
    public Source[] sources;

    public Office withSources(Source[] sources) {
        this.sources = sources;
        return this;
    }
    
    public Office(){}
}
