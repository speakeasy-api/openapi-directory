"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .persona import Persona
from .playlist import Playlist
from .show import Show
from .spin import Spin
from sdk.models import shared

SERVERS = [
    "https://spinitron.com/api",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""## Notes
    
    **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).
    
    **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.
    
    **Authenticate** by presenting your API key using either HTTP Bearer Authorization
    (preferred)
    
        curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'
    
    or in the query parameter `access-token` (less secure owing to webserver
    log files)
    
        curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'
    
    **Limit** per page of results is 20 by default and miximally 200.
    
    **Try it out** below works to
    generate example cURL requests but not to get responses from Spinitron. We
    do not accept queries sent from web browsers. Copy-paste the cURL commands
    and run them from your computer.
    
    **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.
    
    An extension to this API with access to all stations for partner applications is available. Contact us.
    """
    persona: Persona
    playlist: Playlist
    show: Show
    spin: Spin

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.persona = Persona(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.playlist = Playlist(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.show = Show(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.spin = Spin(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    