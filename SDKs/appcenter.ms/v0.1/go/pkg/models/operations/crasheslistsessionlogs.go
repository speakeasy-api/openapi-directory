// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type CrashesListSessionLogsSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type CrashesListSessionLogsPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the a crash
	CrashID string `pathParam:"style=simple,explode=false,name=crash_id"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type CrashesListSessionLogsQueryParams struct {
	// Date of data requested
	Date *time.Time `queryParam:"style=form,explode=true,name=date"`
}

type CrashesListSessionLogsRequest struct {
	PathParams  CrashesListSessionLogsPathParams
	QueryParams CrashesListSessionLogsQueryParams
	Security    CrashesListSessionLogsSecurity
}

type CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnum string

const (
	CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnumBadRequest          CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnumConflict            CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnum = "Conflict"
	CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnumNotAcceptable       CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnumNotFound            CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnum = "NotFound"
	CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnumInternalServerError CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnumUnauthorized        CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnumTooManyRequests     CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type CrashesListSessionLogsDefaultApplicationJSONError struct {
	Code    CrashesListSessionLogsDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                    `json:"message"`
}

// CrashesListSessionLogsDefaultApplicationJSON - Error code with reason
type CrashesListSessionLogsDefaultApplicationJSON struct {
	Error CrashesListSessionLogsDefaultApplicationJSONError `json:"error"`
}

// CrashesListSessionLogs200ApplicationJSONLogsDevice - Device characteristics.
type CrashesListSessionLogs200ApplicationJSONLogsDevice struct {
	// The app's build number, e.g. 42.
	//
	AppBuild string `json:"app_build"`
	// The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.
	//
	AppNamespace *string `json:"app_namespace,omitempty"`
	// Application version name, e.g. 1.1.0
	//
	AppVersion string `json:"app_version"`
	// Carrier country code (for mobile devices).
	//
	CarrierCode *string `json:"carrier_code,omitempty"`
	// Carrier country.
	//
	CarrierCountry *string `json:"carrier_country,omitempty"`
	// Carrier name (for mobile devices).
	//
	CarrierName *string `json:"carrier_name,omitempty"`
	// Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.
	//
	LiveUpdateDeploymentKey *string `json:"live_update_deployment_key,omitempty"`
	// Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.
	//
	LiveUpdatePackageHash *string `json:"live_update_package_hash,omitempty"`
	// Label that is used to identify application code 'version' released via Live Update beacon running on device
	//
	LiveUpdateReleaseLabel *string `json:"live_update_release_label,omitempty"`
	// Language code (example: en_US).
	//
	Locale string `json:"locale"`
	// Device model (example: iPad2,3).
	//
	Model *string `json:"model,omitempty"`
	// Device manufacturer (example: HTC).
	//
	OemName *string `json:"oem_name,omitempty"`
	// API level when applicable like in Android (example: 15).
	//
	OsAPILevel *int64 `json:"os_api_level,omitempty"`
	// OS build code (example: LMY47X).
	//
	OsBuild *string `json:"os_build,omitempty"`
	// OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.
	//
	OsName string `json:"os_name"`
	// OS version (example: 9.3.0).
	//
	OsVersion string `json:"os_version"`
	// Screen size of the device in pixels (example: 640x480).
	//
	ScreenSize *string `json:"screen_size,omitempty"`
	// Name of the SDK. Consists of the name of the SDK and the platform, e.g. "appcenter.ios", "hockeysdk.android".
	//
	SDKName string `json:"sdk_name"`
	// Version of the SDK in semver format, e.g. "1.2.0" or "0.12.3-alpha.1".
	//
	SDKVersion string `json:"sdk_version"`
	// The offset in minutes from UTC for the device time zone, including daylight savings time.
	//
	TimeZoneOffset int64 `json:"time_zone_offset"`
	// Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.
	//
	WrapperRuntimeVersion *string `json:"wrapper_runtime_version,omitempty"`
	// Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. "appcenter.xamarin", "hockeysdk.cordova".
	//
	WrapperSDKName *string `json:"wrapper_sdk_name,omitempty"`
	// Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.
	//
	WrapperSDKVersion *string `json:"wrapper_sdk_version,omitempty"`
}

// CrashesListSessionLogs200ApplicationJSONLogsTypeEnum - Log type.
type CrashesListSessionLogs200ApplicationJSONLogsTypeEnum string

const (
	CrashesListSessionLogs200ApplicationJSONLogsTypeEnumEvent            CrashesListSessionLogs200ApplicationJSONLogsTypeEnum = "event"
	CrashesListSessionLogs200ApplicationJSONLogsTypeEnumPage             CrashesListSessionLogs200ApplicationJSONLogsTypeEnum = "page"
	CrashesListSessionLogs200ApplicationJSONLogsTypeEnumStartSession     CrashesListSessionLogs200ApplicationJSONLogsTypeEnum = "start_session"
	CrashesListSessionLogs200ApplicationJSONLogsTypeEnumError            CrashesListSessionLogs200ApplicationJSONLogsTypeEnum = "error"
	CrashesListSessionLogs200ApplicationJSONLogsTypeEnumPushInstallation CrashesListSessionLogs200ApplicationJSONLogsTypeEnum = "push_installation"
	CrashesListSessionLogs200ApplicationJSONLogsTypeEnumStartService     CrashesListSessionLogs200ApplicationJSONLogsTypeEnum = "start_service"
	CrashesListSessionLogs200ApplicationJSONLogsTypeEnumCustomProperties CrashesListSessionLogs200ApplicationJSONLogsTypeEnum = "custom_properties"
)

func (e *CrashesListSessionLogs200ApplicationJSONLogsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "event":
		fallthrough
	case "page":
		fallthrough
	case "start_session":
		fallthrough
	case "error":
		fallthrough
	case "push_installation":
		fallthrough
	case "start_service":
		fallthrough
	case "custom_properties":
		*e = CrashesListSessionLogs200ApplicationJSONLogsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CrashesListSessionLogs200ApplicationJSONLogsTypeEnum: %s", s)
	}
}

// CrashesListSessionLogs200ApplicationJSONLogs - Generic log.
type CrashesListSessionLogs200ApplicationJSONLogs struct {
	// Account ID of the authenticated user.
	//
	AccountID *string `json:"account_id,omitempty"`
	// Auth service provider.
	//
	AuthProvider *string `json:"auth_provider,omitempty"`
	// Device characteristics.
	Device CrashesListSessionLogs200ApplicationJSONLogsDevice `json:"device"`
	// Event ID.
	//
	EventID *string `json:"event_id,omitempty"`
	// Event name.
	//
	EventName *string `json:"event_name,omitempty"`
	// Install ID.
	//
	InstallID string `json:"install_id"`
	// Message ID.
	//
	MessageID *string `json:"message_id,omitempty"`
	// event specific properties.
	//
	Properties map[string]string `json:"properties,omitempty"`
	// Session ID.
	//
	SessionID *string `json:"session_id,omitempty"`
	// Log creation timestamp.
	//
	Timestamp time.Time `json:"timestamp"`
	// Log type.
	//
	Type CrashesListSessionLogs200ApplicationJSONLogsTypeEnum `json:"type"`
}

// CrashesListSessionLogs200ApplicationJSON - Session logs of specific crash
type CrashesListSessionLogs200ApplicationJSON struct {
	// indicates if the number of available logs are more than the max allowed return limit(100).
	ExceededMaxLimit *bool `json:"exceeded_max_limit,omitempty"`
	// the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.
	LastReceivedLogTimestamp *time.Time `json:"last_received_log_timestamp,omitempty"`
	// the list of logs
	Logs []CrashesListSessionLogs200ApplicationJSONLogs `json:"logs"`
}

type CrashesListSessionLogsResponse struct {
	ContentType string
	// Session logs of specific crash
	CrashesListSessionLogs200ApplicationJSONObject *CrashesListSessionLogs200ApplicationJSON
	// Error code with reason
	CrashesListSessionLogsDefaultApplicationJSONObject *CrashesListSessionLogsDefaultApplicationJSON
	StatusCode                                         int
	RawResponse                                        *http.Response
}
