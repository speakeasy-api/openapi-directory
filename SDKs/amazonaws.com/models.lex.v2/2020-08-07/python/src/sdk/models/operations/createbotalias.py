"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import audiologsetting as shared_audiologsetting
from ..shared import botaliaslocalesettings as shared_botaliaslocalesettings
from ..shared import createbotaliasresponse as shared_createbotaliasresponse
from ..shared import textlogsetting as shared_textlogsetting
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBotAliasRequestBodyConversationLogSettings:
    r"""Configures conversation logging that saves audio, text, and metadata for the conversations with your users."""
    
    audio_log_settings: Optional[list[shared_audiologsetting.AudioLogSetting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audioLogSettings'), 'exclude': lambda f: f is None }})  
    text_log_settings: Optional[list[shared_textlogsetting.TextLogSetting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textLogSettings'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBotAliasRequestBodySentimentAnalysisSettings:
    r"""Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances."""
    
    detect_sentiment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectSentiment'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBotAliasRequestBody:
    
    bot_alias_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('botAliasName') }})
    r"""The alias to create. The name must be unique for the bot."""  
    bot_alias_locale_settings: Optional[dict[str, shared_botaliaslocalesettings.BotAliasLocaleSettings]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('botAliasLocaleSettings'), 'exclude': lambda f: f is None }})
    r"""Maps configuration information to a specific locale. You can use this parameter to specify a specific Lambda function to run different functions in different locales."""  
    bot_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('botVersion'), 'exclude': lambda f: f is None }})
    r"""The version of the bot that this alias points to. You can use the <a href=\\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_UpdateBotAlias.html\\">UpdateBotAlias</a> operation to change the bot version associated with the alias."""  
    conversation_log_settings: Optional[CreateBotAliasRequestBodyConversationLogSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversationLogSettings'), 'exclude': lambda f: f is None }})
    r"""Configures conversation logging that saves audio, text, and metadata for the conversations with your users."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description of the alias. Use this description to help identify the alias."""  
    sentiment_analysis_settings: Optional[CreateBotAliasRequestBodySentimentAnalysisSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sentimentAnalysisSettings'), 'exclude': lambda f: f is None }})
    r"""Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""A list of tags to add to the bot alias. You can only add tags when you create an alias, you can't use the <code>UpdateBotAlias</code> operation to update the tags on a bot alias. To update tags, use the <code>TagResource</code> operation."""  
    

@dataclasses.dataclass
class CreateBotAliasRequest:
    
    bot_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'botId', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the bot that the alias applies to."""  
    request_body: CreateBotAliasRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateBotAliasResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_bot_alias_response: Optional[shared_createbotaliasresponse.CreateBotAliasResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    precondition_failed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PreconditionFailedException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    