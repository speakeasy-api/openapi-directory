/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * AssignmentSubmission - Assignment object to be created
 */
public class AssignmentSubmission {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowsAnonymousContributions")
    public Boolean allowsAnonymousContributions;

    public AssignmentSubmission withAllowsAnonymousContributions(Boolean allowsAnonymousContributions) {
        this.allowsAnonymousContributions = allowsAnonymousContributions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cover")
    public MediaUsage cover;

    public AssignmentSubmission withCover(MediaUsage cover) {
        this.cover = cover;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public AssignmentSubmission withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("embargo")
    public OffsetDateTime embargo;

    public AssignmentSubmission withEmbargo(OffsetDateTime embargo) {
        this.embargo = embargo;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("ends")
    public OffsetDateTime ends;

    public AssignmentSubmission withEnds(OffsetDateTime ends) {
        this.ends = ends;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("featured")
    public Boolean featured;

    public AssignmentSubmission withFeatured(Boolean featured) {
        this.featured = featured;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public AssignmentSubmission withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mediaRequired")
    public Boolean mediaRequired;

    public AssignmentSubmission withMediaRequired(Boolean mediaRequired) {
        this.mediaRequired = mediaRequired;
        return this;
    }
    
    /**
     * Optional credential id of the login which will moderator this assignment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("moderator")
    public String moderator;

    public AssignmentSubmission withModerator(String moderator) {
        this.moderator = moderator;
        return this;
    }
    
    @JsonProperty("name")
    public String name;

    public AssignmentSubmission withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * An optional assignment specific message to be displayed on successful contribution submission. For example, this might be used to inform contributors of assignment specific moderation time frames.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("receiptMessage")
    public String receiptMessage;

    public AssignmentSubmission withReceiptMessage(String receiptMessage) {
        this.receiptMessage = receiptMessage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("starts")
    public OffsetDateTime starts;

    public AssignmentSubmission withStarts(OffsetDateTime starts) {
        this.starts = starts;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public Tag[] tags;

    public AssignmentSubmission withTags(Tag[] tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urlWords")
    public String urlWords;

    public AssignmentSubmission withUrlWords(String urlWords) {
        this.urlWords = urlWords;
        return this;
    }
    
    public AssignmentSubmission(@JsonProperty("name") String name) {
        this.name = name;
  }
}
