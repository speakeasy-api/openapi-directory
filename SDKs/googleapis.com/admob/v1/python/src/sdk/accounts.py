"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Accounts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def admob_accounts_ad_units_list(self, request: operations.AdmobAccountsAdUnitsListRequest, security: operations.AdmobAccountsAdUnitsListSecurity) -> operations.AdmobAccountsAdUnitsListResponse:
        r"""List the ad units under the specified AdMob account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdmobAccountsAdUnitsListRequest, base_url, '/v1/{parent}/adUnits', request)
        
        query_params = utils.get_query_params(operations.AdmobAccountsAdUnitsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdmobAccountsAdUnitsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAdUnitsResponse])
                res.list_ad_units_response = out

        return res

    def admob_accounts_apps_list(self, request: operations.AdmobAccountsAppsListRequest, security: operations.AdmobAccountsAppsListSecurity) -> operations.AdmobAccountsAppsListResponse:
        r"""List the apps under the specified AdMob account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdmobAccountsAppsListRequest, base_url, '/v1/{parent}/apps', request)
        
        query_params = utils.get_query_params(operations.AdmobAccountsAppsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdmobAccountsAppsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAppsResponse])
                res.list_apps_response = out

        return res

    def admob_accounts_get(self, request: operations.AdmobAccountsGetRequest, security: operations.AdmobAccountsGetSecurity) -> operations.AdmobAccountsGetResponse:
        r"""Gets information about the specified AdMob publisher account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdmobAccountsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.AdmobAccountsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdmobAccountsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PublisherAccount])
                res.publisher_account = out

        return res

    def admob_accounts_list(self, request: operations.AdmobAccountsListRequest, security: operations.AdmobAccountsListSecurity) -> operations.AdmobAccountsListResponse:
        r"""Lists the AdMob publisher account that was most recently signed in to from the AdMob UI. For more information, see https://support.google.com/admob/answer/10243672."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/accounts'
        
        query_params = utils.get_query_params(operations.AdmobAccountsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdmobAccountsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPublisherAccountsResponse])
                res.list_publisher_accounts_response = out

        return res

    def admob_accounts_mediation_report_generate(self, request: operations.AdmobAccountsMediationReportGenerateRequest, security: operations.AdmobAccountsMediationReportGenerateSecurity) -> operations.AdmobAccountsMediationReportGenerateResponse:
        r"""Generates an AdMob mediation report based on the provided report specification. Returns result of a server-side streaming RPC. The result is returned in a sequence of responses."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdmobAccountsMediationReportGenerateRequest, base_url, '/v1/{parent}/mediationReport:generate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "generate_mediation_report_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdmobAccountsMediationReportGenerateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdmobAccountsMediationReportGenerateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GenerateMediationReportResponse])
                res.generate_mediation_report_response = out

        return res

    def admob_accounts_network_report_generate(self, request: operations.AdmobAccountsNetworkReportGenerateRequest, security: operations.AdmobAccountsNetworkReportGenerateSecurity) -> operations.AdmobAccountsNetworkReportGenerateResponse:
        r"""Generates an AdMob Network report based on the provided report specification. Returns result of a server-side streaming RPC. The result is returned in a sequence of responses."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdmobAccountsNetworkReportGenerateRequest, base_url, '/v1/{parent}/networkReport:generate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "generate_network_report_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdmobAccountsNetworkReportGenerateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdmobAccountsNetworkReportGenerateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GenerateNetworkReportResponse])
                res.generate_network_report_response = out

        return res

    