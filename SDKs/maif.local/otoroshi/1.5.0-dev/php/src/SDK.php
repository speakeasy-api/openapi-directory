<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - Admin API of the Otoroshi reverse proxy
 * 
 * https://maif.github.io/otoroshi/ - Find out more about Otoroshi
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see https://maif.github.io/otoroshi/
 */
class SDK
{
	public const SERVERS = [
		'http://otoroshi-api.oto.tools/',
		'http://maif.local',
	];
  	
    /**
     * Everything about Otoroshi api keys
     * 
     * @var Apikeys $$apikeys
     */
	public Apikeys $apikeys;
	
    /**
     * Everything about Otoroshi global auth. module config
     * 
     * @var AuthConfig $$authConfig
     */
	public AuthConfig $authConfig;
	
    /**
     * Everything about Otoroshi SSL/TLS certificates
     * 
     * @var Certificates $$certificates
     */
	public Certificates $certificates;
	
    /**
     * Everything about Otoroshi global configuration
     * 
     * @var Configuration $$configuration
     */
	public Configuration $configuration;
	
    /**
     * Everything about Otoroshi data exporters
     * 
     * @var DataExporterConfigs $$dataExporterConfigs
     */
	public DataExporterConfigs $dataExporterConfigs;
	
    /**
     * Everything about Otoroshi Environments
     * 
     * @var Environments $$environments
     */
	public Environments $environments;
	
    /**
     * Everything about Otoroshi service groups
     * 
     * @var Groups $$groups
     */
	public Groups $groups;
	
    /**
     * Everything about Otoroshi health status
     * 
     * @var Health $$health
     */
	public Health $health;
	
    /**
     * Everything about Otoroshi import/export
     * 
     * @var Import $$import
     */
	public Import $import;
	
    /**
     * Everything about Otoroshi global JWT token verifiers
     * 
     * @var JwtVerifiers $$jwtVerifiers
     */
	public JwtVerifiers $jwtVerifiers;
	
    /**
     * Everything about Otoroshi request transformer scripts
     * 
     * @var Scripts $$scripts
     */
	public Scripts $scripts;
	
    /**
     * Everything about Otoroshi service descriptors
     * 
     * @var Services $$services
     */
	public Services $services;
	
    /**
     * Everything about Otoroshi Snow Monkey
     * 
     * @var Snowmonkey $$snowmonkey
     */
	public Snowmonkey $snowmonkey;
	
    /**
     * Everything about Otoroshi stats
     * 
     * @var Stats $$stats
     */
	public Stats $stats;
	
    /**
     * Everything about Otoroshi entities templates
     * 
     * @var Templates $$templates
     */
	public Templates $templates;
	
    /**
     * Everything about Otoroshi validation authorities
     * 
     * @var ValidationAuthorities $$validationAuthorities
     */
	public ValidationAuthorities $validationAuthorities;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->apikeys = new Apikeys(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->authConfig = new AuthConfig(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->certificates = new Certificates(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->configuration = new Configuration(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->dataExporterConfigs = new DataExporterConfigs(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->environments = new Environments(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->groups = new Groups(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->health = new Health(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->import = new Import(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->jwtVerifiers = new JwtVerifiers(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->scripts = new Scripts(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->services = new Services(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->snowmonkey = new Snowmonkey(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->stats = new Stats(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->templates = new Templates(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->validationAuthorities = new ValidationAuthorities(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}