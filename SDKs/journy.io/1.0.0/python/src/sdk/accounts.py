"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Accounts:
    r"""Endpoints for creating, deleting or updating accounts."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_user_to_account(self, request: operations.AddUserToAccountRequestBody) -> operations.AddUserToAccountResponse:
        r"""Add users to an account
        You can add up to 100 users to an account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounts/users/add'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddUserToAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AddUserToAccount201ApplicationJSON])
                res.add_user_to_account_201_application_json_object = out
        elif http_res.status_code == 400:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AddUserToAccount400ApplicationJSON])
                res.add_user_to_account_400_application_json_object = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AddUserToAccount401ApplicationJSON])
                res.add_user_to_account_401_application_json_object = out
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AddUserToAccount429ApplicationJSON])
                res.add_user_to_account_429_application_json_object = out
        elif http_res.status_code == 500:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AddUserToAccount500ApplicationJSON])
                res.add_user_to_account_500_application_json_object = out

        return res

    def delete_account(self, request: operations.DeleteAccountRequestBody) -> operations.DeleteAccountResponse:
        r"""Delete account
        Endpoint used to delete an account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteAccount202ApplicationJSON])
                res.delete_account_202_application_json_object = out
        elif http_res.status_code == 400:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteAccount400ApplicationJSON])
                res.delete_account_400_application_json_object = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteAccount401ApplicationJSON])
                res.delete_account_401_application_json_object = out
        elif http_res.status_code == 403:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteAccount403ApplicationJSON])
                res.delete_account_403_application_json_object = out
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteAccount429ApplicationJSON])
                res.delete_account_429_application_json_object = out
        elif http_res.status_code == 500:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteAccount500ApplicationJSON])
                res.delete_account_500_application_json_object = out

        return res

    def remove_user_from_account(self, request: operations.RemoveUserFromAccountRequestBody) -> operations.RemoveUserFromAccountResponse:
        r"""Remove user from account
        You can remove up to 100 users from an account.
        
        When removing a user, the user will still be stored in journy.io, but marked as \"removed\".
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounts/users/remove'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveUserFromAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RemoveUserFromAccount204ApplicationJSON])
                res.remove_user_from_account_204_application_json_object = out
        elif http_res.status_code == 400:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RemoveUserFromAccount400ApplicationJSON])
                res.remove_user_from_account_400_application_json_object = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RemoveUserFromAccount401ApplicationJSON])
                res.remove_user_from_account_401_application_json_object = out
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RemoveUserFromAccount429ApplicationJSON])
                res.remove_user_from_account_429_application_json_object = out
        elif http_res.status_code == 500:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RemoveUserFromAccount500ApplicationJSON])
                res.remove_user_from_account_500_application_json_object = out

        return res

    def upsert_account(self, request: operations.UpsertAccountRequestBody) -> operations.UpsertAccountResponse:
        r"""Create or update account
        Endpoint used to create or update an account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounts/upsert'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpsertAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpsertAccount201ApplicationJSON])
                res.upsert_account_201_application_json_object = out
        elif http_res.status_code == 400:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpsertAccount400ApplicationJSON])
                res.upsert_account_400_application_json_object = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpsertAccount401ApplicationJSON])
                res.upsert_account_401_application_json_object = out
        elif http_res.status_code == 403:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpsertAccount403ApplicationJSON])
                res.upsert_account_403_application_json_object = out
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpsertAccount429ApplicationJSON])
                res.upsert_account_429_application_json_object = out
        elif http_res.status_code == 500:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpsertAccount500ApplicationJSON])
                res.upsert_account_500_application_json_object = out

        return res

    