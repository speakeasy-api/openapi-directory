// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTCreateDomainActionEnum
type POSTCreateDomainActionEnum string

const (
	POSTCreateDomainActionEnumCreateDomain POSTCreateDomainActionEnum = "CreateDomain"
)

func (e *POSTCreateDomainActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CreateDomain":
		*e = POSTCreateDomainActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTCreateDomainActionEnum: %s", s)
	}
}

// POSTCreateDomainVersionEnum
type POSTCreateDomainVersionEnum string

const (
	POSTCreateDomainVersionEnumTwoThousandAndNine0415 POSTCreateDomainVersionEnum = "2009-04-15"
)

func (e *POSTCreateDomainVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2009-04-15":
		*e = POSTCreateDomainVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTCreateDomainVersionEnum: %s", s)
	}
}

type POSTCreateDomainQueryParams struct {
	AWSAccessKeyID   string                      `queryParam:"style=form,explode=true,name=AWSAccessKeyId"`
	Action           POSTCreateDomainActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Signature        string                      `queryParam:"style=form,explode=true,name=Signature"`
	SignatureMethod  string                      `queryParam:"style=form,explode=true,name=SignatureMethod"`
	SignatureVersion string                      `queryParam:"style=form,explode=true,name=SignatureVersion"`
	Timestamp        string                      `queryParam:"style=form,explode=true,name=Timestamp"`
	Version          POSTCreateDomainVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTCreateDomainRequest struct {
	QueryParams POSTCreateDomainQueryParams
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTCreateDomainResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
