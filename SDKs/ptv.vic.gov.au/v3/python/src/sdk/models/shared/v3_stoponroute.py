"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import v3_stopticket as shared_v3_stopticket
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V3StopOnRoute:
    
    disruption_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disruption_ids'), 'exclude': lambda f: f is None }})
    r"""Disruption information identifier(s)"""  
    route_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('route_type'), 'exclude': lambda f: f is None }})
    r"""Transport mode identifier"""  
    stop_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_id'), 'exclude': lambda f: f is None }})
    r"""Stop identifier"""  
    stop_landmark: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_landmark'), 'exclude': lambda f: f is None }})
    r"""Landmark in proximity of stop"""  
    stop_latitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_latitude'), 'exclude': lambda f: f is None }})
    r"""Geographic coordinate of latitude at stop"""  
    stop_longitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_longitude'), 'exclude': lambda f: f is None }})
    r"""Geographic coordinate of longitude at stop"""  
    stop_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_name'), 'exclude': lambda f: f is None }})
    r"""Name of stop"""  
    stop_sequence: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_sequence'), 'exclude': lambda f: f is None }})
    r"""Sequence of the stop on the route/run; return 0 when route_id or run_id not specified. Order ascendingly by this field (when non zero) to get physical order (earliest first) of stops on the route_id/run_id."""  
    stop_suburb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_suburb'), 'exclude': lambda f: f is None }})
    r"""suburb of stop"""  
    stop_ticket: Optional[shared_v3_stopticket.V3StopTicket] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_ticket'), 'exclude': lambda f: f is None }})  
    