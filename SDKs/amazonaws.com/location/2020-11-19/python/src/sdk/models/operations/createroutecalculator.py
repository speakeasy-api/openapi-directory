"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createroutecalculatorresponse as shared_createroutecalculatorresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateRouteCalculatorRequestBodyPricingPlanEnum(str, Enum):
    r"""No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>."""
    REQUEST_BASED_USAGE = 'RequestBasedUsage'
    MOBILE_ASSET_TRACKING = 'MobileAssetTracking'
    MOBILE_ASSET_MANAGEMENT = 'MobileAssetManagement'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateRouteCalculatorRequestBody:
    
    calculator_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CalculatorName') }})
    r"""<p>The name of the route calculator resource. </p> <p>Requirements:</p> <ul> <li> <p>Can use alphanumeric characters (A–Z, a–z, 0–9) , hyphens (-), periods (.), and underscores (_).</p> </li> <li> <p>Must be a unique Route calculator resource name.</p> </li> <li> <p>No spaces allowed. For example, <code>ExampleRouteCalculator</code>.</p> </li> </ul>"""  
    data_source: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataSource') }})
    r"""<p>Specifies the data provider of traffic and road network data.</p> <note> <p>This field is case-sensitive. Enter the valid values as shown. For example, entering <code>HERE</code> returns an error.</p> </note> <p>Valid values include:</p> <ul> <li> <p> <code>Esri</code> – For additional information about <a href=\\"https://docs.aws.amazon.com/location/latest/developerguide/esri.html\\">Esri</a>'s coverage in your region of interest, see <a href=\\"https://doc.arcgis.com/en/arcgis-online/reference/network-coverage.htm\\">Esri details on street networks and traffic coverage</a>.</p> <p>Route calculators that use Esri as a data source only calculate routes that are shorter than 400 km.</p> </li> <li> <p> <code>Grab</code> – Grab provides routing functionality for Southeast Asia. For additional information about <a href=\\"https://docs.aws.amazon.com/location/latest/developerguide/grab.html\\">GrabMaps</a>' coverage, see <a href=\\"https://docs.aws.amazon.com/location/latest/developerguide/grab.html#grab-coverage-area\\">GrabMaps countries and areas covered</a>.</p> </li> <li> <p> <code>Here</code> – For additional information about <a href=\\"https://docs.aws.amazon.com/location/latest/developerguide/HERE.html\\">HERE Technologies</a>' coverage in your region of interest, see <a href=\\"https://developer.here.com/documentation/routing-api/dev_guide/topics/coverage/car-routing.html\\">HERE car routing coverage</a> and <a href=\\"https://developer.here.com/documentation/routing-api/dev_guide/topics/coverage/truck-routing.html\\">HERE truck routing coverage</a>.</p> </li> </ul> <p>For additional information , see <a href=\\"https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html\\">Data providers</a> on the <i>Amazon Location Service Developer Guide</i>.</p>"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    r"""The optional description for the route calculator resource."""  
    pricing_plan: Optional[CreateRouteCalculatorRequestBodyPricingPlanEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PricingPlan'), 'exclude': lambda f: f is None }})
    r"""No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})
    r"""<p>Applies one or more tags to the route calculator resource. A tag is a key-value pair helps manage, identify, search, and filter your resources by labelling them.</p> <ul> <li> <p>For example: { <code>\\"tag1\\" : \\"value1\\"</code>, <code>\\"tag2\\" : \\"value2\\"</code>}</p> </li> </ul> <p>Format: <code>\\"key\\" : \\"value\\"</code> </p> <p>Restrictions:</p> <ul> <li> <p>Maximum 50 tags per resource</p> </li> <li> <p>Each resource tag must be unique with a maximum of one value.</p> </li> <li> <p>Maximum key length: 128 Unicode characters in UTF-8</p> </li> <li> <p>Maximum value length: 256 Unicode characters in UTF-8</p> </li> <li> <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters: + - = . _ : / @. </p> </li> <li> <p>Cannot use \\"aws:\\" as a prefix for a key.</p> </li> </ul>"""  
    

@dataclasses.dataclass
class CreateRouteCalculatorRequest:
    
    request_body: CreateRouteCalculatorRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateRouteCalculatorResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_route_calculator_response: Optional[shared_createroutecalculatorresponse.CreateRouteCalculatorResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    