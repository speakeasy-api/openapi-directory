"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import fieldreference as shared_fieldreference
from ..shared import value as shared_value
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FieldFilterOpEnum(str, Enum):
    r"""The operator to filter by."""
    OPERATOR_UNSPECIFIED = 'OPERATOR_UNSPECIFIED'
    LESS_THAN = 'LESS_THAN'
    LESS_THAN_OR_EQUAL = 'LESS_THAN_OR_EQUAL'
    GREATER_THAN = 'GREATER_THAN'
    GREATER_THAN_OR_EQUAL = 'GREATER_THAN_OR_EQUAL'
    EQUAL = 'EQUAL'
    NOT_EQUAL = 'NOT_EQUAL'
    ARRAY_CONTAINS = 'ARRAY_CONTAINS'
    IN = 'IN'
    ARRAY_CONTAINS_ANY = 'ARRAY_CONTAINS_ANY'
    NOT_IN = 'NOT_IN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FieldFilter:
    r"""A filter on a specific field."""
    
    field: Optional[shared_fieldreference.FieldReference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})
    r"""A reference to a field in a document, ex: `stats.operations`."""  
    op: Optional[FieldFilterOpEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('op'), 'exclude': lambda f: f is None }})
    r"""The operator to filter by."""  
    value: Optional[shared_value.Value] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""A message that can hold any of the supported value types."""  
    