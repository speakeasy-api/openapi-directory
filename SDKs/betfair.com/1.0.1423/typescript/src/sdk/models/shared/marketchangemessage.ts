/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { MarketChange } from "./marketchange";
import { Expose, Type } from "class-transformer";

/**
 * Change Type - set to indicate the type of change - if null this is a delta)
 */
export enum MarketChangeMessageCtEnum {
  SubImage = "SUB_IMAGE",
  ResubDelta = "RESUB_DELTA",
  Heartbeat = "HEARTBEAT",
}

/**
 * Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented
 */
export enum MarketChangeMessageSegmentTypeEnum {
  SegStart = "SEG_START",
  Seg = "SEG",
  SegEnd = "SEG_END",
}

export class MarketChangeMessage extends SpeakeasyBase {
  /**
   * Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clk" })
  clk?: string;

  /**
   * Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "conflateMs" })
  conflateMs?: number;

  /**
   * Change Type - set to indicate the type of change - if null this is a delta)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ct" })
  ct?: MarketChangeMessageCtEnum;

  /**
   * Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "heartbeatMs" })
  heartbeatMs?: number;

  /**
   * Client generated unique id to link request with response (like json rpc)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "initialClk" })
  initialClk?: string;

  /**
   * MarketChanges - the modifications to markets (will be null on a heartbeat
   */
  @SpeakeasyMetadata({ elemType: MarketChange })
  @Expose({ name: "mc" })
  @Type(() => MarketChange)
  mc?: MarketChange[];

  /**
   * The operation type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "op" })
  op?: string;

  /**
   * Publish Time (in millis since epoch) that the changes were generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pt" })
  pt?: number;

  /**
   * Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented
   */
  @SpeakeasyMetadata()
  @Expose({ name: "segmentType" })
  segmentType?: MarketChangeMessageSegmentTypeEnum;

  /**
   * Stream status: set to null if the exchange stream data is up to date and 503 if the downstream services are experiencing latencies
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: number;
}
