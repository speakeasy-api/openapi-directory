"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datevalues as shared_datevalues
from ..shared import doublevalues as shared_doublevalues
from ..shared import enumvalues as shared_enumvalues
from ..shared import htmlvalues as shared_htmlvalues
from ..shared import integervalues as shared_integervalues
from ..shared import objectvalues as shared_objectvalues
from ..shared import textvalues as shared_textvalues
from ..shared import timestampvalues as shared_timestampvalues
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NamedProperty:
    r"""A typed name-value pair for structured data. The type of the value should be the same as the registered type for the `name` property in the object definition of `objectType`."""
    
    boolean_value: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('booleanValue'), 'exclude': lambda f: f is None }})  
    date_values: Optional[shared_datevalues.DateValues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateValues'), 'exclude': lambda f: f is None }})
    r"""List of date values."""  
    double_values: Optional[shared_doublevalues.DoubleValues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doubleValues'), 'exclude': lambda f: f is None }})
    r"""List of double values."""  
    enum_values: Optional[shared_enumvalues.EnumValues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enumValues'), 'exclude': lambda f: f is None }})
    r"""List of enum values."""  
    html_values: Optional[shared_htmlvalues.HTMLValues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('htmlValues'), 'exclude': lambda f: f is None }})
    r"""List of html values."""  
    integer_values: Optional[shared_integervalues.IntegerValues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integerValues'), 'exclude': lambda f: f is None }})
    r"""List of integer values."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the property. This name should correspond to the name of the property that was registered for object definition in the schema. The maximum allowable length for this property is 256 characters."""  
    object_values: Optional[shared_objectvalues.ObjectValues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectValues'), 'exclude': lambda f: f is None }})
    r"""List of object values."""  
    text_values: Optional[shared_textvalues.TextValues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textValues'), 'exclude': lambda f: f is None }})
    r"""List of text values."""  
    timestamp_values: Optional[shared_timestampvalues.TimestampValues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestampValues'), 'exclude': lambda f: f is None }})
    r"""List of timestamp values."""  
    