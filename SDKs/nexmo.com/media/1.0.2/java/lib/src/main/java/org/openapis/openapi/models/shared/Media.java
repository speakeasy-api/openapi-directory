/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Media - Successfully retrieved
 */
public class Media {
    /**
     * The ID of your Nexmo account. This is the same as your API key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    public String accountId;

    public Media withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * An identifier for the content. This will change if the content of the file has been changed (i.e. if you upload a new version of the file). For more information see Wikipedia: [HTTP ETag](https://en.wikipedia.org/wiki/HTTP_ETag)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public Media withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * A UUID representing the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Media withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The maximum number of times the file may be downloaded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_downloads_allowed")
    public Long maxDownloadsAllowed;

    public Media withMaxDownloadsAllowed(Long maxDownloadsAllowed) {
        this.maxDownloadsAllowed = maxDownloadsAllowed;
        return this;
    }
    
    /**
     * The size of the file in bytes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("media_size")
    public Long mediaSize;

    public Media withMediaSize(Long mediaSize) {
        this.mediaSize = mediaSize;
        return this;
    }
    
    /**
     * A user set string containing metadata about the media file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata_primary")
    public String metadataPrimary;

    public Media withMetadataPrimary(String metadataPrimary) {
        this.metadataPrimary = metadataPrimary;
        return this;
    }
    
    /**
     * A user set string containing further metadata about the media file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata_secondary")
    public String metadataSecondary;

    public Media withMetadataSecondary(String metadataSecondary) {
        this.metadataSecondary = metadataSecondary;
        return this;
    }
    
    /**
     * The IETF MIME type of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mime_type")
    public String mimeType;

    public Media withMimeType(String mimeType) {
        this.mimeType = mimeType;
        return this;
    }
    
    /**
     * The filename of the object as it was originally uploaded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_file_name")
    public String originalFileName;

    public Media withOriginalFileName(String originalFileName) {
        this.originalFileName = originalFileName;
        return this;
    }
    
    /**
     * Whether the item is available for download without authentication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public")
    public Boolean public_;

    public Media withPublic(Boolean public_) {
        this.public_ = public_;
        return this;
    }
    
    /**
     * An internal identifier of how the file is stored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("store_id")
    public String storeId;

    public Media withStoreId(String storeId) {
        this.storeId = storeId;
        return this;
    }
    
    /**
     * A timestamp for the time that the file was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_created")
    public String timeCreated;

    public Media withTimeCreated(String timeCreated) {
        this.timeCreated = timeCreated;
        return this;
    }
    
    /**
     * A timestamp for the time that the file was last modified
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_last_updated")
    public String timeLastUpdated;

    public Media withTimeLastUpdated(String timeLastUpdated) {
        this.timeLastUpdated = timeLastUpdated;
        return this;
    }
    
    /**
     * The number of times the file has been downloaded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("times_downloaded")
    public Long timesDownloaded;

    public Media withTimesDownloaded(Long timesDownloaded) {
        this.timesDownloaded = timesDownloaded;
        return this;
    }
    
    public Media(){}
}
