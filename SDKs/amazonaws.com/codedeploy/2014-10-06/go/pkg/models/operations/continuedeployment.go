// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ContinueDeploymentXAmzTargetEnum
type ContinueDeploymentXAmzTargetEnum string

const (
	ContinueDeploymentXAmzTargetEnumCodeDeploy20141006ContinueDeployment ContinueDeploymentXAmzTargetEnum = "CodeDeploy_20141006.ContinueDeployment"
)

func (e *ContinueDeploymentXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.ContinueDeployment":
		*e = ContinueDeploymentXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ContinueDeploymentXAmzTargetEnum: %s", s)
	}
}

type ContinueDeploymentHeaders struct {
	XAmzAlgorithm     *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ContinueDeploymentXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ContinueDeploymentRequest struct {
	Headers ContinueDeploymentHeaders
	Request shared.ContinueDeploymentInput `request:"mediaType=application/json"`
}

type ContinueDeploymentResponse struct {
	ContentType string
	// DeploymentAlreadyCompletedException
	DeploymentAlreadyCompletedException interface{}
	// DeploymentDoesNotExistException
	DeploymentDoesNotExistException interface{}
	// DeploymentIdRequiredException
	DeploymentIDRequiredException interface{}
	// DeploymentIsNotInReadyStateException
	DeploymentIsNotInReadyStateException interface{}
	// InvalidDeploymentIdException
	InvalidDeploymentIDException interface{}
	// InvalidDeploymentStatusException
	InvalidDeploymentStatusException interface{}
	// InvalidDeploymentWaitTypeException
	InvalidDeploymentWaitTypeException interface{}
	StatusCode                         int
	RawResponse                        *http.Response
	// UnsupportedActionForDeploymentTypeException
	UnsupportedActionForDeploymentTypeException interface{}
}
