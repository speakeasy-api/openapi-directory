// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETSetIdentityDkimEnabledActionEnum
type GETSetIdentityDkimEnabledActionEnum string

const (
	GETSetIdentityDkimEnabledActionEnumSetIdentityDkimEnabled GETSetIdentityDkimEnabledActionEnum = "SetIdentityDkimEnabled"
)

func (e *GETSetIdentityDkimEnabledActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SetIdentityDkimEnabled":
		*e = GETSetIdentityDkimEnabledActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetIdentityDkimEnabledActionEnum: %s", s)
	}
}

// GETSetIdentityDkimEnabledVersionEnum
type GETSetIdentityDkimEnabledVersionEnum string

const (
	GETSetIdentityDkimEnabledVersionEnumTwoThousandAndTen1201 GETSetIdentityDkimEnabledVersionEnum = "2010-12-01"
)

func (e *GETSetIdentityDkimEnabledVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-12-01":
		*e = GETSetIdentityDkimEnabledVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetIdentityDkimEnabledVersionEnum: %s", s)
	}
}

type GETSetIdentityDkimEnabledQueryParams struct {
	Action GETSetIdentityDkimEnabledActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it.
	DkimEnabled bool `queryParam:"style=form,explode=true,name=DkimEnabled"`
	// The identity for which DKIM signing should be enabled or disabled.
	Identity string                               `queryParam:"style=form,explode=true,name=Identity"`
	Version  GETSetIdentityDkimEnabledVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETSetIdentityDkimEnabledHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETSetIdentityDkimEnabledRequest struct {
	QueryParams GETSetIdentityDkimEnabledQueryParams
	Headers     GETSetIdentityDkimEnabledHeaders
}

type GETSetIdentityDkimEnabledResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
