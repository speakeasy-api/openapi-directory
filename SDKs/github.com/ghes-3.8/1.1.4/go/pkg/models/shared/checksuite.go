// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type CheckSuiteConclusionEnum string

const (
	CheckSuiteConclusionEnumSuccess        CheckSuiteConclusionEnum = "success"
	CheckSuiteConclusionEnumFailure        CheckSuiteConclusionEnum = "failure"
	CheckSuiteConclusionEnumNeutral        CheckSuiteConclusionEnum = "neutral"
	CheckSuiteConclusionEnumCancelled      CheckSuiteConclusionEnum = "cancelled"
	CheckSuiteConclusionEnumSkipped        CheckSuiteConclusionEnum = "skipped"
	CheckSuiteConclusionEnumTimedOut       CheckSuiteConclusionEnum = "timed_out"
	CheckSuiteConclusionEnumActionRequired CheckSuiteConclusionEnum = "action_required"
	CheckSuiteConclusionEnumStartupFailure CheckSuiteConclusionEnum = "startup_failure"
	CheckSuiteConclusionEnumStale          CheckSuiteConclusionEnum = "stale"
	CheckSuiteConclusionEnumNull           CheckSuiteConclusionEnum = "null"
)

func (e *CheckSuiteConclusionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "failure":
		fallthrough
	case "neutral":
		fallthrough
	case "cancelled":
		fallthrough
	case "skipped":
		fallthrough
	case "timed_out":
		fallthrough
	case "action_required":
		fallthrough
	case "startup_failure":
		fallthrough
	case "stale":
		fallthrough
	case "null":
		*e = CheckSuiteConclusionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckSuiteConclusionEnum: %s", s)
	}
}

type CheckSuiteStatusEnum string

const (
	CheckSuiteStatusEnumQueued     CheckSuiteStatusEnum = "queued"
	CheckSuiteStatusEnumInProgress CheckSuiteStatusEnum = "in_progress"
	CheckSuiteStatusEnumCompleted  CheckSuiteStatusEnum = "completed"
)

func (e *CheckSuiteStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "queued":
		fallthrough
	case "in_progress":
		fallthrough
	case "completed":
		*e = CheckSuiteStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckSuiteStatusEnum: %s", s)
	}
}

// CheckSuite - A suite of checks performed on the code of a given code change
type CheckSuite struct {
	After string `json:"after"`
	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	App          NullableIntegration      `json:"app"`
	Before       string                   `json:"before"`
	CheckRunsURL string                   `json:"check_runs_url"`
	Conclusion   CheckSuiteConclusionEnum `json:"conclusion"`
	CreatedAt    time.Time                `json:"created_at"`
	HeadBranch   string                   `json:"head_branch"`
	// A commit.
	HeadCommit SimpleCommit `json:"head_commit"`
	// The SHA of the head commit that is being checked.
	HeadSha              string               `json:"head_sha"`
	ID                   int64                `json:"id"`
	LatestCheckRunsCount int64                `json:"latest_check_runs_count"`
	NodeID               string               `json:"node_id"`
	PullRequests         []PullRequestMinimal `json:"pull_requests"`
	// Minimal Repository
	Repository        MinimalRepository    `json:"repository"`
	Rerequestable     *bool                `json:"rerequestable,omitempty"`
	RunsRerequestable *bool                `json:"runs_rerequestable,omitempty"`
	Status            CheckSuiteStatusEnum `json:"status"`
	UpdatedAt         time.Time            `json:"updated_at"`
	URL               string               `json:"url"`
}
