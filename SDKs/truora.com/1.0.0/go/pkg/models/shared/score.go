// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ScoreDataSetEnum - Dataset summed up to create the score
type ScoreDataSetEnum string

const (
	ScoreDataSetEnumAffiliationsAndInsurances ScoreDataSetEnum = "affiliations_and_insurances"
	ScoreDataSetEnumAlertInMedia              ScoreDataSetEnum = "alert_in_media"
	ScoreDataSetEnumBehavior                  ScoreDataSetEnum = "behavior"
	ScoreDataSetEnumBusinessBackground        ScoreDataSetEnum = "business_background"
	ScoreDataSetEnumCriminalRecord            ScoreDataSetEnum = "criminal_record"
	ScoreDataSetEnumDrivingLicenses           ScoreDataSetEnum = "driving_licenses"
	ScoreDataSetEnumInternationalBackground   ScoreDataSetEnum = "international_background"
	ScoreDataSetEnumLegalBackground           ScoreDataSetEnum = "legal_background"
	ScoreDataSetEnumPersonalIdentity          ScoreDataSetEnum = "personal_identity"
	ScoreDataSetEnumProfessionalBackground    ScoreDataSetEnum = "professional_background"
	ScoreDataSetEnumTrafficFines              ScoreDataSetEnum = "traffic_fines"
	ScoreDataSetEnumVehicleInformation        ScoreDataSetEnum = "vehicle_information"
	ScoreDataSetEnumVehiclePermits            ScoreDataSetEnum = "vehicle_permits"
	ScoreDataSetEnumTaxesAndFinances          ScoreDataSetEnum = "taxes_and_finances"
)

func (e ScoreDataSetEnum) ToPointer() *ScoreDataSetEnum {
	return &e
}

func (e *ScoreDataSetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "affiliations_and_insurances":
		fallthrough
	case "alert_in_media":
		fallthrough
	case "behavior":
		fallthrough
	case "business_background":
		fallthrough
	case "criminal_record":
		fallthrough
	case "driving_licenses":
		fallthrough
	case "international_background":
		fallthrough
	case "legal_background":
		fallthrough
	case "personal_identity":
		fallthrough
	case "professional_background":
		fallthrough
	case "traffic_fines":
		fallthrough
	case "vehicle_information":
		fallthrough
	case "vehicle_permits":
		fallthrough
	case "taxes_and_finances":
		*e = ScoreDataSetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScoreDataSetEnum: %v", v)
	}
}

// ScoreResultEnum - Overall result of the data collected. If at least one collected data status is found, the result will be found, otherwise, it will be the most frecuent status
type ScoreResultEnum string

const (
	ScoreResultEnumPending  ScoreResultEnum = "pending"
	ScoreResultEnumFound    ScoreResultEnum = "found"
	ScoreResultEnumNotFound ScoreResultEnum = "not_found"
	ScoreResultEnumError    ScoreResultEnum = "error"
	ScoreResultEnumDelayed  ScoreResultEnum = "delayed"
	ScoreResultEnumIgnored  ScoreResultEnum = "ignored"
)

func (e ScoreResultEnum) ToPointer() *ScoreResultEnum {
	return &e
}

func (e *ScoreResultEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "found":
		fallthrough
	case "not_found":
		fallthrough
	case "error":
		fallthrough
	case "delayed":
		fallthrough
	case "ignored":
		*e = ScoreResultEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScoreResultEnum: %v", v)
	}
}

// ScoreSeverityEnum - Risk asociated with each category for the search according to the information found. None is returned when the person, vehicle or company is in the clear. Unknown is returned when the score is none due to a problem with one of the searches
type ScoreSeverityEnum string

const (
	ScoreSeverityEnumUnknown  ScoreSeverityEnum = "unknown"
	ScoreSeverityEnumNone     ScoreSeverityEnum = "none"
	ScoreSeverityEnumVeryLow  ScoreSeverityEnum = "very_low"
	ScoreSeverityEnumLow      ScoreSeverityEnum = "low"
	ScoreSeverityEnumMedium   ScoreSeverityEnum = "medium"
	ScoreSeverityEnumHigh     ScoreSeverityEnum = "high"
	ScoreSeverityEnumVeryHigh ScoreSeverityEnum = "very_high"
)

func (e ScoreSeverityEnum) ToPointer() *ScoreSeverityEnum {
	return &e
}

func (e *ScoreSeverityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		fallthrough
	case "none":
		fallthrough
	case "very_low":
		fallthrough
	case "low":
		fallthrough
	case "medium":
		fallthrough
	case "high":
		fallthrough
	case "very_high":
		*e = ScoreSeverityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScoreSeverityEnum: %v", v)
	}
}

// Score - Represents dataset scores. A score is a number between 0 and 1 that indicates how trustworthy the person, vehicle, or company is accordig to the result of the background check. Severity represents the risk associated with each dataset according to the background check. Keep in mind that you should use either the score or the severity but not both
type Score struct {
	// Represents score detail of a background check
	ByID ScoreDetail `json:"by_id"`
	// Represents score detail of a background check
	ByName ScoreDetail `json:"by_name"`
	// Dataset summed up to create the score
	DataSet ScoreDataSetEnum `json:"data_set"`
	// Overall result of the data collected. If at least one collected data status is found, the result will be found, otherwise, it will be the most frecuent status
	Result *ScoreResultEnum `json:"result,omitempty"`
	// Dataset score. Number between 0 and 1 where 1 is the best score.
	Score float32 `json:"score"`
	// Risk asociated with each category for the search according to the information found. None is returned when the person, vehicle or company is in the clear. Unknown is returned when the score is none due to a problem with one of the searches
	Severity ScoreSeverityEnum `json:"severity"`
}
