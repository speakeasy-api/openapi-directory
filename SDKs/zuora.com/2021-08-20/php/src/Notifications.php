<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Notifications 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete an email template
     * 
     * Deletes an email template.
     * 
     * **Note**: This operation is only applicable to notifications for custom events.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DELETEDELETEEmailTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DELETEDELETEEmailTemplateResponse
     */
	public function deleteDELETEEmailTemplate(
        \OpenAPI\OpenAPI\Models\Operations\DELETEDELETEEmailTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DELETEDELETEEmailTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/email-templates/{id}', \OpenAPI\OpenAPI\Models\Operations\DELETEDELETEEmailTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DELETEDELETEEmailTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a notification definition
     * 
     * Deletes a notification definition.
     * 
     * **Note**: This operation is only applicable to notifications for custom events.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DELETEDELETENotificationDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DELETEDELETENotificationDefinitionResponse
     */
	public function deleteDELETENotificationDefinition(
        \OpenAPI\OpenAPI\Models\Operations\DELETEDELETENotificationDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DELETEDELETENotificationDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/notification-definitions/{id}', \OpenAPI\OpenAPI\Models\Operations\DELETEDELETENotificationDefinitionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DELETEDELETENotificationDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete notification histories for an account
     * 
     * Delete all notification histories for the given account. All email and callout notifications for this account will be deleted upon successful operation.
     * 
     * **Note**: This operation is only available if you have the Notification and the Configurable Event features enabled.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DELETEDELETENotificationHistoryForAccountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DELETEDELETENotificationHistoryForAccountResponse
     */
	public function deleteDELETENotificationHistoryForAccount(
        \OpenAPI\OpenAPI\Models\Operations\DELETEDELETENotificationHistoryForAccountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DELETEDELETENotificationHistoryForAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/history');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DELETEDELETENotificationHistoryForAccountRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DELETEDELETENotificationHistoryForAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notificationsHistoryDeletionTaskResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotificationsHistoryDeletionTaskResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $response->deleteDELETENotificationHistoryForAccount400ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List callout notification histories
     * 
     * Describes how to get a notification history for callouts.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETCalloutHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETCalloutHistoryResponse
     */
	public function getCalloutHistory(
        \OpenAPI\OpenAPI\Models\Operations\GETCalloutHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETCalloutHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/notification-history/callout');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETCalloutHistoryRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETCalloutHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getCalloutHistoryVOsType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETCalloutHistoryVOsType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List email notification histories
     * 
     * Describes how to get a notification history for notification emails.
     * 
     * 
     * ## Notes
     * Request parameters and their values may be appended with a "?" following the HTTPS GET request.  Additional request parameter are separated by "&". 
     * 
     * For example:
     * 
     * `GET https://rest.zuora.com/v1/notification-history/email?startTime=2015-01-12T00:00:00&endTime=2015-01-15T00:00:00&failedOnly=false&eventCategory=1000&pageSize=1`
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETEmailHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETEmailHistoryResponse
     */
	public function getEmailHistory(
        \OpenAPI\OpenAPI\Models\Operations\GETEmailHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETEmailHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/notification-history/email');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETEmailHistoryRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETEmailHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEmailHistoryVOsType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETEmailHistoryVOsType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve an email template
     * 
     * Queries the email template of the specified ID.
     * 
     * **Note**: This operation is only applicable to email templates for custom events.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGETEmailTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGETEmailTemplateResponse
     */
	public function getGETEmailTemplate(
        \OpenAPI\OpenAPI\Models\Operations\GETGETEmailTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGETEmailTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/email-templates/{id}', \OpenAPI\OpenAPI\Models\Operations\GETGETEmailTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGETEmailTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPublicEmailTemplateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETPublicEmailTemplateResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a notification definition
     * 
     * Queries the notification definition of the given ID.
     * 
     * **Note**: This operation is only applicable to notifications for custom events.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGETNotificationDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGETNotificationDefinitionResponse
     */
	public function getGETNotificationDefinition(
        \OpenAPI\OpenAPI\Models\Operations\GETGETNotificationDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGETNotificationDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/notification-definitions/{id}', \OpenAPI\OpenAPI\Models\Operations\GETGETNotificationDefinitionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGETNotificationDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPublicNotificationDefinitionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETPublicNotificationDefinitionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a notification history deletion task
     * 
     * Get the notification history deletion task by ID.
     * 
     * **Note**: This operation is only available if you have the Notification and the Configurable Event features enabled.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGETNotificationHistoryDeletionTaskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGETNotificationHistoryDeletionTaskResponse
     */
	public function getGETNotificationHistoryDeletionTask(
        \OpenAPI\OpenAPI\Models\Operations\GETGETNotificationHistoryDeletionTaskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGETNotificationHistoryDeletionTaskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/history/tasks/{id}', \OpenAPI\OpenAPI\Models\Operations\GETGETNotificationHistoryDeletionTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGETNotificationHistoryDeletionTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notificationsHistoryDeletionTaskResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotificationsHistoryDeletionTaskResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List email templates
     * 
     * Queries email templates.
     * 
     * **Note**: This operation is only applicable to email templates for custom events.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETQueryEmailTemplatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETQueryEmailTemplatesResponse
     */
	public function getQueryEmailTemplates(
        \OpenAPI\OpenAPI\Models\Operations\GETQueryEmailTemplatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETQueryEmailTemplatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/email-templates');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETQueryEmailTemplatesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETQueryEmailTemplatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getQueryEmailTemplates200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GETQueryEmailTemplates200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List notification definitions
     * 
     * Queries notification definitions with the specified filters.
     * 
     * **Note**: This operation is only applicable to notifications for custom events.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETQueryNotificationDefinitionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETQueryNotificationDefinitionsResponse
     */
	public function getQueryNotificationDefinitions(
        \OpenAPI\OpenAPI\Models\Operations\GETQueryNotificationDefinitionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETQueryNotificationDefinitionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/notification-definitions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETQueryNotificationDefinitionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETQueryNotificationDefinitionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getQueryNotificationDefinitions200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GETQueryNotificationDefinitions200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an email template
     * 
     * Creates an email template.
     * 
     * **Note**: This operation is only applicable to email templates for custom events.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTCreateEmailTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTCreateEmailTemplateResponse
     */
	public function postCreateEmailTemplate(
        \OpenAPI\OpenAPI\Models\Operations\POSTCreateEmailTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTCreateEmailTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/email-templates');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "postPublicEmailTemplateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTCreateEmailTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPublicEmailTemplateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETPublicEmailTemplateResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a notification definition
     * 
     * Creates a notification definition. If a filter rule is specified, it will be evaluated to
     * see if the notification definition is qualified to handle the incoming events 
     * during runtime. If the notification is qualified, it will send the email and
     * invoke the callout if it has an email template or a callout. See a step-by-step guide for
     * [creating a custom notification](https://www.zuora.com/developer/api-guides/#Callout-to-external-system-for-provisioning-or-entitlements)
     * in [Zuora API Guides](https://www.zuora.com/developer/api-guides/).
     * 
     * **Note**: This operation is only applicable to notifications for custom events.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTCreateNotificationDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTCreateNotificationDefinitionResponse
     */
	public function postCreateNotificationDefinition(
        \OpenAPI\OpenAPI\Models\Operations\POSTCreateNotificationDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTCreateNotificationDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/notification-definitions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "postPublicNotificationDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTCreateNotificationDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPublicNotificationDefinitionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETPublicNotificationDefinitionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an email template
     * 
     * Updates an email template.
     * 
     * **Note**: This operation is only applicable to email templates for custom events.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTUpdateEmailTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTUpdateEmailTemplateResponse
     */
	public function putUpdateEmailTemplate(
        \OpenAPI\OpenAPI\Models\Operations\PUTUpdateEmailTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTUpdateEmailTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/email-templates/{id}', \OpenAPI\OpenAPI\Models\Operations\PUTUpdateEmailTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "putPublicEmailTemplateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTUpdateEmailTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPublicEmailTemplateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETPublicEmailTemplateResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a notification definition
     * 
     * Updates a notification definition.
     * 
     * **Note**: This operation is only applicable to notifications for custom events.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTUpdateNotificationDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTUpdateNotificationDefinitionResponse
     */
	public function putUpdateNotificationDefinition(
        \OpenAPI\OpenAPI\Models\Operations\PUTUpdateNotificationDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTUpdateNotificationDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/notification-definitions/{id}', \OpenAPI\OpenAPI\Models\Operations\PUTUpdateNotificationDefinitionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "putPublicNotificationDefinitionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTUpdateNotificationDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPublicNotificationDefinitionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETPublicNotificationDefinitionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
}