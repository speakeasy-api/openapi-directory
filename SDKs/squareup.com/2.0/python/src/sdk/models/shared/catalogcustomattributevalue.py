"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CatalogCustomAttributeValue:
    r"""An instance of a custom attribute. Custom attributes can be defined and
    added to `ITEM` and `ITEM_VARIATION` type catalog objects.
    [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes).
    """
    
    boolean_value: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('boolean_value'), 'exclude': lambda f: f is None }})
    r"""A `true` or `false` value. Populated if `type` = `BOOLEAN`."""  
    custom_attribute_definition_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_attribute_definition_id'), 'exclude': lambda f: f is None }})
    r"""__Read-only.__ The id of the [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition) this value belongs to."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""__Read-only.__ A copy of key from the associated `CatalogCustomAttributeDefinition`."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the custom attribute."""  
    number_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number_value'), 'exclude': lambda f: f is None }})
    r"""Populated if `type` = `NUMBER`. Contains a string
    representation of a decimal number, using a `.` as the decimal separator.
    """  
    selection_uid_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selection_uid_values'), 'exclude': lambda f: f is None }})
    r"""One or more choices from `allowed_selections`. Populated if `type` = `SELECTION`."""  
    string_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('string_value'), 'exclude': lambda f: f is None }})
    r"""The string value of the custom attribute.  Populated if `type` = `STRING`."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""__Read-only.__ A copy of type from the associated `CatalogCustomAttributeDefinition`."""  
    