// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StopTriggerXAmzTargetEnum
type StopTriggerXAmzTargetEnum string

const (
	StopTriggerXAmzTargetEnumAwsGlueStopTrigger StopTriggerXAmzTargetEnum = "AWSGlue.StopTrigger"
)

func (e StopTriggerXAmzTargetEnum) ToPointer() *StopTriggerXAmzTargetEnum {
	return &e
}

func (e *StopTriggerXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSGlue.StopTrigger":
		*e = StopTriggerXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StopTriggerXAmzTargetEnum: %v", v)
	}
}

type StopTriggerRequest struct {
	StopTriggerRequest shared.StopTriggerRequest `request:"mediaType=application/json"`
	XAmzAlgorithm      *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget         StopTriggerXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StopTriggerResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// EntityNotFoundException
	EntityNotFoundException interface{}
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	// OperationTimeoutException
	OperationTimeoutException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// Success
	StopTriggerResponse *shared.StopTriggerResponse
}
