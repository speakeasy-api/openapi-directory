// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InventorySourceStatusEntityStatusEnum - Whether or not the inventory source is servable. Acceptable values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. Default value is `ENTITY_STATUS_ACTIVE`.
type InventorySourceStatusEntityStatusEnum string

const (
	InventorySourceStatusEntityStatusEnumEntityStatusUnspecified          InventorySourceStatusEntityStatusEnum = "ENTITY_STATUS_UNSPECIFIED"
	InventorySourceStatusEntityStatusEnumEntityStatusActive               InventorySourceStatusEntityStatusEnum = "ENTITY_STATUS_ACTIVE"
	InventorySourceStatusEntityStatusEnumEntityStatusArchived             InventorySourceStatusEntityStatusEnum = "ENTITY_STATUS_ARCHIVED"
	InventorySourceStatusEntityStatusEnumEntityStatusDraft                InventorySourceStatusEntityStatusEnum = "ENTITY_STATUS_DRAFT"
	InventorySourceStatusEntityStatusEnumEntityStatusPaused               InventorySourceStatusEntityStatusEnum = "ENTITY_STATUS_PAUSED"
	InventorySourceStatusEntityStatusEnumEntityStatusScheduledForDeletion InventorySourceStatusEntityStatusEnum = "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
)

func (e InventorySourceStatusEntityStatusEnum) ToPointer() *InventorySourceStatusEntityStatusEnum {
	return &e
}

func (e *InventorySourceStatusEntityStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENTITY_STATUS_UNSPECIFIED":
		fallthrough
	case "ENTITY_STATUS_ACTIVE":
		fallthrough
	case "ENTITY_STATUS_ARCHIVED":
		fallthrough
	case "ENTITY_STATUS_DRAFT":
		fallthrough
	case "ENTITY_STATUS_PAUSED":
		fallthrough
	case "ENTITY_STATUS_SCHEDULED_FOR_DELETION":
		*e = InventorySourceStatusEntityStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InventorySourceStatusEntityStatusEnum: %v", v)
	}
}

// InventorySourceStatusInput - The status related settings of the inventory source.
type InventorySourceStatusInput struct {
	// The user-provided reason for pausing this inventory source. Must not exceed 100 characters. Only applicable when entity_status is set to `ENTITY_STATUS_PAUSED`.
	EntityPauseReason *string `json:"entityPauseReason,omitempty"`
	// Whether or not the inventory source is servable. Acceptable values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. Default value is `ENTITY_STATUS_ACTIVE`.
	EntityStatus *InventorySourceStatusEntityStatusEnum `json:"entityStatus,omitempty"`
}

// InventorySourceStatusConfigStatusEnum - Output only. The configuration status of the inventory source. Only applicable for guaranteed inventory sources. Acceptable values are `INVENTORY_SOURCE_CONFIG_STATUS_PENDING` and `INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED`. An inventory source must be configured (fill in the required fields, choose creatives, and select a default campaign) before it can serve.
type InventorySourceStatusConfigStatusEnum string

const (
	InventorySourceStatusConfigStatusEnumInventorySourceConfigStatusUnspecified InventorySourceStatusConfigStatusEnum = "INVENTORY_SOURCE_CONFIG_STATUS_UNSPECIFIED"
	InventorySourceStatusConfigStatusEnumInventorySourceConfigStatusPending     InventorySourceStatusConfigStatusEnum = "INVENTORY_SOURCE_CONFIG_STATUS_PENDING"
	InventorySourceStatusConfigStatusEnumInventorySourceConfigStatusCompleted   InventorySourceStatusConfigStatusEnum = "INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED"
)

func (e InventorySourceStatusConfigStatusEnum) ToPointer() *InventorySourceStatusConfigStatusEnum {
	return &e
}

func (e *InventorySourceStatusConfigStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INVENTORY_SOURCE_CONFIG_STATUS_UNSPECIFIED":
		fallthrough
	case "INVENTORY_SOURCE_CONFIG_STATUS_PENDING":
		fallthrough
	case "INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED":
		*e = InventorySourceStatusConfigStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InventorySourceStatusConfigStatusEnum: %v", v)
	}
}

// InventorySourceStatusSellerStatusEnum - Output only. The status set by the seller for the inventory source. Only applicable for inventory sources synced directly from the publishers. Acceptable values are `ENTITY_STATUS_ACTIVE` and `ENTITY_STATUS_PAUSED`.
type InventorySourceStatusSellerStatusEnum string

const (
	InventorySourceStatusSellerStatusEnumEntityStatusUnspecified          InventorySourceStatusSellerStatusEnum = "ENTITY_STATUS_UNSPECIFIED"
	InventorySourceStatusSellerStatusEnumEntityStatusActive               InventorySourceStatusSellerStatusEnum = "ENTITY_STATUS_ACTIVE"
	InventorySourceStatusSellerStatusEnumEntityStatusArchived             InventorySourceStatusSellerStatusEnum = "ENTITY_STATUS_ARCHIVED"
	InventorySourceStatusSellerStatusEnumEntityStatusDraft                InventorySourceStatusSellerStatusEnum = "ENTITY_STATUS_DRAFT"
	InventorySourceStatusSellerStatusEnumEntityStatusPaused               InventorySourceStatusSellerStatusEnum = "ENTITY_STATUS_PAUSED"
	InventorySourceStatusSellerStatusEnumEntityStatusScheduledForDeletion InventorySourceStatusSellerStatusEnum = "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
)

func (e InventorySourceStatusSellerStatusEnum) ToPointer() *InventorySourceStatusSellerStatusEnum {
	return &e
}

func (e *InventorySourceStatusSellerStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENTITY_STATUS_UNSPECIFIED":
		fallthrough
	case "ENTITY_STATUS_ACTIVE":
		fallthrough
	case "ENTITY_STATUS_ARCHIVED":
		fallthrough
	case "ENTITY_STATUS_DRAFT":
		fallthrough
	case "ENTITY_STATUS_PAUSED":
		fallthrough
	case "ENTITY_STATUS_SCHEDULED_FOR_DELETION":
		*e = InventorySourceStatusSellerStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InventorySourceStatusSellerStatusEnum: %v", v)
	}
}

// InventorySourceStatus - The status related settings of the inventory source.
type InventorySourceStatus struct {
	// Output only. The configuration status of the inventory source. Only applicable for guaranteed inventory sources. Acceptable values are `INVENTORY_SOURCE_CONFIG_STATUS_PENDING` and `INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED`. An inventory source must be configured (fill in the required fields, choose creatives, and select a default campaign) before it can serve.
	ConfigStatus *InventorySourceStatusConfigStatusEnum `json:"configStatus,omitempty"`
	// The user-provided reason for pausing this inventory source. Must not exceed 100 characters. Only applicable when entity_status is set to `ENTITY_STATUS_PAUSED`.
	EntityPauseReason *string `json:"entityPauseReason,omitempty"`
	// Whether or not the inventory source is servable. Acceptable values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. Default value is `ENTITY_STATUS_ACTIVE`.
	EntityStatus *InventorySourceStatusEntityStatusEnum `json:"entityStatus,omitempty"`
	// Output only. The seller-provided reason for pausing this inventory source. Only applicable for inventory sources synced directly from the publishers and when seller_status is set to `ENTITY_STATUS_PAUSED`.
	SellerPauseReason *string `json:"sellerPauseReason,omitempty"`
	// Output only. The status set by the seller for the inventory source. Only applicable for inventory sources synced directly from the publishers. Acceptable values are `ENTITY_STATUS_ACTIVE` and `ENTITY_STATUS_PAUSED`.
	SellerStatus *InventorySourceStatusSellerStatusEnum `json:"sellerStatus,omitempty"`
}
