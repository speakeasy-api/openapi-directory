// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateBulkInventoryFeedTypeEnum - The feed Type
type UpdateBulkInventoryFeedTypeEnum string

const (
	UpdateBulkInventoryFeedTypeEnumInventory   UpdateBulkInventoryFeedTypeEnum = "inventory"
	UpdateBulkInventoryFeedTypeEnumMpInventory UpdateBulkInventoryFeedTypeEnum = "MP_INVENTORY"
)

func (e *UpdateBulkInventoryFeedTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inventory":
		fallthrough
	case "MP_INVENTORY":
		*e = UpdateBulkInventoryFeedTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateBulkInventoryFeedTypeEnum: %s", s)
	}
}

type UpdateBulkInventoryQueryParams struct {
	// The feed Type
	FeedType UpdateBulkInventoryFeedTypeEnum `queryParam:"style=form,explode=true,name=feedType"`
	// The shipNode for which the inventory is to be updated. Not required in case of Multi Node Inventory Update Feed (feedType=MP_INVENTORY)
	ShipNode *string `queryParam:"style=form,explode=true,name=shipNode"`
}

type UpdateBulkInventoryHeaders struct {
	// A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
	WmConsumerChannelType *string `header:"style=simple,explode=false,name=WM_CONSUMER.CHANNEL.TYPE"`
	// A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
	WmQosCorrelationID string `header:"style=simple,explode=false,name=WM_QOS.CORRELATION_ID"`
	// The access token retrieved in the Token API call
	WmSecAccessToken string `header:"style=simple,explode=false,name=WM_SEC.ACCESS_TOKEN"`
	// Walmart Service Name
	WmSvcName string `header:"style=simple,explode=false,name=WM_SVC.NAME"`
}

type UpdateBulkInventoryRequestBodyFile struct {
	Content []byte `multipartForm:"content"`
	File    string `multipartForm:"name=file"`
}

type UpdateBulkInventoryRequestBody struct {
	// Feed file to upload
	File UpdateBulkInventoryRequestBodyFile `multipartForm:"file"`
}

type UpdateBulkInventoryRequest struct {
	QueryParams UpdateBulkInventoryQueryParams
	Headers     UpdateBulkInventoryHeaders
	Request     *UpdateBulkInventoryRequestBody `request:"mediaType=multipart/form-data"`
}

// UpdateBulkInventory200ApplicationXML - Successful Operation
type UpdateBulkInventory200ApplicationXML struct {
	AdditionalAttributes map[string]interface{}
	Errors               map[string]interface{}
	// A unique ID, returned from the Bulk Upload API, used for tracking the feed file
	FeedID *string
}

// UpdateBulkInventory200ApplicationJSON - Successful Operation
type UpdateBulkInventory200ApplicationJSON struct {
	AdditionalAttributes map[string]interface{} `json:"additionalAttributes,omitempty"`
	Errors               map[string]interface{} `json:"errors,omitempty"`
	// A unique ID, returned from the Bulk Upload API, used for tracking the feed file
	FeedID *string `json:"feedId,omitempty"`
}

type UpdateBulkInventoryResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful Operation
	UpdateBulkInventory200ApplicationJSONObject *UpdateBulkInventory200ApplicationJSON
}
