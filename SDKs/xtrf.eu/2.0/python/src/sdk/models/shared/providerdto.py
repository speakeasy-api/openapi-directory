"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import addressdto as shared_addressdto
from ..shared import competenciesdto as shared_competenciesdto
from ..shared import contactdto as shared_contactdto
from ..shared import customfielddto as shared_customfielddto
from ..shared import providerpersondto as shared_providerpersondto
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProviderDTOStatusEnum(str, Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    WAITING_FOR_APPROVAL = 'WAITING_FOR_APPROVAL'
    REJECTED = 'REJECTED'
    TOO_EXPENSIVE = 'TOO_EXPENSIVE'
    INCOMPLETE_DATA = 'INCOMPLETE_DATA'
    POTENTIAL = 'POTENTIAL'
    NOT_CONFIRMED = 'NOT_CONFIRMED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProviderDTO:
    r"""Success"""
    
    billing_address: Optional[shared_addressdto.AddressDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingAddress'), 'exclude': lambda f: f is None }})  
    branch_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branchId'), 'exclude': lambda f: f is None }})  
    competencies: Optional[shared_competenciesdto.CompetenciesDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('competencies'), 'exclude': lambda f: f is None }})  
    contact: Optional[shared_contactdto.ContactDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact'), 'exclude': lambda f: f is None }})  
    correspondence_address: Optional[shared_addressdto.AddressDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('correspondenceAddress'), 'exclude': lambda f: f is None }})  
    custom_fields: Optional[list[shared_customfielddto.CustomFieldDTO]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFields'), 'exclude': lambda f: f is None }})  
    full_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullName'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    id_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idNumber'), 'exclude': lambda f: f is None }})  
    lead_source_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leadSourceId'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})  
    persons: Optional[list[shared_providerpersondto.ProviderPersonDTO]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('persons'), 'exclude': lambda f: f is None }})  
    status: Optional[ProviderDTOStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    