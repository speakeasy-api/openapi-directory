"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import report as shared_report
from ..shared import resourcequotasremaining as shared_resourcequotasremaining
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetReportsResponse:
    r"""The main response class which holds the reports from the Reporting API `batchGet` call."""
    
    query_cost: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryCost'), 'exclude': lambda f: f is None }})
    r"""The amount of resource quota tokens deducted to execute the query. Includes all responses."""  
    reports: Optional[list[shared_report.Report]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reports'), 'exclude': lambda f: f is None }})
    r"""Responses corresponding to each of the request."""  
    resource_quotas_remaining: Optional[shared_resourcequotasremaining.ResourceQuotasRemaining] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceQuotasRemaining'), 'exclude': lambda f: f is None }})
    r"""The resource quota tokens remaining for the property after the request is completed."""  
    