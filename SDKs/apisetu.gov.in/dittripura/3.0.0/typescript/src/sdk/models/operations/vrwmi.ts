/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class VrwmiSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-APISETU-APIKEY",
  })
  apiKey: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-APISETU-CLIENTID",
  })
  clientId: string;
}

export class VrwmiRequestBodyCertificateParameters extends SpeakeasyBase {
  /**
   * Reference No.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RefNo" })
  refNo: string;

  /**
   * Token No.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TokenNo" })
  tokenNo: string;
}

/**
 * The format of the certificate in response.
 */
export enum VrwmiRequestBodyFormatEnum {
  Pdf = "pdf",
}

/**
 * Request format
 */
export class VrwmiRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "certificateParameters" })
  @Type(() => VrwmiRequestBodyCertificateParameters)
  certificateParameters?: VrwmiRequestBodyCertificateParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "consentArtifact" })
  @Type(() => shared.ConsentArtifactSchema)
  consentArtifact?: shared.ConsentArtifactSchema;

  /**
   * The format of the certificate in response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format: VrwmiRequestBodyFormatEnum;

  /**
   * A unique transaction id for this request in UUID format. It is used for tracking the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "txnId" })
  txnId: string;
}

export enum Vrwmi504ApplicationJSONErrorEnum {
  GatewayTimeout = "gateway_timeout",
}

export enum Vrwmi504ApplicationJSONErrorDescriptionEnum {
  PublisherServiceDidNotRespondInTime = "Publisher service did not respond in time",
}

/**
 * Gateway timeout
 */
export class Vrwmi504ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Vrwmi504ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Vrwmi504ApplicationJSONErrorDescriptionEnum;
}

export enum Vrwmi503ApplicationJSONErrorEnum {
  ServiceUnavailable = "service_unavailable",
}

export enum Vrwmi503ApplicationJSONErrorDescriptionEnum {
  PublisherServiceIsTemporarilyUnavailable = "Publisher service is temporarily unavailable",
}

/**
 * Service unavailable
 */
export class Vrwmi503ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Vrwmi503ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Vrwmi503ApplicationJSONErrorDescriptionEnum;
}

export enum Vrwmi502ApplicationJSONErrorEnum {
  BadGatewy = "bad_gatewy",
}

export enum Vrwmi502ApplicationJSONErrorDescriptionEnum {
  PublisherServiceReturnedAnInvalidResponse = "Publisher service returned an invalid response",
}

/**
 * Bad gateway
 */
export class Vrwmi502ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Vrwmi502ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Vrwmi502ApplicationJSONErrorDescriptionEnum;
}

export enum Vrwmi500ApplicationJSONErrorEnum {
  InternalServerError = "internal_server_error",
}

export enum Vrwmi500ApplicationJSONErrorDescriptionEnum {
  InternalServerError = "Internal server error",
}

/**
 * Internal server error
 */
export class Vrwmi500ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Vrwmi500ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Vrwmi500ApplicationJSONErrorDescriptionEnum;
}

export enum Vrwmi404ApplicationJSONErrorEnum {
  RecordNotFound = "record_not_found",
  UrlNotFound = "url_not_found",
}

export enum Vrwmi404ApplicationJSONErrorDescriptionEnum {
  NoRecordFound = "No record found",
  YourAPIUrlOrPathIsIncorrect = "Your API url or path is incorrect",
}

/**
 * No record found
 */
export class Vrwmi404ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Vrwmi404ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Vrwmi404ApplicationJSONErrorDescriptionEnum;
}

export enum Vrwmi401ApplicationJSONErrorEnum {
  InvalidAuthentication = "invalid_authentication",
  InvalidAuthorization = "invalid_authorization",
}

export enum Vrwmi401ApplicationJSONErrorDescriptionEnum {
  AuthenticationFailed = "Authentication failed",
  YouAreNotAuthorizedToUseThisAPI = "You are not authorized to use this API",
}

/**
 * Unauthorized access
 */
export class Vrwmi401ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Vrwmi401ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Vrwmi401ApplicationJSONErrorDescriptionEnum;
}

export enum Vrwmi400ApplicationJSONErrorEnum {
  MissingParameter = "missing_parameter",
  InvalidParameter = "invalid_parameter",
  InvalidFormat = "invalid_format",
  InvalidTxnid = "invalid_txnid",
  InvalidConsentid = "invalid_consentid",
}

export enum Vrwmi400ApplicationJSONErrorDescriptionEnum {
  PleaseProvideAllMandatoryParameters = "Please provide all mandatory parameters",
  BadRequest = "Bad request",
  TheFormatParameterIsInvalid = "The format parameter is invalid",
  TheTxnIdParameterMustBeInUUIDFormat = "The txnId parameter must be in UUID format",
  TheConsentIdParameterMustBeInUUIDFormat = "The consentId parameter must be in UUID format",
}

/**
 * Bad request
 */
export class Vrwmi400ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Vrwmi400ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Vrwmi400ApplicationJSONErrorDescriptionEnum;
}

export class VrwmiResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Bad request
   */
  @SpeakeasyMetadata()
  vrwmi400ApplicationJSONObject?: Vrwmi400ApplicationJSON;

  /**
   * Unauthorized access
   */
  @SpeakeasyMetadata()
  vrwmi401ApplicationJSONObject?: Vrwmi401ApplicationJSON;

  /**
   * No record found
   */
  @SpeakeasyMetadata()
  vrwmi404ApplicationJSONObject?: Vrwmi404ApplicationJSON;

  /**
   * Internal server error
   */
  @SpeakeasyMetadata()
  vrwmi500ApplicationJSONObject?: Vrwmi500ApplicationJSON;

  /**
   * Bad gateway
   */
  @SpeakeasyMetadata()
  vrwmi502ApplicationJSONObject?: Vrwmi502ApplicationJSON;

  /**
   * Service unavailable
   */
  @SpeakeasyMetadata()
  vrwmi503ApplicationJSONObject?: Vrwmi503ApplicationJSON;

  /**
   * Gateway timeout
   */
  @SpeakeasyMetadata()
  vrwmi504ApplicationJSONObject?: Vrwmi504ApplicationJSON;
}
