/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A structure that describes certain columns on certain rows.
 */
export class CreateDataCellsFilterRequestBodyTableData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ColumnNames" })
  columnNames?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "ColumnWildcard" })
  @Type(() => shared.ColumnWildcard)
  columnWildcard?: shared.ColumnWildcard;

  @SpeakeasyMetadata()
  @Expose({ name: "DatabaseName" })
  databaseName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RowFilter" })
  @Type(() => shared.RowFilter)
  rowFilter?: shared.RowFilter;

  @SpeakeasyMetadata()
  @Expose({ name: "TableCatalogId" })
  tableCatalogId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TableName" })
  tableName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "VersionId" })
  versionId?: string;
}

export class CreateDataCellsFilterRequestBody extends SpeakeasyBase {
  /**
   * A structure that describes certain columns on certain rows.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TableData" })
  @Type(() => CreateDataCellsFilterRequestBodyTableData)
  tableData: CreateDataCellsFilterRequestBodyTableData;
}

export class CreateDataCellsFilterRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateDataCellsFilterRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateDataCellsFilterResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * AlreadyExistsException
   */
  @SpeakeasyMetadata()
  alreadyExistsException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createDataCellsFilterResponse?: Record<string, any>;

  /**
   * EntityNotFoundException
   */
  @SpeakeasyMetadata()
  entityNotFoundException?: any;

  /**
   * InternalServiceException
   */
  @SpeakeasyMetadata()
  internalServiceException?: any;

  /**
   * InvalidInputException
   */
  @SpeakeasyMetadata()
  invalidInputException?: any;

  /**
   * OperationTimeoutException
   */
  @SpeakeasyMetadata()
  operationTimeoutException?: any;

  /**
   * ResourceNumberLimitExceededException
   */
  @SpeakeasyMetadata()
  resourceNumberLimitExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
