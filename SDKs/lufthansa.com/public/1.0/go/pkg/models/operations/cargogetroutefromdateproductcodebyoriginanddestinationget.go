// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CargoGetRouteFromDateProductCodeByOriginAndDestinationGetSecurity struct {
	Auth shared.SchemeAuth `security:"scheme,type=oauth2"`
}

// CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum - Product code for requested service and specials : 3-letter eg: YNZ
type CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum string

const (
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumFan CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "FAN"
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumFco CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "FCO"
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumFcp CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "FCP"
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumFdg CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "FDG"
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumFtf CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "FTF"
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumFun CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "FUN"
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumFwn CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "FWN"
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumYco CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "YCO"
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumYcp CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "YCP"
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumYdg CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "YDG"
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumYnb CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "YNB"
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumYnz CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "YNZ"
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumYtf CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "YTF"
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumYun CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "YUN"
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumZxb CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "ZXB"
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumZxf CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "ZXF"
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnumZxr CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum = "ZXR"
)

func (e *CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FAN":
		fallthrough
	case "FCO":
		fallthrough
	case "FCP":
		fallthrough
	case "FDG":
		fallthrough
	case "FTF":
		fallthrough
	case "FUN":
		fallthrough
	case "FWN":
		fallthrough
	case "YCO":
		fallthrough
	case "YCP":
		fallthrough
	case "YDG":
		fallthrough
	case "YNB":
		fallthrough
	case "YNZ":
		fallthrough
	case "YTF":
		fallthrough
	case "YUN":
		fallthrough
	case "ZXB":
		fallthrough
	case "ZXF":
		fallthrough
	case "ZXR":
		*e = CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum: %s", s)
	}
}

type CargoGetRouteFromDateProductCodeByOriginAndDestinationGetPathParams struct {
	// Arrival airport : 3-letter IATA airport code, e.g. HKG.
	Destination string `pathParam:"style=simple,explode=false,name=destination"`
	// Departure date in the local time of the departure airport. Based on LAT (Latest Acceptance Time). format : yyyy-MM-dd eg : 2017-07-15
	FromDate string `pathParam:"style=simple,explode=false,name=fromDate"`
	// Departure Airport : 3-letter IATA airport code, e.g. FRA.
	Origin string `pathParam:"style=simple,explode=false,name=origin"`
	// Product code for requested service and specials : 3-letter eg: YNZ
	ProductCode CargoGetRouteFromDateProductCodeByOriginAndDestinationGetProductCodeEnum `pathParam:"style=simple,explode=false,name=productCode"`
}

type CargoGetRouteFromDateProductCodeByOriginAndDestinationGetHeaders struct {
	// http header: application/json or application/xml (Acceptable values are: "application/json", "application/xml")
	Accept string `header:"style=simple,explode=false,name=Accept"`
}

type CargoGetRouteFromDateProductCodeByOriginAndDestinationGetRequest struct {
	PathParams CargoGetRouteFromDateProductCodeByOriginAndDestinationGetPathParams
	Headers    CargoGetRouteFromDateProductCodeByOriginAndDestinationGetHeaders
	Security   CargoGetRouteFromDateProductCodeByOriginAndDestinationGetSecurity
}

type CargoGetRouteFromDateProductCodeByOriginAndDestinationGetResponse struct {
	CargoGetRouteFromDateProductCodeByOriginAndDestinationGet200ApplicationJSONObject map[string]interface{}
	ContentType                                                                       string
	StatusCode                                                                        int
	RawResponse                                                                       *http.Response
}
