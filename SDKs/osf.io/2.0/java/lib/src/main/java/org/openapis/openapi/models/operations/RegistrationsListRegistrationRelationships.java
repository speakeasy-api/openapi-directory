/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;



/**
 * RegistrationsListRegistrationRelationships - URLs to other entities or entity collections that have a relationship to the registration entity.
 */
public class RegistrationsListRegistrationRelationships {
    /**
     * A link to the list of institutions this registration is affiliated with.
     */
    
    public String affiliatedInstitutions;

    public RegistrationsListRegistrationRelationships withAffiliatedInstitutions(String affiliatedInstitutions) {
        this.affiliatedInstitutions = affiliatedInstitutions;
        return this;
    }
    
    /**
     * A link to the list of the registered node's children (components).
     */
    
    public String children;

    public RegistrationsListRegistrationRelationships withChildren(String children) {
        this.children = children;
        return this;
    }
    
    /**
     * A link to the citation details of this registration.
     */
    
    public String citation;

    public RegistrationsListRegistrationRelationships withCitation(String citation) {
        this.citation = citation;
        return this;
    }
    
    /**
     * A link to the list of comments on this registration.
     */
    
    public String comments;

    public RegistrationsListRegistrationRelationships withComments(String comments) {
        this.comments = comments;
        return this;
    }
    
    /**
     * A link to the list of contributors on this registration.
     */
    
    public String contributors;

    public RegistrationsListRegistrationRelationships withContributors(String contributors) {
        this.contributors = contributors;
        return this;
    }
    
    /**
     * A link to the list of storage providers that have been enabled on this registration.
     */
    
    public String files;

    public RegistrationsListRegistrationRelationships withFiles(String files) {
        this.files = files;
        return this;
    }
    
    /**
     * A link to the list of nodes that are forks of this registration.
     */
    
    public String forks;

    public RegistrationsListRegistrationRelationships withForks(String forks) {
        this.forks = forks;
        return this;
    }
    
    /**
     * A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers).
     */
    
    public String identifiers;

    public RegistrationsListRegistrationRelationships withIdentifiers(String identifiers) {
        this.identifiers = identifiers;
        return this;
    }
    
    /**
     * A link to the list of nodes that are linked to this registration.
     */
    
    public String linkedNodes;

    public RegistrationsListRegistrationRelationships withLinkedNodes(String linkedNodes) {
        this.linkedNodes = linkedNodes;
        return this;
    }
    
    /**
     * A link to the list of log actions pertaining to this registration.
     */
    
    public String logs;

    public RegistrationsListRegistrationRelationships withLogs(String logs) {
        this.logs = logs;
        return this;
    }
    
    /**
     * A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead.
     */
    
    public String nodeLinks;

    public RegistrationsListRegistrationRelationships withNodeLinks(String nodeLinks) {
        this.nodeLinks = nodeLinks;
        return this;
    }
    
    /**
     * A link to the node that is the direct parent of the current registration, if the current registration is a child registration.
     */
    
    public String parent;

    public RegistrationsListRegistrationRelationships withParent(String parent) {
        this.parent = parent;
        return this;
    }
    
    /**
     * A link to the user that initiated this registration.
     */
    
    public String registeredBy;

    public RegistrationsListRegistrationRelationships withRegisteredBy(String registeredBy) {
        this.registeredBy = registeredBy;
        return this;
    }
    
    /**
     * A link to the node that this registration was registered from.
     */
    
    public String registeredFrom;

    public RegistrationsListRegistrationRelationships withRegisteredFrom(String registeredFrom) {
        this.registeredFrom = registeredFrom;
        return this;
    }
    
    /**
     * A link to the metaschema that this registration conforms to.
     */
    
    public String registrationSchema;

    public RegistrationsListRegistrationRelationships withRegistrationSchema(String registrationSchema) {
        this.registrationSchema = registrationSchema;
        return this;
    }
    
    /**
     * A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration.
     */
    
    public String root;

    public RegistrationsListRegistrationRelationships withRoot(String root) {
        this.root = root;
        return this;
    }
    
    /**
     * A link to the list of view only links that have been created for this registration.
     */
    
    public String viewOnlyLinks;

    public RegistrationsListRegistrationRelationships withViewOnlyLinks(String viewOnlyLinks) {
        this.viewOnlyLinks = viewOnlyLinks;
        return this;
    }
    
    /**
     * A link to the list of wiki pages for this registration.
     */
    
    public String wikis;

    public RegistrationsListRegistrationRelationships withWikis(String wikis) {
        this.wikis = wikis;
        return this;
    }
    
    public RegistrationsListRegistrationRelationships(){}
}
