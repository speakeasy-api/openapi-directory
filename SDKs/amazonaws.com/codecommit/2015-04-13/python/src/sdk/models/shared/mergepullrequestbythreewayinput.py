"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import conflictdetailleveltypeenum_enum as shared_conflictdetailleveltypeenum_enum
from ..shared import conflictresolution as shared_conflictresolution
from ..shared import conflictresolutionstrategytypeenum_enum as shared_conflictresolutionstrategytypeenum_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MergePullRequestByThreeWayInput:
    
    pull_request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pullRequestId') }})  
    repository_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositoryName') }})  
    author_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorName'), 'exclude': lambda f: f is None }})  
    commit_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commitMessage'), 'exclude': lambda f: f is None }})  
    conflict_detail_level: Optional[shared_conflictdetailleveltypeenum_enum.ConflictDetailLevelTypeEnumEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conflictDetailLevel'), 'exclude': lambda f: f is None }})  
    conflict_resolution: Optional[shared_conflictresolution.ConflictResolution] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conflictResolution'), 'exclude': lambda f: f is None }})  
    conflict_resolution_strategy: Optional[shared_conflictresolutionstrategytypeenum_enum.ConflictResolutionStrategyTypeEnumEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conflictResolutionStrategy'), 'exclude': lambda f: f is None }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    keep_empty_folders: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keepEmptyFolders'), 'exclude': lambda f: f is None }})  
    source_commit_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceCommitId'), 'exclude': lambda f: f is None }})  
    