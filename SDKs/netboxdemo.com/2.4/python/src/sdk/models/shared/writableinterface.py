"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class WritableInterfaceFormFactorEnum(str, Enum):
    ZERO = '0'
    TWO_HUNDRED = '200'
    EIGHT_HUNDRED = '800'
    ONE_THOUSAND = '1000'
    ONE_THOUSAND_ONE_HUNDRED_AND_FIFTY = '1150'
    ONE_THOUSAND_ONE_HUNDRED_AND_SEVENTY = '1170'
    ONE_THOUSAND_AND_FIFTY = '1050'
    ONE_THOUSAND_ONE_HUNDRED = '1100'
    ONE_THOUSAND_TWO_HUNDRED = '1200'
    ONE_THOUSAND_THREE_HUNDRED = '1300'
    ONE_THOUSAND_THREE_HUNDRED_AND_TEN = '1310'
    ONE_THOUSAND_THREE_HUNDRED_AND_TWENTY = '1320'
    ONE_THOUSAND_THREE_HUNDRED_AND_FIFTY = '1350'
    ONE_THOUSAND_FOUR_HUNDRED = '1400'
    ONE_THOUSAND_FIVE_HUNDRED = '1500'
    ONE_THOUSAND_FIVE_HUNDRED_AND_TEN = '1510'
    ONE_THOUSAND_FIVE_HUNDRED_AND_TWENTY = '1520'
    ONE_THOUSAND_FIVE_HUNDRED_AND_FIFTY = '1550'
    ONE_THOUSAND_SIX_HUNDRED = '1600'
    TWO_THOUSAND_SIX_HUNDRED = '2600'
    TWO_THOUSAND_SIX_HUNDRED_AND_TEN = '2610'
    TWO_THOUSAND_SIX_HUNDRED_AND_TWENTY = '2620'
    TWO_THOUSAND_SIX_HUNDRED_AND_THIRTY = '2630'
    TWO_THOUSAND_SIX_HUNDRED_AND_FORTY = '2640'
    SIX_THOUSAND_ONE_HUNDRED = '6100'
    SIX_THOUSAND_TWO_HUNDRED = '6200'
    SIX_THOUSAND_THREE_HUNDRED = '6300'
    SIX_THOUSAND_FOUR_HUNDRED = '6400'
    SIX_THOUSAND_FIVE_HUNDRED = '6500'
    SIX_THOUSAND_SIX_HUNDRED = '6600'
    SIX_THOUSAND_SEVEN_HUNDRED = '6700'
    THREE_THOUSAND_AND_TEN = '3010'
    THREE_THOUSAND_AND_TWENTY = '3020'
    THREE_THOUSAND_AND_FORTY = '3040'
    THREE_THOUSAND_AND_EIGHTY = '3080'
    THREE_THOUSAND_ONE_HUNDRED_AND_SIXTY = '3160'
    THREE_THOUSAND_THREE_HUNDRED_AND_TWENTY = '3320'
    FOUR_THOUSAND = '4000'
    FOUR_THOUSAND_AND_TEN = '4010'
    FOUR_THOUSAND_AND_FORTY = '4040'
    FOUR_THOUSAND_AND_FIFTY = '4050'
    FIVE_THOUSAND = '5000'
    FIVE_THOUSAND_AND_FIFTY = '5050'
    FIVE_THOUSAND_ONE_HUNDRED = '5100'
    FIVE_THOUSAND_ONE_HUNDRED_AND_FIFTY = '5150'
    FIVE_THOUSAND_TWO_HUNDRED = '5200'
    FIVE_THOUSAND_THREE_HUNDRED = '5300'
    FIVE_THOUSAND_THREE_HUNDRED_AND_TEN = '5310'
    FIVE_THOUSAND_THREE_HUNDRED_AND_TWENTY = '5320'
    FIVE_THOUSAND_THREE_HUNDRED_AND_THIRTY = '5330'
    THIRTY_TWO_THOUSAND_SEVEN_HUNDRED_AND_SIXTY_SEVEN = '32767'

class WritableInterfaceModeEnum(str, Enum):
    ONE_HUNDRED = '100'
    TWO_HUNDRED = '200'
    THREE_HUNDRED = '300'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WritableInterfaceInput:
    
    circuit_termination: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('circuit_termination') }})  
    device: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})  
    form_factor: Optional[WritableInterfaceFormFactorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_factor'), 'exclude': lambda f: f is None }})  
    lag: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lag'), 'exclude': lambda f: f is None }})  
    mac_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mac_address'), 'exclude': lambda f: f is None }})  
    mgmt_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mgmt_only'), 'exclude': lambda f: f is None }})
    r"""This interface is used only for out-of-band management"""  
    mode: Optional[WritableInterfaceModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})  
    mtu: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mtu'), 'exclude': lambda f: f is None }})  
    tagged_vlans: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagged_vlans'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    untagged_vlan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('untagged_vlan'), 'exclude': lambda f: f is None }})  
    