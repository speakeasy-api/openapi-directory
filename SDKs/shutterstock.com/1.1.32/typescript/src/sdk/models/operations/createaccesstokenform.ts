/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token
 */
export enum CreateAccessTokenApplicationXWwwFormUrlencodedExpiresEnum {
  True = "true",
  False = "false",
}

/**
 * Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants
 */
export enum CreateAccessTokenApplicationXWwwFormUrlencodedGrantTypeEnum {
  AuthorizationCode = "authorization_code",
  ClientCredentials = "client_credentials",
  RefreshToken = "refresh_token",
}

/**
 * User type to be authorized (usually 'customer')
 */
export enum CreateAccessTokenApplicationXWwwFormUrlencodedRealmEnum {
  Customer = "customer",
  Contributor = "contributor",
}

export class CreateAccessTokenApplicationXWwwFormUrlencoded extends SpeakeasyBase {
  /**
   * Client ID (Consumer Key) of your application
   */
  @SpeakeasyMetadata({ data: "form, name=client_id" })
  clientId: string;

  /**
   * Client Secret (Consumer Secret) of your application
   */
  @SpeakeasyMetadata({ data: "form, name=client_secret" })
  clientSecret?: string;

  /**
   * Response code from the /oauth/authorize flow; required if grant_type=authorization_code
   */
  @SpeakeasyMetadata({ data: "form, name=code" })
  code?: string;

  /**
   * Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token
   */
  @SpeakeasyMetadata({ data: "form, name=expires" })
  expires?: CreateAccessTokenApplicationXWwwFormUrlencodedExpiresEnum;

  /**
   * Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants
   */
  @SpeakeasyMetadata({ data: "form, name=grant_type" })
  grantType: CreateAccessTokenApplicationXWwwFormUrlencodedGrantTypeEnum;

  /**
   * User type to be authorized (usually 'customer')
   */
  @SpeakeasyMetadata({ data: "form, name=realm" })
  realm?: CreateAccessTokenApplicationXWwwFormUrlencodedRealmEnum;

  /**
   * Pass this along with grant_type=refresh_token to get a fresh access token
   */
  @SpeakeasyMetadata({ data: "form, name=refresh_token" })
  refreshToken?: string;
}

export class CreateAccessTokenFormResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  oauthAccessTokenResponse?: shared.OauthAccessTokenResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
