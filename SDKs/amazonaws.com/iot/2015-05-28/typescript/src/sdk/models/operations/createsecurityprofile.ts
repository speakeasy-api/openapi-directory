/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class CreateSecurityProfileRequestBody extends SpeakeasyBase {
  /**
   * <p> <i>Please use <a>CreateSecurityProfileRequest$additionalMetricsToRetainV2</a> instead.</i> </p> <p>A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's <code>behaviors</code>, but it is also retained for any metric specified here. Can be used with custom metrics; cannot be used with dimensions.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "additionalMetricsToRetain" })
  additionalMetricsToRetain?: string[];

  /**
   * A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's <code>behaviors</code>, but it is also retained for any metric specified here. Can be used with custom metrics; cannot be used with dimensions.
   */
  @SpeakeasyMetadata({ elemType: shared.MetricToRetain })
  @Expose({ name: "additionalMetricsToRetainV2" })
  @Type(() => shared.MetricToRetain)
  additionalMetricsToRetainV2?: shared.MetricToRetain[];

  /**
   * Specifies the destinations to which alerts are sent. (Alerts are always sent to the console.) Alerts are generated when a device (thing) violates a behavior.
   */
  @SpeakeasyMetadata({ elemType: shared.AlertTarget })
  @Expose({ name: "alertTargets" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.AlertTarget> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.AlertTarget);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  alertTargets?: Record<string, shared.AlertTarget>;

  /**
   * Specifies the behaviors that, when violated by a device (thing), cause an alert.
   */
  @SpeakeasyMetadata({ elemType: shared.Behavior })
  @Expose({ name: "behaviors" })
  @Type(() => shared.Behavior)
  behaviors?: shared.Behavior[];

  /**
   * A description of the security profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "securityProfileDescription" })
  securityProfileDescription?: string;

  /**
   * Metadata that can be used to manage the security profile.
   */
  @SpeakeasyMetadata({ elemType: shared.Tag })
  @Expose({ name: "tags" })
  @Type(() => shared.Tag)
  tags?: shared.Tag[];
}

export class CreateSecurityProfileRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateSecurityProfileRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The name you are giving to the security profile.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=securityProfileName",
  })
  securityProfileName: string;
}

export class CreateSecurityProfileResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createSecurityProfileResponse?: shared.CreateSecurityProfileResponse;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceAlreadyExistsException
   */
  @SpeakeasyMetadata()
  resourceAlreadyExistsException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
