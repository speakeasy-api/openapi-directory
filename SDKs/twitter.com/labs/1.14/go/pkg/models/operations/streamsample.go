// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type StreamSampleQueryParams struct {
	// A comma-separated list of tweet expansions.
	Expansions [][]shared.TweetExpansionsParamTypeEnum `queryParam:"style=form,explode=true,name=expansions"`
}

type StreamSampleRequest struct {
	QueryParams StreamSampleQueryParams
}

// StreamSample200ApplicationJSON2 - A tweet or error that can be returned by the streaming tweet API.
type StreamSample200ApplicationJSON2 struct {
	Errors []shared.Problem `json:"errors"`
}

type StreamSample200ApplicationJSONType string

const (
	StreamSample200ApplicationJSONTypeSingleTweetLookupResponse       StreamSample200ApplicationJSONType = "SingleTweetLookupResponse"
	StreamSample200ApplicationJSONTypeStreamSample200ApplicationJSON2 StreamSample200ApplicationJSONType = "streamSample_200ApplicationJSON_2"
)

type StreamSample200ApplicationJSON struct {
	SingleTweetLookupResponse       *shared.SingleTweetLookupResponse
	StreamSample200ApplicationJSON2 *StreamSample200ApplicationJSON2

	Type StreamSample200ApplicationJSONType
}

func CreateStreamSample200ApplicationJSONSingleTweetLookupResponse(singleTweetLookupResponse shared.SingleTweetLookupResponse) StreamSample200ApplicationJSON {
	typ := StreamSample200ApplicationJSONTypeSingleTweetLookupResponse

	return StreamSample200ApplicationJSON{
		SingleTweetLookupResponse: &singleTweetLookupResponse,
		Type:                      typ,
	}
}

func CreateStreamSample200ApplicationJSONStreamSample200ApplicationJSON2(streamSample200ApplicationJSON2 StreamSample200ApplicationJSON2) StreamSample200ApplicationJSON {
	typ := StreamSample200ApplicationJSONTypeStreamSample200ApplicationJSON2

	return StreamSample200ApplicationJSON{
		StreamSample200ApplicationJSON2: &streamSample200ApplicationJSON2,
		Type:                            typ,
	}
}

func (u *StreamSample200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	singleTweetLookupResponse := new(shared.SingleTweetLookupResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&singleTweetLookupResponse); err == nil {
		u.SingleTweetLookupResponse = singleTweetLookupResponse
		u.Type = StreamSample200ApplicationJSONTypeSingleTweetLookupResponse
		return nil
	}

	streamSample200ApplicationJSON2 := new(StreamSample200ApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&streamSample200ApplicationJSON2); err == nil {
		u.StreamSample200ApplicationJSON2 = streamSample200ApplicationJSON2
		u.Type = StreamSample200ApplicationJSONTypeStreamSample200ApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u StreamSample200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.SingleTweetLookupResponse != nil {
		return json.Marshal(u.SingleTweetLookupResponse)
	}

	if u.StreamSample200ApplicationJSON2 != nil {
		return json.Marshal(u.StreamSample200ApplicationJSON2)
	}

	return nil, nil
}

type StreamSampleResponse struct {
	ContentType string
	// The request has failed.
	Error *shared.Error
	// The request has failed.
	Problem     *shared.Problem
	StatusCode  int
	RawResponse *http.Response
	// The request was successful. Successful responses will return a stream of individual JSON Tweet payloads.
	StreamSample200ApplicationJSONObject *StreamSample200ApplicationJSON
}
