// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// AdminListUsersFlagEnum
type AdminListUsersFlagEnum string

const (
	AdminListUsersFlagEnumActive    AdminListUsersFlagEnum = "active"
	AdminListUsersFlagEnumNew       AdminListUsersFlagEnum = "new"
	AdminListUsersFlagEnumStaff     AdminListUsersFlagEnum = "staff"
	AdminListUsersFlagEnumSuspended AdminListUsersFlagEnum = "suspended"
	AdminListUsersFlagEnumBlocked   AdminListUsersFlagEnum = "blocked"
	AdminListUsersFlagEnumSuspect   AdminListUsersFlagEnum = "suspect"
)

func (e *AdminListUsersFlagEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "new":
		fallthrough
	case "staff":
		fallthrough
	case "suspended":
		fallthrough
	case "blocked":
		fallthrough
	case "suspect":
		*e = AdminListUsersFlagEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AdminListUsersFlagEnum: %s", s)
	}
}

type AdminListUsersPathParams struct {
	Flag AdminListUsersFlagEnum `pathParam:"style=simple,explode=false,name=flag"`
}

// AdminListUsersAscEnum
type AdminListUsersAscEnum string

const (
	AdminListUsersAscEnumTrue AdminListUsersAscEnum = "true"
)

func (e *AdminListUsersAscEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		*e = AdminListUsersAscEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AdminListUsersAscEnum: %s", s)
	}
}

// AdminListUsersOrderEnum
type AdminListUsersOrderEnum string

const (
	AdminListUsersOrderEnumCreated      AdminListUsersOrderEnum = "created"
	AdminListUsersOrderEnumLastEmailed  AdminListUsersOrderEnum = "last_emailed"
	AdminListUsersOrderEnumSeen         AdminListUsersOrderEnum = "seen"
	AdminListUsersOrderEnumUsername     AdminListUsersOrderEnum = "username"
	AdminListUsersOrderEnumEmail        AdminListUsersOrderEnum = "email"
	AdminListUsersOrderEnumTrustLevel   AdminListUsersOrderEnum = "trust_level"
	AdminListUsersOrderEnumDaysVisited  AdminListUsersOrderEnum = "days_visited"
	AdminListUsersOrderEnumPostsRead    AdminListUsersOrderEnum = "posts_read"
	AdminListUsersOrderEnumTopicsViewed AdminListUsersOrderEnum = "topics_viewed"
	AdminListUsersOrderEnumPosts        AdminListUsersOrderEnum = "posts"
	AdminListUsersOrderEnumReadTime     AdminListUsersOrderEnum = "read_time"
)

func (e *AdminListUsersOrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "created":
		fallthrough
	case "last_emailed":
		fallthrough
	case "seen":
		fallthrough
	case "username":
		fallthrough
	case "email":
		fallthrough
	case "trust_level":
		fallthrough
	case "days_visited":
		fallthrough
	case "posts_read":
		fallthrough
	case "topics_viewed":
		fallthrough
	case "posts":
		fallthrough
	case "read_time":
		*e = AdminListUsersOrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AdminListUsersOrderEnum: %s", s)
	}
}

type AdminListUsersQueryParams struct {
	Asc        *AdminListUsersAscEnum   `queryParam:"style=form,explode=true,name=asc"`
	Order      *AdminListUsersOrderEnum `queryParam:"style=form,explode=true,name=order"`
	Page       *int64                   `queryParam:"style=form,explode=true,name=page"`
	ShowEmails *bool                    `queryParam:"style=form,explode=true,name=show_emails"`
}

type AdminListUsersRequest struct {
	PathParams  AdminListUsersPathParams
	QueryParams AdminListUsersQueryParams
}

type AdminListUsers200ApplicationJSON struct {
	Active                 bool          `json:"active"`
	Admin                  bool          `json:"admin"`
	AvatarTemplate         string        `json:"avatar_template"`
	CreatedAt              string        `json:"created_at"`
	CreatedAtAge           float64       `json:"created_at_age"`
	DaysVisited            int64         `json:"days_visited"`
	Email                  *string       `json:"email,omitempty"`
	FlagLevel              int64         `json:"flag_level"`
	ID                     int64         `json:"id"`
	LastEmailedAge         float64       `json:"last_emailed_age"`
	LastEmailedAt          string        `json:"last_emailed_at"`
	LastSeenAge            float64       `json:"last_seen_age"`
	LastSeenAt             string        `json:"last_seen_at"`
	ManualLockedTrustLevel string        `json:"manual_locked_trust_level"`
	Moderator              bool          `json:"moderator"`
	Name                   string        `json:"name"`
	PostCount              int64         `json:"post_count"`
	PostsReadCount         int64         `json:"posts_read_count"`
	SecondaryEmails        []interface{} `json:"secondary_emails,omitempty"`
	Staged                 bool          `json:"staged"`
	TimeRead               int64         `json:"time_read"`
	Title                  string        `json:"title"`
	TopicsEntered          int64         `json:"topics_entered"`
	TrustLevel             int64         `json:"trust_level"`
	Username               string        `json:"username"`
}

type AdminListUsersResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// response
	AdminListUsers200ApplicationJSONObjects []AdminListUsers200ApplicationJSON
}
