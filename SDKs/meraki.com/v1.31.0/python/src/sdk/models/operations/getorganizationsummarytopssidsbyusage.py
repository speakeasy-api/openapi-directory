"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetOrganizationSummaryTopSsidsByUsageRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    t0: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 't0', 'style': 'form', 'explode': True }})
    r"""The beginning of the timespan for the data."""  
    t1: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 't1', 'style': 'form', 'explode': True }})
    r"""The end of the timespan for the data. t1 can be a maximum of 31 days after t0."""  
    timespan: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timespan', 'style': 'form', 'explode': True }})
    r"""The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSummaryTopSsidsByUsage200ApplicationJSONClientsCounts:
    r"""Counts of the clients"""
    
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""Total counts of the clients"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSummaryTopSsidsByUsage200ApplicationJSONClients:
    r"""Clients info of the SSID"""
    
    counts: Optional[GetOrganizationSummaryTopSsidsByUsage200ApplicationJSONClientsCounts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('counts'), 'exclude': lambda f: f is None }})
    r"""Counts of the clients"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSummaryTopSsidsByUsage200ApplicationJSONUsage:
    r"""Date usage of the SSID, in megabytes"""
    
    downstream: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('downstream'), 'exclude': lambda f: f is None }})
    r"""Downstream usage of the SSID"""  
    percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentage'), 'exclude': lambda f: f is None }})
    r"""Percentage usage of the SSID"""  
    total: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""Total usage of the SSID"""  
    upstream: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upstream'), 'exclude': lambda f: f is None }})
    r"""Upstream usage of the SSID"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSummaryTopSsidsByUsage200ApplicationJSON:
    
    clients: Optional[GetOrganizationSummaryTopSsidsByUsage200ApplicationJSONClients] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clients'), 'exclude': lambda f: f is None }})
    r"""Clients info of the SSID"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the SSID"""  
    usage: Optional[GetOrganizationSummaryTopSsidsByUsage200ApplicationJSONUsage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage'), 'exclude': lambda f: f is None }})
    r"""Date usage of the SSID, in megabytes"""  
    

@dataclasses.dataclass
class GetOrganizationSummaryTopSsidsByUsageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_organization_summary_top_ssids_by_usage_200_application_json_objects: Optional[list[GetOrganizationSummaryTopSsidsByUsage200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    