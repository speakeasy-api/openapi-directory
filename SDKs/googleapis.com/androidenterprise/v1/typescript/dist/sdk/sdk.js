"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var devices_1 = require("./devices");
var enterprises_1 = require("./enterprises");
var entitlements_1 = require("./entitlements");
var grouplicenses_1 = require("./grouplicenses");
var grouplicenseusers_1 = require("./grouplicenseusers");
var installs_1 = require("./installs");
var managedconfigurationsfordevice_1 = require("./managedconfigurationsfordevice");
var managedconfigurationsforuser_1 = require("./managedconfigurationsforuser");
var managedconfigurationssettings_1 = require("./managedconfigurationssettings");
var permissions_1 = require("./permissions");
var products_1 = require("./products");
var serviceaccountkeys_1 = require("./serviceaccountkeys");
var storelayoutclusters_1 = require("./storelayoutclusters");
var storelayoutpages_1 = require("./storelayoutpages");
var users_1 = require("./users");
var webapps_1 = require("./webapps");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    "https://androidenterprise.googleapis.com/",
];
/**
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * @see {@link https://developers.google.com/android/work/play/emm-api}
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.devices = new devices_1.Devices(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.enterprises = new enterprises_1.Enterprises(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.entitlements = new entitlements_1.Entitlements(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.grouplicenses = new grouplicenses_1.Grouplicenses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.grouplicenseusers = new grouplicenseusers_1.Grouplicenseusers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.installs = new installs_1.Installs(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.managedconfigurationsfordevice = new managedconfigurationsfordevice_1.Managedconfigurationsfordevice(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.managedconfigurationsforuser = new managedconfigurationsforuser_1.Managedconfigurationsforuser(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.managedconfigurationssettings = new managedconfigurationssettings_1.Managedconfigurationssettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.permissions = new permissions_1.Permissions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.products = new products_1.Products(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.serviceaccountkeys = new serviceaccountkeys_1.Serviceaccountkeys(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.storelayoutclusters = new storelayoutclusters_1.Storelayoutclusters(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.storelayoutpages = new storelayoutpages_1.Storelayoutpages(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.users = new users_1.Users(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.webapps = new webapps_1.Webapps(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
