/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A configuration specification to be used to override existing configurations.
 */
export class CreateManagedEndpointRequestBodyConfigurationOverrides extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.Configuration })
  @Expose({ name: "applicationConfiguration" })
  @Type(() => shared.Configuration)
  applicationConfiguration?: shared.Configuration[];

  @SpeakeasyMetadata()
  @Expose({ name: "monitoringConfiguration" })
  @Type(() => shared.MonitoringConfiguration)
  monitoringConfiguration?: shared.MonitoringConfiguration;
}

export class CreateManagedEndpointRequestBody extends SpeakeasyBase {
  /**
   * The certificate ARN provided by users for the managed endpoint. This field is under deprecation and will be removed in future releases.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "certificateArn" })
  certificateArn?: string;

  /**
   * The client idempotency token for this create call.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken: string;

  /**
   * A configuration specification to be used to override existing configurations.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "configurationOverrides" })
  @Type(() => CreateManagedEndpointRequestBodyConfigurationOverrides)
  configurationOverrides?: CreateManagedEndpointRequestBodyConfigurationOverrides;

  /**
   * The ARN of the execution role.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "executionRoleArn" })
  executionRoleArn: string;

  /**
   * The name of the managed endpoint.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The Amazon EMR release version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseLabel" })
  releaseLabel: string;

  /**
   * The tags of the managed endpoint.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  /**
   * The type of the managed endpoint.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

export class CreateManagedEndpointRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateManagedEndpointRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The ID of the virtual cluster for which a managed endpoint is created.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=virtualClusterId",
  })
  virtualClusterId: string;
}

export class CreateManagedEndpointResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createManagedEndpointResponse?: shared.CreateManagedEndpointResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
