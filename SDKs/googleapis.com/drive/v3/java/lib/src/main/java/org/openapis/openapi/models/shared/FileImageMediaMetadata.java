/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FileImageMediaMetadata - Additional metadata about image media, if available.
 */
public class FileImageMediaMetadata {
    /**
     * The aperture used to create the photo (f-number).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aperture")
    public Float aperture;
    public FileImageMediaMetadata withAperture(Float aperture) {
        this.aperture = aperture;
        return this;
    }
    
    /**
     * The make of the camera used to create the photo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cameraMake")
    public String cameraMake;
    public FileImageMediaMetadata withCameraMake(String cameraMake) {
        this.cameraMake = cameraMake;
        return this;
    }
    
    /**
     * The model of the camera used to create the photo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cameraModel")
    public String cameraModel;
    public FileImageMediaMetadata withCameraModel(String cameraModel) {
        this.cameraModel = cameraModel;
        return this;
    }
    
    /**
     * The color space of the photo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("colorSpace")
    public String colorSpace;
    public FileImageMediaMetadata withColorSpace(String colorSpace) {
        this.colorSpace = colorSpace;
        return this;
    }
    
    /**
     * The exposure bias of the photo (APEX value).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exposureBias")
    public Float exposureBias;
    public FileImageMediaMetadata withExposureBias(Float exposureBias) {
        this.exposureBias = exposureBias;
        return this;
    }
    
    /**
     * The exposure mode used to create the photo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exposureMode")
    public String exposureMode;
    public FileImageMediaMetadata withExposureMode(String exposureMode) {
        this.exposureMode = exposureMode;
        return this;
    }
    
    /**
     * The length of the exposure, in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exposureTime")
    public Float exposureTime;
    public FileImageMediaMetadata withExposureTime(Float exposureTime) {
        this.exposureTime = exposureTime;
        return this;
    }
    
    /**
     * Whether a flash was used to create the photo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flashUsed")
    public Boolean flashUsed;
    public FileImageMediaMetadata withFlashUsed(Boolean flashUsed) {
        this.flashUsed = flashUsed;
        return this;
    }
    
    /**
     * The focal length used to create the photo, in millimeters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("focalLength")
    public Float focalLength;
    public FileImageMediaMetadata withFocalLength(Float focalLength) {
        this.focalLength = focalLength;
        return this;
    }
    
    /**
     * The height of the image in pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    public Integer height;
    public FileImageMediaMetadata withHeight(Integer height) {
        this.height = height;
        return this;
    }
    
    /**
     * The ISO speed used to create the photo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isoSpeed")
    public Integer isoSpeed;
    public FileImageMediaMetadata withIsoSpeed(Integer isoSpeed) {
        this.isoSpeed = isoSpeed;
        return this;
    }
    
    /**
     * The lens used to create the photo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lens")
    public String lens;
    public FileImageMediaMetadata withLens(String lens) {
        this.lens = lens;
        return this;
    }
    
    /**
     * Geographic location information stored in the image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public FileImageMediaMetadataLocation location;
    public FileImageMediaMetadata withLocation(FileImageMediaMetadataLocation location) {
        this.location = location;
        return this;
    }
    
    /**
     * The smallest f-number of the lens at the focal length used to create the photo (APEX value).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxApertureValue")
    public Float maxApertureValue;
    public FileImageMediaMetadata withMaxApertureValue(Float maxApertureValue) {
        this.maxApertureValue = maxApertureValue;
        return this;
    }
    
    /**
     * The metering mode used to create the photo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meteringMode")
    public String meteringMode;
    public FileImageMediaMetadata withMeteringMode(String meteringMode) {
        this.meteringMode = meteringMode;
        return this;
    }
    
    /**
     * The number of clockwise 90 degree rotations applied from the image's original orientation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rotation")
    public Integer rotation;
    public FileImageMediaMetadata withRotation(Integer rotation) {
        this.rotation = rotation;
        return this;
    }
    
    /**
     * The type of sensor used to create the photo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sensor")
    public String sensor;
    public FileImageMediaMetadata withSensor(String sensor) {
        this.sensor = sensor;
        return this;
    }
    
    /**
     * The distance to the subject of the photo, in meters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subjectDistance")
    public Integer subjectDistance;
    public FileImageMediaMetadata withSubjectDistance(Integer subjectDistance) {
        this.subjectDistance = subjectDistance;
        return this;
    }
    
    /**
     * The date and time the photo was taken (EXIF DateTime).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time")
    public String time;
    public FileImageMediaMetadata withTime(String time) {
        this.time = time;
        return this;
    }
    
    /**
     * The white balance mode used to create the photo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("whiteBalance")
    public String whiteBalance;
    public FileImageMediaMetadata withWhiteBalance(String whiteBalance) {
        this.whiteBalance = whiteBalance;
        return this;
    }
    
    /**
     * The width of the image in pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    public Integer width;
    public FileImageMediaMetadata withWidth(Integer width) {
        this.width = width;
        return this;
    }
    
}
