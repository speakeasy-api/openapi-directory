// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeComputeXAmzTargetEnum
type DescribeComputeXAmzTargetEnum string

const (
	DescribeComputeXAmzTargetEnumGameLiftDescribeCompute DescribeComputeXAmzTargetEnum = "GameLift.DescribeCompute"
)

func (e DescribeComputeXAmzTargetEnum) ToPointer() *DescribeComputeXAmzTargetEnum {
	return &e
}

func (e *DescribeComputeXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GameLift.DescribeCompute":
		*e = DescribeComputeXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeComputeXAmzTargetEnum: %v", v)
	}
}

type DescribeComputeRequest struct {
	DescribeComputeInput shared.DescribeComputeInput   `request:"mediaType=application/json"`
	XAmzAlgorithm        *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget           DescribeComputeXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeComputeResponse struct {
	ContentType string
	// Success
	DescribeComputeOutput *shared.DescribeComputeOutput
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
	// UnauthorizedException
	UnauthorizedException interface{}
}
