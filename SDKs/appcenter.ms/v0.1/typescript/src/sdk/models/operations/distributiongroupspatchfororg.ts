/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class DistributionGroupsPatchForOrgSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

/**
 * The attributes to update for the distribution group
 */
export class DistributionGroupsPatchForOrgRequestBody extends SpeakeasyBase {
  /**
   * Whether the distribution group is public
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_public" })
  isPublic?: boolean;

  /**
   * The name of the distribution group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class DistributionGroupsPatchForOrgRequest extends SpeakeasyBase {
  /**
   * The attributes to update for the distribution group
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: DistributionGroupsPatchForOrgRequestBody;

  /**
   * The name of the distribution group
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=distribution_group_name",
  })
  distributionGroupName: string;

  /**
   * The organization's name
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=org_name",
  })
  orgName: string;
}

export enum DistributionGroupsPatchForOrgDefaultApplicationJSONErrorCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

export class DistributionGroupsPatchForOrgDefaultApplicationJSONError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: DistributionGroupsPatchForOrgDefaultApplicationJSONErrorCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Error
 */
export class DistributionGroupsPatchForOrgDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => DistributionGroupsPatchForOrgDefaultApplicationJSONError)
  error: DistributionGroupsPatchForOrgDefaultApplicationJSONError;
}

/**
 * The creation origin of this distribution group
 */
export enum DistributionGroupsPatchForOrg200ApplicationJSONOriginEnum {
  Appcenter = "appcenter",
  Hockeyapp = "hockeyapp",
}

/**
 * Success
 */
export class DistributionGroupsPatchForOrg200ApplicationJSON extends SpeakeasyBase {
  /**
   * The name of the distribution group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_name" })
  displayName?: string;

  /**
   * The unique ID of the distribution group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Whether the distribution group is public
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_public" })
  isPublic: boolean;

  /**
   * The name of the distribution group used in URLs
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The creation origin of this distribution group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "origin" })
  origin: DistributionGroupsPatchForOrg200ApplicationJSONOriginEnum;
}

export class DistributionGroupsPatchForOrgResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  distributionGroupsPatchForOrg200ApplicationJSONObject?: DistributionGroupsPatchForOrg200ApplicationJSON;

  /**
   * Error
   */
  @SpeakeasyMetadata()
  distributionGroupsPatchForOrgDefaultApplicationJSONObject?: DistributionGroupsPatchForOrgDefaultApplicationJSON;
}
