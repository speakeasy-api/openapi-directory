// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateEnvironmentHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateEnvironmentRequestBodyEngineTypeEnum - The engine type for the runtime environment.
type CreateEnvironmentRequestBodyEngineTypeEnum string

const (
	CreateEnvironmentRequestBodyEngineTypeEnumMicrofocus CreateEnvironmentRequestBodyEngineTypeEnum = "microfocus"
	CreateEnvironmentRequestBodyEngineTypeEnumBluage     CreateEnvironmentRequestBodyEngineTypeEnum = "bluage"
)

func (e *CreateEnvironmentRequestBodyEngineTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "microfocus":
		fallthrough
	case "bluage":
		*e = CreateEnvironmentRequestBodyEngineTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateEnvironmentRequestBodyEngineTypeEnum: %s", s)
	}
}

// CreateEnvironmentRequestBodyHighAvailabilityConfig - Defines the details of a high availability configuration.
type CreateEnvironmentRequestBodyHighAvailabilityConfig struct {
	DesiredCapacity *int64 `json:"desiredCapacity,omitempty"`
}

type CreateEnvironmentRequestBody struct {
	// Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create an environment. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires.
	ClientToken *string `json:"clientToken,omitempty"`
	// The description of the runtime environment.
	Description *string `json:"description,omitempty"`
	// The engine type for the runtime environment.
	EngineType CreateEnvironmentRequestBodyEngineTypeEnum `json:"engineType"`
	// The version of the engine type for the runtime environment.
	EngineVersion *string `json:"engineVersion,omitempty"`
	// Defines the details of a high availability configuration.
	HighAvailabilityConfig *CreateEnvironmentRequestBodyHighAvailabilityConfig `json:"highAvailabilityConfig,omitempty"`
	// The type of instance for the runtime environment.
	InstanceType string `json:"instanceType"`
	// The identifier of a customer managed key.
	KmsKeyID *string `json:"kmsKeyId,omitempty"`
	// The name of the runtime environment. Must be unique within the account.
	Name string `json:"name"`
	// Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.
	PreferredMaintenanceWindow *string `json:"preferredMaintenanceWindow,omitempty"`
	// Specifies whether the runtime environment is publicly accessible.
	PubliclyAccessible *bool `json:"publiclyAccessible,omitempty"`
	// The list of security groups for the VPC associated with this runtime environment.
	SecurityGroupIds []string `json:"securityGroupIds,omitempty"`
	// Optional. The storage configurations for this runtime environment.
	StorageConfigurations []shared.StorageConfiguration `json:"storageConfigurations,omitempty"`
	// The list of subnets associated with the VPC for this runtime environment.
	SubnetIds []string `json:"subnetIds,omitempty"`
	// The tags for the runtime environment.
	Tags map[string]string `json:"tags,omitempty"`
}

type CreateEnvironmentRequest struct {
	Headers CreateEnvironmentHeaders
	Request CreateEnvironmentRequestBody `request:"mediaType=application/json"`
}

type CreateEnvironmentResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateEnvironmentResponse *shared.CreateEnvironmentResponse
	// InternalServerException
	InternalServerException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
