"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import analysismethod_enum as shared_analysismethod_enum
from ..shared import analysisruletype_enum as shared_analysisruletype_enum
from ..shared import column as shared_column
from ..shared import schematype_enum as shared_schematype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Schema:
    r"""A schema is a relation within a collaboration."""
    
    analysis_rule_types: list[shared_analysisruletype_enum.AnalysisRuleTypeEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analysisRuleTypes') }})  
    collaboration_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collaborationArn') }})  
    collaboration_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collaborationId') }})  
    columns: list[shared_column.Column] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columns') }})  
    create_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    creator_account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatorAccountId') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    partition_keys: list[shared_column.Column] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partitionKeys') }})  
    type: shared_schematype_enum.SchemaTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    update_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    analysis_method: Optional[shared_analysismethod_enum.AnalysisMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analysisMethod'), 'exclude': lambda f: f is None }})  
    