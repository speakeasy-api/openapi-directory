<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


/**
 * CreateFilesetRequestBody - Specify a template ID and either a host ID or a share ID. When a share ID is provided, the host ID is derived from the host share. Also specify whether or not this backup is a direct archive backup.
 * 
 * @package OpenAPI\OpenAPI\Models\Operations
 * @access public
 */
class CreateFilesetRequestBody
{
	#[\JMS\Serializer\Annotation\SerializedName('arraySpec')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\FilesetArraySpec')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\OpenAPI\OpenAPI\Models\Shared\FilesetArraySpec $arraySpec = null;
    
    /**
     * A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.
     * 
     * @var ?bool $enableHardlinkSupport
     */
	#[\JMS\Serializer\Annotation\SerializedName('enableHardlinkSupport')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $enableHardlinkSupport = null;
    
    /**
     * A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.
     * 
     * @var ?bool $enableSymlinkResolution
     */
	#[\JMS\Serializer\Annotation\SerializedName('enableSymlinkResolution')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $enableSymlinkResolution = null;
    
    /**
     * ID of the failover cluster app.
     * 
     * @var ?string $failoverClusterAppId
     */
	#[\JMS\Serializer\Annotation\SerializedName('failoverClusterAppId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $failoverClusterAppId = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('hostId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $hostId = null;
    
    /**
     * A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.
     * 
     * @var ?bool $isPassthrough
     */
	#[\JMS\Serializer\Annotation\SerializedName('isPassthrough')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isPassthrough = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('shareId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $shareId = null;
    
    /**
     * Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
     * 
     * @var ?string $snapMirrorLabelForFullBackup
     */
	#[\JMS\Serializer\Annotation\SerializedName('snapMirrorLabelForFullBackup')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $snapMirrorLabelForFullBackup = null;
    
    /**
     * Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
     * 
     * @var ?string $snapMirrorLabelForIncrementalBackup
     */
	#[\JMS\Serializer\Annotation\SerializedName('snapMirrorLabelForIncrementalBackup')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $snapMirrorLabelForIncrementalBackup = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('templateId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $templateId;
    
	public function __construct()
	{
		$this->arraySpec = null;
		$this->enableHardlinkSupport = null;
		$this->enableSymlinkResolution = null;
		$this->failoverClusterAppId = null;
		$this->hostId = null;
		$this->isPassthrough = null;
		$this->shareId = null;
		$this->snapMirrorLabelForFullBackup = null;
		$this->snapMirrorLabelForIncrementalBackup = null;
		$this->templateId = "";
	}
}
