"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import counterstructurednameandmetadata as shared_counterstructurednameandmetadata
from ..shared import distributionupdate as shared_distributionupdate
from ..shared import floatingpointlist as shared_floatingpointlist
from ..shared import floatingpointmean as shared_floatingpointmean
from ..shared import integergauge as shared_integergauge
from ..shared import integerlist as shared_integerlist
from ..shared import integermean as shared_integermean
from ..shared import nameandkind as shared_nameandkind
from ..shared import splitint64 as shared_splitint64
from ..shared import stringlist as shared_stringlist
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CounterUpdate:
    r"""An update to a Counter sent from a worker."""
    
    boolean: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('boolean'), 'exclude': lambda f: f is None }})
    r"""Boolean value for And, Or."""  
    cumulative: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cumulative'), 'exclude': lambda f: f is None }})
    r"""True if this counter is reported as the total cumulative aggregate value accumulated since the worker started working on this WorkItem. By default this is false, indicating that this counter is reported as a delta."""  
    distribution: Optional[shared_distributionupdate.DistributionUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distribution'), 'exclude': lambda f: f is None }})
    r"""A metric value representing a distribution."""  
    floating_point: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floatingPoint'), 'exclude': lambda f: f is None }})
    r"""Floating point value for Sum, Max, Min."""  
    floating_point_list: Optional[shared_floatingpointlist.FloatingPointList] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floatingPointList'), 'exclude': lambda f: f is None }})
    r"""A metric value representing a list of floating point numbers."""  
    floating_point_mean: Optional[shared_floatingpointmean.FloatingPointMean] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floatingPointMean'), 'exclude': lambda f: f is None }})
    r"""A representation of a floating point mean metric contribution."""  
    integer: Optional[shared_splitint64.SplitInt64] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integer'), 'exclude': lambda f: f is None }})
    r"""A representation of an int64, n, that is immune to precision loss when encoded in JSON."""  
    integer_gauge: Optional[shared_integergauge.IntegerGauge] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integerGauge'), 'exclude': lambda f: f is None }})
    r"""A metric value representing temporal values of a variable."""  
    integer_list: Optional[shared_integerlist.IntegerList] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integerList'), 'exclude': lambda f: f is None }})
    r"""A metric value representing a list of integers."""  
    integer_mean: Optional[shared_integermean.IntegerMean] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integerMean'), 'exclude': lambda f: f is None }})
    r"""A representation of an integer mean metric contribution."""  
    internal: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('internal'), 'exclude': lambda f: f is None }})
    r"""Value for internally-defined counters used by the Dataflow service."""  
    name_and_kind: Optional[shared_nameandkind.NameAndKind] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameAndKind'), 'exclude': lambda f: f is None }})
    r"""Basic metadata about a counter."""  
    short_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortId'), 'exclude': lambda f: f is None }})
    r"""The service-generated short identifier for this counter. The short_id -> (name, metadata) mapping is constant for the lifetime of a job."""  
    string_list: Optional[shared_stringlist.StringList] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stringList'), 'exclude': lambda f: f is None }})
    r"""A metric value representing a list of strings."""  
    structured_name_and_metadata: Optional[shared_counterstructurednameandmetadata.CounterStructuredNameAndMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('structuredNameAndMetadata'), 'exclude': lambda f: f is None }})
    r"""A single message which encapsulates structured name and metadata for a given counter."""  
    