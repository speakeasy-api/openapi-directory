// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// EmployeeResultEmploymentEmploymentDates - Employee employment dates
type EmployeeResultEmploymentEmploymentDates struct {
	// ISO-8601 date string for start date as a full time employee with the group (if applicable)
	FullTimeStart *string `json:"full_time_start,omitempty"`
	// ISO-8601 date string for the hire date of the employee
	HireDate *types.Date `json:"hire_date,omitempty"`
	// ISO-8601 date string for the rehire date of the employee (if applicable)
	Rehire *string `json:"rehire,omitempty"`
	// ISO-8601 date string for the retirement date of the employee (if applicable)
	Retirement *string `json:"retirement,omitempty"`
	// ISO-8601 date string for the termination date of the employee (if applicable)
	Terminated *string `json:"terminated,omitempty"`
}

// EmployeeResultEmploymentEmploymentStatusEnum - Employee employment status at the company
type EmployeeResultEmploymentEmploymentStatusEnum string

const (
	EmployeeResultEmploymentEmploymentStatusEnumContract   EmployeeResultEmploymentEmploymentStatusEnum = "contract"
	EmployeeResultEmploymentEmploymentStatusEnumDisabled   EmployeeResultEmploymentEmploymentStatusEnum = "disabled"
	EmployeeResultEmploymentEmploymentStatusEnumFullTime   EmployeeResultEmploymentEmploymentStatusEnum = "full-time"
	EmployeeResultEmploymentEmploymentStatusEnumPartTime   EmployeeResultEmploymentEmploymentStatusEnum = "part-time"
	EmployeeResultEmploymentEmploymentStatusEnumRetired    EmployeeResultEmploymentEmploymentStatusEnum = "retired"
	EmployeeResultEmploymentEmploymentStatusEnumTerminated EmployeeResultEmploymentEmploymentStatusEnum = "terminated"
)

func (e *EmployeeResultEmploymentEmploymentStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "contract":
		fallthrough
	case "disabled":
		fallthrough
	case "full-time":
		fallthrough
	case "part-time":
		fallthrough
	case "retired":
		fallthrough
	case "terminated":
		*e = EmployeeResultEmploymentEmploymentStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeResultEmploymentEmploymentStatusEnum: %s", s)
	}
}

// EmployeeResultEmploymentSalaryTypeEnum - Type of salary earned by the employee
type EmployeeResultEmploymentSalaryTypeEnum string

const (
	EmployeeResultEmploymentSalaryTypeEnumHourly EmployeeResultEmploymentSalaryTypeEnum = "hourly"
	EmployeeResultEmploymentSalaryTypeEnumSalary EmployeeResultEmploymentSalaryTypeEnum = "salary"
)

func (e *EmployeeResultEmploymentSalaryTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hourly":
		fallthrough
	case "salary":
		*e = EmployeeResultEmploymentSalaryTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeResultEmploymentSalaryTypeEnum: %s", s)
	}
}

// EmployeeResultEmploymentSalaryUnitEnum - Unit of salary earned by the employee
type EmployeeResultEmploymentSalaryUnitEnum string

const (
	EmployeeResultEmploymentSalaryUnitEnumAnnual      EmployeeResultEmploymentSalaryUnitEnum = "annual"
	EmployeeResultEmploymentSalaryUnitEnumHour        EmployeeResultEmploymentSalaryUnitEnum = "hour"
	EmployeeResultEmploymentSalaryUnitEnumMonth       EmployeeResultEmploymentSalaryUnitEnum = "month"
	EmployeeResultEmploymentSalaryUnitEnumSemiMonthly EmployeeResultEmploymentSalaryUnitEnum = "semi-monthly"
	EmployeeResultEmploymentSalaryUnitEnumWeek        EmployeeResultEmploymentSalaryUnitEnum = "week"
)

func (e *EmployeeResultEmploymentSalaryUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "annual":
		fallthrough
	case "hour":
		fallthrough
	case "month":
		fallthrough
	case "semi-monthly":
		fallthrough
	case "week":
		*e = EmployeeResultEmploymentSalaryUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeResultEmploymentSalaryUnitEnum: %s", s)
	}
}

// EmployeeResultEmploymentSalary - Employee salary information
type EmployeeResultEmploymentSalary struct {
	// Amount of salary earned by the employee in US dollars
	Amount *float64 `json:"amount,omitempty"`
	// Type of salary earned by the employee
	Type *EmployeeResultEmploymentSalaryTypeEnum `json:"type,omitempty"`
	// Unit of salary earned by the employee
	Unit *EmployeeResultEmploymentSalaryUnitEnum `json:"unit,omitempty"`
}

// EmployeeResultEmployment - Employment information for the employee
type EmployeeResultEmployment struct {
	// Employee employment dates
	EmploymentDates *EmployeeResultEmploymentEmploymentDates `json:"employment_dates,omitempty"`
	// Employee employment status at the company
	EmploymentStatus *EmployeeResultEmploymentEmploymentStatusEnum `json:"employment_status,omitempty"`
	// Number of hours worked per week by the employee
	HoursWorked *int `json:"hours_worked,omitempty"`
	// Employee occupation or job title
	Occupation *string `json:"occupation,omitempty"`
	// Employee salary information
	Salary *EmployeeResultEmploymentSalary `json:"salary,omitempty"`
}

// EmployeeResultPersonContactEmailAddressTypeEnum - Type of email address
type EmployeeResultPersonContactEmailAddressTypeEnum string

const (
	EmployeeResultPersonContactEmailAddressTypeEnumHome EmployeeResultPersonContactEmailAddressTypeEnum = "home"
	EmployeeResultPersonContactEmailAddressTypeEnumWork EmployeeResultPersonContactEmailAddressTypeEnum = "work"
)

func (e *EmployeeResultPersonContactEmailAddressTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "home":
		fallthrough
	case "work":
		*e = EmployeeResultPersonContactEmailAddressTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeResultPersonContactEmailAddressTypeEnum: %s", s)
	}
}

// EmployeeResultPersonContactPreferredMethodEnum - Preferred method of contact for the person
type EmployeeResultPersonContactPreferredMethodEnum string

const (
	EmployeeResultPersonContactPreferredMethodEnumEmail     EmployeeResultPersonContactPreferredMethodEnum = "email"
	EmployeeResultPersonContactPreferredMethodEnumHomePhone EmployeeResultPersonContactPreferredMethodEnum = "home-phone"
	EmployeeResultPersonContactPreferredMethodEnumMail      EmployeeResultPersonContactPreferredMethodEnum = "mail"
	EmployeeResultPersonContactPreferredMethodEnumOther     EmployeeResultPersonContactPreferredMethodEnum = "other"
	EmployeeResultPersonContactPreferredMethodEnumWorkPhone EmployeeResultPersonContactPreferredMethodEnum = "work-phone"
)

func (e *EmployeeResultPersonContactPreferredMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "email":
		fallthrough
	case "home-phone":
		fallthrough
	case "mail":
		fallthrough
	case "other":
		fallthrough
	case "work-phone":
		*e = EmployeeResultPersonContactPreferredMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeResultPersonContactPreferredMethodEnum: %s", s)
	}
}

// EmployeeResultPersonContact - Contact information for the person
type EmployeeResultPersonContact struct {
	// Email address of the person
	EmailAddress *string `json:"email_address,omitempty"`
	// Type of email address
	EmailAddressType *EmployeeResultPersonContactEmailAddressTypeEnum `json:"email_address_type,omitempty"`
	// Home phone number in E.164 format
	HomePhone *string `json:"home_phone,omitempty"`
	// Preferred written or spoken language of the person
	PreferredLanguage *string `json:"preferred_language,omitempty"`
	// Preferred method of contact for the person
	PreferredMethod *EmployeeResultPersonContactPreferredMethodEnum `json:"preferred_method,omitempty"`
	// True if the person can speak or communicate in English
	SpeaksEnglish *bool `json:"speaks_english,omitempty"`
	// Work phone number in E.164 format
	WorkPhone *string `json:"work_phone,omitempty"`
}

// EmployeeResultPersonDetailsAmericanIndianStateEnum - Primary state of the federally-recognized American Indian or Alaska Native tribe, if applicable
type EmployeeResultPersonDetailsAmericanIndianStateEnum string

const (
	EmployeeResultPersonDetailsAmericanIndianStateEnumAk EmployeeResultPersonDetailsAmericanIndianStateEnum = "AK"
	EmployeeResultPersonDetailsAmericanIndianStateEnumAl EmployeeResultPersonDetailsAmericanIndianStateEnum = "AL"
	EmployeeResultPersonDetailsAmericanIndianStateEnumAr EmployeeResultPersonDetailsAmericanIndianStateEnum = "AR"
	EmployeeResultPersonDetailsAmericanIndianStateEnumAs EmployeeResultPersonDetailsAmericanIndianStateEnum = "AS"
	EmployeeResultPersonDetailsAmericanIndianStateEnumAz EmployeeResultPersonDetailsAmericanIndianStateEnum = "AZ"
	EmployeeResultPersonDetailsAmericanIndianStateEnumCa EmployeeResultPersonDetailsAmericanIndianStateEnum = "CA"
	EmployeeResultPersonDetailsAmericanIndianStateEnumCo EmployeeResultPersonDetailsAmericanIndianStateEnum = "CO"
	EmployeeResultPersonDetailsAmericanIndianStateEnumCt EmployeeResultPersonDetailsAmericanIndianStateEnum = "CT"
	EmployeeResultPersonDetailsAmericanIndianStateEnumDc EmployeeResultPersonDetailsAmericanIndianStateEnum = "DC"
	EmployeeResultPersonDetailsAmericanIndianStateEnumDe EmployeeResultPersonDetailsAmericanIndianStateEnum = "DE"
	EmployeeResultPersonDetailsAmericanIndianStateEnumFl EmployeeResultPersonDetailsAmericanIndianStateEnum = "FL"
	EmployeeResultPersonDetailsAmericanIndianStateEnumFm EmployeeResultPersonDetailsAmericanIndianStateEnum = "FM"
	EmployeeResultPersonDetailsAmericanIndianStateEnumGa EmployeeResultPersonDetailsAmericanIndianStateEnum = "GA"
	EmployeeResultPersonDetailsAmericanIndianStateEnumGu EmployeeResultPersonDetailsAmericanIndianStateEnum = "GU"
	EmployeeResultPersonDetailsAmericanIndianStateEnumHi EmployeeResultPersonDetailsAmericanIndianStateEnum = "HI"
	EmployeeResultPersonDetailsAmericanIndianStateEnumIa EmployeeResultPersonDetailsAmericanIndianStateEnum = "IA"
	EmployeeResultPersonDetailsAmericanIndianStateEnumID EmployeeResultPersonDetailsAmericanIndianStateEnum = "ID"
	EmployeeResultPersonDetailsAmericanIndianStateEnumIl EmployeeResultPersonDetailsAmericanIndianStateEnum = "IL"
	EmployeeResultPersonDetailsAmericanIndianStateEnumIn EmployeeResultPersonDetailsAmericanIndianStateEnum = "IN"
	EmployeeResultPersonDetailsAmericanIndianStateEnumKs EmployeeResultPersonDetailsAmericanIndianStateEnum = "KS"
	EmployeeResultPersonDetailsAmericanIndianStateEnumKy EmployeeResultPersonDetailsAmericanIndianStateEnum = "KY"
	EmployeeResultPersonDetailsAmericanIndianStateEnumLa EmployeeResultPersonDetailsAmericanIndianStateEnum = "LA"
	EmployeeResultPersonDetailsAmericanIndianStateEnumMa EmployeeResultPersonDetailsAmericanIndianStateEnum = "MA"
	EmployeeResultPersonDetailsAmericanIndianStateEnumMd EmployeeResultPersonDetailsAmericanIndianStateEnum = "MD"
	EmployeeResultPersonDetailsAmericanIndianStateEnumMe EmployeeResultPersonDetailsAmericanIndianStateEnum = "ME"
	EmployeeResultPersonDetailsAmericanIndianStateEnumMh EmployeeResultPersonDetailsAmericanIndianStateEnum = "MH"
	EmployeeResultPersonDetailsAmericanIndianStateEnumMi EmployeeResultPersonDetailsAmericanIndianStateEnum = "MI"
	EmployeeResultPersonDetailsAmericanIndianStateEnumMn EmployeeResultPersonDetailsAmericanIndianStateEnum = "MN"
	EmployeeResultPersonDetailsAmericanIndianStateEnumMo EmployeeResultPersonDetailsAmericanIndianStateEnum = "MO"
	EmployeeResultPersonDetailsAmericanIndianStateEnumMp EmployeeResultPersonDetailsAmericanIndianStateEnum = "MP"
	EmployeeResultPersonDetailsAmericanIndianStateEnumMs EmployeeResultPersonDetailsAmericanIndianStateEnum = "MS"
	EmployeeResultPersonDetailsAmericanIndianStateEnumMt EmployeeResultPersonDetailsAmericanIndianStateEnum = "MT"
	EmployeeResultPersonDetailsAmericanIndianStateEnumNc EmployeeResultPersonDetailsAmericanIndianStateEnum = "NC"
	EmployeeResultPersonDetailsAmericanIndianStateEnumNd EmployeeResultPersonDetailsAmericanIndianStateEnum = "ND"
	EmployeeResultPersonDetailsAmericanIndianStateEnumNe EmployeeResultPersonDetailsAmericanIndianStateEnum = "NE"
	EmployeeResultPersonDetailsAmericanIndianStateEnumNh EmployeeResultPersonDetailsAmericanIndianStateEnum = "NH"
	EmployeeResultPersonDetailsAmericanIndianStateEnumNj EmployeeResultPersonDetailsAmericanIndianStateEnum = "NJ"
	EmployeeResultPersonDetailsAmericanIndianStateEnumNm EmployeeResultPersonDetailsAmericanIndianStateEnum = "NM"
	EmployeeResultPersonDetailsAmericanIndianStateEnumNv EmployeeResultPersonDetailsAmericanIndianStateEnum = "NV"
	EmployeeResultPersonDetailsAmericanIndianStateEnumNy EmployeeResultPersonDetailsAmericanIndianStateEnum = "NY"
	EmployeeResultPersonDetailsAmericanIndianStateEnumOh EmployeeResultPersonDetailsAmericanIndianStateEnum = "OH"
	EmployeeResultPersonDetailsAmericanIndianStateEnumOk EmployeeResultPersonDetailsAmericanIndianStateEnum = "OK"
	EmployeeResultPersonDetailsAmericanIndianStateEnumOr EmployeeResultPersonDetailsAmericanIndianStateEnum = "OR"
	EmployeeResultPersonDetailsAmericanIndianStateEnumPa EmployeeResultPersonDetailsAmericanIndianStateEnum = "PA"
	EmployeeResultPersonDetailsAmericanIndianStateEnumPr EmployeeResultPersonDetailsAmericanIndianStateEnum = "PR"
	EmployeeResultPersonDetailsAmericanIndianStateEnumPw EmployeeResultPersonDetailsAmericanIndianStateEnum = "PW"
	EmployeeResultPersonDetailsAmericanIndianStateEnumRi EmployeeResultPersonDetailsAmericanIndianStateEnum = "RI"
	EmployeeResultPersonDetailsAmericanIndianStateEnumSc EmployeeResultPersonDetailsAmericanIndianStateEnum = "SC"
	EmployeeResultPersonDetailsAmericanIndianStateEnumSd EmployeeResultPersonDetailsAmericanIndianStateEnum = "SD"
	EmployeeResultPersonDetailsAmericanIndianStateEnumTn EmployeeResultPersonDetailsAmericanIndianStateEnum = "TN"
	EmployeeResultPersonDetailsAmericanIndianStateEnumTx EmployeeResultPersonDetailsAmericanIndianStateEnum = "TX"
	EmployeeResultPersonDetailsAmericanIndianStateEnumUm EmployeeResultPersonDetailsAmericanIndianStateEnum = "UM"
	EmployeeResultPersonDetailsAmericanIndianStateEnumUt EmployeeResultPersonDetailsAmericanIndianStateEnum = "UT"
	EmployeeResultPersonDetailsAmericanIndianStateEnumVa EmployeeResultPersonDetailsAmericanIndianStateEnum = "VA"
	EmployeeResultPersonDetailsAmericanIndianStateEnumVi EmployeeResultPersonDetailsAmericanIndianStateEnum = "VI"
	EmployeeResultPersonDetailsAmericanIndianStateEnumVt EmployeeResultPersonDetailsAmericanIndianStateEnum = "VT"
	EmployeeResultPersonDetailsAmericanIndianStateEnumWa EmployeeResultPersonDetailsAmericanIndianStateEnum = "WA"
	EmployeeResultPersonDetailsAmericanIndianStateEnumWi EmployeeResultPersonDetailsAmericanIndianStateEnum = "WI"
	EmployeeResultPersonDetailsAmericanIndianStateEnumWv EmployeeResultPersonDetailsAmericanIndianStateEnum = "WV"
	EmployeeResultPersonDetailsAmericanIndianStateEnumWy EmployeeResultPersonDetailsAmericanIndianStateEnum = "WY"
)

func (e *EmployeeResultPersonDetailsAmericanIndianStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AK":
		fallthrough
	case "AL":
		fallthrough
	case "AR":
		fallthrough
	case "AS":
		fallthrough
	case "AZ":
		fallthrough
	case "CA":
		fallthrough
	case "CO":
		fallthrough
	case "CT":
		fallthrough
	case "DC":
		fallthrough
	case "DE":
		fallthrough
	case "FL":
		fallthrough
	case "FM":
		fallthrough
	case "GA":
		fallthrough
	case "GU":
		fallthrough
	case "HI":
		fallthrough
	case "IA":
		fallthrough
	case "ID":
		fallthrough
	case "IL":
		fallthrough
	case "IN":
		fallthrough
	case "KS":
		fallthrough
	case "KY":
		fallthrough
	case "LA":
		fallthrough
	case "MA":
		fallthrough
	case "MD":
		fallthrough
	case "ME":
		fallthrough
	case "MH":
		fallthrough
	case "MI":
		fallthrough
	case "MN":
		fallthrough
	case "MO":
		fallthrough
	case "MP":
		fallthrough
	case "MS":
		fallthrough
	case "MT":
		fallthrough
	case "NC":
		fallthrough
	case "ND":
		fallthrough
	case "NE":
		fallthrough
	case "NH":
		fallthrough
	case "NJ":
		fallthrough
	case "NM":
		fallthrough
	case "NV":
		fallthrough
	case "NY":
		fallthrough
	case "OH":
		fallthrough
	case "OK":
		fallthrough
	case "OR":
		fallthrough
	case "PA":
		fallthrough
	case "PR":
		fallthrough
	case "PW":
		fallthrough
	case "RI":
		fallthrough
	case "SC":
		fallthrough
	case "SD":
		fallthrough
	case "TN":
		fallthrough
	case "TX":
		fallthrough
	case "UM":
		fallthrough
	case "UT":
		fallthrough
	case "VA":
		fallthrough
	case "VI":
		fallthrough
	case "VT":
		fallthrough
	case "WA":
		fallthrough
	case "WI":
		fallthrough
	case "WV":
		fallthrough
	case "WY":
		*e = EmployeeResultPersonDetailsAmericanIndianStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeResultPersonDetailsAmericanIndianStateEnum: %s", s)
	}
}

// EmployeeResultPersonDetailsAmericanIndian - American Indian status details (if applicable)
type EmployeeResultPersonDetailsAmericanIndian struct {
	// Primary state of the federally-recognized American Indian or Alaska Native tribe, if applicable
	State *EmployeeResultPersonDetailsAmericanIndianStateEnum `json:"state,omitempty"`
	// Name of the federally-recognized American Indian or Alaska Native tribe, if applicable
	Tribe *string `json:"tribe,omitempty"`
}

// EmployeeResultPersonDetailsDisability - Disability details (if applicable)
type EmployeeResultPersonDetailsDisability struct {
	// True if the disability impacts the ability to communicate or read
	Communication *bool `json:"communication,omitempty"`
	// True if the member has a disability
	Disabled *bool `json:"disabled,omitempty"`
	// Description of the disability
	Reason *string `json:"reason,omitempty"`
}

// EmployeeResultPersonDetailsTobaccoTypesEnum - Type of tobacco use
type EmployeeResultPersonDetailsTobaccoTypesEnum string

const (
	EmployeeResultPersonDetailsTobaccoTypesEnumChewingTobacco EmployeeResultPersonDetailsTobaccoTypesEnum = "chewing-tobacco"
	EmployeeResultPersonDetailsTobaccoTypesEnumCigarettes     EmployeeResultPersonDetailsTobaccoTypesEnum = "cigarettes"
	EmployeeResultPersonDetailsTobaccoTypesEnumPipe           EmployeeResultPersonDetailsTobaccoTypesEnum = "pipe"
)

func (e *EmployeeResultPersonDetailsTobaccoTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "chewing-tobacco":
		fallthrough
	case "cigarettes":
		fallthrough
	case "pipe":
		*e = EmployeeResultPersonDetailsTobaccoTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeResultPersonDetailsTobaccoTypesEnum: %s", s)
	}
}

// EmployeeResultPersonDetailsTobacco - Tobacco usage details (if applicable)
type EmployeeResultPersonDetailsTobacco struct {
	// Duration of tobacco use
	Duration *string `json:"duration,omitempty"`
	// Frequency of tobacco use
	Frequency *string `json:"frequency,omitempty"`
	// List of types of tobacco use
	Types []EmployeeResultPersonDetailsTobaccoTypesEnum `json:"types,omitempty"`
	// True if the person uses tobacco of any kind
	User *bool `json:"user,omitempty"`
}

// EmployeeResultPersonDetails - Additional personal details of the person
type EmployeeResultPersonDetails struct {
	// American Indian status details (if applicable)
	AmericanIndian *EmployeeResultPersonDetailsAmericanIndian `json:"american_indian,omitempty"`
	// Disability details (if applicable)
	Disability *EmployeeResultPersonDetailsDisability `json:"disability,omitempty"`
	// True if the person is in the military
	IsMilitary *bool `json:"is_military,omitempty"`
	// True if the person is a student
	IsStudent *bool `json:"is_student,omitempty"`
	// Tobacco usage details (if applicable)
	Tobacco *EmployeeResultPersonDetailsTobacco `json:"tobacco,omitempty"`
}

// EmployeeResultPersonHomeAddressStateEnum - State postal code of the address
type EmployeeResultPersonHomeAddressStateEnum string

const (
	EmployeeResultPersonHomeAddressStateEnumAk EmployeeResultPersonHomeAddressStateEnum = "AK"
	EmployeeResultPersonHomeAddressStateEnumAl EmployeeResultPersonHomeAddressStateEnum = "AL"
	EmployeeResultPersonHomeAddressStateEnumAr EmployeeResultPersonHomeAddressStateEnum = "AR"
	EmployeeResultPersonHomeAddressStateEnumAs EmployeeResultPersonHomeAddressStateEnum = "AS"
	EmployeeResultPersonHomeAddressStateEnumAz EmployeeResultPersonHomeAddressStateEnum = "AZ"
	EmployeeResultPersonHomeAddressStateEnumCa EmployeeResultPersonHomeAddressStateEnum = "CA"
	EmployeeResultPersonHomeAddressStateEnumCo EmployeeResultPersonHomeAddressStateEnum = "CO"
	EmployeeResultPersonHomeAddressStateEnumCt EmployeeResultPersonHomeAddressStateEnum = "CT"
	EmployeeResultPersonHomeAddressStateEnumDc EmployeeResultPersonHomeAddressStateEnum = "DC"
	EmployeeResultPersonHomeAddressStateEnumDe EmployeeResultPersonHomeAddressStateEnum = "DE"
	EmployeeResultPersonHomeAddressStateEnumFl EmployeeResultPersonHomeAddressStateEnum = "FL"
	EmployeeResultPersonHomeAddressStateEnumFm EmployeeResultPersonHomeAddressStateEnum = "FM"
	EmployeeResultPersonHomeAddressStateEnumGa EmployeeResultPersonHomeAddressStateEnum = "GA"
	EmployeeResultPersonHomeAddressStateEnumGu EmployeeResultPersonHomeAddressStateEnum = "GU"
	EmployeeResultPersonHomeAddressStateEnumHi EmployeeResultPersonHomeAddressStateEnum = "HI"
	EmployeeResultPersonHomeAddressStateEnumIa EmployeeResultPersonHomeAddressStateEnum = "IA"
	EmployeeResultPersonHomeAddressStateEnumID EmployeeResultPersonHomeAddressStateEnum = "ID"
	EmployeeResultPersonHomeAddressStateEnumIl EmployeeResultPersonHomeAddressStateEnum = "IL"
	EmployeeResultPersonHomeAddressStateEnumIn EmployeeResultPersonHomeAddressStateEnum = "IN"
	EmployeeResultPersonHomeAddressStateEnumKs EmployeeResultPersonHomeAddressStateEnum = "KS"
	EmployeeResultPersonHomeAddressStateEnumKy EmployeeResultPersonHomeAddressStateEnum = "KY"
	EmployeeResultPersonHomeAddressStateEnumLa EmployeeResultPersonHomeAddressStateEnum = "LA"
	EmployeeResultPersonHomeAddressStateEnumMa EmployeeResultPersonHomeAddressStateEnum = "MA"
	EmployeeResultPersonHomeAddressStateEnumMd EmployeeResultPersonHomeAddressStateEnum = "MD"
	EmployeeResultPersonHomeAddressStateEnumMe EmployeeResultPersonHomeAddressStateEnum = "ME"
	EmployeeResultPersonHomeAddressStateEnumMh EmployeeResultPersonHomeAddressStateEnum = "MH"
	EmployeeResultPersonHomeAddressStateEnumMi EmployeeResultPersonHomeAddressStateEnum = "MI"
	EmployeeResultPersonHomeAddressStateEnumMn EmployeeResultPersonHomeAddressStateEnum = "MN"
	EmployeeResultPersonHomeAddressStateEnumMo EmployeeResultPersonHomeAddressStateEnum = "MO"
	EmployeeResultPersonHomeAddressStateEnumMp EmployeeResultPersonHomeAddressStateEnum = "MP"
	EmployeeResultPersonHomeAddressStateEnumMs EmployeeResultPersonHomeAddressStateEnum = "MS"
	EmployeeResultPersonHomeAddressStateEnumMt EmployeeResultPersonHomeAddressStateEnum = "MT"
	EmployeeResultPersonHomeAddressStateEnumNc EmployeeResultPersonHomeAddressStateEnum = "NC"
	EmployeeResultPersonHomeAddressStateEnumNd EmployeeResultPersonHomeAddressStateEnum = "ND"
	EmployeeResultPersonHomeAddressStateEnumNe EmployeeResultPersonHomeAddressStateEnum = "NE"
	EmployeeResultPersonHomeAddressStateEnumNh EmployeeResultPersonHomeAddressStateEnum = "NH"
	EmployeeResultPersonHomeAddressStateEnumNj EmployeeResultPersonHomeAddressStateEnum = "NJ"
	EmployeeResultPersonHomeAddressStateEnumNm EmployeeResultPersonHomeAddressStateEnum = "NM"
	EmployeeResultPersonHomeAddressStateEnumNv EmployeeResultPersonHomeAddressStateEnum = "NV"
	EmployeeResultPersonHomeAddressStateEnumNy EmployeeResultPersonHomeAddressStateEnum = "NY"
	EmployeeResultPersonHomeAddressStateEnumOh EmployeeResultPersonHomeAddressStateEnum = "OH"
	EmployeeResultPersonHomeAddressStateEnumOk EmployeeResultPersonHomeAddressStateEnum = "OK"
	EmployeeResultPersonHomeAddressStateEnumOr EmployeeResultPersonHomeAddressStateEnum = "OR"
	EmployeeResultPersonHomeAddressStateEnumPa EmployeeResultPersonHomeAddressStateEnum = "PA"
	EmployeeResultPersonHomeAddressStateEnumPr EmployeeResultPersonHomeAddressStateEnum = "PR"
	EmployeeResultPersonHomeAddressStateEnumPw EmployeeResultPersonHomeAddressStateEnum = "PW"
	EmployeeResultPersonHomeAddressStateEnumRi EmployeeResultPersonHomeAddressStateEnum = "RI"
	EmployeeResultPersonHomeAddressStateEnumSc EmployeeResultPersonHomeAddressStateEnum = "SC"
	EmployeeResultPersonHomeAddressStateEnumSd EmployeeResultPersonHomeAddressStateEnum = "SD"
	EmployeeResultPersonHomeAddressStateEnumTn EmployeeResultPersonHomeAddressStateEnum = "TN"
	EmployeeResultPersonHomeAddressStateEnumTx EmployeeResultPersonHomeAddressStateEnum = "TX"
	EmployeeResultPersonHomeAddressStateEnumUm EmployeeResultPersonHomeAddressStateEnum = "UM"
	EmployeeResultPersonHomeAddressStateEnumUt EmployeeResultPersonHomeAddressStateEnum = "UT"
	EmployeeResultPersonHomeAddressStateEnumVa EmployeeResultPersonHomeAddressStateEnum = "VA"
	EmployeeResultPersonHomeAddressStateEnumVi EmployeeResultPersonHomeAddressStateEnum = "VI"
	EmployeeResultPersonHomeAddressStateEnumVt EmployeeResultPersonHomeAddressStateEnum = "VT"
	EmployeeResultPersonHomeAddressStateEnumWa EmployeeResultPersonHomeAddressStateEnum = "WA"
	EmployeeResultPersonHomeAddressStateEnumWi EmployeeResultPersonHomeAddressStateEnum = "WI"
	EmployeeResultPersonHomeAddressStateEnumWv EmployeeResultPersonHomeAddressStateEnum = "WV"
	EmployeeResultPersonHomeAddressStateEnumWy EmployeeResultPersonHomeAddressStateEnum = "WY"
)

func (e *EmployeeResultPersonHomeAddressStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AK":
		fallthrough
	case "AL":
		fallthrough
	case "AR":
		fallthrough
	case "AS":
		fallthrough
	case "AZ":
		fallthrough
	case "CA":
		fallthrough
	case "CO":
		fallthrough
	case "CT":
		fallthrough
	case "DC":
		fallthrough
	case "DE":
		fallthrough
	case "FL":
		fallthrough
	case "FM":
		fallthrough
	case "GA":
		fallthrough
	case "GU":
		fallthrough
	case "HI":
		fallthrough
	case "IA":
		fallthrough
	case "ID":
		fallthrough
	case "IL":
		fallthrough
	case "IN":
		fallthrough
	case "KS":
		fallthrough
	case "KY":
		fallthrough
	case "LA":
		fallthrough
	case "MA":
		fallthrough
	case "MD":
		fallthrough
	case "ME":
		fallthrough
	case "MH":
		fallthrough
	case "MI":
		fallthrough
	case "MN":
		fallthrough
	case "MO":
		fallthrough
	case "MP":
		fallthrough
	case "MS":
		fallthrough
	case "MT":
		fallthrough
	case "NC":
		fallthrough
	case "ND":
		fallthrough
	case "NE":
		fallthrough
	case "NH":
		fallthrough
	case "NJ":
		fallthrough
	case "NM":
		fallthrough
	case "NV":
		fallthrough
	case "NY":
		fallthrough
	case "OH":
		fallthrough
	case "OK":
		fallthrough
	case "OR":
		fallthrough
	case "PA":
		fallthrough
	case "PR":
		fallthrough
	case "PW":
		fallthrough
	case "RI":
		fallthrough
	case "SC":
		fallthrough
	case "SD":
		fallthrough
	case "TN":
		fallthrough
	case "TX":
		fallthrough
	case "UM":
		fallthrough
	case "UT":
		fallthrough
	case "VA":
		fallthrough
	case "VI":
		fallthrough
	case "VT":
		fallthrough
	case "WA":
		fallthrough
	case "WI":
		fallthrough
	case "WV":
		fallthrough
	case "WY":
		*e = EmployeeResultPersonHomeAddressStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeResultPersonHomeAddressStateEnum: %s", s)
	}
}

// EmployeeResultPersonHomeAddress - Home address of the person
type EmployeeResultPersonHomeAddress struct {
	// City of the address
	City string `json:"city"`
	// County of the address
	County *string `json:"county,omitempty"`
	// State postal code of the address
	State EmployeeResultPersonHomeAddressStateEnum `json:"state"`
	// Line one of the address
	StreetOne string `json:"street_one"`
	// Line two of the address
	StreetTwo *string `json:"street_two,omitempty"`
	// Zip code of the address
	ZipCode string `json:"zip_code"`
}

// EmployeeResultPersonMailingAddressStateEnum - State postal code of the address
type EmployeeResultPersonMailingAddressStateEnum string

const (
	EmployeeResultPersonMailingAddressStateEnumAk EmployeeResultPersonMailingAddressStateEnum = "AK"
	EmployeeResultPersonMailingAddressStateEnumAl EmployeeResultPersonMailingAddressStateEnum = "AL"
	EmployeeResultPersonMailingAddressStateEnumAr EmployeeResultPersonMailingAddressStateEnum = "AR"
	EmployeeResultPersonMailingAddressStateEnumAs EmployeeResultPersonMailingAddressStateEnum = "AS"
	EmployeeResultPersonMailingAddressStateEnumAz EmployeeResultPersonMailingAddressStateEnum = "AZ"
	EmployeeResultPersonMailingAddressStateEnumCa EmployeeResultPersonMailingAddressStateEnum = "CA"
	EmployeeResultPersonMailingAddressStateEnumCo EmployeeResultPersonMailingAddressStateEnum = "CO"
	EmployeeResultPersonMailingAddressStateEnumCt EmployeeResultPersonMailingAddressStateEnum = "CT"
	EmployeeResultPersonMailingAddressStateEnumDc EmployeeResultPersonMailingAddressStateEnum = "DC"
	EmployeeResultPersonMailingAddressStateEnumDe EmployeeResultPersonMailingAddressStateEnum = "DE"
	EmployeeResultPersonMailingAddressStateEnumFl EmployeeResultPersonMailingAddressStateEnum = "FL"
	EmployeeResultPersonMailingAddressStateEnumFm EmployeeResultPersonMailingAddressStateEnum = "FM"
	EmployeeResultPersonMailingAddressStateEnumGa EmployeeResultPersonMailingAddressStateEnum = "GA"
	EmployeeResultPersonMailingAddressStateEnumGu EmployeeResultPersonMailingAddressStateEnum = "GU"
	EmployeeResultPersonMailingAddressStateEnumHi EmployeeResultPersonMailingAddressStateEnum = "HI"
	EmployeeResultPersonMailingAddressStateEnumIa EmployeeResultPersonMailingAddressStateEnum = "IA"
	EmployeeResultPersonMailingAddressStateEnumID EmployeeResultPersonMailingAddressStateEnum = "ID"
	EmployeeResultPersonMailingAddressStateEnumIl EmployeeResultPersonMailingAddressStateEnum = "IL"
	EmployeeResultPersonMailingAddressStateEnumIn EmployeeResultPersonMailingAddressStateEnum = "IN"
	EmployeeResultPersonMailingAddressStateEnumKs EmployeeResultPersonMailingAddressStateEnum = "KS"
	EmployeeResultPersonMailingAddressStateEnumKy EmployeeResultPersonMailingAddressStateEnum = "KY"
	EmployeeResultPersonMailingAddressStateEnumLa EmployeeResultPersonMailingAddressStateEnum = "LA"
	EmployeeResultPersonMailingAddressStateEnumMa EmployeeResultPersonMailingAddressStateEnum = "MA"
	EmployeeResultPersonMailingAddressStateEnumMd EmployeeResultPersonMailingAddressStateEnum = "MD"
	EmployeeResultPersonMailingAddressStateEnumMe EmployeeResultPersonMailingAddressStateEnum = "ME"
	EmployeeResultPersonMailingAddressStateEnumMh EmployeeResultPersonMailingAddressStateEnum = "MH"
	EmployeeResultPersonMailingAddressStateEnumMi EmployeeResultPersonMailingAddressStateEnum = "MI"
	EmployeeResultPersonMailingAddressStateEnumMn EmployeeResultPersonMailingAddressStateEnum = "MN"
	EmployeeResultPersonMailingAddressStateEnumMo EmployeeResultPersonMailingAddressStateEnum = "MO"
	EmployeeResultPersonMailingAddressStateEnumMp EmployeeResultPersonMailingAddressStateEnum = "MP"
	EmployeeResultPersonMailingAddressStateEnumMs EmployeeResultPersonMailingAddressStateEnum = "MS"
	EmployeeResultPersonMailingAddressStateEnumMt EmployeeResultPersonMailingAddressStateEnum = "MT"
	EmployeeResultPersonMailingAddressStateEnumNc EmployeeResultPersonMailingAddressStateEnum = "NC"
	EmployeeResultPersonMailingAddressStateEnumNd EmployeeResultPersonMailingAddressStateEnum = "ND"
	EmployeeResultPersonMailingAddressStateEnumNe EmployeeResultPersonMailingAddressStateEnum = "NE"
	EmployeeResultPersonMailingAddressStateEnumNh EmployeeResultPersonMailingAddressStateEnum = "NH"
	EmployeeResultPersonMailingAddressStateEnumNj EmployeeResultPersonMailingAddressStateEnum = "NJ"
	EmployeeResultPersonMailingAddressStateEnumNm EmployeeResultPersonMailingAddressStateEnum = "NM"
	EmployeeResultPersonMailingAddressStateEnumNv EmployeeResultPersonMailingAddressStateEnum = "NV"
	EmployeeResultPersonMailingAddressStateEnumNy EmployeeResultPersonMailingAddressStateEnum = "NY"
	EmployeeResultPersonMailingAddressStateEnumOh EmployeeResultPersonMailingAddressStateEnum = "OH"
	EmployeeResultPersonMailingAddressStateEnumOk EmployeeResultPersonMailingAddressStateEnum = "OK"
	EmployeeResultPersonMailingAddressStateEnumOr EmployeeResultPersonMailingAddressStateEnum = "OR"
	EmployeeResultPersonMailingAddressStateEnumPa EmployeeResultPersonMailingAddressStateEnum = "PA"
	EmployeeResultPersonMailingAddressStateEnumPr EmployeeResultPersonMailingAddressStateEnum = "PR"
	EmployeeResultPersonMailingAddressStateEnumPw EmployeeResultPersonMailingAddressStateEnum = "PW"
	EmployeeResultPersonMailingAddressStateEnumRi EmployeeResultPersonMailingAddressStateEnum = "RI"
	EmployeeResultPersonMailingAddressStateEnumSc EmployeeResultPersonMailingAddressStateEnum = "SC"
	EmployeeResultPersonMailingAddressStateEnumSd EmployeeResultPersonMailingAddressStateEnum = "SD"
	EmployeeResultPersonMailingAddressStateEnumTn EmployeeResultPersonMailingAddressStateEnum = "TN"
	EmployeeResultPersonMailingAddressStateEnumTx EmployeeResultPersonMailingAddressStateEnum = "TX"
	EmployeeResultPersonMailingAddressStateEnumUm EmployeeResultPersonMailingAddressStateEnum = "UM"
	EmployeeResultPersonMailingAddressStateEnumUt EmployeeResultPersonMailingAddressStateEnum = "UT"
	EmployeeResultPersonMailingAddressStateEnumVa EmployeeResultPersonMailingAddressStateEnum = "VA"
	EmployeeResultPersonMailingAddressStateEnumVi EmployeeResultPersonMailingAddressStateEnum = "VI"
	EmployeeResultPersonMailingAddressStateEnumVt EmployeeResultPersonMailingAddressStateEnum = "VT"
	EmployeeResultPersonMailingAddressStateEnumWa EmployeeResultPersonMailingAddressStateEnum = "WA"
	EmployeeResultPersonMailingAddressStateEnumWi EmployeeResultPersonMailingAddressStateEnum = "WI"
	EmployeeResultPersonMailingAddressStateEnumWv EmployeeResultPersonMailingAddressStateEnum = "WV"
	EmployeeResultPersonMailingAddressStateEnumWy EmployeeResultPersonMailingAddressStateEnum = "WY"
)

func (e *EmployeeResultPersonMailingAddressStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AK":
		fallthrough
	case "AL":
		fallthrough
	case "AR":
		fallthrough
	case "AS":
		fallthrough
	case "AZ":
		fallthrough
	case "CA":
		fallthrough
	case "CO":
		fallthrough
	case "CT":
		fallthrough
	case "DC":
		fallthrough
	case "DE":
		fallthrough
	case "FL":
		fallthrough
	case "FM":
		fallthrough
	case "GA":
		fallthrough
	case "GU":
		fallthrough
	case "HI":
		fallthrough
	case "IA":
		fallthrough
	case "ID":
		fallthrough
	case "IL":
		fallthrough
	case "IN":
		fallthrough
	case "KS":
		fallthrough
	case "KY":
		fallthrough
	case "LA":
		fallthrough
	case "MA":
		fallthrough
	case "MD":
		fallthrough
	case "ME":
		fallthrough
	case "MH":
		fallthrough
	case "MI":
		fallthrough
	case "MN":
		fallthrough
	case "MO":
		fallthrough
	case "MP":
		fallthrough
	case "MS":
		fallthrough
	case "MT":
		fallthrough
	case "NC":
		fallthrough
	case "ND":
		fallthrough
	case "NE":
		fallthrough
	case "NH":
		fallthrough
	case "NJ":
		fallthrough
	case "NM":
		fallthrough
	case "NV":
		fallthrough
	case "NY":
		fallthrough
	case "OH":
		fallthrough
	case "OK":
		fallthrough
	case "OR":
		fallthrough
	case "PA":
		fallthrough
	case "PR":
		fallthrough
	case "PW":
		fallthrough
	case "RI":
		fallthrough
	case "SC":
		fallthrough
	case "SD":
		fallthrough
	case "TN":
		fallthrough
	case "TX":
		fallthrough
	case "UM":
		fallthrough
	case "UT":
		fallthrough
	case "VA":
		fallthrough
	case "VI":
		fallthrough
	case "VT":
		fallthrough
	case "WA":
		fallthrough
	case "WI":
		fallthrough
	case "WV":
		fallthrough
	case "WY":
		*e = EmployeeResultPersonMailingAddressStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeResultPersonMailingAddressStateEnum: %s", s)
	}
}

// EmployeeResultPersonMailingAddress - Mailing address of the person
type EmployeeResultPersonMailingAddress struct {
	// City of the address
	City string `json:"city"`
	// County of the address
	County *string `json:"county,omitempty"`
	// State postal code of the address
	State EmployeeResultPersonMailingAddressStateEnum `json:"state"`
	// Line one of the address
	StreetOne string `json:"street_one"`
	// Line two of the address
	StreetTwo *string `json:"street_two,omitempty"`
	// Zip code of the address
	ZipCode string `json:"zip_code"`
}

// EmployeeResultPersonMaritalStatusEnum - Marital status of the person
type EmployeeResultPersonMaritalStatusEnum string

const (
	EmployeeResultPersonMaritalStatusEnumDivorced         EmployeeResultPersonMaritalStatusEnum = "divorced"
	EmployeeResultPersonMaritalStatusEnumDomesticPartner  EmployeeResultPersonMaritalStatusEnum = "domestic-partner"
	EmployeeResultPersonMaritalStatusEnumLegallySeparated EmployeeResultPersonMaritalStatusEnum = "legally-separated"
	EmployeeResultPersonMaritalStatusEnumMarried          EmployeeResultPersonMaritalStatusEnum = "married"
	EmployeeResultPersonMaritalStatusEnumSingle           EmployeeResultPersonMaritalStatusEnum = "single"
	EmployeeResultPersonMaritalStatusEnumWidowed          EmployeeResultPersonMaritalStatusEnum = "widowed"
)

func (e *EmployeeResultPersonMaritalStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "divorced":
		fallthrough
	case "domestic-partner":
		fallthrough
	case "legally-separated":
		fallthrough
	case "married":
		fallthrough
	case "single":
		fallthrough
	case "widowed":
		*e = EmployeeResultPersonMaritalStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeResultPersonMaritalStatusEnum: %s", s)
	}
}

// EmployeeResultPersonSexEnum - Sex of the person
type EmployeeResultPersonSexEnum string

const (
	EmployeeResultPersonSexEnumF EmployeeResultPersonSexEnum = "F"
	EmployeeResultPersonSexEnumM EmployeeResultPersonSexEnum = "M"
	EmployeeResultPersonSexEnumU EmployeeResultPersonSexEnum = "U"
	EmployeeResultPersonSexEnumX EmployeeResultPersonSexEnum = "X"
)

func (e *EmployeeResultPersonSexEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "F":
		fallthrough
	case "M":
		fallthrough
	case "U":
		fallthrough
	case "X":
		*e = EmployeeResultPersonSexEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeResultPersonSexEnum: %s", s)
	}
}

// EmployeeResultPerson - Personal information for the employee
type EmployeeResultPerson struct {
	// Contact information for the person
	Contact *EmployeeResultPersonContact `json:"contact,omitempty"`
	// ISO-8601 date string for the date of birth of the person
	DateOfBirth types.Date `json:"date_of_birth"`
	// Additional personal details of the person
	Details *EmployeeResultPersonDetails `json:"details,omitempty"`
	// First name of the person
	FirstName string `json:"first_name"`
	// Home address of the person
	HomeAddress *EmployeeResultPersonHomeAddress `json:"home_address,omitempty"`
	// Last name of the person
	LastName string `json:"last_name"`
	// Mailing address of the person
	MailingAddress *EmployeeResultPersonMailingAddress `json:"mailing_address,omitempty"`
	// Marital status of the person
	MaritalStatus *EmployeeResultPersonMaritalStatusEnum `json:"marital_status,omitempty"`
	// Middle name of the person
	MiddleName *string `json:"middle_name,omitempty"`
	// Sex of the person
	Sex EmployeeResultPersonSexEnum `json:"sex"`
	// Social Security Number of the person
	Ssn *string `json:"ssn,omitempty"`
	// Suffix of the person
	Suffix *string `json:"suffix,omitempty"`
}

// EmployeeResult - Successful Response - Returns a single Employee
type EmployeeResult struct {
	// The date the record was created
	Created int64 `json:"created"`
	// Employment information for the employee
	Employment EmployeeResultEmployment `json:"employment"`
	// Unique identifier of the group in Noyo
	GroupID string `json:"group_id"`
	// Unique identifier of the record in Noyo
	ID string `json:"id"`
	// The date the record was last updated
	Modified int64 `json:"modified"`
	// Personal information for the employee
	Person EmployeeResultPerson `json:"person"`
	// Current version of the record
	Version string `json:"version"`
}
