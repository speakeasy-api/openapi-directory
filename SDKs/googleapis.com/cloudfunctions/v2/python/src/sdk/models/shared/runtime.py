"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RuntimeEnvironmentEnum(str, Enum):
    r"""The environment for the runtime."""
    ENVIRONMENT_UNSPECIFIED = 'ENVIRONMENT_UNSPECIFIED'
    GEN_1 = 'GEN_1'
    GEN_2 = 'GEN_2'

class RuntimeStageEnum(str, Enum):
    r"""The stage of life this runtime is in, e.g., BETA, GA, etc."""
    RUNTIME_STAGE_UNSPECIFIED = 'RUNTIME_STAGE_UNSPECIFIED'
    DEVELOPMENT = 'DEVELOPMENT'
    ALPHA = 'ALPHA'
    BETA = 'BETA'
    GA = 'GA'
    DEPRECATED = 'DEPRECATED'
    DECOMMISSIONED = 'DECOMMISSIONED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Runtime:
    r"""Describes a runtime and any special information (e.g., deprecation status) related to it."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The user facing name, eg 'Go 1.13', 'Node.js 12', etc."""  
    environment: Optional[RuntimeEnvironmentEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environment'), 'exclude': lambda f: f is None }})
    r"""The environment for the runtime."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the runtime, e.g., 'go113', 'nodejs12', etc."""  
    stage: Optional[RuntimeStageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stage'), 'exclude': lambda f: f is None }})
    r"""The stage of life this runtime is in, e.g., BETA, GA, etc."""  
    warnings: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warnings'), 'exclude': lambda f: f is None }})
    r"""Warning messages, e.g., a deprecation warning."""  
    