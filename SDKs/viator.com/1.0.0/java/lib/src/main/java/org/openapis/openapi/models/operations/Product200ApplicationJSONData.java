/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Product200ApplicationJSONData - **object** containing product details
 */
public class Product200ApplicationJSONData {
    /**
     * **array** of HTML-formatted clauses providing additional information about *this* product, such as:
     * - when the confirmation will be received (i.e. at time of booking, or within 48 hours of booking etc)
     * - accessibility options; such as whether wheelchair access is available
     * - particulars about the pick-up location and process
     * - **Note**: may contain basic HTML mark-up tags \u2013 e.g., br, li, b, u, p, i, ul and ol
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalInfo")
    public String[] additionalInfo;
    public Product200ApplicationJSONData withAdditionalInfo(String[] additionalInfo) {
        this.additionalInfo = additionalInfo;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("admission")
    public String admission;
    public Product200ApplicationJSONData withAdmission(String admission) {
        this.admission = admission;
        return this;
    }
    
    /**
     * **array** of age band objects detailing the age bands available for *this* product
     *   
     * - **note**: only the age bands listed here can book this product using the [/booking/book](#operation/bookingBook) service
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ageBands")
    public Product200ApplicationJSONDataAgeBands[] ageBands;
    public Product200ApplicationJSONData withAgeBands(Product200ApplicationJSONDataAgeBands[] ageBands) {
        this.ageBands = ageBands;
        return this;
    }
    
    /**
     * **indicator**: `true` if all traveler names are required.&amp;lt;br /&amp;gt;**Note**: if set to `true`, then all passenger names must be included in the booking request, and all must be unique. Placeholder names cannot be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allTravellerNamesRequired")
    public Boolean allTravellerNamesRequired;
    public Product200ApplicationJSONData withAllTravellerNamesRequired(Boolean allTravellerNamesRequired) {
        this.allTravellerNamesRequired = allTravellerNamesRequired;
        return this;
    }
    
    /**
     * **indicator**: `true` if Apple Wallet is supported
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applePassSupported")
    public Boolean applePassSupported;
    public Product200ApplicationJSONData withApplePassSupported(Boolean applePassSupported) {
        this.applePassSupported = applePassSupported;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available")
    public Boolean available;
    public Product200ApplicationJSONData withAvailable(Boolean available) {
        this.available = available;
        return this;
    }
    
    /**
     * **booking type specifier** for *this* product that indicates whether the booking will be `CONFIRMED` immediately or if it will remain `PENDING` even after the booking has been made
     * 
     * *one of* the following:
     * - `"FreesaleBE"` \u2013 *this* product will be confirmed immediately and the supplier will be sent a notification
     * - `"UnconditionalBE"` - *this* product will be confirmed immediately and the supplier will not be notified
     * - `"DeferredCRMBE"` - *this* product is an on-request product and will not be confirmed immediately. *this* product will have a `PENDING` status after it is booked, to be confirmed by the supplier within the time specified in the `hoursConfirmed` field available in the booking response and post-booking services
     * - `"FreesaleOnRequestBE"` - *this* product is freesale up until a certain number of days before the travel date, referred to as the *on-request period*.
     * 
     * If a booking is made within the on-request period, *this* product will be an on-request product. Once the booking has been made, the `bookingEngineId` will change to either `"FreesaleOnRequestBE:OnRequest"` or `"FreesaleOnRequestBE:Freesold"` depending on the travel date and the on-request period                        
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bookingEngineId")
    public org.openapis.openapi.models.shared.BookingEngineIdEnum bookingEngineId;
    public Product200ApplicationJSONData withBookingEngineId(org.openapis.openapi.models.shared.BookingEngineIdEnum bookingEngineId) {
        this.bookingEngineId = bookingEngineId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bookingQuestions")
    public Product200ApplicationJSONDataBookingQuestions[] bookingQuestions;
    public Product200ApplicationJSONData withBookingQuestions(Product200ApplicationJSONDataBookingQuestions[] bookingQuestions) {
        this.bookingQuestions = bookingQuestions;
        return this;
    }
    
    /**
     * **list** of unique numeric category identifiers that *this* product falls under
     * - `categoryId` is available from the [/taxonomy/categories](#operation/taxonomyCategories) service
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catIds")
    public Long[] catIds;
    public Product200ApplicationJSONData withCatIds(Long[] catIds) {
        this.catIds = catIds;
        return this;
    }
    
    /**
     * **name** of city or destination that *this* product operates in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    public String city;
    public Product200ApplicationJSONData withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * **unique alphanumeric identifier** of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public String code;
    public Product200ApplicationJSONData withCode(String code) {
        this.code = code;
        return this;
    }
    
    /**
     * **natural-language name** of the country in which *this* product operates
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;
    public Product200ApplicationJSONData withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * **currency** in which to display *this* product's pricing details
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyCode")
    public String currencyCode;
    public Product200ApplicationJSONData withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * **HTML-formatted natural-language description** of *this* product's departure location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departurePoint")
    public String departurePoint;
    public Product200ApplicationJSONData withDeparturePoint(String departurePoint) {
        this.departurePoint = departurePoint;
        return this;
    }
    
    /**
     * **HTML-formatted natural-language description** of *this* product's departure times
     * - may contain basic HTML mark-up tags; e.g., br, li, b, u, p, i, ul and ol
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departureTime")
    public String departureTime;
    public Product200ApplicationJSONData withDepartureTime(String departureTime) {
        this.departureTime = departureTime;
        return this;
    }
    
    /**
     * **HTML-formatted natural-language description** of extra information pertaining to product departure times
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departureTimeComments")
    public String departureTimeComments;
    public Product200ApplicationJSONData withDepartureTimeComments(String departureTimeComments) {
        this.departureTimeComments = departureTimeComments;
        return this;
    }
    
    /**
     * **HTML-formatted natural-language description** of *this* product (extended)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Product200ApplicationJSONData withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * **unique numeric identifier** of the destination in which *this* product is located
     * - `destinationId` is available from the [/taxonomy/destinations](#operation/taxonomyDestinations) service
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationId")
    public Long destinationId;
    public Product200ApplicationJSONData withDestinationId(Long destinationId) {
        this.destinationId = destinationId;
        return this;
    }
    
    /**
     * **natural-language description** of *this* product's duration
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public String duration;
    public Product200ApplicationJSONData withDuration(String duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("essential")
    public String essential;
    public Product200ApplicationJSONData withEssential(String essential) {
        this.essential = essential;
        return this;
    }
    
    /**
     * **array** of HTML-formatted natural-language exclusions for *this* product
     * - may contain basic HTML mark-up - e.g., br, li, b, u, p, i, ul and ol
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclusions")
    public String[] exclusions;
    public Product200ApplicationJSONData withExclusions(String[] exclusions) {
        this.exclusions = exclusions;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("highlights")
    public Long highlights;
    public Product200ApplicationJSONData withHighlights(Long highlights) {
        this.highlights = highlights;
        return this;
    }
    
    /**
     * **indicator**: `true` if *this* product offers hotel pick-up; if so, you will need to collect the user's hotel details
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hotelPickup")
    public Boolean hotelPickup;
    public Product200ApplicationJSONData withHotelPickup(Boolean hotelPickup) {
        this.hotelPickup = hotelPickup;
        return this;
    }
    
    /**
     * **array** of HTML-formatted features included in *this* product
     * - may contain basic HTML mark-up tags; e.g., br, li, b, u, p, i, ul and ol
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inclusions")
    public String[] inclusions;
    public Product200ApplicationJSONData withInclusions(String[] inclusions) {
        this.inclusions = inclusions;
        return this;
    }
    
    /**
     * **HTML-formatted description** of the itinerary of *this* tour if available
     * - may contain basic HTML tags; e.g., br, li, b, u, p, i, ul and ol
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itinerary")
    public String itinerary;
    public Product200ApplicationJSONData withItinerary(String itinerary) {
        this.itinerary = itinerary;
        return this;
    }
    
    /**
     * **natural-language description** of *this* product's location
     * -  can be a combination of the country and city, or a custom location
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public Product200ApplicationJSONData withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * **URL** of this product's map (usually an image)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mapURL")
    public String mapURL;
    public Product200ApplicationJSONData withMapURL(String mapURL) {
        this.mapURL = mapURL;
        return this;
    }
    
    /**
     * **maximum number of travelers** allowed per-booking for *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxTravellerCount")
    public Long maxTravellerCount;
    public Product200ApplicationJSONData withMaxTravellerCount(Long maxTravellerCount) {
        this.maxTravellerCount = maxTravellerCount;
        return this;
    }
    
    /**
     * ignore (Viator only)
     * 
     *       
     * For cancellation information regarding the booking, please refer to the `merchantTermsAndConditions` object
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantCancellable")
    public Boolean merchantCancellable;
    public Product200ApplicationJSONData withMerchantCancellable(Boolean merchantCancellable) {
        this.merchantCancellable = merchantCancellable;
        return this;
    }
    
    /**
     * Numeric 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee; i.e. the merchant net rate
     * 
     * For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantNetPriceFrom")
    public Double merchantNetPriceFrom;
    public Product200ApplicationJSONData withMerchantNetPriceFrom(Double merchantNetPriceFrom) {
        this.merchantNetPriceFrom = merchantNetPriceFrom;
        return this;
    }
    
    /**
     * Currency-formatted 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee (i.e. the merchant net rate)
     * 
     * For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantNetPriceFromFormatted")
    public String merchantNetPriceFromFormatted;
    public Product200ApplicationJSONData withMerchantNetPriceFromFormatted(String merchantNetPriceFromFormatted) {
        this.merchantNetPriceFromFormatted = merchantNetPriceFromFormatted;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantTermsAndConditions")
    public Product200ApplicationJSONDataMerchantTermsAndConditions merchantTermsAndConditions;
    public Product200ApplicationJSONData withMerchantTermsAndConditions(Product200ApplicationJSONDataMerchantTermsAndConditions merchantTermsAndConditions) {
        this.merchantTermsAndConditions = merchantTermsAndConditions;
        return this;
    }
    
    /**
     * **number** of hours before the travel date that *this* product will be 'on-request' for
     * - this field will contain a value if the `bookingEngineId` is `'FreesaleOnRequestBE'`
     * - an `onRequestPeriod` of 48 hours means that *this* product is freesale up until 48 hours before the travel date, and is on-request for 48 hours or less until the travel date
     * - **note**: 'hours in advance' (the number of hours a product is available for booking before the travel date) may also affect this; however, this value is not available in the API
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onRequestPeriod")
    public Long onRequestPeriod;
    public Product200ApplicationJSONData withOnRequestPeriod(Long onRequestPeriod) {
        this.onRequestPeriod = onRequestPeriod;
        return this;
    }
    
    /**
     * Ignore (Viator only)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onSale")
    public Boolean onSale;
    public Product200ApplicationJSONData withOnSale(Boolean onSale) {
        this.onSale = onSale;
        return this;
    }
    
    /**
     * **HTML-formatted natural-language description** of *this* product's operation frequency
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operates")
    public String operates;
    public Product200ApplicationJSONData withOperates(String operates) {
        this.operates = operates;
        return this;
    }
    
    /**
     * **number** of panoramic images available for *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("panoramaCount")
    public Long panoramaCount;
    public Product200ApplicationJSONData withPanoramaCount(Long panoramaCount) {
        this.panoramaCount = panoramaCount;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pas")
    public java.util.Map<String, Object> pas;
    public Product200ApplicationJSONData withPas(java.util.Map<String, Object> pas) {
        this.pas = pas;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passengerAttributes")
    public Product200ApplicationJSONDataPassengerAttributes[] passengerAttributes;
    public Product200ApplicationJSONData withPassengerAttributes(Product200ApplicationJSONDataPassengerAttributes[] passengerAttributes) {
        this.passengerAttributes = passengerAttributes;
        return this;
    }
    
    /**
     * **number** of user photos available for *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photoCount")
    public Long photoCount;
    public Product200ApplicationJSONData withPhotoCount(Long photoCount) {
        this.photoCount = photoCount;
        return this;
    }
    
    /**
     * **suggested sell ('from') price** for this product in the currency set in the `currencyCode` parameter. This is the cheapest sell price, taking into consideration off-peak periods and discounts on larger groups.
     * 
     * 
     *   - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    public Double price;
    public Product200ApplicationJSONData withPrice(Double price) {
        this.price = price;
        return this;
    }
    
    /**
     * **currency-formatted suggested sell ('from') price** for this product in the currency set in the `currencyCode` parameter
     * 
     * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceFormatted")
    public String priceFormatted;
    public Product200ApplicationJSONData withPriceFormatted(String priceFormatted) {
        this.priceFormatted = priceFormatted;
        return this;
    }
    
    /**
     * **unique numeric identifier** of *this* product's primary destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryDestinationId")
    public Long primaryDestinationId;
    public Product200ApplicationJSONData withPrimaryDestinationId(Long primaryDestinationId) {
        this.primaryDestinationId = primaryDestinationId;
        return this;
    }
    
    /**
     * **natural-language name** of *this* product's primary destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryDestinationName")
    public String primaryDestinationName;
    public Product200ApplicationJSONData withPrimaryDestinationName(String primaryDestinationName) {
        this.primaryDestinationName = primaryDestinationName;
        return this;
    }
    
    /**
     * **URL-formatted name** of the destination in which *this* product is located
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryDestinationUrlName")
    public String primaryDestinationUrlName;
    public Product200ApplicationJSONData withPrimaryDestinationUrlName(String primaryDestinationUrlName) {
        this.primaryDestinationUrlName = primaryDestinationUrlName;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryGroupId")
    public String primaryGroupId;
    public Product200ApplicationJSONData withPrimaryGroupId(String primaryGroupId) {
        this.primaryGroupId = primaryGroupId;
        return this;
    }
    
    /**
     * **array** of image objects detailing images available for *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productPhotos")
    public Product200ApplicationJSONDataProductPhotos[] productPhotos;
    public Product200ApplicationJSONData withProductPhotos(Product200ApplicationJSONDataProductPhotos[] productPhotos) {
        this.productPhotos = productPhotos;
        return this;
    }
    
    /**
     * **URL-formatted name** of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productUrlName")
    public String productUrlName;
    public Product200ApplicationJSONData withProductUrlName(String productUrlName) {
        this.productUrlName = productUrlName;
        return this;
    }
    
    /**
     * **average user rating** of *this* product
     * 
     * users rate products by assigning a star-rating from 1-5; this value shows the average of the star ratings provided by users;
     * 
     * the `ratingCounts` associative array in this response provides a breakdown of how many submissions for each star rating have been received
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rating")
    public Double rating;
    public Product200ApplicationJSONData withRating(Double rating) {
        this.rating = rating;
        return this;
    }
    
    /**
     * **dictionary** of rating (stars) to number of reviews with each rating for *this* product"
     * 
     * users rate products by assigning a star-rating from 1-5; these values show the total number of reviews for each of the star ratings (up to a maximum given in the `reviewCount` field in this response)
     * 
     * - **note**: see response sample for structure
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingCounts")
    public org.openapis.openapi.models.shared.RatingCounts ratingCounts;
    public Product200ApplicationJSONData withRatingCounts(org.openapis.openapi.models.shared.RatingCounts ratingCounts) {
        this.ratingCounts = ratingCounts;
        return this;
    }
    
    /**
     * **natural-language name** of the region in which *this* product operates
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public String region;
    public Product200ApplicationJSONData withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * **HTML-formatted natural-language description** of *this* product's drop-off details (if available)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returnDetails")
    public String returnDetails;
    public Product200ApplicationJSONData withReturnDetails(String returnDetails) {
        this.returnDetails = returnDetails;
        return this;
    }
    
    /**
     * **number** of user reviews that have been submitted by users for *this* product
     * 
     * If your account has been configured to limit the number of reviews you can receive, this value will never be higher than that. Otherwise, this value will show the total number of reviews available for this product. If there are more than 24 reviews available, you will need to use the [/product/reviews](#operation/productReviews) service to retrieve the remainder of the reviews.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reviewCount")
    public Long reviewCount;
    public Product200ApplicationJSONData withReviewCount(Long reviewCount) {
        this.reviewCount = reviewCount;
        return this;
    }
    
    /**
     * **array** of user review objects
     * 
     * The number of reviews returned here will either be the number of reviews you are entitled to according to your account configuration; or, if you are not limited in the number of reviews you can receive, will be a maxiumum of 24 reviews. If the value of `reviewCount` in this response exceeds 24, you can use the [/product/reviews](#operation/productReviews) endpoint to retrieve the remainder of the reviews.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reviews")
    public org.openapis.openapi.models.shared.ReviewObject[] reviews;
    public Product200ApplicationJSONData withReviews(org.openapis.openapi.models.shared.ReviewObject[] reviews) {
        this.reviews = reviews;
        return this;
    }
    
    /**
     * **numeric original price** for this product if the product is on special / a discount has been applied. `0` if there is no discount on this product. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rrp")
    public Long rrp;
    public Product200ApplicationJSONData withRrp(Long rrp) {
        this.rrp = rrp;
        return this;
    }
    
    /**
     * **currency-formatted original price** for this product if the product is on special / a discount has been applied. Empty string if there is no discount on this product. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rrpFormatted")
    public String rrpFormatted;
    public Product200ApplicationJSONData withRrpFormatted(String rrpFormatted) {
        this.rrpFormatted = rrpFormatted;
        return this;
    }
    
    /**
     * ignore (Viator only)
     * 
     * **Note**: The information that was previously returned in this field is available in the `additionalInfo`, `inclusions` and `description` fields
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salesPoints")
    public String[] salesPoints;
    public Product200ApplicationJSONData withSalesPoints(String[] salesPoints) {
        this.salesPoints = salesPoints;
        return this;
    }
    
    /**
     * Ignore (Viator only)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("savingAmount")
    public String savingAmount;
    public Product200ApplicationJSONData withSavingAmount(String savingAmount) {
        this.savingAmount = savingAmount;
        return this;
    }
    
    /**
     * Ignore (Viator only)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("savingAmountFormated")
    public String savingAmountFormated;
    public Product200ApplicationJSONData withSavingAmountFormated(String savingAmountFormated) {
        this.savingAmountFormated = savingAmountFormated;
        return this;
    }
    
    /**
     * **natural-language description** (shortened) of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortDescription")
    public String shortDescription;
    public Product200ApplicationJSONData withShortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
        return this;
    }
    
    /**
     * **natural-language title** (shortened) of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortTitle")
    public String shortTitle;
    public Product200ApplicationJSONData withShortTitle(String shortTitle) {
        this.shortTitle = shortTitle;
        return this;
    }
    
    /**
     * **natural-language description** of any special offers available for *this* product when `specialOfferAvailable` is `true`.
     * - empty string if there are no specials available
     * - See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specialOffer")
    public String specialOffer;
    public Product200ApplicationJSONData withSpecialOffer(String specialOffer) {
        this.specialOffer = specialOffer;
        return this;
    }
    
    /**
     * **indicator**: `true` if a special offer is available for *this* product. If `true` the `specialOffer` field will contain a text string providing details of the special offer which you may wish to display in your product search results. E.g. 'Book by May 27 to save 34% off our previously offered price!'. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specialOfferAvailable")
    public Boolean specialOfferAvailable;
    public Product200ApplicationJSONData withSpecialOfferAvailable(Boolean specialOfferAvailable) {
        this.specialOfferAvailable = specialOfferAvailable;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specialReservation")
    public Boolean specialReservation;
    public Product200ApplicationJSONData withSpecialReservation(Boolean specialReservation) {
        this.specialReservation = specialReservation;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specialReservationDetails")
    public String specialReservationDetails;
    public Product200ApplicationJSONData withSpecialReservationDetails(String specialReservationDetails) {
        this.specialReservationDetails = specialReservationDetails;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslSupported")
    public Boolean sslSupported;
    public Product200ApplicationJSONData withSslSupported(Boolean sslSupported) {
        this.sslSupported = sslSupported;
        return this;
    }
    
    /**
     * **list** of unique numeric subcategory identifiers that *this* product falls under
     * - `subcategoryId` is available from the [/taxonomy/categories](#operation/taxonomyCategories) service
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subCatIds")
    public Long[] subCatIds;
    public Product200ApplicationJSONData withSubCatIds(Long[] subCatIds) {
        this.subCatIds = subCatIds;
        return this;
    }
    
    /**
     * **unique identification code** of *this* product's supplier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplierCode")
    public String supplierCode;
    public Product200ApplicationJSONData withSupplierCode(String supplierCode) {
        this.supplierCode = supplierCode;
        return this;
    }
    
    /**
     * **name** of *this* product's supplier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplierName")
    public String supplierName;
    public Product200ApplicationJSONData withSupplierName(String supplierName) {
        this.supplierName = supplierName;
        return this;
    }
    
    /**
     * **URL** of *this* product's high-resolution thumbnail image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailHiResURL")
    public String thumbnailHiResURL;
    public Product200ApplicationJSONData withThumbnailHiResURL(String thumbnailHiResURL) {
        this.thumbnailHiResURL = thumbnailHiResURL;
        return this;
    }
    
    /**
     * **URL** for *this* product's thumbnail image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailURL")
    public String thumbnailURL;
    public Product200ApplicationJSONData withThumbnailURL(String thumbnailURL) {
        this.thumbnailURL = thumbnailURL;
        return this;
    }
    
    /**
     * **natural-language title** of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public Product200ApplicationJSONData withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * **array** of tour grade objects available for *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tourGrades")
    public Product200ApplicationJSONDataTourGrades[] tourGrades;
    public Product200ApplicationJSONData withTourGrades(Product200ApplicationJSONDataTourGrades[] tourGrades) {
        this.tourGrades = tourGrades;
        return this;
    }
    
    /**
     * **indicator**: 
     * - `true`: tour grades are available for this product, meaning you will need to display these tour grades to the user and include a tour grade when booking *this* product
     * - `false`: only a default tour grade is available for *this* product
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tourGradesAvailable")
    public Boolean tourGradesAvailable;
    public Product200ApplicationJSONData withTourGradesAvailable(Boolean tourGradesAvailable) {
        this.tourGradesAvailable = tourGradesAvailable;
        return this;
    }
    
    /**
     * **numeric indicator** of the language translation level for *this* product that is one of:
     * - `0`: no translation (English only)
     * - `80`: full machine translation
     * - `100`: full human translation
     * 
     * See: [Working with human and machine translations](#section/Appendices/Working-with-human-and-machine-translations) for more information
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("translationLevel")
    public org.openapis.openapi.models.shared.TranslationLevelEnum translationLevel;
    public Product200ApplicationJSONData withTranslationLevel(org.openapis.openapi.models.shared.TranslationLevelEnum translationLevel) {
        this.translationLevel = translationLevel;
        return this;
    }
    
    /**
     * **array** of user photo objects
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userPhotos")
    public org.openapis.openapi.models.shared.PhotoObject[] userPhotos;
    public Product200ApplicationJSONData withUserPhotos(org.openapis.openapi.models.shared.PhotoObject[] userPhotos) {
        this.userPhotos = userPhotos;
        return this;
    }
    
    /**
     * ignore (Viator only) \u2013 videos are not available to partners
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoCount")
    public Long videoCount;
    public Product200ApplicationJSONData withVideoCount(Long videoCount) {
        this.videoCount = videoCount;
        return this;
    }
    
    /**
     * ignore (Viator only) \u2013 videos are not available to partners
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videos")
    public String videos;
    public Product200ApplicationJSONData withVideos(String videos) {
        this.videos = videos;
        return this;
    }
    
    /**
     * **specifier** of the type(s) of vouchers that can be used:
     * 
     *   - `VOUCHER_PAPER_ONLY` - *only* printed paper vouchers accepted
     *   - `VOUCHER_E` - e-vouchers + printed paper vouchers accepted
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("voucherOption")
    public String voucherOption;
    public Product200ApplicationJSONData withVoucherOption(String voucherOption) {
        this.voucherOption = voucherOption;
        return this;
    }
    
    /**
     * **natural-language description** of any requirements pertaining to the use of the voucher
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("voucherRequirements")
    public Object voucherRequirements;
    public Product200ApplicationJSONData withVoucherRequirements(Object voucherRequirements) {
        this.voucherRequirements = voucherRequirements;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webURL")
    public String webURL;
    public Product200ApplicationJSONData withWebURL(String webURL) {
        this.webURL = webURL;
        return this;
    }
    
}
