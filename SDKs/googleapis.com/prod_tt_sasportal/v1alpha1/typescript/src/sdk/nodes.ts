/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Nodes {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Signs a device.
   */
  prodTtSasportalNodesDevicesSignDevice(
    req: operations.ProdTtSasportalNodesDevicesSignDeviceRequest,
    security: operations.ProdTtSasportalNodesDevicesSignDeviceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProdTtSasportalNodesDevicesSignDeviceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProdTtSasportalNodesDevicesSignDeviceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{name}:signDevice",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sasPortalSignDeviceRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProdTtSasportalNodesDevicesSignDeviceSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProdTtSasportalNodesDevicesSignDeviceResponse =
        new operations.ProdTtSasportalNodesDevicesSignDeviceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a signed device.
   */
  prodTtSasportalNodesDevicesUpdateSigned(
    req: operations.ProdTtSasportalNodesDevicesUpdateSignedRequest,
    security: operations.ProdTtSasportalNodesDevicesUpdateSignedSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProdTtSasportalNodesDevicesUpdateSignedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProdTtSasportalNodesDevicesUpdateSignedRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{name}:updateSigned",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sasPortalUpdateSignedDeviceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProdTtSasportalNodesDevicesUpdateSignedSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProdTtSasportalNodesDevicesUpdateSignedResponse =
        new operations.ProdTtSasportalNodesDevicesUpdateSignedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalDevice = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalDevice
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a node.
   */
  prodTtSasportalNodesNodesDelete(
    req: operations.ProdTtSasportalNodesNodesDeleteRequest,
    security: operations.ProdTtSasportalNodesNodesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProdTtSasportalNodesNodesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProdTtSasportalNodesNodesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProdTtSasportalNodesNodesDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProdTtSasportalNodesNodesDeleteResponse =
        new operations.ProdTtSasportalNodesNodesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new deployment.
   */
  prodTtSasportalNodesNodesDeploymentsCreate(
    req: operations.ProdTtSasportalNodesNodesDeploymentsCreateRequest,
    security: operations.ProdTtSasportalNodesNodesDeploymentsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProdTtSasportalNodesNodesDeploymentsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProdTtSasportalNodesNodesDeploymentsCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/deployments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sasPortalDeploymentInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ProdTtSasportalNodesNodesDeploymentsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProdTtSasportalNodesNodesDeploymentsCreateResponse =
        new operations.ProdTtSasportalNodesNodesDeploymentsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalDeployment = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalDeployment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists deployments.
   */
  prodTtSasportalNodesNodesDeploymentsList(
    req: operations.ProdTtSasportalNodesNodesDeploymentsListRequest,
    security: operations.ProdTtSasportalNodesNodesDeploymentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProdTtSasportalNodesNodesDeploymentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProdTtSasportalNodesNodesDeploymentsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/deployments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ProdTtSasportalNodesNodesDeploymentsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProdTtSasportalNodesNodesDeploymentsListResponse =
        new operations.ProdTtSasportalNodesNodesDeploymentsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalListDeploymentsResponse = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalListDeploymentsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a device under a node or customer.
   */
  prodTtSasportalNodesNodesDevicesCreate(
    req: operations.ProdTtSasportalNodesNodesDevicesCreateRequest,
    security: operations.ProdTtSasportalNodesNodesDevicesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProdTtSasportalNodesNodesDevicesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProdTtSasportalNodesNodesDevicesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/devices",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sasPortalDeviceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProdTtSasportalNodesNodesDevicesCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProdTtSasportalNodesNodesDevicesCreateResponse =
        new operations.ProdTtSasportalNodesNodesDevicesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalDevice = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalDevice
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a signed device under a node or customer.
   */
  prodTtSasportalNodesNodesDevicesCreateSigned(
    req: operations.ProdTtSasportalNodesNodesDevicesCreateSignedRequest,
    security: operations.ProdTtSasportalNodesNodesDevicesCreateSignedSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProdTtSasportalNodesNodesDevicesCreateSignedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProdTtSasportalNodesNodesDevicesCreateSignedRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/devices:createSigned",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sasPortalCreateSignedDeviceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ProdTtSasportalNodesNodesDevicesCreateSignedSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProdTtSasportalNodesNodesDevicesCreateSignedResponse =
        new operations.ProdTtSasportalNodesNodesDevicesCreateSignedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalDevice = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalDevice
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists devices under a node or customer.
   */
  prodTtSasportalNodesNodesDevicesList(
    req: operations.ProdTtSasportalNodesNodesDevicesListRequest,
    security: operations.ProdTtSasportalNodesNodesDevicesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProdTtSasportalNodesNodesDevicesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProdTtSasportalNodesNodesDevicesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/devices",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProdTtSasportalNodesNodesDevicesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProdTtSasportalNodesNodesDevicesListResponse =
        new operations.ProdTtSasportalNodesNodesDevicesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalListDevicesResponse = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalListDevicesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a requested node.
   */
  prodTtSasportalNodesNodesGet(
    req: operations.ProdTtSasportalNodesNodesGetRequest,
    security: operations.ProdTtSasportalNodesNodesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProdTtSasportalNodesNodesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProdTtSasportalNodesNodesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProdTtSasportalNodesNodesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProdTtSasportalNodesNodesGetResponse =
        new operations.ProdTtSasportalNodesNodesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalNode = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalNode
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Moves a node under another node or customer.
   */
  prodTtSasportalNodesNodesMove(
    req: operations.ProdTtSasportalNodesNodesMoveRequest,
    security: operations.ProdTtSasportalNodesNodesMoveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProdTtSasportalNodesNodesMoveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProdTtSasportalNodesNodesMoveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{name}:move",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sasPortalMoveNodeRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProdTtSasportalNodesNodesMoveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProdTtSasportalNodesNodesMoveResponse =
        new operations.ProdTtSasportalNodesNodesMoveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalOperation = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new node.
   */
  prodTtSasportalNodesNodesNodesCreate(
    req: operations.ProdTtSasportalNodesNodesNodesCreateRequest,
    security: operations.ProdTtSasportalNodesNodesNodesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProdTtSasportalNodesNodesNodesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProdTtSasportalNodesNodesNodesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/nodes",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sasPortalNode",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProdTtSasportalNodesNodesNodesCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProdTtSasportalNodesNodesNodesCreateResponse =
        new operations.ProdTtSasportalNodesNodesNodesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalNode = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalNode
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists nodes.
   */
  prodTtSasportalNodesNodesNodesList(
    req: operations.ProdTtSasportalNodesNodesNodesListRequest,
    security: operations.ProdTtSasportalNodesNodesNodesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProdTtSasportalNodesNodesNodesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProdTtSasportalNodesNodesNodesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/nodes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProdTtSasportalNodesNodesNodesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProdTtSasportalNodesNodesNodesListResponse =
        new operations.ProdTtSasportalNodesNodesNodesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalListNodesResponse = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalListNodesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing node.
   */
  prodTtSasportalNodesNodesPatch(
    req: operations.ProdTtSasportalNodesNodesPatchRequest,
    security: operations.ProdTtSasportalNodesNodesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProdTtSasportalNodesNodesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProdTtSasportalNodesNodesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sasPortalNode",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProdTtSasportalNodesNodesPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProdTtSasportalNodesNodesPatchResponse =
        new operations.ProdTtSasportalNodesNodesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sasPortalNode = utils.objectToClass(
              httpRes?.data,
              shared.SasPortalNode
            );
          }
          break;
      }

      return res;
    });
  }
}
