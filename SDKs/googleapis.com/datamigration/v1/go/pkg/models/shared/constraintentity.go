// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// ConstraintEntity - Constraint is not used as an independent entity, it is retrieved as part of another entity such as Table or View.
type ConstraintEntity struct {
	// Custom engine specific features.
	CustomFeatures map[string]interface{} `json:"customFeatures,omitempty"`
	// The name of the table constraint.
	Name *string `json:"name,omitempty"`
	// Reference columns which may be associated with the constraint. For example, if the constraint is a FOREIGN_KEY, this represents the list of full names of referenced columns by the foreign key.
	ReferenceColumns []string `json:"referenceColumns,omitempty"`
	// Reference table which may be associated with the constraint. For example, if the constraint is a FOREIGN_KEY, this represents the list of full name of the referenced table by the foreign key.
	ReferenceTable *string `json:"referenceTable,omitempty"`
	// Table columns used as part of the Constraint, for example primary key constraint should list the columns which constitutes the key.
	TableColumns []string `json:"tableColumns,omitempty"`
	// Table which is associated with the constraint. In case the constraint is defined on a table, this field is left empty as this information is stored in parent_name. However, if constraint is defined on a view, this field stores the table name on which the view is defined.
	TableName *string `json:"tableName,omitempty"`
	// Type of constraint, for example unique, primary key, foreign key (currently only primary key is supported).
	Type *string `json:"type,omitempty"`
}
