// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GETListTypesActionEnum
type GETListTypesActionEnum string

const (
	GETListTypesActionEnumListTypes GETListTypesActionEnum = "ListTypes"
)

func (e *GETListTypesActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ListTypes":
		*e = GETListTypesActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListTypesActionEnum: %s", s)
	}
}

// GETListTypesDeprecatedStatusEnum - <p>The deprecation status of the extension that you want to get summary information about.</p> <p>Valid values include:</p> <ul> <li> <p> <code>LIVE</code>: The extension is registered for use in CloudFormation operations.</p> </li> <li> <p> <code>DEPRECATED</code>: The extension has been deregistered and can no longer be used in CloudFormation operations.</p> </li> </ul>
type GETListTypesDeprecatedStatusEnum string

const (
	GETListTypesDeprecatedStatusEnumLive       GETListTypesDeprecatedStatusEnum = "LIVE"
	GETListTypesDeprecatedStatusEnumDeprecated GETListTypesDeprecatedStatusEnum = "DEPRECATED"
)

func (e *GETListTypesDeprecatedStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LIVE":
		fallthrough
	case "DEPRECATED":
		*e = GETListTypesDeprecatedStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListTypesDeprecatedStatusEnum: %s", s)
	}
}

// GETListTypesFilters - Filter criteria to use in determining which extensions to return.
type GETListTypesFilters struct {
	Category       *shared.CategoryEnum `queryParam:"name=Category"`
	PublisherID    *string              `queryParam:"name=PublisherId"`
	TypeNamePrefix *string              `queryParam:"name=TypeNamePrefix"`
}

// GETListTypesProvisioningTypeEnum - <p>For resource types, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.</p> <p>Valid values include:</p> <ul> <li> <p> <code>FULLY_MUTABLE</code>: The resource type includes an update handler to process updates to the type during stack update operations.</p> </li> <li> <p> <code>IMMUTABLE</code>: The resource type doesn't include an update handler, so the type can't be updated and must instead be replaced during stack update operations.</p> </li> <li> <p> <code>NON_PROVISIONABLE</code>: The resource type doesn't include create, read, and delete handlers, and therefore can't actually be provisioned.</p> </li> </ul> <p>The default is <code>FULLY_MUTABLE</code>.</p>
type GETListTypesProvisioningTypeEnum string

const (
	GETListTypesProvisioningTypeEnumNonProvisionable GETListTypesProvisioningTypeEnum = "NON_PROVISIONABLE"
	GETListTypesProvisioningTypeEnumImmutable        GETListTypesProvisioningTypeEnum = "IMMUTABLE"
	GETListTypesProvisioningTypeEnumFullyMutable     GETListTypesProvisioningTypeEnum = "FULLY_MUTABLE"
)

func (e *GETListTypesProvisioningTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NON_PROVISIONABLE":
		fallthrough
	case "IMMUTABLE":
		fallthrough
	case "FULLY_MUTABLE":
		*e = GETListTypesProvisioningTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListTypesProvisioningTypeEnum: %s", s)
	}
}

// GETListTypesTypeEnum - The type of extension.
type GETListTypesTypeEnum string

const (
	GETListTypesTypeEnumResource GETListTypesTypeEnum = "RESOURCE"
	GETListTypesTypeEnumModule   GETListTypesTypeEnum = "MODULE"
	GETListTypesTypeEnumHook     GETListTypesTypeEnum = "HOOK"
)

func (e *GETListTypesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RESOURCE":
		fallthrough
	case "MODULE":
		fallthrough
	case "HOOK":
		*e = GETListTypesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListTypesTypeEnum: %s", s)
	}
}

// GETListTypesVersionEnum
type GETListTypesVersionEnum string

const (
	GETListTypesVersionEnumTwoThousandAndTen0515 GETListTypesVersionEnum = "2010-05-15"
)

func (e *GETListTypesVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-15":
		*e = GETListTypesVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListTypesVersionEnum: %s", s)
	}
}

// GETListTypesVisibilityEnum - <p>The scope at which the extensions are visible and usable in CloudFormation operations.</p> <p>Valid values include:</p> <ul> <li> <p> <code>PRIVATE</code>: Extensions that are visible and usable within this account and region. This includes:</p> <ul> <li> <p>Private extensions you have registered in this account and region.</p> </li> <li> <p>Public extensions that you have activated in this account and region.</p> </li> </ul> </li> <li> <p> <code>PUBLIC</code>: Extensions that are publicly visible and available to be activated within any Amazon Web Services account. This includes extensions from Amazon Web Services, in addition to third-party publishers.</p> </li> </ul> <p>The default is <code>PRIVATE</code>.</p>
type GETListTypesVisibilityEnum string

const (
	GETListTypesVisibilityEnumPublic  GETListTypesVisibilityEnum = "PUBLIC"
	GETListTypesVisibilityEnumPrivate GETListTypesVisibilityEnum = "PRIVATE"
)

func (e *GETListTypesVisibilityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PUBLIC":
		fallthrough
	case "PRIVATE":
		*e = GETListTypesVisibilityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListTypesVisibilityEnum: %s", s)
	}
}

type GETListTypesQueryParams struct {
	Action GETListTypesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The deprecation status of the extension that you want to get summary information about.</p> <p>Valid values include:</p> <ul> <li> <p> <code>LIVE</code>: The extension is registered for use in CloudFormation operations.</p> </li> <li> <p> <code>DEPRECATED</code>: The extension has been deregistered and can no longer be used in CloudFormation operations.</p> </li> </ul>
	DeprecatedStatus *GETListTypesDeprecatedStatusEnum `queryParam:"style=form,explode=true,name=DeprecatedStatus"`
	// <p>Filter criteria to use in determining which extensions to return.</p> <p>Filters must be compatible with <code>Visibility</code> to return valid results. For example, specifying <code>AWS_TYPES</code> for <code>Category</code> and <code>PRIVATE</code> for <code>Visibility</code> returns an empty list of types, but specifying <code>PUBLIC</code> for <code>Visibility</code> returns the desired list.</p>
	Filters *GETListTypesFilters `queryParam:"style=form,explode=true,name=Filters"`
	// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=MaxResults"`
	// If the previous paginated request didn't return all the remaining results, the response object's <code>NextToken</code> parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If there are no remaining results, the previous response object's <code>NextToken</code> parameter is set to <code>null</code>.
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
	// <p>For resource types, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.</p> <p>Valid values include:</p> <ul> <li> <p> <code>FULLY_MUTABLE</code>: The resource type includes an update handler to process updates to the type during stack update operations.</p> </li> <li> <p> <code>IMMUTABLE</code>: The resource type doesn't include an update handler, so the type can't be updated and must instead be replaced during stack update operations.</p> </li> <li> <p> <code>NON_PROVISIONABLE</code>: The resource type doesn't include create, read, and delete handlers, and therefore can't actually be provisioned.</p> </li> </ul> <p>The default is <code>FULLY_MUTABLE</code>.</p>
	ProvisioningType *GETListTypesProvisioningTypeEnum `queryParam:"style=form,explode=true,name=ProvisioningType"`
	// The type of extension.
	Type    *GETListTypesTypeEnum   `queryParam:"style=form,explode=true,name=Type"`
	Version GETListTypesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// <p>The scope at which the extensions are visible and usable in CloudFormation operations.</p> <p>Valid values include:</p> <ul> <li> <p> <code>PRIVATE</code>: Extensions that are visible and usable within this account and region. This includes:</p> <ul> <li> <p>Private extensions you have registered in this account and region.</p> </li> <li> <p>Public extensions that you have activated in this account and region.</p> </li> </ul> </li> <li> <p> <code>PUBLIC</code>: Extensions that are publicly visible and available to be activated within any Amazon Web Services account. This includes extensions from Amazon Web Services, in addition to third-party publishers.</p> </li> </ul> <p>The default is <code>PRIVATE</code>.</p>
	Visibility *GETListTypesVisibilityEnum `queryParam:"style=form,explode=true,name=Visibility"`
}

type GETListTypesHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETListTypesRequest struct {
	QueryParams GETListTypesQueryParams
	Headers     GETListTypesHeaders
}

type GETListTypesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
