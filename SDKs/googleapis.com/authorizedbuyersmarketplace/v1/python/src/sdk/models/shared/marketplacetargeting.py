"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import criteriatargeting as shared_criteriatargeting
from ..shared import dayparttargeting as shared_dayparttargeting
from ..shared import inventorysizetargeting as shared_inventorysizetargeting
from ..shared import inventorytypetargeting as shared_inventorytypetargeting
from ..shared import placementtargeting as shared_placementtargeting
from ..shared import technologytargeting as shared_technologytargeting
from ..shared import videotargeting as shared_videotargeting
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MarketplaceTargeting:
    r"""Targeting represents different criteria that can be used to target inventory. For example, they can choose to target inventory only if the user is in the US. Multiple types of targeting are always applied as a logical AND, unless noted otherwise."""
    
    daypart_targeting: Optional[shared_dayparttargeting.DayPartTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('daypartTargeting'), 'exclude': lambda f: f is None }})
    r"""Represents Daypart targeting."""  
    geo_targeting: Optional[shared_criteriatargeting.CriteriaTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoTargeting'), 'exclude': lambda f: f is None }})
    r"""Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs. This cannot be filtered using list filter syntax."""  
    inventory_size_targeting: Optional[shared_inventorysizetargeting.InventorySizeTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySizeTargeting'), 'exclude': lambda f: f is None }})
    r"""Represents the size of an ad unit that can be targeted on a bid request."""  
    inventory_type_targeting: Optional[shared_inventorytypetargeting.InventoryTypeTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventoryTypeTargeting'), 'exclude': lambda f: f is None }})
    r"""Targeting of the inventory types a bid request can originate from."""  
    placement_targeting: Optional[shared_placementtargeting.PlacementTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placementTargeting'), 'exclude': lambda f: f is None }})
    r"""Represents targeting about where the ads can appear, for example, certain sites or mobile applications. Different placement targeting types will be logically OR'ed."""  
    technology_targeting: Optional[shared_technologytargeting.TechnologyTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('technologyTargeting'), 'exclude': lambda f: f is None }})
    r"""Represents targeting about various types of technology."""  
    user_list_targeting: Optional[shared_criteriatargeting.CriteriaTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userListTargeting'), 'exclude': lambda f: f is None }})
    r"""Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs. This cannot be filtered using list filter syntax."""  
    video_targeting: Optional[shared_videotargeting.VideoTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoTargeting'), 'exclude': lambda f: f is None }})
    r"""Represents targeting information about video."""  
    