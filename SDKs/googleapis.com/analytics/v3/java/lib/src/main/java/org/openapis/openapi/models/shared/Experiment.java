/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Experiment - JSON template for Analytics experiment resource.
 */
public class Experiment {
    /**
     * Account ID to which this experiment belongs. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountId")
    public String accountId;

    public Experiment withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * Time the experiment was created. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created")
    public OffsetDateTime created;

    public Experiment withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }
    
    /**
     * Notes about this experiment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Experiment withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * If true, the end user will be able to edit the experiment via the Google Analytics user interface.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("editableInGaUi")
    public Boolean editableInGaUi;

    public Experiment withEditableInGaUi(Boolean editableInGaUi) {
        this.editableInGaUi = editableInGaUi;
        return this;
    }
    
    /**
     * The ending time of the experiment (the time the status changed from RUNNING to ENDED). This field is present only if the experiment has ended. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endTime")
    public OffsetDateTime endTime;

    public Experiment withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * Boolean specifying whether to distribute traffic evenly across all variations. If the value is False, content experiments follows the default behavior of adjusting traffic dynamically based on variation performance. Optional -- defaults to False. This field may not be changed for an experiment whose status is ENDED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("equalWeighting")
    public Boolean equalWeighting;

    public Experiment withEqualWeighting(Boolean equalWeighting) {
        this.equalWeighting = equalWeighting;
        return this;
    }
    
    /**
     * Experiment ID. Required for patch and update. Disallowed for create.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Experiment withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Internal ID for the web property to which this experiment belongs. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("internalWebPropertyId")
    public String internalWebPropertyId;

    public Experiment withInternalWebPropertyId(String internalWebPropertyId) {
        this.internalWebPropertyId = internalWebPropertyId;
        return this;
    }
    
    /**
     * Resource type for an Analytics experiment. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Experiment withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * An integer number in [3, 90]. Specifies the minimum length of the experiment. Can be changed for a running experiment. This field may not be changed for an experiments whose status is ENDED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumExperimentLengthInDays")
    public Integer minimumExperimentLengthInDays;

    public Experiment withMinimumExperimentLengthInDays(Integer minimumExperimentLengthInDays) {
        this.minimumExperimentLengthInDays = minimumExperimentLengthInDays;
        return this;
    }
    
    /**
     * Experiment name. This field may not be changed for an experiment whose status is ENDED. This field is required when creating an experiment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Experiment withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The metric that the experiment is optimizing. Valid values: "ga:goal(n)Completions", "ga:adsenseAdsClicks", "ga:adsenseAdsViewed", "ga:adsenseRevenue", "ga:bounces", "ga:pageviews", "ga:sessionDuration", "ga:transactions", "ga:transactionRevenue". This field is required if status is "RUNNING" and servingFramework is one of "REDIRECT" or "API".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectiveMetric")
    public String objectiveMetric;

    public Experiment withObjectiveMetric(String objectiveMetric) {
        this.objectiveMetric = objectiveMetric;
        return this;
    }
    
    /**
     * Whether the objectiveMetric should be minimized or maximized. Possible values: "MAXIMUM", "MINIMUM". Optional--defaults to "MAXIMUM". Cannot be specified without objectiveMetric. Cannot be modified when status is "RUNNING" or "ENDED".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("optimizationType")
    public String optimizationType;

    public Experiment withOptimizationType(String optimizationType) {
        this.optimizationType = optimizationType;
        return this;
    }
    
    /**
     * Parent link for an experiment. Points to the view (profile) to which this experiment belongs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentLink")
    public ExperimentParentLink parentLink;

    public Experiment withParentLink(ExperimentParentLink parentLink) {
        this.parentLink = parentLink;
        return this;
    }
    
    /**
     * View (Profile) ID to which this experiment belongs. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileId")
    public String profileId;

    public Experiment withProfileId(String profileId) {
        this.profileId = profileId;
        return this;
    }
    
    /**
     * Why the experiment ended. Possible values: "STOPPED_BY_USER", "WINNER_FOUND", "EXPERIMENT_EXPIRED", "ENDED_WITH_NO_WINNER", "GOAL_OBJECTIVE_CHANGED". "ENDED_WITH_NO_WINNER" means that the experiment didn't expire but no winner was projected to be found. If the experiment status is changed via the API to ENDED this field is set to STOPPED_BY_USER. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reasonExperimentEnded")
    public String reasonExperimentEnded;

    public Experiment withReasonExperimentEnded(String reasonExperimentEnded) {
        this.reasonExperimentEnded = reasonExperimentEnded;
        return this;
    }
    
    /**
     * Boolean specifying whether variations URLS are rewritten to match those of the original. This field may not be changed for an experiments whose status is ENDED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rewriteVariationUrlsAsOriginal")
    public Boolean rewriteVariationUrlsAsOriginal;

    public Experiment withRewriteVariationUrlsAsOriginal(Boolean rewriteVariationUrlsAsOriginal) {
        this.rewriteVariationUrlsAsOriginal = rewriteVariationUrlsAsOriginal;
        return this;
    }
    
    /**
     * Link for this experiment. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;

    public Experiment withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * The framework used to serve the experiment variations and evaluate the results. One of:  
     * - REDIRECT: Google Analytics redirects traffic to different variation pages, reports the chosen variation and evaluates the results.
     * - API: Google Analytics chooses and reports the variation to serve and evaluates the results; the caller is responsible for serving the selected variation.
     * - EXTERNAL: The variations will be served externally and the chosen variation reported to Google Analytics. The caller is responsible for serving the selected variation and evaluating the results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("servingFramework")
    public String servingFramework;

    public Experiment withServingFramework(String servingFramework) {
        this.servingFramework = servingFramework;
        return this;
    }
    
    /**
     * The snippet of code to include on the control page(s). This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snippet")
    public String snippet;

    public Experiment withSnippet(String snippet) {
        this.snippet = snippet;
        return this;
    }
    
    /**
     * The starting time of the experiment (the time the status changed from READY_TO_RUN to RUNNING). This field is present only if the experiment has started. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;

    public Experiment withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Experiment status. Possible values: "DRAFT", "READY_TO_RUN", "RUNNING", "ENDED". Experiments can be created in the "DRAFT", "READY_TO_RUN" or "RUNNING" state. This field is required when creating an experiment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public Experiment withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * A floating-point number in (0, 1]. Specifies the fraction of the traffic that participates in the experiment. Can be changed for a running experiment. This field may not be changed for an experiments whose status is ENDED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trafficCoverage")
    public Double trafficCoverage;

    public Experiment withTrafficCoverage(Double trafficCoverage) {
        this.trafficCoverage = trafficCoverage;
        return this;
    }
    
    /**
     * Time the experiment was last modified. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated")
    public OffsetDateTime updated;

    public Experiment withUpdated(OffsetDateTime updated) {
        this.updated = updated;
        return this;
    }
    
    /**
     * Array of variations. The first variation in the array is the original. The number of variations may not change once an experiment is in the RUNNING state. At least two variations are required before status can be set to RUNNING.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variations")
    public ExperimentVariations[] variations;

    public Experiment withVariations(ExperimentVariations[] variations) {
        this.variations = variations;
        return this;
    }
    
    /**
     * Web property ID to which this experiment belongs. The web property ID is of the form UA-XXXXX-YY. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webPropertyId")
    public String webPropertyId;

    public Experiment withWebPropertyId(String webPropertyId) {
        this.webPropertyId = webPropertyId;
        return this;
    }
    
    /**
     * A floating-point number in (0, 1). Specifies the necessary confidence level to choose a winner. This field may not be changed for an experiments whose status is ENDED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("winnerConfidenceLevel")
    public Double winnerConfidenceLevel;

    public Experiment withWinnerConfidenceLevel(Double winnerConfidenceLevel) {
        this.winnerConfidenceLevel = winnerConfidenceLevel;
        return this;
    }
    
    /**
     * Boolean specifying whether a winner has been found for this experiment. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("winnerFound")
    public Boolean winnerFound;

    public Experiment withWinnerFound(Boolean winnerFound) {
        this.winnerFound = winnerFound;
        return this;
    }
    
    public Experiment(){}
}
