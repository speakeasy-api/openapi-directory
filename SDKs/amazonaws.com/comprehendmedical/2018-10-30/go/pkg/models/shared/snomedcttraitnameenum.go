// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SNOMEDCTTraitNameEnum string

const (
	SNOMEDCTTraitNameEnumNegation         SNOMEDCTTraitNameEnum = "NEGATION"
	SNOMEDCTTraitNameEnumDiagnosis        SNOMEDCTTraitNameEnum = "DIAGNOSIS"
	SNOMEDCTTraitNameEnumSign             SNOMEDCTTraitNameEnum = "SIGN"
	SNOMEDCTTraitNameEnumSymptom          SNOMEDCTTraitNameEnum = "SYMPTOM"
	SNOMEDCTTraitNameEnumPertainsToFamily SNOMEDCTTraitNameEnum = "PERTAINS_TO_FAMILY"
	SNOMEDCTTraitNameEnumHypothetical     SNOMEDCTTraitNameEnum = "HYPOTHETICAL"
	SNOMEDCTTraitNameEnumLowConfidence    SNOMEDCTTraitNameEnum = "LOW_CONFIDENCE"
	SNOMEDCTTraitNameEnumPastHistory      SNOMEDCTTraitNameEnum = "PAST_HISTORY"
	SNOMEDCTTraitNameEnumFuture           SNOMEDCTTraitNameEnum = "FUTURE"
)

func (e SNOMEDCTTraitNameEnum) ToPointer() *SNOMEDCTTraitNameEnum {
	return &e
}

func (e *SNOMEDCTTraitNameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEGATION":
		fallthrough
	case "DIAGNOSIS":
		fallthrough
	case "SIGN":
		fallthrough
	case "SYMPTOM":
		fallthrough
	case "PERTAINS_TO_FAMILY":
		fallthrough
	case "HYPOTHETICAL":
		fallthrough
	case "LOW_CONFIDENCE":
		fallthrough
	case "PAST_HISTORY":
		fallthrough
	case "FUTURE":
		*e = SNOMEDCTTraitNameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SNOMEDCTTraitNameEnum: %v", v)
	}
}
