"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def firebasestorage_projects_buckets_add_firebase(self, request: operations.FirebasestorageProjectsBucketsAddFirebaseRequest, security: operations.FirebasestorageProjectsBucketsAddFirebaseSecurity) -> operations.FirebasestorageProjectsBucketsAddFirebaseResponse:
        r"""Links a Google Cloud Storage bucket to a Firebase project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasestorageProjectsBucketsAddFirebaseRequest, base_url, '/v1beta/{bucket}:addFirebase', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebasestorageProjectsBucketsAddFirebaseRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasestorageProjectsBucketsAddFirebaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Bucket])
                res.bucket = out

        return res

    def firebasestorage_projects_buckets_get(self, request: operations.FirebasestorageProjectsBucketsGetRequest, security: operations.FirebasestorageProjectsBucketsGetSecurity) -> operations.FirebasestorageProjectsBucketsGetResponse:
        r"""Gets a single linked storage bucket."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasestorageProjectsBucketsGetRequest, base_url, '/v1beta/{name}', request)
        
        query_params = utils.get_query_params(operations.FirebasestorageProjectsBucketsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasestorageProjectsBucketsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Bucket])
                res.bucket = out

        return res

    def firebasestorage_projects_buckets_list(self, request: operations.FirebasestorageProjectsBucketsListRequest, security: operations.FirebasestorageProjectsBucketsListSecurity) -> operations.FirebasestorageProjectsBucketsListResponse:
        r"""Lists the linked storage buckets for a project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasestorageProjectsBucketsListRequest, base_url, '/v1beta/{parent}/buckets', request)
        
        query_params = utils.get_query_params(operations.FirebasestorageProjectsBucketsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasestorageProjectsBucketsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListBucketsResponse])
                res.list_buckets_response = out

        return res

    def firebasestorage_projects_buckets_remove_firebase(self, request: operations.FirebasestorageProjectsBucketsRemoveFirebaseRequest, security: operations.FirebasestorageProjectsBucketsRemoveFirebaseSecurity) -> operations.FirebasestorageProjectsBucketsRemoveFirebaseResponse:
        r"""Unlinks a linked Google Cloud Storage bucket from a Firebase project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasestorageProjectsBucketsRemoveFirebaseRequest, base_url, '/v1beta/{bucket}:removeFirebase', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebasestorageProjectsBucketsRemoveFirebaseRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasestorageProjectsBucketsRemoveFirebaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    