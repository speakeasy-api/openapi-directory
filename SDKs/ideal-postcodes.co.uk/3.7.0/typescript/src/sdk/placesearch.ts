/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Global places search to identify geographical names and places
 */
export class PlaceSearch {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Find Place
   *
   * @remarks
   * Query for geographical places across countries. Each query will return a list of place suggestions, which consists of a place name, descriptive name and id.
   *
   * This API returns geographical information such as countries, capitals, administrative areas and more. It is ideal for correctly identifying a place along with any other details like geolocation.
   *
   * ## Implementing Place Autocomplete
   *
   * Extracting the full information of a place is a 2 step process:
   *
   * 1. Retrieve place suggestions via /places
   * 2. Retrieve the entire place with the ID provided in the suggestion
   *
   * ## Suggestion Format
   *
   * Each place suggestion contains a descriptive name which you can provide to users to uniquely idenfity a place.
   *
   * ## Rate Limiting
   *
   * You can make up to 3000 requests to the autocomplete API within a 5 minute span. The HTTP Header contains information on your current rate limit.
   *
   * | Header                  | Description                                                                            |
   * | ----------------------- | -------------------------------------------------------------------------------------- |
   * | `X-RateLimit-Limit`     | The maximum number of requests that can be made in 5 minutes                           |
   * | `X-RateLimit-Remaining` | The remaining requests within the current rate limit window                            |
   * | `X-RateLimit-Reset`     | The time when the rate limit window resets in Unix Time (seconds) or UTC Epoch seconds |
   *
   * ## Pricing
   *
   * This API currently does not affect your balance. However, resolving a suggestion into a full place requires a paid request.
   *
   * Please note, this API is not intended as a standalone free resource. Integrations that consistently make autocomplete requests without a paid request to resolve an place may be disrupted via tightened rate limits.
   *
   */
  findPlace(
    req: operations.FindPlaceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FindPlaceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FindPlaceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/places";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FindPlaceResponse =
        new operations.FindPlaceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.placeResponse = utils.objectToClass(
              httpRes?.data,
              shared.PlaceResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestResponse = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Resolve Place
   *
   * @remarks
   * Resolves a place autocompletion by its place ID.
   *
   */
  resolvePlace(
    req: operations.ResolvePlaceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ResolvePlaceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ResolvePlaceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/places/${place}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ResolvePlaceResponse =
        new operations.ResolvePlaceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resolvePlaceResponse = utils.objectToClass(
              httpRes?.data,
              shared.ResolvePlaceResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
