/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * A defined break template that sets an expectation for possible `Break`
 *
 * @remarks
 * instances on a `Shift`.
 */
export class BreakType extends SpeakeasyBase {
  /**
   * A human-readable name for this type of break. The name is displayed to
   *
   * @remarks
   * employees in Square products.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "break_name" })
  breakName: string;

  /**
   * A read-only timestamp in RFC 3339 format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt?: string;

  /**
   * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
   *
   * @remarks
   * this break. Precision less than minutes is truncated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expected_duration" })
  expectedDuration: string;

  /**
   * The UUID for this object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Whether this break counts towards time worked for compensation
   *
   * @remarks
   * purposes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_paid" })
  isPaid: boolean;

  /**
   * The ID of the business location this type of break applies to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location_id" })
  locationId: string;

  /**
   * A read-only timestamp in RFC 3339 format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  updatedAt?: string;

  /**
   * Used for resolving concurrency issues. The request fails if the version
   *
   * @remarks
   * provided does not match the server version at the time of the request. If a value is not
   * provided, Square's servers execute a "blind" write; potentially
   * overwriting another writer's data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: number;
}
