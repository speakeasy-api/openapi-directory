/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The reference that identifies an object.
 */
export class ListIndexRequestBodyIndexReference extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Selector" })
  selector?: string;
}

export class ListIndexRequestBody extends SpeakeasyBase {
  /**
   * The reference that identifies an object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IndexReference" })
  @Type(() => ListIndexRequestBodyIndexReference)
  indexReference: ListIndexRequestBodyIndexReference;

  /**
   * The maximum number of objects in a single page to retrieve from the index during a request. For more information, see <a href="http://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html">Amazon Cloud Directory Limits</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaxResults" })
  maxResults?: number;

  /**
   * The pagination token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NextToken" })
  nextToken?: string;

  /**
   * Specifies the ranges of indexed values that you want to query.
   */
  @SpeakeasyMetadata({ elemType: shared.ObjectAttributeRange })
  @Expose({ name: "RangesOnIndexedValues" })
  @Type(() => shared.ObjectAttributeRange)
  rangesOnIndexedValues?: shared.ObjectAttributeRange[];
}

/**
 * The consistency level to execute the request at.
 */
export enum ListIndexXAmzConsistencyLevelEnum {
  Serializable = "SERIALIZABLE",
  Eventual = "EVENTUAL",
}

export class ListIndexRequest extends SpeakeasyBase {
  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=MaxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=NextToken",
  })
  nextToken?: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ListIndexRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The consistency level to execute the request at.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-amz-consistency-level",
  })
  xAmzConsistencyLevel?: ListIndexXAmzConsistencyLevelEnum;

  /**
   * The ARN of the directory that the index exists in.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-amz-data-partition",
  })
  xAmzDataPartition: string;
}

export class ListIndexResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * DirectoryNotEnabledException
   */
  @SpeakeasyMetadata()
  directoryNotEnabledException?: any;

  /**
   * FacetValidationException
   */
  @SpeakeasyMetadata()
  facetValidationException?: any;

  /**
   * InternalServiceException
   */
  @SpeakeasyMetadata()
  internalServiceException?: any;

  /**
   * InvalidArnException
   */
  @SpeakeasyMetadata()
  invalidArnException?: any;

  /**
   * InvalidNextTokenException
   */
  @SpeakeasyMetadata()
  invalidNextTokenException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  listIndexResponse?: shared.ListIndexResponse;

  /**
   * NotIndexException
   */
  @SpeakeasyMetadata()
  notIndexException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * RetryableConflictException
   */
  @SpeakeasyMetadata()
  retryableConflictException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
