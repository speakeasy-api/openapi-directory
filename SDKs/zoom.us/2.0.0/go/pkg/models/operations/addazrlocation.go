// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AddAZRLocationSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type AddAZRLocationApplicationJSON struct {
	// Name of the location. The name must be unique and shouldn't have already been used in the same account.
	Name *string `json:"name,omitempty"`
	// The location ID of the location that is a level higher from the location that is being added.<br><br> For example, to add a City named "City 1" as the child location under a State named "State 1", you must provide the location ID of "State 1". This can be retrieved using the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.
	ParentLocationID *string `json:"parent_location_id,omitempty"`
}

type AddAZRLocationRequest struct {
	Request  *AddAZRLocationApplicationJSON `request:"mediaType=application/json"`
	Security AddAZRLocationSecurity
}

// AddAZRLocation200ApplicationXMLTypeEnum - Type of location. The value should be one of the following:<br>
// `country`, `states`, `city`, `campus`, `building`, `floor`.
type AddAZRLocation200ApplicationXMLTypeEnum string

const (
	AddAZRLocation200ApplicationXMLTypeEnumCountry  AddAZRLocation200ApplicationXMLTypeEnum = "country"
	AddAZRLocation200ApplicationXMLTypeEnumStates   AddAZRLocation200ApplicationXMLTypeEnum = "states"
	AddAZRLocation200ApplicationXMLTypeEnumCity     AddAZRLocation200ApplicationXMLTypeEnum = "city"
	AddAZRLocation200ApplicationXMLTypeEnumCampus   AddAZRLocation200ApplicationXMLTypeEnum = "campus"
	AddAZRLocation200ApplicationXMLTypeEnumBuilding AddAZRLocation200ApplicationXMLTypeEnum = "building"
	AddAZRLocation200ApplicationXMLTypeEnumFloor    AddAZRLocation200ApplicationXMLTypeEnum = "floor"
)

func (e *AddAZRLocation200ApplicationXMLTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "country":
		fallthrough
	case "states":
		fallthrough
	case "city":
		fallthrough
	case "campus":
		fallthrough
	case "building":
		fallthrough
	case "floor":
		*e = AddAZRLocation200ApplicationXMLTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddAZRLocation200ApplicationXMLTypeEnum: %s", s)
	}
}

// AddAZRLocation200ApplicationXML - **HTTP Status Code:** `200` **OK**<br>
// Location added successfully.
type AddAZRLocation200ApplicationXML struct {
	// Location ID: Unique Identifier of the location that was added.
	ID *string
	// Name of the location.
	Name *string
	// Unique Identifier of the parent location.
	ParentLocationID *string
	// Type of location. The value should be one of the following:<br>
	// `country`, `states`, `city`, `campus`, `building`, `floor`.
	Type *AddAZRLocation200ApplicationXMLTypeEnum
}

// AddAZRLocation200ApplicationJSONTypeEnum - Type of location. The value should be one of the following:<br>
// `country`, `states`, `city`, `campus`, `building`, `floor`.
type AddAZRLocation200ApplicationJSONTypeEnum string

const (
	AddAZRLocation200ApplicationJSONTypeEnumCountry  AddAZRLocation200ApplicationJSONTypeEnum = "country"
	AddAZRLocation200ApplicationJSONTypeEnumStates   AddAZRLocation200ApplicationJSONTypeEnum = "states"
	AddAZRLocation200ApplicationJSONTypeEnumCity     AddAZRLocation200ApplicationJSONTypeEnum = "city"
	AddAZRLocation200ApplicationJSONTypeEnumCampus   AddAZRLocation200ApplicationJSONTypeEnum = "campus"
	AddAZRLocation200ApplicationJSONTypeEnumBuilding AddAZRLocation200ApplicationJSONTypeEnum = "building"
	AddAZRLocation200ApplicationJSONTypeEnumFloor    AddAZRLocation200ApplicationJSONTypeEnum = "floor"
)

func (e *AddAZRLocation200ApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "country":
		fallthrough
	case "states":
		fallthrough
	case "city":
		fallthrough
	case "campus":
		fallthrough
	case "building":
		fallthrough
	case "floor":
		*e = AddAZRLocation200ApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddAZRLocation200ApplicationJSONTypeEnum: %s", s)
	}
}

// AddAZRLocation200ApplicationJSON - **HTTP Status Code:** `200` **OK**<br>
// Location added successfully.
type AddAZRLocation200ApplicationJSON struct {
	// Location ID: Unique Identifier of the location that was added.
	ID *string `json:"id,omitempty"`
	// Name of the location.
	Name *string `json:"name,omitempty"`
	// Unique Identifier of the parent location.
	ParentLocationID *string `json:"parent_location_id,omitempty"`
	// Type of location. The value should be one of the following:<br>
	// `country`, `states`, `city`, `campus`, `building`, `floor`.
	Type *AddAZRLocation200ApplicationJSONTypeEnum `json:"type,omitempty"`
}

type AddAZRLocationResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200` **OK**<br>
	// Location added successfully.
	AddAZRLocation200ApplicationJSONObject *AddAZRLocation200ApplicationJSON
}
