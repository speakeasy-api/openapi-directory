// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CapabilitySettingsFundingSourceEnum string

const (
	CapabilitySettingsFundingSourceEnumCredit  CapabilitySettingsFundingSourceEnum = "credit"
	CapabilitySettingsFundingSourceEnumDebit   CapabilitySettingsFundingSourceEnum = "debit"
	CapabilitySettingsFundingSourceEnumPrepaid CapabilitySettingsFundingSourceEnum = "prepaid"
)

func (e CapabilitySettingsFundingSourceEnum) ToPointer() *CapabilitySettingsFundingSourceEnum {
	return &e
}

func (e *CapabilitySettingsFundingSourceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "credit":
		fallthrough
	case "debit":
		fallthrough
	case "prepaid":
		*e = CapabilitySettingsFundingSourceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapabilitySettingsFundingSourceEnum: %v", v)
	}
}

// CapabilitySettingsIntervalEnum - The period when the rule conditions apply.
type CapabilitySettingsIntervalEnum string

const (
	CapabilitySettingsIntervalEnumDaily   CapabilitySettingsIntervalEnum = "daily"
	CapabilitySettingsIntervalEnumMonthly CapabilitySettingsIntervalEnum = "monthly"
	CapabilitySettingsIntervalEnumWeekly  CapabilitySettingsIntervalEnum = "weekly"
)

func (e CapabilitySettingsIntervalEnum) ToPointer() *CapabilitySettingsIntervalEnum {
	return &e
}

func (e *CapabilitySettingsIntervalEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "monthly":
		fallthrough
	case "weekly":
		*e = CapabilitySettingsIntervalEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapabilitySettingsIntervalEnum: %v", v)
	}
}

type CapabilitySettings struct {
	// The maximum amount a card holder can spend per industry.
	AmountPerIndustry map[string]Amount `json:"amountPerIndustry,omitempty"`
	// The number of card holders who can use the card.
	AuthorizedCardUsers *bool `json:"authorizedCardUsers,omitempty"`
	// The funding source of the card, for example **debit**.
	FundingSource []CapabilitySettingsFundingSourceEnum `json:"fundingSource,omitempty"`
	// The period when the rule conditions apply.
	Interval  *CapabilitySettingsIntervalEnum `json:"interval,omitempty"`
	MaxAmount *Amount                         `json:"maxAmount,omitempty"`
}
