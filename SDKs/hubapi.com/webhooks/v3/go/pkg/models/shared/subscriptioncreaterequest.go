// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SubscriptionCreateRequestEventTypeEnum - Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
type SubscriptionCreateRequestEventTypeEnum string

const (
	SubscriptionCreateRequestEventTypeEnumContactPropertyChange       SubscriptionCreateRequestEventTypeEnum = "contact.propertyChange"
	SubscriptionCreateRequestEventTypeEnumCompanyPropertyChange       SubscriptionCreateRequestEventTypeEnum = "company.propertyChange"
	SubscriptionCreateRequestEventTypeEnumDealPropertyChange          SubscriptionCreateRequestEventTypeEnum = "deal.propertyChange"
	SubscriptionCreateRequestEventTypeEnumTicketPropertyChange        SubscriptionCreateRequestEventTypeEnum = "ticket.propertyChange"
	SubscriptionCreateRequestEventTypeEnumProductPropertyChange       SubscriptionCreateRequestEventTypeEnum = "product.propertyChange"
	SubscriptionCreateRequestEventTypeEnumLineItemPropertyChange      SubscriptionCreateRequestEventTypeEnum = "line_item.propertyChange"
	SubscriptionCreateRequestEventTypeEnumContactCreation             SubscriptionCreateRequestEventTypeEnum = "contact.creation"
	SubscriptionCreateRequestEventTypeEnumContactDeletion             SubscriptionCreateRequestEventTypeEnum = "contact.deletion"
	SubscriptionCreateRequestEventTypeEnumContactPrivacyDeletion      SubscriptionCreateRequestEventTypeEnum = "contact.privacyDeletion"
	SubscriptionCreateRequestEventTypeEnumCompanyCreation             SubscriptionCreateRequestEventTypeEnum = "company.creation"
	SubscriptionCreateRequestEventTypeEnumCompanyDeletion             SubscriptionCreateRequestEventTypeEnum = "company.deletion"
	SubscriptionCreateRequestEventTypeEnumDealCreation                SubscriptionCreateRequestEventTypeEnum = "deal.creation"
	SubscriptionCreateRequestEventTypeEnumDealDeletion                SubscriptionCreateRequestEventTypeEnum = "deal.deletion"
	SubscriptionCreateRequestEventTypeEnumTicketCreation              SubscriptionCreateRequestEventTypeEnum = "ticket.creation"
	SubscriptionCreateRequestEventTypeEnumTicketDeletion              SubscriptionCreateRequestEventTypeEnum = "ticket.deletion"
	SubscriptionCreateRequestEventTypeEnumProductCreation             SubscriptionCreateRequestEventTypeEnum = "product.creation"
	SubscriptionCreateRequestEventTypeEnumProductDeletion             SubscriptionCreateRequestEventTypeEnum = "product.deletion"
	SubscriptionCreateRequestEventTypeEnumLineItemCreation            SubscriptionCreateRequestEventTypeEnum = "line_item.creation"
	SubscriptionCreateRequestEventTypeEnumLineItemDeletion            SubscriptionCreateRequestEventTypeEnum = "line_item.deletion"
	SubscriptionCreateRequestEventTypeEnumConversationCreation        SubscriptionCreateRequestEventTypeEnum = "conversation.creation"
	SubscriptionCreateRequestEventTypeEnumConversationDeletion        SubscriptionCreateRequestEventTypeEnum = "conversation.deletion"
	SubscriptionCreateRequestEventTypeEnumConversationNewMessage      SubscriptionCreateRequestEventTypeEnum = "conversation.newMessage"
	SubscriptionCreateRequestEventTypeEnumConversationPrivacyDeletion SubscriptionCreateRequestEventTypeEnum = "conversation.privacyDeletion"
	SubscriptionCreateRequestEventTypeEnumConversationPropertyChange  SubscriptionCreateRequestEventTypeEnum = "conversation.propertyChange"
	SubscriptionCreateRequestEventTypeEnumContactMerge                SubscriptionCreateRequestEventTypeEnum = "contact.merge"
	SubscriptionCreateRequestEventTypeEnumCompanyMerge                SubscriptionCreateRequestEventTypeEnum = "company.merge"
	SubscriptionCreateRequestEventTypeEnumDealMerge                   SubscriptionCreateRequestEventTypeEnum = "deal.merge"
	SubscriptionCreateRequestEventTypeEnumTicketMerge                 SubscriptionCreateRequestEventTypeEnum = "ticket.merge"
	SubscriptionCreateRequestEventTypeEnumProductMerge                SubscriptionCreateRequestEventTypeEnum = "product.merge"
	SubscriptionCreateRequestEventTypeEnumLineItemMerge               SubscriptionCreateRequestEventTypeEnum = "line_item.merge"
	SubscriptionCreateRequestEventTypeEnumContactRestore              SubscriptionCreateRequestEventTypeEnum = "contact.restore"
	SubscriptionCreateRequestEventTypeEnumCompanyRestore              SubscriptionCreateRequestEventTypeEnum = "company.restore"
	SubscriptionCreateRequestEventTypeEnumDealRestore                 SubscriptionCreateRequestEventTypeEnum = "deal.restore"
	SubscriptionCreateRequestEventTypeEnumTicketRestore               SubscriptionCreateRequestEventTypeEnum = "ticket.restore"
	SubscriptionCreateRequestEventTypeEnumProductRestore              SubscriptionCreateRequestEventTypeEnum = "product.restore"
	SubscriptionCreateRequestEventTypeEnumLineItemRestore             SubscriptionCreateRequestEventTypeEnum = "line_item.restore"
	SubscriptionCreateRequestEventTypeEnumContactAssociationChange    SubscriptionCreateRequestEventTypeEnum = "contact.associationChange"
	SubscriptionCreateRequestEventTypeEnumCompanyAssociationChange    SubscriptionCreateRequestEventTypeEnum = "company.associationChange"
	SubscriptionCreateRequestEventTypeEnumDealAssociationChange       SubscriptionCreateRequestEventTypeEnum = "deal.associationChange"
	SubscriptionCreateRequestEventTypeEnumTicketAssociationChange     SubscriptionCreateRequestEventTypeEnum = "ticket.associationChange"
	SubscriptionCreateRequestEventTypeEnumLineItemAssociationChange   SubscriptionCreateRequestEventTypeEnum = "line_item.associationChange"
)

func (e SubscriptionCreateRequestEventTypeEnum) ToPointer() *SubscriptionCreateRequestEventTypeEnum {
	return &e
}

func (e *SubscriptionCreateRequestEventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "contact.propertyChange":
		fallthrough
	case "company.propertyChange":
		fallthrough
	case "deal.propertyChange":
		fallthrough
	case "ticket.propertyChange":
		fallthrough
	case "product.propertyChange":
		fallthrough
	case "line_item.propertyChange":
		fallthrough
	case "contact.creation":
		fallthrough
	case "contact.deletion":
		fallthrough
	case "contact.privacyDeletion":
		fallthrough
	case "company.creation":
		fallthrough
	case "company.deletion":
		fallthrough
	case "deal.creation":
		fallthrough
	case "deal.deletion":
		fallthrough
	case "ticket.creation":
		fallthrough
	case "ticket.deletion":
		fallthrough
	case "product.creation":
		fallthrough
	case "product.deletion":
		fallthrough
	case "line_item.creation":
		fallthrough
	case "line_item.deletion":
		fallthrough
	case "conversation.creation":
		fallthrough
	case "conversation.deletion":
		fallthrough
	case "conversation.newMessage":
		fallthrough
	case "conversation.privacyDeletion":
		fallthrough
	case "conversation.propertyChange":
		fallthrough
	case "contact.merge":
		fallthrough
	case "company.merge":
		fallthrough
	case "deal.merge":
		fallthrough
	case "ticket.merge":
		fallthrough
	case "product.merge":
		fallthrough
	case "line_item.merge":
		fallthrough
	case "contact.restore":
		fallthrough
	case "company.restore":
		fallthrough
	case "deal.restore":
		fallthrough
	case "ticket.restore":
		fallthrough
	case "product.restore":
		fallthrough
	case "line_item.restore":
		fallthrough
	case "contact.associationChange":
		fallthrough
	case "company.associationChange":
		fallthrough
	case "deal.associationChange":
		fallthrough
	case "ticket.associationChange":
		fallthrough
	case "line_item.associationChange":
		*e = SubscriptionCreateRequestEventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SubscriptionCreateRequestEventTypeEnum: %v", v)
	}
}

// SubscriptionCreateRequest - New webhook settings for an app.
type SubscriptionCreateRequest struct {
	// Determines if the subscription is active or paused. Defaults to false.
	Active *bool `json:"active,omitempty"`
	// Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
	EventType SubscriptionCreateRequestEventTypeEnum `json:"eventType"`
	// The internal name of the property to monitor for changes. Only applies when `eventType` is `propertyChange`.
	PropertyName *string `json:"propertyName,omitempty"`
}
