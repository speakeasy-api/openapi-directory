// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartQueryXAmzTargetEnum
type StartQueryXAmzTargetEnum string

const (
	StartQueryXAmzTargetEnumLogs20140328StartQuery StartQueryXAmzTargetEnum = "Logs_20140328.StartQuery"
)

func (e StartQueryXAmzTargetEnum) ToPointer() *StartQueryXAmzTargetEnum {
	return &e
}

func (e *StartQueryXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Logs_20140328.StartQuery":
		*e = StartQueryXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StartQueryXAmzTargetEnum: %v", v)
	}
}

type StartQueryRequest struct {
	StartQueryRequest shared.StartQueryRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        StartQueryXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartQueryResponse struct {
	ContentType string
	// InvalidParameterException
	InvalidParameterException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// MalformedQueryException
	MalformedQueryException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	// Success
	StartQueryResponse *shared.StartQueryResponse
	StatusCode         int
	RawResponse        *http.Response
}
