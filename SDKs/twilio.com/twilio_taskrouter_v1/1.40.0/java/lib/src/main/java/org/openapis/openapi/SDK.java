/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://taskrouter.twilio.com",
	};
    /**
	 * CREATE_ACTIVITY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ACTIVITY_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * CREATE_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_TASK_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * CREATE_TASK_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_TASK_CHANNEL_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * CREATE_TASK_QUEUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_TASK_QUEUE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * CREATE_WORKER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_WORKER_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * CREATE_WORKFLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_WORKFLOW_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * CREATE_WORKSPACE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_WORKSPACE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * DELETE_ACTIVITY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ACTIVITY_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * DELETE_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_TASK_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * DELETE_TASK_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_TASK_CHANNEL_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * DELETE_TASK_QUEUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_TASK_QUEUE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * DELETE_WORKER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_WORKER_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * DELETE_WORKFLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_WORKFLOW_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * DELETE_WORKSPACE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_WORKSPACE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_ACTIVITY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ACTIVITY_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_EVENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_EVENT_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_TASK_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_CHANNEL_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_TASK_QUEUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_QUEUE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_TASK_QUEUE_CUMULATIVE_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_QUEUE_CUMULATIVE_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_TASK_QUEUE_REAL_TIME_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_QUEUE_REAL_TIME_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_TASK_QUEUE_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_QUEUE_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_TASK_RESERVATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_RESERVATION_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKER_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKER_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKER_CHANNEL_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKER_INSTANCE_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKER_INSTANCE_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKER_RESERVATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKER_RESERVATION_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKER_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKER_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKERS_CUMULATIVE_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKERS_CUMULATIVE_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKERS_REAL_TIME_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKERS_REAL_TIME_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKFLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKFLOW_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKFLOW_CUMULATIVE_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKFLOW_CUMULATIVE_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKFLOW_REAL_TIME_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKFLOW_REAL_TIME_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKFLOW_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKFLOW_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKSPACE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKSPACE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKSPACE_CUMULATIVE_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKSPACE_CUMULATIVE_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKSPACE_REAL_TIME_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKSPACE_REAL_TIME_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKSPACE_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKSPACE_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_ACTIVITY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ACTIVITY_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_EVENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_EVENT_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_TASK_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_TASK_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_TASK_CHANNEL_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_TASK_QUEUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_TASK_QUEUE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_TASK_QUEUES_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_TASK_QUEUES_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_TASK_RESERVATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_TASK_RESERVATION_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_WORKER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_WORKER_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_WORKER_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_WORKER_CHANNEL_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_WORKER_RESERVATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_WORKER_RESERVATION_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_WORKFLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_WORKFLOW_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_WORKSPACE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_WORKSPACE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_ACTIVITY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ACTIVITY_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_TASK_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_TASK_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_TASK_CHANNEL_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_TASK_QUEUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_TASK_QUEUE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_TASK_RESERVATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_TASK_RESERVATION_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_WORKER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_WORKER_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_WORKER_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_WORKER_CHANNEL_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_WORKER_RESERVATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_WORKER_RESERVATION_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_WORKFLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_WORKFLOW_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_WORKSPACE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_WORKSPACE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    public org.openapis.openapi.models.operations.CreateActivityResponse createActivity(org.openapis.openapi.models.operations.CreateActivityRequest request) throws Exception {
        String baseUrl = CREATE_ACTIVITY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateActivityPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Activities", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateActivityResponse res = new org.openapis.openapi.models.operations.CreateActivityResponse() {{
            taskrouterV1WorkspaceActivity = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceActivity out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceActivity.class);
                res.taskrouterV1WorkspaceActivity = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateTaskResponse createTask(org.openapis.openapi.models.operations.CreateTaskRequest request) throws Exception {
        String baseUrl = CREATE_TASK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateTaskPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Tasks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateTaskResponse res = new org.openapis.openapi.models.operations.CreateTaskResponse() {{
            taskrouterV1WorkspaceTask = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTask out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTask.class);
                res.taskrouterV1WorkspaceTask = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateTaskChannelResponse createTaskChannel(org.openapis.openapi.models.operations.CreateTaskChannelRequest request) throws Exception {
        String baseUrl = CREATE_TASK_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateTaskChannelPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskChannels", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateTaskChannelResponse res = new org.openapis.openapi.models.operations.CreateTaskChannelResponse() {{
            taskrouterV1WorkspaceTaskChannel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskChannel.class);
                res.taskrouterV1WorkspaceTaskChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateTaskQueueResponse createTaskQueue(org.openapis.openapi.models.operations.CreateTaskQueueRequest request) throws Exception {
        String baseUrl = CREATE_TASK_QUEUE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateTaskQueuePathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateTaskQueueResponse res = new org.openapis.openapi.models.operations.CreateTaskQueueResponse() {{
            taskrouterV1WorkspaceTaskQueue = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueue out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueue.class);
                res.taskrouterV1WorkspaceTaskQueue = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateWorkerResponse createWorker(org.openapis.openapi.models.operations.CreateWorkerRequest request) throws Exception {
        String baseUrl = CREATE_WORKER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateWorkerPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateWorkerResponse res = new org.openapis.openapi.models.operations.CreateWorkerResponse() {{
            taskrouterV1WorkspaceWorker = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorker out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorker.class);
                res.taskrouterV1WorkspaceWorker = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateWorkflowResponse createWorkflow(org.openapis.openapi.models.operations.CreateWorkflowRequest request) throws Exception {
        String baseUrl = CREATE_WORKFLOW_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateWorkflowPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workflows", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateWorkflowResponse res = new org.openapis.openapi.models.operations.CreateWorkflowResponse() {{
            taskrouterV1WorkspaceWorkflow = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflow out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflow.class);
                res.taskrouterV1WorkspaceWorkflow = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateWorkspaceResponse createWorkspace(org.openapis.openapi.models.operations.CreateWorkspaceRequest request) throws Exception {
        String baseUrl = CREATE_WORKSPACE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Workspaces");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateWorkspaceResponse res = new org.openapis.openapi.models.operations.CreateWorkspaceResponse() {{
            taskrouterV1Workspace = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1Workspace out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1Workspace.class);
                res.taskrouterV1Workspace = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteActivityResponse deleteActivity(org.openapis.openapi.models.operations.DeleteActivityRequest request) throws Exception {
        String baseUrl = DELETE_ACTIVITY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteActivityPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteActivityResponse res = new org.openapis.openapi.models.operations.DeleteActivityResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteTaskResponse deleteTask(org.openapis.openapi.models.operations.DeleteTaskRequest request) throws Exception {
        String baseUrl = DELETE_TASK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteTaskPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteTaskResponse res = new org.openapis.openapi.models.operations.DeleteTaskResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteTaskChannelResponse deleteTaskChannel(org.openapis.openapi.models.operations.DeleteTaskChannelRequest request) throws Exception {
        String baseUrl = DELETE_TASK_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteTaskChannelPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteTaskChannelResponse res = new org.openapis.openapi.models.operations.DeleteTaskChannelResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteTaskQueueResponse deleteTaskQueue(org.openapis.openapi.models.operations.DeleteTaskQueueRequest request) throws Exception {
        String baseUrl = DELETE_TASK_QUEUE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteTaskQueuePathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteTaskQueueResponse res = new org.openapis.openapi.models.operations.DeleteTaskQueueResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteWorkerResponse deleteWorker(org.openapis.openapi.models.operations.DeleteWorkerRequest request) throws Exception {
        String baseUrl = DELETE_WORKER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteWorkerPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteWorkerResponse res = new org.openapis.openapi.models.operations.DeleteWorkerResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteWorkflowResponse deleteWorkflow(org.openapis.openapi.models.operations.DeleteWorkflowRequest request) throws Exception {
        String baseUrl = DELETE_WORKFLOW_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteWorkflowPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteWorkflowResponse res = new org.openapis.openapi.models.operations.DeleteWorkflowResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteWorkspaceResponse deleteWorkspace(org.openapis.openapi.models.operations.DeleteWorkspaceRequest request) throws Exception {
        String baseUrl = DELETE_WORKSPACE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteWorkspacePathParams.class, baseUrl, "/v1/Workspaces/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteWorkspaceResponse res = new org.openapis.openapi.models.operations.DeleteWorkspaceResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchActivityResponse fetchActivity(org.openapis.openapi.models.operations.FetchActivityRequest request) throws Exception {
        String baseUrl = FETCH_ACTIVITY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchActivityPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchActivityResponse res = new org.openapis.openapi.models.operations.FetchActivityResponse() {{
            taskrouterV1WorkspaceActivity = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceActivity out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceActivity.class);
                res.taskrouterV1WorkspaceActivity = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchEventResponse fetchEvent(org.openapis.openapi.models.operations.FetchEventRequest request) throws Exception {
        String baseUrl = FETCH_EVENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchEventPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Events/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchEventResponse res = new org.openapis.openapi.models.operations.FetchEventResponse() {{
            taskrouterV1WorkspaceEvent = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceEvent out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceEvent.class);
                res.taskrouterV1WorkspaceEvent = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTaskResponse fetchTask(org.openapis.openapi.models.operations.FetchTaskRequest request) throws Exception {
        String baseUrl = FETCH_TASK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskResponse res = new org.openapis.openapi.models.operations.FetchTaskResponse() {{
            taskrouterV1WorkspaceTask = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTask out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTask.class);
                res.taskrouterV1WorkspaceTask = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTaskChannelResponse fetchTaskChannel(org.openapis.openapi.models.operations.FetchTaskChannelRequest request) throws Exception {
        String baseUrl = FETCH_TASK_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskChannelPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskChannelResponse res = new org.openapis.openapi.models.operations.FetchTaskChannelResponse() {{
            taskrouterV1WorkspaceTaskChannel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskChannel.class);
                res.taskrouterV1WorkspaceTaskChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTaskQueueResponse fetchTaskQueue(org.openapis.openapi.models.operations.FetchTaskQueueRequest request) throws Exception {
        String baseUrl = FETCH_TASK_QUEUE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskQueuePathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskQueueResponse res = new org.openapis.openapi.models.operations.FetchTaskQueueResponse() {{
            taskrouterV1WorkspaceTaskQueue = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueue out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueue.class);
                res.taskrouterV1WorkspaceTaskQueue = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTaskQueueCumulativeStatisticsResponse fetchTaskQueueCumulativeStatistics(org.openapis.openapi.models.operations.FetchTaskQueueCumulativeStatisticsRequest request) throws Exception {
        String baseUrl = FETCH_TASK_QUEUE_CUMULATIVE_STATISTICS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskQueueCumulativeStatisticsPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/CumulativeStatistics", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchTaskQueueCumulativeStatisticsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskQueueCumulativeStatisticsResponse res = new org.openapis.openapi.models.operations.FetchTaskQueueCumulativeStatisticsResponse() {{
            taskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics.class);
                res.taskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTaskQueueRealTimeStatisticsResponse fetchTaskQueueRealTimeStatistics(org.openapis.openapi.models.operations.FetchTaskQueueRealTimeStatisticsRequest request) throws Exception {
        String baseUrl = FETCH_TASK_QUEUE_REAL_TIME_STATISTICS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskQueueRealTimeStatisticsPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/RealTimeStatistics", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchTaskQueueRealTimeStatisticsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskQueueRealTimeStatisticsResponse res = new org.openapis.openapi.models.operations.FetchTaskQueueRealTimeStatisticsResponse() {{
            taskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics.class);
                res.taskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTaskQueueStatisticsResponse fetchTaskQueueStatistics(org.openapis.openapi.models.operations.FetchTaskQueueStatisticsRequest request) throws Exception {
        String baseUrl = FETCH_TASK_QUEUE_STATISTICS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskQueueStatisticsPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/Statistics", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchTaskQueueStatisticsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskQueueStatisticsResponse res = new org.openapis.openapi.models.operations.FetchTaskQueueStatisticsResponse() {{
            taskrouterV1WorkspaceTaskQueueTaskQueueStatistics = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics.class);
                res.taskrouterV1WorkspaceTaskQueueTaskQueueStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTaskReservationResponse fetchTaskReservation(org.openapis.openapi.models.operations.FetchTaskReservationRequest request) throws Exception {
        String baseUrl = FETCH_TASK_RESERVATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskReservationPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskReservationResponse res = new org.openapis.openapi.models.operations.FetchTaskReservationResponse() {{
            taskrouterV1WorkspaceTaskTaskReservation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskTaskReservation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskTaskReservation.class);
                res.taskrouterV1WorkspaceTaskTaskReservation = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkerResponse fetchWorker(org.openapis.openapi.models.operations.FetchWorkerRequest request) throws Exception {
        String baseUrl = FETCH_WORKER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkerPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkerResponse res = new org.openapis.openapi.models.operations.FetchWorkerResponse() {{
            taskrouterV1WorkspaceWorker = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorker out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorker.class);
                res.taskrouterV1WorkspaceWorker = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkerChannelResponse fetchWorkerChannel(org.openapis.openapi.models.operations.FetchWorkerChannelRequest request) throws Exception {
        String baseUrl = FETCH_WORKER_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkerChannelPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkerChannelResponse res = new org.openapis.openapi.models.operations.FetchWorkerChannelResponse() {{
            taskrouterV1WorkspaceWorkerWorkerChannel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerChannel.class);
                res.taskrouterV1WorkspaceWorkerWorkerChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkerInstanceStatisticsResponse fetchWorkerInstanceStatistics(org.openapis.openapi.models.operations.FetchWorkerInstanceStatisticsRequest request) throws Exception {
        String baseUrl = FETCH_WORKER_INSTANCE_STATISTICS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkerInstanceStatisticsPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Statistics", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkerInstanceStatisticsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkerInstanceStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkerInstanceStatisticsResponse() {{
            taskrouterV1WorkspaceWorkerWorkerInstanceStatistics = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerInstanceStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerInstanceStatistics.class);
                res.taskrouterV1WorkspaceWorkerWorkerInstanceStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkerReservationResponse fetchWorkerReservation(org.openapis.openapi.models.operations.FetchWorkerReservationRequest request) throws Exception {
        String baseUrl = FETCH_WORKER_RESERVATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkerReservationPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkerReservationResponse res = new org.openapis.openapi.models.operations.FetchWorkerReservationResponse() {{
            taskrouterV1WorkspaceWorkerWorkerReservation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerReservation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerReservation.class);
                res.taskrouterV1WorkspaceWorkerWorkerReservation = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkerStatisticsResponse fetchWorkerStatistics(org.openapis.openapi.models.operations.FetchWorkerStatisticsRequest request) throws Exception {
        String baseUrl = FETCH_WORKER_STATISTICS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkerStatisticsPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/Statistics", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkerStatisticsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkerStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkerStatisticsResponse() {{
            taskrouterV1WorkspaceWorkerWorkerStatistics = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerStatistics.class);
                res.taskrouterV1WorkspaceWorkerWorkerStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkersCumulativeStatisticsResponse fetchWorkersCumulativeStatistics(org.openapis.openapi.models.operations.FetchWorkersCumulativeStatisticsRequest request) throws Exception {
        String baseUrl = FETCH_WORKERS_CUMULATIVE_STATISTICS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkersCumulativeStatisticsPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/CumulativeStatistics", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkersCumulativeStatisticsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkersCumulativeStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkersCumulativeStatisticsResponse() {{
            taskrouterV1WorkspaceWorkerWorkersCumulativeStatistics = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkersCumulativeStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkersCumulativeStatistics.class);
                res.taskrouterV1WorkspaceWorkerWorkersCumulativeStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkersRealTimeStatisticsResponse fetchWorkersRealTimeStatistics(org.openapis.openapi.models.operations.FetchWorkersRealTimeStatisticsRequest request) throws Exception {
        String baseUrl = FETCH_WORKERS_REAL_TIME_STATISTICS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkersRealTimeStatisticsPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/RealTimeStatistics", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkersRealTimeStatisticsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkersRealTimeStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkersRealTimeStatisticsResponse() {{
            taskrouterV1WorkspaceWorkerWorkersRealTimeStatistics = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.class);
                res.taskrouterV1WorkspaceWorkerWorkersRealTimeStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkflowResponse fetchWorkflow(org.openapis.openapi.models.operations.FetchWorkflowRequest request) throws Exception {
        String baseUrl = FETCH_WORKFLOW_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkflowPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkflowResponse res = new org.openapis.openapi.models.operations.FetchWorkflowResponse() {{
            taskrouterV1WorkspaceWorkflow = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflow out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflow.class);
                res.taskrouterV1WorkspaceWorkflow = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkflowCumulativeStatisticsResponse fetchWorkflowCumulativeStatistics(org.openapis.openapi.models.operations.FetchWorkflowCumulativeStatisticsRequest request) throws Exception {
        String baseUrl = FETCH_WORKFLOW_CUMULATIVE_STATISTICS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkflowCumulativeStatisticsPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/CumulativeStatistics", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkflowCumulativeStatisticsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkflowCumulativeStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkflowCumulativeStatisticsResponse() {{
            taskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics.class);
                res.taskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkflowRealTimeStatisticsResponse fetchWorkflowRealTimeStatistics(org.openapis.openapi.models.operations.FetchWorkflowRealTimeStatisticsRequest request) throws Exception {
        String baseUrl = FETCH_WORKFLOW_REAL_TIME_STATISTICS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkflowRealTimeStatisticsPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/RealTimeStatistics", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkflowRealTimeStatisticsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkflowRealTimeStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkflowRealTimeStatisticsResponse() {{
            taskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics.class);
                res.taskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkflowStatisticsResponse fetchWorkflowStatistics(org.openapis.openapi.models.operations.FetchWorkflowStatisticsRequest request) throws Exception {
        String baseUrl = FETCH_WORKFLOW_STATISTICS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkflowStatisticsPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/Statistics", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkflowStatisticsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkflowStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkflowStatisticsResponse() {{
            taskrouterV1WorkspaceWorkflowWorkflowStatistics = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflowWorkflowStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflowWorkflowStatistics.class);
                res.taskrouterV1WorkspaceWorkflowWorkflowStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkspaceResponse fetchWorkspace(org.openapis.openapi.models.operations.FetchWorkspaceRequest request) throws Exception {
        String baseUrl = FETCH_WORKSPACE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkspacePathParams.class, baseUrl, "/v1/Workspaces/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkspaceResponse res = new org.openapis.openapi.models.operations.FetchWorkspaceResponse() {{
            taskrouterV1Workspace = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1Workspace out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1Workspace.class);
                res.taskrouterV1Workspace = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkspaceCumulativeStatisticsResponse fetchWorkspaceCumulativeStatistics(org.openapis.openapi.models.operations.FetchWorkspaceCumulativeStatisticsRequest request) throws Exception {
        String baseUrl = FETCH_WORKSPACE_CUMULATIVE_STATISTICS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkspaceCumulativeStatisticsPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/CumulativeStatistics", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkspaceCumulativeStatisticsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkspaceCumulativeStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkspaceCumulativeStatisticsResponse() {{
            taskrouterV1WorkspaceWorkspaceCumulativeStatistics = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkspaceCumulativeStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkspaceCumulativeStatistics.class);
                res.taskrouterV1WorkspaceWorkspaceCumulativeStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkspaceRealTimeStatisticsResponse fetchWorkspaceRealTimeStatistics(org.openapis.openapi.models.operations.FetchWorkspaceRealTimeStatisticsRequest request) throws Exception {
        String baseUrl = FETCH_WORKSPACE_REAL_TIME_STATISTICS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkspaceRealTimeStatisticsPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/RealTimeStatistics", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkspaceRealTimeStatisticsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkspaceRealTimeStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkspaceRealTimeStatisticsResponse() {{
            taskrouterV1WorkspaceWorkspaceRealTimeStatistics = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkspaceRealTimeStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkspaceRealTimeStatistics.class);
                res.taskrouterV1WorkspaceWorkspaceRealTimeStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkspaceStatisticsResponse fetchWorkspaceStatistics(org.openapis.openapi.models.operations.FetchWorkspaceStatisticsRequest request) throws Exception {
        String baseUrl = FETCH_WORKSPACE_STATISTICS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkspaceStatisticsPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Statistics", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkspaceStatisticsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkspaceStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkspaceStatisticsResponse() {{
            taskrouterV1WorkspaceWorkspaceStatistics = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkspaceStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkspaceStatistics.class);
                res.taskrouterV1WorkspaceWorkspaceStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListActivityResponse listActivity(org.openapis.openapi.models.operations.ListActivityRequest request) throws Exception {
        String baseUrl = LIST_ACTIVITY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListActivityPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Activities", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListActivityQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListActivityResponse res = new org.openapis.openapi.models.operations.ListActivityResponse() {{
            listActivityResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListActivityListActivityResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListActivityListActivityResponse.class);
                res.listActivityResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListEventResponse listEvent(org.openapis.openapi.models.operations.ListEventRequest request) throws Exception {
        String baseUrl = LIST_EVENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListEventPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Events", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListEventQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListEventResponse res = new org.openapis.openapi.models.operations.ListEventResponse() {{
            listEventResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListEventListEventResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListEventListEventResponse.class);
                res.listEventResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListTaskResponse listTask(org.openapis.openapi.models.operations.ListTaskRequest request) throws Exception {
        String baseUrl = LIST_TASK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListTaskPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Tasks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListTaskQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListTaskResponse res = new org.openapis.openapi.models.operations.ListTaskResponse() {{
            listTaskResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListTaskListTaskResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListTaskListTaskResponse.class);
                res.listTaskResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListTaskChannelResponse listTaskChannel(org.openapis.openapi.models.operations.ListTaskChannelRequest request) throws Exception {
        String baseUrl = LIST_TASK_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListTaskChannelPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskChannels", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListTaskChannelQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListTaskChannelResponse res = new org.openapis.openapi.models.operations.ListTaskChannelResponse() {{
            listTaskChannelResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListTaskChannelListTaskChannelResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListTaskChannelListTaskChannelResponse.class);
                res.listTaskChannelResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListTaskQueueResponse listTaskQueue(org.openapis.openapi.models.operations.ListTaskQueueRequest request) throws Exception {
        String baseUrl = LIST_TASK_QUEUE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListTaskQueuePathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListTaskQueueQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListTaskQueueResponse res = new org.openapis.openapi.models.operations.ListTaskQueueResponse() {{
            listTaskQueueResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListTaskQueueListTaskQueueResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListTaskQueueListTaskQueueResponse.class);
                res.listTaskQueueResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListTaskQueuesStatisticsResponse listTaskQueuesStatistics(org.openapis.openapi.models.operations.ListTaskQueuesStatisticsRequest request) throws Exception {
        String baseUrl = LIST_TASK_QUEUES_STATISTICS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListTaskQueuesStatisticsPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/Statistics", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListTaskQueuesStatisticsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListTaskQueuesStatisticsResponse res = new org.openapis.openapi.models.operations.ListTaskQueuesStatisticsResponse() {{
            listTaskQueuesStatisticsResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListTaskQueuesStatisticsListTaskQueuesStatisticsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListTaskQueuesStatisticsListTaskQueuesStatisticsResponse.class);
                res.listTaskQueuesStatisticsResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListTaskReservationResponse listTaskReservation(org.openapis.openapi.models.operations.ListTaskReservationRequest request) throws Exception {
        String baseUrl = LIST_TASK_RESERVATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListTaskReservationPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListTaskReservationQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListTaskReservationResponse res = new org.openapis.openapi.models.operations.ListTaskReservationResponse() {{
            listTaskReservationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListTaskReservationListTaskReservationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListTaskReservationListTaskReservationResponse.class);
                res.listTaskReservationResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListWorkerResponse listWorker(org.openapis.openapi.models.operations.ListWorkerRequest request) throws Exception {
        String baseUrl = LIST_WORKER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListWorkerPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWorkerQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWorkerResponse res = new org.openapis.openapi.models.operations.ListWorkerResponse() {{
            listWorkerResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWorkerListWorkerResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWorkerListWorkerResponse.class);
                res.listWorkerResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListWorkerChannelResponse listWorkerChannel(org.openapis.openapi.models.operations.ListWorkerChannelRequest request) throws Exception {
        String baseUrl = LIST_WORKER_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListWorkerChannelPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWorkerChannelQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWorkerChannelResponse res = new org.openapis.openapi.models.operations.ListWorkerChannelResponse() {{
            listWorkerChannelResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWorkerChannelListWorkerChannelResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWorkerChannelListWorkerChannelResponse.class);
                res.listWorkerChannelResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListWorkerReservationResponse listWorkerReservation(org.openapis.openapi.models.operations.ListWorkerReservationRequest request) throws Exception {
        String baseUrl = LIST_WORKER_RESERVATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListWorkerReservationPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWorkerReservationQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWorkerReservationResponse res = new org.openapis.openapi.models.operations.ListWorkerReservationResponse() {{
            listWorkerReservationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWorkerReservationListWorkerReservationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWorkerReservationListWorkerReservationResponse.class);
                res.listWorkerReservationResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListWorkflowResponse listWorkflow(org.openapis.openapi.models.operations.ListWorkflowRequest request) throws Exception {
        String baseUrl = LIST_WORKFLOW_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListWorkflowPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workflows", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWorkflowQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWorkflowResponse res = new org.openapis.openapi.models.operations.ListWorkflowResponse() {{
            listWorkflowResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWorkflowListWorkflowResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWorkflowListWorkflowResponse.class);
                res.listWorkflowResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListWorkspaceResponse listWorkspace(org.openapis.openapi.models.operations.ListWorkspaceRequest request) throws Exception {
        String baseUrl = LIST_WORKSPACE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Workspaces");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWorkspaceQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWorkspaceResponse res = new org.openapis.openapi.models.operations.ListWorkspaceResponse() {{
            listWorkspaceResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWorkspaceListWorkspaceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWorkspaceListWorkspaceResponse.class);
                res.listWorkspaceResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateActivityResponse updateActivity(org.openapis.openapi.models.operations.UpdateActivityRequest request) throws Exception {
        String baseUrl = UPDATE_ACTIVITY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateActivityPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateActivityResponse res = new org.openapis.openapi.models.operations.UpdateActivityResponse() {{
            taskrouterV1WorkspaceActivity = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceActivity out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceActivity.class);
                res.taskrouterV1WorkspaceActivity = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateTaskResponse updateTask(org.openapis.openapi.models.operations.UpdateTaskRequest request) throws Exception {
        String baseUrl = UPDATE_TASK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateTaskPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateTaskResponse res = new org.openapis.openapi.models.operations.UpdateTaskResponse() {{
            taskrouterV1WorkspaceTask = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTask out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTask.class);
                res.taskrouterV1WorkspaceTask = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateTaskChannelResponse updateTaskChannel(org.openapis.openapi.models.operations.UpdateTaskChannelRequest request) throws Exception {
        String baseUrl = UPDATE_TASK_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateTaskChannelPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateTaskChannelResponse res = new org.openapis.openapi.models.operations.UpdateTaskChannelResponse() {{
            taskrouterV1WorkspaceTaskChannel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskChannel.class);
                res.taskrouterV1WorkspaceTaskChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateTaskQueueResponse updateTaskQueue(org.openapis.openapi.models.operations.UpdateTaskQueueRequest request) throws Exception {
        String baseUrl = UPDATE_TASK_QUEUE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateTaskQueuePathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateTaskQueueResponse res = new org.openapis.openapi.models.operations.UpdateTaskQueueResponse() {{
            taskrouterV1WorkspaceTaskQueue = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueue out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueue.class);
                res.taskrouterV1WorkspaceTaskQueue = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateTaskReservationResponse updateTaskReservation(org.openapis.openapi.models.operations.UpdateTaskReservationRequest request) throws Exception {
        String baseUrl = UPDATE_TASK_RESERVATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateTaskReservationPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateTaskReservationResponse res = new org.openapis.openapi.models.operations.UpdateTaskReservationResponse() {{
            taskrouterV1WorkspaceTaskTaskReservation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskTaskReservation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskTaskReservation.class);
                res.taskrouterV1WorkspaceTaskTaskReservation = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateWorkerResponse updateWorker(org.openapis.openapi.models.operations.UpdateWorkerRequest request) throws Exception {
        String baseUrl = UPDATE_WORKER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateWorkerPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateWorkerResponse res = new org.openapis.openapi.models.operations.UpdateWorkerResponse() {{
            taskrouterV1WorkspaceWorker = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorker out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorker.class);
                res.taskrouterV1WorkspaceWorker = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateWorkerChannelResponse updateWorkerChannel(org.openapis.openapi.models.operations.UpdateWorkerChannelRequest request) throws Exception {
        String baseUrl = UPDATE_WORKER_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateWorkerChannelPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateWorkerChannelResponse res = new org.openapis.openapi.models.operations.UpdateWorkerChannelResponse() {{
            taskrouterV1WorkspaceWorkerWorkerChannel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerChannel.class);
                res.taskrouterV1WorkspaceWorkerWorkerChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateWorkerReservationResponse updateWorkerReservation(org.openapis.openapi.models.operations.UpdateWorkerReservationRequest request) throws Exception {
        String baseUrl = UPDATE_WORKER_RESERVATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateWorkerReservationPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateWorkerReservationResponse res = new org.openapis.openapi.models.operations.UpdateWorkerReservationResponse() {{
            taskrouterV1WorkspaceWorkerWorkerReservation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerReservation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerReservation.class);
                res.taskrouterV1WorkspaceWorkerWorkerReservation = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateWorkflowResponse updateWorkflow(org.openapis.openapi.models.operations.UpdateWorkflowRequest request) throws Exception {
        String baseUrl = UPDATE_WORKFLOW_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateWorkflowPathParams.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateWorkflowResponse res = new org.openapis.openapi.models.operations.UpdateWorkflowResponse() {{
            taskrouterV1WorkspaceWorkflow = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflow out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflow.class);
                res.taskrouterV1WorkspaceWorkflow = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateWorkspaceResponse updateWorkspace(org.openapis.openapi.models.operations.UpdateWorkspaceRequest request) throws Exception {
        String baseUrl = UPDATE_WORKSPACE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateWorkspacePathParams.class, baseUrl, "/v1/Workspaces/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateWorkspaceResponse res = new org.openapis.openapi.models.operations.UpdateWorkspaceResponse() {{
            taskrouterV1Workspace = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1Workspace out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1Workspace.class);
                res.taskrouterV1Workspace = out;
            }
        }

        return res;
    }
}