// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type StoresCreateSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type StoresCreateRequestBodyIntuneDetailsAppCategory struct {
	// display name for the app category
	Name *string `json:"name,omitempty"`
}

type StoresCreateRequestBodyIntuneDetailsSecretJSON struct {
	// the id token of user
	IDToken *string `json:"id_token,omitempty"`
	// the refresh token for user
	RefreshToken *string `json:"refresh_token,omitempty"`
	// the expiry of refresh token
	RefreshTokenExpiry *string `json:"refresh_token_expiry,omitempty"`
}

type StoresCreateRequestBodyIntuneDetailsTargetAudience struct {
	// display name for the target audience/group
	Name *string `json:"name,omitempty"`
}

type StoresCreateRequestBodyIntuneDetails struct {
	AppCategory    *StoresCreateRequestBodyIntuneDetailsAppCategory    `json:"app_category,omitempty"`
	SecretJSON     *StoresCreateRequestBodyIntuneDetailsSecretJSON     `json:"secret_json,omitempty"`
	TargetAudience *StoresCreateRequestBodyIntuneDetailsTargetAudience `json:"target_audience,omitempty"`
	// tenant id of the intune store
	TenantID *string `json:"tenant_id,omitempty"`
}

// StoresCreateRequestBodyTrackEnum - track of the store. Can be production, alpha & beta for googleplay. Can be production, testflight-internal & testflight-external for Apple Store.
type StoresCreateRequestBodyTrackEnum string

const (
	StoresCreateRequestBodyTrackEnumProduction         StoresCreateRequestBodyTrackEnum = "production"
	StoresCreateRequestBodyTrackEnumAlpha              StoresCreateRequestBodyTrackEnum = "alpha"
	StoresCreateRequestBodyTrackEnumBeta               StoresCreateRequestBodyTrackEnum = "beta"
	StoresCreateRequestBodyTrackEnumTestflightInternal StoresCreateRequestBodyTrackEnum = "testflight-internal"
	StoresCreateRequestBodyTrackEnumTestflightExternal StoresCreateRequestBodyTrackEnum = "testflight-external"
)

func (e *StoresCreateRequestBodyTrackEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "production":
		fallthrough
	case "alpha":
		fallthrough
	case "beta":
		fallthrough
	case "testflight-internal":
		fallthrough
	case "testflight-external":
		*e = StoresCreateRequestBodyTrackEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoresCreateRequestBodyTrackEnum: %s", s)
	}
}

// StoresCreateRequestBodyTypeEnum - store Type
type StoresCreateRequestBodyTypeEnum string

const (
	StoresCreateRequestBodyTypeEnumGoogleplay StoresCreateRequestBodyTypeEnum = "googleplay"
	StoresCreateRequestBodyTypeEnumApple      StoresCreateRequestBodyTypeEnum = "apple"
	StoresCreateRequestBodyTypeEnumIntune     StoresCreateRequestBodyTypeEnum = "intune"
)

func (e *StoresCreateRequestBodyTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "googleplay":
		fallthrough
	case "apple":
		fallthrough
	case "intune":
		*e = StoresCreateRequestBodyTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoresCreateRequestBodyTypeEnum: %s", s)
	}
}

// StoresCreateRequestBody - ExternalStoreRequest
type StoresCreateRequestBody struct {
	IntuneDetails *StoresCreateRequestBodyIntuneDetails `json:"intune_details,omitempty"`
	// name of the store. In case of googleplay, and Apple store this is fixed to Production.
	Name *string `json:"name,omitempty"`
	// Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.
	ServiceConnectionID *string `json:"service_connection_id,omitempty"`
	// track of the store. Can be production, alpha & beta for googleplay. Can be production, testflight-internal & testflight-external for Apple Store.
	Track *StoresCreateRequestBodyTrackEnum `json:"track,omitempty"`
	// store Type
	Type *StoresCreateRequestBodyTypeEnum `json:"type,omitempty"`
}

type StoresCreateRequest struct {
	// The store request
	RequestBody StoresCreateRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type StoresCreateDefaultApplicationJSONCodeEnum string

const (
	StoresCreateDefaultApplicationJSONCodeEnumBadRequest          StoresCreateDefaultApplicationJSONCodeEnum = "BadRequest"
	StoresCreateDefaultApplicationJSONCodeEnumConflict            StoresCreateDefaultApplicationJSONCodeEnum = "Conflict"
	StoresCreateDefaultApplicationJSONCodeEnumNotAcceptable       StoresCreateDefaultApplicationJSONCodeEnum = "NotAcceptable"
	StoresCreateDefaultApplicationJSONCodeEnumNotFound            StoresCreateDefaultApplicationJSONCodeEnum = "NotFound"
	StoresCreateDefaultApplicationJSONCodeEnumInternalServerError StoresCreateDefaultApplicationJSONCodeEnum = "InternalServerError"
	StoresCreateDefaultApplicationJSONCodeEnumUnauthorized        StoresCreateDefaultApplicationJSONCodeEnum = "Unauthorized"
	StoresCreateDefaultApplicationJSONCodeEnumTooManyRequests     StoresCreateDefaultApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *StoresCreateDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = StoresCreateDefaultApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoresCreateDefaultApplicationJSONCodeEnum: %s", s)
	}
}

// StoresCreateDefaultApplicationJSON - Error
type StoresCreateDefaultApplicationJSON struct {
	Code    StoresCreateDefaultApplicationJSONCodeEnum `json:"code"`
	Message string                                     `json:"message"`
}

type StoresCreate201ApplicationJSONIntuneDetailsAppCategory struct {
	// ID for the category.
	ID *string `json:"id,omitempty"`
	// display name for the app category
	Name *string `json:"name,omitempty"`
}

type StoresCreate201ApplicationJSONIntuneDetailsTargetAudience struct {
	// ID for the target audience/group.
	ID *string `json:"id,omitempty"`
	// display name for the target audience/group
	Name *string `json:"name,omitempty"`
}

// StoresCreate201ApplicationJSONIntuneDetails - Store details for intune
type StoresCreate201ApplicationJSONIntuneDetails struct {
	AppCategory    *StoresCreate201ApplicationJSONIntuneDetailsAppCategory    `json:"app_category,omitempty"`
	TargetAudience *StoresCreate201ApplicationJSONIntuneDetailsTargetAudience `json:"target_audience,omitempty"`
}

// StoresCreate201ApplicationJSONTrackEnum - Store track
type StoresCreate201ApplicationJSONTrackEnum string

const (
	StoresCreate201ApplicationJSONTrackEnumProduction         StoresCreate201ApplicationJSONTrackEnum = "production"
	StoresCreate201ApplicationJSONTrackEnumAlpha              StoresCreate201ApplicationJSONTrackEnum = "alpha"
	StoresCreate201ApplicationJSONTrackEnumBeta               StoresCreate201ApplicationJSONTrackEnum = "beta"
	StoresCreate201ApplicationJSONTrackEnumTestflightInternal StoresCreate201ApplicationJSONTrackEnum = "testflight-internal"
	StoresCreate201ApplicationJSONTrackEnumTestflightExternal StoresCreate201ApplicationJSONTrackEnum = "testflight-external"
)

func (e *StoresCreate201ApplicationJSONTrackEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "production":
		fallthrough
	case "alpha":
		fallthrough
	case "beta":
		fallthrough
	case "testflight-internal":
		fallthrough
	case "testflight-external":
		*e = StoresCreate201ApplicationJSONTrackEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoresCreate201ApplicationJSONTrackEnum: %s", s)
	}
}

// StoresCreate201ApplicationJSON - ExternalStoreResponse
type StoresCreate201ApplicationJSON struct {
	// The ID of the principal that created the store.
	CreatedBy *string `json:"created_by,omitempty"`
	// The type of the principal that created the store.
	CreatedByPrincipalType *string `json:"created_by_principal_type,omitempty"`
	// Store id
	ID *string `json:"id,omitempty"`
	// Store details for intune
	IntuneDetails *StoresCreate201ApplicationJSONIntuneDetails `json:"intune_details,omitempty"`
	// Store Name
	Name *string `json:"name,omitempty"`
	// Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.
	ServiceConnectionID *string `json:"service_connection_id,omitempty"`
	// Store track
	Track *StoresCreate201ApplicationJSONTrackEnum `json:"track,omitempty"`
	// Store Type
	Type *string `json:"type,omitempty"`
}

type StoresCreateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	StoresCreate201ApplicationJSONObject *StoresCreate201ApplicationJSON
	// Error
	StoresCreateDefaultApplicationJSONObject *StoresCreateDefaultApplicationJSON
}
