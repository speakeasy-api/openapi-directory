"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import databaseresource as shared_databaseresource
from ..shared import datacellsfilterresource as shared_datacellsfilterresource
from ..shared import datalocationresource as shared_datalocationresource
from ..shared import getresourcelftagsresponse as shared_getresourcelftagsresponse
from ..shared import lftagkeyresource as shared_lftagkeyresource
from ..shared import lftagpolicyresource as shared_lftagpolicyresource
from ..shared import tableresource as shared_tableresource
from ..shared import tablewithcolumnsresource as shared_tablewithcolumnsresource
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetResourceLFTagsRequestBodyResource:
    r"""A structure for the resource."""
    
    catalog: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Catalog'), 'exclude': lambda f: f is None }})  
    database: Optional[shared_databaseresource.DatabaseResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Database'), 'exclude': lambda f: f is None }})  
    data_cells_filter: Optional[shared_datacellsfilterresource.DataCellsFilterResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataCellsFilter'), 'exclude': lambda f: f is None }})  
    data_location: Optional[shared_datalocationresource.DataLocationResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataLocation'), 'exclude': lambda f: f is None }})  
    lf_tag: Optional[shared_lftagkeyresource.LFTagKeyResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LFTag'), 'exclude': lambda f: f is None }})  
    lf_tag_policy: Optional[shared_lftagpolicyresource.LFTagPolicyResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LFTagPolicy'), 'exclude': lambda f: f is None }})  
    table: Optional[shared_tableresource.TableResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Table'), 'exclude': lambda f: f is None }})  
    table_with_columns: Optional[shared_tablewithcolumnsresource.TableWithColumnsResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableWithColumns'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetResourceLFTagsRequestBody:
    
    resource: GetResourceLFTagsRequestBodyResource = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Resource') }})
    r"""A structure for the resource."""  
    catalog_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CatalogId'), 'exclude': lambda f: f is None }})
    r"""The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment."""  
    show_assigned_lf_tags: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShowAssignedLFTags'), 'exclude': lambda f: f is None }})
    r"""Indicates whether to show the assigned LF-tags."""  
    

@dataclasses.dataclass
class GetResourceLFTagsRequest:
    
    request_body: GetResourceLFTagsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetResourceLFTagsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    entity_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EntityNotFoundException"""  
    get_resource_lf_tags_response: Optional[shared_getresourcelftagsresponse.GetResourceLFTagsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    glue_encryption_exception: Optional[Any] = dataclasses.field(default=None)
    r"""GlueEncryptionException"""  
    internal_service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServiceException"""  
    invalid_input_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidInputException"""  
    operation_timeout_exception: Optional[Any] = dataclasses.field(default=None)
    r"""OperationTimeoutException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    