// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ProjectsAddCollaboratorRequestBodyPermissionEnum - The permission to grant the collaborator.
type ProjectsAddCollaboratorRequestBodyPermissionEnum string

const (
	ProjectsAddCollaboratorRequestBodyPermissionEnumRead  ProjectsAddCollaboratorRequestBodyPermissionEnum = "read"
	ProjectsAddCollaboratorRequestBodyPermissionEnumWrite ProjectsAddCollaboratorRequestBodyPermissionEnum = "write"
	ProjectsAddCollaboratorRequestBodyPermissionEnumAdmin ProjectsAddCollaboratorRequestBodyPermissionEnum = "admin"
)

func (e *ProjectsAddCollaboratorRequestBodyPermissionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		fallthrough
	case "admin":
		*e = ProjectsAddCollaboratorRequestBodyPermissionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectsAddCollaboratorRequestBodyPermissionEnum: %s", s)
	}
}

type ProjectsAddCollaboratorRequestBody struct {
	// The permission to grant the collaborator.
	Permission *ProjectsAddCollaboratorRequestBodyPermissionEnum `json:"permission,omitempty"`
}

type ProjectsAddCollaboratorRequest struct {
	RequestBody *ProjectsAddCollaboratorRequestBody `request:"mediaType=application/json"`
	// The unique identifier of the project.
	ProjectID int64 `pathParam:"style=simple,explode=false,name=project_id"`
	// The handle for the GitHub user account.
	Username string `pathParam:"style=simple,explode=false,name=username"`
}

type ProjectsAddCollaboratorResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Requires authentication
	BasicError *shared.BasicError
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
