<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ReachabilityDetails - Results of the configuration analysis from the last run of the test.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ReachabilityDetails
{
    /**
     * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Status $error
     */
	#[\JMS\Serializer\Annotation\SerializedName('error')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Status')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Status $error = null;
    
    /**
     * The overall result of the test's configuration analysis.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ReachabilityDetailsResultEnum $result
     */
	#[\JMS\Serializer\Annotation\SerializedName('result')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ReachabilityDetailsResultEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ReachabilityDetailsResultEnum $result = null;
    
    /**
     * Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Trace> $traces
     */
	#[\JMS\Serializer\Annotation\SerializedName('traces')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Trace>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $traces = null;
    
    /**
     * The time of the configuration analysis.
     * 
     * @var ?string $verifyTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('verifyTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $verifyTime = null;
    
	public function __construct()
	{
		$this->error = null;
		$this->result = null;
		$this->traces = null;
		$this->verifyTime = null;
	}
}
