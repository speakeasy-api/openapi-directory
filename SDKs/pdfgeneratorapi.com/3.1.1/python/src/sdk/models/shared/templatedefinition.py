"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import component as shared_component
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TemplateDefinitionDataSettings:
    r"""Defines filter and sort option for root data set."""
    
    filter_by: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filterBy'), 'exclude': lambda f: f is None }})  
    sort_by: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortBy'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TemplateDefinitionEditor:
    r"""Configuration preferences for the editor"""
    
    height_multiplier: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('heightMultiplier'), 'exclude': lambda f: f is None }})  
    
class TemplateDefinitionLayoutFormatEnum(str, Enum):
    r"""Defines template page size"""
    A4 = 'A4'
    LETTER = 'letter'
    CUSTOM = 'custom'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TemplateDefinitionLayoutMargins:
    r"""Page margins in units"""
    
    bottom: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bottom'), 'exclude': lambda f: f is None }})  
    left: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('left'), 'exclude': lambda f: f is None }})  
    right: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('right'), 'exclude': lambda f: f is None }})  
    top: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('top'), 'exclude': lambda f: f is None }})  
    
class TemplateDefinitionLayoutOrientationEnum(str, Enum):
    r"""Page orientation"""
    PORTRAIT = 'portrait'
    LANDSCAPE = 'landscape'

class TemplateDefinitionLayoutRepeatLayoutFormatEnum(str, Enum):
    r"""Defines template page size"""
    A4 = 'A4'
    LETTER = 'letter'
    CUSTOM = 'custom'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TemplateDefinitionLayoutRepeatLayout:
    r"""Defines page size if layout is repeated on the page e.g sheet labels"""
    
    format: Optional[TemplateDefinitionLayoutRepeatLayoutFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format'), 'exclude': lambda f: f is None }})
    r"""Defines template page size"""  
    height: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    r"""Page height in units"""  
    width: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    r"""Page width in units"""  
    
class TemplateDefinitionLayoutRotationEnum(str, Enum):
    r"""Page rotation in degrees"""
    ZERO = '0'
    NINETY = '90'
    ONE_HUNDRED_AND_EIGHTY = '180'
    TWO_HUNDRED_AND_SEVENTY = '270'

class TemplateDefinitionLayoutUnitEnum(str, Enum):
    r"""Measure unit"""
    CM = 'cm'
    IN = 'in'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TemplateDefinitionLayout:
    r"""Defines template layout (e.g page format, margins)."""
    
    empty_labels: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emptyLabels'), 'exclude': lambda f: f is None }})
    r"""Defines how many pages or labels should be empty"""  
    format: Optional[TemplateDefinitionLayoutFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format'), 'exclude': lambda f: f is None }})
    r"""Defines template page size"""  
    height: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    r"""Page height in units"""  
    margins: Optional[TemplateDefinitionLayoutMargins] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('margins'), 'exclude': lambda f: f is None }})
    r"""Page margins in units"""  
    orientation: Optional[TemplateDefinitionLayoutOrientationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orientation'), 'exclude': lambda f: f is None }})
    r"""Page orientation"""  
    repeat_layout: Optional[TemplateDefinitionLayoutRepeatLayout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repeatLayout'), 'exclude': lambda f: f is None }})
    r"""Defines page size if layout is repeated on the page e.g sheet labels"""  
    rotation: Optional[TemplateDefinitionLayoutRotationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rotation'), 'exclude': lambda f: f is None }})
    r"""Page rotation in degrees"""  
    unit: Optional[TemplateDefinitionLayoutUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})
    r"""Measure unit"""  
    width: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    r"""Page width in units"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TemplateDefinitionPagesMargins:
    
    bottom: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bottom'), 'exclude': lambda f: f is None }})
    r"""Page or label margin from bottom"""  
    right: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('right'), 'exclude': lambda f: f is None }})
    r"""Page or label margin from right"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TemplateDefinitionPages:
    
    components: Optional[list[shared_component.Component]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('components'), 'exclude': lambda f: f is None }})  
    height: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    r"""Page height in units"""  
    margins: Optional[TemplateDefinitionPagesMargins] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('margins'), 'exclude': lambda f: f is None }})  
    width: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    r"""Page width in units"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TemplateDefinition:
    
    data_settings: Optional[TemplateDefinitionDataSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSettings'), 'exclude': lambda f: f is None }})
    r"""Defines filter and sort option for root data set."""  
    editor: Optional[TemplateDefinitionEditor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('editor'), 'exclude': lambda f: f is None }})
    r"""Configuration preferences for the editor"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier"""  
    is_draft: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDraft'), 'exclude': lambda f: f is None }})
    r"""Indicates if the template is a draft or published."""  
    layout: Optional[TemplateDefinitionLayout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('layout'), 'exclude': lambda f: f is None }})
    r"""Defines template layout (e.g page format, margins)."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Template name"""  
    pages: Optional[list[TemplateDefinitionPages]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pages'), 'exclude': lambda f: f is None }})
    r"""Defines page or label size, margins and components on page or label"""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""A list of tags assigned to a template"""  
    