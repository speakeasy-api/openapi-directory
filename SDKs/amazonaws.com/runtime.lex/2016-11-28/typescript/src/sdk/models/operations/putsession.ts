/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Describes the next action that the bot should take in its interaction with the user and provides information about the context in which the action takes place. Use the <code>DialogAction</code> data type to set the interaction to a specific state, or to return the interaction to a previous state.
 */
export class PutSessionRequestBodyDialogAction extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "fulfillmentState" })
  fulfillmentState?: shared.FulfillmentStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "intentName" })
  intentName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "messageFormat" })
  messageFormat?: shared.MessageFormatTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "slotToElicit" })
  slotToElicit?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "slots" })
  slots?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: shared.DialogActionTypeEnum;
}

export class PutSessionRequestBody extends SpeakeasyBase {
  /**
   * <p>A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,</p> <p>If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.</p>
   */
  @SpeakeasyMetadata({ elemType: shared.ActiveContext })
  @Expose({ name: "activeContexts" })
  @Type(() => shared.ActiveContext)
  activeContexts?: shared.ActiveContext[];

  /**
   * Describes the next action that the bot should take in its interaction with the user and provides information about the context in which the action takes place. Use the <code>DialogAction</code> data type to set the interaction to a specific state, or to return the interaction to a previous state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dialogAction" })
  @Type(() => PutSessionRequestBodyDialogAction)
  dialogAction?: PutSessionRequestBodyDialogAction;

  /**
   * <p>A summary of the recent intents for the bot. You can use the intent summary view to set a checkpoint label on an intent and modify attributes of intents. You can also use it to remove or add intent summary objects to the list.</p> <p>An intent that you modify or add to the list must make sense for the bot. For example, the intent name must be valid for the bot. You must provide valid values for:</p> <ul> <li> <p> <code>intentName</code> </p> </li> <li> <p>slot names</p> </li> <li> <p> <code>slotToElict</code> </p> </li> </ul> <p>If you send the <code>recentIntentSummaryView</code> parameter in a <code>PutSession</code> request, the contents of the new summary view replaces the old summary view. For example, if a <code>GetSession</code> request returns three intents in the summary view and you call <code>PutSession</code> with one intent in the summary view, the next call to <code>GetSession</code> will only return one intent.</p>
   */
  @SpeakeasyMetadata({ elemType: shared.IntentSummary })
  @Expose({ name: "recentIntentSummaryView" })
  @Type(() => shared.IntentSummary)
  recentIntentSummaryView?: shared.IntentSummary[];

  /**
   * Map of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sessionAttributes" })
  sessionAttributes?: Record<string, string>;
}

export class PutSessionRequest extends SpeakeasyBase {
  /**
   * <p>The message that Amazon Lex returns in the response can be either text or speech based depending on the value of this field.</p> <ul> <li> <p>If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex returns text in the response.</p> </li> <li> <p>If the value begins with <code>audio/</code>, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech in the configuration that you specify. For example, if you specify <code>audio/mpeg</code> as the value, Amazon Lex returns speech in the MPEG format.</p> </li> <li> <p>If the value is <code>audio/pcm</code>, the speech is returned as <code>audio/pcm</code> in 16-bit, little endian format.</p> </li> <li> <p>The following are the accepted values:</p> <ul> <li> <p> <code>audio/mpeg</code> </p> </li> <li> <p> <code>audio/ogg</code> </p> </li> <li> <p> <code>audio/pcm</code> </p> </li> <li> <p> <code>audio/*</code> (defaults to mpeg)</p> </li> <li> <p> <code>text/plain; charset=utf-8</code> </p> </li> </ul> </li> </ul>
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=Accept" })
  accept?: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: PutSessionRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The alias in use for the bot that contains the session data.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=botAlias",
  })
  botAlias: string;

  /**
   * The name of the bot that contains the session data.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=botName",
  })
  botName: string;

  /**
   * The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=userId",
  })
  userId: string;
}

export class PutSessionResponse extends SpeakeasyBase {
  /**
   * BadGatewayException
   */
  @SpeakeasyMetadata()
  badGatewayException?: any;

  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * DependencyFailedException
   */
  @SpeakeasyMetadata()
  dependencyFailedException?: any;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * NotAcceptableException
   */
  @SpeakeasyMetadata()
  notAcceptableException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  putSessionResponse?: shared.PutSessionResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
