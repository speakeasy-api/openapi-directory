"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import presidentialbysizepage as shared_presidentialbysizepage
from enum import Enum
from typing import Optional

class GetPresidentialContributionsBySizeSizeEnum(str, Enum):
    ZERO = '0'
    TWO_HUNDRED = '200'
    FIVE_HUNDRED = '500'
    ONE_THOUSAND = '1000'
    TWO_THOUSAND = '2000'


@dataclasses.dataclass
class GetPresidentialContributionsBySizeRequest:
    
    api_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""API key for https://api.data.gov. Get one at https://api.data.gov/signup."""  
    candidate_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'candidate_id', 'style': 'form', 'explode': True }})
    r"""A unique identifier assigned to each candidate registered with the FEC.
    If a person runs for several offices, that person will have separate candidate IDs for each office.
      -P00000001    All candidates
      -P00000002    Democrasts
      -P00000003    Republicans
    """  
    election_year: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'election_year', 'style': 'form', 'explode': True }})
    r"""Year of election"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""For paginating through results, starting at page 1"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results returned per page. Defaults to 20."""  
    size: Optional[list[GetPresidentialContributionsBySizeSizeEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'size', 'style': 'form', 'explode': True }})
    r"""The total all contributions in the following ranges:
    ```
      -0    $200 and under
      -200  $200.01 - $499.99
      -500  $500 - $999.99
      -1000 $1000 - $1999.99
      -2000 $2000 +
    ```
    Unitemized contributions are included in the `0` category.
    """  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Provide a field to sort by. Use `-` for descending order."""  
    sort_hide_null: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_hide_null', 'style': 'form', 'explode': True }})
    r"""Hide null values on sorted column(s)."""  
    sort_null_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_null_only', 'style': 'form', 'explode': True }})
    r"""Toggle that filters out all rows having sort column that is non-null"""  
    sort_nulls_last: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_nulls_last', 'style': 'form', 'explode': True }})
    r"""Toggle that sorts null values last"""  
    

@dataclasses.dataclass
class GetPresidentialContributionsBySizeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    presidential_by_size_page: Optional[shared_presidentialbysizepage.PresidentialBySizePage] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    