"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ClientInvoices:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_payment(self, request: operations.CreatePaymentRequest) -> operations.CreatePaymentResponse:
        r"""Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated.
        Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreatePaymentRequest, base_url, '/accounting/customers/invoices/{invoiceId}/payments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payment_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_1(self, request: shared.CustomerInvoiceCreateDTO) -> operations.Create1Response:
        r"""Creates a new invoice.
        Creates a new invoice from tasks. Tasks are grouped by client and currency, therefore multiple invoices can be created.If any of the tasks cannot be invoiced (ie. it is already invoiced, not invoiceable, not associated with a project) then an error is reported.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounting/customers/invoices'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Create1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerInvoiceCreateResultDTO])
                res.customer_invoice_create_result_dto = out

        return res

    def delete_1(self, request: operations.Delete1Request) -> operations.Delete1Response:
        r"""Removes a client invoice.
        Removes a client invoice.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Delete1Request, base_url, '/accounting/customers/invoices/{invoiceId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Delete1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_2(self, request: operations.Delete2Request) -> operations.Delete2Response:
        r"""Removes a customer payment.
        Removes a customer payment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Delete2Request, base_url, '/accounting/customers/payments/{paymentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Delete2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def download_documents(self, request: shared.DownloadDocumentsRequestDTO) -> operations.DownloadDocumentsResponse:
        r"""Generates client invoices' documents.
        Generates client invoices' documents.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounting/customers/invoices/documents'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadDocumentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.URLResultDTO])
                res.url_result_dto = out

        return res

    def duplicate(self, request: operations.DuplicateRequest) -> operations.DuplicateResponse:
        r"""Duplicate client invoice.
        Duplicate client invoice.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DuplicateRequest, base_url, '/accounting/customers/invoices/{invoiceId}/duplicate', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DuplicateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerInvoiceDTO])
                res.customer_invoice_dto = out

        return res

    def duplicate_as_pro_forma(self, request: operations.DuplicateAsProFormaRequest) -> operations.DuplicateAsProFormaResponse:
        r"""Duplicate client invoice as pro forma.
        Duplicate client invoice as pro forma.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DuplicateAsProFormaRequest, base_url, '/accounting/customers/invoices/{invoiceId}/duplicate/proForma', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DuplicateAsProFormaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerInvoiceDTO])
                res.customer_invoice_dto = out

        return res

    def get_all(self, request: operations.GetAllRequest) -> operations.GetAllResponse:
        r"""Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
        Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounting/customers/invoices'
        
        query_params = utils.get_query_params(operations.GetAllRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomerInvoiceDTO]])
                res.customer_invoice_dtos = out

        return res

    def get_all_ids(self, request: operations.GetAllIdsRequest) -> operations.GetAllIdsResponse:
        r"""Returns client invoices' internal identifiers.
        Returns client invoices' internal identifiers.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounting/customers/invoices/ids'
        
        query_params = utils.get_query_params(operations.GetAllIdsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllIdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[int]])
                res.get_all_ids_default_application_vnd_xtrf_v1_plus_json_int32_integers = out

        return res

    def get_by_id(self, request: operations.GetByIDRequest) -> operations.GetByIDResponse:
        r"""Returns client invoice details.
        Returns client invoice details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetByIDRequest, base_url, '/accounting/customers/invoices/{invoiceId}', request)
        
        query_params = utils.get_query_params(operations.GetByIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerInvoiceDTO])
                res.customer_invoice_dto = out

        return res

    def get_dates(self, request: operations.GetDatesRequest) -> operations.GetDatesResponse:
        r"""Returns dates of a given client invoice.
        Returns dates of a given client invoice.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDatesRequest, base_url, '/accounting/customers/invoices/{invoiceId}/dates', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerInvoiceDatesDTO])
                res.customer_invoice_dates_dto = out

        return res

    def get_document(self, request: operations.GetDocumentRequest) -> operations.GetDocumentResponse:
        r"""Generates client invoice document (PDF).
        Generates client invoice document (PDF).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDocumentRequest, base_url, '/accounting/customers/invoices/{invoiceId}/document', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.URLResultDTO])
                res.url_result_dto = out

        return res

    def get_payment_terms(self, request: operations.GetPaymentTermsRequest) -> operations.GetPaymentTermsResponse:
        r"""Returns payment terms of a given client invoice.
        Returns payment terms of a given client invoice.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPaymentTermsRequest, base_url, '/accounting/customers/invoices/{invoiceId}/paymentTerms', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaymentTermsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentTermsDTO])
                res.payment_terms_dto = out

        return res

    def get_payments(self, request: operations.GetPaymentsRequest) -> operations.GetPaymentsResponse:
        r"""Returns all payments for the client invoice.
        Returns all payments for the client invoice.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPaymentsRequest, base_url, '/accounting/customers/invoices/{invoiceId}/payments', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaymentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PaymentDTO]])
                res.payment_dtos = out

        return res

    def send_reminder(self, request: operations.SendReminderRequest) -> operations.SendReminderResponse:
        r"""Sends reminder.
        Sends reminder.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SendReminderRequest, base_url, '/accounting/customers/invoices/{invoiceId}/sendReminder', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendReminderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def send_reminders(self, request: shared.SendRemindersRequestDTO) -> operations.SendRemindersResponse:
        r"""Sends reminders. Returns number of sent e-mails.
        Sends reminders. Returns number of sent e-mails.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounting/customers/invoices/sendReminders'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendRemindersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SendRemindersResponseDTO])
                res.send_reminders_response_dto = out

        return res

    