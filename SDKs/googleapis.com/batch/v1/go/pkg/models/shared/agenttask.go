// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AgentTaskIntendedStateEnum - The intended state of the task.
type AgentTaskIntendedStateEnum string

const (
	AgentTaskIntendedStateEnumIntendedStateUnspecified AgentTaskIntendedStateEnum = "INTENDED_STATE_UNSPECIFIED"
	AgentTaskIntendedStateEnumAssigned                 AgentTaskIntendedStateEnum = "ASSIGNED"
	AgentTaskIntendedStateEnumCancelled                AgentTaskIntendedStateEnum = "CANCELLED"
	AgentTaskIntendedStateEnumDeleted                  AgentTaskIntendedStateEnum = "DELETED"
)

func (e *AgentTaskIntendedStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INTENDED_STATE_UNSPECIFIED":
		fallthrough
	case "ASSIGNED":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "DELETED":
		*e = AgentTaskIntendedStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AgentTaskIntendedStateEnum: %s", s)
	}
}

// AgentTask - TODO(b/182501497) The message needs to be redefined when the Agent API server updates data in storage per the backend design.
type AgentTask struct {
	// The intended state of the task.
	IntendedState *AgentTaskIntendedStateEnum `json:"intendedState,omitempty"`
	// The highest barrier reached by all tasks in the task's TaskGroup.
	ReachedBarrier *string `json:"reachedBarrier,omitempty"`
	// Spec of a task
	Spec *TaskSpec `json:"spec,omitempty"`
	// Status of a task
	Status *TaskStatus `json:"status,omitempty"`
	// Task name.
	Task *string `json:"task,omitempty"`
}
