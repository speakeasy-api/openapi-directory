/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Proto2FieldDescriptorProto - Describes a field within a message.
 */
public class Proto2FieldDescriptorProto {
    /**
     * For numeric types, contains the original text representation of the value. For booleans, "true" or "false". For strings, contains the default text contents (not escaped in any way). For bytes, contains the C escaped value. All bytes &gt;= 128 are escaped.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultValue")
    public String defaultValue;
    public Proto2FieldDescriptorProto withDefaultValue(String defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    }
    
    /**
     * JSON name of this field. The value is set by protocol compiler. If the user has set a "json_name" option on this field, that option's value will be used. Otherwise, it's deduced from the field's name by converting it to camelCase.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jsonName")
    public String jsonName;
    public Proto2FieldDescriptorProto withJsonName(String jsonName) {
        this.jsonName = jsonName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    public Proto2FieldDescriptorProtoLabelEnum label;
    public Proto2FieldDescriptorProto withLabel(Proto2FieldDescriptorProtoLabelEnum label) {
        this.label = label;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Proto2FieldDescriptorProto withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public Integer number;
    public Proto2FieldDescriptorProto withNumber(Integer number) {
        this.number = number;
        return this;
    }
    
    /**
     * If set, gives the index of a oneof in the containing type's oneof_decl list. This field is a member of that oneof.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oneofIndex")
    public Integer oneofIndex;
    public Proto2FieldDescriptorProto withOneofIndex(Integer oneofIndex) {
        this.oneofIndex = oneofIndex;
        return this;
    }
    
    /**
     * If true, this is a proto3 "optional". When a proto3 field is optional, it tracks presence regardless of field type. When proto3_optional is true, this field must be belong to a oneof to signal to old proto3 clients that presence is tracked for this field. This oneof is known as a "synthetic" oneof, and this field must be its sole member (each proto3 optional field gets its own synthetic oneof). Synthetic oneofs exist in the descriptor only, and do not generate any API. Synthetic oneofs must be ordered after all "real" oneofs. For message fields, proto3_optional doesn't create any semantic change, since non-repeated message fields always track presence. However it still indicates the semantic detail of whether the user wrote "optional" or not. This can be useful for round-tripping the .proto file. For consistency we give message fields a synthetic oneof also, even though it is not required to track presence. This is especially important because the parser can't tell if a field is a message or an enum, so it must always create a synthetic oneof. Proto2 optional fields do not set this flag, because they already indicate optional with `LABEL_OPTIONAL`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proto3Optional")
    public Boolean proto3Optional;
    public Proto2FieldDescriptorProto withProto3Optional(Boolean proto3Optional) {
        this.proto3Optional = proto3Optional;
        return this;
    }
    
    /**
     * If type_name is set, this need not be set. If both this and type_name are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public Proto2FieldDescriptorProtoTypeEnum type;
    public Proto2FieldDescriptorProto withType(Proto2FieldDescriptorProtoTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * For message and enum types, this is the name of the type. If the name starts with a '.', it is fully-qualified. Otherwise, C++-like scoping rules are used to find the type (i.e. first the nested types within this message are searched, then within the parent, on up to the root namespace).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("typeName")
    public String typeName;
    public Proto2FieldDescriptorProto withTypeName(String typeName) {
        this.typeName = typeName;
        return this;
    }
    
}
