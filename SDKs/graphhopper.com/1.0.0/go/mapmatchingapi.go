// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
	"strings"
)

// mapMatchingAPI - Everything about map matching aka "snap to road"
type mapMatchingAPI struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newMapMatchingAPI(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *mapMatchingAPI {
	return &mapMatchingAPI{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// PostGPX - Map-match a GPX file
// ### Example
// You get an example response for a GPX via:
//
// ```
// curl -XPOST -H "Content-Type: application/gpx+xml" "https://graphhopper.com/api/1/match?vehicle=car&key=[YOUR_KEY]" --data @/path/to/some.gpx
// ```
//
// A minimal working GPX file looks like
// ```gpx
// <gpx>
//
//	<trk>
//	 <trkseg>
//	  <trkpt lat="51.343657" lon="12.360708"></trkpt>
//	  <trkpt lat="51.343796" lon="12.361337"></trkpt>
//	  <trkpt lat="51.342784" lon="12.361882"></trkpt>
//	 </trkseg>
//	</trk>
//
// </gpx>
// ```
//
// ### Introduction
// ![Map Matching screenshot](./img/map-matching-example.gif)
//
// The Map Matching API is part of the GraphHopper Directions API and with this API you can snap measured GPS points typically as GPX files to a digital
// road network to e.g. clean data or attach certain data like elevation or turn instructions to it. Read more at Wikipedia.
//
// In the example screenshot above and demo you see the Map Matching API in action where the black line is the GPS track and the green one is matched result.
//
// Most of the times, you can simply POST a GPX file, but some of the request parameters of the [Routing API](#tag/Routing-API) apply here, too.
//
// ### API Clients and Examples
// See the [clients](#section/API-Clients) section in the main documentation, and [live examples](https://graphhopper.com/api/1/examples/#map-matching).
//
// ### Limits and Counts
// The cost for one request depends on the number of GPS location and is documented [here](https://graphhopper.com/api/1/docs/FAQ/).
//
// One request should not exceed the Map Matching API location limit depending on the package, see the pricing in our dashboard.
func (s *mapMatchingAPI) PostGPX(ctx context.Context, request operations.PostGPXRequest) (*operations.PostGPXResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/match"

	req, err := http.NewRequestWithContext(ctx, "POST", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostGPXResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		res.Headers = httpRes.Header

		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.RouteResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.RouteResponse = out
		}
	default:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.GHError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.GHError = out
		}
	}

	return res, nil
}
