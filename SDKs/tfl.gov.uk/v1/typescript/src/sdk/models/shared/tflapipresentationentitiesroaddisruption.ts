/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SystemDataSpatialDbGeography } from "./systemdataspatialdbgeography";
import { TflApiPresentationEntitiesRoadDisruptionImpactArea } from "./tflapipresentationentitiesroaddisruptionimpactarea";
import { TflApiPresentationEntitiesRoadDisruptionLine } from "./tflapipresentationentitiesroaddisruptionline";
import { TflApiPresentationEntitiesRoadDisruptionSchedule } from "./tflapipresentationentitiesroaddisruptionschedule";
import { TflApiPresentationEntitiesRoadProject } from "./tflapipresentationentitiesroadproject";
import { TflApiPresentationEntitiesStreet } from "./tflapipresentationentitiesstreet";
import { Expose, Transform, Type } from "class-transformer";

/**
 * OK
 */
export class TflApiPresentationEntitiesRoadDisruption extends SpeakeasyBase {
  /**
   * Describes the nature of disruption e.g. Traffic Incidents, Works
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: string;

  /**
   * Full text of comments describing the disruption, including details of any road closures and diversions, where appropriate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments?: string;

  /**
   * The Ids of affected corridors, if any.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "corridorIds" })
  corridorIds?: string[];

  /**
   * Text of the most recent update from the LSTCC on the state of the
   *
   * @remarks
   *              disruption, including the current traffic impact and any advice to
   *              road users.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentUpdate" })
  currentUpdate?: string;

  /**
   * The time when the last CurrentUpdate description was recorded,
   *
   * @remarks
   *             or null if no CurrentUpdate has been applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentUpdateDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  currentUpdateDateTime?: Date;

  /**
   * The date and time on which the disruption ended. For planned disruptions, this date will have a valid value. For unplanned
   *
   * @remarks
   *             disruptions in progress, this field will be omitted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endDateTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "geography" })
  @Type(() => SystemDataSpatialDbGeography)
  geography?: SystemDataSpatialDbGeography;

  @SpeakeasyMetadata()
  @Expose({ name: "geometry" })
  @Type(() => SystemDataSpatialDbGeography)
  geometry?: SystemDataSpatialDbGeography;

  /**
   * True if any of the affected Streets have a "Full Closure" status, false otherwise. A RoadDisruption that has HasClosures is considered a
   *
   * @remarks
   *             Severe or Serious disruption for severity filtering purposes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasClosures" })
  hasClosures?: boolean;

  /**
   * Unique identifier for the road disruption
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * True if the disruption is planned on a future date that is open to change
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isProvisional" })
  isProvisional?: boolean;

  /**
   * The date and time on which the disruption was last modified in the system. This information can reliably be used by a developer to quickly
   *
   * @remarks
   *             compare two instances of the same disruption to determine if it has been changed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastModifiedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedTime?: Date;

  /**
   * This describes the level of potential impact on traffic operations of the disruption.
   *
   * @remarks
   *             High = e.g. a one-off disruption on a major or high profile route which will require a high level of operational attention
   *             Medium = This is the default value
   *             Low = e.g. a frequently occurring disruption which is well known
   */
  @SpeakeasyMetadata()
  @Expose({ name: "levelOfInterest" })
  levelOfInterest?: string;

  /**
   * The text of any associated link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "linkText" })
  linkText?: string;

  /**
   * The url of any associated link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "linkUrl" })
  linkUrl?: string;

  /**
   * Main road name / number (borough) or preset area name where the disruption is located. This might be useful for a map popup where space is limited.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  /**
   * An ordinal of the disruption based on severity, level of interest and corridor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ordinal" })
  ordinal?: number;

  /**
   * Latitude and longitude (WGS84) of the centroid of the disruption, stored in a geoJSON-formatted string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "point" })
  point?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "publishEndDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  publishEndDate?: Date;

  /**
   * TDM Additional properties
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publishStartDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  publishStartDate?: Date;

  @SpeakeasyMetadata({
    elemType: TflApiPresentationEntitiesRoadDisruptionSchedule,
  })
  @Expose({ name: "recurringSchedules" })
  @Type(() => TflApiPresentationEntitiesRoadDisruptionSchedule)
  recurringSchedules?: TflApiPresentationEntitiesRoadDisruptionSchedule[];

  @SpeakeasyMetadata({
    elemType: TflApiPresentationEntitiesRoadDisruptionImpactArea,
  })
  @Expose({ name: "roadDisruptionImpactAreas" })
  @Type(() => TflApiPresentationEntitiesRoadDisruptionImpactArea)
  roadDisruptionImpactAreas?: TflApiPresentationEntitiesRoadDisruptionImpactArea[];

  @SpeakeasyMetadata({ elemType: TflApiPresentationEntitiesRoadDisruptionLine })
  @Expose({ name: "roadDisruptionLines" })
  @Type(() => TflApiPresentationEntitiesRoadDisruptionLine)
  roadDisruptionLines?: TflApiPresentationEntitiesRoadDisruptionLine[];

  @SpeakeasyMetadata()
  @Expose({ name: "roadProject" })
  @Type(() => TflApiPresentationEntitiesRoadProject)
  roadProject?: TflApiPresentationEntitiesRoadProject;

  /**
   * A description of the severity of the disruption.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "severity" })
  severity?: string;

  /**
   * The date and time which the disruption started. For a planned disruption (i.e. planned road works) this date will be in the future.
   *
   * @remarks
   *             For unplanned disruptions, this will default to the date on which the disruption was first recorded, but may be adjusted by the operator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startDateTime?: Date;

  /**
   * This describes the status of the disruption.
   *
   * @remarks
   *             Active = currently in progress
   *             Active Long Term = currently in progress and long term
   *             Scheduled = scheduled to start within the next 180 days
   *             Recurring Works = planned maintenance works that follow a regular routine or pattern and whose next occurrence is to start within the next 180 days.
   *             Recently Cleared = recently cleared in the last 24 hours
   *             Note that the status of Scheduled or Recurring Works disruptions will change to Active when they start, and will change status again when they end.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;

  /**
   * A collection of zero or more streets affected by the disruption.
   */
  @SpeakeasyMetadata({ elemType: TflApiPresentationEntitiesStreet })
  @Expose({ name: "streets" })
  @Type(() => TflApiPresentationEntitiesStreet)
  streets?: TflApiPresentationEntitiesStreet[];

  /**
   * Describes the sub-category of disruption e.g. Collapsed Manhole, Abnormal Load
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subCategory" })
  subCategory?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "timeFrame" })
  timeFrame?: string;

  /**
   * URL to retrieve this road disruption
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}
