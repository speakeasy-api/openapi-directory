"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accountaggregationresponse as shared_accountaggregationresponse
from ..shared import amiaggregationresponse as shared_amiaggregationresponse
from ..shared import awsecrcontaineraggregationresponse as shared_awsecrcontaineraggregationresponse
from ..shared import ec2instanceaggregationresponse as shared_ec2instanceaggregationresponse
from ..shared import findingtypeaggregationresponse as shared_findingtypeaggregationresponse
from ..shared import imagelayeraggregationresponse as shared_imagelayeraggregationresponse
from ..shared import lambdafunctionaggregationresponse as shared_lambdafunctionaggregationresponse
from ..shared import lambdalayeraggregationresponse as shared_lambdalayeraggregationresponse
from ..shared import packageaggregationresponse as shared_packageaggregationresponse
from ..shared import repositoryaggregationresponse as shared_repositoryaggregationresponse
from ..shared import titleaggregationresponse as shared_titleaggregationresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AggregationResponse:
    r"""A structure that contains details about the results of an aggregation type."""
    
    account_aggregation: Optional[shared_accountaggregationresponse.AccountAggregationResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountAggregation'), 'exclude': lambda f: f is None }})  
    ami_aggregation: Optional[shared_amiaggregationresponse.AmiAggregationResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amiAggregation'), 'exclude': lambda f: f is None }})  
    aws_ecr_container_aggregation: Optional[shared_awsecrcontaineraggregationresponse.AwsEcrContainerAggregationResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awsEcrContainerAggregation'), 'exclude': lambda f: f is None }})  
    ec2_instance_aggregation: Optional[shared_ec2instanceaggregationresponse.Ec2InstanceAggregationResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ec2InstanceAggregation'), 'exclude': lambda f: f is None }})  
    finding_type_aggregation: Optional[shared_findingtypeaggregationresponse.FindingTypeAggregationResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('findingTypeAggregation'), 'exclude': lambda f: f is None }})  
    image_layer_aggregation: Optional[shared_imagelayeraggregationresponse.ImageLayerAggregationResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageLayerAggregation'), 'exclude': lambda f: f is None }})  
    lambda_function_aggregation: Optional[shared_lambdafunctionaggregationresponse.LambdaFunctionAggregationResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lambdaFunctionAggregation'), 'exclude': lambda f: f is None }})  
    lambda_layer_aggregation: Optional[shared_lambdalayeraggregationresponse.LambdaLayerAggregationResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lambdaLayerAggregation'), 'exclude': lambda f: f is None }})  
    package_aggregation: Optional[shared_packageaggregationresponse.PackageAggregationResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageAggregation'), 'exclude': lambda f: f is None }})  
    repository_aggregation: Optional[shared_repositoryaggregationresponse.RepositoryAggregationResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositoryAggregation'), 'exclude': lambda f: f is None }})  
    title_aggregation: Optional[shared_titleaggregationresponse.TitleAggregationResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('titleAggregation'), 'exclude': lambda f: f is None }})  
    