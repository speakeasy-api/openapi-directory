// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

type VLANStatusLabelEnum string

const (
	VLANStatusLabelEnumActive     VLANStatusLabelEnum = "Active"
	VLANStatusLabelEnumReserved   VLANStatusLabelEnum = "Reserved"
	VLANStatusLabelEnumDeprecated VLANStatusLabelEnum = "Deprecated"
)

func (e *VLANStatusLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Active":
		fallthrough
	case "Reserved":
		fallthrough
	case "Deprecated":
		*e = VLANStatusLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VLANStatusLabelEnum: %s", s)
	}
}

type VLANStatusValueEnum string

const (
	VLANStatusValueEnumActive     VLANStatusValueEnum = "active"
	VLANStatusValueEnumReserved   VLANStatusValueEnum = "reserved"
	VLANStatusValueEnumDeprecated VLANStatusValueEnum = "deprecated"
)

func (e *VLANStatusValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "reserved":
		fallthrough
	case "deprecated":
		*e = VLANStatusValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VLANStatusValueEnum: %s", s)
	}
}

type VLANStatus struct {
	Label VLANStatusLabelEnum `json:"label"`
	Value VLANStatusValueEnum `json:"value"`
}

type Vlan struct {
	Created      *types.Date            `json:"created,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                `json:"description,omitempty"`
	DisplayName  *string                `json:"display_name,omitempty"`
	Group        *NestedVLANGroup       `json:"group,omitempty"`
	ID           *int64                 `json:"id,omitempty"`
	LastUpdated  *time.Time             `json:"last_updated,omitempty"`
	Name         string                 `json:"name"`
	PrefixCount  *int64                 `json:"prefix_count,omitempty"`
	Role         *NestedRole            `json:"role,omitempty"`
	Site         *NestedSite            `json:"site,omitempty"`
	Status       *VLANStatus            `json:"status,omitempty"`
	Tags         []string               `json:"tags,omitempty"`
	Tenant       *NestedTenant          `json:"tenant,omitempty"`
	Vid          int64                  `json:"vid"`
}
