"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestActiveDirectoryConfigResponse:
    r"""Response model for testing connection for Active Directory configuration"""
    
    ldap_users_domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldapUsersDomain') }})
    r"""Search scope of Active Directory; only users below this node can log on."""  
    server_admin_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverAdminName') }})
    r"""Distinguished Name (DN) of Active Directory administrative account"""  
    server_admin_password: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverAdminPassword') }})
    r"""Password of Active Directory administrative account"""  
    server_ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverIp') }})
    r"""IPv4 or IPv6 address or host name"""  
    server_port: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverPort') }})
    r"""Port"""  
    use_ldaps: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useLdaps') }})
    r"""Determines whether LDAPS should be used instead of plain LDAP."""  
    ssl_finger_print: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sslFingerPrint'), 'exclude': lambda f: f is None }})
    r"""SSL finger print of Active Directory server.
    
    Mandatory for LDAPS connections.
    
    Format: `Algorithm/Fingerprint`
    """  
    