// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type CredentialFieldsType string

const (
	CredentialFieldsTypeMiradoreCredentialFields              CredentialFieldsType = "MiradoreCredentialFields"
	CredentialFieldsTypeAWSCredentialFields                   CredentialFieldsType = "AWSCredentialFields"
	CredentialFieldsTypeAzureClientSecretCredentialFields     CredentialFieldsType = "AzureClientSecretCredentialFields"
	CredentialFieldsTypeAzureUsernamePasswordCredentialFields CredentialFieldsType = "AzureUsernamePasswordCredentialFields"
	CredentialFieldsTypeCrowdstrikeCredentialFields           CredentialFieldsType = "CrowdstrikeCredentialFields"
	CredentialFieldsTypeCensysCredentialFields                CredentialFieldsType = "CensysCredentialFields"
	CredentialFieldsTypeSNMPv2CommunitiesCredentialFields     CredentialFieldsType = "SNMPv2CommunitiesCredentialFields"
	CredentialFieldsTypeSNMPv3CredentialFields                CredentialFieldsType = "SNMPv3CredentialFields"
	CredentialFieldsTypeVMwareCredentialFields                CredentialFieldsType = "VMwareCredentialFields"
)

type CredentialFields struct {
	MiradoreCredentialFields              *MiradoreCredentialFields
	AWSCredentialFields                   *AWSCredentialFields
	AzureClientSecretCredentialFields     *AzureClientSecretCredentialFields
	AzureUsernamePasswordCredentialFields *AzureUsernamePasswordCredentialFields
	CrowdstrikeCredentialFields           *CrowdstrikeCredentialFields
	CensysCredentialFields                *CensysCredentialFields
	SNMPv2CommunitiesCredentialFields     *SNMPv2CommunitiesCredentialFields
	SNMPv3CredentialFields                *SNMPv3CredentialFields
	VMwareCredentialFields                *VMwareCredentialFields

	Type CredentialFieldsType
}

func CreateCredentialFieldsMiradoreCredentialFields(miradoreCredentialFields MiradoreCredentialFields) CredentialFields {
	typ := CredentialFieldsTypeMiradoreCredentialFields

	return CredentialFields{
		MiradoreCredentialFields: &miradoreCredentialFields,
		Type:                     typ,
	}
}

func CreateCredentialFieldsAWSCredentialFields(awsCredentialFields AWSCredentialFields) CredentialFields {
	typ := CredentialFieldsTypeAWSCredentialFields

	return CredentialFields{
		AWSCredentialFields: &awsCredentialFields,
		Type:                typ,
	}
}

func CreateCredentialFieldsAzureClientSecretCredentialFields(azureClientSecretCredentialFields AzureClientSecretCredentialFields) CredentialFields {
	typ := CredentialFieldsTypeAzureClientSecretCredentialFields

	return CredentialFields{
		AzureClientSecretCredentialFields: &azureClientSecretCredentialFields,
		Type:                              typ,
	}
}

func CreateCredentialFieldsAzureUsernamePasswordCredentialFields(azureUsernamePasswordCredentialFields AzureUsernamePasswordCredentialFields) CredentialFields {
	typ := CredentialFieldsTypeAzureUsernamePasswordCredentialFields

	return CredentialFields{
		AzureUsernamePasswordCredentialFields: &azureUsernamePasswordCredentialFields,
		Type:                                  typ,
	}
}

func CreateCredentialFieldsCrowdstrikeCredentialFields(crowdstrikeCredentialFields CrowdstrikeCredentialFields) CredentialFields {
	typ := CredentialFieldsTypeCrowdstrikeCredentialFields

	return CredentialFields{
		CrowdstrikeCredentialFields: &crowdstrikeCredentialFields,
		Type:                        typ,
	}
}

func CreateCredentialFieldsCensysCredentialFields(censysCredentialFields CensysCredentialFields) CredentialFields {
	typ := CredentialFieldsTypeCensysCredentialFields

	return CredentialFields{
		CensysCredentialFields: &censysCredentialFields,
		Type:                   typ,
	}
}

func CreateCredentialFieldsSNMPv2CommunitiesCredentialFields(snmPv2CommunitiesCredentialFields SNMPv2CommunitiesCredentialFields) CredentialFields {
	typ := CredentialFieldsTypeSNMPv2CommunitiesCredentialFields

	return CredentialFields{
		SNMPv2CommunitiesCredentialFields: &snmPv2CommunitiesCredentialFields,
		Type:                              typ,
	}
}

func CreateCredentialFieldsSNMPv3CredentialFields(snmPv3CredentialFields SNMPv3CredentialFields) CredentialFields {
	typ := CredentialFieldsTypeSNMPv3CredentialFields

	return CredentialFields{
		SNMPv3CredentialFields: &snmPv3CredentialFields,
		Type:                   typ,
	}
}

func CreateCredentialFieldsVMwareCredentialFields(vMwareCredentialFields VMwareCredentialFields) CredentialFields {
	typ := CredentialFieldsTypeVMwareCredentialFields

	return CredentialFields{
		VMwareCredentialFields: &vMwareCredentialFields,
		Type:                   typ,
	}
}

func (u *CredentialFields) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	miradoreCredentialFields := new(MiradoreCredentialFields)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&miradoreCredentialFields); err == nil {
		u.MiradoreCredentialFields = miradoreCredentialFields
		u.Type = CredentialFieldsTypeMiradoreCredentialFields
		return nil
	}

	awsCredentialFields := new(AWSCredentialFields)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&awsCredentialFields); err == nil {
		u.AWSCredentialFields = awsCredentialFields
		u.Type = CredentialFieldsTypeAWSCredentialFields
		return nil
	}

	azureClientSecretCredentialFields := new(AzureClientSecretCredentialFields)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&azureClientSecretCredentialFields); err == nil {
		u.AzureClientSecretCredentialFields = azureClientSecretCredentialFields
		u.Type = CredentialFieldsTypeAzureClientSecretCredentialFields
		return nil
	}

	azureUsernamePasswordCredentialFields := new(AzureUsernamePasswordCredentialFields)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&azureUsernamePasswordCredentialFields); err == nil {
		u.AzureUsernamePasswordCredentialFields = azureUsernamePasswordCredentialFields
		u.Type = CredentialFieldsTypeAzureUsernamePasswordCredentialFields
		return nil
	}

	crowdstrikeCredentialFields := new(CrowdstrikeCredentialFields)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&crowdstrikeCredentialFields); err == nil {
		u.CrowdstrikeCredentialFields = crowdstrikeCredentialFields
		u.Type = CredentialFieldsTypeCrowdstrikeCredentialFields
		return nil
	}

	censysCredentialFields := new(CensysCredentialFields)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&censysCredentialFields); err == nil {
		u.CensysCredentialFields = censysCredentialFields
		u.Type = CredentialFieldsTypeCensysCredentialFields
		return nil
	}

	snmPv2CommunitiesCredentialFields := new(SNMPv2CommunitiesCredentialFields)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&snmPv2CommunitiesCredentialFields); err == nil {
		u.SNMPv2CommunitiesCredentialFields = snmPv2CommunitiesCredentialFields
		u.Type = CredentialFieldsTypeSNMPv2CommunitiesCredentialFields
		return nil
	}

	snmPv3CredentialFields := new(SNMPv3CredentialFields)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&snmPv3CredentialFields); err == nil {
		u.SNMPv3CredentialFields = snmPv3CredentialFields
		u.Type = CredentialFieldsTypeSNMPv3CredentialFields
		return nil
	}

	vMwareCredentialFields := new(VMwareCredentialFields)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&vMwareCredentialFields); err == nil {
		u.VMwareCredentialFields = vMwareCredentialFields
		u.Type = CredentialFieldsTypeVMwareCredentialFields
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CredentialFields) MarshalJSON() ([]byte, error) {
	if u.MiradoreCredentialFields != nil {
		return json.Marshal(u.MiradoreCredentialFields)
	}

	if u.AWSCredentialFields != nil {
		return json.Marshal(u.AWSCredentialFields)
	}

	if u.AzureClientSecretCredentialFields != nil {
		return json.Marshal(u.AzureClientSecretCredentialFields)
	}

	if u.AzureUsernamePasswordCredentialFields != nil {
		return json.Marshal(u.AzureUsernamePasswordCredentialFields)
	}

	if u.CrowdstrikeCredentialFields != nil {
		return json.Marshal(u.CrowdstrikeCredentialFields)
	}

	if u.CensysCredentialFields != nil {
		return json.Marshal(u.CensysCredentialFields)
	}

	if u.SNMPv2CommunitiesCredentialFields != nil {
		return json.Marshal(u.SNMPv2CommunitiesCredentialFields)
	}

	if u.SNMPv3CredentialFields != nil {
		return json.Marshal(u.SNMPv3CredentialFields)
	}

	if u.VMwareCredentialFields != nil {
		return json.Marshal(u.VMwareCredentialFields)
	}

	return nil, nil
}
