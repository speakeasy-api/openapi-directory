/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Invoice - A single invoice.
 */
public class Invoice {
    /**
     * The budget grouping ID for this invoice. This field will only be set if the invoice level of the corresponding billing profile was set to "Budget invoice grouping ID".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("budgetInvoiceGroupingId")
    public String budgetInvoiceGroupingId;
    public Invoice withBudgetInvoiceGroupingId(String budgetInvoiceGroupingId) {
        this.budgetInvoiceGroupingId = budgetInvoiceGroupingId;
        return this;
    }
    
    /**
     * The list of summarized information for each budget associated with this invoice. This field will only be set if the invoice detail level of the corresponding billing profile was set to "Budget level PO".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("budgetSummaries")
    public BudgetSummary[] budgetSummaries;
    public Invoice withBudgetSummaries(BudgetSummary[] budgetSummaries) {
        this.budgetSummaries = budgetSummaries;
        return this;
    }
    
    /**
     * The ID of the original invoice being adjusted by this invoice, if applicable. May appear on the invoice PDF as `Reference invoice number`. If replaced_invoice_ids is set, this field will be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("correctedInvoiceId")
    public String correctedInvoiceId;
    public Invoice withCorrectedInvoiceId(String correctedInvoiceId) {
        this.correctedInvoiceId = correctedInvoiceId;
        return this;
    }
    
    /**
     * The currency used in the invoice in ISO 4217 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyCode")
    public String currencyCode;
    public Invoice withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * The display name of the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public Invoice withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dueDate")
    public Date dueDate;
    public Invoice withDueDate(Date dueDate) {
        this.dueDate = dueDate;
        return this;
    }
    
    /**
     * The unique ID of the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceId")
    public String invoiceId;
    public Invoice withInvoiceId(String invoiceId) {
        this.invoiceId = invoiceId;
        return this;
    }
    
    /**
     * The type of invoice document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceType")
    public InvoiceInvoiceTypeEnum invoiceType;
    public Invoice withInvoiceType(InvoiceInvoiceTypeEnum invoiceType) {
        this.invoiceType = invoiceType;
        return this;
    }
    
    /**
     * Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issueDate")
    public Date issueDate;
    public Invoice withIssueDate(Date issueDate) {
        this.issueDate = issueDate;
        return this;
    }
    
    /**
     * The resource name of the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Invoice withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The total amount of costs or adjustments not tied to a particular budget, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nonBudgetMicros")
    public String nonBudgetMicros;
    public Invoice withNonBudgetMicros(String nonBudgetMicros) {
        this.nonBudgetMicros = nonBudgetMicros;
        return this;
    }
    
    /**
     * The ID of the payments account the invoice belongs to. Appears on the invoice PDF as `Billing Account Number`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentsAccountId")
    public String paymentsAccountId;
    public Invoice withPaymentsAccountId(String paymentsAccountId) {
        this.paymentsAccountId = paymentsAccountId;
        return this;
    }
    
    /**
     * The ID of the payments profile the invoice belongs to. Appears on the invoice PDF as `Billing ID`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentsProfileId")
    public String paymentsProfileId;
    public Invoice withPaymentsProfileId(String paymentsProfileId) {
        this.paymentsProfileId = paymentsProfileId;
        return this;
    }
    
    /**
     * The URL to download a PDF copy of the invoice. This URL is user specific and requires a valid OAuth 2.0 access token to access. The access token must be provided in an `Authorization: Bearer` HTTP header and be authorized for one of the following scopes: * `https://www.googleapis.com/auth/display-video-mediaplanning` * `https://www.googleapis.com/auth/display-video` The URL will be valid for 7 days after retrieval of this invoice object or until this invoice is retrieved again.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pdfUrl")
    public String pdfUrl;
    public Invoice withPdfUrl(String pdfUrl) {
        this.pdfUrl = pdfUrl;
        return this;
    }
    
    /**
     * Purchase order number associated with the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purchaseOrderNumber")
    public String purchaseOrderNumber;
    public Invoice withPurchaseOrderNumber(String purchaseOrderNumber) {
        this.purchaseOrderNumber = purchaseOrderNumber;
        return this;
    }
    
    /**
     * The ID(s) of any originally issued invoice that is being cancelled by this invoice, if applicable. Multiple invoices may be listed if those invoices are being consolidated into a single invoice. May appear on invoice PDF as `Replaced invoice numbers`. If corrected_invoice_id is set, this field will be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replacedInvoiceIds")
    public String[] replacedInvoiceIds;
    public Invoice withReplacedInvoiceIds(String[] replacedInvoiceIds) {
        this.replacedInvoiceIds = replacedInvoiceIds;
        return this;
    }
    
    /**
     * A date range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceDateRange")
    public DateRange serviceDateRange;
    public Invoice withServiceDateRange(DateRange serviceDateRange) {
        this.serviceDateRange = serviceDateRange;
        return this;
    }
    
    /**
     * The pre-tax subtotal amount, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtotalAmountMicros")
    public String subtotalAmountMicros;
    public Invoice withSubtotalAmountMicros(String subtotalAmountMicros) {
        this.subtotalAmountMicros = subtotalAmountMicros;
        return this;
    }
    
    /**
     * The invoice total amount, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmountMicros")
    public String totalAmountMicros;
    public Invoice withTotalAmountMicros(String totalAmountMicros) {
        this.totalAmountMicros = totalAmountMicros;
        return this;
    }
    
    /**
     * The sum of all taxes in invoice, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalTaxAmountMicros")
    public String totalTaxAmountMicros;
    public Invoice withTotalTaxAmountMicros(String totalTaxAmountMicros) {
        this.totalTaxAmountMicros = totalTaxAmountMicros;
        return this;
    }
    
}
