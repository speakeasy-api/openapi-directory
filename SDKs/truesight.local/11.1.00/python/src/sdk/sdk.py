"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .actions import Actions
from .applications import Applications
from .devices import Devices
from .groups import Groups
from .historical_data import HistoricalData
from .services import Services

SERVERS = [
    "http://truesight.local",
    "/tsws/10.0/api/",
    r"""On this TrueSight Server"""
    "https://{hostname}:{port}/tsws/10.0/api/",
    r"""TrueSight Presentation Server"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Hardware Sentry TrueSight Presentation Server REST API"""
    actions: Actions
    r"""API operations to interact with the PATROL Agent."""
    applications: Applications
    r"""API operations to interact with the monitored Applications."""
    devices: Devices
    r"""API operations to interact with the monitored Devices."""
    groups: Groups
    r"""API operations to interact with the monitored Groups."""
    historical_data: HistoricalData
    r"""API operations to get historical data."""
    services: Services
    r"""API operations to interact with the monitored Services."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.actions = Actions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.applications = Applications(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.devices = Devices(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.groups = Groups(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.historical_data = HistoricalData(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.services = Services(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    