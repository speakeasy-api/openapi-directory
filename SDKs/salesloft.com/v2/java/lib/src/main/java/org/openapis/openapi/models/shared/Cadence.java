/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import java.time.OffsetDateTime;

/**
 * Cadence - Success
 */
public class Cadence {
    
    public EmbeddedResource addedStage;

    public Cadence withAddedStage(EmbeddedResource addedStage) {
        this.addedStage = addedStage;
        return this;
    }
    
    /**
     * Datetime of when the cadence was archived, if archived
     */
    
    public OffsetDateTime archivedAt;

    public Cadence withArchivedAt(OffsetDateTime archivedAt) {
        this.archivedAt = archivedAt;
        return this;
    }
    
    
    public EmbeddedResource bouncedStage;

    public Cadence withBouncedStage(EmbeddedResource bouncedStage) {
        this.bouncedStage = bouncedStage;
        return this;
    }
    
    /**
     * ID of the cadence framework used to create steps for the cadence
     */
    
    public Long cadenceFrameworkId;

    public Cadence withCadenceFrameworkId(Long cadenceFrameworkId) {
        this.cadenceFrameworkId = cadenceFrameworkId;
        return this;
    }
    
    /**
     * The use case of the cadence. Possible values are:
     * 
     * outbound: Denotes an outbound cadence, typically for sales purposes
     * 
     * inbound: Denotes an inbound sales cadence
     * 
     * event: Denotes a cadence used for an upcoming event
     * 
     * other: Denotes a cadence outside of the standard process
     * 
     */
    
    public String cadenceFunction;

    public Cadence withCadenceFunction(String cadenceFunction) {
        this.cadenceFunction = cadenceFunction;
        return this;
    }
    
    
    public EmbeddedResource cadencePriority;

    public Cadence withCadencePriority(EmbeddedResource cadencePriority) {
        this.cadencePriority = cadencePriority;
        return this;
    }
    
    
    public CadenceCounts counts;

    public Cadence withCounts(CadenceCounts counts) {
        this.counts = counts;
        return this;
    }
    
    /**
     * Datetime of when the cadence was created
     */
    
    public OffsetDateTime createdAt;

    public Cadence withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    
    public EmbeddedResource creator;

    public Cadence withCreator(EmbeddedResource creator) {
        this.creator = creator;
        return this;
    }
    
    /**
     * Whether this cadence is in draft mode
     */
    
    public Boolean draft;

    public Cadence withDraft(Boolean draft) {
        this.draft = draft;
        return this;
    }
    
    /**
     * Cadence External ID
     */
    
    public String externalIdentifier;

    public Cadence withExternalIdentifier(String externalIdentifier) {
        this.externalIdentifier = externalIdentifier;
        return this;
    }
    
    
    public EmbeddedResource finishedStage;

    public Cadence withFinishedStage(EmbeddedResource finishedStage) {
        this.finishedStage = finishedStage;
        return this;
    }
    
    /**
     * Groups to which this cadence is assigned, if any
     */
    
    public EmbeddedResource[] groups;

    public Cadence withGroups(EmbeddedResource[] groups) {
        this.groups = groups;
        return this;
    }
    
    /**
     * ID of cadence
     */
    
    public Long id;

    public Cadence withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Cadence name
     */
    
    public String name;

    public Cadence withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Whether this cadence is configured to include an opt-out link by default
     */
    
    public Boolean optOutLinkIncluded;

    public Cadence withOptOutLinkIncluded(Boolean optOutLinkIncluded) {
        this.optOutLinkIncluded = optOutLinkIncluded;
        return this;
    }
    
    
    public EmbeddedResource owner;

    public Cadence withOwner(EmbeddedResource owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * Whether this cadence is configured to automatically remove people who have bounced
     */
    
    public Boolean removeBouncesEnabled;

    public Cadence withRemoveBouncesEnabled(Boolean removeBouncesEnabled) {
        this.removeBouncesEnabled = removeBouncesEnabled;
        return this;
    }
    
    /**
     * Whether this cadence is configured to automatically remove people who have replied
     */
    
    public Boolean removeRepliesEnabled;

    public Cadence withRemoveRepliesEnabled(Boolean removeRepliesEnabled) {
        this.removeRepliesEnabled = removeRepliesEnabled;
        return this;
    }
    
    
    public EmbeddedResource repliedStage;

    public Cadence withRepliedStage(EmbeddedResource repliedStage) {
        this.repliedStage = repliedStage;
        return this;
    }
    
    /**
     * Whether this cadence is visible to team members (shared)
     */
    
    public Boolean shared;

    public Cadence withShared(Boolean shared) {
        this.shared = shared;
        return this;
    }
    
    /**
     * All tags applied to this cadence
     */
    
    public String[] tags;

    public Cadence withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * Whether this cadence is a team cadence.  A team cadence is created by an admin and can be run by all users
     */
    
    public Boolean teamCadence;

    public Cadence withTeamCadence(Boolean teamCadence) {
        this.teamCadence = teamCadence;
        return this;
    }
    
    /**
     * Datetime of when the cadence was last updated
     */
    
    public OffsetDateTime updatedAt;

    public Cadence withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    public Cadence(){}
}
