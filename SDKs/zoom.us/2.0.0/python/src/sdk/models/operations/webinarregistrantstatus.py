"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class WebinarRegistrantStatusSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class WebinarRegistrantStatusApplicationJSONActionEnum(str, Enum):
    r"""Used to approve a registrant, deny a registrant, or cancel a previously approved registrant."""
    APPROVE = 'approve'
    CANCEL = 'cancel'
    DENY = 'deny'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarRegistrantStatusApplicationJSONRegistrants:
    
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Registrant's email address."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Registrant ID"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarRegistrantStatusApplicationJSON:
    
    action: WebinarRegistrantStatusApplicationJSONActionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})
    r"""Used to approve a registrant, deny a registrant, or cancel a previously approved registrant."""  
    registrants: Optional[list[WebinarRegistrantStatusApplicationJSONRegistrants]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrants'), 'exclude': lambda f: f is None }})
    r"""List of registrants."""  
    

@dataclasses.dataclass
class WebinarRegistrantStatusRequest:
    
    request_body: WebinarRegistrantStatusApplicationJSON = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    webinar_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'webinarId', 'style': 'simple', 'explode': False }})
    r"""The webinar ID in \\"**long**\\" format(represented as int64 data type in JSON)."""  
    occurrence_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'occurrence_id', 'style': 'form', 'explode': True }})
    r"""The meeting occurrence ID."""  
    

@dataclasses.dataclass
class WebinarRegistrantStatusResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    