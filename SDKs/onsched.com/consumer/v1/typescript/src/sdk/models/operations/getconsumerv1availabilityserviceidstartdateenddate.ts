/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetConsumerV1AvailabilityServiceIdStartDateEndDateRequest extends SpeakeasyBase {
  /**
   * Number of days of day availability to return
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=dayAvailability",
  })
  dayAvailability?: number;

  /**
   * Format YYYY-DD-YY: Start date for day availability, defaults to startDate
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=dayAvailabilityStartDate;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  dayAvailabilityStartDate?: Date;

  /**
   * For calculating travel based availability, requires distance scope
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=destination",
  })
  destination?: string;

  /**
   * Duration of the service if different from default
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=duration",
  })
  duration?: number;

  /**
   * Format YYYY-MM-DD: End Date for availability search
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=endDate;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  endDate: Date;

  /**
   * Format Military Time. End Time for availability search. Defaults to Business Hours End
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=endTime",
  })
  endTime?: number;

  /**
   * Return available times for the first available day
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=firstDayAvailable",
  })
  firstDayAvailable?: boolean;

  /**
   * Booking Interval if different than the default
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval",
  })
  interval?: number;

  /**
   * Id of business location, defaults to primary business location
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=locationId",
  })
  locationId?: string;

  /**
   * Resource Group Id for availability search
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=resourceGroupId",
  })
  resourceGroupId?: string;

  /**
   * Resource Id for availability search
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=resourceId",
  })
  resourceId?: string;

  /**
   * Comma separated Resource Id's for availability search
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=resourceIds",
  })
  resourceIds?: string;

  /**
   * Round robin choice 0=none, 1=random, 2=balanced
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=roundRobin",
  })
  roundRobin?: string;

  /**
   * Service Id for availability search
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=serviceId",
  })
  serviceId: string;

  /**
   * Format YYYY-MM-DD: Start Date for availability search
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=startDate;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  startDate: Date;

  /**
   * Format Military Time Start Time for availability search. Defaults to Business Hours Start
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=startTime",
  })
  startTime?: number;

  /**
   * Requested IANA timezone Id to view availability
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=timezoneName",
  })
  timezoneName?: string;

  /**
   * Request timezone offset to view availability
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=tzOffset",
  })
  tzOffset?: number;
}

export class GetConsumerV1AvailabilityServiceIdStartDateEndDateResponse extends SpeakeasyBase {
  /**
   * Success
   */
  @SpeakeasyMetadata()
  availabilityViewModel?: shared.AvailabilityViewModel;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
