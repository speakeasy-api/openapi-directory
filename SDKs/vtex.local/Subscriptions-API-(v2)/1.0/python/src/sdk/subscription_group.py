"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class SubscriptionGroup:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def additemsubscription_group_id(self, request: operations.AdditemsubscriptionGroupIDRequest) -> operations.AdditemsubscriptionGroupIDResponse:
        r"""Add Subscription item by groupId
        Adds an SKU to a given Subscription, filtering by groupId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdditemsubscriptionGroupIDRequest, base_url, '/subscriptions-group/{groupId}/additem', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "additemsubscription_group_id_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdditemsubscriptionGroupIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def cancel_subscriptionbygroup_id(self, request: operations.CancelSubscriptionbygroupIDRequest) -> operations.CancelSubscriptionbygroupIDResponse:
        r"""Cancel Subscription by groupId
        Cancels Subscription by `groupId`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CancelSubscriptionbygroupIDRequest, base_url, '/subscriptions-group/{groupId}/cancel', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelSubscriptionbygroupIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_allsubscriptiongroup(self, request: operations.GetAllsubscriptiongroupRequest) -> operations.GetAllsubscriptiongroupResponse:
        r"""List All subscription groups
        Retrieves all subscription groups in your store.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/subscriptions-group'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllsubscriptiongroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_configsubscriptionsgroup(self, request: operations.GetConfigsubscriptionsgroupRequest) -> operations.GetConfigsubscriptionsgroupResponse:
        r"""List Subscription group's Configuration
        Retrieves details about a given subscription group's configuration, filtering by groupId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetConfigsubscriptionsgroupRequest, base_url, '/subscriptions-group/{groupId}/config', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConfigsubscriptionsgroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_conversation_messagebygroup_id(self, request: operations.GetConversationMessagebygroupIDRequest) -> operations.GetConversationMessagebygroupIDResponse:
        r"""Get Conversation Message by groupId
        Retrieves the conversation of a given Subscription group, filtering by groupId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetConversationMessagebygroupIDRequest, base_url, '/subscriptions-group/{groupId}/conversation-message', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConversationMessagebygroupIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_nextpurchase(self, request: operations.GetNextpurchaseRequest) -> operations.GetNextpurchaseResponse:
        r"""Get Next purchase
        Lists details of a given subscription group's next purchase, filtering by dateStr.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNextpurchaseRequest, base_url, '/subscriptions-group/nextPurchase/{dateStr}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNextpurchaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_simulatebysubscription_group(self, request: operations.GetSimulatebysubscriptionGroupRequest) -> operations.GetSimulatebysubscriptionGroupResponse:
        r"""Get Simulation by subscription-group
        Retrieves Subscription simulations, filtering by groupId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSimulatebysubscriptionGroupRequest, base_url, '/subscriptions-group/simulate/{groupId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSimulatebysubscriptionGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_subscriptionbygroup_id(self, request: operations.GetSubscriptionbygroupIDRequest) -> operations.GetSubscriptionbygroupIDResponse:
        r"""Get Subscription by groupId
        Lists Subscription details, filtering by `groupId`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSubscriptionbygroupIDRequest, base_url, '/subscriptions-group/{groupId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubscriptionbygroupIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getaddressesbygroup_id(self, request: operations.GetaddressesbygroupIDRequest) -> operations.GetaddressesbygroupIDResponse:
        r"""Get addresses by groupId
        Lists addresses linked to a given Subscription group, filtering by groupId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetaddressesbygroupIDRequest, base_url, '/subscriptions-group/{groupId}/addresses', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetaddressesbygroupIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getfrequencyoptionsbygroup_id(self, request: operations.GetfrequencyoptionsbygroupIDRequest) -> operations.GetfrequencyoptionsbygroupIDResponse:
        r"""Get frequency options by groupId
        Lists frequency options of a given Subscription group, filtering by groupId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetfrequencyoptionsbygroupIDRequest, base_url, '/subscriptions-group/{groupId}/frequency-options', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetfrequencyoptionsbygroupIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getpayment_systembygroup_id(self, request: operations.GetpaymentSystembygroupIDRequest) -> operations.GetpaymentSystembygroupIDResponse:
        r"""Get payment System by groupId
        Retrieves payment system's information of a given Subscription group, filtering by groupId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetpaymentSystembygroupIDRequest, base_url, '/subscriptions-group/{groupId}/payment-systems', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetpaymentSystembygroupIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getsubscriptiongrouplist(self, request: operations.GetsubscriptiongrouplistRequest) -> operations.GetsubscriptiongrouplistResponse:
        r"""Get subscription group list
        Retrieves a list of Subscription groups in your store.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/subscriptions-group/list'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetsubscriptiongrouplistResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getwillcreatebygroup_id(self, request: operations.GetwillcreatebygroupIDRequest) -> operations.GetwillcreatebygroupIDResponse:
        r"""List 'Will create' by groupId
        Retrieves Subscription groups listed as 'will create', filtering by groupId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetwillcreatebygroupIDRequest, base_url, '/subscriptions-group/{groupId}/will-create', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetwillcreatebygroupIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def insert_addressesbygroup_id(self, request: operations.InsertAddressesbygroupIDRequest) -> operations.InsertAddressesbygroupIDResponse:
        r"""Insert Addresses by groupId
        Insert address information of a given Subscription group, filtering by groupId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.InsertAddressesbygroupIDRequest, base_url, '/subscriptions-group/{groupId}/addresses', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "insert_addressesbygroup_id_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InsertAddressesbygroupIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def retrysubscriptionbygroup_id(self, request: operations.RetrysubscriptionbygroupIDRequest) -> operations.RetrysubscriptionbygroupIDResponse:
        r"""Retry subscription by groupId
        Permits the retry of a Subscription group, via API, filtering by groupId and instanceId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrysubscriptionbygroupIDRequest, base_url, '/subscriptions-group/{groupid}/instances/{instanceId}/retry', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrysubscriptionbygroupIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_subscriptionbygroup_id(self, request: operations.UpdateSubscriptionbygroupIDRequest) -> operations.UpdateSubscriptionbygroupIDResponse:
        r"""Update Subscription by groupId
        Updates a Subscription by `groupId`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateSubscriptionbygroupIDRequest, base_url, '/subscriptions-group/{groupId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_subscriptionbygroup_id_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSubscriptionbygroupIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    