"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var cloudstorage_1 = require("./cloudstorage");
var customeraddresses_1 = require("./customeraddresses");
var customers_1 = require("./customers");
var deliverynote_1 = require("./deliverynote");
var enumapi_1 = require("./enumapi");
var events_1 = require("./events");
var invoice_1 = require("./invoice");
var orders_1 = require("./orders");
var products_1 = require("./products");
var provisioning_1 = require("./provisioning");
var shipments_1 = require("./shipments");
var webhooks_1 = require("./webhooks");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://app.billbee.io"];
/**
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.
 *
 * @remarks
 *
 * ## Endpoint
 *
 * The Billbee API endpoint base url is https://api.billbee.io/api/v1
 *
 * ## Activation
 *
 * You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.
 *
 * ## Authorization & security
 *
 * Because you can access private data with the Billbee API, every request has to be sent over https and must
 *
 * * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key
 * * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header
 *
 * ## Throttling
 *
 * Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.
 *
 * When you exceed these 2 calls, the API will return a HTTP 429 status code
 *
 *
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.cloudStorage = new cloudstorage_1.CloudStorage(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customerAddresses = new customeraddresses_1.CustomerAddresses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customers = new customers_1.Customers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.deliveryNote = new deliverynote_1.DeliveryNote(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.enumApi = new enumapi_1.EnumApi(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.events = new events_1.Events(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.invoice = new invoice_1.Invoice(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.orders = new orders_1.Orders(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.products = new products_1.Products(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.provisioning = new provisioning_1.Provisioning(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.shipments = new shipments_1.Shipments(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.webhooks = new webhooks_1.Webhooks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
