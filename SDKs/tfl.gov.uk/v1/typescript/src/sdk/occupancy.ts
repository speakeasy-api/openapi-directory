/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Occupancy {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets the occupancy for a car park with a given id
   */
  occupancyGet(
    req: operations.OccupancyGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.OccupancyGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OccupancyGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Occupancy/CarPark/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OccupancyGetResponse =
        new operations.OccupancyGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesCarParkOccupancy =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesCarParkOccupancy
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesCarParkOccupancy =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesCarParkOccupancy
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the occupancy for all charge connectors
   */
  occupancyGetAllChargeConnectorStatus(
    config?: AxiosRequestConfig
  ): Promise<operations.OccupancyGetAllChargeConnectorStatusResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/Occupancy/ChargeConnector";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OccupancyGetAllChargeConnectorStatusResponse =
        new operations.OccupancyGetAllChargeConnectorStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesChargeConnectorOccupancies = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesChargeConnectorOccupancies =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesChargeConnectorOccupancy,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesChargeConnectorOccupancies = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesChargeConnectorOccupancies =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesChargeConnectorOccupancy,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the occupancy for bike points.
   */
  occupancyGetBikePointsOccupancies(
    req: operations.OccupancyGetBikePointsOccupanciesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.OccupancyGetBikePointsOccupanciesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OccupancyGetBikePointsOccupanciesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Occupancy/BikePoints/{ids}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OccupancyGetBikePointsOccupanciesResponse =
        new operations.OccupancyGetBikePointsOccupanciesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesBikePointOccupancies = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesBikePointOccupancies =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesBikePointOccupancy,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesBikePointOccupancies = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesBikePointOccupancies =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesBikePointOccupancy,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the occupancy for a charge connectors with a given id (sourceSystemPlaceId)
   */
  occupancyGetChargeConnectorStatus(
    req: operations.OccupancyGetChargeConnectorStatusRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.OccupancyGetChargeConnectorStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OccupancyGetChargeConnectorStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Occupancy/ChargeConnector/{ids}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OccupancyGetChargeConnectorStatusResponse =
        new operations.OccupancyGetChargeConnectorStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesChargeConnectorOccupancies = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesChargeConnectorOccupancies =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesChargeConnectorOccupancy,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesChargeConnectorOccupancies = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesChargeConnectorOccupancies =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesChargeConnectorOccupancy,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the occupancy for all car parks that have occupancy data
   */
  getOccupancyCarPark(
    config?: AxiosRequestConfig
  ): Promise<operations.GetOccupancyCarParkResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/Occupancy/CarPark";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOccupancyCarParkResponse =
        new operations.GetOccupancyCarParkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesCarParkOccupancies = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesCarParkOccupancies =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesCarParkOccupancy,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesCarParkOccupancies = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesCarParkOccupancies =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesCarParkOccupancy,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
