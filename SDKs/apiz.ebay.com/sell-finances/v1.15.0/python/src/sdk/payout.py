"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Payout:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_payout(self, request: operations.GetPayoutRequest, security: operations.GetPayoutSecurity) -> operations.GetPayoutResponse:
        r"""<div class=\\"msgbox_important\\"><p class=\\"msgbox_importantInDiv\\" data-mc-autonum=\\"&lt;b&gt;&lt;span style=&quot;color: #dd1e31;&quot; class=&quot;mcFormatColor&quot;&gt;Important! &lt;/span&gt;&lt;/b&gt;\\"><span class=\\"autonumber\\"><span><b><span style=\\"color: #dd1e31;\\" class=\\"mcFormatColor\\">Important!</span></b></span></span> Due to EU &amp; UK Payments regulatory requirements, an additional security verification via Digital Signatures is required for certain API calls that are made on behalf of EU/UK sellers, including all <b>Finances API</b> methods. Please refer to <a href=\\"/develop/guides/digital-signatures-for-apis \\" target=\\"_blank\\">Digital Signatures for APIs</a> to learn more on the impacted APIs and the process to create signatures to be included in the HTTP payload.</p></div><br>This method retrieves details on a specific seller payout. The unique identfier of the payout is passed in as a path parameter at the end of the call URI. <br><br>The <b>getPayouts</b> method can be used to retrieve the unique identifier of a payout, or the user can check Seller Hub."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPayoutRequest, base_url, '/payout/{payout_Id}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPayoutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Payout])
                res.payout = out
        elif http_res.status_code in [400, 404, 500]:
            pass

        return res

    def get_payout_summary(self, request: operations.GetPayoutSummaryRequest, security: operations.GetPayoutSummarySecurity) -> operations.GetPayoutSummaryResponse:
        r"""<div class=\\"msgbox_important\\"><p class=\\"msgbox_importantInDiv\\" data-mc-autonum=\\"&lt;b&gt;&lt;span style=&quot;color: #dd1e31;&quot; class=&quot;mcFormatColor&quot;&gt;Important! &lt;/span&gt;&lt;/b&gt;\\"><span class=\\"autonumber\\"><span><b><span style=\\"color: #dd1e31;\\" class=\\"mcFormatColor\\">Important!</span></b></span></span> Due to EU &amp; UK Payments regulatory requirements, an additional security verification via Digital Signatures is required for certain API calls that are made on behalf of EU/UK sellers, including all <b>Finances API</b> methods. Please refer to <a href=\\"/develop/guides/digital-signatures-for-apis \\" target=\\"_blank\\">Digital Signatures for APIs</a> to learn more on the impacted APIs and the process to create signatures to be included in the HTTP payload.</p></div><br>This method is used to retrieve cumulative values for payouts in a particular state, or all states. The metadata in the response includes total payouts, the total number of monetary transactions (sales, refunds, credits) associated with those payouts, and the total dollar value of all payouts.<br><br>If the <b>filter</b> query parameter is used to filter by payout status, only one payout status value may be used. If the <b>filter</b> query parameter is not used to filter by a specific payout status, cumulative values for payouts in all states are returned.<br><br>The user can also use the <b>filter</b> query parameter to specify a date range, and then only payouts that were processed within that date range are considered."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/payout_summary'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetPayoutSummaryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPayoutSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayoutSummaryResponse])
                res.payout_summary_response = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def get_payouts(self, request: operations.GetPayoutsRequest, security: operations.GetPayoutsSecurity) -> operations.GetPayoutsResponse:
        r"""<div class=\\"msgbox_important\\"><p class=\\"msgbox_importantInDiv\\" data-mc-autonum=\\"&lt;b&gt;&lt;span style=&quot;color: #dd1e31;&quot; class=&quot;mcFormatColor&quot;&gt;Important! &lt;/span&gt;&lt;/b&gt;\\"><span class=\\"autonumber\\"><span><b><span style=\\"color: #dd1e31;\\" class=\\"mcFormatColor\\">Important!</span></b></span></span> Due to EU &amp; UK Payments regulatory requirements, an additional security verification via Digital Signatures is required for certain API calls that are made on behalf of EU/UK sellers, including all <b>Finances API</b> methods. Please refer to <a href=\\"/develop/guides/digital-signatures-for-apis \\" target=\\"_blank\\">Digital Signatures for APIs</a> to learn more on the impacted APIs and the process to create signatures to be included in the HTTP payload.</p></div><br>This method is used to retrieve the details of one or more seller payouts. By using the <b>filter</b> query parameter, users can retrieve payouts processed within a specific date range, and/or they can retrieve payouts in a specific state.<br><br>There are also pagination and sort query parameters that allow users to control the payouts that are returned in the response.<br><br>If no payouts match the input criteria, an empty payload is returned."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/payout'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetPayoutsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPayoutsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Payouts])
                res.payouts = out
        elif http_res.status_code in [204, 400, 500]:
            pass

        return res

    