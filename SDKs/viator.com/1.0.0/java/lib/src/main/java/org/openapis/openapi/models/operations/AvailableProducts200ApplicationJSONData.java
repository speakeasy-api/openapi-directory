/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class AvailableProducts200ApplicationJSONData {
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("admission")
    public String admission;

    public AvailableProducts200ApplicationJSONData withAdmission(String admission) {
        this.admission = admission;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available")
    public Boolean available;

    public AvailableProducts200ApplicationJSONData withAvailable(Boolean available) {
        this.available = available;
        return this;
    }
    
    /**
     * **booking type specifier** for *this* product that indicates whether the booking will be `CONFIRMED` immediately or if it will remain `PENDING` even after the booking has been made
     * 
     * *one of* the following:
     * - `"FreesaleBE"` \u2013 *this* product will be confirmed immediately and the supplier will be sent a notification
     * - `"UnconditionalBE"` - *this* product will be confirmed immediately and the supplier will not be notified
     * - `"DeferredCRMBE"` - *this* product is an on-request product and will not be confirmed immediately. *this* product will have a `PENDING` status after it is booked, to be confirmed by the supplier within the time specified in the `hoursConfirmed` field available in the booking response and post-booking services
     * - `"FreesaleOnRequestBE"` - *this* product is freesale up until a certain number of days before the travel date, referred to as the *on-request period*.
     * 
     * If a booking is made within the on-request period, *this* product will be an on-request product. Once the booking has been made, the `bookingEngineId` will change to either `"FreesaleOnRequestBE:OnRequest"` or `"FreesaleOnRequestBE:Freesold"` depending on the travel date and the on-request period                        
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bookingEngineId")
    public org.openapis.openapi.models.shared.BookingEngineIdEnum bookingEngineId;

    public AvailableProducts200ApplicationJSONData withBookingEngineId(org.openapis.openapi.models.shared.BookingEngineIdEnum bookingEngineId) {
        this.bookingEngineId = bookingEngineId;
        return this;
    }
    
    /**
     * **list** of unique numeric category identifiers that this product falls under
     * - `categoryId` is available from the [/taxonomy/categories](#operation/taxonomyCategories) service
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catIds")
    public Long[] catIds;

    public AvailableProducts200ApplicationJSONData withCatIds(Long[] catIds) {
        this.catIds = catIds;
        return this;
    }
    
    /**
     * **unique alphanumeric identifier** of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public String code;

    public AvailableProducts200ApplicationJSONData withCode(String code) {
        this.code = code;
        return this;
    }
    
    /**
     * Three-letter code indicating the currency in which `itemPrice` and `refundAmount` are displayed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyCode")
    public String currencyCode;

    public AvailableProducts200ApplicationJSONData withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * **natural-language description** of *this* product's duration
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public String duration;

    public AvailableProducts200ApplicationJSONData withDuration(String duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("essential")
    public String essential;

    public AvailableProducts200ApplicationJSONData withEssential(String essential) {
        this.essential = essential;
        return this;
    }
    
    /**
     * ignore (Viator only)
     * 
     *     
     * For cancellation information regarding the booking, please refer to the `merchantTermsAndConditions` object
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantCancellable")
    public Boolean merchantCancellable;

    public AvailableProducts200ApplicationJSONData withMerchantCancellable(Boolean merchantCancellable) {
        this.merchantCancellable = merchantCancellable;
        return this;
    }
    
    /**
     * Numeric 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee; i.e. the merchant net rate
     * 
     * For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantNetPriceFrom")
    public Double merchantNetPriceFrom;

    public AvailableProducts200ApplicationJSONData withMerchantNetPriceFrom(Double merchantNetPriceFrom) {
        this.merchantNetPriceFrom = merchantNetPriceFrom;
        return this;
    }
    
    /**
     * Currency-formatted 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee (i.e. the merchant net rate)
     * 
     * For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantNetPriceFromFormatted")
    public String merchantNetPriceFromFormatted;

    public AvailableProducts200ApplicationJSONData withMerchantNetPriceFromFormatted(String merchantNetPriceFromFormatted) {
        this.merchantNetPriceFromFormatted = merchantNetPriceFromFormatted;
        return this;
    }
    
    /**
     * **number** of hours before the travel date that *this* product will be 'on-request' for
     * - this field will contain a value if the `bookingEngineId` is `'FreesaleOnRequestBE'`
     * - an `onRequestPeriod` of 48 hours means that *this* product is freesale up until 48 hours before the travel date, and is on-request for 48 hours or less until the travel date
     * - **note**: 'hours in advance' (the number of hours a product is available for booking before the travel date) may also affect this; however, this value is not available in the API
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onRequestPeriod")
    public Long onRequestPeriod;

    public AvailableProducts200ApplicationJSONData withOnRequestPeriod(Long onRequestPeriod) {
        this.onRequestPeriod = onRequestPeriod;
        return this;
    }
    
    /**
     * Ignore (Viator only)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onSale")
    public Boolean onSale;

    public AvailableProducts200ApplicationJSONData withOnSale(Boolean onSale) {
        this.onSale = onSale;
        return this;
    }
    
    /**
     * **number** of panoramic images available for *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("panoramaCount")
    public Long panoramaCount;

    public AvailableProducts200ApplicationJSONData withPanoramaCount(Long panoramaCount) {
        this.panoramaCount = panoramaCount;
        return this;
    }
    
    /**
     * **object** detailing product availability
     * - `pas` stands for Product Availability Schema
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pas")
    public AvailableProducts200ApplicationJSONDataPas pas;

    public AvailableProducts200ApplicationJSONData withPas(AvailableProducts200ApplicationJSONDataPas pas) {
        this.pas = pas;
        return this;
    }
    
    /**
     * **number** of user photos published for *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photoCount")
    public Long photoCount;

    public AvailableProducts200ApplicationJSONData withPhotoCount(Long photoCount) {
        this.photoCount = photoCount;
        return this;
    }
    
    /**
     * **suggested sell ('from') price** for this product in the currency set in the `currencyCode` parameter. This is the cheapest sell price, taking into consideration off-peak periods and discounts on larger groups.
     * 
     * 
     *   - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    public Double price;

    public AvailableProducts200ApplicationJSONData withPrice(Double price) {
        this.price = price;
        return this;
    }
    
    /**
     * **currency-formatted suggested sell ('from') price** for this product in the currency set in the `currencyCode` parameter
     * 
     * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceFormatted")
    public String priceFormatted;

    public AvailableProducts200ApplicationJSONData withPriceFormatted(String priceFormatted) {
        this.priceFormatted = priceFormatted;
        return this;
    }
    
    /**
     * **unique numeric identifier** of *this* product's primary destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryDestinationId")
    public Long primaryDestinationId;

    public AvailableProducts200ApplicationJSONData withPrimaryDestinationId(Long primaryDestinationId) {
        this.primaryDestinationId = primaryDestinationId;
        return this;
    }
    
    /**
     * **natural-language name** of *this* product's primary destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryDestinationName")
    public String primaryDestinationName;

    public AvailableProducts200ApplicationJSONData withPrimaryDestinationName(String primaryDestinationName) {
        this.primaryDestinationName = primaryDestinationName;
        return this;
    }
    
    /**
     * **URL-formatted name** of *this* product's primary destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryDestinationUrlName")
    public String primaryDestinationUrlName;

    public AvailableProducts200ApplicationJSONData withPrimaryDestinationUrlName(String primaryDestinationUrlName) {
        this.primaryDestinationUrlName = primaryDestinationUrlName;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryGroupId")
    public String primaryGroupId;

    public AvailableProducts200ApplicationJSONData withPrimaryGroupId(String primaryGroupId) {
        this.primaryGroupId = primaryGroupId;
        return this;
    }
    
    /**
     * **URL-formatted name** of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productUrlName")
    public String productUrlName;

    public AvailableProducts200ApplicationJSONData withProductUrlName(String productUrlName) {
        this.productUrlName = productUrlName;
        return this;
    }
    
    /**
     * **average user rating** of *this* product
     * 
     * users rate products by assigning a star-rating from 1-5; this value shows the average of the star ratings provided by users;
     * 
     * the `ratingCounts` associative array in this response provides a breakdown of how many submissions for each star rating have been received
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rating")
    public Double rating;

    public AvailableProducts200ApplicationJSONData withRating(Double rating) {
        this.rating = rating;
        return this;
    }
    
    /**
     * **number** of user reviews that have been submitted by users for *this* product
     * 
     * If your account has been configured to limit the number of reviews you can receive, this value will never be higher than that. Otherwise, this value will show the total number of reviews available for this product. If there are more than 24 reviews available, you will need to use the [/product/reviews](#operation/productReviews) service to retrieve the remainder of the reviews.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reviewCount")
    public Long reviewCount;

    public AvailableProducts200ApplicationJSONData withReviewCount(Long reviewCount) {
        this.reviewCount = reviewCount;
        return this;
    }
    
    /**
     * **numeric original price** for this product if the product is on special / a discount has been applied. `0` if there is no discount on this product. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rrp")
    public Long rrp;

    public AvailableProducts200ApplicationJSONData withRrp(Long rrp) {
        this.rrp = rrp;
        return this;
    }
    
    /**
     * **currency-formatted original price** for this product if the product is on special / a discount has been applied. Empty string if there is no discount on this product. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rrpFormatted")
    public String rrpFormatted;

    public AvailableProducts200ApplicationJSONData withRrpFormatted(String rrpFormatted) {
        this.rrpFormatted = rrpFormatted;
        return this;
    }
    
    /**
     * Ignore (Viator only)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("savingAmount")
    public String savingAmount;

    public AvailableProducts200ApplicationJSONData withSavingAmount(String savingAmount) {
        this.savingAmount = savingAmount;
        return this;
    }
    
    /**
     * Ignore (Viator only)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("savingAmountFormated")
    public String savingAmountFormated;

    public AvailableProducts200ApplicationJSONData withSavingAmountFormated(String savingAmountFormated) {
        this.savingAmountFormated = savingAmountFormated;
        return this;
    }
    
    /**
     * **natural-language description** (short) of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortDescription")
    public String shortDescription;

    public AvailableProducts200ApplicationJSONData withShortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
        return this;
    }
    
    /**
     * **natural-language title (shortened)** of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortTitle")
    public String shortTitle;

    public AvailableProducts200ApplicationJSONData withShortTitle(String shortTitle) {
        this.shortTitle = shortTitle;
        return this;
    }
    
    /**
     * **sort order** of this result object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortOrder")
    public Long sortOrder;

    public AvailableProducts200ApplicationJSONData withSortOrder(Long sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    /**
     * **indicator**: `true` if a special offer is available for *this* product. If `true` the `specialOffer` field will contain a text string providing details of the special offer which you may wish to display in your product search results. E.g. 'Book by May 27 to save 34% off our previously offered price!'. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specialOfferAvailable")
    public Boolean specialOfferAvailable;

    public AvailableProducts200ApplicationJSONData withSpecialOfferAvailable(Boolean specialOfferAvailable) {
        this.specialOfferAvailable = specialOfferAvailable;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specialReservation")
    public Boolean specialReservation;

    public AvailableProducts200ApplicationJSONData withSpecialReservation(Boolean specialReservation) {
        this.specialReservation = specialReservation;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specialReservationDetails")
    public String specialReservationDetails;

    public AvailableProducts200ApplicationJSONData withSpecialReservationDetails(String specialReservationDetails) {
        this.specialReservationDetails = specialReservationDetails;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslSupported")
    public Boolean sslSupported;

    public AvailableProducts200ApplicationJSONData withSslSupported(Boolean sslSupported) {
        this.sslSupported = sslSupported;
        return this;
    }
    
    /**
     * **list** of unique numeric subcategory identifiers that this product falls under
     * - `subcategoryId` is available from the [/taxonomy/categories](#operation/taxonomyCategories) service
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subCatIds")
    public Long[] subCatIds;

    public AvailableProducts200ApplicationJSONData withSubCatIds(Long[] subCatIds) {
        this.subCatIds = subCatIds;
        return this;
    }
    
    /**
     * **unique identifier** of *this* product's supplier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplierCode")
    public String supplierCode;

    public AvailableProducts200ApplicationJSONData withSupplierCode(String supplierCode) {
        this.supplierCode = supplierCode;
        return this;
    }
    
    /**
     * **natural-language name** of *this* product's supplier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplierName")
    public String supplierName;

    public AvailableProducts200ApplicationJSONData withSupplierName(String supplierName) {
        this.supplierName = supplierName;
        return this;
    }
    
    /**
     * **URL** of *this* product's high resolution thumbnail image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailHiResURL")
    public String thumbnailHiResURL;

    public AvailableProducts200ApplicationJSONData withThumbnailHiResURL(String thumbnailHiResURL) {
        this.thumbnailHiResURL = thumbnailHiResURL;
        return this;
    }
    
    /**
     * **URL** of *this* product's thumbnail image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailURL")
    public String thumbnailURL;

    public AvailableProducts200ApplicationJSONData withThumbnailURL(String thumbnailURL) {
        this.thumbnailURL = thumbnailURL;
        return this;
    }
    
    /**
     * **natural-language title** of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public AvailableProducts200ApplicationJSONData withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * **numeric indicator** of the language translation level for *this* product that is one of:
     * - `0`: no translation (English only)
     * - `80`: full machine translation
     * - `100`: full human translation
     * 
     * See: [Working with human and machine translations](#section/Appendices/Working-with-human-and-machine-translations) for more information
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("translationLevel")
    public org.openapis.openapi.models.shared.TranslationLevelEnum translationLevel;

    public AvailableProducts200ApplicationJSONData withTranslationLevel(org.openapis.openapi.models.shared.TranslationLevelEnum translationLevel) {
        this.translationLevel = translationLevel;
        return this;
    }
    
    /**
     * **natural-language description** of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uniqueShortDescription")
    public String uniqueShortDescription;

    public AvailableProducts200ApplicationJSONData withUniqueShortDescription(String uniqueShortDescription) {
        this.uniqueShortDescription = uniqueShortDescription;
        return this;
    }
    
    /**
     * ignore (Viator only) \u2013 videos are not available to partners
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoCount")
    public Long videoCount;

    public AvailableProducts200ApplicationJSONData withVideoCount(Long videoCount) {
        this.videoCount = videoCount;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webURL")
    public String webURL;

    public AvailableProducts200ApplicationJSONData withWebURL(String webURL) {
        this.webURL = webURL;
        return this;
    }
    
    public AvailableProducts200ApplicationJSONData(){}
}
