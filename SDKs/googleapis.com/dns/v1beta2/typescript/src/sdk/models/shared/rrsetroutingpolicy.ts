/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RRSetRoutingPolicyGeoPolicy } from "./rrsetroutingpolicygeopolicy";
import { RRSetRoutingPolicyPrimaryBackupPolicy } from "./rrsetroutingpolicyprimarybackuppolicy";
import { RRSetRoutingPolicyWrrPolicy } from "./rrsetroutingpolicywrrpolicy";
import { Expose, Type } from "class-transformer";

/**
 * A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
 */
export class RRSetRoutingPolicy extends SpeakeasyBase {
  /**
   * Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "geo" })
  @Type(() => RRSetRoutingPolicyGeoPolicy)
  geo?: RRSetRoutingPolicyGeoPolicy;

  /**
   * Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "geoPolicy" })
  @Type(() => RRSetRoutingPolicyGeoPolicy)
  geoPolicy?: RRSetRoutingPolicyGeoPolicy;

  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "primaryBackup" })
  @Type(() => RRSetRoutingPolicyPrimaryBackupPolicy)
  primaryBackup?: RRSetRoutingPolicyPrimaryBackupPolicy;

  /**
   * Configures a RRSetRoutingPolicy that routes in a weighted round robin fashion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wrr" })
  @Type(() => RRSetRoutingPolicyWrrPolicy)
  wrr?: RRSetRoutingPolicyWrrPolicy;

  /**
   * Configures a RRSetRoutingPolicy that routes in a weighted round robin fashion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wrrPolicy" })
  @Type(() => RRSetRoutingPolicyWrrPolicy)
  wrrPolicy?: RRSetRoutingPolicyWrrPolicy;
}
