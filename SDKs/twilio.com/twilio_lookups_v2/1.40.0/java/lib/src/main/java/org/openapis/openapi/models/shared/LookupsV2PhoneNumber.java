/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * LookupsV2PhoneNumber - OK
 */
public class LookupsV2PhoneNumber {
    /**
     * An object that contains information on the unconditional call forwarding status of mobile phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("call_forwarding")
    public Object callForwarding;
    public LookupsV2PhoneNumber withCallForwarding(Object callForwarding) {
        this.callForwarding = callForwarding;
        return this;
    }
    
    /**
     * An object that contains caller name information based on [CNAM](https://support.twilio.com/hc/en-us/articles/360051670533-Getting-Started-with-CNAM-Caller-ID).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("caller_name")
    public Object callerName;
    public LookupsV2PhoneNumber withCallerName(Object callerName) {
        this.callerName = callerName;
        return this;
    }
    
    /**
     * International dialing prefix of the phone number defined in the E.164 standard.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calling_country_code")
    public String callingCountryCode;
    public LookupsV2PhoneNumber withCallingCountryCode(String callingCountryCode) {
        this.callingCountryCode = callingCountryCode;
        return this;
    }
    
    /**
     * The phone number's [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country_code")
    public String countryCode;
    public LookupsV2PhoneNumber withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }
    
    /**
     * An object that contains information on if a mobile phone number could be a disposable or burner number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disposable_phone_number_risk")
    public Object disposablePhoneNumberRisk;
    public LookupsV2PhoneNumber withDisposablePhoneNumberRisk(Object disposablePhoneNumberRisk) {
        this.disposablePhoneNumberRisk = disposablePhoneNumberRisk;
        return this;
    }
    
    /**
     * An object that contains identity match information. The result of comparing user-provided information including name, address, date of birth, national ID, against authoritative phone-based data sources
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identity_match")
    public Object identityMatch;
    public LookupsV2PhoneNumber withIdentityMatch(Object identityMatch) {
        this.identityMatch = identityMatch;
        return this;
    }
    
    /**
     * An object that contains line type information including the carrier name, mobile country code, and mobile network code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_type_intelligence")
    public Object lineTypeIntelligence;
    public LookupsV2PhoneNumber withLineTypeIntelligence(Object lineTypeIntelligence) {
        this.lineTypeIntelligence = lineTypeIntelligence;
        return this;
    }
    
    /**
     * An object that contains live activity information for a mobile phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("live_activity")
    public Object liveActivity;
    public LookupsV2PhoneNumber withLiveActivity(Object liveActivity) {
        this.liveActivity = liveActivity;
        return this;
    }
    
    /**
     * The phone number in [national format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("national_format")
    public String nationalFormat;
    public LookupsV2PhoneNumber withNationalFormat(String nationalFormat) {
        this.nationalFormat = nationalFormat;
        return this;
    }
    
    /**
     * The phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    public String phoneNumber;
    public LookupsV2PhoneNumber withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    /**
     * An object that contains information on the last date the subscriber identity module (SIM) was changed for a mobile phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sim_swap")
    public Object simSwap;
    public LookupsV2PhoneNumber withSimSwap(Object simSwap) {
        this.simSwap = simSwap;
        return this;
    }
    
    /**
     * An object that contains information on if a phone number has been currently or previously blocked by Verify Fraud Guard for receiving malicious SMS pumping traffic as well as other signals associated with risky carriers and low conversion rates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sms_pumping_risk")
    public Object smsPumpingRisk;
    public LookupsV2PhoneNumber withSmsPumpingRisk(Object smsPumpingRisk) {
        this.smsPumpingRisk = smsPumpingRisk;
        return this;
    }
    
    /**
     * The absolute URL of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public LookupsV2PhoneNumber withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Boolean which indicates if the phone number is in a valid range that can be freely assigned by a carrier to a user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valid")
    public Boolean valid;
    public LookupsV2PhoneNumber withValid(Boolean valid) {
        this.valid = valid;
        return this;
    }
    
    /**
     * Contains reasons why a phone number is invalid. Possible values: TOO_SHORT, TOO_LONG, INVALID_BUT_POSSIBLE, INVALID_COUNTRY_CODE, INVALID_LENGTH, NOT_A_NUMBER.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validation_errors")
    public PhoneNumberEnumValidationErrorEnum[] validationErrors;
    public LookupsV2PhoneNumber withValidationErrors(PhoneNumberEnumValidationErrorEnum[] validationErrors) {
        this.validationErrors = validationErrors;
        return this;
    }
    
}
