<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Access 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds/Overwrites the user entry in the access control database.
     * 
     * Adds/Overwrites the user entry in the access control database.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccessAddRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AccessAddResponse
     */
	public function accessAdd(
        \OpenAPI\OpenAPI\Models\Operations\AccessAddRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AccessAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/access/add/{user}/{agents}/{mask}', \OpenAPI\OpenAPI\Models\Operations\AccessAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccessAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->accessAdd200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Clears a users entry from access control database.
     * 
     * Using '*' for user clears all the users.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccessDelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AccessDelResponse
     */
	public function accessDel(
        \OpenAPI\OpenAPI\Models\Operations\AccessDelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AccessDelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/access/del/{user}', \OpenAPI\OpenAPI\Models\Operations\AccessDelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccessDelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->accessDel200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Returns the current access control database in use.
     * 
     * If nothing is specified then this returns "".
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\AccessGetAcldbResponse
     */
	public function accessGetAcldb(
    ): \OpenAPI\OpenAPI\Models\Operations\AccessGetAcldbResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/access/get/acldb');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccessGetAcldbResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->accessGetAcldb200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Returns the current admin directory.
     * 
     * If nothing is specified in admin/settings.cfg then returns "". If no admin directory is specified then the shared area will be used where needed (e.g. for persistent info, access control data files etc. )
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\AccessGetAdmindirResponse
     */
	public function accessGetAdmindir(
    ): \OpenAPI\OpenAPI\Models\Operations\AccessGetAdmindirResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/access/get/admindir');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccessGetAdmindirResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->accessGetAdmindir200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Returns the current administrator.
     * 
     * If nothing is specified in admin/settings.cfg then returns "".
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\AccessGetAdminuserResponse
     */
	public function accessGetAdminuser(
    ): \OpenAPI\OpenAPI\Models\Operations\AccessGetAdminuserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/access/get/adminuser');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccessGetAdminuserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->accessGetAdminuser200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Returns the state of access control checking.
     * 
     * 0 indicates that it is disabled, 1 indicates it is enabled.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\AccessGetEnabledResponse
     */
	public function accessGetEnabled(
    ): \OpenAPI\OpenAPI\Models\Operations\AccessGetEnabledResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/access/get/enabled');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccessGetEnabledResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->accessGetEnabled200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Returns an array of entries.
     * 
     * Each entry consists of user, agents (in minimal range representation) and access mask (not used currently).
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\AccessListResponse
     */
	public function accessList(
    ): \OpenAPI\OpenAPI\Models\Operations\AccessListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/access/list');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccessListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accessEntries = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AccessEntry>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Loads the specified file for access control data.
     * 
     * If filename is not specified then the currently set 'acldb' parameter is used.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccessLoadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AccessLoadResponse
     */
	public function accessLoad(
        \OpenAPI\OpenAPI\Models\Operations\AccessLoadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AccessLoadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/access/load/{filename}', \OpenAPI\OpenAPI\Models\Operations\AccessLoadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccessLoadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accessLoad200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Saves current access control data in specified file.
     * 
     * If filename is not specified then the currently set 'acldb' parameter is used.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccessSaveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AccessSaveResponse
     */
	public function accessSave(
        \OpenAPI\OpenAPI\Models\Operations\AccessSaveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AccessSaveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/access/save/{filename}', \OpenAPI\OpenAPI\Models\Operations\AccessSaveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccessSaveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accessSave200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Allows setting the name of the current access control database.
     * 
     * This will be used for subsequent load and save operations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccessSetAcldbRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AccessSetAcldbResponse
     */
	public function accessSetAcldb(
        \OpenAPI\OpenAPI\Models\Operations\AccessSetAcldbRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AccessSetAcldbResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/access/set/acldb/{databaseName}', \OpenAPI\OpenAPI\Models\Operations\AccessSetAcldbRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccessSetAcldbResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->accessSetAcldb200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Allows the user to enable/disable the access control check.
     * 
     * 0 indicates disabled, 1 indicates enabled.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccessSetEnabledRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AccessSetEnabledResponse
     */
	public function accessSetEnabled(
        \OpenAPI\OpenAPI\Models\Operations\AccessSetEnabledRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AccessSetEnabledResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/access/set/enabled/{enabledOrNot}', \OpenAPI\OpenAPI\Models\Operations\AccessSetEnabledRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccessSetEnabledResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->accessSetEnabled200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}