"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportImageRequest = exports.ImportImageRequestTagSpecifications = exports.ImportImageRequestTagSpecificationsTags = exports.ImportImageRequestTagSpecificationsResourceTypeEnum = exports.ImportImageRequestDiskContainers = void 0;
var utils_1 = require("../../../internal/utils");
var bootmodevaluesenum_1 = require("./bootmodevaluesenum");
var clientdata_1 = require("./clientdata");
var importimagelicensespecificationlistrequest_1 = require("./importimagelicensespecificationlistrequest");
var userbucket_1 = require("./userbucket");
/**
 * Describes the disk container object for an import image task.
 */
var ImportImageRequestDiskContainers = /** @class */ (function (_super) {
    __extends(ImportImageRequestDiskContainers, _super);
    function ImportImageRequestDiskContainers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequestDiskContainers.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequestDiskContainers.prototype, "deviceName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequestDiskContainers.prototype, "format", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequestDiskContainers.prototype, "snapshotId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequestDiskContainers.prototype, "url", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", userbucket_1.UserBucket)
    ], ImportImageRequestDiskContainers.prototype, "userBucket", void 0);
    return ImportImageRequestDiskContainers;
}(utils_1.SpeakeasyBase));
exports.ImportImageRequestDiskContainers = ImportImageRequestDiskContainers;
/**
 * The type of resource to tag on creation.
 */
var ImportImageRequestTagSpecificationsResourceTypeEnum;
(function (ImportImageRequestTagSpecificationsResourceTypeEnum) {
    ImportImageRequestTagSpecificationsResourceTypeEnum["CapacityReservation"] = "capacity-reservation";
    ImportImageRequestTagSpecificationsResourceTypeEnum["ClientVpnEndpoint"] = "client-vpn-endpoint";
    ImportImageRequestTagSpecificationsResourceTypeEnum["CustomerGateway"] = "customer-gateway";
    ImportImageRequestTagSpecificationsResourceTypeEnum["CarrierGateway"] = "carrier-gateway";
    ImportImageRequestTagSpecificationsResourceTypeEnum["CoipPool"] = "coip-pool";
    ImportImageRequestTagSpecificationsResourceTypeEnum["DedicatedHost"] = "dedicated-host";
    ImportImageRequestTagSpecificationsResourceTypeEnum["DhcpOptions"] = "dhcp-options";
    ImportImageRequestTagSpecificationsResourceTypeEnum["EgressOnlyInternetGateway"] = "egress-only-internet-gateway";
    ImportImageRequestTagSpecificationsResourceTypeEnum["ElasticIp"] = "elastic-ip";
    ImportImageRequestTagSpecificationsResourceTypeEnum["ElasticGpu"] = "elastic-gpu";
    ImportImageRequestTagSpecificationsResourceTypeEnum["ExportImageTask"] = "export-image-task";
    ImportImageRequestTagSpecificationsResourceTypeEnum["ExportInstanceTask"] = "export-instance-task";
    ImportImageRequestTagSpecificationsResourceTypeEnum["Fleet"] = "fleet";
    ImportImageRequestTagSpecificationsResourceTypeEnum["FpgaImage"] = "fpga-image";
    ImportImageRequestTagSpecificationsResourceTypeEnum["HostReservation"] = "host-reservation";
    ImportImageRequestTagSpecificationsResourceTypeEnum["Image"] = "image";
    ImportImageRequestTagSpecificationsResourceTypeEnum["ImportImageTask"] = "import-image-task";
    ImportImageRequestTagSpecificationsResourceTypeEnum["ImportSnapshotTask"] = "import-snapshot-task";
    ImportImageRequestTagSpecificationsResourceTypeEnum["Instance"] = "instance";
    ImportImageRequestTagSpecificationsResourceTypeEnum["InstanceEventWindow"] = "instance-event-window";
    ImportImageRequestTagSpecificationsResourceTypeEnum["InternetGateway"] = "internet-gateway";
    ImportImageRequestTagSpecificationsResourceTypeEnum["Ipam"] = "ipam";
    ImportImageRequestTagSpecificationsResourceTypeEnum["IpamPool"] = "ipam-pool";
    ImportImageRequestTagSpecificationsResourceTypeEnum["IpamScope"] = "ipam-scope";
    ImportImageRequestTagSpecificationsResourceTypeEnum["Ipv4poolEc2"] = "ipv4pool-ec2";
    ImportImageRequestTagSpecificationsResourceTypeEnum["Ipv6poolEc2"] = "ipv6pool-ec2";
    ImportImageRequestTagSpecificationsResourceTypeEnum["KeyPair"] = "key-pair";
    ImportImageRequestTagSpecificationsResourceTypeEnum["LaunchTemplate"] = "launch-template";
    ImportImageRequestTagSpecificationsResourceTypeEnum["LocalGateway"] = "local-gateway";
    ImportImageRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTable"] = "local-gateway-route-table";
    ImportImageRequestTagSpecificationsResourceTypeEnum["LocalGatewayVirtualInterface"] = "local-gateway-virtual-interface";
    ImportImageRequestTagSpecificationsResourceTypeEnum["LocalGatewayVirtualInterfaceGroup"] = "local-gateway-virtual-interface-group";
    ImportImageRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTableVpcAssociation"] = "local-gateway-route-table-vpc-association";
    ImportImageRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTableVirtualInterfaceGroupAssociation"] = "local-gateway-route-table-virtual-interface-group-association";
    ImportImageRequestTagSpecificationsResourceTypeEnum["Natgateway"] = "natgateway";
    ImportImageRequestTagSpecificationsResourceTypeEnum["NetworkAcl"] = "network-acl";
    ImportImageRequestTagSpecificationsResourceTypeEnum["NetworkInterface"] = "network-interface";
    ImportImageRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAnalysis"] = "network-insights-analysis";
    ImportImageRequestTagSpecificationsResourceTypeEnum["NetworkInsightsPath"] = "network-insights-path";
    ImportImageRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAccessScope"] = "network-insights-access-scope";
    ImportImageRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAccessScopeAnalysis"] = "network-insights-access-scope-analysis";
    ImportImageRequestTagSpecificationsResourceTypeEnum["PlacementGroup"] = "placement-group";
    ImportImageRequestTagSpecificationsResourceTypeEnum["PrefixList"] = "prefix-list";
    ImportImageRequestTagSpecificationsResourceTypeEnum["ReplaceRootVolumeTask"] = "replace-root-volume-task";
    ImportImageRequestTagSpecificationsResourceTypeEnum["ReservedInstances"] = "reserved-instances";
    ImportImageRequestTagSpecificationsResourceTypeEnum["RouteTable"] = "route-table";
    ImportImageRequestTagSpecificationsResourceTypeEnum["SecurityGroup"] = "security-group";
    ImportImageRequestTagSpecificationsResourceTypeEnum["SecurityGroupRule"] = "security-group-rule";
    ImportImageRequestTagSpecificationsResourceTypeEnum["Snapshot"] = "snapshot";
    ImportImageRequestTagSpecificationsResourceTypeEnum["SpotFleetRequest"] = "spot-fleet-request";
    ImportImageRequestTagSpecificationsResourceTypeEnum["SpotInstancesRequest"] = "spot-instances-request";
    ImportImageRequestTagSpecificationsResourceTypeEnum["Subnet"] = "subnet";
    ImportImageRequestTagSpecificationsResourceTypeEnum["SubnetCidrReservation"] = "subnet-cidr-reservation";
    ImportImageRequestTagSpecificationsResourceTypeEnum["TrafficMirrorFilter"] = "traffic-mirror-filter";
    ImportImageRequestTagSpecificationsResourceTypeEnum["TrafficMirrorSession"] = "traffic-mirror-session";
    ImportImageRequestTagSpecificationsResourceTypeEnum["TrafficMirrorTarget"] = "traffic-mirror-target";
    ImportImageRequestTagSpecificationsResourceTypeEnum["TransitGateway"] = "transit-gateway";
    ImportImageRequestTagSpecificationsResourceTypeEnum["TransitGatewayAttachment"] = "transit-gateway-attachment";
    ImportImageRequestTagSpecificationsResourceTypeEnum["TransitGatewayConnectPeer"] = "transit-gateway-connect-peer";
    ImportImageRequestTagSpecificationsResourceTypeEnum["TransitGatewayMulticastDomain"] = "transit-gateway-multicast-domain";
    ImportImageRequestTagSpecificationsResourceTypeEnum["TransitGatewayPolicyTable"] = "transit-gateway-policy-table";
    ImportImageRequestTagSpecificationsResourceTypeEnum["TransitGatewayRouteTable"] = "transit-gateway-route-table";
    ImportImageRequestTagSpecificationsResourceTypeEnum["TransitGatewayRouteTableAnnouncement"] = "transit-gateway-route-table-announcement";
    ImportImageRequestTagSpecificationsResourceTypeEnum["Volume"] = "volume";
    ImportImageRequestTagSpecificationsResourceTypeEnum["Vpc"] = "vpc";
    ImportImageRequestTagSpecificationsResourceTypeEnum["VpcEndpoint"] = "vpc-endpoint";
    ImportImageRequestTagSpecificationsResourceTypeEnum["VpcEndpointConnection"] = "vpc-endpoint-connection";
    ImportImageRequestTagSpecificationsResourceTypeEnum["VpcEndpointService"] = "vpc-endpoint-service";
    ImportImageRequestTagSpecificationsResourceTypeEnum["VpcEndpointServicePermission"] = "vpc-endpoint-service-permission";
    ImportImageRequestTagSpecificationsResourceTypeEnum["VpcPeeringConnection"] = "vpc-peering-connection";
    ImportImageRequestTagSpecificationsResourceTypeEnum["VpnConnection"] = "vpn-connection";
    ImportImageRequestTagSpecificationsResourceTypeEnum["VpnGateway"] = "vpn-gateway";
    ImportImageRequestTagSpecificationsResourceTypeEnum["VpcFlowLog"] = "vpc-flow-log";
    ImportImageRequestTagSpecificationsResourceTypeEnum["CapacityReservationFleet"] = "capacity-reservation-fleet";
    ImportImageRequestTagSpecificationsResourceTypeEnum["TrafficMirrorFilterRule"] = "traffic-mirror-filter-rule";
    ImportImageRequestTagSpecificationsResourceTypeEnum["VpcEndpointConnectionDeviceType"] = "vpc-endpoint-connection-device-type";
    ImportImageRequestTagSpecificationsResourceTypeEnum["VerifiedAccessInstance"] = "verified-access-instance";
    ImportImageRequestTagSpecificationsResourceTypeEnum["VerifiedAccessGroup"] = "verified-access-group";
    ImportImageRequestTagSpecificationsResourceTypeEnum["VerifiedAccessEndpoint"] = "verified-access-endpoint";
    ImportImageRequestTagSpecificationsResourceTypeEnum["VerifiedAccessPolicy"] = "verified-access-policy";
    ImportImageRequestTagSpecificationsResourceTypeEnum["VerifiedAccessTrustProvider"] = "verified-access-trust-provider";
    ImportImageRequestTagSpecificationsResourceTypeEnum["VpnConnectionDeviceType"] = "vpn-connection-device-type";
    ImportImageRequestTagSpecificationsResourceTypeEnum["VpcBlockPublicAccessExclusion"] = "vpc-block-public-access-exclusion";
    ImportImageRequestTagSpecificationsResourceTypeEnum["IpamResourceDiscovery"] = "ipam-resource-discovery";
    ImportImageRequestTagSpecificationsResourceTypeEnum["IpamResourceDiscoveryAssociation"] = "ipam-resource-discovery-association";
})(ImportImageRequestTagSpecificationsResourceTypeEnum = exports.ImportImageRequestTagSpecificationsResourceTypeEnum || (exports.ImportImageRequestTagSpecificationsResourceTypeEnum = {}));
/**
 * Describes a tag.
 */
var ImportImageRequestTagSpecificationsTags = /** @class */ (function (_super) {
    __extends(ImportImageRequestTagSpecificationsTags, _super);
    function ImportImageRequestTagSpecificationsTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequestTagSpecificationsTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequestTagSpecificationsTags.prototype, "value", void 0);
    return ImportImageRequestTagSpecificationsTags;
}(utils_1.SpeakeasyBase));
exports.ImportImageRequestTagSpecificationsTags = ImportImageRequestTagSpecificationsTags;
/**
 * <p>The tags to apply to a resource when the resource is being created. When you specify a tag, you must specify the resource type to tag, otherwise the request will fail.</p> <note> <p>The <code>Valid Values</code> lists all the resource types that can be tagged. However, the action you're using might not support tagging all of these resource types. If you try to tag a resource type that is unsupported for the action you're using, you'll get an error.</p> </note>
 */
var ImportImageRequestTagSpecifications = /** @class */ (function (_super) {
    __extends(ImportImageRequestTagSpecifications, _super);
    function ImportImageRequestTagSpecifications() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequestTagSpecifications.prototype, "resourceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: ImportImageRequestTagSpecificationsTags }),
        __metadata("design:type", Array)
    ], ImportImageRequestTagSpecifications.prototype, "tags", void 0);
    return ImportImageRequestTagSpecifications;
}(utils_1.SpeakeasyBase));
exports.ImportImageRequestTagSpecifications = ImportImageRequestTagSpecifications;
var ImportImageRequest = /** @class */ (function (_super) {
    __extends(ImportImageRequest, _super);
    function ImportImageRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequest.prototype, "architecture", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequest.prototype, "bootMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", clientdata_1.ClientData)
    ], ImportImageRequest.prototype, "clientData", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequest.prototype, "clientToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequest.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: ImportImageRequestDiskContainers }),
        __metadata("design:type", Array)
    ], ImportImageRequest.prototype, "diskContainers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ImportImageRequest.prototype, "dryRun", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ImportImageRequest.prototype, "encrypted", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequest.prototype, "hypervisor", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequest.prototype, "kmsKeyId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: importimagelicensespecificationlistrequest_1.ImportImageLicenseSpecificationListRequest }),
        __metadata("design:type", Array)
    ], ImportImageRequest.prototype, "licenseSpecifications", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequest.prototype, "licenseType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequest.prototype, "platform", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequest.prototype, "roleName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: ImportImageRequestTagSpecifications }),
        __metadata("design:type", Array)
    ], ImportImageRequest.prototype, "tagSpecifications", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImportImageRequest.prototype, "usageOperation", void 0);
    return ImportImageRequest;
}(utils_1.SpeakeasyBase));
exports.ImportImageRequest = ImportImageRequest;
