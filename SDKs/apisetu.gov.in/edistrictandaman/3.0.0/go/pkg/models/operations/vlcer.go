// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type VlcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type VlcerRequestBodyCertificateParameters struct {
	// Certificate Number
	CertificateNumber string `json:"CertificateNumber"`
}

// VlcerRequestBodyFormatEnum - The format of the certificate in response.
type VlcerRequestBodyFormatEnum string

const (
	VlcerRequestBodyFormatEnumPdf VlcerRequestBodyFormatEnum = "pdf"
)

func (e VlcerRequestBodyFormatEnum) ToPointer() *VlcerRequestBodyFormatEnum {
	return &e
}

func (e *VlcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = VlcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VlcerRequestBodyFormatEnum: %v", v)
	}
}

// VlcerRequestBody - Request format
type VlcerRequestBody struct {
	CertificateParameters *VlcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format VlcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Vlcer504ApplicationJSONErrorEnum string

const (
	Vlcer504ApplicationJSONErrorEnumGatewayTimeout Vlcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Vlcer504ApplicationJSONErrorEnum) ToPointer() *Vlcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Vlcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Vlcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vlcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Vlcer504ApplicationJSONErrorDescriptionEnum string

const (
	Vlcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Vlcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Vlcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Vlcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vlcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Vlcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vlcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vlcer504ApplicationJSON - Gateway timeout
type Vlcer504ApplicationJSON struct {
	Error            *Vlcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vlcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vlcer503ApplicationJSONErrorEnum string

const (
	Vlcer503ApplicationJSONErrorEnumServiceUnavailable Vlcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Vlcer503ApplicationJSONErrorEnum) ToPointer() *Vlcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Vlcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Vlcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vlcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Vlcer503ApplicationJSONErrorDescriptionEnum string

const (
	Vlcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Vlcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Vlcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Vlcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vlcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Vlcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vlcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vlcer503ApplicationJSON - Service unavailable
type Vlcer503ApplicationJSON struct {
	Error            *Vlcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vlcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vlcer502ApplicationJSONErrorEnum string

const (
	Vlcer502ApplicationJSONErrorEnumBadGatewy Vlcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Vlcer502ApplicationJSONErrorEnum) ToPointer() *Vlcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Vlcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Vlcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vlcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Vlcer502ApplicationJSONErrorDescriptionEnum string

const (
	Vlcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Vlcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Vlcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Vlcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vlcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Vlcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vlcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vlcer502ApplicationJSON - Bad gateway
type Vlcer502ApplicationJSON struct {
	Error            *Vlcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vlcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vlcer500ApplicationJSONErrorEnum string

const (
	Vlcer500ApplicationJSONErrorEnumInternalServerError Vlcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Vlcer500ApplicationJSONErrorEnum) ToPointer() *Vlcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Vlcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Vlcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vlcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Vlcer500ApplicationJSONErrorDescriptionEnum string

const (
	Vlcer500ApplicationJSONErrorDescriptionEnumInternalServerError Vlcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Vlcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Vlcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vlcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Vlcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vlcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vlcer500ApplicationJSON - Internal server error
type Vlcer500ApplicationJSON struct {
	Error            *Vlcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vlcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vlcer404ApplicationJSONErrorEnum string

const (
	Vlcer404ApplicationJSONErrorEnumRecordNotFound Vlcer404ApplicationJSONErrorEnum = "record_not_found"
	Vlcer404ApplicationJSONErrorEnumURLNotFound    Vlcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Vlcer404ApplicationJSONErrorEnum) ToPointer() *Vlcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Vlcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Vlcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vlcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Vlcer404ApplicationJSONErrorDescriptionEnum string

const (
	Vlcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Vlcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Vlcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Vlcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Vlcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Vlcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vlcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Vlcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vlcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vlcer404ApplicationJSON - No record found
type Vlcer404ApplicationJSON struct {
	Error            *Vlcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vlcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vlcer401ApplicationJSONErrorEnum string

const (
	Vlcer401ApplicationJSONErrorEnumInvalidAuthentication Vlcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Vlcer401ApplicationJSONErrorEnumInvalidAuthorization  Vlcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Vlcer401ApplicationJSONErrorEnum) ToPointer() *Vlcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Vlcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Vlcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vlcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Vlcer401ApplicationJSONErrorDescriptionEnum string

const (
	Vlcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Vlcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Vlcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Vlcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Vlcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Vlcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vlcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Vlcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vlcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vlcer401ApplicationJSON - Unauthorized access
type Vlcer401ApplicationJSON struct {
	Error            *Vlcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vlcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vlcer400ApplicationJSONErrorEnum string

const (
	Vlcer400ApplicationJSONErrorEnumMissingParameter Vlcer400ApplicationJSONErrorEnum = "missing_parameter"
	Vlcer400ApplicationJSONErrorEnumInvalidParameter Vlcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Vlcer400ApplicationJSONErrorEnumInvalidFormat    Vlcer400ApplicationJSONErrorEnum = "invalid_format"
	Vlcer400ApplicationJSONErrorEnumInvalidTxnid     Vlcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Vlcer400ApplicationJSONErrorEnumInvalidConsentid Vlcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Vlcer400ApplicationJSONErrorEnum) ToPointer() *Vlcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Vlcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Vlcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vlcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Vlcer400ApplicationJSONErrorDescriptionEnum string

const (
	Vlcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Vlcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Vlcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Vlcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Vlcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Vlcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Vlcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Vlcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Vlcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Vlcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Vlcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Vlcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vlcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Vlcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vlcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vlcer400ApplicationJSON - Bad request
type Vlcer400ApplicationJSON struct {
	Error            *Vlcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vlcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type VlcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Vlcer400ApplicationJSONObject *Vlcer400ApplicationJSON
	// Unauthorized access
	Vlcer401ApplicationJSONObject *Vlcer401ApplicationJSON
	// No record found
	Vlcer404ApplicationJSONObject *Vlcer404ApplicationJSON
	// Internal server error
	Vlcer500ApplicationJSONObject *Vlcer500ApplicationJSON
	// Bad gateway
	Vlcer502ApplicationJSONObject *Vlcer502ApplicationJSON
	// Service unavailable
	Vlcer503ApplicationJSONObject *Vlcer503ApplicationJSON
	// Gateway timeout
	Vlcer504ApplicationJSONObject *Vlcer504ApplicationJSON
}
