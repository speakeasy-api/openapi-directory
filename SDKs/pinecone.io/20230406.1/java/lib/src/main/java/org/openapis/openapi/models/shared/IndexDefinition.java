/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class IndexDefinition {
    /**
     * The number of dimensions in the vector representation
     */
    @JsonProperty("dimension")
    public Integer dimension;

    public IndexDefinition withDimension(Integer dimension) {
        this.dimension = dimension;
        return this;
    }
    
    /**
     * Configuration for the behavior of Pinecone's internal metadata index. By default, all metadata is indexed; when metadata_config is present, only specified metadata fields are indexed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata_config")
    public IndexMetadataConfig metadataConfig;

    public IndexDefinition withMetadataConfig(IndexMetadataConfig metadataConfig) {
        this.metadataConfig = metadataConfig;
        return this;
    }
    
    /**
     * The vector similarity metric of the index
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metric")
    public IndexMetricEnum metric;

    public IndexDefinition withMetric(IndexMetricEnum metric) {
        this.metric = metric;
        return this;
    }
    
    /**
     * The unique name of an index.
     */
    @JsonProperty("name")
    public String name;

    public IndexDefinition withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The pod type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pod_type")
    public PodTypeEnum podType;

    public IndexDefinition withPodType(PodTypeEnum podType) {
        this.podType = podType;
        return this;
    }
    
    /**
     * The number of pods for the index to use,including replicas.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pods")
    public Integer pods;

    public IndexDefinition withPods(Integer pods) {
        this.pods = pods;
        return this;
    }
    
    /**
     * The number of replicas. Replicas duplicate your index. They provide higher availability and throughput.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replicas")
    public Integer replicas;

    public IndexDefinition withReplicas(Integer replicas) {
        this.replicas = replicas;
        return this;
    }
    
    /**
     * The unique name of a collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_collection")
    public String sourceCollection;

    public IndexDefinition withSourceCollection(String sourceCollection) {
        this.sourceCollection = sourceCollection;
        return this;
    }
    
    public IndexDefinition(@JsonProperty("dimension") Integer dimension, @JsonProperty("name") String name) {
        this.dimension = dimension;
        this.name = name;
  }
}
