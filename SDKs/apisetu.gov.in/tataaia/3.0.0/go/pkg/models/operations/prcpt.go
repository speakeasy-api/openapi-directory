// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PrcptSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type PrcptRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Date of Birth
	PiDob string `json:"PI_DOB"`
	// Financial Year
	PiFinYear string `json:"PI_FIN_YEAR"`
	// Policy No
	PiPolicynbr string `json:"PI_POLICYNBR"`
}

// PrcptRequestBodyFormatEnum - The format of the certificate in response.
type PrcptRequestBodyFormatEnum string

const (
	PrcptRequestBodyFormatEnumPdf PrcptRequestBodyFormatEnum = "pdf"
)

func (e *PrcptRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = PrcptRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PrcptRequestBodyFormatEnum: %s", s)
	}
}

// PrcptRequestBody - Request format
type PrcptRequestBody struct {
	CertificateParameters *PrcptRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format PrcptRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type PrcptRequest struct {
	// Request format
	Request  *PrcptRequestBody `request:"mediaType=application/json"`
	Security PrcptSecurity
}

type Prcpt504ApplicationJSONErrorEnum string

const (
	Prcpt504ApplicationJSONErrorEnumGatewayTimeout Prcpt504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Prcpt504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Prcpt504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prcpt504ApplicationJSONErrorEnum: %s", s)
	}
}

type Prcpt504ApplicationJSONErrorDescriptionEnum string

const (
	Prcpt504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Prcpt504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Prcpt504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Prcpt504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prcpt504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Prcpt504ApplicationJSON - Gateway timeout
type Prcpt504ApplicationJSON struct {
	Error            *Prcpt504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Prcpt504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Prcpt503ApplicationJSONErrorEnum string

const (
	Prcpt503ApplicationJSONErrorEnumServiceUnavailable Prcpt503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Prcpt503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Prcpt503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prcpt503ApplicationJSONErrorEnum: %s", s)
	}
}

type Prcpt503ApplicationJSONErrorDescriptionEnum string

const (
	Prcpt503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Prcpt503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Prcpt503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Prcpt503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prcpt503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Prcpt503ApplicationJSON - Service unavailable
type Prcpt503ApplicationJSON struct {
	Error            *Prcpt503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Prcpt503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Prcpt502ApplicationJSONErrorEnum string

const (
	Prcpt502ApplicationJSONErrorEnumBadGatewy Prcpt502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Prcpt502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Prcpt502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prcpt502ApplicationJSONErrorEnum: %s", s)
	}
}

type Prcpt502ApplicationJSONErrorDescriptionEnum string

const (
	Prcpt502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Prcpt502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Prcpt502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Prcpt502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prcpt502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Prcpt502ApplicationJSON - Bad gateway
type Prcpt502ApplicationJSON struct {
	Error            *Prcpt502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Prcpt502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Prcpt500ApplicationJSONErrorEnum string

const (
	Prcpt500ApplicationJSONErrorEnumInternalServerError Prcpt500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Prcpt500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Prcpt500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prcpt500ApplicationJSONErrorEnum: %s", s)
	}
}

type Prcpt500ApplicationJSONErrorDescriptionEnum string

const (
	Prcpt500ApplicationJSONErrorDescriptionEnumInternalServerError Prcpt500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Prcpt500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Prcpt500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prcpt500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Prcpt500ApplicationJSON - Internal server error
type Prcpt500ApplicationJSON struct {
	Error            *Prcpt500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Prcpt500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Prcpt404ApplicationJSONErrorEnum string

const (
	Prcpt404ApplicationJSONErrorEnumRecordNotFound Prcpt404ApplicationJSONErrorEnum = "record_not_found"
	Prcpt404ApplicationJSONErrorEnumURLNotFound    Prcpt404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Prcpt404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Prcpt404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prcpt404ApplicationJSONErrorEnum: %s", s)
	}
}

type Prcpt404ApplicationJSONErrorDescriptionEnum string

const (
	Prcpt404ApplicationJSONErrorDescriptionEnumNoRecordFound               Prcpt404ApplicationJSONErrorDescriptionEnum = "No record found"
	Prcpt404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Prcpt404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Prcpt404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Prcpt404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prcpt404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Prcpt404ApplicationJSON - No record found
type Prcpt404ApplicationJSON struct {
	Error            *Prcpt404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Prcpt404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Prcpt401ApplicationJSONErrorEnum string

const (
	Prcpt401ApplicationJSONErrorEnumInvalidAuthentication Prcpt401ApplicationJSONErrorEnum = "invalid_authentication"
	Prcpt401ApplicationJSONErrorEnumInvalidAuthorization  Prcpt401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Prcpt401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Prcpt401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prcpt401ApplicationJSONErrorEnum: %s", s)
	}
}

type Prcpt401ApplicationJSONErrorDescriptionEnum string

const (
	Prcpt401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Prcpt401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Prcpt401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Prcpt401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Prcpt401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Prcpt401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prcpt401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Prcpt401ApplicationJSON - Unauthorized access
type Prcpt401ApplicationJSON struct {
	Error            *Prcpt401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Prcpt401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Prcpt400ApplicationJSONErrorEnum string

const (
	Prcpt400ApplicationJSONErrorEnumMissingParameter Prcpt400ApplicationJSONErrorEnum = "missing_parameter"
	Prcpt400ApplicationJSONErrorEnumInvalidParameter Prcpt400ApplicationJSONErrorEnum = "invalid_parameter"
	Prcpt400ApplicationJSONErrorEnumInvalidFormat    Prcpt400ApplicationJSONErrorEnum = "invalid_format"
	Prcpt400ApplicationJSONErrorEnumInvalidTxnid     Prcpt400ApplicationJSONErrorEnum = "invalid_txnid"
	Prcpt400ApplicationJSONErrorEnumInvalidConsentid Prcpt400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Prcpt400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Prcpt400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prcpt400ApplicationJSONErrorEnum: %s", s)
	}
}

type Prcpt400ApplicationJSONErrorDescriptionEnum string

const (
	Prcpt400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Prcpt400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Prcpt400ApplicationJSONErrorDescriptionEnumBadRequest                              Prcpt400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Prcpt400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Prcpt400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Prcpt400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Prcpt400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Prcpt400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Prcpt400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Prcpt400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Prcpt400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prcpt400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Prcpt400ApplicationJSON - Bad request
type Prcpt400ApplicationJSON struct {
	Error            *Prcpt400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Prcpt400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type PrcptResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Prcpt400ApplicationJSONObject *Prcpt400ApplicationJSON
	// Unauthorized access
	Prcpt401ApplicationJSONObject *Prcpt401ApplicationJSON
	// No record found
	Prcpt404ApplicationJSONObject *Prcpt404ApplicationJSON
	// Internal server error
	Prcpt500ApplicationJSONObject *Prcpt500ApplicationJSON
	// Bad gateway
	Prcpt502ApplicationJSONObject *Prcpt502ApplicationJSON
	// Service unavailable
	Prcpt503ApplicationJSONObject *Prcpt503ApplicationJSON
	// Gateway timeout
	Prcpt504ApplicationJSONObject *Prcpt504ApplicationJSON
}
