// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NotificationEntitySendIntervalEnum - The time interval that notifications are aggregated to
type NotificationEntitySendIntervalEnum string

const (
	NotificationEntitySendIntervalEnumFiveMinutes    NotificationEntitySendIntervalEnum = "five_minutes"
	NotificationEntitySendIntervalEnumFifteenMinutes NotificationEntitySendIntervalEnum = "fifteen_minutes"
	NotificationEntitySendIntervalEnumHourly         NotificationEntitySendIntervalEnum = "hourly"
	NotificationEntitySendIntervalEnumDaily          NotificationEntitySendIntervalEnum = "daily"
)

func (e *NotificationEntitySendIntervalEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "five_minutes":
		fallthrough
	case "fifteen_minutes":
		fallthrough
	case "hourly":
		fallthrough
	case "daily":
		*e = NotificationEntitySendIntervalEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationEntitySendIntervalEnum: %s", s)
	}
}

// NotificationEntityUnsubscribedReasonEnum - The reason that the user unsubscribed
type NotificationEntityUnsubscribedReasonEnum string

const (
	NotificationEntityUnsubscribedReasonEnumNone                   NotificationEntityUnsubscribedReasonEnum = "none"
	NotificationEntityUnsubscribedReasonEnumUnsubscribeLinkClicked NotificationEntityUnsubscribedReasonEnum = "unsubscribe_link_clicked"
	NotificationEntityUnsubscribedReasonEnumMailBounced            NotificationEntityUnsubscribedReasonEnum = "mail_bounced"
	NotificationEntityUnsubscribedReasonEnumMailMarkedAsSpam       NotificationEntityUnsubscribedReasonEnum = "mail_marked_as_spam"
)

func (e *NotificationEntityUnsubscribedReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "none":
		fallthrough
	case "unsubscribe_link_clicked":
		fallthrough
	case "mail_bounced":
		fallthrough
	case "mail_marked_as_spam":
		*e = NotificationEntityUnsubscribedReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationEntityUnsubscribedReasonEnum: %s", s)
	}
}

// NotificationEntity - List Notifications
type NotificationEntity struct {
	// Notification group id
	GroupID *int `json:"group_id,omitempty"`
	// Group name if applicable
	GroupName *string `json:"group_name,omitempty"`
	// Notification ID
	ID *int `json:"id,omitempty"`
	// Custom message to include in notification emails.
	Message *string `json:"message,omitempty"`
	// Triggers notification when copying files to this path
	NotifyOnCopy *bool `json:"notify_on_copy,omitempty"`
	// Triggers notification when deleting files from this path
	NotifyOnDelete *bool `json:"notify_on_delete,omitempty"`
	// Triggers notification when downloading files from this path
	NotifyOnDownload *bool `json:"notify_on_download,omitempty"`
	// Triggers notification when moving files to this path
	NotifyOnMove *bool `json:"notify_on_move,omitempty"`
	// Triggers notification when uploading new files to this path
	NotifyOnUpload *bool `json:"notify_on_upload,omitempty"`
	// Trigger notification on notification user actions?
	NotifyUserActions *bool `json:"notify_user_actions,omitempty"`
	// Folder path to notify on
	Path *string `json:"path,omitempty"`
	// Enable notifications for each subfolder in this path
	Recursive *bool `json:"recursive,omitempty"`
	// The time interval that notifications are aggregated to
	SendInterval *NotificationEntitySendIntervalEnum `json:"send_interval,omitempty"`
	// If true, it means that the recipient at this user's email address has manually unsubscribed from all emails, or had their email "hard bounce", which means that we are unable to send mail to this user's current email address. Notifications will resume if the user changes their email address.
	SuppressedEmail *bool `json:"suppressed_email,omitempty"`
	// Notify when actions are performed by a share recipient?
	TriggerByShareRecipients *bool `json:"trigger_by_share_recipients,omitempty"`
	// Array of filenames (possibly with wildcards) to match for action path
	TriggeringFilenames []string `json:"triggering_filenames,omitempty"`
	// Only notify on actions made by a member of one of the specified groups
	TriggeringGroupIds []int `json:"triggering_group_ids,omitempty"`
	// Only notify on actions made one of the specified users
	TriggeringUserIds []int `json:"triggering_user_ids,omitempty"`
	// Is the user unsubscribed from this notification?
	Unsubscribed *bool `json:"unsubscribed,omitempty"`
	// The reason that the user unsubscribed
	UnsubscribedReason *NotificationEntityUnsubscribedReasonEnum `json:"unsubscribed_reason,omitempty"`
	// Notification user ID
	UserID *int `json:"user_id,omitempty"`
	// Notification username
	Username *string `json:"username,omitempty"`
}
