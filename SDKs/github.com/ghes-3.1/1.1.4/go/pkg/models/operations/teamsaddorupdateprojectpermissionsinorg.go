// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// TeamsAddOrUpdateProjectPermissionsInOrgRequestBodyPermissionEnum - The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)."
type TeamsAddOrUpdateProjectPermissionsInOrgRequestBodyPermissionEnum string

const (
	TeamsAddOrUpdateProjectPermissionsInOrgRequestBodyPermissionEnumRead  TeamsAddOrUpdateProjectPermissionsInOrgRequestBodyPermissionEnum = "read"
	TeamsAddOrUpdateProjectPermissionsInOrgRequestBodyPermissionEnumWrite TeamsAddOrUpdateProjectPermissionsInOrgRequestBodyPermissionEnum = "write"
	TeamsAddOrUpdateProjectPermissionsInOrgRequestBodyPermissionEnumAdmin TeamsAddOrUpdateProjectPermissionsInOrgRequestBodyPermissionEnum = "admin"
)

func (e *TeamsAddOrUpdateProjectPermissionsInOrgRequestBodyPermissionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		fallthrough
	case "admin":
		*e = TeamsAddOrUpdateProjectPermissionsInOrgRequestBodyPermissionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsAddOrUpdateProjectPermissionsInOrgRequestBodyPermissionEnum: %s", s)
	}
}

type TeamsAddOrUpdateProjectPermissionsInOrgRequestBody struct {
	// The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)."
	Permission *TeamsAddOrUpdateProjectPermissionsInOrgRequestBodyPermissionEnum `json:"permission,omitempty"`
}

type TeamsAddOrUpdateProjectPermissionsInOrgRequest struct {
	RequestBody *TeamsAddOrUpdateProjectPermissionsInOrgRequestBody `request:"mediaType=application/json"`
	// The organization name. The name is not case sensitive.
	Org string `pathParam:"style=simple,explode=false,name=org"`
	// The unique identifier of the project.
	ProjectID int64 `pathParam:"style=simple,explode=false,name=project_id"`
	// The slug of the team name.
	TeamSlug string `pathParam:"style=simple,explode=false,name=team_slug"`
}

// TeamsAddOrUpdateProjectPermissionsInOrg403ApplicationJSON - Forbidden if the project is not owned by the organization
type TeamsAddOrUpdateProjectPermissionsInOrg403ApplicationJSON struct {
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message          *string `json:"message,omitempty"`
}

type TeamsAddOrUpdateProjectPermissionsInOrgResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden if the project is not owned by the organization
	TeamsAddOrUpdateProjectPermissionsInOrg403ApplicationJSONObject *TeamsAddOrUpdateProjectPermissionsInOrg403ApplicationJSON
}
