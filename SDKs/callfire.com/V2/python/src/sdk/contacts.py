"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Contacts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_contact_list_items(self, request: operations.AddContactListItemsRequest, security: operations.AddContactListItemsSecurity) -> operations.AddContactListItemsResponse:
        r"""Add contacts to a contact list
        Adds contacts to a contact list. Available contact sources are: list of the contact entities, list of ids of existing contacts in user's account, list of phone numbers in E.164 format (11-digits)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddContactListItemsRequest, base_url, '/contacts/lists/{id}/items', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_contact_list_contacts_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddContactListItemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def add_do_not_contacts(self, request: shared.AddDoNotContactRequest, security: operations.AddDoNotContactsSecurity) -> operations.AddDoNotContactsResponse:
        r"""Add do not contact (dnc) numbers
        Add or update a list of Do Not Contact (DNC) contact entries. Can toggle whether the DNCs are enabled for calls/texts.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/contacts/dncs'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddDoNotContactsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def create_contact_list(self, request: operations.CreateContactListRequest, security: operations.CreateContactListSecurity) -> operations.CreateContactListResponse:
        r"""Create contact lists
        Creates a contact list for use with campaigns using 1 of 3 inputs. A List of Contact objects, a list of String E.164 numbers, or a list of CallFire contactIds can be used as the data source for the created contact list. After contact list is added into the CallFire system, contact lists goes through seven system safeguards that check the accuracy and consistency of the data. For example, our system checks that contact number is formatted correctly, is valid, is not duplicated in another contact list, or is not added on a specific DNC list. You can configure to keep/merge or remove contacts which do not complies these rules. If contacts were not added to a contact list after the validation, this means the data needs to be properly formatted and corrected before calling this API
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/contacts/lists'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_contact_list_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CreateContactListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateContactListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContactList])
                res.contact_list = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def create_contact_list_from_file(self, request: operations.CreateContactListFromFileRequestBody, security: operations.CreateContactListFromFileSecurity) -> operations.CreateContactListFromFileResponse:
        r"""Create contact list from file
        Creates a contact list to be used with campaigns through uploading a .csv file. Returns the id of created list
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/contacts/lists/upload'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateContactListFromFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceID])
                res.resource_id = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def create_contacts(self, request: list[shared.Contact], security: operations.CreateContactsSecurity) -> operations.CreateContactsResponse:
        r"""Create contacts
        Creates contacts in CallFire system. Only values from the next list can be used as external system parameter in contact creation: **NATION_BUILDER, SALES_FORCE_CONTACTS, SALES_FORCE_LEADS, SALES_FORCE_REPORTS, ZOHO, MAIL_CHIMP**. See [contacts validation rules](https://www.callfire.com/help/docs/getting-started/managing-contacts/validating-contacts#section1)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/contacts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateContactsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceIDList])
                res.resource_id_list = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def delete_contact(self, request: operations.DeleteContactRequest, security: operations.DeleteContactSecurity) -> operations.DeleteContactResponse:
        r"""Delete a contact
        Deletes a contact instance from account
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteContactRequest, base_url, '/contacts/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteContactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def delete_contact_list(self, request: operations.DeleteContactListRequest, security: operations.DeleteContactListSecurity) -> operations.DeleteContactListResponse:
        r"""Delete a contact list
        Deletes a contact list, included contacts will not be deleted.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteContactListRequest, base_url, '/contacts/lists/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteContactListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def delete_do_not_contact(self, request: operations.DeleteDoNotContactRequest, security: operations.DeleteDoNotContactSecurity) -> operations.DeleteDoNotContactResponse:
        r"""Delete do not contact (dnc) number. If number contains commas treat as list of numbers
        Delete a Do Not Contact (DNC) contact entry.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDoNotContactRequest, base_url, '/contacts/dncs/{number}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDoNotContactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def delete_do_not_contacts_by_source(self, request: operations.DeleteDoNotContactsBySourceRequest, security: operations.DeleteDoNotContactsBySourceSecurity) -> operations.DeleteDoNotContactsBySourceResponse:
        r"""Delete do not contact (dnc) numbers contained in source.
        Delete Do Not Contact (DNC) contact entries contained in source.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDoNotContactsBySourceRequest, base_url, '/contacts/dncs/sources/{source}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDoNotContactsBySourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def find_contact_lists(self, request: operations.FindContactListsRequest, security: operations.FindContactListsSecurity) -> operations.FindContactListsResponse:
        r"""Find contact lists
        Searches for all contact lists which are available for the current user. Returns a paged list of contact lists
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/contacts/lists'
        
        query_params = utils.get_query_params(operations.FindContactListsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindContactListsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContactListPage])
                res.contact_list_page = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def find_contacts(self, request: operations.FindContactsRequest, security: operations.FindContactsSecurity) -> operations.FindContactsResponse:
        r"""Find contacts
        Find user's contacts by id, contact list, or on any property name. Returns a paged list of contacts
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/contacts'
        
        query_params = utils.get_query_params(operations.FindContactsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindContactsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContactPage])
                res.contact_page = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def find_do_not_contacts(self, request: operations.FindDoNotContactsRequest, security: operations.FindDoNotContactsSecurity) -> operations.FindDoNotContactsResponse:
        r"""Find do not contact (dnc) items
        Searches for all Do Not Contact (DNC) objects created by user. These DoNotContact entries only affect calls/texts/campaigns on this account. Returns a paged list of DoNotContact objects
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/contacts/dncs'
        
        query_params = utils.get_query_params(operations.FindDoNotContactsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindDoNotContactsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DoNotContactPage])
                res.do_not_contact_page = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_contact(self, request: operations.GetContactRequest, security: operations.GetContactSecurity) -> operations.GetContactResponse:
        r"""Find a specific contact
        Returns a Contact instance for a given contact id. Deleted contacts can be still retrieved but will be marked as deleted. Deleted contacts will not be shown in search request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContactRequest, base_url, '/contacts/{id}', request)
        
        query_params = utils.get_query_params(operations.GetContactRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Contact])
                res.contact = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_contact_history(self, request: operations.GetContactHistoryRequest, security: operations.GetContactHistorySecurity) -> operations.GetContactHistoryResponse:
        r"""Find a contact's history
        Searches for all texts and calls attributed to a contact. Returns a list of calls and texts a contact has been involved with
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContactHistoryRequest, base_url, '/contacts/{id}/history', request)
        
        query_params = utils.get_query_params(operations.GetContactHistoryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContactHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContactHistory])
                res.contact_history = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_contact_list(self, request: operations.GetContactListRequest, security: operations.GetContactListSecurity) -> operations.GetContactListResponse:
        r"""Find a specific contact list
        Returns a single ContactList instance for a given contact list id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContactListRequest, base_url, '/contacts/lists/{id}', request)
        
        query_params = utils.get_query_params(operations.GetContactListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContactListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContactList])
                res.contact_list = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_contact_list_items(self, request: operations.GetContactListItemsRequest, security: operations.GetContactListItemsSecurity) -> operations.GetContactListItemsResponse:
        r"""Find contacts in a contact list
        Searches for all entries in a contact list with specified id. Returns a paged list of contact entries
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContactListItemsRequest, base_url, '/contacts/lists/{id}/items', request)
        
        query_params = utils.get_query_params(operations.GetContactListItemsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContactListItemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContactPage])
                res.contact_page = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_do_not_contact(self, request: operations.GetDoNotContactRequest, security: operations.GetDoNotContactSecurity) -> operations.GetDoNotContactResponse:
        r"""Get do not contact (dnc)
        Get Do Not Contact (DNC) object create by user. This DoNotContact entry only affects calls/texts/campaigns on this account.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDoNotContactRequest, base_url, '/contacts/dncs/{number}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDoNotContactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DoNotContact])
                res.do_not_contact = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_universal_do_not_contacts(self, request: operations.GetUniversalDoNotContactsRequest, security: operations.GetUniversalDoNotContactsSecurity) -> operations.GetUniversalDoNotContactsResponse:
        r"""Find universal do not contacts (udnc) associated with toNumber
        Searches for a UniversalDoNotContact object for a given phone number. Shows whether inbound/outbound actions are allowed for a given number
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUniversalDoNotContactsRequest, base_url, '/contacts/dncs/universals/{toNumber}', request)
        
        query_params = utils.get_query_params(operations.GetUniversalDoNotContactsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUniversalDoNotContactsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItemListUniversalDoNotContact])
                res.item_list_universal_do_not_contact = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def remove_contact_list_item(self, request: operations.RemoveContactListItemRequest, security: operations.RemoveContactListItemSecurity) -> operations.RemoveContactListItemResponse:
        r"""Delete a contact from a contact list
        Deletes a single contact from a contact list
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveContactListItemRequest, base_url, '/contacts/lists/{id}/items/{contactId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveContactListItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def remove_contact_list_items(self, request: operations.RemoveContactListItemsRequest, security: operations.RemoveContactListItemsSecurity) -> operations.RemoveContactListItemsResponse:
        r"""Delete contacts from a contact list
        Deletes contacts from a contact list. List the contact ids in request to delete multiple contacts with one request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveContactListItemsRequest, base_url, '/contacts/lists/{id}/items', request)
        
        query_params = utils.get_query_params(operations.RemoveContactListItemsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveContactListItemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def update_contact(self, request: operations.UpdateContactRequest, security: operations.UpdateContactSecurity) -> operations.UpdateContactResponse:
        r"""Update a contact
        Updates a single contact instance with id specified. See [contact validation rules](https://www.callfire.com/help/docs/getting-started/managing-contacts/validating-contacts#section1)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateContactRequest, base_url, '/contacts/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "contact", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateContactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def update_contact_list(self, request: operations.UpdateContactListRequest, security: operations.UpdateContactListSecurity) -> operations.UpdateContactListResponse:
        r"""Update a contact list
        Updates contact list instance.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateContactListRequest, base_url, '/contacts/lists/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_contact_list_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateContactListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def update_do_not_contact(self, request: operations.UpdateDoNotContactRequest, security: operations.UpdateDoNotContactSecurity) -> operations.UpdateDoNotContactResponse:
        r"""Update an individual do not contact (dnc) number
        Update a Do Not Contact (DNC) contact entry. Can toggle whether the DNC is enabled for calls/texts.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDoNotContactRequest, base_url, '/contacts/dncs/{number}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "do_not_contact_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDoNotContactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    