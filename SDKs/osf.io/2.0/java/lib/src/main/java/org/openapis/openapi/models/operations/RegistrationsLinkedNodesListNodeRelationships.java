/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;



/**
 * RegistrationsLinkedNodesListNodeRelationships - URLs to other entities or entity collections that have a relationship to the node entity.
 */
public class RegistrationsLinkedNodesListNodeRelationships {
    /**
     * A link to the list of institutions this node is affiliated with.
     */
    
    public String affiliatedInstitutions;
    public RegistrationsLinkedNodesListNodeRelationships withAffiliatedInstitutions(String affiliatedInstitutions) {
        this.affiliatedInstitutions = affiliatedInstitutions;
        return this;
    }
    
    /**
     * A link to the list of this node's children (components).
     */
    
    public String children;
    public RegistrationsLinkedNodesListNodeRelationships withChildren(String children) {
        this.children = children;
        return this;
    }
    
    /**
     * A link to the citation details of this node.
     */
    
    public String citation;
    public RegistrationsLinkedNodesListNodeRelationships withCitation(String citation) {
        this.citation = citation;
        return this;
    }
    
    /**
     * A link to the list of comments on this node.
     */
    
    public String comments;
    public RegistrationsLinkedNodesListNodeRelationships withComments(String comments) {
        this.comments = comments;
        return this;
    }
    
    /**
     * A link to the list of contributors on this node.
     */
    
    public String contributors;
    public RegistrationsLinkedNodesListNodeRelationships withContributors(String contributors) {
        this.contributors = contributors;
        return this;
    }
    
    /**
     * A link to the list of registrations that have been initiated from this node and are still in a draft state.
     */
    
    public String draftRegistrations;
    public RegistrationsLinkedNodesListNodeRelationships withDraftRegistrations(String draftRegistrations) {
        this.draftRegistrations = draftRegistrations;
        return this;
    }
    
    /**
     * A link to the list of storage providers that have been enabled on this node.
     */
    
    public String files;
    public RegistrationsLinkedNodesListNodeRelationships withFiles(String files) {
        this.files = files;
        return this;
    }
    
    /**
     * A link to the node which this node was forked from, if this node is a fork.
     */
    
    public String forkedFrom;
    public RegistrationsLinkedNodesListNodeRelationships withForkedFrom(String forkedFrom) {
        this.forkedFrom = forkedFrom;
        return this;
    }
    
    /**
     * A link to the list of nodes that are forks of this node.
     */
    
    public String forks;
    public RegistrationsLinkedNodesListNodeRelationships withForks(String forks) {
        this.forks = forks;
        return this;
    }
    
    /**
     * A link to the list of identifiers for this node (i.e. ARK and DOI identifiers).
     */
    
    public String identifiers;
    public RegistrationsLinkedNodesListNodeRelationships withIdentifiers(String identifiers) {
        this.identifiers = identifiers;
        return this;
    }
    
    /**
     * A link to the license that has been applied to this node.
     */
    
    public String license;
    public RegistrationsLinkedNodesListNodeRelationships withLicense(String license) {
        this.license = license;
        return this;
    }
    
    /**
     * A link to the list of nodes that are linked to the current node.
     */
    
    public String linkedNodes;
    public RegistrationsLinkedNodesListNodeRelationships withLinkedNodes(String linkedNodes) {
        this.linkedNodes = linkedNodes;
        return this;
    }
    
    /**
     * A link to the list of log actions pertaining to this node.
     */
    
    public String logs;
    public RegistrationsLinkedNodesListNodeRelationships withLogs(String logs) {
        this.logs = logs;
        return this;
    }
    
    /**
     * A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead.
     */
    
    public String nodeLinks;
    public RegistrationsLinkedNodesListNodeRelationships withNodeLinks(String nodeLinks) {
        this.nodeLinks = nodeLinks;
        return this;
    }
    
    /**
     * A link to the node that is the direct parent of the current node, if the current node is a child node.
     */
    
    public String parent;
    public RegistrationsLinkedNodesListNodeRelationships withParent(String parent) {
        this.parent = parent;
        return this;
    }
    
    /**
     * A link to the list of preprints that this node relates to.
     */
    
    public String preprints;
    public RegistrationsLinkedNodesListNodeRelationships withPreprints(String preprints) {
        this.preprints = preprints;
        return this;
    }
    
    /**
     * A link to the list of registrations that have been created from this node.
     */
    
    public String registrations;
    public RegistrationsLinkedNodesListNodeRelationships withRegistrations(String registrations) {
        this.registrations = registrations;
        return this;
    }
    
    /**
     * A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node.
     */
    
    public String root;
    public RegistrationsLinkedNodesListNodeRelationships withRoot(String root) {
        this.root = root;
        return this;
    }
    
    /**
     * A link to the node that the current node was templated from, if the current node was created from a template.
     */
    
    public String templateNode;
    public RegistrationsLinkedNodesListNodeRelationships withTemplateNode(String templateNode) {
        this.templateNode = templateNode;
        return this;
    }
    
    /**
     * A link to the list of view only links that have been created for this node.
     */
    
    public String viewOnlyLinks;
    public RegistrationsLinkedNodesListNodeRelationships withViewOnlyLinks(String viewOnlyLinks) {
        this.viewOnlyLinks = viewOnlyLinks;
        return this;
    }
    
    /**
     * A link to the list of wiki pages for this node.
     */
    
    public String wikis;
    public RegistrationsLinkedNodesListNodeRelationships withWikis(String wikis) {
        this.wikis = wikis;
        return this;
    }
    
}
