"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Quote:
    r"""Access random quote service. Use this to get random quotes , quotes filtered by authors or tags etc. You need an API key to access this service."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_quote_dislike(self, request: operations.DeleteQuoteDislikeRequest, security: operations.DeleteQuoteDislikeSecurity) -> operations.DeleteQuoteDislikeResponse:
        r"""Remove the disLike for the given Quote as a user of the API Key."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote/dislike'
        
        query_params = utils.get_query_params(operations.DeleteQuoteDislikeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteQuoteDislikeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_quote_like(self, request: operations.DeleteQuoteLikeRequest, security: operations.DeleteQuoteLikeSecurity) -> operations.DeleteQuoteLikeResponse:
        r"""Remove the Like for the given Quote as a user of the API Key."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote/like'
        
        query_params = utils.get_query_params(operations.DeleteQuoteLikeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteQuoteLikeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_quote(self, request: operations.GetQuoteRequest, security: operations.GetQuoteSecurity) -> operations.GetQuoteResponse:
        r"""Gets a `Quote` with a given `id`."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote'
        
        query_params = utils.get_query_params(operations.GetQuoteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetQuoteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.QuoteResponse])
                res.quote_response = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_quote_authors_popular(self, request: operations.GetQuoteAuthorsPopularRequest, security: operations.GetQuoteAuthorsPopularSecurity) -> operations.GetQuoteAuthorsPopularResponse:
        r"""Gets a list of popular author names in the system."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote/authors/popular'
        
        query_params = utils.get_query_params(operations.GetQuoteAuthorsPopularRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetQuoteAuthorsPopularResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_quote_authors_search(self, request: operations.GetQuoteAuthorsSearchRequest, security: operations.GetQuoteAuthorsSearchSecurity) -> operations.GetQuoteAuthorsSearchResponse:
        r"""Gets a list of author names in the system."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote/authors/search'
        
        query_params = utils.get_query_params(operations.GetQuoteAuthorsSearchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetQuoteAuthorsSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_quote_categories_popular(self, request: operations.GetQuoteCategoriesPopularRequest, security: operations.GetQuoteCategoriesPopularSecurity) -> operations.GetQuoteCategoriesPopularResponse:
        r"""Gets a list of popular `Quote` Categories."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote/categories/popular'
        
        query_params = utils.get_query_params(operations.GetQuoteCategoriesPopularRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetQuoteCategoriesPopularResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_quote_categories_search(self, request: operations.GetQuoteCategoriesSearchRequest, security: operations.GetQuoteCategoriesSearchSecurity) -> operations.GetQuoteCategoriesSearchResponse:
        r"""Gets a list of `Quote` Categories matching the query string."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote/categories/search'
        
        query_params = utils.get_query_params(operations.GetQuoteCategoriesSearchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetQuoteCategoriesSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_quote_random(self, request: operations.GetQuoteRandomRequest, security: operations.GetQuoteRandomSecurity) -> operations.GetQuoteRandomResponse:
        r"""Gets a `Random Quote`. When you are in a hurry this is what you call to get a random famous quote."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote/random'
        
        query_params = utils.get_query_params(operations.GetQuoteRandomRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetQuoteRandomResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.QuoteResponse])
                res.quote_response = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_quote_search(self, request: operations.GetQuoteSearchRequest, security: operations.GetQuoteSearchSecurity) -> operations.GetQuoteSearchResponse:
        r"""Search for a `Quote` in They Said So platform. Optional `category` , `author`, `minlength`, `maxlength` params determines the filters applied while searching for the quote."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote/search'
        
        query_params = utils.get_query_params(operations.GetQuoteSearchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetQuoteSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.QuoteResponse])
                res.quote_response = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def post_quote_dislike(self, request: operations.PostQuoteDislikeRequest, security: operations.PostQuoteDislikeSecurity) -> operations.PostQuoteDislikeResponse:
        r"""Dislike the given Quote as a user of the API Key. Same as `put` but a convenient alias for those clients that don't support `put` cleanly."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote/dislike'
        
        query_params = utils.get_query_params(operations.PostQuoteDislikeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostQuoteDislikeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_quote_like(self, request: operations.PostQuoteLikeRequest, security: operations.PostQuoteLikeSecurity) -> operations.PostQuoteLikeResponse:
        r"""Like the given Quote as a user of the API Key. Same as `PUT` but a convenient alias for those clients that don't support `PUT` cleanly."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote/like'
        
        query_params = utils.get_query_params(operations.PostQuoteLikeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostQuoteLikeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_quote_dislike(self, request: operations.PutQuoteDislikeRequest, security: operations.PutQuoteDislikeSecurity) -> operations.PutQuoteDislikeResponse:
        r"""Dislike the given Quote as a user of the API Key. Some clients don't cleanly support `PUT`, in such scenarios use the `POST` version of this."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote/dislike'
        
        query_params = utils.get_query_params(operations.PutQuoteDislikeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutQuoteDislikeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_quote_like(self, request: operations.PutQuoteLikeRequest, security: operations.PutQuoteLikeSecurity) -> operations.PutQuoteLikeResponse:
        r"""Like the given Quote as a user of the API Key. Some clients don't cleanly support `PUT`, in such scenarios use the `POST` version of this."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quote/like'
        
        query_params = utils.get_query_params(operations.PutQuoteLikeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutQuoteLikeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    