// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ScanCrawlerStateEnum - The current state of the crawler
type ScanCrawlerStateEnum string

const (
	ScanCrawlerStateEnumStarted ScanCrawlerStateEnum = "started"
	ScanCrawlerStateEnumEnded   ScanCrawlerStateEnum = "ended"
)

func (e *ScanCrawlerStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "started":
		fallthrough
	case "ended":
		*e = ScanCrawlerStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ScanCrawlerStateEnum: %s", s)
	}
}

// ScanCrawlerStatus - The number of crawled URLs and total number of URLs in the queue
type ScanCrawlerStatus struct {
	// Number of crawled URLs
	Zero *int64 `json:"0,omitempty"`
	// Total number of URLs in the queue
	One *int64 `json:"1,omitempty"`
}

// ScanCrawler - Information on the status of the crawling step of the scanning process
type ScanCrawler struct {
	// List of possible errors from the crawler
	Error []string `json:"error,omitempty"`
	// The current state of the crawler
	State *ScanCrawlerStateEnum `json:"state,omitempty"`
	// The number of crawled URLs and total number of URLs in the queue
	Status *ScanCrawlerStatus `json:"status,omitempty"`
	// List of possible warnings from the crawler
	Warning []string `json:"warning,omitempty"`
}

// ScanFingerprinterStateEnum - The current state of the fingerprinter
type ScanFingerprinterStateEnum string

const (
	ScanFingerprinterStateEnumStarted ScanFingerprinterStateEnum = "started"
	ScanFingerprinterStateEnumEnded   ScanFingerprinterStateEnum = "ended"
)

func (e *ScanFingerprinterStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "started":
		fallthrough
	case "ended":
		*e = ScanFingerprinterStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ScanFingerprinterStateEnum: %s", s)
	}
}

// ScanFingerprinter - Information on the status of the crawling step of the scanning process
type ScanFingerprinter struct {
	// The number of detected frameworks/software on the target
	Count *int64 `json:"count,omitempty"`
	// List of possible errors from the fingerprinter
	Error []string `json:"error,omitempty"`
	// The current state of the fingerprinter
	State *ScanFingerprinterStateEnum `json:"state,omitempty"`
	// List of possible warnings from the fingerprinter
	Warning []string `json:"warning,omitempty"`
}

// ScanScannerStateEnum - The current state of the scanner
type ScanScannerStateEnum string

const (
	ScanScannerStateEnumStarted ScanScannerStateEnum = "started"
	ScanScannerStateEnumEnded   ScanScannerStateEnum = "ended"
)

func (e *ScanScannerStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "started":
		fallthrough
	case "ended":
		*e = ScanScannerStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ScanScannerStateEnum: %s", s)
	}
}

// ScanScannerStatus - The number of scanner tasks completed and total number of tasks in the queue
type ScanScannerStatus struct {
	// Number of completed tasks
	Zero *int64 `json:"0,omitempty"`
	// Total number of tasks in the queue
	One *int64 `json:"1,omitempty"`
}

// ScanScanner - Information on the status of the search for vulnerabilities of the scanning process
type ScanScanner struct {
	// List of possible errors from the scanner
	Error []string `json:"error,omitempty"`
	// The current state of the scanner
	State *ScanScannerStateEnum `json:"state,omitempty"`
	// The number of scanner tasks completed and total number of tasks in the queue
	Status *ScanScannerStatus `json:"status,omitempty"`
	// List of possible warnings from the scanner
	Warning []string `json:"warning,omitempty"`
}

// Scan - Event object.
type Scan struct {
	// Date time of the last change
	Changed *time.Time `json:"changed,omitempty"`
	// User that last modified the object
	ChangedBy *ChangedBy `json:"changed_by,omitempty"`
	// Date time of scan completion
	Completed *time.Time `json:"completed,omitempty"`
	// Information on the status of the crawling step of the scanning process
	Crawler *ScanCrawler `json:"crawler,omitempty"`
	// Date time of creation
	Created *time.Time `json:"created,omitempty"`
	// User that created the object
	CreatedBy *CreatedBy `json:"created_by,omitempty"`
	// Information on the status of the crawling step of the scanning process
	Fingerprinter *ScanFingerprinter `json:"fingerprinter,omitempty"`
	// Number of high severity findings in this scan
	Highs *int64 `json:"highs,omitempty"`
	// Object id.
	ID *string `json:"id,omitempty"`
	// Number of low severity findings in this scan
	Lows *int64 `json:"lows,omitempty"`
	// Number of medium severity findings in this scan
	Mediums *int64 `json:"mediums,omitempty"`
	// * lightning - fast simple scan
	// * normal - default profile
	// * full - does everything the default profile does and adds boolean based
	// SQL injection tests
	// * safe - doesn't use any content changing methods (no POST, DELETE, etc)
	// and tries fewer payloads for SQL injection tests
	//
	ScanProfile *ScanProfileEnum `json:"scan_profile,omitempty"`
	// Information on the status of the search for vulnerabilities of the scanning process
	Scanner *ScanScanner `json:"scanner,omitempty"`
	// Date time of scan start
	Started *time.Time `json:"started,omitempty"`
	// Current scan status:
	//   * queued - Scan queued to start
	//   * started - Scan currently running
	//   * under_review - Scan is complete but we need to verify some findings
	//   * completed - Scan complete
	//   * completed_with_errors - Scan complete with error(s) in non essential modules
	//   * failed - Something went seriously wrong during the scan
	//   * canceled - Scan was canceled
	//   * canceling - Stopping scan
	//
	Status *ScanStatusEnum `json:"status,omitempty"`
	Target *TargetSimple   `json:"target,omitempty"`
}
