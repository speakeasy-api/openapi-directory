<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootVcdCluster 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a vCD Cluster
     * 
     * Create a vCD Cluster object by providing the address of the vCD Cluster and the credentials for an account on the vCD Cluster that has administrator privileges. This request initiates an asynchronous job to connect with the vCD Cluster and retrieve the required metadata.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\VcdClusterConfig $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateVcdClusterV1Response
     */
	public function createVcdClusterV1(
        \OpenAPI\OpenAPI\Models\Shared\VcdClusterConfig $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateVcdClusterV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/cluster');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateVcdClusterV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove vCD Cluster
     * 
     * Start an asynchronous job to remove a vCD Cluster object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVcdClusterV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVcdClusterV1Response
     */
	public function deleteVcdClusterV1(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVcdClusterV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVcdClusterV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/cluster/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteVcdClusterV1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVcdClusterV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get vCD Cluster job status
     * 
     * Retrieve the details of a specified asynchronous job for a vCD Cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVcdClusterAsyncRequestStatusV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVcdClusterAsyncRequestStatusV1Response
     */
	public function getVcdClusterAsyncRequestStatusV1(
        \OpenAPI\OpenAPI\Models\Operations\GetVcdClusterAsyncRequestStatusV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVcdClusterAsyncRequestStatusV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/cluster/request/{id}', \OpenAPI\OpenAPI\Models\Operations\GetVcdClusterAsyncRequestStatusV1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVcdClusterAsyncRequestStatusV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get vCD Cluster details
     * 
     * Retrieve detailed information for a vCD Cluster object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVcdClusterV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVcdClusterV1Response
     */
	public function getVcdClusterV1(
        \OpenAPI\OpenAPI\Models\Operations\GetVcdClusterV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVcdClusterV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/cluster/{id}', \OpenAPI\OpenAPI\Models\Operations\GetVcdClusterV1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVcdClusterV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vcdClusterSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VcdClusterSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get summary for all vCD Clusters
     * 
     * Retrieve summary information for all vCD cluster objects.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryVcdClusterV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryVcdClusterV1Response
     */
	public function queryVcdClusterV1(
        \OpenAPI\OpenAPI\Models\Operations\QueryVcdClusterV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryVcdClusterV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/cluster');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryVcdClusterV1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryVcdClusterV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vcdClusterSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VcdClusterSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get VimServers of a vCD Cluster
     * 
     * Retrieves the VimServer representation of the vCenter Servers that are attached to a specified vCD Cluster object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryVcdVimServerV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryVcdVimServerV1Response
     */
	public function queryVcdVimServerV1(
        \OpenAPI\OpenAPI\Models\Operations\QueryVcdVimServerV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryVcdVimServerV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/cluster/{id}/vimserver', \OpenAPI\OpenAPI\Models\Operations\QueryVcdVimServerV1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryVcdVimServerV1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryVcdVimServerV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vimserverSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VimserverSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Refresh a vCD Cluster
     * 
     * Start an asynchronous job to refresh the metadata for a specified vCD Cluster object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RefreshVcdClusterV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RefreshVcdClusterV1Response
     */
	public function refreshVcdClusterV1(
        \OpenAPI\OpenAPI\Models\Operations\RefreshVcdClusterV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RefreshVcdClusterV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/cluster/{id}/refresh', \OpenAPI\OpenAPI\Models\Operations\RefreshVcdClusterV1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RefreshVcdClusterV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change vCD Cluster object
     * 
     * Modify the hostname and credentials of a specified vCD Cluster object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateVcdClusterV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateVcdClusterV1Response
     */
	public function updateVcdClusterV1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateVcdClusterV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateVcdClusterV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/cluster/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateVcdClusterV1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "vcdClusterPatch", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateVcdClusterV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vcdClusterSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VcdClusterSummary', 'json');
            }
        }

        return $response;
    }
}