/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A document specifying changes to a sampling rule's configuration.
 */
export class UpdateSamplingRuleRequestBodySamplingRuleUpdate extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Attributes" })
  attributes?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "FixedRate" })
  fixedRate?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "HTTPMethod" })
  httpMethod?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Host" })
  host?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Priority" })
  priority?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ReservoirSize" })
  reservoirSize?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ResourceARN" })
  resourceARN?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RuleARN" })
  ruleARN?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RuleName" })
  ruleName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ServiceName" })
  serviceName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ServiceType" })
  serviceType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "URLPath" })
  urlPath?: string;
}

export class UpdateSamplingRuleRequestBody extends SpeakeasyBase {
  /**
   * A document specifying changes to a sampling rule's configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SamplingRuleUpdate" })
  @Type(() => UpdateSamplingRuleRequestBodySamplingRuleUpdate)
  samplingRuleUpdate: UpdateSamplingRuleRequestBodySamplingRuleUpdate;
}

export class UpdateSamplingRuleRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateSamplingRuleRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateSamplingRuleResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottledException
   */
  @SpeakeasyMetadata()
  throttledException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateSamplingRuleResult?: shared.UpdateSamplingRuleResult;
}
