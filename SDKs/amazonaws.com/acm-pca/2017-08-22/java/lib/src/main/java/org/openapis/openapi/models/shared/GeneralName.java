/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GeneralName - Describes an ASN.1 X.400 &lt;code&gt;GeneralName&lt;/code&gt; as defined in &lt;a href="https://datatracker.ietf.org/doc/html/rfc5280"&gt;RFC 5280&lt;/a&gt;. Only one of the following naming options should be provided. Providing more than one option results in an &lt;code&gt;InvalidArgsException&lt;/code&gt; error.
 */
public class GeneralName {
    /**
     * Contains information about the certificate subject. The &lt;code&gt;Subject&lt;/code&gt; field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The &lt;code&gt;Subject &lt;/code&gt;must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DirectoryName")
    public Asn1Subject directoryName;

    public GeneralName withDirectoryName(Asn1Subject directoryName) {
        this.directoryName = directoryName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DnsName")
    public String dnsName;

    public GeneralName withDnsName(String dnsName) {
        this.dnsName = dnsName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EdiPartyName")
    public EdiPartyName ediPartyName;

    public GeneralName withEdiPartyName(EdiPartyName ediPartyName) {
        this.ediPartyName = ediPartyName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IpAddress")
    public String ipAddress;

    public GeneralName withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OtherName")
    public OtherName otherName;

    public GeneralName withOtherName(OtherName otherName) {
        this.otherName = otherName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RegisteredId")
    public String registeredId;

    public GeneralName withRegisteredId(String registeredId) {
        this.registeredId = registeredId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Rfc822Name")
    public String rfc822Name;

    public GeneralName withRfc822Name(String rfc822Name) {
        this.rfc822Name = rfc822Name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UniformResourceIdentifier")
    public String uniformResourceIdentifier;

    public GeneralName withUniformResourceIdentifier(String uniformResourceIdentifier) {
        this.uniformResourceIdentifier = uniformResourceIdentifier;
        return this;
    }
    
    public GeneralName(){}
}
