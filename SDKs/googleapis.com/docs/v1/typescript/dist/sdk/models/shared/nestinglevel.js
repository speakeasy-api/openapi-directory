"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NestingLevel = exports.NestingLevelGlyphTypeEnum = exports.NestingLevelBulletAlignmentEnum = void 0;
var utils_1 = require("../../../internal/utils");
var dimension_1 = require("./dimension");
var textstyle_1 = require("./textstyle");
var class_transformer_1 = require("class-transformer");
/**
 * The alignment of the bullet within the space allotted for rendering the bullet.
 */
var NestingLevelBulletAlignmentEnum;
(function (NestingLevelBulletAlignmentEnum) {
    NestingLevelBulletAlignmentEnum["BulletAlignmentUnspecified"] = "BULLET_ALIGNMENT_UNSPECIFIED";
    NestingLevelBulletAlignmentEnum["Start"] = "START";
    NestingLevelBulletAlignmentEnum["Center"] = "CENTER";
    NestingLevelBulletAlignmentEnum["End"] = "END";
})(NestingLevelBulletAlignmentEnum = exports.NestingLevelBulletAlignmentEnum || (exports.NestingLevelBulletAlignmentEnum = {}));
/**
 * The type of glyph used by bullets when paragraphs at this level of nesting are ordered. The glyph type determines the type of glyph used to replace placeholders within the glyph_format when paragraphs at this level of nesting are ordered. For example, if the nesting level is 0, the glyph_format is `%0.` and the glyph type is DECIMAL, then the rendered glyph would replace the placeholder `%0` in the glyph format with a number corresponding to list item's order within the list.
 */
var NestingLevelGlyphTypeEnum;
(function (NestingLevelGlyphTypeEnum) {
    NestingLevelGlyphTypeEnum["GlyphTypeUnspecified"] = "GLYPH_TYPE_UNSPECIFIED";
    NestingLevelGlyphTypeEnum["None"] = "NONE";
    NestingLevelGlyphTypeEnum["Decimal"] = "DECIMAL";
    NestingLevelGlyphTypeEnum["ZeroDecimal"] = "ZERO_DECIMAL";
    NestingLevelGlyphTypeEnum["UpperAlpha"] = "UPPER_ALPHA";
    NestingLevelGlyphTypeEnum["Alpha"] = "ALPHA";
    NestingLevelGlyphTypeEnum["UpperRoman"] = "UPPER_ROMAN";
    NestingLevelGlyphTypeEnum["Roman"] = "ROMAN";
})(NestingLevelGlyphTypeEnum = exports.NestingLevelGlyphTypeEnum || (exports.NestingLevelGlyphTypeEnum = {}));
/**
 * Contains properties describing the look and feel of a list bullet at a given level of nesting.
 */
var NestingLevel = /** @class */ (function (_super) {
    __extends(NestingLevel, _super);
    function NestingLevel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bulletAlignment" }),
        __metadata("design:type", String)
    ], NestingLevel.prototype, "bulletAlignment", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "glyphFormat" }),
        __metadata("design:type", String)
    ], NestingLevel.prototype, "glyphFormat", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "glyphSymbol" }),
        __metadata("design:type", String)
    ], NestingLevel.prototype, "glyphSymbol", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "glyphType" }),
        __metadata("design:type", String)
    ], NestingLevel.prototype, "glyphType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "indentFirstLine" }),
        (0, class_transformer_1.Type)(function () { return dimension_1.Dimension; }),
        __metadata("design:type", dimension_1.Dimension)
    ], NestingLevel.prototype, "indentFirstLine", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "indentStart" }),
        (0, class_transformer_1.Type)(function () { return dimension_1.Dimension; }),
        __metadata("design:type", dimension_1.Dimension)
    ], NestingLevel.prototype, "indentStart", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "startNumber" }),
        __metadata("design:type", Number)
    ], NestingLevel.prototype, "startNumber", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "textStyle" }),
        (0, class_transformer_1.Type)(function () { return textstyle_1.TextStyle; }),
        __metadata("design:type", textstyle_1.TextStyle)
    ], NestingLevel.prototype, "textStyle", void 0);
    return NestingLevel;
}(utils_1.SpeakeasyBase));
exports.NestingLevel = NestingLevel;
