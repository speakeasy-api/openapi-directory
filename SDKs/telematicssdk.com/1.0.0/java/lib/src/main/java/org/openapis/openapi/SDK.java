/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * # Introduction
 * We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.
 * 
 * * [CONTACT US](https://telematicssdk.com)
 * * [SANDBOX](https://userdatahub.com)
 * * [DEV.PORTAL](https://docs.telematicssdk.com)
 * * [DEMO APP](https://raxeltelematics.com/telematics-app)
 * 
 * 
 * # Overview
 * Datamotion provides telematics infrastructure for mobile applications. 
 * 
 * Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application
 * 
 * There are 3 groups of methods:
 * * 1 - user management
 * * 2 - statistics for mobile app
 * * 3 - statistics for back-end(s)
 * 
 * in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns)
 * # Possible architecture
 * 
 * There are three common schemes that are used by our clients. These schemes can be combined
 * * Collect, Process, Store (required: 1&amp;2)
 * * Collect, Process (required: 1&amp; sns)
 * * Collect (required 1&amp;sns)
 * 
 * 
 * ## Collect, Process, Store
 * ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)
 * 
 * ## Collect, Process
 * ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)
 * 
 * ## Collect
 * ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)
 * 
 * ***
 * ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)
 * 
 * # Common use-cases:
 * * Safe and efficient driving
 * * Usage-based insurance
 * * Safe driving assessment
 * * Driver assessment
 * * Trip log
 * * Geo-analysis
 * * Accident monitoring
 * * Driving engagements
 * * Location based services
 * * Realtime Tracking
 * and beyond
 * 
 * # How to start
 * * Register a [SANDBOX ACCOUNT](https://userdatahub.com)
 * * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials) 
 * * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)
 * 
 * # Authentication
 * To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -&gt; management -&gt; user-service credentials
 * 
 * Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://api.telematicssdk.com",
        "https://mobilesdk.telematicssdk.com",
	};
  	
    /**
     * # Introduction
     * These API services designed to use it inside a mobile applications to get statistics data and services directly from telematics platform and show it in the app
     * 
     * # Scheme
     * ![API statistics](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/API+statistics+integration.png)
     */
    public TwoForMobileAppOptional twoForMobileAppOptional;
    public Two1UserStatisticsOptional two1UserStatisticsOptional;
    public Two2UserTripsOptional two2UserTripsOptional;
    public Two4UserSafeScoringOptional two4UserSafeScoringOptional;
    /**
     * # Introduction
     * The methods are required to have an admin authentication.
     * 
     * # How to get admin credentials
     * Please create admin credentials in [Datahub](https://userdatahub.com) and use method v1/Auth/Login (1. User management)
     * 
     * # Scheme
     * ![Admin statistics integration](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/admin+statistics+integration.png)
     */
    public ThreeForBackEndOptional threeForBackEndOptional;
    public ConsolidatedSafeScoring consolidatedSafeScoring;
    public ConsolidatedStatistics consolidatedStatistics;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
		
		this.twoForMobileAppOptional = new TwoForMobileAppOptional(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.two1UserStatisticsOptional = new Two1UserStatisticsOptional(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.two2UserTripsOptional = new Two2UserTripsOptional(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.two4UserSafeScoringOptional = new Two4UserSafeScoringOptional(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.threeForBackEndOptional = new ThreeForBackEndOptional(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.consolidatedSafeScoring = new ConsolidatedSafeScoring(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.consolidatedStatistics = new ConsolidatedStatistics(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}