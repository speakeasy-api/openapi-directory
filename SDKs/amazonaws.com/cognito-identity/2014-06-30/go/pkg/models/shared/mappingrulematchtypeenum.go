// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MappingRuleMatchTypeEnum string

const (
	MappingRuleMatchTypeEnumEquals     MappingRuleMatchTypeEnum = "Equals"
	MappingRuleMatchTypeEnumContains   MappingRuleMatchTypeEnum = "Contains"
	MappingRuleMatchTypeEnumStartsWith MappingRuleMatchTypeEnum = "StartsWith"
	MappingRuleMatchTypeEnumNotEqual   MappingRuleMatchTypeEnum = "NotEqual"
)

func (e MappingRuleMatchTypeEnum) ToPointer() *MappingRuleMatchTypeEnum {
	return &e
}

func (e *MappingRuleMatchTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Equals":
		fallthrough
	case "Contains":
		fallthrough
	case "StartsWith":
		fallthrough
	case "NotEqual":
		*e = MappingRuleMatchTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MappingRuleMatchTypeEnum: %v", v)
	}
}
