// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RequestUserXSdsDateFormatEnum - Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
type RequestUserXSdsDateFormatEnum string

const (
	RequestUserXSdsDateFormatEnumUtc    RequestUserXSdsDateFormatEnum = "UTC"
	RequestUserXSdsDateFormatEnumLocal  RequestUserXSdsDateFormatEnum = "LOCAL"
	RequestUserXSdsDateFormatEnumOffset RequestUserXSdsDateFormatEnum = "OFFSET"
	RequestUserXSdsDateFormatEnumEpoch  RequestUserXSdsDateFormatEnum = "EPOCH"
	RequestUserXSdsDateFormatEnumLeet   RequestUserXSdsDateFormatEnum = "LEET"
)

func (e *RequestUserXSdsDateFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UTC":
		fallthrough
	case "LOCAL":
		fallthrough
	case "OFFSET":
		fallthrough
	case "EPOCH":
		fallthrough
	case "LEET":
		*e = RequestUserXSdsDateFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestUserXSdsDateFormatEnum: %s", s)
	}
}

type RequestUserRequest struct {
	// Authentication token
	XSdsAuthToken *string `header:"style=simple,explode=false,name=X-Sds-Auth-Token"`
	// Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
	XSdsDateFormat *RequestUserXSdsDateFormatEnum `header:"style=simple,explode=false,name=X-Sds-Date-Format"`
	// Filter users with DIRECT or DIRECT **AND** EFFECTIVE roles.
	//
	// * `false`: DIRECT roles
	//
	// * `true`: DIRECT **AND** EFFECTIVE roles
	//
	// DIRECT means: e.g. user gets role **directly** granted from someone with _grant permission_ right.
	//
	// EFFECTIVE means: e.g. user gets role through **group membership**.
	EffectiveRoles *bool `queryParam:"style=form,explode=true,name=effective_roles"`
	// User ID
	UserID int64 `pathParam:"style=simple,explode=false,name=user_id"`
}

type RequestUserResponse struct {
	ContentType string
	// Bad Request
	ErrorResponse *shared.ErrorResponse
	StatusCode    int
	RawResponse   *http.Response
	// OK
	UserData *shared.UserData
}
