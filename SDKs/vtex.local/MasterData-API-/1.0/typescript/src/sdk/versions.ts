/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Master Data documents are versioned. This means that for each change a new version is generated. The `versions` APIs allows to query the versions and also apply the state of a document to the most current version.
 */
export class Versions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get version
   *
   * @remarks
   * Returns the version of a document.
   */
  getversion(
    req: operations.GetversionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetversionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetversionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/dataentities/{acronym}/documents/{id}/versions/{versionId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetversionResponse =
        new operations.GetversionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getversion = utils.objectToClass(
              httpRes?.data,
              shared.Getversion
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List versions
   *
   * @remarks
   * Allows to list the versions of a document.
   */
  listversions(
    req: operations.ListversionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListversionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListversionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/dataentities/{acronym}/documents/{id}/versions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListversionsResponse =
        new operations.ListversionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listversions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.listversions = utils.objectToClass(
              httpRes?.data,
              shared.Listversion,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Put version
   *
   * @remarks
   * Updates document with version values.
   */
  putversion(
    req: operations.PutversionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutversionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutversionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/dataentities/{acronym}/documents/{id}/versions/{versionId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutversionResponse =
        new operations.PutversionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putversion = utils.objectToClass(
              httpRes?.data,
              shared.Putversion
            );
          }
          break;
      }

      return res;
    });
  }
}
