// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type BuildBatchPhaseTypeEnum string

const (
	BuildBatchPhaseTypeEnumSubmitted         BuildBatchPhaseTypeEnum = "SUBMITTED"
	BuildBatchPhaseTypeEnumDownloadBatchspec BuildBatchPhaseTypeEnum = "DOWNLOAD_BATCHSPEC"
	BuildBatchPhaseTypeEnumInProgress        BuildBatchPhaseTypeEnum = "IN_PROGRESS"
	BuildBatchPhaseTypeEnumCombineArtifacts  BuildBatchPhaseTypeEnum = "COMBINE_ARTIFACTS"
	BuildBatchPhaseTypeEnumSucceeded         BuildBatchPhaseTypeEnum = "SUCCEEDED"
	BuildBatchPhaseTypeEnumFailed            BuildBatchPhaseTypeEnum = "FAILED"
	BuildBatchPhaseTypeEnumStopped           BuildBatchPhaseTypeEnum = "STOPPED"
)

func (e *BuildBatchPhaseTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SUBMITTED":
		fallthrough
	case "DOWNLOAD_BATCHSPEC":
		fallthrough
	case "IN_PROGRESS":
		fallthrough
	case "COMBINE_ARTIFACTS":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		fallthrough
	case "STOPPED":
		*e = BuildBatchPhaseTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BuildBatchPhaseTypeEnum: %s", s)
	}
}
