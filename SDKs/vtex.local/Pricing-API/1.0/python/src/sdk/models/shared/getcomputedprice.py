"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Getcomputedprice:
    r"""OK"""
    
    list_price: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listPrice') }})
    r"""Trade Policy List Price, also known as \\"from\\" price."""  
    price_valid_until: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceValidUntil') }})
    r"""Date until when the computed price will be valid, due to price scheduling. If no price scheduling applies, this will be set a year from the current time."""  
    selling_price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellingPrice') }})
    r"""Computed Price before applying coupons, promotions and taxes. This price may change before reaching the shelf."""  
    trade_policy_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tradePolicyId') }})
    r"""Trade Policy ID."""  
    cost_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costPrice'), 'exclude': lambda f: f is None }})
    r"""Cost price."""  
    