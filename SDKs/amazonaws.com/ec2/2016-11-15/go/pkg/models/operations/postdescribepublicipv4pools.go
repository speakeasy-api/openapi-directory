// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribePublicIpv4PoolsActionEnum
type POSTDescribePublicIpv4PoolsActionEnum string

const (
	POSTDescribePublicIpv4PoolsActionEnumDescribePublicIpv4Pools POSTDescribePublicIpv4PoolsActionEnum = "DescribePublicIpv4Pools"
)

func (e *POSTDescribePublicIpv4PoolsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribePublicIpv4Pools":
		*e = POSTDescribePublicIpv4PoolsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribePublicIpv4PoolsActionEnum: %s", s)
	}
}

// POSTDescribePublicIpv4PoolsVersionEnum
type POSTDescribePublicIpv4PoolsVersionEnum string

const (
	POSTDescribePublicIpv4PoolsVersionEnumTwoThousandAndSixteen1115 POSTDescribePublicIpv4PoolsVersionEnum = "2016-11-15"
)

func (e *POSTDescribePublicIpv4PoolsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = POSTDescribePublicIpv4PoolsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribePublicIpv4PoolsVersionEnum: %s", s)
	}
}

type POSTDescribePublicIpv4PoolsQueryParams struct {
	Action POSTDescribePublicIpv4PoolsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string                                `queryParam:"style=form,explode=true,name=NextToken"`
	Version   POSTDescribePublicIpv4PoolsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTDescribePublicIpv4PoolsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribePublicIpv4PoolsRequest struct {
	QueryParams POSTDescribePublicIpv4PoolsQueryParams
	Headers     POSTDescribePublicIpv4PoolsHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTDescribePublicIpv4PoolsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
