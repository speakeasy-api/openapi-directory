"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import closeapproachdata as shared_closeapproachdata
from ..shared import estimateddiametercontainer as shared_estimateddiametercontainer
from ..shared import orbitaldata as shared_orbitaldata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NearEarthObject:
    r"""OK"""
    
    absolute_magnitude_h: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('absolute_magnitude_h'), 'exclude': lambda f: f is None }})
    r"""Is a measure of an asteroids brightness"""  
    close_approach_data: Optional[list[shared_closeapproachdata.CloseApproachData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('close_approach_data'), 'exclude': lambda f: f is None }})
    r"""Close approach information of the Asteroid"""  
    designation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('designation'), 'exclude': lambda f: f is None }})  
    estimated_diameter: Optional[shared_estimateddiametercontainer.EstimatedDiameterContainer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_diameter'), 'exclude': lambda f: f is None }})  
    is_potentially_hazardous_asteroid: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_potentially_hazardous_asteroid'), 'exclude': lambda f: f is None }})  
    is_sentry_object: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_sentry_object'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    name_limited: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name_limited'), 'exclude': lambda f: f is None }})  
    nasa_jpl_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nasa_jpl_url'), 'exclude': lambda f: f is None }})
    r"""A Link to the NASA JPL Small-Body Database website"""  
    neo_reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('neo_reference_id'), 'exclude': lambda f: f is None }})
    r"""The reference ID of the Asteroid - This correlates to the SPK ID for the JPL NEO data"""  
    orbital_data: Optional[shared_orbitaldata.OrbitalData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orbital_data'), 'exclude': lambda f: f is None }})  
    sentry_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sentry_data'), 'exclude': lambda f: f is None }})  
    