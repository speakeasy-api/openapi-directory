/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://microvisor.twilio.com",
	};
    /**
	 * CREATE_ACCOUNT_CONFIG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ACCOUNT_CONFIG_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * CREATE_ACCOUNT_SECRET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ACCOUNT_SECRET_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * CREATE_DEVICE_CONFIG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_DEVICE_CONFIG_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * CREATE_DEVICE_SECRET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_DEVICE_SECRET_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * DELETE_ACCOUNT_CONFIG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ACCOUNT_CONFIG_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * DELETE_ACCOUNT_SECRET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ACCOUNT_SECRET_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * DELETE_APP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_APP_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * DELETE_DEVICE_CONFIG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_DEVICE_CONFIG_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * DELETE_DEVICE_SECRET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_DEVICE_SECRET_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * FETCH_ACCOUNT_CONFIG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ACCOUNT_CONFIG_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * FETCH_ACCOUNT_SECRET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ACCOUNT_SECRET_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * FETCH_APP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_APP_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * FETCH_APP_MANIFEST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_APP_MANIFEST_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * FETCH_DEVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DEVICE_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * FETCH_DEVICE_CONFIG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DEVICE_CONFIG_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * FETCH_DEVICE_SECRET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DEVICE_SECRET_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * LIST_ACCOUNT_CONFIG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ACCOUNT_CONFIG_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * LIST_ACCOUNT_SECRET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ACCOUNT_SECRET_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * LIST_APP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_APP_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * LIST_DEVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_DEVICE_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * LIST_DEVICE_CONFIG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_DEVICE_CONFIG_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * LIST_DEVICE_SECRET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_DEVICE_SECRET_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * UPDATE_ACCOUNT_CONFIG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ACCOUNT_CONFIG_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * UPDATE_ACCOUNT_SECRET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ACCOUNT_SECRET_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * UPDATE_DEVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_DEVICE_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * UPDATE_DEVICE_CONFIG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_DEVICE_CONFIG_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
    /**
	 * UPDATE_DEVICE_SECRET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_DEVICE_SECRET_SERVERS = {
        "https://microvisor.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * Create a config for an Account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateAccountConfigResponse createAccountConfig(org.openapis.openapi.models.operations.CreateAccountConfigRequest request) throws Exception {
        String baseUrl = CREATE_ACCOUNT_CONFIG_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Configs");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateAccountConfigResponse res = new org.openapis.openapi.models.operations.CreateAccountConfigResponse() {{
            microvisorV1AccountConfig = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MicrovisorV1AccountConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MicrovisorV1AccountConfig.class);
                res.microvisorV1AccountConfig = out;
            }
        }

        return res;
    }

    /**
     * Create a secret for an Account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateAccountSecretResponse createAccountSecret(org.openapis.openapi.models.operations.CreateAccountSecretRequest request) throws Exception {
        String baseUrl = CREATE_ACCOUNT_SECRET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Secrets");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateAccountSecretResponse res = new org.openapis.openapi.models.operations.CreateAccountSecretResponse() {{
            microvisorV1AccountSecret = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MicrovisorV1AccountSecret out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MicrovisorV1AccountSecret.class);
                res.microvisorV1AccountSecret = out;
            }
        }

        return res;
    }

    /**
     * Create a config for a Microvisor Device.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeviceConfigResponse createDeviceConfig(org.openapis.openapi.models.operations.CreateDeviceConfigRequest request) throws Exception {
        String baseUrl = CREATE_DEVICE_CONFIG_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateDeviceConfigPathParams.class, baseUrl, "/v1/Devices/{DeviceSid}/Configs", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateDeviceConfigResponse res = new org.openapis.openapi.models.operations.CreateDeviceConfigResponse() {{
            microvisorV1DeviceDeviceConfig = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MicrovisorV1DeviceDeviceConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MicrovisorV1DeviceDeviceConfig.class);
                res.microvisorV1DeviceDeviceConfig = out;
            }
        }

        return res;
    }

    /**
     * Create a secret for a Microvisor Device.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeviceSecretResponse createDeviceSecret(org.openapis.openapi.models.operations.CreateDeviceSecretRequest request) throws Exception {
        String baseUrl = CREATE_DEVICE_SECRET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateDeviceSecretPathParams.class, baseUrl, "/v1/Devices/{DeviceSid}/Secrets", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateDeviceSecretResponse res = new org.openapis.openapi.models.operations.CreateDeviceSecretResponse() {{
            microvisorV1DeviceDeviceSecret = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MicrovisorV1DeviceDeviceSecret out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MicrovisorV1DeviceDeviceSecret.class);
                res.microvisorV1DeviceDeviceSecret = out;
            }
        }

        return res;
    }

    /**
     * Delete a config for an Account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteAccountConfigResponse deleteAccountConfig(org.openapis.openapi.models.operations.DeleteAccountConfigRequest request) throws Exception {
        String baseUrl = DELETE_ACCOUNT_CONFIG_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteAccountConfigPathParams.class, baseUrl, "/v1/Configs/{Key}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteAccountConfigResponse res = new org.openapis.openapi.models.operations.DeleteAccountConfigResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a secret for an Account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteAccountSecretResponse deleteAccountSecret(org.openapis.openapi.models.operations.DeleteAccountSecretRequest request) throws Exception {
        String baseUrl = DELETE_ACCOUNT_SECRET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteAccountSecretPathParams.class, baseUrl, "/v1/Secrets/{Key}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteAccountSecretResponse res = new org.openapis.openapi.models.operations.DeleteAccountSecretResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific App.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteAppResponse deleteApp(org.openapis.openapi.models.operations.DeleteAppRequest request) throws Exception {
        String baseUrl = DELETE_APP_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteAppPathParams.class, baseUrl, "/v1/Apps/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteAppResponse res = new org.openapis.openapi.models.operations.DeleteAppResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a config for a Microvisor Device.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteDeviceConfigResponse deleteDeviceConfig(org.openapis.openapi.models.operations.DeleteDeviceConfigRequest request) throws Exception {
        String baseUrl = DELETE_DEVICE_CONFIG_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteDeviceConfigPathParams.class, baseUrl, "/v1/Devices/{DeviceSid}/Configs/{Key}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteDeviceConfigResponse res = new org.openapis.openapi.models.operations.DeleteDeviceConfigResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a secret for a Microvisor Device.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteDeviceSecretResponse deleteDeviceSecret(org.openapis.openapi.models.operations.DeleteDeviceSecretRequest request) throws Exception {
        String baseUrl = DELETE_DEVICE_SECRET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteDeviceSecretPathParams.class, baseUrl, "/v1/Devices/{DeviceSid}/Secrets/{Key}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteDeviceSecretResponse res = new org.openapis.openapi.models.operations.DeleteDeviceSecretResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Retrieve a Config for an Account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchAccountConfigResponse fetchAccountConfig(org.openapis.openapi.models.operations.FetchAccountConfigRequest request) throws Exception {
        String baseUrl = FETCH_ACCOUNT_CONFIG_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchAccountConfigPathParams.class, baseUrl, "/v1/Configs/{Key}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAccountConfigResponse res = new org.openapis.openapi.models.operations.FetchAccountConfigResponse() {{
            microvisorV1AccountConfig = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MicrovisorV1AccountConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MicrovisorV1AccountConfig.class);
                res.microvisorV1AccountConfig = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a Secret for an Account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchAccountSecretResponse fetchAccountSecret(org.openapis.openapi.models.operations.FetchAccountSecretRequest request) throws Exception {
        String baseUrl = FETCH_ACCOUNT_SECRET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchAccountSecretPathParams.class, baseUrl, "/v1/Secrets/{Key}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAccountSecretResponse res = new org.openapis.openapi.models.operations.FetchAccountSecretResponse() {{
            microvisorV1AccountSecret = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MicrovisorV1AccountSecret out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MicrovisorV1AccountSecret.class);
                res.microvisorV1AccountSecret = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific App.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchAppResponse fetchApp(org.openapis.openapi.models.operations.FetchAppRequest request) throws Exception {
        String baseUrl = FETCH_APP_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchAppPathParams.class, baseUrl, "/v1/Apps/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAppResponse res = new org.openapis.openapi.models.operations.FetchAppResponse() {{
            microvisorV1App = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MicrovisorV1App out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MicrovisorV1App.class);
                res.microvisorV1App = out;
            }
        }

        return res;
    }

    /**
     * Retrieve the Manifest for an App.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchAppManifestResponse fetchAppManifest(org.openapis.openapi.models.operations.FetchAppManifestRequest request) throws Exception {
        String baseUrl = FETCH_APP_MANIFEST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchAppManifestPathParams.class, baseUrl, "/v1/Apps/{AppSid}/Manifest", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAppManifestResponse res = new org.openapis.openapi.models.operations.FetchAppManifestResponse() {{
            microvisorV1AppAppManifest = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MicrovisorV1AppAppManifest out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MicrovisorV1AppAppManifest.class);
                res.microvisorV1AppAppManifest = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Device.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeviceResponse fetchDevice(org.openapis.openapi.models.operations.FetchDeviceRequest request) throws Exception {
        String baseUrl = FETCH_DEVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDevicePathParams.class, baseUrl, "/v1/Devices/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDeviceResponse res = new org.openapis.openapi.models.operations.FetchDeviceResponse() {{
            microvisorV1Device = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MicrovisorV1Device out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MicrovisorV1Device.class);
                res.microvisorV1Device = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a Config for a Device.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeviceConfigResponse fetchDeviceConfig(org.openapis.openapi.models.operations.FetchDeviceConfigRequest request) throws Exception {
        String baseUrl = FETCH_DEVICE_CONFIG_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDeviceConfigPathParams.class, baseUrl, "/v1/Devices/{DeviceSid}/Configs/{Key}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDeviceConfigResponse res = new org.openapis.openapi.models.operations.FetchDeviceConfigResponse() {{
            microvisorV1DeviceDeviceConfig = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MicrovisorV1DeviceDeviceConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MicrovisorV1DeviceDeviceConfig.class);
                res.microvisorV1DeviceDeviceConfig = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a Secret for a Device.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeviceSecretResponse fetchDeviceSecret(org.openapis.openapi.models.operations.FetchDeviceSecretRequest request) throws Exception {
        String baseUrl = FETCH_DEVICE_SECRET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDeviceSecretPathParams.class, baseUrl, "/v1/Devices/{DeviceSid}/Secrets/{Key}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDeviceSecretResponse res = new org.openapis.openapi.models.operations.FetchDeviceSecretResponse() {{
            microvisorV1DeviceDeviceSecret = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MicrovisorV1DeviceDeviceSecret out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MicrovisorV1DeviceDeviceSecret.class);
                res.microvisorV1DeviceDeviceSecret = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Configs for an Account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListAccountConfigResponse listAccountConfig(org.openapis.openapi.models.operations.ListAccountConfigRequest request) throws Exception {
        String baseUrl = LIST_ACCOUNT_CONFIG_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Configs");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAccountConfigQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAccountConfigResponse res = new org.openapis.openapi.models.operations.ListAccountConfigResponse() {{
            listAccountConfigResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAccountConfigListAccountConfigResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAccountConfigListAccountConfigResponse.class);
                res.listAccountConfigResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Secrets for an Account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListAccountSecretResponse listAccountSecret(org.openapis.openapi.models.operations.ListAccountSecretRequest request) throws Exception {
        String baseUrl = LIST_ACCOUNT_SECRET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Secrets");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAccountSecretQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAccountSecretResponse res = new org.openapis.openapi.models.operations.ListAccountSecretResponse() {{
            listAccountSecretResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAccountSecretListAccountSecretResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAccountSecretListAccountSecretResponse.class);
                res.listAccountSecretResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Apps for an Account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListAppResponse listApp(org.openapis.openapi.models.operations.ListAppRequest request) throws Exception {
        String baseUrl = LIST_APP_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Apps");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAppQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAppResponse res = new org.openapis.openapi.models.operations.ListAppResponse() {{
            listAppResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAppListAppResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAppListAppResponse.class);
                res.listAppResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Devices registered with the Account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDeviceResponse listDevice(org.openapis.openapi.models.operations.ListDeviceRequest request) throws Exception {
        String baseUrl = LIST_DEVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Devices");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListDeviceQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListDeviceResponse res = new org.openapis.openapi.models.operations.ListDeviceResponse() {{
            listDeviceResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListDeviceListDeviceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListDeviceListDeviceResponse.class);
                res.listDeviceResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Configs for a Device.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDeviceConfigResponse listDeviceConfig(org.openapis.openapi.models.operations.ListDeviceConfigRequest request) throws Exception {
        String baseUrl = LIST_DEVICE_CONFIG_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListDeviceConfigPathParams.class, baseUrl, "/v1/Devices/{DeviceSid}/Configs", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListDeviceConfigQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListDeviceConfigResponse res = new org.openapis.openapi.models.operations.ListDeviceConfigResponse() {{
            listDeviceConfigResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListDeviceConfigListDeviceConfigResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListDeviceConfigListDeviceConfigResponse.class);
                res.listDeviceConfigResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Secrets for a Device.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDeviceSecretResponse listDeviceSecret(org.openapis.openapi.models.operations.ListDeviceSecretRequest request) throws Exception {
        String baseUrl = LIST_DEVICE_SECRET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListDeviceSecretPathParams.class, baseUrl, "/v1/Devices/{DeviceSid}/Secrets", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListDeviceSecretQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListDeviceSecretResponse res = new org.openapis.openapi.models.operations.ListDeviceSecretResponse() {{
            listDeviceSecretResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListDeviceSecretListDeviceSecretResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListDeviceSecretListDeviceSecretResponse.class);
                res.listDeviceSecretResponse = out;
            }
        }

        return res;
    }

    /**
     * Update a config for an Account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateAccountConfigResponse updateAccountConfig(org.openapis.openapi.models.operations.UpdateAccountConfigRequest request) throws Exception {
        String baseUrl = UPDATE_ACCOUNT_CONFIG_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateAccountConfigPathParams.class, baseUrl, "/v1/Configs/{Key}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateAccountConfigResponse res = new org.openapis.openapi.models.operations.UpdateAccountConfigResponse() {{
            microvisorV1AccountConfig = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MicrovisorV1AccountConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MicrovisorV1AccountConfig.class);
                res.microvisorV1AccountConfig = out;
            }
        }

        return res;
    }

    /**
     * Update a secret for an Account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateAccountSecretResponse updateAccountSecret(org.openapis.openapi.models.operations.UpdateAccountSecretRequest request) throws Exception {
        String baseUrl = UPDATE_ACCOUNT_SECRET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateAccountSecretPathParams.class, baseUrl, "/v1/Secrets/{Key}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateAccountSecretResponse res = new org.openapis.openapi.models.operations.UpdateAccountSecretResponse() {{
            microvisorV1AccountSecret = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MicrovisorV1AccountSecret out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MicrovisorV1AccountSecret.class);
                res.microvisorV1AccountSecret = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Device.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDeviceResponse updateDevice(org.openapis.openapi.models.operations.UpdateDeviceRequest request) throws Exception {
        String baseUrl = UPDATE_DEVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateDevicePathParams.class, baseUrl, "/v1/Devices/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateDeviceResponse res = new org.openapis.openapi.models.operations.UpdateDeviceResponse() {{
            microvisorV1Device = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MicrovisorV1Device out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MicrovisorV1Device.class);
                res.microvisorV1Device = out;
            }
        }

        return res;
    }

    /**
     * Update a config for a Microvisor Device.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDeviceConfigResponse updateDeviceConfig(org.openapis.openapi.models.operations.UpdateDeviceConfigRequest request) throws Exception {
        String baseUrl = UPDATE_DEVICE_CONFIG_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateDeviceConfigPathParams.class, baseUrl, "/v1/Devices/{DeviceSid}/Configs/{Key}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateDeviceConfigResponse res = new org.openapis.openapi.models.operations.UpdateDeviceConfigResponse() {{
            microvisorV1DeviceDeviceConfig = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MicrovisorV1DeviceDeviceConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MicrovisorV1DeviceDeviceConfig.class);
                res.microvisorV1DeviceDeviceConfig = out;
            }
        }

        return res;
    }

    /**
     * Update a secret for a Microvisor Device.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDeviceSecretResponse updateDeviceSecret(org.openapis.openapi.models.operations.UpdateDeviceSecretRequest request) throws Exception {
        String baseUrl = UPDATE_DEVICE_SECRET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateDeviceSecretPathParams.class, baseUrl, "/v1/Devices/{DeviceSid}/Secrets/{Key}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateDeviceSecretResponse res = new org.openapis.openapi.models.operations.UpdateDeviceSecretResponse() {{
            microvisorV1DeviceDeviceSecret = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MicrovisorV1DeviceDeviceSecret out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MicrovisorV1DeviceDeviceSecret.class);
                res.microvisorV1DeviceDeviceSecret = out;
            }
        }

        return res;
    }
}