/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class DeparturesGetForStopQueryParams {
    /**
     * Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date_utc")
    public OffsetDateTime dateUtc;
    public DeparturesGetForStopQueryParams withDateUtc(OffsetDateTime dateUtc) {
        this.dateUtc = dateUtc;
        return this;
    }
    
    /**
     * Your developer id
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=devid")
    public String devid;
    public DeparturesGetForStopQueryParams withDevid(String devid) {
        this.devid = devid;
        return this;
    }
    
    /**
     * Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=direction_id")
    public Integer directionId;
    public DeparturesGetForStopQueryParams withDirectionId(Integer directionId) {
        this.directionId = directionId;
        return this;
    }
    
    /**
     * List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.
     *             Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=expand")
    public DeparturesGetForStopExpandEnum[] expand;
    public DeparturesGetForStopQueryParams withExpand(DeparturesGetForStopExpandEnum[] expand) {
        this.expand = expand;
        return this;
    }
    
    /**
     * Indicates that stop_id parameter will accept "GTFS stop_id" data
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=gtfs")
    public Boolean gtfs;
    public DeparturesGetForStopQueryParams withGtfs(Boolean gtfs) {
        this.gtfs = gtfs;
        return this;
    }
    
    /**
     * Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include_cancelled")
    public Boolean includeCancelled;
    public DeparturesGetForStopQueryParams withIncludeCancelled(Boolean includeCancelled) {
        this.includeCancelled = includeCancelled;
        return this;
    }
    
    /**
     * Indicates if the route geopath should be returned
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include_geopath")
    public Boolean includeGeopath;
    public DeparturesGetForStopQueryParams withIncludeGeopath(Boolean includeGeopath) {
        this.includeGeopath = includeGeopath;
        return this;
    }
    
    /**
     * Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &amp;gt; 0.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=look_backwards")
    public Boolean lookBackwards;
    public DeparturesGetForStopQueryParams withLookBackwards(Boolean lookBackwards) {
        this.lookBackwards = lookBackwards;
        return this;
    }
    
    /**
     * Maximum number of results returned
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_results")
    public Integer maxResults;
    public DeparturesGetForStopQueryParams withMaxResults(Integer maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * Filter by platform number at stop
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=platform_numbers")
    public Integer[] platformNumbers;
    public DeparturesGetForStopQueryParams withPlatformNumbers(Integer[] platformNumbers) {
        this.platformNumbers = platformNumbers;
        return this;
    }
    
    /**
     * Authentication signature for request
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=signature")
    public String signature;
    public DeparturesGetForStopQueryParams withSignature(String signature) {
        this.signature = signature;
        return this;
    }
    
    /**
     * Please ignore
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=token")
    public String token;
    public DeparturesGetForStopQueryParams withToken(String token) {
        this.token = token;
        return this;
    }
    
}
