"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import classicpeopledto as shared_classicpeopledto
from ..shared import commonlanguagecombinationdto as shared_commonlanguagecombinationdto
from ..shared import instructionsdto as shared_instructionsdto
from ..shared import projectdatesdto as shared_projectdatesdto
from ..shared import taskfiledto as shared_taskfiledto
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaskCreateDTO:
    r"""Created new task for a given project."""
    
    client_task_po_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientTaskPONumber'), 'exclude': lambda f: f is None }})
    r"""client task PO number"""  
    dates: Optional[shared_projectdatesdto.ProjectDatesDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dates'), 'exclude': lambda f: f is None }})  
    files: Optional[list[shared_taskfiledto.TaskFileDTO]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('files'), 'exclude': lambda f: f is None }})
    r"""files"""  
    instructions: Optional[shared_instructionsdto.InstructionsDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructions'), 'exclude': lambda f: f is None }})  
    language_combination: Optional[shared_commonlanguagecombinationdto.CommonLanguageCombinationDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCombination'), 'exclude': lambda f: f is None }})
    r"""language combination (ie. PL -> EN)"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""name"""  
    people: Optional[shared_classicpeopledto.ClassicPeopleDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('people'), 'exclude': lambda f: f is None }})
    r"""people"""  
    specialization_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('specializationId'), 'exclude': lambda f: f is None }})
    r"""specialization"""  
    workflow_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflowId'), 'exclude': lambda f: f is None }})
    r"""workflow"""  
    