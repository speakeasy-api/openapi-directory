<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CommunicationCost 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * 
     * 52 U.S.C. 30118 allows "communications by a corporation to its stockholders and executive or administrative personnel and their families or by a labor organization to its members and their families on any subject," including the express advocacy of the election or defeat of any Federal candidate.  The costs of such communications must be reported to the Federal Election Commission under certain circumstances.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsResponse
     */
	public function getCommunicationCosts(
        \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/communication_costs/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->communicationCostPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommunicationCostPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Communication cost aggregated by candidate ID and committee ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsAggregatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsAggregatesResponse
     */
	public function getCommunicationCostsAggregates(
        \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsAggregatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsAggregatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/communication_costs/aggregates/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsAggregatesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsAggregatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->communicationCostByCandidatePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommunicationCostByCandidatePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Communication cost aggregated by candidate ID and committee ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsByCandidateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsByCandidateResponse
     */
	public function getCommunicationCostsByCandidate(
        \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsByCandidateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsByCandidateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/communication_costs/by_candidate/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsByCandidateRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsByCandidateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->communicationCostByCandidatePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommunicationCostByCandidatePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Total communications costs aggregated across committees on supported or opposed candidates by cycle or candidate election year.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsTotalsByCandidateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsTotalsByCandidateResponse
     */
	public function getCommunicationCostsTotalsByCandidate(
        \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsTotalsByCandidateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsTotalsByCandidateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/communication_costs/totals/by_candidate/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsTotalsByCandidateRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommunicationCostsTotalsByCandidateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ccTotalsByCandidatePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CCTotalsByCandidatePage', 'json');
            }
        }

        return $response;
    }
}