"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basef3pfilingpage as shared_basef3pfilingpage
from datetime import date
from typing import Optional


@dataclasses.dataclass
class GetEfileReportsPresidentialRequest:
    
    api_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""API key for https://api.data.gov. Get one at https://api.data.gov/signup."""  
    committee_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'committee_id', 'style': 'form', 'explode': True }})
    r"""A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits."""  
    file_number: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'file_number', 'style': 'form', 'explode': True }})
    r"""Filing ID number"""  
    max_receipt_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_receipt_date', 'style': 'form', 'explode': True }})
    r"""Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)"""  
    min_receipt_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_receipt_date', 'style': 'form', 'explode': True }})
    r"""Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""For paginating through results, starting at page 1"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results returned per page. Defaults to 20."""  
    q_filer: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q_filer', 'style': 'form', 'explode': True }})
    r"""Keyword search for filer name or ID"""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Provide a field to sort by. Use `-` for descending order."""  
    sort_hide_null: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_hide_null', 'style': 'form', 'explode': True }})
    r"""Hide null values on sorted column(s)."""  
    sort_null_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_null_only', 'style': 'form', 'explode': True }})
    r"""Toggle that filters out all rows having sort column that is non-null"""  
    sort_nulls_last: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_nulls_last', 'style': 'form', 'explode': True }})
    r"""Toggle that sorts null values last"""  
    

@dataclasses.dataclass
class GetEfileReportsPresidentialResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    base_f3_p_filing_page: Optional[shared_basef3pfilingpage.BaseF3PFilingPage] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    