"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import jsonschema as shared_jsonschema
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RestMethodMediaUploadProtocolsResumable:
    r"""Supports the Resumable Media Upload protocol."""
    
    multipart: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multipart'), 'exclude': lambda f: f is None }})
    r"""True if this endpoint supports uploading multipart media."""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    r"""The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RestMethodMediaUploadProtocolsSimple:
    r"""Supports uploading as a single HTTP request."""
    
    multipart: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multipart'), 'exclude': lambda f: f is None }})
    r"""True if this endpoint supports upload multipart media."""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    r"""The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RestMethodMediaUploadProtocols:
    r"""Supported upload protocols."""
    
    resumable: Optional[RestMethodMediaUploadProtocolsResumable] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resumable'), 'exclude': lambda f: f is None }})
    r"""Supports the Resumable Media Upload protocol."""  
    simple: Optional[RestMethodMediaUploadProtocolsSimple] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('simple'), 'exclude': lambda f: f is None }})
    r"""Supports uploading as a single HTTP request."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RestMethodMediaUpload:
    r"""Media upload parameters."""
    
    accept: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accept'), 'exclude': lambda f: f is None }})
    r"""MIME Media Ranges for acceptable media uploads to this method."""  
    max_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxSize'), 'exclude': lambda f: f is None }})
    r"""Maximum size of a media upload, such as \\"1MB\\", \\"2GB\\" or \\"3TB\\"."""  
    protocols: Optional[RestMethodMediaUploadProtocols] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocols'), 'exclude': lambda f: f is None }})
    r"""Supported upload protocols."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RestMethodRequest:
    r"""The schema for the request."""
    
    dollar_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('$ref'), 'exclude': lambda f: f is None }})
    r"""Schema ID for the request schema."""  
    parameter_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameterName'), 'exclude': lambda f: f is None }})
    r"""parameter name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RestMethodResponse:
    r"""The schema for the response."""
    
    dollar_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('$ref'), 'exclude': lambda f: f is None }})
    r"""Schema ID for the response schema."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RestMethod:
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of this method."""  
    etag_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etagRequired'), 'exclude': lambda f: f is None }})
    r"""Whether this method requires an ETag to be specified. The ETag is sent as an HTTP If-Match or If-None-Match header."""  
    flat_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flatPath'), 'exclude': lambda f: f is None }})
    r"""The URI path of this REST method in (RFC 6570) format without level 2 features ({+var}). Supplementary to the path property."""  
    http_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpMethod'), 'exclude': lambda f: f is None }})
    r"""HTTP method used by this method."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""A unique ID for this method. This property can be used to match methods between different versions of Discovery."""  
    media_upload: Optional[RestMethodMediaUpload] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mediaUpload'), 'exclude': lambda f: f is None }})
    r"""Media upload parameters."""  
    parameter_order: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameterOrder'), 'exclude': lambda f: f is None }})
    r"""Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the \\"most-significant\\" parameter appears first."""  
    parameters: Optional[dict[str, shared_jsonschema.JSONSchema]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})
    r"""Details for all parameters in this method."""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    r"""The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level."""  
    request: Optional[RestMethodRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request'), 'exclude': lambda f: f is None }})
    r"""The schema for the request."""  
    response: Optional[RestMethodResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response'), 'exclude': lambda f: f is None }})
    r"""The schema for the response."""  
    scopes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes'), 'exclude': lambda f: f is None }})
    r"""OAuth 2.0 scopes applicable to this method."""  
    supports_media_download: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportsMediaDownload'), 'exclude': lambda f: f is None }})
    r"""Whether this method supports media downloads."""  
    supports_media_upload: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportsMediaUpload'), 'exclude': lambda f: f is None }})
    r"""Whether this method supports media uploads."""  
    supports_subscription: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportsSubscription'), 'exclude': lambda f: f is None }})
    r"""Whether this method supports subscriptions."""  
    use_media_download_service: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useMediaDownloadService'), 'exclude': lambda f: f is None }})
    r"""Indicates that downloads from this method should use the download service URL (i.e. \\"/download\\"). Only applies if the method supports media download."""  
    