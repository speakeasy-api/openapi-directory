/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class TagResourceRequestBody extends SpeakeasyBase {
  /**
   * An array of <code>Tag</code> objects to add. Each <code>Tag</code> object is a key-value pair.
   */
  @SpeakeasyMetadata({ elemType: shared.Tag })
  @Expose({ name: "Tags" })
  @Type(() => shared.Tag)
  tags: shared.Tag[];
}

export class TagResourceRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: TagResourceRequestBody;

  /**
   * The ID specifying the EFS resource that you want to create a tag for.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ResourceId",
  })
  resourceId: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class TagResourceResponse extends SpeakeasyBase {
  /**
   * AccessPointNotFound
   */
  @SpeakeasyMetadata()
  accessPointNotFound?: any;

  /**
   * BadRequest
   */
  @SpeakeasyMetadata()
  badRequest?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * FileSystemNotFound
   */
  @SpeakeasyMetadata()
  fileSystemNotFound?: any;

  /**
   * InternalServerError
   */
  @SpeakeasyMetadata()
  internalServerError?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
