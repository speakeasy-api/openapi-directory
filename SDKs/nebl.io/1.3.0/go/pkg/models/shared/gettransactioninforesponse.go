// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type GetTransactionInfoResponseVinPreviousOutput struct {
	Addresses []string `json:"addresses,omitempty"`
	Asm       *string  `json:"asm,omitempty"`
	Hex       *string  `json:"hex,omitempty"`
	ReqSigs   *float64 `json:"reqSigs,omitempty"`
	Type      *string  `json:"type,omitempty"`
}

type GetTransactionInfoResponseVinScriptSig struct {
	Asm *string `json:"asm,omitempty"`
	Hex *string `json:"hex,omitempty"`
}

type GetTransactionInfoResponseVinTokens struct {
	// Whether the tokens are aggregatable
	AggregationPolicy *string `json:"aggregationPolicy,omitempty"`
	// Number of tokens
	Amount *float64 `json:"amount,omitempty"`
	// Decimal places the token is divisible to
	Divisibility *float64 `json:"divisibility,omitempty"`
	// TXID the token was issued in
	IssueTxid *string `json:"issueTxid,omitempty"`
	// Whether issuance of more tokens is locked
	LockStatus *bool `json:"lockStatus,omitempty"`
	// ID of the token
	TokenID *string `json:"tokenId,omitempty"`
}

type GetTransactionInfoResponseVin struct {
	PreviousOutput *GetTransactionInfoResponseVinPreviousOutput `json:"previousOutput,omitempty"`
	ScriptSig      *GetTransactionInfoResponseVinScriptSig      `json:"scriptSig,omitempty"`
	Sequence       *float64                                     `json:"sequence,omitempty"`
	Tokens         []GetTransactionInfoResponseVinTokens        `json:"tokens,omitempty"`
	// TXID of the input
	Txid *string `json:"txid,omitempty"`
	// Value of input in NEBL satoshi
	Value *float64 `json:"value,omitempty"`
	// output index
	Vout *float64 `json:"vout,omitempty"`
}

type GetTransactionInfoResponseVoutScriptPubKey struct {
	Addresses []string `json:"addresses,omitempty"`
	Asm       *string  `json:"asm,omitempty"`
	Hex       *string  `json:"hex,omitempty"`
	ReqSigs   *float64 `json:"reqSigs,omitempty"`
	Type      *string  `json:"type,omitempty"`
}

type GetTransactionInfoResponseVoutTokens struct {
	// Whether the tokens are aggregatable
	AggregationPolicy *string `json:"aggregationPolicy,omitempty"`
	// Number of tokens
	Amount *float64 `json:"amount,omitempty"`
	// Decimal places the token is divisible to
	Divisibility *float64 `json:"divisibility,omitempty"`
	// TXID the token was issued in
	IssueTxid *string `json:"issueTxid,omitempty"`
	// Whether issuance of more tokens is locked
	LockStatus *bool `json:"lockStatus,omitempty"`
	// ID of the token
	TokenID *string `json:"tokenId,omitempty"`
}

type GetTransactionInfoResponseVout struct {
	// Blockheight of this transaction
	Blockheight *float64 `json:"blockheight,omitempty"`
	// Output index
	N            *float64                                    `json:"n,omitempty"`
	ScriptPubKey *GetTransactionInfoResponseVoutScriptPubKey `json:"scriptPubKey,omitempty"`
	Tokens       []GetTransactionInfoResponseVoutTokens      `json:"tokens,omitempty"`
	// Whether this output has now been used
	Used *bool `json:"used,omitempty"`
	// Blockheight this output was used in
	UsedBlockheight *float64 `json:"usedBlockheight,omitempty"`
	// TXID this output was used in
	UsedTxid *string `json:"usedTxid,omitempty"`
	// Value of the output in NEBL satoshi
	Value *float64 `json:"value,omitempty"`
}

// GetTransactionInfoResponse - An object represending this transaction
type GetTransactionInfoResponse struct {
	// Hash of the block this transaction is in
	Blockhash *string `json:"blockhash,omitempty"`
	// Block height of this transaction
	Blockheight *float64 `json:"blockheight,omitempty"`
	// Block time of this transaction
	Blocktime *float64 `json:"blocktime,omitempty"`
	// Number of transaction confirmations
	Confirmations *float64 `json:"confirmations,omitempty"`
	// Total NEBL used as fee for this transcation in satoshis
	Fee *float64 `json:"fee,omitempty"`
	// Transaction in raw hex
	Hex *string `json:"hex,omitempty"`
	// Transaction locktime
	Locktime *float64 `json:"locktime,omitempty"`
	// Transaction time
	Time *float64 `json:"time,omitempty"`
	// Total NEBL sent in this transaction in satoshis
	Totalsent *float64 `json:"totalsent,omitempty"`
	// TXID of transaction
	Txid *string `json:"txid,omitempty"`
	// Transaction version
	Version *float64 `json:"version,omitempty"`
	// Array of transaction inputs
	Vin []GetTransactionInfoResponseVin `json:"vin,omitempty"`
	// Array of transaction outputs
	Vout []GetTransactionInfoResponseVout `json:"vout,omitempty"`
}
