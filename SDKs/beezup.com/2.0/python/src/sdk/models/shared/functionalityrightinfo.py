"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FunctionalityRightInfo:
    r"""Describe the rights for a functionality"""
    
    functionality_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('functionalityCode') }})
    r"""The functionality code"""  
    max_value_interger: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxValueInterger'), 'exclude': lambda f: f is None }})
    r"""The max value for this functionality code considering your rights"""  
    unlimited: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unlimited'), 'exclude': lambda f: f is None }})
    r"""If you can use this functionality unlimitedly"""  
    