"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddocumentaiv1documentschemaentitytypeenumvalues as shared_googleclouddocumentaiv1documentschemaentitytypeenumvalues
from ..shared import googleclouddocumentaiv1documentschemaentitytypeproperty as shared_googleclouddocumentaiv1documentschemaentitytypeproperty
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDocumentaiV1DocumentSchemaEntityType:
    r"""EntityType is the wrapper of a label of the corresponding model with detailed attributes and limitations for entity-based processors. Multiple types can also compose a dependency tree to represent nested types."""
    
    base_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('baseTypes'), 'exclude': lambda f: f is None }})
    r"""The entity type that this type is derived from. For now, one and only one should be set."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""User defined name for the type."""  
    enum_values: Optional[shared_googleclouddocumentaiv1documentschemaentitytypeenumvalues.GoogleCloudDocumentaiV1DocumentSchemaEntityTypeEnumValues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enumValues'), 'exclude': lambda f: f is None }})
    r"""Defines the a list of enum values."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the type. It must be unique within the schema file and cannot be a 'Common Type'. Besides that we use the following naming conventions: - *use `snake_casing`* - name matching is case-sensitive - Maximum 64 characters. - Must start with a letter. - Allowed characters: ASCII letters `[a-z0-9_-]`. (For backward compatibility internal infrastructure and tooling can handle any ascii character) - The `/` is sometimes used to denote a property of a type. For example `line_item/amount`. This convention is deprecated, but will still be honored for backward compatibility."""  
    properties: Optional[list[shared_googleclouddocumentaiv1documentschemaentitytypeproperty.GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})
    r"""Description the nested structure, or composition of an entity."""  
    