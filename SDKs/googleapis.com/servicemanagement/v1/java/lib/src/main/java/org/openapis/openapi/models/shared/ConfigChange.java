/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ConfigChange - Output generated from semantically comparing two versions of a service configuration. Includes detailed information about a field that have changed with applicable advice about potential consequences for the change, such as backwards-incompatibility.
 */
public class ConfigChange {
    /**
     * Collection of advice provided for this change, useful for determining the possible impact of this change.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advices")
    public Advice[] advices;

    public ConfigChange withAdvices(Advice[] advices) {
        this.advices = advices;
        return this;
    }
    
    /**
     * The type for this change, either ADDED, REMOVED, or MODIFIED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("changeType")
    public ConfigChangeChangeTypeEnum changeType;

    public ConfigChange withChangeType(ConfigChangeChangeTypeEnum changeType) {
        this.changeType = changeType;
        return this;
    }
    
    /**
     * Object hierarchy path to the change, with levels separated by a '.' character. For repeated fields, an applicable unique identifier field is used for the index (usually selector, name, or id). For maps, the term 'key' is used. If the field has no unique identifier, the numeric index is used. Examples: - visibility.rules[selector=="google.LibraryService.ListBooks"].restriction - quota.metric_rules[selector=="google"].metric_costs[key=="reads"].value - logging.producer_destinations[0]
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("element")
    public String element;

    public ConfigChange withElement(String element) {
        this.element = element;
        return this;
    }
    
    /**
     * Value of the changed object in the new Service configuration, in JSON format. This field will not be populated if ChangeType == REMOVED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newValue")
    public String newValue;

    public ConfigChange withNewValue(String newValue) {
        this.newValue = newValue;
        return this;
    }
    
    /**
     * Value of the changed object in the old Service configuration, in JSON format. This field will not be populated if ChangeType == ADDED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oldValue")
    public String oldValue;

    public ConfigChange withOldValue(String oldValue) {
        this.oldValue = oldValue;
        return this;
    }
    
    public ConfigChange(){}
}
