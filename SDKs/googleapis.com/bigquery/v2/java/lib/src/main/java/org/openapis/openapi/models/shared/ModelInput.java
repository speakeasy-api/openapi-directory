/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ModelInput {
    /**
     * The best trial_id across all training runs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bestTrialId")
    public String bestTrialId;

    public ModelInput withBestTrialId(String bestTrialId) {
        this.bestTrialId = bestTrialId;
        return this;
    }
    
    /**
     * Optional. A user-friendly description of this model.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public ModelInput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptionConfiguration")
    public EncryptionConfiguration encryptionConfiguration;

    public ModelInput withEncryptionConfiguration(EncryptionConfiguration encryptionConfiguration) {
        this.encryptionConfiguration = encryptionConfiguration;
        return this;
    }
    
    /**
     * Optional. The time when this model expires, in milliseconds since the epoch. If not present, the model will persist indefinitely. Expired models will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created models.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expirationTime")
    public String expirationTime;

    public ModelInput withExpirationTime(String expirationTime) {
        this.expirationTime = expirationTime;
        return this;
    }
    
    /**
     * Optional. A descriptive name for this model.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("friendlyName")
    public String friendlyName;

    public ModelInput withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }
    
    /**
     * Hyperparameter search spaces. These should be a subset of training_options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hparamSearchSpaces")
    public HparamSearchSpaces hparamSearchSpaces;

    public ModelInput withHparamSearchSpaces(HparamSearchSpaces hparamSearchSpaces) {
        this.hparamSearchSpaces = hparamSearchSpaces;
        return this;
    }
    
    /**
     * The labels associated with this model. You can use these to organize and group your models. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public ModelInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modelReference")
    public ModelReference modelReference;

    public ModelInput withModelReference(ModelReference modelReference) {
        this.modelReference = modelReference;
        return this;
    }
    
    /**
     * Information for all training runs in increasing order of start_time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trainingRuns")
    public TrainingRunInput[] trainingRuns;

    public ModelInput withTrainingRuns(TrainingRunInput[] trainingRuns) {
        this.trainingRuns = trainingRuns;
        return this;
    }
    
    public ModelInput(){}
}
