"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import compliancestatus_enum as shared_compliancestatus_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DisruptionCompliance:
    r"""Defines the compliance against the resiliency policy for a disruption."""
    
    compliance_status: shared_compliancestatus_enum.ComplianceStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complianceStatus') }})  
    achievable_rpo_in_secs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('achievableRpoInSecs'), 'exclude': lambda f: f is None }})  
    achievable_rto_in_secs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('achievableRtoInSecs'), 'exclude': lambda f: f is None }})  
    current_rpo_in_secs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentRpoInSecs'), 'exclude': lambda f: f is None }})  
    current_rto_in_secs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentRtoInSecs'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    rpo_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rpoDescription'), 'exclude': lambda f: f is None }})  
    rpo_reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rpoReferenceId'), 'exclude': lambda f: f is None }})  
    rto_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rtoDescription'), 'exclude': lambda f: f is None }})  
    rto_reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rtoReferenceId'), 'exclude': lambda f: f is None }})  
    