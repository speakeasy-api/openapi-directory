/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class DetailedLeadReports {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get detailed lead reports containing leads that have been received by all linked GLS accounts. Caller needs to provide their manager customer id and the associated auth credential that allows them read permissions on their linked accounts.
   */
  localservicesDetailedLeadReportsSearch(
    req: operations.LocalservicesDetailedLeadReportsSearchRequest,
    security: operations.LocalservicesDetailedLeadReportsSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LocalservicesDetailedLeadReportsSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LocalservicesDetailedLeadReportsSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/detailedLeadReports:search";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LocalservicesDetailedLeadReportsSearchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LocalservicesDetailedLeadReportsSearchResponse =
        new operations.LocalservicesDetailedLeadReportsSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleAdsHomeservicesLocalservicesV1SearchDetailedLeadReportsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleAdsHomeservicesLocalservicesV1SearchDetailedLeadReportsResponse
              );
          }
          break;
      }

      return res;
    });
  }
}
