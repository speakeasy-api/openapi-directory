/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

/**
 * The type of built-in variable to revert.
 */
export enum TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertTypeEnum {
  BuiltInVariableTypeUnspecified = "builtInVariableTypeUnspecified",
  PageUrl = "pageUrl",
  PageHostname = "pageHostname",
  PagePath = "pagePath",
  Referrer = "referrer",
  Event = "event",
  ClickElement = "clickElement",
  ClickClasses = "clickClasses",
  ClickId = "clickId",
  ClickTarget = "clickTarget",
  ClickUrl = "clickUrl",
  ClickText = "clickText",
  FirstPartyServingUrl = "firstPartyServingUrl",
  FormElement = "formElement",
  FormClasses = "formClasses",
  FormId = "formId",
  FormTarget = "formTarget",
  FormUrl = "formUrl",
  FormText = "formText",
  ErrorMessage = "errorMessage",
  ErrorUrl = "errorUrl",
  ErrorLine = "errorLine",
  NewHistoryUrl = "newHistoryUrl",
  OldHistoryUrl = "oldHistoryUrl",
  NewHistoryFragment = "newHistoryFragment",
  OldHistoryFragment = "oldHistoryFragment",
  NewHistoryState = "newHistoryState",
  OldHistoryState = "oldHistoryState",
  HistorySource = "historySource",
  ContainerVersion = "containerVersion",
  DebugMode = "debugMode",
  RandomNumber = "randomNumber",
  ContainerId = "containerId",
  AppId = "appId",
  AppName = "appName",
  AppVersionCode = "appVersionCode",
  AppVersionName = "appVersionName",
  Language = "language",
  OsVersion = "osVersion",
  Platform = "platform",
  SDKVersion = "sdkVersion",
  DeviceName = "deviceName",
  Resolution = "resolution",
  AdvertiserId = "advertiserId",
  AdvertisingTrackingEnabled = "advertisingTrackingEnabled",
  HtmlId = "htmlId",
  EnvironmentName = "environmentName",
  AmpBrowserLanguage = "ampBrowserLanguage",
  AmpCanonicalPath = "ampCanonicalPath",
  AmpCanonicalUrl = "ampCanonicalUrl",
  AmpCanonicalHost = "ampCanonicalHost",
  AmpReferrer = "ampReferrer",
  AmpTitle = "ampTitle",
  AmpClientId = "ampClientId",
  AmpClientTimezone = "ampClientTimezone",
  AmpClientTimestamp = "ampClientTimestamp",
  AmpClientScreenWidth = "ampClientScreenWidth",
  AmpClientScreenHeight = "ampClientScreenHeight",
  AmpClientScrollX = "ampClientScrollX",
  AmpClientScrollY = "ampClientScrollY",
  AmpClientMaxScrollX = "ampClientMaxScrollX",
  AmpClientMaxScrollY = "ampClientMaxScrollY",
  AmpTotalEngagedTime = "ampTotalEngagedTime",
  AmpPageViewId = "ampPageViewId",
  AmpPageLoadTime = "ampPageLoadTime",
  AmpPageDownloadTime = "ampPageDownloadTime",
  AmpGtmEvent = "ampGtmEvent",
  EventName = "eventName",
  FirebaseEventParameterCampaign = "firebaseEventParameterCampaign",
  FirebaseEventParameterCampaignAclid = "firebaseEventParameterCampaignAclid",
  FirebaseEventParameterCampaignAnid = "firebaseEventParameterCampaignAnid",
  FirebaseEventParameterCampaignClickTimestamp = "firebaseEventParameterCampaignClickTimestamp",
  FirebaseEventParameterCampaignContent = "firebaseEventParameterCampaignContent",
  FirebaseEventParameterCampaignCp1 = "firebaseEventParameterCampaignCp1",
  FirebaseEventParameterCampaignGclid = "firebaseEventParameterCampaignGclid",
  FirebaseEventParameterCampaignSource = "firebaseEventParameterCampaignSource",
  FirebaseEventParameterCampaignTerm = "firebaseEventParameterCampaignTerm",
  FirebaseEventParameterCurrency = "firebaseEventParameterCurrency",
  FirebaseEventParameterDynamicLinkAcceptTime = "firebaseEventParameterDynamicLinkAcceptTime",
  FirebaseEventParameterDynamicLinkLinkid = "firebaseEventParameterDynamicLinkLinkid",
  FirebaseEventParameterNotificationMessageDeviceTime = "firebaseEventParameterNotificationMessageDeviceTime",
  FirebaseEventParameterNotificationMessageId = "firebaseEventParameterNotificationMessageId",
  FirebaseEventParameterNotificationMessageName = "firebaseEventParameterNotificationMessageName",
  FirebaseEventParameterNotificationMessageTime = "firebaseEventParameterNotificationMessageTime",
  FirebaseEventParameterNotificationTopic = "firebaseEventParameterNotificationTopic",
  FirebaseEventParameterPreviousAppVersion = "firebaseEventParameterPreviousAppVersion",
  FirebaseEventParameterPreviousOsVersion = "firebaseEventParameterPreviousOsVersion",
  FirebaseEventParameterPrice = "firebaseEventParameterPrice",
  FirebaseEventParameterProductId = "firebaseEventParameterProductId",
  FirebaseEventParameterQuantity = "firebaseEventParameterQuantity",
  FirebaseEventParameterValue = "firebaseEventParameterValue",
  VideoProvider = "videoProvider",
  VideoUrl = "videoUrl",
  VideoTitle = "videoTitle",
  VideoDuration = "videoDuration",
  VideoPercent = "videoPercent",
  VideoVisible = "videoVisible",
  VideoStatus = "videoStatus",
  VideoCurrentTime = "videoCurrentTime",
  ScrollDepthThreshold = "scrollDepthThreshold",
  ScrollDepthUnits = "scrollDepthUnits",
  ScrollDepthDirection = "scrollDepthDirection",
  ElementVisibilityRatio = "elementVisibilityRatio",
  ElementVisibilityTime = "elementVisibilityTime",
  ElementVisibilityFirstTime = "elementVisibilityFirstTime",
  ElementVisibilityRecentTime = "elementVisibilityRecentTime",
  RequestPath = "requestPath",
  RequestMethod = "requestMethod",
  ClientName = "clientName",
  QueryString = "queryString",
  ServerPageLocationUrl = "serverPageLocationUrl",
  ServerPageLocationPath = "serverPageLocationPath",
  ServerPageLocationHostname = "serverPageLocationHostname",
  VisitorRegion = "visitorRegion",
}

export class TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * GTM BuiltInVariable's API relative path. Example: accounts/{account_id}/containers/{container_id}/workspaces/{workspace_id}/built_in_variables
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=path",
  })
  path: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * The type of built-in variable to revert.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertTypeEnum;

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;
}

export class TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  revertBuiltInVariableResponse?: shared.RevertBuiltInVariableResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
