/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Message - Message to send by Firebase Cloud Messaging Service.
 */
public class Message {
    /**
     * Android specific options for messages sent through [FCM connection server](https://goo.gl/4GLdUl).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("android")
    public AndroidConfig android;
    public Message withAndroid(AndroidConfig android) {
        this.android = android;
        return this;
    }
    
    /**
     * [Apple Push Notification Service](https://goo.gl/MXRTPa) specific options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apns")
    public ApnsConfig apns;
    public Message withApns(ApnsConfig apns) {
        this.apns = apns;
        return this;
    }
    
    /**
     * Condition to send a message to, e.g. "'foo' in topics &amp;&amp; 'bar' in topics".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("condition")
    public String condition;
    public Message withCondition(String condition) {
        this.condition = condition;
        return this;
    }
    
    /**
     * Input only. Arbitrary key/value payload, which must be UTF-8 encoded. The key should not be a reserved word ("from", "message_type", or any word starting with "google" or "gcm"). When sending payloads containing only data fields to iOS devices, only normal priority (`"apns-priority": "5"`) is allowed in [`ApnsConfig`](/docs/reference/fcm/rest/v1/projects.messages#apnsconfig).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    public java.util.Map<String, String> data;
    public Message withData(java.util.Map<String, String> data) {
        this.data = data;
        return this;
    }
    
    /**
     * Platform independent options for features provided by the FCM SDKs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fcmOptions")
    public FcmOptions fcmOptions;
    public Message withFcmOptions(FcmOptions fcmOptions) {
        this.fcmOptions = fcmOptions;
        return this;
    }
    
    /**
     * Output Only. The identifier of the message sent, in the format of `projects/* /messages/{message_id}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Message withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Basic notification template to use across all platforms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notification")
    public Notification notification;
    public Message withNotification(Notification notification) {
        this.notification = notification;
        return this;
    }
    
    /**
     * Registration token to send a message to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token")
    public String token;
    public Message withToken(String token) {
        this.token = token;
        return this;
    }
    
    /**
     * Topic name to send a message to, e.g. "weather". Note: "/topics/" prefix should not be provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topic")
    public String topic;
    public Message withTopic(String topic) {
        this.topic = topic;
        return this;
    }
    
    /**
     * [Webpush protocol](https://tools.ietf.org/html/rfc8030) options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webpush")
    public WebpushConfig webpush;
    public Message withWebpush(WebpushConfig webpush) {
        this.webpush = webpush;
        return this;
    }
    
}
