"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Properties:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_commit_hosted_property_value(self, request: operations.DeleteCommitHostedPropertyValueRequest) -> operations.DeleteCommitHostedPropertyValueResponse:
        r"""Delete a commit application property
        Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCommitHostedPropertyValueRequest, base_url, '/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCommitHostedPropertyValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_pull_request_hosted_property_value(self, request: operations.DeletePullRequestHostedPropertyValueRequest) -> operations.DeletePullRequestHostedPropertyValueResponse:
        r"""Delete a pull request application property
        Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePullRequestHostedPropertyValueRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePullRequestHostedPropertyValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_repository_hosted_property_value(self, request: operations.DeleteRepositoryHostedPropertyValueRequest) -> operations.DeleteRepositoryHostedPropertyValueResponse:
        r"""Delete a repository application property
        Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRepositoryHostedPropertyValueRequest, base_url, '/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRepositoryHostedPropertyValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_user_hosted_property_value(self, request: operations.DeleteUserHostedPropertyValueRequest) -> operations.DeleteUserHostedPropertyValueResponse:
        r"""Delete a user application property
        Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteUserHostedPropertyValueRequest, base_url, '/users/{selected_user}/properties/{app_key}/{property_name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteUserHostedPropertyValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_commit_hosted_property_value(self, request: operations.GetCommitHostedPropertyValueRequest) -> operations.GetCommitHostedPropertyValueResponse:
        r"""Get a commit application property
        Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCommitHostedPropertyValueRequest, base_url, '/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommitHostedPropertyValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.application_property = out

        return res

    def get_pull_request_hosted_property_value(self, request: operations.GetPullRequestHostedPropertyValueRequest) -> operations.GetPullRequestHostedPropertyValueResponse:
        r"""Get a pull request application property
        Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPullRequestHostedPropertyValueRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPullRequestHostedPropertyValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.application_property = out

        return res

    def get_repository_hosted_property_value(self, request: operations.GetRepositoryHostedPropertyValueRequest) -> operations.GetRepositoryHostedPropertyValueResponse:
        r"""Get a repository application property
        Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoryHostedPropertyValueRequest, base_url, '/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoryHostedPropertyValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.application_property = out

        return res

    def retrieve_user_hosted_property_value(self, request: operations.RetrieveUserHostedPropertyValueRequest) -> operations.RetrieveUserHostedPropertyValueResponse:
        r"""Get a user application property
        Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveUserHostedPropertyValueRequest, base_url, '/users/{selected_user}/properties/{app_key}/{property_name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveUserHostedPropertyValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.application_property = out

        return res

    def update_commit_hosted_property_value(self, request: operations.UpdateCommitHostedPropertyValueRequest) -> operations.UpdateCommitHostedPropertyValueResponse:
        r"""Update a commit application property
        Update an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCommitHostedPropertyValueRequest, base_url, '/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCommitHostedPropertyValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_pull_request_hosted_property_value(self, request: operations.UpdatePullRequestHostedPropertyValueRequest) -> operations.UpdatePullRequestHostedPropertyValueResponse:
        r"""Update a pull request application property
        Update an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePullRequestHostedPropertyValueRequest, base_url, '/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePullRequestHostedPropertyValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_repository_hosted_property_value(self, request: operations.UpdateRepositoryHostedPropertyValueRequest) -> operations.UpdateRepositoryHostedPropertyValueResponse:
        r"""Update a repository application property
        Update an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateRepositoryHostedPropertyValueRequest, base_url, '/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateRepositoryHostedPropertyValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_user_hosted_property_value(self, request: operations.UpdateUserHostedPropertyValueRequest) -> operations.UpdateUserHostedPropertyValueResponse:
        r"""Update a user application property
        Update an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateUserHostedPropertyValueRequest, base_url, '/users/{selected_user}/properties/{app_key}/{property_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateUserHostedPropertyValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    