/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class AquiferCodes {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * return a list of aquifer demand codes
   */
  aquiferCodesDemandList(
    req: operations.AquiferCodesDemandListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AquiferCodesDemandListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AquiferCodesDemandListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/aquifer-codes/demand/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AquiferCodesDemandListResponse =
        new operations.AquiferCodesDemandListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aquiferCodesDemandList200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AquiferCodesDemandList200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * return a list of aquifer material codes
   */
  aquiferCodesMaterialsList(
    req: operations.AquiferCodesMaterialsListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AquiferCodesMaterialsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AquiferCodesMaterialsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/aquifer-codes/materials/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AquiferCodesMaterialsListResponse =
        new operations.AquiferCodesMaterialsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aquiferCodesMaterialsList200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AquiferCodesMaterialsList200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * return a list of aquifer productivity codes
   */
  aquiferCodesProductivityList(
    req: operations.AquiferCodesProductivityListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AquiferCodesProductivityListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AquiferCodesProductivityListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/aquifer-codes/productivity/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AquiferCodesProductivityListResponse =
        new operations.AquiferCodesProductivityListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aquiferCodesProductivityList200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AquiferCodesProductivityList200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * return a list of quality concern codes
   */
  aquiferCodesQualityConcernsList(
    req: operations.AquiferCodesQualityConcernsListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AquiferCodesQualityConcernsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AquiferCodesQualityConcernsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/aquifer-codes/quality-concerns/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AquiferCodesQualityConcernsListResponse =
        new operations.AquiferCodesQualityConcernsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aquiferCodesQualityConcernsList200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AquiferCodesQualityConcernsList200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * return a list of aquifer subtype codes
   */
  aquiferCodesSubtypesList(
    req: operations.AquiferCodesSubtypesListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AquiferCodesSubtypesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AquiferCodesSubtypesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/aquifer-codes/subtypes/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AquiferCodesSubtypesListResponse =
        new operations.AquiferCodesSubtypesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aquiferCodesSubtypesList200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AquiferCodesSubtypesList200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * return a list of aquifer vulnerability codes
   */
  aquiferCodesVulnerabilityList(
    req: operations.AquiferCodesVulnerabilityListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AquiferCodesVulnerabilityListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AquiferCodesVulnerabilityListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/aquifer-codes/vulnerability/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AquiferCodesVulnerabilityListResponse =
        new operations.AquiferCodesVulnerabilityListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aquiferCodesVulnerabilityList200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AquiferCodesVulnerabilityList200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * return a list of water use codes
   */
  aquiferCodesWaterUseList(
    req: operations.AquiferCodesWaterUseListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AquiferCodesWaterUseListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AquiferCodesWaterUseListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/aquifer-codes/water-use/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AquiferCodesWaterUseListResponse =
        new operations.AquiferCodesWaterUseListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.aquiferCodesWaterUseList200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AquiferCodesWaterUseList200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
