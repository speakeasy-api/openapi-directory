/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Alerting {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get project issue related to a crash group
   */
  bugTrackerGetRepoIssueFromCrash(
    req: operations.BugTrackerGetRepoIssueFromCrashRequest,
    security: operations.BugTrackerGetRepoIssueFromCrashSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BugTrackerGetRepoIssueFromCrashResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BugTrackerGetRepoIssueFromCrashRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/bugtracker/crashGroup/{crash_group_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BugTrackerGetRepoIssueFromCrashSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BugTrackerGetRepoIssueFromCrashResponse =
        new operations.BugTrackerGetRepoIssueFromCrashResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bugTrackerGetRepoIssueFromCrash200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.BugTrackerGetRepoIssueFromCrash200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bugTrackerGetRepoIssueFromCrashDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.BugTrackerGetRepoIssueFromCrashDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get bug tracker settings for a particular app
   */
  bugtrackerGetSettings(
    req: operations.BugtrackerGetSettingsRequest,
    security: operations.BugtrackerGetSettingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BugtrackerGetSettingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BugtrackerGetSettingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/bugtracker",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BugtrackerGetSettingsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BugtrackerGetSettingsResponse =
        new operations.BugtrackerGetSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bugtrackerGetSettings200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.BugtrackerGetSettings200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bugtrackerGetSettingsDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.BugtrackerGetSettingsDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Email notification settings of user for a particular app
   */
  notificationsGetAppEmailSettings(
    req: operations.NotificationsGetAppEmailSettingsRequest,
    security: operations.NotificationsGetAppEmailSettingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotificationsGetAppEmailSettingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotificationsGetAppEmailSettingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/notifications/emailSettings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NotificationsGetAppEmailSettingsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotificationsGetAppEmailSettingsResponse =
        new operations.NotificationsGetAppEmailSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notificationsGetAppEmailSettings200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.NotificationsGetAppEmailSettings200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notificationsGetAppEmailSettingsDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.NotificationsGetAppEmailSettingsDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Default email notification settings for the user
   */
  notificationsGetUserEmailSettings(
    config?: AxiosRequestConfig
  ): Promise<operations.NotificationsGetUserEmailSettingsResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v0.1/user/notifications/emailSettings";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotificationsGetUserEmailSettingsResponse =
        new operations.NotificationsGetUserEmailSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notificationsGetUserEmailSettings200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.NotificationsGetUserEmailSettings200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notificationsGetUserEmailSettingsDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.NotificationsGetUserEmailSettingsDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get web hooks configured for a particular app
   */
  webhooksList(
    req: operations.WebhooksListRequest,
    security: operations.WebhooksListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WebhooksListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WebhooksListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/webhooks",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.WebhooksListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebhooksListResponse =
        new operations.WebhooksListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.webhooksList200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.WebhooksList200ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.webhooksListDefaultApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.WebhooksListDefaultApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
