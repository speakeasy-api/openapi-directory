"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class UpdateSIPPhoneSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class UpdateSIPPhoneApplicationJSONTransportProtocolEnum(str, Enum):
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""
    UDP = 'UDP'
    TCP = 'TCP'
    TLS = 'TLS'
    AUTO = 'AUTO'

class UpdateSIPPhoneApplicationJSONTransportProtocol2Enum(str, Enum):
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""
    UDP = 'UDP'
    TCP = 'TCP'
    TLS = 'TLS'
    AUTO = 'AUTO'

class UpdateSIPPhoneApplicationJSONTransportProtocol3Enum(str, Enum):
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""
    UDP = 'UDP'
    TCP = 'TCP'
    TLS = 'TLS'
    AUTO = 'AUTO'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateSIPPhoneApplicationJSON:
    
    authorization_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorization_name') }})
    r"""Authorization name of the user  registered for SIP Phone."""  
    domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain') }})
    r"""The name or IP address of your providerâ€™s SIP domain. (example: CDC.WEB)."""  
    password: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password') }})
    r"""The password generated for the user in the SIP account."""  
    proxy_server: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proxy_server') }})
    r"""IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server."""  
    proxy_server2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proxy_server2') }})
    r"""IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server."""  
    proxy_server3: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proxy_server3') }})
    r"""IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server."""  
    register_server: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('register_server') }})
    r"""IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address."""  
    register_server2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('register_server2') }})
    r"""IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address."""  
    register_server3: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('register_server3') }})
    r"""IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address."""  
    user_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_name') }})
    r"""The phone number associated with the user in the SIP account."""  
    voice_mail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_mail') }})
    r"""The number to dial for checking voicemail."""  
    registration_expire_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registration_expire_time'), 'exclude': lambda f: f is None }})
    r"""The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server."""  
    transport_protocol: Optional[UpdateSIPPhoneApplicationJSONTransportProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transport_protocol'), 'exclude': lambda f: f is None }})
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""  
    transport_protocol2: Optional[UpdateSIPPhoneApplicationJSONTransportProtocol2Enum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transport_protocol2'), 'exclude': lambda f: f is None }})
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""  
    transport_protocol3: Optional[UpdateSIPPhoneApplicationJSONTransportProtocol3Enum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transport_protocol3'), 'exclude': lambda f: f is None }})
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""  
    

@dataclasses.dataclass
class UpdateSIPPhoneRequest:
    
    phone_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'phoneId', 'style': 'simple', 'explode': False }})
    r"""Unique Identifier of the SIP Phone. This can be retrieved from the List SIP Phones API."""  
    request_body: Optional[UpdateSIPPhoneApplicationJSON] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateSIPPhoneResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_sip_phone_204_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `204`<br>
    SIP Phone information updated successfully.
    """  
    