"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import gettileoutput as shared_gettileoutput
from enum import Enum
from typing import Any, Optional

class GetTileOutputDataTypeEnum(str, Enum):
    r"""The output data type of the tile operation."""
    INT32 = 'INT32'
    FLOAT32 = 'FLOAT32'
    INT16 = 'INT16'
    FLOAT64 = 'FLOAT64'
    UINT16 = 'UINT16'

class GetTileTargetEnum(str, Enum):
    r"""Determines what part of the Earth Observation job to tile. 'INPUT' or 'OUTPUT' are the valid options."""
    INPUT = 'INPUT'
    OUTPUT = 'OUTPUT'


@dataclasses.dataclass
class GetTileRequest:
    
    arn: str = dataclasses.field(metadata={'query_param': { 'field_name': 'Arn', 'style': 'form', 'explode': True }})
    r"""The Amazon Resource Name (ARN) of the tile operation."""  
    image_assets: list[str] = dataclasses.field(metadata={'query_param': { 'field_name': 'ImageAssets', 'style': 'form', 'explode': True }})
    r"""The particular assets or bands to tile."""  
    target: GetTileTargetEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Target', 'style': 'form', 'explode': True }})
    r"""Determines what part of the Earth Observation job to tile. 'INPUT' or 'OUTPUT' are the valid options."""  
    x: int = dataclasses.field(metadata={'path_param': { 'field_name': 'x', 'style': 'simple', 'explode': False }})
    r"""The x coordinate of the tile input."""  
    y: int = dataclasses.field(metadata={'path_param': { 'field_name': 'y', 'style': 'simple', 'explode': False }})
    r"""The y coordinate of the tile input."""  
    z: int = dataclasses.field(metadata={'path_param': { 'field_name': 'z', 'style': 'simple', 'explode': False }})
    r"""The z coordinate of the tile input."""  
    image_mask: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ImageMask', 'style': 'form', 'explode': True }})
    r"""Determines whether or not to return a valid data mask."""  
    output_data_type: Optional[GetTileOutputDataTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'OutputDataType', 'style': 'form', 'explode': True }})
    r"""The output data type of the tile operation."""  
    output_format: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'OutputFormat', 'style': 'form', 'explode': True }})
    r"""The data format of the output tile. The formats include .npy, .png and .jpg."""  
    property_filters: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PropertyFilters', 'style': 'form', 'explode': True }})
    r"""Property filters for the imagery to tile."""  
    time_range_filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'TimeRangeFilter', 'style': 'form', 'explode': True }})
    r"""Time range filter applied to imagery to find the images to tile."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetTileResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    get_tile_output: Optional[shared_gettileoutput.GetTileOutput] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    