/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The request message to get products based on these filters
 */
export class GetProductsRequest extends SpeakeasyBase {
  /**
   * The catalog category path
   */
  @SpeakeasyMetadata()
  @Expose({ name: "categoryPath" })
  categoryPath?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "columnIdList" })
  columnIdList?: string[];

  /**
   * Search for product by ean
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ean" })
  ean?: string;

  /**
   * Search for existing products or not. If null you will received both.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exists" })
  exists?: boolean;

  /**
   * Search for product by mpn
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mpn" })
  mpn?: string;

  /**
   * The catalog column identifier (catalog or custom column)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "orderByCatalogColumnId" })
  orderByCatalogColumnId?: string;

  /**
   * Indicates the page number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pageNumber" })
  pageNumber: number;

  /**
   * Indicate the item count per page
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pageSize" })
  pageSize: number;

  /**
   * Filter with a list of product identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productIdList" })
  productIdList?: string[];

  /**
   * Search for product by sku
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sku" })
  sku?: string;

  /**
   * Search for products containing this title
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * Do not retrieve sub categories. By default, this value is set to false
   */
  @SpeakeasyMetadata()
  @Expose({ name: "withoutSubCategories" })
  withoutSubCategories?: boolean;
}
