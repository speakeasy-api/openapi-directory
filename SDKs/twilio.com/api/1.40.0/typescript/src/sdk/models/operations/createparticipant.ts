/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateParticipantServerList = ["https://api.twilio.com"] as const;

export class CreateParticipantSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

/**
 * The HTTP method we should use when calling the `amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
 */
export enum CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
 */
export enum CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
 */
export enum CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
 */
export enum CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method we should use to call `status_callback`. Can be: `GET` and `POST` and defaults to `POST`.
 */
export enum CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
 */
export enum CreateParticipantCreateParticipantRequestWaitMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

export class CreateParticipantCreateParticipantRequest extends SpeakeasyBase {
  /**
   * The URL that we should call using the `amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
   */
  @SpeakeasyMetadata({ data: "form, name=AmdStatusCallback" })
  amdStatusCallback?: string;

  /**
   * The HTTP method we should use when calling the `amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
   */
  @SpeakeasyMetadata({ data: "form, name=AmdStatusCallbackMethod" })
  amdStatusCallbackMethod?: CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum;

  /**
   * Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=Beep" })
  beep?: string;

  /**
   * The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
   */
  @SpeakeasyMetadata({ data: "form, name=Byoc" })
  byoc?: string;

  /**
   * The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
   */
  @SpeakeasyMetadata({ data: "form, name=CallReason" })
  callReason?: string;

  /**
   * The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
   */
  @SpeakeasyMetadata({ data: "form, name=CallSidToCoach" })
  callSidToCoach?: string;

  /**
   * The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint.
   */
  @SpeakeasyMetadata({ data: "form, name=CallerId" })
  callerId?: string;

  /**
   * Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
   */
  @SpeakeasyMetadata({ data: "form, name=Coaching" })
  coaching?: boolean;

  /**
   * Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=ConferenceRecord" })
  conferenceRecord?: string;

  /**
   * The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
   */
  @SpeakeasyMetadata({ data: "form, name=ConferenceRecordingStatusCallback" })
  conferenceRecordingStatusCallback?: string;

  /**
   * The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`
   */
  @SpeakeasyMetadata({
    data: "form, name=ConferenceRecordingStatusCallbackEvent",
  })
  conferenceRecordingStatusCallbackEvent?: string[];

  /**
   * The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
   */
  @SpeakeasyMetadata({
    data: "form, name=ConferenceRecordingStatusCallbackMethod",
  })
  conferenceRecordingStatusCallbackMethod?: CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum;

  /**
   * The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
   */
  @SpeakeasyMetadata({ data: "form, name=ConferenceStatusCallback" })
  conferenceStatusCallback?: string;

  /**
   * The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `modify`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`.
   */
  @SpeakeasyMetadata({ data: "form, name=ConferenceStatusCallbackEvent" })
  conferenceStatusCallbackEvent?: string[];

  /**
   * The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
   */
  @SpeakeasyMetadata({ data: "form, name=ConferenceStatusCallbackMethod" })
  conferenceStatusCallbackMethod?: CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum;

  /**
   * Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
   */
  @SpeakeasyMetadata({ data: "form, name=ConferenceTrim" })
  conferenceTrim?: string;

  /**
   * Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=EarlyMedia" })
  earlyMedia?: boolean;

  /**
   * Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=EndConferenceOnExit" })
  endConferenceOnExit?: boolean;

  /**
   * The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint.
   */
  @SpeakeasyMetadata({ data: "form, name=From" })
  from: string;

  /**
   * Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`.
   */
  @SpeakeasyMetadata({ data: "form, name=JitterBufferSize" })
  jitterBufferSize?: string;

  /**
   * A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.
   */
  @SpeakeasyMetadata({ data: "form, name=Label" })
  label?: string;

  /**
   * Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
   */
  @SpeakeasyMetadata({ data: "form, name=MachineDetection" })
  machineDetection?: string;

  /**
   * The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
   */
  @SpeakeasyMetadata({ data: "form, name=MachineDetectionSilenceTimeout" })
  machineDetectionSilenceTimeout?: number;

  /**
   * The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
   */
  @SpeakeasyMetadata({ data: "form, name=MachineDetectionSpeechEndThreshold" })
  machineDetectionSpeechEndThreshold?: number;

  /**
   * The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
   */
  @SpeakeasyMetadata({ data: "form, name=MachineDetectionSpeechThreshold" })
  machineDetectionSpeechThreshold?: number;

  /**
   * The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
   */
  @SpeakeasyMetadata({ data: "form, name=MachineDetectionTimeout" })
  machineDetectionTimeout?: number;

  /**
   * The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
   */
  @SpeakeasyMetadata({ data: "form, name=MaxParticipants" })
  maxParticipants?: number;

  /**
   * Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=Muted" })
  muted?: boolean;

  /**
   * Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=Record" })
  record?: boolean;

  /**
   * The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingChannels" })
  recordingChannels?: string;

  /**
   * The URL that we should call using the `recording_status_callback_method` when the recording status changes.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingStatusCallback" })
  recordingStatusCallback?: string;

  /**
   * The recording state changes that should generate a call to `recording_status_callback`. Can be: `started`, `in-progress`, `paused`, `resumed`, `stopped`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingStatusCallbackEvent" })
  recordingStatusCallbackEvent?: string[];

  /**
   * The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingStatusCallbackMethod" })
  recordingStatusCallbackMethod?: CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum;

  /**
   * The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingTrack" })
  recordingTrack?: string;

  /**
   * The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
   */
  @SpeakeasyMetadata({ data: "form, name=Region" })
  region?: string;

  /**
   * The SIP password for authentication.
   */
  @SpeakeasyMetadata({ data: "form, name=SipAuthPassword" })
  sipAuthPassword?: string;

  /**
   * The SIP username used for authentication.
   */
  @SpeakeasyMetadata({ data: "form, name=SipAuthUsername" })
  sipAuthUsername?: string;

  /**
   * Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
   */
  @SpeakeasyMetadata({ data: "form, name=StartConferenceOnEnter" })
  startConferenceOnEnter?: boolean;

  /**
   * The URL we should call using the `status_callback_method` to send status information to your application.
   */
  @SpeakeasyMetadata({ data: "form, name=StatusCallback" })
  statusCallback?: string;

  /**
   * The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.
   */
  @SpeakeasyMetadata({ data: "form, name=StatusCallbackEvent" })
  statusCallbackEvent?: string[];

  /**
   * The HTTP method we should use to call `status_callback`. Can be: `GET` and `POST` and defaults to `POST`.
   */
  @SpeakeasyMetadata({ data: "form, name=StatusCallbackMethod" })
  statusCallbackMethod?: CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum;

  /**
   * The maximum duration of the call in seconds. Constraints depend on account and configuration.
   */
  @SpeakeasyMetadata({ data: "form, name=TimeLimit" })
  timeLimit?: number;

  /**
   * The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.
   */
  @SpeakeasyMetadata({ data: "form, name=Timeout" })
  timeout?: number;

  /**
   * The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified.
   */
  @SpeakeasyMetadata({ data: "form, name=To" })
  to: string;

  /**
   * The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
   */
  @SpeakeasyMetadata({ data: "form, name=WaitMethod" })
  waitMethod?: CreateParticipantCreateParticipantRequestWaitMethodEnum;

  /**
   * The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
   */
  @SpeakeasyMetadata({ data: "form, name=WaitUrl" })
  waitUrl?: string;
}

export class CreateParticipantRequest extends SpeakeasyBase {
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=AccountSid",
  })
  accountSid: string;

  /**
   * The SID of the participant's conference.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ConferenceSid",
  })
  conferenceSid: string;

  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: CreateParticipantCreateParticipantRequest;
}

export class CreateParticipantResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  apiV2010AccountConferenceParticipant?: shared.ApiV2010AccountConferenceParticipant;
}
