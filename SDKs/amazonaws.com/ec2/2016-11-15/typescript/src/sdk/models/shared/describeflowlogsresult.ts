/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The format for the flow log.
 */
export enum DescribeFlowLogsResultFlowLogsDestinationOptionsFileFormatEnum {
  PlainText = "plain-text",
  Parquet = "parquet",
}

/**
 * The destination options.
 */
export class DescribeFlowLogsResultFlowLogsDestinationOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  fileFormat?: DescribeFlowLogsResultFlowLogsDestinationOptionsFileFormatEnum;

  @SpeakeasyMetadata()
  hiveCompatiblePartitions?: boolean;

  @SpeakeasyMetadata()
  perHourPartition?: boolean;
}

/**
 * The type of destination for the flow log data.
 */
export enum DescribeFlowLogsResultFlowLogsLogDestinationTypeEnum {
  CloudWatchLogs = "cloud-watch-logs",
  S3 = "s3",
  KinesisDataFirehose = "kinesis-data-firehose",
}

/**
 * Describes a tag.
 */
export class DescribeFlowLogsResultFlowLogsTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The type of traffic captured for the flow log.
 */
export enum DescribeFlowLogsResultFlowLogsTrafficTypeEnum {
  Accept = "ACCEPT",
  Reject = "REJECT",
  All = "ALL",
}

/**
 * Describes a flow log.
 */
export class DescribeFlowLogsResultFlowLogs extends SpeakeasyBase {
  @SpeakeasyMetadata()
  creationTime?: Date;

  @SpeakeasyMetadata()
  deliverCrossAccountRole?: string;

  @SpeakeasyMetadata()
  deliverLogsErrorMessage?: string;

  @SpeakeasyMetadata()
  deliverLogsPermissionArn?: string;

  @SpeakeasyMetadata()
  deliverLogsStatus?: string;

  @SpeakeasyMetadata()
  destinationOptions?: DescribeFlowLogsResultFlowLogsDestinationOptions;

  @SpeakeasyMetadata()
  flowLogId?: string;

  @SpeakeasyMetadata()
  flowLogStatus?: string;

  @SpeakeasyMetadata()
  logDestination?: string;

  @SpeakeasyMetadata()
  logDestinationType?: DescribeFlowLogsResultFlowLogsLogDestinationTypeEnum;

  @SpeakeasyMetadata()
  logFormat?: string;

  @SpeakeasyMetadata()
  logGroupName?: string;

  @SpeakeasyMetadata()
  maxAggregationInterval?: number;

  @SpeakeasyMetadata()
  resourceId?: string;

  @SpeakeasyMetadata({ elemType: DescribeFlowLogsResultFlowLogsTags })
  tags?: DescribeFlowLogsResultFlowLogsTags[];

  @SpeakeasyMetadata()
  trafficType?: DescribeFlowLogsResultFlowLogsTrafficTypeEnum;
}

/**
 * Success
 */
export class DescribeFlowLogsResult extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: DescribeFlowLogsResultFlowLogs })
  flowLogs?: DescribeFlowLogsResultFlowLogs[];

  @SpeakeasyMetadata()
  nextToken?: string;
}
