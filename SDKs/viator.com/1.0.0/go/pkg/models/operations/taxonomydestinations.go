// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type TaxonomyDestinationsHeaders struct {
	// Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
	//
	AcceptLanguage string `header:"style=simple,explode=false,name=Accept-Language"`
}

type TaxonomyDestinationsRequest struct {
	Headers TaxonomyDestinationsHeaders
}

type TaxonomyDestinations200ApplicationJSONData struct {
	// **currency code** for the currency in which pricing is displayed
	DefaultCurrencyCode *string `json:"defaultCurrencyCode,omitempty"`
	// **unique numeric identifier** of the destination
	// - use this value as the `destId` input field for other Viator API services
	//
	DestinationID *int64 `json:"destinationId,omitempty"`
	// **natural-language name** of the destination
	DestinationName *string `json:"destinationName,omitempty"`
	// **destination type specifier**
	// - `"COUNTRY"`: destination is a country
	// - `"REGION"`: destination is a recognized region of a country, such as a state, island within a country, stretch of coastline, etc.
	// - `"CITY"`: destination is a city
	//
	DestinationType *shared.DestinationTypeEnum `json:"destinationType,omitempty"`
	// ignore - (Viator only)
	DestinationURLName *string `json:"destinationUrlName,omitempty"`
	// **IATA airport code** for the destination
	// - a three-letter code defined by the International Air Transport Association (IATA) used to identify many airports around the world
	// - the IATA code is also known as an 'IATA location identifier', 'IATA station code' or simply a 'location identifier'
	// - the IATA code is &lt;u&gt;not available&lt;/u&gt; for destinations with a destination type of `'COUNTRY'` or `'REGION'`, as there could be more than one airport within a destination
	//
	IataCode *string `json:"iataCode,omitempty"`
	// **latitude component** of the destination's geolocation
	Latitude *float64 `json:"latitude,omitempty"`
	// **longitude component** of the destination's geolocation
	Longitude *float64 `json:"longitude,omitempty"`
	// **hierarchy location specifier** for the destination that is a concatenation of all `parentId` and `destinationId` codes
	// - e.g. `'8.77.673'` for Chicago
	// - format: [top level `parentId`].[any additional `parentId`].[`destinationId`]
	//
	LookupID *string `json:"lookupId,omitempty"`
	// **unique numeric identifier** of the destination's parent destination
	ParentID *int64 `json:"parentId,omitempty"`
	// ignore - (Viator only)
	Selectable *bool `json:"selectable,omitempty"`
	// **sort order** for this response
	SortOrder *int64 `json:"sortOrder,omitempty"`
	// **time zone** of the destination
	TimeZone *string `json:"timeZone,omitempty"`
}

// TaxonomyDestinations200ApplicationJSON - Success
type TaxonomyDestinations200ApplicationJSON struct {
	// **array** of destination objects
	Data []TaxonomyDestinations200ApplicationJSONData `json:"data,omitempty"`
	// **timestamp** of *this* response
	DateStamp *string `json:"dateStamp,omitempty"`
	// **array** of error codes pertaining to *this* error
	// - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
	//
	ErrorCodes []string `json:"errorCodes,omitempty"`
	// **array** of error message strings
	ErrorMessage []interface{} `json:"errorMessage,omitempty"`
	// **array** of error message strings in plain text
	ErrorMessageText *string `json:"errorMessageText,omitempty"`
	// **name** of *this* type of error
	ErrorName *string `json:"errorName,omitempty"`
	// **reference number** of *this* error
	ErrorReference *string `json:"errorReference,omitempty"`
	// **code** specifying the type of error
	ErrorType *string `json:"errorType,omitempty"`
	// ignore (Viator only)
	ExtraInfo map[string]interface{} `json:"extraInfo,omitempty"`
	// ignore (Viator only)
	ExtraObject map[string]interface{} `json:"extraObject,omitempty"`
	// **boolean indicator** of *this* request's outcome
	// - `true`: the request was successful with no errors
	// - `false`: an error was encountered
	//
	Success *bool `json:"success,omitempty"`
	// **number** of results available for *this* service
	//
	TotalCount *int64 `json:"totalCount,omitempty"`
	// **unique numeric id** of the server that processed *this* request
	Vmid *string `json:"vmid,omitempty"`
}

type TaxonomyDestinationsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	TaxonomyDestinations200ApplicationJSONObject *TaxonomyDestinations200ApplicationJSON
}
