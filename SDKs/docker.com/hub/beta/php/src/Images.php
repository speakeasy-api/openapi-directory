<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Images 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get details of repository's images
     * 
     * Gets details on the images in a repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesResponse
     */
	public function getNamespacesRepositoriesImages(
        \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/namespaces/{namespace}/repositories/{repository}/images', \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNamespaceRepositoryImagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetNamespaceRepositoryImagesResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get summary of repository's images
     * 
     * Gets the number of images in a repository and the number of images
     * counted as active and inactive.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesSummaryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesSummaryResponse
     */
	public function getNamespacesRepositoriesImagesSummary(
        \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesSummaryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesSummaryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/namespaces/{namespace}/repositories/{repository}/images-summary', \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesSummaryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesSummaryRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNamespaceRepositoryImagesSummaryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetNamespaceRepositoryImagesSummaryResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get image's tags
     * 
     * Gets current and historical tags for an image.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesTagsResponse
     */
	public function getNamespacesRepositoriesImagesTags(
        \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/namespaces/{namespace}/repositories/{repository}/images/{digest}/tags', \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesTagsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamespacesRepositoriesImagesTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNamespaceRepositoryImagesTagsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetNamespaceRepositoryImagesTagsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete images
     * 
     * Deletes one or more images within a namespace. This is currently limited to a single 
     * repository.
     * 
     * If you attempt to delete images that are marked as active or are currently tagged, the deletion does not happen and it displays the warnings.
     * To continue with the deletion, you must ignore these warnings by putting them in the `ignore_warnings` property.
     * 
     * Deleting a currently tagged image deletes the tag from the repository.
     * 
     * You cannot ignore errors. It is not possible to directly delete children of multi-arch images.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostNamespacesDeleteImagesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostNamespacesDeleteImagesResponse
     */
	public function postNamespacesDeleteImages(
        \OpenAPI\OpenAPI\Models\Operations\PostNamespacesDeleteImagesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostNamespacesDeleteImagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/namespaces/{namespace}/delete-images', \OpenAPI\OpenAPI\Models\Operations\PostNamespacesDeleteImagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "postNamespacesDeleteImagesRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostNamespacesDeleteImagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postNamespacesDeleteImagesResponseSuccess = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PostNamespacesDeleteImagesResponseSuccess', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postNamespacesDeleteImagesResponseError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PostNamespacesDeleteImagesResponseError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
}