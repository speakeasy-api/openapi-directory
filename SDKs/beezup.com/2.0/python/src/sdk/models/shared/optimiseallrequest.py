"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import analyticsproductcolumnfilters as shared_analyticsproductcolumnfilters
from ..shared import beezup_common_catalogcategoryfilter as shared_beezup_common_catalogcategoryfilter
from ..shared import orderbydirection_enum as shared_orderbydirection_enum
from ..shared import performanceindicatorfilter as shared_performanceindicatorfilter
from ..shared import performanceindicatortype_enum as shared_performanceindicatortype_enum
from ..shared import productstatefilter_enum as shared_productstatefilter_enum
from ..shared import reportadvancedfilters as shared_reportadvancedfilters
from ..shared import reportfilterperiodtype_enum as shared_reportfilterperiodtype_enum
from ..shared import reporttype_enum as shared_reporttype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OptimiseAllRequest:
    r"""Contains common filter parameters"""
    
    advanced_filters: shared_reportadvancedfilters.ReportAdvancedFilters = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advancedFilters') }})  
    begin_period_utc_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beginPeriodUtcDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The begin date period you want to get the report. It's required only in case of custom period type !"""  
    end_period_utc_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endPeriodUtcDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The end date period you want to get the report. It's required only in case of custom period type !"""  
    period_type: shared_reportfilterperiodtype_enum.ReportFilterPeriodTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periodType') }})
    r"""Indicates the period type we want use for the report filter"""  
    report_type: shared_reporttype_enum.ReportTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportType') }})
    r"""The report type"""  
    analytics_product_column_filters: Optional[shared_analyticsproductcolumnfilters.AnalyticsProductColumnFilters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analyticsProductColumnFilters'), 'exclude': lambda f: f is None }})  
    category_filter: Optional[shared_beezup_common_catalogcategoryfilter.BeezUPCommonCatalogCategoryFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryFilter'), 'exclude': lambda f: f is None }})  
    channel_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelId'), 'exclude': lambda f: f is None }})
    r"""The channel identifier"""  
    order_by: Optional[shared_performanceindicatortype_enum.PerformanceIndicatorTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderBy'), 'exclude': lambda f: f is None }})
    r"""Indicate on which indicator or value you want to make your formula"""  
    order_by_direction: Optional[shared_orderbydirection_enum.OrderByDirectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderByDirection'), 'exclude': lambda f: f is None }})
    r"""Indicate which direction to order results by"""  
    performance_indicator_filters: Optional[list[shared_performanceindicatorfilter.PerformanceIndicatorFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('performanceIndicatorFilters'), 'exclude': lambda f: f is None }})  
    product_columns_to_display: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productColumnsToDisplay'), 'exclude': lambda f: f is None }})  
    product_state: Optional[shared_productstatefilter_enum.ProductStateFilterEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productState'), 'exclude': lambda f: f is None }})
    r"""You can filter on the product state."""  
    