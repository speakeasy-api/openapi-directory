/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ContainerService - Describes an Amazon Lightsail container service.
 */
public class ContainerService {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arn")
    public String arn;
    public ContainerService withArn(String arn) {
        this.arn = arn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerServiceName")
    public String containerServiceName;
    public ContainerService withContainerServiceName(String containerServiceName) {
        this.containerServiceName = containerServiceName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;
    public ContainerService withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentDeployment")
    public ContainerServiceDeployment currentDeployment;
    public ContainerService withCurrentDeployment(ContainerServiceDeployment currentDeployment) {
        this.currentDeployment = currentDeployment;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isDisabled")
    public Boolean isDisabled;
    public ContainerService withIsDisabled(Boolean isDisabled) {
        this.isDisabled = isDisabled;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public ResourceLocation location;
    public ContainerService withLocation(ResourceLocation location) {
        this.location = location;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextDeployment")
    public ContainerServiceDeployment nextDeployment;
    public ContainerService withNextDeployment(ContainerServiceDeployment nextDeployment) {
        this.nextDeployment = nextDeployment;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("power")
    public ContainerServicePowerNameEnum power;
    public ContainerService withPower(ContainerServicePowerNameEnum power) {
        this.power = power;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("powerId")
    public String powerId;
    public ContainerService withPowerId(String powerId) {
        this.powerId = powerId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("principalArn")
    public String principalArn;
    public ContainerService withPrincipalArn(String principalArn) {
        this.principalArn = principalArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateDomainName")
    public String privateDomainName;
    public ContainerService withPrivateDomainName(String privateDomainName) {
        this.privateDomainName = privateDomainName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateRegistryAccess")
    public PrivateRegistryAccess privateRegistryAccess;
    public ContainerService withPrivateRegistryAccess(PrivateRegistryAccess privateRegistryAccess) {
        this.privateRegistryAccess = privateRegistryAccess;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publicDomainNames")
    public java.util.Map<String, String[]> publicDomainNames;
    public ContainerService withPublicDomainNames(java.util.Map<String, String[]> publicDomainNames) {
        this.publicDomainNames = publicDomainNames;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceType")
    public ResourceTypeEnum resourceType;
    public ContainerService withResourceType(ResourceTypeEnum resourceType) {
        this.resourceType = resourceType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scale")
    public Long scale;
    public ContainerService withScale(Long scale) {
        this.scale = scale;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public ContainerServiceStateEnum state;
    public ContainerService withState(ContainerServiceStateEnum state) {
        this.state = state;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stateDetail")
    public ContainerServiceStateDetail stateDetail;
    public ContainerService withStateDetail(ContainerServiceStateDetail stateDetail) {
        this.stateDetail = stateDetail;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public Tag[] tags;
    public ContainerService withTags(Tag[] tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public ContainerService withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
