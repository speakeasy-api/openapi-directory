/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DeleteCertificateError } from "./deletecertificateerror";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The previous state of the certificate. This property is not set if the certificate is in its initial Active state.
 */
export enum CertificatePreviousStateEnum {
  Active = "active",
  Deleting = "deleting",
  Deletefailed = "deletefailed",
}

/**
 * The current state of the certificate.
 */
export enum CertificateStateEnum {
  Active = "active",
  Deleting = "deleting",
  Deletefailed = "deletefailed",
}

/**
 * A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine.
 */
export class Certificate extends SpeakeasyBase {
  /**
   * An error encountered by the Batch service when deleting a certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleteCertificateError" })
  @Type(() => DeleteCertificateError)
  deleteCertificateError?: DeleteCertificateError;

  /**
   * The previous state of the certificate. This property is not set if the certificate is in its initial Active state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previousState" })
  previousState?: CertificatePreviousStateEnum;

  /**
   * The time at which the certificate entered its previous state. This property is not set if the certificate is in its initial Active state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previousStateTransitionTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  previousStateTransitionTime?: Date;

  /**
   * The public part of the certificate as a base-64 encoded .cer file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publicData" })
  publicData?: string;

  /**
   * The current state of the certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: CertificateStateEnum;

  /**
   * The time at which the certificate entered its current state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stateTransitionTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  stateTransitionTime?: Date;

  /**
   * The X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "thumbprint" })
  thumbprint?: string;

  /**
   * The algorithm used to derive the thumbprint. This must be sha1.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "thumbprintAlgorithm" })
  thumbprintAlgorithm?: string;

  /**
   * The URL of the certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}
