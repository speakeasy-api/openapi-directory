// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AddCommunicationToCaseXAmzTargetEnum
type AddCommunicationToCaseXAmzTargetEnum string

const (
	AddCommunicationToCaseXAmzTargetEnumAwsSupport20130415AddCommunicationToCase AddCommunicationToCaseXAmzTargetEnum = "AWSSupport_20130415.AddCommunicationToCase"
)

func (e AddCommunicationToCaseXAmzTargetEnum) ToPointer() *AddCommunicationToCaseXAmzTargetEnum {
	return &e
}

func (e *AddCommunicationToCaseXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSSupport_20130415.AddCommunicationToCase":
		*e = AddCommunicationToCaseXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddCommunicationToCaseXAmzTargetEnum: %v", v)
	}
}

type AddCommunicationToCaseRequest struct {
	AddCommunicationToCaseRequest shared.AddCommunicationToCaseRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                 *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256             *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                      *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken             *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                 *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders             *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                    AddCommunicationToCaseXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AddCommunicationToCaseResponse struct {
	// Success
	AddCommunicationToCaseResponse *shared.AddCommunicationToCaseResponse
	// AttachmentSetExpired
	AttachmentSetExpired interface{}
	// AttachmentSetIdNotFound
	AttachmentSetIDNotFound interface{}
	// CaseIdNotFound
	CaseIDNotFound interface{}
	ContentType    string
	// InternalServerError
	InternalServerError interface{}
	StatusCode          int
	RawResponse         *http.Response
}
