// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type BhcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type BhcerRequestBodyCertificateParameters struct {
	// ApplicationNumber
	Udf1 string `json:"UDF1"`
}

// BhcerRequestBodyFormatEnum - The format of the certificate in response.
type BhcerRequestBodyFormatEnum string

const (
	BhcerRequestBodyFormatEnumPdf BhcerRequestBodyFormatEnum = "pdf"
)

func (e BhcerRequestBodyFormatEnum) ToPointer() *BhcerRequestBodyFormatEnum {
	return &e
}

func (e *BhcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = BhcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BhcerRequestBodyFormatEnum: %v", v)
	}
}

// BhcerRequestBody - Request format
type BhcerRequestBody struct {
	CertificateParameters *BhcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format BhcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Bhcer504ApplicationJSONErrorEnum string

const (
	Bhcer504ApplicationJSONErrorEnumGatewayTimeout Bhcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Bhcer504ApplicationJSONErrorEnum) ToPointer() *Bhcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Bhcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Bhcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bhcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Bhcer504ApplicationJSONErrorDescriptionEnum string

const (
	Bhcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Bhcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Bhcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Bhcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bhcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Bhcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bhcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bhcer504ApplicationJSON - Gateway timeout
type Bhcer504ApplicationJSON struct {
	Error            *Bhcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bhcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bhcer503ApplicationJSONErrorEnum string

const (
	Bhcer503ApplicationJSONErrorEnumServiceUnavailable Bhcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Bhcer503ApplicationJSONErrorEnum) ToPointer() *Bhcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Bhcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Bhcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bhcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Bhcer503ApplicationJSONErrorDescriptionEnum string

const (
	Bhcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Bhcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Bhcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Bhcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bhcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Bhcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bhcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bhcer503ApplicationJSON - Service unavailable
type Bhcer503ApplicationJSON struct {
	Error            *Bhcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bhcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bhcer502ApplicationJSONErrorEnum string

const (
	Bhcer502ApplicationJSONErrorEnumBadGatewy Bhcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Bhcer502ApplicationJSONErrorEnum) ToPointer() *Bhcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Bhcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Bhcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bhcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Bhcer502ApplicationJSONErrorDescriptionEnum string

const (
	Bhcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Bhcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Bhcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Bhcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bhcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Bhcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bhcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bhcer502ApplicationJSON - Bad gateway
type Bhcer502ApplicationJSON struct {
	Error            *Bhcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bhcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bhcer500ApplicationJSONErrorEnum string

const (
	Bhcer500ApplicationJSONErrorEnumInternalServerError Bhcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Bhcer500ApplicationJSONErrorEnum) ToPointer() *Bhcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Bhcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Bhcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bhcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Bhcer500ApplicationJSONErrorDescriptionEnum string

const (
	Bhcer500ApplicationJSONErrorDescriptionEnumInternalServerError Bhcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Bhcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Bhcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bhcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Bhcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bhcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bhcer500ApplicationJSON - Internal server error
type Bhcer500ApplicationJSON struct {
	Error            *Bhcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bhcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bhcer404ApplicationJSONErrorEnum string

const (
	Bhcer404ApplicationJSONErrorEnumRecordNotFound Bhcer404ApplicationJSONErrorEnum = "record_not_found"
	Bhcer404ApplicationJSONErrorEnumURLNotFound    Bhcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Bhcer404ApplicationJSONErrorEnum) ToPointer() *Bhcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Bhcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Bhcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bhcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Bhcer404ApplicationJSONErrorDescriptionEnum string

const (
	Bhcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Bhcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Bhcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Bhcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Bhcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Bhcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bhcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Bhcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bhcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bhcer404ApplicationJSON - No record found
type Bhcer404ApplicationJSON struct {
	Error            *Bhcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bhcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bhcer401ApplicationJSONErrorEnum string

const (
	Bhcer401ApplicationJSONErrorEnumInvalidAuthentication Bhcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Bhcer401ApplicationJSONErrorEnumInvalidAuthorization  Bhcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Bhcer401ApplicationJSONErrorEnum) ToPointer() *Bhcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Bhcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Bhcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bhcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Bhcer401ApplicationJSONErrorDescriptionEnum string

const (
	Bhcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Bhcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Bhcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Bhcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Bhcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Bhcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bhcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Bhcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bhcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bhcer401ApplicationJSON - Unauthorized access
type Bhcer401ApplicationJSON struct {
	Error            *Bhcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bhcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bhcer400ApplicationJSONErrorEnum string

const (
	Bhcer400ApplicationJSONErrorEnumMissingParameter Bhcer400ApplicationJSONErrorEnum = "missing_parameter"
	Bhcer400ApplicationJSONErrorEnumInvalidParameter Bhcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Bhcer400ApplicationJSONErrorEnumInvalidFormat    Bhcer400ApplicationJSONErrorEnum = "invalid_format"
	Bhcer400ApplicationJSONErrorEnumInvalidTxnid     Bhcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Bhcer400ApplicationJSONErrorEnumInvalidConsentid Bhcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Bhcer400ApplicationJSONErrorEnum) ToPointer() *Bhcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Bhcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Bhcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bhcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Bhcer400ApplicationJSONErrorDescriptionEnum string

const (
	Bhcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Bhcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Bhcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Bhcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Bhcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Bhcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Bhcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Bhcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Bhcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Bhcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Bhcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Bhcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bhcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Bhcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bhcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bhcer400ApplicationJSON - Bad request
type Bhcer400ApplicationJSON struct {
	Error            *Bhcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bhcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type BhcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Bhcer400ApplicationJSONObject *Bhcer400ApplicationJSON
	// Unauthorized access
	Bhcer401ApplicationJSONObject *Bhcer401ApplicationJSON
	// No record found
	Bhcer404ApplicationJSONObject *Bhcer404ApplicationJSON
	// Internal server error
	Bhcer500ApplicationJSONObject *Bhcer500ApplicationJSON
	// Bad gateway
	Bhcer502ApplicationJSONObject *Bhcer502ApplicationJSON
	// Service unavailable
	Bhcer503ApplicationJSONObject *Bhcer503ApplicationJSON
	// Gateway timeout
	Bhcer504ApplicationJSONObject *Bhcer504ApplicationJSON
}
