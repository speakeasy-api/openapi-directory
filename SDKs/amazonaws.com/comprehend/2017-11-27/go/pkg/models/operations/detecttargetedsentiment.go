// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DetectTargetedSentimentXAmzTargetEnum
type DetectTargetedSentimentXAmzTargetEnum string

const (
	DetectTargetedSentimentXAmzTargetEnumComprehend20171127DetectTargetedSentiment DetectTargetedSentimentXAmzTargetEnum = "Comprehend_20171127.DetectTargetedSentiment"
)

func (e DetectTargetedSentimentXAmzTargetEnum) ToPointer() *DetectTargetedSentimentXAmzTargetEnum {
	return &e
}

func (e *DetectTargetedSentimentXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Comprehend_20171127.DetectTargetedSentiment":
		*e = DetectTargetedSentimentXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DetectTargetedSentimentXAmzTargetEnum: %v", v)
	}
}

type DetectTargetedSentimentRequest struct {
	DetectTargetedSentimentRequest shared.DetectTargetedSentimentRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                  *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256              *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                 *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                       *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken              *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                  *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders              *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                     DetectTargetedSentimentXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DetectTargetedSentimentResponse struct {
	ContentType string
	// Success
	DetectTargetedSentimentResponse *shared.DetectTargetedSentimentResponse
	// InternalServerException
	InternalServerException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// TextSizeLimitExceededException
	TextSizeLimitExceededException interface{}
	// UnsupportedLanguageException
	UnsupportedLanguageException interface{}
}
