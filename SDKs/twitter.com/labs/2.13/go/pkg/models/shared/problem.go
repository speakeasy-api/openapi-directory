// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type ProblemType string

const (
	ProblemTypeHTTPSAPITwitterComLabs2ProblemsNotAuthorizedForResource  ProblemType = "https://api.twitter.com/labs/2/problems/not-authorized-for-resource"
	ProblemTypeHTTPSAPITwitterComLabs2ProblemsResourceNotFound          ProblemType = "https://api.twitter.com/labs/2/problems/resource-not-found"
	ProblemTypeHTTPSAPITwitterComLabs2ProblemsUnsupportedAuthentication ProblemType = "https://api.twitter.com/labs/2/problems/unsupported-authentication"
	ProblemTypeHTTPSAPITwitterComLabs2ProblemsUsageCapped               ProblemType = "https://api.twitter.com/labs/2/problems/usage-capped"
	ProblemTypeAboutBlank                                               ProblemType = "about:blank"
	ProblemTypeHTTPSAPITwitterComLabs2ProblemsClientForbidden           ProblemType = "https://api.twitter.com/labs/2/problems/client-forbidden"
	ProblemTypeHTTPSAPITwitterComLabs2ProblemsDisallowedResource        ProblemType = "https://api.twitter.com/labs/2/problems/disallowed-resource"
	ProblemTypeHTTPSAPITwitterComLabs2ProblemsInvalidRequest            ProblemType = "https://api.twitter.com/labs/2/problems/invalid-request"
)

type Problem struct {
	GenericProblem                   *GenericProblem
	InvalidRequestProblem            *InvalidRequestProblem
	ClientForbiddenProblem           *ClientForbiddenProblem
	ResourceNotFoundProblem          *ResourceNotFoundProblem
	ResourceUnauthorizedProblem      *ResourceUnauthorizedProblem
	DisallowedResourceProblem        *DisallowedResourceProblem
	UnsupportedAuthenticationProblem *UnsupportedAuthenticationProblem
	UsageCapExceededProblem          *UsageCapExceededProblem

	Type ProblemType
}

func CreateProblemHTTPSAPITwitterComLabs2ProblemsNotAuthorizedForResource(httpsAPITwitterComLabs2ProblemsNotAuthorizedForResource ResourceUnauthorizedProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs2ProblemsNotAuthorizedForResource
	typStr := string(typ)
	httpsAPITwitterComLabs2ProblemsNotAuthorizedForResource.Type = typStr

	return Problem{
		ResourceUnauthorizedProblem: &httpsAPITwitterComLabs2ProblemsNotAuthorizedForResource,
		Type:                        typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs2ProblemsResourceNotFound(httpsAPITwitterComLabs2ProblemsResourceNotFound ResourceNotFoundProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs2ProblemsResourceNotFound
	typStr := string(typ)
	httpsAPITwitterComLabs2ProblemsResourceNotFound.Type = typStr

	return Problem{
		ResourceNotFoundProblem: &httpsAPITwitterComLabs2ProblemsResourceNotFound,
		Type:                    typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs2ProblemsUnsupportedAuthentication(httpsAPITwitterComLabs2ProblemsUnsupportedAuthentication UnsupportedAuthenticationProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs2ProblemsUnsupportedAuthentication
	typStr := string(typ)
	httpsAPITwitterComLabs2ProblemsUnsupportedAuthentication.Type = typStr

	return Problem{
		UnsupportedAuthenticationProblem: &httpsAPITwitterComLabs2ProblemsUnsupportedAuthentication,
		Type:                             typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs2ProblemsUsageCapped(httpsAPITwitterComLabs2ProblemsUsageCapped UsageCapExceededProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs2ProblemsUsageCapped
	typStr := string(typ)
	httpsAPITwitterComLabs2ProblemsUsageCapped.Type = typStr

	return Problem{
		UsageCapExceededProblem: &httpsAPITwitterComLabs2ProblemsUsageCapped,
		Type:                    typ,
	}
}

func CreateProblemAboutBlank(aboutBlank GenericProblem) Problem {
	typ := ProblemTypeAboutBlank
	typStr := string(typ)
	aboutBlank.Type = typStr

	return Problem{
		GenericProblem: &aboutBlank,
		Type:           typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs2ProblemsClientForbidden(httpsAPITwitterComLabs2ProblemsClientForbidden ClientForbiddenProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs2ProblemsClientForbidden
	typStr := string(typ)
	httpsAPITwitterComLabs2ProblemsClientForbidden.Type = typStr

	return Problem{
		ClientForbiddenProblem: &httpsAPITwitterComLabs2ProblemsClientForbidden,
		Type:                   typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs2ProblemsDisallowedResource(httpsAPITwitterComLabs2ProblemsDisallowedResource DisallowedResourceProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs2ProblemsDisallowedResource
	typStr := string(typ)
	httpsAPITwitterComLabs2ProblemsDisallowedResource.Type = typStr

	return Problem{
		DisallowedResourceProblem: &httpsAPITwitterComLabs2ProblemsDisallowedResource,
		Type:                      typ,
	}
}

func CreateProblemHTTPSAPITwitterComLabs2ProblemsInvalidRequest(httpsAPITwitterComLabs2ProblemsInvalidRequest InvalidRequestProblem) Problem {
	typ := ProblemTypeHTTPSAPITwitterComLabs2ProblemsInvalidRequest
	typStr := string(typ)
	httpsAPITwitterComLabs2ProblemsInvalidRequest.Type = typStr

	return Problem{
		InvalidRequestProblem: &httpsAPITwitterComLabs2ProblemsInvalidRequest,
		Type:                  typ,
	}
}

func (u *Problem) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "https://api.twitter.com/labs/2/problems/not-authorized-for-resource":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		resourceUnauthorizedProblem := new(ResourceUnauthorizedProblem)
		if err := d.Decode(&resourceUnauthorizedProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ResourceUnauthorizedProblem = resourceUnauthorizedProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs2ProblemsNotAuthorizedForResource
		return nil
	case "https://api.twitter.com/labs/2/problems/resource-not-found":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		resourceNotFoundProblem := new(ResourceNotFoundProblem)
		if err := d.Decode(&resourceNotFoundProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ResourceNotFoundProblem = resourceNotFoundProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs2ProblemsResourceNotFound
		return nil
	case "https://api.twitter.com/labs/2/problems/unsupported-authentication":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		unsupportedAuthenticationProblem := new(UnsupportedAuthenticationProblem)
		if err := d.Decode(&unsupportedAuthenticationProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.UnsupportedAuthenticationProblem = unsupportedAuthenticationProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs2ProblemsUnsupportedAuthentication
		return nil
	case "https://api.twitter.com/labs/2/problems/usage-capped":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		usageCapExceededProblem := new(UsageCapExceededProblem)
		if err := d.Decode(&usageCapExceededProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.UsageCapExceededProblem = usageCapExceededProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs2ProblemsUsageCapped
		return nil
	case "about:blank":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		genericProblem := new(GenericProblem)
		if err := d.Decode(&genericProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.GenericProblem = genericProblem
		u.Type = ProblemTypeAboutBlank
		return nil
	case "https://api.twitter.com/labs/2/problems/client-forbidden":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		clientForbiddenProblem := new(ClientForbiddenProblem)
		if err := d.Decode(&clientForbiddenProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ClientForbiddenProblem = clientForbiddenProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs2ProblemsClientForbidden
		return nil
	case "https://api.twitter.com/labs/2/problems/disallowed-resource":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		disallowedResourceProblem := new(DisallowedResourceProblem)
		if err := d.Decode(&disallowedResourceProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.DisallowedResourceProblem = disallowedResourceProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs2ProblemsDisallowedResource
		return nil
	case "https://api.twitter.com/labs/2/problems/invalid-request":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		invalidRequestProblem := new(InvalidRequestProblem)
		if err := d.Decode(&invalidRequestProblem); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.InvalidRequestProblem = invalidRequestProblem
		u.Type = ProblemTypeHTTPSAPITwitterComLabs2ProblemsInvalidRequest
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Problem) MarshalJSON() ([]byte, error) {
	if u.GenericProblem != nil {
		return json.Marshal(u.GenericProblem)
	}

	if u.InvalidRequestProblem != nil {
		return json.Marshal(u.InvalidRequestProblem)
	}

	if u.ClientForbiddenProblem != nil {
		return json.Marshal(u.ClientForbiddenProblem)
	}

	if u.ResourceNotFoundProblem != nil {
		return json.Marshal(u.ResourceNotFoundProblem)
	}

	if u.ResourceUnauthorizedProblem != nil {
		return json.Marshal(u.ResourceUnauthorizedProblem)
	}

	if u.DisallowedResourceProblem != nil {
		return json.Marshal(u.DisallowedResourceProblem)
	}

	if u.UnsupportedAuthenticationProblem != nil {
		return json.Marshal(u.UnsupportedAuthenticationProblem)
	}

	if u.UsageCapExceededProblem != nil {
		return json.Marshal(u.UsageCapExceededProblem)
	}

	return nil, nil
}
