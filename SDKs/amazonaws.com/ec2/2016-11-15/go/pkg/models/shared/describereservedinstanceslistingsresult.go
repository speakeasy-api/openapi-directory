// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCountsStateEnum - The states of the listed Reserved Instances.
type DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCountsStateEnum string

const (
	DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCountsStateEnumAvailable DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCountsStateEnum = "available"
	DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCountsStateEnumSold      DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCountsStateEnum = "sold"
	DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCountsStateEnumCancelled DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCountsStateEnum = "cancelled"
	DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCountsStateEnumPending   DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCountsStateEnum = "pending"
)

func (e DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCountsStateEnum) ToPointer() *DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCountsStateEnum {
	return &e
}

func (e *DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCountsStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "available":
		fallthrough
	case "sold":
		fallthrough
	case "cancelled":
		fallthrough
	case "pending":
		*e = DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCountsStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCountsStateEnum: %v", v)
	}
}

// DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCounts - Describes a Reserved Instance listing state.
type DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCounts struct {
	InstanceCount *int64
	State         *DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCountsStateEnum
}

// DescribeReservedInstancesListingsResultReservedInstancesListingsPriceSchedulesCurrencyCodeEnum - The currency for transacting the Reserved Instance resale. At this time, the only supported currency is <code>USD</code>.
type DescribeReservedInstancesListingsResultReservedInstancesListingsPriceSchedulesCurrencyCodeEnum string

const (
	DescribeReservedInstancesListingsResultReservedInstancesListingsPriceSchedulesCurrencyCodeEnumUsd DescribeReservedInstancesListingsResultReservedInstancesListingsPriceSchedulesCurrencyCodeEnum = "USD"
)

func (e DescribeReservedInstancesListingsResultReservedInstancesListingsPriceSchedulesCurrencyCodeEnum) ToPointer() *DescribeReservedInstancesListingsResultReservedInstancesListingsPriceSchedulesCurrencyCodeEnum {
	return &e
}

func (e *DescribeReservedInstancesListingsResultReservedInstancesListingsPriceSchedulesCurrencyCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "USD":
		*e = DescribeReservedInstancesListingsResultReservedInstancesListingsPriceSchedulesCurrencyCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeReservedInstancesListingsResultReservedInstancesListingsPriceSchedulesCurrencyCodeEnum: %v", v)
	}
}

// DescribeReservedInstancesListingsResultReservedInstancesListingsPriceSchedules - Describes the price for a Reserved Instance.
type DescribeReservedInstancesListingsResultReservedInstancesListingsPriceSchedules struct {
	Active       *bool
	CurrencyCode *DescribeReservedInstancesListingsResultReservedInstancesListingsPriceSchedulesCurrencyCodeEnum
	Price        *float64
	Term         *int64
}

// DescribeReservedInstancesListingsResultReservedInstancesListingsStatusEnum - The status of the Reserved Instance listing.
type DescribeReservedInstancesListingsResultReservedInstancesListingsStatusEnum string

const (
	DescribeReservedInstancesListingsResultReservedInstancesListingsStatusEnumActive    DescribeReservedInstancesListingsResultReservedInstancesListingsStatusEnum = "active"
	DescribeReservedInstancesListingsResultReservedInstancesListingsStatusEnumPending   DescribeReservedInstancesListingsResultReservedInstancesListingsStatusEnum = "pending"
	DescribeReservedInstancesListingsResultReservedInstancesListingsStatusEnumCancelled DescribeReservedInstancesListingsResultReservedInstancesListingsStatusEnum = "cancelled"
	DescribeReservedInstancesListingsResultReservedInstancesListingsStatusEnumClosed    DescribeReservedInstancesListingsResultReservedInstancesListingsStatusEnum = "closed"
)

func (e DescribeReservedInstancesListingsResultReservedInstancesListingsStatusEnum) ToPointer() *DescribeReservedInstancesListingsResultReservedInstancesListingsStatusEnum {
	return &e
}

func (e *DescribeReservedInstancesListingsResultReservedInstancesListingsStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "pending":
		fallthrough
	case "cancelled":
		fallthrough
	case "closed":
		*e = DescribeReservedInstancesListingsResultReservedInstancesListingsStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeReservedInstancesListingsResultReservedInstancesListingsStatusEnum: %v", v)
	}
}

// DescribeReservedInstancesListingsResultReservedInstancesListingsTags - Describes a tag.
type DescribeReservedInstancesListingsResultReservedInstancesListingsTags struct {
	Key   *string
	Value *string
}

// DescribeReservedInstancesListingsResultReservedInstancesListings - Describes a Reserved Instance listing.
type DescribeReservedInstancesListingsResultReservedInstancesListings struct {
	ClientToken                *string
	CreateDate                 *time.Time
	InstanceCounts             []DescribeReservedInstancesListingsResultReservedInstancesListingsInstanceCounts
	PriceSchedules             []DescribeReservedInstancesListingsResultReservedInstancesListingsPriceSchedules
	ReservedInstancesID        *string
	ReservedInstancesListingID *string
	Status                     *DescribeReservedInstancesListingsResultReservedInstancesListingsStatusEnum
	StatusMessage              *string
	Tags                       []DescribeReservedInstancesListingsResultReservedInstancesListingsTags
	UpdateDate                 *time.Time
}

// DescribeReservedInstancesListingsResult - Contains the output of DescribeReservedInstancesListings.
type DescribeReservedInstancesListingsResult struct {
	ReservedInstancesListings []DescribeReservedInstancesListingsResultReservedInstancesListings
}
