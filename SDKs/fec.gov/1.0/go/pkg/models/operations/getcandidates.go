// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetCandidatesCandidateStatusEnum string

const (
	GetCandidatesCandidateStatusEnumUnknown GetCandidatesCandidateStatusEnum = ""
	GetCandidatesCandidateStatusEnumC       GetCandidatesCandidateStatusEnum = "C"
	GetCandidatesCandidateStatusEnumF       GetCandidatesCandidateStatusEnum = "F"
	GetCandidatesCandidateStatusEnumN       GetCandidatesCandidateStatusEnum = "N"
	GetCandidatesCandidateStatusEnumP       GetCandidatesCandidateStatusEnum = "P"
)

func (e *GetCandidatesCandidateStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "C":
		fallthrough
	case "F":
		fallthrough
	case "N":
		fallthrough
	case "P":
		*e = GetCandidatesCandidateStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCandidatesCandidateStatusEnum: %s", s)
	}
}

type GetCandidatesIncumbentChallengeEnum string

const (
	GetCandidatesIncumbentChallengeEnumUnknown GetCandidatesIncumbentChallengeEnum = ""
	GetCandidatesIncumbentChallengeEnumI       GetCandidatesIncumbentChallengeEnum = "I"
	GetCandidatesIncumbentChallengeEnumC       GetCandidatesIncumbentChallengeEnum = "C"
	GetCandidatesIncumbentChallengeEnumO       GetCandidatesIncumbentChallengeEnum = "O"
)

func (e *GetCandidatesIncumbentChallengeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "I":
		fallthrough
	case "C":
		fallthrough
	case "O":
		*e = GetCandidatesIncumbentChallengeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCandidatesIncumbentChallengeEnum: %s", s)
	}
}

type GetCandidatesOfficeEnum string

const (
	GetCandidatesOfficeEnumUnknown GetCandidatesOfficeEnum = ""
	GetCandidatesOfficeEnumH       GetCandidatesOfficeEnum = "H"
	GetCandidatesOfficeEnumS       GetCandidatesOfficeEnum = "S"
	GetCandidatesOfficeEnumP       GetCandidatesOfficeEnum = "P"
)

func (e *GetCandidatesOfficeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "H":
		fallthrough
	case "S":
		fallthrough
	case "P":
		*e = GetCandidatesOfficeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCandidatesOfficeEnum: %s", s)
	}
}

type GetCandidatesRequest struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	//
	CandidateID []string `queryParam:"style=form,explode=true,name=candidate_id"`
	// One-letter code explaining if the candidate is:
	//         - C present candidate
	//         - F future candidate
	//         - N not yet a candidate
	//         - P prior candidate
	//
	CandidateStatus []GetCandidatesCandidateStatusEnum `queryParam:"style=form,explode=true,name=candidate_status"`
	// Two-year election cycle in which a candidate runs for office.
	// Calculated from Form 2. The cycle begins with
	// an odd year and is named for its ending, even year. This cycle follows
	// the traditional house election cycle and subdivides the presidential
	// and Senate elections into comparable two-year blocks. To retrieve data for
	// the entire four years of a presidential term or six years of a senatorial term,
	// you will need the `election_full` flag.
	//
	Cycle []int `queryParam:"style=form,explode=true,name=cycle"`
	// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
	District []string `queryParam:"style=form,explode=true,name=district"`
	// Year of election
	ElectionYear []int `queryParam:"style=form,explode=true,name=election_year"`
	// A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
	FederalFundsFlag *bool `queryParam:"style=form,explode=true,name=federal_funds_flag"`
	// A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
	HasRaisedFunds *bool `queryParam:"style=form,explode=true,name=has_raised_funds"`
	// One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
	IncumbentChallenge []GetCandidatesIncumbentChallengeEnum `queryParam:"style=form,explode=true,name=incumbent_challenge"`
	//  Candidates who are actively seeking office. If no value is specified, all candidates
	// are returned. When True is specified, only active candidates are returned. When False is
	// specified, only inactive candidates are returned.
	//
	IsActiveCandidate *bool `queryParam:"style=form,explode=true,name=is_active_candidate"`
	// Selects all candidates whose first filing was received by the FEC before this date.
	MaxFirstFileDate *types.Date `queryParam:"style=form,explode=true,name=max_first_file_date"`
	// Selects all candidates whose first filing was received by the FEC after this date.
	MinFirstFileDate *types.Date `queryParam:"style=form,explode=true,name=min_first_file_date"`
	// Name (candidate or committee) to search for. Alias for 'q'.
	Name []string `queryParam:"style=form,explode=true,name=name"`
	// Federal office candidate runs for: H, S or P
	Office []GetCandidatesOfficeEnum `queryParam:"style=form,explode=true,name=office"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
	Party []string `queryParam:"style=form,explode=true,name=party"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Name of candidate running for office
	Q []string `queryParam:"style=form,explode=true,name=q"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	// US state or territory where a candidate runs for office
	State []string `queryParam:"style=form,explode=true,name=state"`
	// Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
	Year *string `queryParam:"style=form,explode=true,name=year"`
}

type GetCandidatesResponse struct {
	CandidatePage *shared.CandidatePage
	ContentType   string
	StatusCode    int
	RawResponse   *http.Response
}
