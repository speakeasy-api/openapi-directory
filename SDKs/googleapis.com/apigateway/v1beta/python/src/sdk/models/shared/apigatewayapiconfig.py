"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import apigatewayapiconfigfile as shared_apigatewayapiconfigfile
from ..shared import apigatewayapiconfiggrpcservicedefinition as shared_apigatewayapiconfiggrpcservicedefinition
from ..shared import apigatewayapiconfigopenapidocument as shared_apigatewayapiconfigopenapidocument
from ..shared import apigatewaygatewayconfig as shared_apigatewaygatewayconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ApigatewayAPIConfigStateEnum(str, Enum):
    r"""Output only. State of the API Config."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    FAILED = 'FAILED'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'
    ACTIVATING = 'ACTIVATING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ApigatewayAPIConfig:
    r"""An API Configuration is a combination of settings for both the Managed Service and Gateways serving this API Config."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Created time."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Optional. Display name."""  
    gateway_config: Optional[shared_apigatewaygatewayconfig.ApigatewayGatewayConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gatewayConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration settings for Gateways."""  
    gateway_service_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gatewayServiceAccount'), 'exclude': lambda f: f is None }})
    r"""Immutable. The Google Cloud IAM Service Account that Gateways serving this config should use to authenticate to other services. This may either be the Service Account's email (`{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com`) or its full resource name (`projects/{PROJECT}/accounts/{UNIQUE_ID}`). This is most often used when the service is a GCP resource such as a Cloud Run Service or an IAP-secured service."""  
    grpc_services: Optional[list[shared_apigatewayapiconfiggrpcservicedefinition.ApigatewayAPIConfigGrpcServiceDefinition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grpcServices'), 'exclude': lambda f: f is None }})
    r"""Optional. gRPC service definition files. If specified, openapi_documents must not be included."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources"""  
    managed_service_configs: Optional[list[shared_apigatewayapiconfigfile.ApigatewayAPIConfigFile]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managedServiceConfigs'), 'exclude': lambda f: f is None }})
    r"""Optional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents. If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using \\"last one wins\\" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Resource name of the API Config. Format: projects/{project}/locations/global/apis/{api}/configs/{api_config}"""  
    openapi_documents: Optional[list[shared_apigatewayapiconfigopenapidocument.ApigatewayAPIConfigOpenAPIDocument]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('openapiDocuments'), 'exclude': lambda f: f is None }})
    r"""Optional. OpenAPI specification documents. If specified, grpc_services and managed_service_configs must not be included."""  
    service_config_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceConfigId'), 'exclude': lambda f: f is None }})
    r"""Output only. The ID of the associated Service Config ( https://cloud.google.com/service-infrastructure/docs/glossary#config)."""  
    state: Optional[ApigatewayAPIConfigStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. State of the API Config."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Updated time."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ApigatewayAPIConfigInput:
    r"""An API Configuration is a combination of settings for both the Managed Service and Gateways serving this API Config."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Optional. Display name."""  
    gateway_config: Optional[shared_apigatewaygatewayconfig.ApigatewayGatewayConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gatewayConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration settings for Gateways."""  
    gateway_service_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gatewayServiceAccount'), 'exclude': lambda f: f is None }})
    r"""Immutable. The Google Cloud IAM Service Account that Gateways serving this config should use to authenticate to other services. This may either be the Service Account's email (`{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com`) or its full resource name (`projects/{PROJECT}/accounts/{UNIQUE_ID}`). This is most often used when the service is a GCP resource such as a Cloud Run Service or an IAP-secured service."""  
    grpc_services: Optional[list[shared_apigatewayapiconfiggrpcservicedefinition.ApigatewayAPIConfigGrpcServiceDefinition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grpcServices'), 'exclude': lambda f: f is None }})
    r"""Optional. gRPC service definition files. If specified, openapi_documents must not be included."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources"""  
    managed_service_configs: Optional[list[shared_apigatewayapiconfigfile.ApigatewayAPIConfigFile]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managedServiceConfigs'), 'exclude': lambda f: f is None }})
    r"""Optional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents. If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using \\"last one wins\\" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields."""  
    openapi_documents: Optional[list[shared_apigatewayapiconfigopenapidocument.ApigatewayAPIConfigOpenAPIDocument]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('openapiDocuments'), 'exclude': lambda f: f is None }})
    r"""Optional. OpenAPI specification documents. If specified, grpc_services and managed_service_configs must not be included."""  
    