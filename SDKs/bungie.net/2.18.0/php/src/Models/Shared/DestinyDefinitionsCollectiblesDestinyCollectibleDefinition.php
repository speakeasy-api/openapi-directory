<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * DestinyDefinitionsCollectiblesDestinyCollectibleDefinition - Defines a
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class DestinyDefinitionsCollectiblesDestinyCollectibleDefinition
{
	
    public ?DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock $acquisitionInfo = null;
    
    /**
     * Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition $displayProperties
     */
	
    public ?DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition $displayProperties = null;
    
    /**
     * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
     * 
     * When entities refer to each other in Destiny content, it is this hash that they are referring to.
     * 
     * @var ?int $hash
     */
	
    public ?int $hash = null;
    
    /**
     * The index of the entity as it was found in the investment tables.
     * 
     * @var ?int $index
     */
	
    public ?int $index = null;
    
	
    public ?int $itemHash = null;
    
    /**
     * A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
     * 
     * @var ?array<int> $parentNodeHashes
     */
	
    public ?array $parentNodeHashes = null;
    
	
    public ?DestinyDefinitionsPresentationDestinyPresentationChildBlock $presentationInfo = null;
    
	
    public ?int $presentationNodeType = null;
    
    /**
     * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
     * 
     * @var ?bool $redacted
     */
	
    public ?bool $redacted = null;
    
    /**
     * Indicates whether the state of this Collectible is determined on a per-character or on an account-wide basis.
     * 
     * @var ?int $scope
     */
	
    public ?int $scope = null;
    
    /**
     * This is a hash identifier we are building on the BNet side in an attempt to let people group collectibles by similar sources.
     * 
     * I can't promise that it's going to be 100% accurate, but if the designers were consistent in assigning the same source strings to items with the same sources, it *ought to* be. No promises though.
     * This hash also doesn't relate to an actual definition, just to note: we've got nothing useful other than the source string for this data.
     * 
     * @var ?int $sourceHash
     */
	
    public ?int $sourceHash = null;
    
    /**
     * A human readable string for a hint about how to acquire the item.
     * 
     * @var ?string $sourceString
     */
	
    public ?string $sourceString = null;
    
	
    public ?DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock $stateInfo = null;
    
    /**
     * $traitHashes
     * 
     * @var ?array<int> $traitHashes
     */
	
    public ?array $traitHashes = null;
    
    /**
     * $traitIds
     * 
     * @var ?array<string> $traitIds
     */
	
    public ?array $traitIds = null;
    
	public function __construct()
	{
		$this->acquisitionInfo = null;
		$this->displayProperties = null;
		$this->hash = null;
		$this->index = null;
		$this->itemHash = null;
		$this->parentNodeHashes = null;
		$this->presentationInfo = null;
		$this->presentationNodeType = null;
		$this->redacted = null;
		$this->scope = null;
		$this->sourceHash = null;
		$this->sourceString = null;
		$this->stateInfo = null;
		$this->traitHashes = null;
		$this->traitIds = null;
	}
}
