// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CertificateActionTypeEnum string

const (
	CertificateActionTypeEnumCertificateIssued        CertificateActionTypeEnum = "CERTIFICATE_ISSUED"
	CertificateActionTypeEnumCertificateOrderCanceled CertificateActionTypeEnum = "CERTIFICATE_ORDER_CANCELED"
	CertificateActionTypeEnumCertificateOrderCreated  CertificateActionTypeEnum = "CERTIFICATE_ORDER_CREATED"
	CertificateActionTypeEnumCertificateRevoked       CertificateActionTypeEnum = "CERTIFICATE_REVOKED"
	CertificateActionTypeEnumDomainValidationComplete CertificateActionTypeEnum = "DOMAIN_VALIDATION_COMPLETE"
	CertificateActionTypeEnumFraudDetected            CertificateActionTypeEnum = "FRAUD_DETECTED"
	CertificateActionTypeEnumOrgNameChange            CertificateActionTypeEnum = "ORG_NAME_CHANGE"
	CertificateActionTypeEnumOrgValidationComplete    CertificateActionTypeEnum = "ORG_VALIDATION_COMPLETE"
	CertificateActionTypeEnumSanDrop                  CertificateActionTypeEnum = "SAN_DROP"
)

func (e CertificateActionTypeEnum) ToPointer() *CertificateActionTypeEnum {
	return &e
}

func (e *CertificateActionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CERTIFICATE_ISSUED":
		fallthrough
	case "CERTIFICATE_ORDER_CANCELED":
		fallthrough
	case "CERTIFICATE_ORDER_CREATED":
		fallthrough
	case "CERTIFICATE_REVOKED":
		fallthrough
	case "DOMAIN_VALIDATION_COMPLETE":
		fallthrough
	case "FRAUD_DETECTED":
		fallthrough
	case "ORG_NAME_CHANGE":
		fallthrough
	case "ORG_VALIDATION_COMPLETE":
		fallthrough
	case "SAN_DROP":
		*e = CertificateActionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateActionTypeEnum: %v", v)
	}
}

type CertificateAction struct {
	// Date action created
	CreatedAt string                    `json:"createdAt"`
	Type      CertificateActionTypeEnum `json:"type"`
}
