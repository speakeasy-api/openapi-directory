"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import contactsettings as shared_contactsettings
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ConfigureContactSettingsRequestContactNoticesEnum(str, Enum):
    CONTACT_NOTICE_UNSPECIFIED = 'CONTACT_NOTICE_UNSPECIFIED'
    PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT = 'PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConfigureContactSettingsRequest:
    r"""Request for the `ConfigureContactSettings` method."""
    
    contact_notices: Optional[list[ConfigureContactSettingsRequestContactNoticesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contactNotices'), 'exclude': lambda f: f is None }})
    r"""The list of contact notices that the caller acknowledges. The notices needed here depend on the values specified in `contact_settings`."""  
    contact_settings: Optional[shared_contactsettings.ContactSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contactSettings'), 'exclude': lambda f: f is None }})
    r"""Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical."""  
    update_mask: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateMask'), 'exclude': lambda f: f is None }})
    r"""Required. The field mask describing which fields to update as a comma-separated list. For example, if only the registrant contact is being updated, the `update_mask` is `\\"registrant_contact\\"`."""  
    validate_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validateOnly'), 'exclude': lambda f: f is None }})
    r"""Validate the request without actually updating the contact settings."""  
    