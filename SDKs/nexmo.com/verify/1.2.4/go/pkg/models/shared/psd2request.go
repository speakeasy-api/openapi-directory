// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Psd2RequestCodeLengthEnum - The length of the verification code.
type Psd2RequestCodeLengthEnum string

const (
	Psd2RequestCodeLengthEnumFour Psd2RequestCodeLengthEnum = "4"
	Psd2RequestCodeLengthEnumSix  Psd2RequestCodeLengthEnum = "6"
)

func (e *Psd2RequestCodeLengthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4":
		fallthrough
	case "6":
		*e = Psd2RequestCodeLengthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psd2RequestCodeLengthEnum: %s", s)
	}
}

// Psd2RequestLgEnum - By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the `number`. For example, the text message or TTS message for a `33*` number is sent in French. Use this parameter to explicitly control the language used.
// *Note: Voice calls in English for `bg-bg`, `ee-et`, `ga-ie`, `lv-lv`, `lt-lt`, `mt-mt`, `sk-sk`, `sk-si`
type Psd2RequestLgEnum string

const (
	Psd2RequestLgEnumEnGb Psd2RequestLgEnum = "en-gb"
	Psd2RequestLgEnumBgBg Psd2RequestLgEnum = "bg-bg"
	Psd2RequestLgEnumCsCz Psd2RequestLgEnum = "cs-cz"
	Psd2RequestLgEnumDaDk Psd2RequestLgEnum = "da-dk"
	Psd2RequestLgEnumDeDe Psd2RequestLgEnum = "de-de"
	Psd2RequestLgEnumEeEt Psd2RequestLgEnum = "ee-et"
	Psd2RequestLgEnumElGr Psd2RequestLgEnum = "el-gr"
	Psd2RequestLgEnumEsEs Psd2RequestLgEnum = "es-es"
	Psd2RequestLgEnumFiFi Psd2RequestLgEnum = "fi-fi"
	Psd2RequestLgEnumFrFr Psd2RequestLgEnum = "fr-fr"
	Psd2RequestLgEnumGaIe Psd2RequestLgEnum = "ga-ie"
	Psd2RequestLgEnumHuHu Psd2RequestLgEnum = "hu-hu"
	Psd2RequestLgEnumItIt Psd2RequestLgEnum = "it-it"
	Psd2RequestLgEnumLvLv Psd2RequestLgEnum = "lv-lv"
	Psd2RequestLgEnumLtLt Psd2RequestLgEnum = "lt-lt"
	Psd2RequestLgEnumMtMt Psd2RequestLgEnum = "mt-mt"
	Psd2RequestLgEnumNlNl Psd2RequestLgEnum = "nl-nl"
	Psd2RequestLgEnumPlPl Psd2RequestLgEnum = "pl-pl"
	Psd2RequestLgEnumSkSk Psd2RequestLgEnum = "sk-sk"
	Psd2RequestLgEnumSlSi Psd2RequestLgEnum = "sl-si"
	Psd2RequestLgEnumSvSe Psd2RequestLgEnum = "sv-se"
)

func (e *Psd2RequestLgEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "en-gb":
		fallthrough
	case "bg-bg":
		fallthrough
	case "cs-cz":
		fallthrough
	case "da-dk":
		fallthrough
	case "de-de":
		fallthrough
	case "ee-et":
		fallthrough
	case "el-gr":
		fallthrough
	case "es-es":
		fallthrough
	case "fi-fi":
		fallthrough
	case "fr-fr":
		fallthrough
	case "ga-ie":
		fallthrough
	case "hu-hu":
		fallthrough
	case "it-it":
		fallthrough
	case "lv-lv":
		fallthrough
	case "lt-lt":
		fallthrough
	case "mt-mt":
		fallthrough
	case "nl-nl":
		fallthrough
	case "pl-pl":
		fallthrough
	case "sk-sk":
		fallthrough
	case "sl-si":
		fallthrough
	case "sv-se":
		*e = Psd2RequestLgEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psd2RequestLgEnum: %s", s)
	}
}

// Psd2RequestWorkflowIDEnum - Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events).
type Psd2RequestWorkflowIDEnum string

const (
	Psd2RequestWorkflowIDEnumOne   Psd2RequestWorkflowIDEnum = "1"
	Psd2RequestWorkflowIDEnumTwo   Psd2RequestWorkflowIDEnum = "2"
	Psd2RequestWorkflowIDEnumThree Psd2RequestWorkflowIDEnum = "3"
	Psd2RequestWorkflowIDEnumFour  Psd2RequestWorkflowIDEnum = "4"
	Psd2RequestWorkflowIDEnumFive  Psd2RequestWorkflowIDEnum = "5"
	Psd2RequestWorkflowIDEnumSix   Psd2RequestWorkflowIDEnum = "6"
	Psd2RequestWorkflowIDEnumSeven Psd2RequestWorkflowIDEnum = "7"
)

func (e *Psd2RequestWorkflowIDEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = Psd2RequestWorkflowIDEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Psd2RequestWorkflowIDEnum: %s", s)
	}
}

type Psd2Request struct {
	// The decimal amount of the payment to be confirmed, in Euros
	Amount float32 `form:"name=amount"`
	// You can find your API key in your [account dashboard](https://dashboard.nexmo.com)
	APIKey string `form:"name=api_key"`
	// You can find your API secret in your [account dashboard](https://dashboard.nexmo.com)
	APISecret string `form:"name=api_secret"`
	// The length of the verification code.
	CodeLength *Psd2RequestCodeLengthEnum `form:"name=code_length"`
	// If you do not provide `number` in international format or you are not sure if `number` is correctly formatted, specify the two-character country code in `country`. Verify will then format the number for you.
	Country *string `form:"name=country"`
	// By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the `number`. For example, the text message or TTS message for a `33*` number is sent in French. Use this parameter to explicitly control the language used.
	// *Note: Voice calls in English for `bg-bg`, `ee-et`, `ga-ie`, `lv-lv`, `lt-lt`, `mt-mt`, `sk-sk`, `sk-si`
	Lg *Psd2RequestLgEnum `form:"name=lg"`
	// Specifies the wait time in seconds between attempts to deliver the verification code.
	NextEventWait *int64 `form:"name=next_event_wait"`
	// The mobile or landline phone number to verify. Unless you are setting `country` explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format.
	Number string `form:"name=number"`
	// An alphanumeric string to indicate to the user the name of the recipient that they are confirming a payment to.
	Payee string `form:"name=payee"`
	// How long the generated verification code is valid for, in seconds. When you specify both `pin_expiry` and `next_event_wait` then `pin_expiry` must be an integer multiple of `next_event_wait` otherwise `pin_expiry` is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings).
	PinExpiry *int64 `form:"name=pin_expiry"`
	// Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events).
	WorkflowID *Psd2RequestWorkflowIDEnum `form:"name=workflow_id"`
}
