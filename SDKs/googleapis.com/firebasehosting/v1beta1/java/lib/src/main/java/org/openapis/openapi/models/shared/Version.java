/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Version - A `Version` is a configuration and a collection of static files which determine how a site is displayed.
 */
public class Version {
    /**
     * The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("config")
    public ServingConfig config;
    public Version withConfig(ServingConfig config) {
        this.config = config;
        return this;
    }
    
    /**
     * Output only. The time at which the version was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Version withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Contains metadata about the user who performed an action, such as creating a release or finalizing a version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createUser")
    public ActingUser createUser;
    public Version withCreateUser(ActingUser createUser) {
        this.createUser = createUser;
        return this;
    }
    
    /**
     * Output only. The time at which the version was `DELETED`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteTime")
    public String deleteTime;
    public Version withDeleteTime(String deleteTime) {
        this.deleteTime = deleteTime;
        return this;
    }
    
    /**
     * Contains metadata about the user who performed an action, such as creating a release or finalizing a version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteUser")
    public ActingUser deleteUser;
    public Version withDeleteUser(ActingUser deleteUser) {
        this.deleteUser = deleteUser;
        return this;
    }
    
    /**
     * Output only. The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileCount")
    public String fileCount;
    public Version withFileCount(String fileCount) {
        this.fileCount = fileCount;
        return this;
    }
    
    /**
     * Output only. The time at which the version was `FINALIZED`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("finalizeTime")
    public String finalizeTime;
    public Version withFinalizeTime(String finalizeTime) {
        this.finalizeTime = finalizeTime;
        return this;
    }
    
    /**
     * Contains metadata about the user who performed an action, such as creating a release or finalizing a version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("finalizeUser")
    public ActingUser finalizeUser;
    public Version withFinalizeUser(ActingUser finalizeUser) {
        this.finalizeUser = finalizeUser;
        return this;
    }
    
    /**
     * The labels used for extra metadata and/or filtering.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Version withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Version withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public VersionStatusEnum status;
    public Version withStatus(VersionStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Output only. The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("versionBytes")
    public String versionBytes;
    public Version withVersionBytes(String versionBytes) {
        this.versionBytes = versionBytes;
        return this;
    }
    
}
