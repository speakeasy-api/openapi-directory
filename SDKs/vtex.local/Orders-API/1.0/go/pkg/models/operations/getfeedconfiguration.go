// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetFeedConfigurationRequest struct {
	// HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
	Accept string `header:"style=simple,explode=false,name=Accept"`
	// Type of the content being sent
	ContentType string `header:"style=simple,explode=false,name=Content-Type"`
}

// GetFeedConfiguration200ApplicationJSONFilter - Information on how orders are filtered to show on the feed.
type GetFeedConfiguration200ApplicationJSONFilter struct {
	// Sets a limit to how many times a specific order shows on the feed, after it first meets filtering conditions. Using the `FromOrders` type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is `false` orders will appear in the feed only once.
	DisableSingleFire *bool `json:"disableSingleFire,omitempty"`
	// JSONata query expression that defines what conditions must be met for an order to be included in the feed. This should only be used in case `type` is `FromOrders`.
	Expression *string `json:"expression,omitempty"`
	// List of order statuses that should be included in the feed. This should only be used in case `type` is `FromWorkflow`.
	Status []string `json:"status,omitempty"`
	// Determines what orders appear in the feed and how they are filtered. If a feed has the `FromWorkflow` type configuration, it will receive order updates only when orderâ€™s statuses change and orders can be filtered by status, using the `status` field. A feed with the `FromOrders` type configuration gets updates whenever any change is made to an order. in this case, orders can be filtered by any property, according to JSONata expressions set in the `expression` field.
	Type *string `json:"type,omitempty"`
}

// GetFeedConfiguration200ApplicationJSONQueue - Information that define the functioning of the queue.
type GetFeedConfiguration200ApplicationJSONQueue struct {
	// Maximum life span of an order update after it gets to the feed. When a feed item is on the feed for this period of time, it is removed from the feed. Measured in seconds.
	MessageRetentionPeriodInSeconds *int64 `json:"MessageRetentionPeriodInSeconds,omitempty"`
	// Period of time for which an item is not visible in the feed after it has been retrieved with the Get feed items request. Measured in seconds.
	VisibilityTimeoutInSeconds *int64 `json:"visibilityTimeoutInSeconds,omitempty"`
}

// GetFeedConfiguration200ApplicationJSON - OK
type GetFeedConfiguration200ApplicationJSON struct {
	// Aproximate age of the oldest message in the feed, measured in seconds.
	ApproximateAgeOfOldestMessageInSeconds *float64 `json:"approximateAgeOfOldestMessageInSeconds,omitempty"`
	// Information on how orders are filtered to show on the feed.
	Filter *GetFeedConfiguration200ApplicationJSONFilter `json:"filter,omitempty"`
	// Current number of messages in the feed, including messages that may not be visible due to time out after retrieval.
	Quantity *int64 `json:"quantity,omitempty"`
	// Information that define the functioning of the queue.
	Queue *GetFeedConfiguration200ApplicationJSONQueue `json:"queue,omitempty"`
}

type GetFeedConfigurationResponse struct {
	ContentType string
	// OK
	GetFeedConfiguration200ApplicationJSONObject *GetFeedConfiguration200ApplicationJSON
	StatusCode                                   int
	RawResponse                                  *http.Response
}
