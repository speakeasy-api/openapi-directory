// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FrequencyCapTimeUnitTypeEnum - The time unit. Along with num_time_units defines the amount of time over which impressions per user are counted and capped.
type FrequencyCapTimeUnitTypeEnum string

const (
	FrequencyCapTimeUnitTypeEnumTimeUnitTypeUnspecified FrequencyCapTimeUnitTypeEnum = "TIME_UNIT_TYPE_UNSPECIFIED"
	FrequencyCapTimeUnitTypeEnumMinute                  FrequencyCapTimeUnitTypeEnum = "MINUTE"
	FrequencyCapTimeUnitTypeEnumHour                    FrequencyCapTimeUnitTypeEnum = "HOUR"
	FrequencyCapTimeUnitTypeEnumDay                     FrequencyCapTimeUnitTypeEnum = "DAY"
	FrequencyCapTimeUnitTypeEnumWeek                    FrequencyCapTimeUnitTypeEnum = "WEEK"
	FrequencyCapTimeUnitTypeEnumMonth                   FrequencyCapTimeUnitTypeEnum = "MONTH"
	FrequencyCapTimeUnitTypeEnumLifetime                FrequencyCapTimeUnitTypeEnum = "LIFETIME"
	FrequencyCapTimeUnitTypeEnumPod                     FrequencyCapTimeUnitTypeEnum = "POD"
	FrequencyCapTimeUnitTypeEnumStream                  FrequencyCapTimeUnitTypeEnum = "STREAM"
)

func (e FrequencyCapTimeUnitTypeEnum) ToPointer() *FrequencyCapTimeUnitTypeEnum {
	return &e
}

func (e *FrequencyCapTimeUnitTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TIME_UNIT_TYPE_UNSPECIFIED":
		fallthrough
	case "MINUTE":
		fallthrough
	case "HOUR":
		fallthrough
	case "DAY":
		fallthrough
	case "WEEK":
		fallthrough
	case "MONTH":
		fallthrough
	case "LIFETIME":
		fallthrough
	case "POD":
		fallthrough
	case "STREAM":
		*e = FrequencyCapTimeUnitTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FrequencyCapTimeUnitTypeEnum: %v", v)
	}
}

// FrequencyCap - Frequency cap.
type FrequencyCap struct {
	// The maximum number of impressions that can be served to a user within the specified time period.
	MaxImpressions *int `json:"maxImpressions,omitempty"`
	// The amount of time, in the units specified by time_unit_type. Defines the amount of time over which impressions per user are counted and capped.
	NumTimeUnits *int `json:"numTimeUnits,omitempty"`
	// The time unit. Along with num_time_units defines the amount of time over which impressions per user are counted and capped.
	TimeUnitType *FrequencyCapTimeUnitTypeEnum `json:"timeUnitType,omitempty"`
}
