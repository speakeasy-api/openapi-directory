"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomerTextFilter:
    r"""A filter to select customers based on exact or fuzzy matching of
    customer attributes against a specified query. Depending on the customer attributes, 
    the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
    """
    
    exact: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exact'), 'exclude': lambda f: f is None }})
    r"""Use the exact filter to select customers whose attributes match exactly the specified query."""  
    fuzzy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fuzzy'), 'exclude': lambda f: f is None }})
    r"""Use the fuzzy filter to select customers whose attributes match the specified query
    in a fuzzy manner. When the fuzzy option is used, search queries are tokenized, and then 
    each query token must be matched somewhere in the searched attribute. For single token queries, 
    this is effectively the same behavior as a partial match operation.
    """  
    