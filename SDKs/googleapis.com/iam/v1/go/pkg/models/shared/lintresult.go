// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LintResultLevelEnum - The validation unit level.
type LintResultLevelEnum string

const (
	LintResultLevelEnumLevelUnspecified LintResultLevelEnum = "LEVEL_UNSPECIFIED"
	LintResultLevelEnumCondition        LintResultLevelEnum = "CONDITION"
)

func (e *LintResultLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LEVEL_UNSPECIFIED":
		fallthrough
	case "CONDITION":
		*e = LintResultLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LintResultLevelEnum: %s", s)
	}
}

// LintResultSeverityEnum - The validation unit severity.
type LintResultSeverityEnum string

const (
	LintResultSeverityEnumSeverityUnspecified LintResultSeverityEnum = "SEVERITY_UNSPECIFIED"
	LintResultSeverityEnumError               LintResultSeverityEnum = "ERROR"
	LintResultSeverityEnumWarning             LintResultSeverityEnum = "WARNING"
	LintResultSeverityEnumNotice              LintResultSeverityEnum = "NOTICE"
	LintResultSeverityEnumInfo                LintResultSeverityEnum = "INFO"
	LintResultSeverityEnumDeprecated          LintResultSeverityEnum = "DEPRECATED"
)

func (e *LintResultSeverityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SEVERITY_UNSPECIFIED":
		fallthrough
	case "ERROR":
		fallthrough
	case "WARNING":
		fallthrough
	case "NOTICE":
		fallthrough
	case "INFO":
		fallthrough
	case "DEPRECATED":
		*e = LintResultSeverityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LintResultSeverityEnum: %s", s)
	}
}

// LintResult - Structured response of a single validation unit.
type LintResult struct {
	// Human readable debug message associated with the issue.
	DebugMessage *string `json:"debugMessage,omitempty"`
	// The name of the field for which this lint result is about. For nested messages `field_name` consists of names of the embedded fields separated by period character. The top-level qualifier is the input object to lint in the request. For example, the `field_name` value `condition.expression` identifies a lint result for the `expression` field of the provided condition.
	FieldName *string `json:"fieldName,omitempty"`
	// The validation unit level.
	Level *LintResultLevelEnum `json:"level,omitempty"`
	// 0-based character position of problematic construct within the object identified by `field_name`. Currently, this is populated only for condition expression.
	LocationOffset *int `json:"locationOffset,omitempty"`
	// The validation unit severity.
	Severity *LintResultSeverityEnum `json:"severity,omitempty"`
	// The validation unit name, for instance "lintValidationUnits/ConditionComplexityCheck".
	ValidationUnitName *string `json:"validationUnitName,omitempty"`
}
