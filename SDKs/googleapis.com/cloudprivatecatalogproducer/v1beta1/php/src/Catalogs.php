<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Catalogs 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates an Association instance under a given Catalog.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsCreateResponse
     */
	public function cloudprivatecatalogproducerCatalogsAssociationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/associations', \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudPrivatecatalogproducerV1beta1CreateAssociationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Lists all Association resources under a catalog.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsListResponse
     */
	public function cloudprivatecatalogproducerCatalogsAssociationsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/associations', \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsAssociationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Catalog resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsCreateResponse
     */
	public function cloudprivatecatalogproducerCatalogsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/catalogs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudPrivatecatalogproducerV1beta1Catalog", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets IAM policy for the specified Catalog.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsGetIamPolicyResponse
     */
	public function cloudprivatecatalogproducerCatalogsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Lists Catalog resources that the producer has access to, within the
     * scope of the parent resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsListResponse
     */
	public function cloudprivatecatalogproducerCatalogsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/catalogs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Copies a Product under another Catalog.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCopyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCopySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCopyResponse
     */
	public function cloudprivatecatalogproducerCatalogsProductsCopy(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCopyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCopySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCopyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:copy', \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCopyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudPrivatecatalogproducerV1beta1CopyProductRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCopyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCopyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Creates a Product instance under a given Catalog.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCreateResponse
     */
	public function cloudprivatecatalogproducerCatalogsProductsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/products', \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudPrivatecatalogproducerV1beta1Product", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Creates an Icon instance under a given Product.
     * If Product only has a default icon, a new Icon
     * instance is created and associated with the given Product.
     * If Product already has a non-default icon, the action creates
     * a new Icon instance, associates the newly created
     * Icon with the given Product and deletes the old icon.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsIconsUploadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsIconsUploadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsIconsUploadResponse
     */
	public function cloudprivatecatalogproducerCatalogsProductsIconsUpload(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsIconsUploadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsIconsUploadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsIconsUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{product}/icons:upload', \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsIconsUploadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudPrivatecatalogproducerV1beta1UploadIconRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsIconsUploadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsIconsUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Lists Product resources that the producer has access to, within the
     * scope of the parent catalog.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsListResponse
     */
	public function cloudprivatecatalogproducerCatalogsProductsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/products', \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Creates a Version instance under a given Product.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsCreateResponse
     */
	public function cloudprivatecatalogproducerCatalogsProductsVersionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudPrivatecatalogproducerV1beta1Version", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Hard deletes a Version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsDeleteResponse
     */
	public function cloudprivatecatalogproducerCatalogsProductsVersionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns the requested Version resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsGetResponse
     */
	public function cloudprivatecatalogproducerCatalogsProductsVersionsGet(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Lists Version resources that the producer has access to, within the
     * scope of the parent Product.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsListResponse
     */
	public function cloudprivatecatalogproducerCatalogsProductsVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Updates a specific Version resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsPatchResponse
     */
	public function cloudprivatecatalogproducerCatalogsProductsVersionsPatch(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudPrivatecatalogproducerV1beta1Version", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsProductsVersionsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Sets the IAM policy for the specified Catalog.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsSetIamPolicyResponse
     */
	public function cloudprivatecatalogproducerCatalogsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1SetIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Tests the IAM permissions for the specified Catalog.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsTestIamPermissionsResponse
     */
	public function cloudprivatecatalogproducerCatalogsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1TestIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Undeletes a deleted Catalog and all resources under it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsUndeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsUndeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsUndeleteResponse
     */
	public function cloudprivatecatalogproducerCatalogsUndelete(
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsUndeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsUndeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsUndeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:undelete', \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsUndeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsUndeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudprivatecatalogproducerCatalogsUndeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}