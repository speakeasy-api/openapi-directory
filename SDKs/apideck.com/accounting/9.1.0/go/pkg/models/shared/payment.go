// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// PaymentAllocationsAllocationTypeEnum - Type of entity this payment should be attributed to.
type PaymentAllocationsAllocationTypeEnum string

const (
	PaymentAllocationsAllocationTypeEnumInvoice     PaymentAllocationsAllocationTypeEnum = "invoice"
	PaymentAllocationsAllocationTypeEnumOrder       PaymentAllocationsAllocationTypeEnum = "order"
	PaymentAllocationsAllocationTypeEnumExpense     PaymentAllocationsAllocationTypeEnum = "expense"
	PaymentAllocationsAllocationTypeEnumCreditMemo  PaymentAllocationsAllocationTypeEnum = "credit_memo"
	PaymentAllocationsAllocationTypeEnumOverPayment PaymentAllocationsAllocationTypeEnum = "over_payment"
	PaymentAllocationsAllocationTypeEnumPrePayment  PaymentAllocationsAllocationTypeEnum = "pre_payment"
)

func (e *PaymentAllocationsAllocationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invoice":
		fallthrough
	case "order":
		fallthrough
	case "expense":
		fallthrough
	case "credit_memo":
		fallthrough
	case "over_payment":
		fallthrough
	case "pre_payment":
		*e = PaymentAllocationsAllocationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentAllocationsAllocationTypeEnum: %s", s)
	}
}

type PaymentAllocationsInput struct {
	// Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
	Amount *float64 `json:"amount,omitempty"`
	// Unique identifier of entity this payment should be attributed to.
	ID *string `json:"id,omitempty"`
	// Type of entity this payment should be attributed to.
	Type *PaymentAllocationsAllocationTypeEnum `json:"type,omitempty"`
}

// PaymentPaymentStatusEnum - Status of payment
type PaymentPaymentStatusEnum string

const (
	PaymentPaymentStatusEnumAuthorised PaymentPaymentStatusEnum = "authorised"
	PaymentPaymentStatusEnumPaid       PaymentPaymentStatusEnum = "paid"
	PaymentPaymentStatusEnumVoided     PaymentPaymentStatusEnum = "voided"
	PaymentPaymentStatusEnumDeleted    PaymentPaymentStatusEnum = "deleted"
)

func (e *PaymentPaymentStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "authorised":
		fallthrough
	case "paid":
		fallthrough
	case "voided":
		fallthrough
	case "deleted":
		*e = PaymentPaymentStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentPaymentStatusEnum: %s", s)
	}
}

// PaymentPaymentTypeEnum - Type of payment
type PaymentPaymentTypeEnum string

const (
	PaymentPaymentTypeEnumAccountsReceivable            PaymentPaymentTypeEnum = "accounts_receivable"
	PaymentPaymentTypeEnumAccountsPayable               PaymentPaymentTypeEnum = "accounts_payable"
	PaymentPaymentTypeEnumAccountsReceivableCredit      PaymentPaymentTypeEnum = "accounts_receivable_credit"
	PaymentPaymentTypeEnumAccountsPayableCredit         PaymentPaymentTypeEnum = "accounts_payable_credit"
	PaymentPaymentTypeEnumAccountsReceivableOverpayment PaymentPaymentTypeEnum = "accounts_receivable_overpayment"
	PaymentPaymentTypeEnumAccountsPayableOverpayment    PaymentPaymentTypeEnum = "accounts_payable_overpayment"
	PaymentPaymentTypeEnumAccountsReceivablePrepayment  PaymentPaymentTypeEnum = "accounts_receivable_prepayment"
	PaymentPaymentTypeEnumAccountsPayablePrepayment     PaymentPaymentTypeEnum = "accounts_payable_prepayment"
)

func (e *PaymentPaymentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "accounts_receivable":
		fallthrough
	case "accounts_payable":
		fallthrough
	case "accounts_receivable_credit":
		fallthrough
	case "accounts_payable_credit":
		fallthrough
	case "accounts_receivable_overpayment":
		fallthrough
	case "accounts_payable_overpayment":
		fallthrough
	case "accounts_receivable_prepayment":
		fallthrough
	case "accounts_payable_prepayment":
		*e = PaymentPaymentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentPaymentTypeEnum: %s", s)
	}
}

type PaymentInput struct {
	Account *LinkedLedgerAccountInput `json:"account,omitempty"`
	// Unique identifier for the account to allocate payment to.
	AccountsReceivableAccountID *string `json:"accounts_receivable_account_id,omitempty"`
	// Type of accounts receivable account.
	AccountsReceivableAccountType *string                   `json:"accounts_receivable_account_type,omitempty"`
	Allocations                   []PaymentAllocationsInput `json:"allocations,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// The customer this entity is linked to.
	Customer *LinkedCustomerInput `json:"customer,omitempty"`
	// Payment id to be displayed.
	DisplayID *string `json:"display_id,omitempty"`
	// Optional note to be associated with the payment.
	Note *string `json:"note,omitempty"`
	// Payment method
	PaymentMethod *string `json:"payment_method,omitempty"`
	// Optional reference message returned by payment method on processing
	PaymentMethodReference *string `json:"payment_method_reference,omitempty"`
	// Payment has been reconciled
	Reconciled *bool `json:"reconciled,omitempty"`
	// Optional payment reference message ie: Debit remittance detail.
	Reference *string `json:"reference,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// Status of payment
	Status *PaymentPaymentStatusEnum `json:"status,omitempty"`
	// The supplier this entity is linked to.
	Supplier *LinkedSupplierInput `json:"supplier,omitempty"`
	// Amount of payment
	TotalAmount float64 `json:"total_amount"`
	// Date transaction was entered - YYYY:MM::DDThh:mm:ss.sTZD
	TransactionDate time.Time `json:"transaction_date"`
	// Type of payment
	Type *PaymentPaymentTypeEnum `json:"type,omitempty"`
}

type PaymentAllocations struct {
	// Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
	Amount *float64 `json:"amount,omitempty"`
	Code   *string  `json:"code,omitempty"`
	// Unique identifier of entity this payment should be attributed to.
	ID *string `json:"id,omitempty"`
	// Type of entity this payment should be attributed to.
	Type *PaymentAllocationsAllocationTypeEnum `json:"type,omitempty"`
}

type Payment struct {
	Account *LinkedLedgerAccount `json:"account,omitempty"`
	// Unique identifier for the account to allocate payment to.
	AccountsReceivableAccountID *string `json:"accounts_receivable_account_id,omitempty"`
	// Type of accounts receivable account.
	AccountsReceivableAccountType *string              `json:"accounts_receivable_account_type,omitempty"`
	Allocations                   []PaymentAllocations `json:"allocations,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// The customer this entity is linked to.
	Customer *LinkedCustomer `json:"customer,omitempty"`
	// Payment id to be displayed.
	DisplayID *string `json:"display_id,omitempty"`
	// The third-party API ID of original entity
	DownstreamID *string `json:"downstream_id,omitempty"`
	// Unique identifier representing the entity
	ID *string `json:"id,omitempty"`
	// Optional note to be associated with the payment.
	Note *string `json:"note,omitempty"`
	// Payment method
	PaymentMethod *string `json:"payment_method,omitempty"`
	// Optional reference message returned by payment method on processing
	PaymentMethodReference *string `json:"payment_method_reference,omitempty"`
	// Payment has been reconciled
	Reconciled *bool `json:"reconciled,omitempty"`
	// Optional payment reference message ie: Debit remittance detail.
	Reference *string `json:"reference,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// Status of payment
	Status *PaymentPaymentStatusEnum `json:"status,omitempty"`
	// The supplier this entity is linked to.
	Supplier *LinkedSupplier `json:"supplier,omitempty"`
	// Amount of payment
	TotalAmount float64 `json:"total_amount"`
	// Date transaction was entered - YYYY:MM::DDThh:mm:ss.sTZD
	TransactionDate time.Time `json:"transaction_date"`
	// Type of payment
	Type *PaymentPaymentTypeEnum `json:"type,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
}
