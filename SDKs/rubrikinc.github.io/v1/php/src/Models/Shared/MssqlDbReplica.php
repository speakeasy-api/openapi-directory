<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class MssqlDbReplica
{
	#[\JMS\Serializer\Annotation\SerializedName('availabilityInfo')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\MssqlDbReplicaAvailabilityInfo')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?MssqlDbReplicaAvailabilityInfo $availabilityInfo = null;
    
    /**
     * `True` when the Rubrik cluster has sufficient permissions to perform all necessary operations.
     * 
     * @var bool $hasPermissions
     */
	#[\JMS\Serializer\Annotation\SerializedName('hasPermissions')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $hasPermissions;
    
    /**
     * ID of the SQL Server instance managing the replica.
     * 
     * @var string $instanceId
     */
	#[\JMS\Serializer\Annotation\SerializedName('instanceId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $instanceId;
    
    /**
     * Name of the SQL Server instance managing the replica.
     * 
     * @var string $instanceName
     */
	#[\JMS\Serializer\Annotation\SerializedName('instanceName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $instanceName;
    
    /**
     * Deprecated. Please use 'isDeleted' instead.
     * 
     * @var bool $isArchived
     */
	#[\JMS\Serializer\Annotation\SerializedName('isArchived')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isArchived;
    
    /**
     * `True` when the replica is deleted.
     * 
     * @var bool $isDeleted
     */
	#[\JMS\Serializer\Annotation\SerializedName('isDeleted')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isDeleted;
    
    /**
     * `True` when the replica is in standby mode.
     * 
     * @var bool $isStandby
     */
	#[\JMS\Serializer\Annotation\SerializedName('isStandby')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isStandby;
    
    /**
     * The recovery fork GUID of the replica.
     * 
     * @var ?string $recoveryForkGuid
     */
	#[\JMS\Serializer\Annotation\SerializedName('recoveryForkGuid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $recoveryForkGuid = null;
    
    /**
     * The recovery model of the replica.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\MssqlDbReplicaRecoveryModelEnum $recoveryModel
     */
	#[\JMS\Serializer\Annotation\SerializedName('recoveryModel')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\MssqlDbReplicaRecoveryModelEnum>')]
    public MssqlDbReplicaRecoveryModelEnum $recoveryModel;
    
	#[\JMS\Serializer\Annotation\SerializedName('rootProperties')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\MssqlRootProperties')]
    public MssqlRootProperties $rootProperties;
    
    /**
     * The state of the replica.
     * 
     * @var string $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $state;
    
	public function __construct()
	{
		$this->availabilityInfo = null;
		$this->hasPermissions = false;
		$this->instanceId = "";
		$this->instanceName = "";
		$this->isArchived = false;
		$this->isDeleted = false;
		$this->isStandby = false;
		$this->recoveryForkGuid = null;
		$this->recoveryModel = \OpenAPI\OpenAPI\Models\Shared\MssqlDbReplicaRecoveryModelEnum::SIMPLE;
		$this->rootProperties = new \OpenAPI\OpenAPI\Models\Shared\MssqlRootProperties();
		$this->state = "";
	}
}
