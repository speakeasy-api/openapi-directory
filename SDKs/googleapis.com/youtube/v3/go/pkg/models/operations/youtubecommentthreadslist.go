// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type YoutubeCommentThreadsListSecurity struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

// YoutubeCommentThreadsListModerationStatusEnum - Limits the returned comment threads to those with the specified moderation status. Not compatible with the 'id' filter. Valid values: published, heldForReview, likelySpam.
type YoutubeCommentThreadsListModerationStatusEnum string

const (
	YoutubeCommentThreadsListModerationStatusEnumPublished     YoutubeCommentThreadsListModerationStatusEnum = "published"
	YoutubeCommentThreadsListModerationStatusEnumHeldForReview YoutubeCommentThreadsListModerationStatusEnum = "heldForReview"
	YoutubeCommentThreadsListModerationStatusEnumLikelySpam    YoutubeCommentThreadsListModerationStatusEnum = "likelySpam"
	YoutubeCommentThreadsListModerationStatusEnumRejected      YoutubeCommentThreadsListModerationStatusEnum = "rejected"
)

func (e YoutubeCommentThreadsListModerationStatusEnum) ToPointer() *YoutubeCommentThreadsListModerationStatusEnum {
	return &e
}

func (e *YoutubeCommentThreadsListModerationStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "published":
		fallthrough
	case "heldForReview":
		fallthrough
	case "likelySpam":
		fallthrough
	case "rejected":
		*e = YoutubeCommentThreadsListModerationStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YoutubeCommentThreadsListModerationStatusEnum: %v", v)
	}
}

// YoutubeCommentThreadsListOrderEnum
type YoutubeCommentThreadsListOrderEnum string

const (
	YoutubeCommentThreadsListOrderEnumOrderUnspecified YoutubeCommentThreadsListOrderEnum = "orderUnspecified"
	YoutubeCommentThreadsListOrderEnumTime             YoutubeCommentThreadsListOrderEnum = "time"
	YoutubeCommentThreadsListOrderEnumRelevance        YoutubeCommentThreadsListOrderEnum = "relevance"
)

func (e YoutubeCommentThreadsListOrderEnum) ToPointer() *YoutubeCommentThreadsListOrderEnum {
	return &e
}

func (e *YoutubeCommentThreadsListOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "orderUnspecified":
		fallthrough
	case "time":
		fallthrough
	case "relevance":
		*e = YoutubeCommentThreadsListOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YoutubeCommentThreadsListOrderEnum: %v", v)
	}
}

// YoutubeCommentThreadsListTextFormatEnum - The requested text format for the returned comments.
type YoutubeCommentThreadsListTextFormatEnum string

const (
	YoutubeCommentThreadsListTextFormatEnumTextFormatUnspecified YoutubeCommentThreadsListTextFormatEnum = "textFormatUnspecified"
	YoutubeCommentThreadsListTextFormatEnumHTML                  YoutubeCommentThreadsListTextFormatEnum = "html"
	YoutubeCommentThreadsListTextFormatEnumPlainText             YoutubeCommentThreadsListTextFormatEnum = "plainText"
)

func (e YoutubeCommentThreadsListTextFormatEnum) ToPointer() *YoutubeCommentThreadsListTextFormatEnum {
	return &e
}

func (e *YoutubeCommentThreadsListTextFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "textFormatUnspecified":
		fallthrough
	case "html":
		fallthrough
	case "plainText":
		*e = YoutubeCommentThreadsListTextFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YoutubeCommentThreadsListTextFormatEnum: %v", v)
	}
}

type YoutubeCommentThreadsListRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Returns the comment threads of all videos of the channel and the channel comments as well.
	AllThreadsRelatedToChannelID *string `queryParam:"style=form,explode=true,name=allThreadsRelatedToChannelId"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Returns the comment threads for all the channel comments (ie does not include comments left on videos).
	ChannelID *string `queryParam:"style=form,explode=true,name=channelId"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Returns the comment threads with the given IDs for Stubby or Apiary.
	ID []string `queryParam:"style=form,explode=true,name=id"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// Limits the returned comment threads to those with the specified moderation status. Not compatible with the 'id' filter. Valid values: published, heldForReview, likelySpam.
	ModerationStatus *YoutubeCommentThreadsListModerationStatusEnum `queryParam:"style=form,explode=true,name=moderationStatus"`
	// OAuth 2.0 token for the current user.
	OauthToken *string                             `queryParam:"style=form,explode=true,name=oauth_token"`
	Order      *YoutubeCommentThreadsListOrderEnum `queryParam:"style=form,explode=true,name=order"`
	// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// The *part* parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include.
	Part []string `queryParam:"style=form,explode=true,name=part"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Limits the returned comment threads to those matching the specified key words. Not compatible with the 'id' filter.
	SearchTerms *string `queryParam:"style=form,explode=true,name=searchTerms"`
	// The requested text format for the returned comments.
	TextFormat *YoutubeCommentThreadsListTextFormatEnum `queryParam:"style=form,explode=true,name=textFormat"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// Returns the comment threads of the specified video.
	VideoID *string `queryParam:"style=form,explode=true,name=videoId"`
}

type YoutubeCommentThreadsListResponse struct {
	// Successful response
	CommentThreadListResponse *shared.CommentThreadListResponse
	ContentType               string
	StatusCode                int
	RawResponse               *http.Response
}
