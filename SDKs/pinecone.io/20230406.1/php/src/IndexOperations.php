<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class IndexOperations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Configure index
     * 
     * This operation specifies the pod type and number of replicas for an index.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfigureIndexRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfigureIndexResponse
     */
	public function configureIndex(
        \OpenAPI\OpenAPI\Models\Operations\ConfigureIndexRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfigureIndexResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/databases/{indexName}', \OpenAPI\OpenAPI\Models\Operations\ConfigureIndexRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "indexConfiguration", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfigureIndexResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->errorMessage = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create collection
     * 
     * This operation creates a Pinecone collection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CollectionDefinition $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCollectionResponse
     */
	public function createCollection(
        \OpenAPI\OpenAPI\Models\Shared\CollectionDefinition $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->errorMessage = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create index
     * 
     * This operation creates a Pinecone index. You can use it to specify the measure of similarity, the dimension of vectors to be stored in the index, the numbers of replicas to use, and more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\IndexDefinition $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateIndexResponse
     */
	public function createIndex(
        \OpenAPI\OpenAPI\Models\Shared\IndexDefinition $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateIndexResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/databases');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateIndexResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->errorMessage = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Delete Collection
     * 
     * This operation deletes an existing collection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionResponse
     */
	public function deleteCollection(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collectionName}', \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->errorMessage = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Delete Index
     * 
     * This operation deletes an existing index.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteIndexRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteIndexResponse
     */
	public function deleteIndex(
        \OpenAPI\OpenAPI\Models\Operations\DeleteIndexRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteIndexResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/databases/{indexName}', \OpenAPI\OpenAPI\Models\Operations\DeleteIndexRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteIndexResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->errorMessage = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Describe collection
     * 
     * Get a description of a collection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeCollectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeCollectionResponse
     */
	public function describeCollection(
        \OpenAPI\OpenAPI\Models\Operations\DescribeCollectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collectionName}', \OpenAPI\OpenAPI\Models\Operations\DescribeCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Collection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->errorMessage = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Describe index
     * 
     * Get a description of an index.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DescribeIndexRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DescribeIndexResponse
     */
	public function describeIndex(
        \OpenAPI\OpenAPI\Models\Operations\DescribeIndexRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DescribeIndexResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/databases/{indexName}', \OpenAPI\OpenAPI\Models\Operations\DescribeIndexRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DescribeIndexResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->index = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Index', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->errorMessage = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List collections
     * 
     * This operation returns a list of your Pinecone collections.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCollectionsResponse
     */
	public function listCollections(
    ): \OpenAPI\OpenAPI\Models\Operations\ListCollectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCollectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionsList = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List indexes
     * 
     * This operation returns a list of your Pinecone indexes.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ListIndexesResponse
     */
	public function listIndexes(
    ): \OpenAPI\OpenAPI\Models\Operations\ListIndexesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/databases');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListIndexesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->indexesList = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }

        return $response;
    }
}