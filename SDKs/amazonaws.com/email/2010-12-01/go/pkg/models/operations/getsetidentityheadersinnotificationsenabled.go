// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETSetIdentityHeadersInNotificationsEnabledActionEnum
type GETSetIdentityHeadersInNotificationsEnabledActionEnum string

const (
	GETSetIdentityHeadersInNotificationsEnabledActionEnumSetIdentityHeadersInNotificationsEnabled GETSetIdentityHeadersInNotificationsEnabledActionEnum = "SetIdentityHeadersInNotificationsEnabled"
)

func (e *GETSetIdentityHeadersInNotificationsEnabledActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SetIdentityHeadersInNotificationsEnabled":
		*e = GETSetIdentityHeadersInNotificationsEnabledActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetIdentityHeadersInNotificationsEnabledActionEnum: %s", s)
	}
}

// GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnum - The notification type for which to enable or disable headers in notifications.
type GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnum string

const (
	GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnumBounce    GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnum = "Bounce"
	GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnumComplaint GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnum = "Complaint"
	GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnumDelivery  GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnum = "Delivery"
)

func (e *GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Bounce":
		fallthrough
	case "Complaint":
		fallthrough
	case "Delivery":
		*e = GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnum: %s", s)
	}
}

// GETSetIdentityHeadersInNotificationsEnabledVersionEnum
type GETSetIdentityHeadersInNotificationsEnabledVersionEnum string

const (
	GETSetIdentityHeadersInNotificationsEnabledVersionEnumTwoThousandAndTen1201 GETSetIdentityHeadersInNotificationsEnabledVersionEnum = "2010-12-01"
)

func (e *GETSetIdentityHeadersInNotificationsEnabledVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-12-01":
		*e = GETSetIdentityHeadersInNotificationsEnabledVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetIdentityHeadersInNotificationsEnabledVersionEnum: %s", s)
	}
}

type GETSetIdentityHeadersInNotificationsEnabledRequest struct {
	Action GETSetIdentityHeadersInNotificationsEnabledActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
	Enabled bool `queryParam:"style=form,explode=true,name=Enabled"`
	// The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
	Identity string `queryParam:"style=form,explode=true,name=Identity"`
	// The notification type for which to enable or disable headers in notifications.
	NotificationType  GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnum `queryParam:"style=form,explode=true,name=NotificationType"`
	Version           GETSetIdentityHeadersInNotificationsEnabledVersionEnum          `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETSetIdentityHeadersInNotificationsEnabledResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
