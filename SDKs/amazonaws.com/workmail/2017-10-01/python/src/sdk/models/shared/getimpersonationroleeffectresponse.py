"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accesseffect_enum as shared_accesseffect_enum
from ..shared import impersonationmatchedrule as shared_impersonationmatchedrule
from ..shared import impersonationroletype_enum as shared_impersonationroletype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetImpersonationRoleEffectResponse:
    r"""Success"""
    
    effect: Optional[shared_accesseffect_enum.AccessEffectEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Effect'), 'exclude': lambda f: f is None }})  
    matched_rules: Optional[list[shared_impersonationmatchedrule.ImpersonationMatchedRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MatchedRules'), 'exclude': lambda f: f is None }})  
    type: Optional[shared_impersonationroletype_enum.ImpersonationRoleTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    