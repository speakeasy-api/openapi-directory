"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterconnectAttachment = exports.InterconnectAttachmentTypeEnum = exports.InterconnectAttachmentStateEnum = exports.InterconnectAttachmentStackTypeEnum = exports.InterconnectAttachmentOperationalStatusEnum = exports.InterconnectAttachmentEncryptionEnum = exports.InterconnectAttachmentEdgeAvailabilityDomainEnum = exports.InterconnectAttachmentBandwidthEnum = void 0;
var utils_1 = require("../../../internal/utils");
var interconnectattachmentpartnermetadata_1 = require("./interconnectattachmentpartnermetadata");
var interconnectattachmentprivateinfo_1 = require("./interconnectattachmentprivateinfo");
var class_transformer_1 = require("class-transformer");
/**
 * Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, and can take one of the following values: - BPS_50M: 50 Mbit/s - BPS_100M: 100 Mbit/s - BPS_200M: 200 Mbit/s - BPS_300M: 300 Mbit/s - BPS_400M: 400 Mbit/s - BPS_500M: 500 Mbit/s - BPS_1G: 1 Gbit/s - BPS_2G: 2 Gbit/s - BPS_5G: 5 Gbit/s - BPS_10G: 10 Gbit/s - BPS_20G: 20 Gbit/s - BPS_50G: 50 Gbit/s
 */
var InterconnectAttachmentBandwidthEnum;
(function (InterconnectAttachmentBandwidthEnum) {
    InterconnectAttachmentBandwidthEnum["Bps100M"] = "BPS_100M";
    InterconnectAttachmentBandwidthEnum["Bps10G"] = "BPS_10G";
    InterconnectAttachmentBandwidthEnum["Bps1G"] = "BPS_1G";
    InterconnectAttachmentBandwidthEnum["Bps200M"] = "BPS_200M";
    InterconnectAttachmentBandwidthEnum["Bps20G"] = "BPS_20G";
    InterconnectAttachmentBandwidthEnum["Bps2G"] = "BPS_2G";
    InterconnectAttachmentBandwidthEnum["Bps300M"] = "BPS_300M";
    InterconnectAttachmentBandwidthEnum["Bps400M"] = "BPS_400M";
    InterconnectAttachmentBandwidthEnum["Bps500M"] = "BPS_500M";
    InterconnectAttachmentBandwidthEnum["Bps50G"] = "BPS_50G";
    InterconnectAttachmentBandwidthEnum["Bps50M"] = "BPS_50M";
    InterconnectAttachmentBandwidthEnum["Bps5G"] = "BPS_5G";
})(InterconnectAttachmentBandwidthEnum = exports.InterconnectAttachmentBandwidthEnum || (exports.InterconnectAttachmentBandwidthEnum = {}));
/**
 * Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values: - AVAILABILITY_DOMAIN_ANY - AVAILABILITY_DOMAIN_1 - AVAILABILITY_DOMAIN_2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
 */
var InterconnectAttachmentEdgeAvailabilityDomainEnum;
(function (InterconnectAttachmentEdgeAvailabilityDomainEnum) {
    InterconnectAttachmentEdgeAvailabilityDomainEnum["AvailabilityDomain1"] = "AVAILABILITY_DOMAIN_1";
    InterconnectAttachmentEdgeAvailabilityDomainEnum["AvailabilityDomain2"] = "AVAILABILITY_DOMAIN_2";
    InterconnectAttachmentEdgeAvailabilityDomainEnum["AvailabilityDomainAny"] = "AVAILABILITY_DOMAIN_ANY";
})(InterconnectAttachmentEdgeAvailabilityDomainEnum = exports.InterconnectAttachmentEdgeAvailabilityDomainEnum || (exports.InterconnectAttachmentEdgeAvailabilityDomainEnum = {}));
/**
 * Indicates the user-supplied encryption option of this VLAN attachment (interconnectAttachment). Can only be specified at attachment creation for PARTNER or DEDICATED attachments. Possible values are: - NONE - This is the default value, which means that the VLAN attachment carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from, such a VLAN attachment. - IPSEC - The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or third-party IPsec VPN. VMs cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use *HA VPN over Cloud Interconnect*, the VLAN attachment must be created with this option.
 */
var InterconnectAttachmentEncryptionEnum;
(function (InterconnectAttachmentEncryptionEnum) {
    InterconnectAttachmentEncryptionEnum["Ipsec"] = "IPSEC";
    InterconnectAttachmentEncryptionEnum["None"] = "NONE";
})(InterconnectAttachmentEncryptionEnum = exports.InterconnectAttachmentEncryptionEnum || (exports.InterconnectAttachmentEncryptionEnum = {}));
/**
 * [Output Only] The current status of whether or not this interconnect attachment is functional, which can take one of the following values: - OS_ACTIVE: The attachment has been turned up and is ready to use. - OS_UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete.
 */
var InterconnectAttachmentOperationalStatusEnum;
(function (InterconnectAttachmentOperationalStatusEnum) {
    InterconnectAttachmentOperationalStatusEnum["OsActive"] = "OS_ACTIVE";
    InterconnectAttachmentOperationalStatusEnum["OsUnprovisioned"] = "OS_UNPROVISIONED";
})(InterconnectAttachmentOperationalStatusEnum = exports.InterconnectAttachmentOperationalStatusEnum || (exports.InterconnectAttachmentOperationalStatusEnum = {}));
/**
 * The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at interconnect attachments creation and update interconnect attachment operations.
 */
var InterconnectAttachmentStackTypeEnum;
(function (InterconnectAttachmentStackTypeEnum) {
    InterconnectAttachmentStackTypeEnum["Ipv4Ipv6"] = "IPV4_IPV6";
    InterconnectAttachmentStackTypeEnum["Ipv4Only"] = "IPV4_ONLY";
})(InterconnectAttachmentStackTypeEnum = exports.InterconnectAttachmentStackTypeEnum || (exports.InterconnectAttachmentStackTypeEnum = {}));
/**
 * [Output Only] The current state of this attachment's functionality. Enum values ACTIVE and UNPROVISIONED are shared by DEDICATED/PRIVATE, PARTNER, and PARTNER_PROVIDER interconnect attachments, while enum values PENDING_PARTNER, PARTNER_REQUEST_RECEIVED, and PENDING_CUSTOMER are used for only PARTNER and PARTNER_PROVIDER interconnect attachments. This state can take one of the following values: - ACTIVE: The attachment has been turned up and is ready to use. - UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. - PENDING_PARTNER: A newly-created PARTNER attachment that has not yet been configured on the Partner side. - PARTNER_REQUEST_RECEIVED: A PARTNER attachment is in the process of provisioning after a PARTNER_PROVIDER attachment was created that references it. - PENDING_CUSTOMER: A PARTNER or PARTNER_PROVIDER attachment that is waiting for a customer to activate it. - DEFUNCT: The attachment was deleted externally and is no longer functional. This could be because the associated Interconnect was removed, or because the other side of a Partner attachment was deleted.
 */
var InterconnectAttachmentStateEnum;
(function (InterconnectAttachmentStateEnum) {
    InterconnectAttachmentStateEnum["Active"] = "ACTIVE";
    InterconnectAttachmentStateEnum["Defunct"] = "DEFUNCT";
    InterconnectAttachmentStateEnum["PartnerRequestReceived"] = "PARTNER_REQUEST_RECEIVED";
    InterconnectAttachmentStateEnum["PendingCustomer"] = "PENDING_CUSTOMER";
    InterconnectAttachmentStateEnum["PendingPartner"] = "PENDING_PARTNER";
    InterconnectAttachmentStateEnum["StateUnspecified"] = "STATE_UNSPECIFIED";
    InterconnectAttachmentStateEnum["Unprovisioned"] = "UNPROVISIONED";
})(InterconnectAttachmentStateEnum = exports.InterconnectAttachmentStateEnum || (exports.InterconnectAttachmentStateEnum = {}));
/**
 * The type of interconnect attachment this is, which can take one of the following values: - DEDICATED: an attachment to a Dedicated Interconnect. - PARTNER: an attachment to a Partner Interconnect, created by the customer. - PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner.
 */
var InterconnectAttachmentTypeEnum;
(function (InterconnectAttachmentTypeEnum) {
    InterconnectAttachmentTypeEnum["Dedicated"] = "DEDICATED";
    InterconnectAttachmentTypeEnum["Partner"] = "PARTNER";
    InterconnectAttachmentTypeEnum["PartnerProvider"] = "PARTNER_PROVIDER";
})(InterconnectAttachmentTypeEnum = exports.InterconnectAttachmentTypeEnum || (exports.InterconnectAttachmentTypeEnum = {}));
/**
 * Represents an Interconnect Attachment (VLAN) resource. You can use Interconnect attachments (VLANS) to connect your Virtual Private Cloud networks to your on-premises networks through an Interconnect. For more information, read Creating VLAN Attachments.
 */
var InterconnectAttachment = /** @class */ (function (_super) {
    __extends(InterconnectAttachment, _super);
    function InterconnectAttachment() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "adminEnabled" }),
        __metadata("design:type", Boolean)
    ], InterconnectAttachment.prototype, "adminEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bandwidth" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "bandwidth", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "candidateIpv6Subnets" }),
        __metadata("design:type", Array)
    ], InterconnectAttachment.prototype, "candidateIpv6Subnets", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "candidateSubnets" }),
        __metadata("design:type", Array)
    ], InterconnectAttachment.prototype, "candidateSubnets", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cloudRouterIpAddress" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "cloudRouterIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cloudRouterIpv6Address" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "cloudRouterIpv6Address", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cloudRouterIpv6InterfaceId" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "cloudRouterIpv6InterfaceId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "customerRouterIpAddress" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "customerRouterIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "customerRouterIpv6Address" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "customerRouterIpv6Address", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "customerRouterIpv6InterfaceId" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "customerRouterIpv6InterfaceId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dataplaneVersion" }),
        __metadata("design:type", Number)
    ], InterconnectAttachment.prototype, "dataplaneVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "edgeAvailabilityDomain" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "edgeAvailabilityDomain", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "encryption" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "encryption", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "googleReferenceId" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "googleReferenceId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "interconnect" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "interconnect", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipsecInternalAddresses" }),
        __metadata("design:type", Array)
    ], InterconnectAttachment.prototype, "ipsecInternalAddresses", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labelFingerprint" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "labelFingerprint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Object)
    ], InterconnectAttachment.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mtu" }),
        __metadata("design:type", Number)
    ], InterconnectAttachment.prototype, "mtu", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "operationalStatus" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "operationalStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pairingKey" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "pairingKey", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "partnerAsn" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "partnerAsn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "partnerMetadata" }),
        (0, class_transformer_1.Type)(function () { return interconnectattachmentpartnermetadata_1.InterconnectAttachmentPartnerMetadata; }),
        __metadata("design:type", interconnectattachmentpartnermetadata_1.InterconnectAttachmentPartnerMetadata)
    ], InterconnectAttachment.prototype, "partnerMetadata", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "privateInterconnectInfo" }),
        (0, class_transformer_1.Type)(function () { return interconnectattachmentprivateinfo_1.InterconnectAttachmentPrivateInfo; }),
        __metadata("design:type", interconnectattachmentprivateinfo_1.InterconnectAttachmentPrivateInfo)
    ], InterconnectAttachment.prototype, "privateInterconnectInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "region" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "router" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "router", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "satisfiesPzs" }),
        __metadata("design:type", Boolean)
    ], InterconnectAttachment.prototype, "satisfiesPzs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "stackType" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "stackType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "state" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], InterconnectAttachment.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vlanTag8021q" }),
        __metadata("design:type", Number)
    ], InterconnectAttachment.prototype, "vlanTag8021q", void 0);
    return InterconnectAttachment;
}(utils_1.SpeakeasyBase));
exports.InterconnectAttachment = InterconnectAttachment;
