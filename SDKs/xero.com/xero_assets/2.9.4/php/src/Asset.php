<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Asset 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * adds a fixed asset
     * 
     * Adds an asset to the system
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAssetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAssetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAssetResponse
     */
	public function createAsset(
        \OpenAPI\OpenAPI\Models\Operations\CreateAssetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAssetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAssetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Assets');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "asset", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAssetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asset = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Asset', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * adds a fixed asset type
     * 
     * Adds an fixed asset type to the system
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAssetTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAssetTypeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAssetTypeResponse
     */
	public function createAssetType(
        \OpenAPI\OpenAPI\Models\Operations\CreateAssetTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAssetTypeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAssetTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/AssetTypes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assetType", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAssetTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assetType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssetType', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 409) {
        }

        return $response;
    }
	
    /**
     * Retrieves fixed asset by id
     * 
     * By passing in the appropriate asset id, you can search for
     * a specific fixed asset in the system
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssetByIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssetByIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAssetByIdResponse
     */
	public function getAssetById(
        \OpenAPI\OpenAPI\Models\Operations\GetAssetByIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAssetByIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAssetByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Assets/{id}', \OpenAPI\OpenAPI\Models\Operations\GetAssetByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAssetByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asset = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Asset', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * searches fixed asset settings
     * 
     * By passing in the appropriate options, you can search for available fixed asset types in the system
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssetSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssetSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAssetSettingsResponse
     */
	public function getAssetSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetAssetSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAssetSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAssetSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Settings');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAssetSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->setting = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Setting', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * searches fixed asset types
     * 
     * By passing in the appropriate options, you can search for available fixed asset types in the system
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssetTypesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssetTypesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAssetTypesResponse
     */
	public function getAssetTypes(
        \OpenAPI\OpenAPI\Models\Operations\GetAssetTypesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAssetTypesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAssetTypesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/AssetTypes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAssetTypesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assetTypes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AssetType>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * searches fixed asset
     * 
     * By passing in the appropriate options, you can search for available fixed asset in the system
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssetsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssetsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAssetsResponse
     */
	public function getAssets(
        \OpenAPI\OpenAPI\Models\Operations\GetAssetsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAssetsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAssetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Assets');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAssetsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAssetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assets = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Assets', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}