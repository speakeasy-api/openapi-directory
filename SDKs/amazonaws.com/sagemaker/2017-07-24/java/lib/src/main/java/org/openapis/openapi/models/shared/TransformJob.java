/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * TransformJob - A batch transform job. For information about SageMaker batch transform, see &lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html"&gt;Use Batch Transform&lt;/a&gt;.
 */
public class TransformJob {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AutoMLJobArn")
    public String autoMLJobArn;

    public TransformJob withAutoMLJobArn(String autoMLJobArn) {
        this.autoMLJobArn = autoMLJobArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BatchStrategy")
    public BatchStrategyEnum batchStrategy;

    public TransformJob withBatchStrategy(BatchStrategyEnum batchStrategy) {
        this.batchStrategy = batchStrategy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreationTime")
    public OffsetDateTime creationTime;

    public TransformJob withCreationTime(OffsetDateTime creationTime) {
        this.creationTime = creationTime;
        return this;
    }
    
    /**
     * The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see &lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html"&gt;Associate Prediction Results with their Corresponding Input Records&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DataProcessing")
    public DataProcessing dataProcessing;

    public TransformJob withDataProcessing(DataProcessing dataProcessing) {
        this.dataProcessing = dataProcessing;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Environment")
    public java.util.Map<String, String> environment;

    public TransformJob withEnvironment(java.util.Map<String, String> environment) {
        this.environment = environment;
        return this;
    }
    
    /**
     * &lt;p&gt;Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html"&gt;CreateProcessingJob&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html"&gt;CreateTrainingJob&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html"&gt;CreateTransformJob&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExperimentConfig")
    public ExperimentConfig experimentConfig;

    public TransformJob withExperimentConfig(ExperimentConfig experimentConfig) {
        this.experimentConfig = experimentConfig;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FailureReason")
    public String failureReason;

    public TransformJob withFailureReason(String failureReason) {
        this.failureReason = failureReason;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LabelingJobArn")
    public String labelingJobArn;

    public TransformJob withLabelingJobArn(String labelingJobArn) {
        this.labelingJobArn = labelingJobArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxConcurrentTransforms")
    public Long maxConcurrentTransforms;

    public TransformJob withMaxConcurrentTransforms(Long maxConcurrentTransforms) {
        this.maxConcurrentTransforms = maxConcurrentTransforms;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxPayloadInMB")
    public Long maxPayloadInMB;

    public TransformJob withMaxPayloadInMB(Long maxPayloadInMB) {
        this.maxPayloadInMB = maxPayloadInMB;
        return this;
    }
    
    /**
     * Configures the timeout and maximum number of retries for processing a transform job invocation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ModelClientConfig")
    public ModelClientConfig modelClientConfig;

    public TransformJob withModelClientConfig(ModelClientConfig modelClientConfig) {
        this.modelClientConfig = modelClientConfig;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ModelName")
    public String modelName;

    public TransformJob withModelName(String modelName) {
        this.modelName = modelName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Tags")
    public Tag[] tags;

    public TransformJob withTags(Tag[] tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("TransformEndTime")
    public OffsetDateTime transformEndTime;

    public TransformJob withTransformEndTime(OffsetDateTime transformEndTime) {
        this.transformEndTime = transformEndTime;
        return this;
    }
    
    /**
     * Describes the input source of a transform job and the way the transform job consumes it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TransformInput")
    public TransformInput transformInput;

    public TransformJob withTransformInput(TransformInput transformInput) {
        this.transformInput = transformInput;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TransformJobArn")
    public String transformJobArn;

    public TransformJob withTransformJobArn(String transformJobArn) {
        this.transformJobArn = transformJobArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TransformJobName")
    public String transformJobName;

    public TransformJob withTransformJobName(String transformJobName) {
        this.transformJobName = transformJobName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TransformJobStatus")
    public TransformJobStatusEnum transformJobStatus;

    public TransformJob withTransformJobStatus(TransformJobStatusEnum transformJobStatus) {
        this.transformJobStatus = transformJobStatus;
        return this;
    }
    
    /**
     * Describes the results of a transform job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TransformOutput")
    public TransformOutput transformOutput;

    public TransformJob withTransformOutput(TransformOutput transformOutput) {
        this.transformOutput = transformOutput;
        return this;
    }
    
    /**
     * Describes the resources, including ML instance types and ML instance count, to use for transform job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TransformResources")
    public TransformResources transformResources;

    public TransformJob withTransformResources(TransformResources transformResources) {
        this.transformResources = transformResources;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("TransformStartTime")
    public OffsetDateTime transformStartTime;

    public TransformJob withTransformStartTime(OffsetDateTime transformStartTime) {
        this.transformStartTime = transformStartTime;
        return this;
    }
    
    public TransformJob(){}
}
