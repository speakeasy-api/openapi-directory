/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { LabelField } from "./labelfield";
import { Expose, Transform } from "class-transformer";

/**
 * Representation of a label and its fields.
 */
export class Label extends SpeakeasyBase {
  /**
   * A map of the label's fields keyed by the field ID.
   */
  @SpeakeasyMetadata({ elemType: LabelField })
  @Expose({ name: "fields" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, LabelField> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], LabelField);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  fields?: Record<string, LabelField>;

  /**
   * The ID of the label.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * This is always drive#label
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * The revision ID of the label.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "revisionId" })
  revisionId?: string;
}
