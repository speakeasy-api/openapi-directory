<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class NumberChecks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Checks whether a given number is a cube number or not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsCubeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsCubeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsCubeResponse
     */
	public function getNumbersIsCube(
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsCubeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsCubeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsCubeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/is-cube');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNumbersIsCubeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsCubeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Checks whether a given number is a palindrome number or not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsPalindromeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsPalindromeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsPalindromeResponse
     */
	public function getNumbersIsPalindrome(
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsPalindromeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsPalindromeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsPalindromeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/is-palindrome');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNumbersIsPalindromeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsPalindromeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Checks whether a given number is a square number or not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsSquareRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsSquareSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsSquareResponse
     */
	public function getNumbersIsSquare(
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsSquareRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsSquareSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsSquareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/is-square');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNumbersIsSquareRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsSquareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Checks whether a given number is a triangle number or not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsTriangleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsTriangleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsTriangleResponse
     */
	public function getNumbersIsTriangle(
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsTriangleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsTriangleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsTriangleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/is-triangle');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNumbersIsTriangleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNumbersIsTriangleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Checks whether a given number is a known fermat prime number or not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsFermatPrimeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsFermatPrimeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsFermatPrimeResponse
     */
	public function getNumbersPrimeIsFermatPrime(
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsFermatPrimeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsFermatPrimeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsFermatPrimeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/prime/is-fermat-prime');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsFermatPrimeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsFermatPrimeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Checks whether a given number is a known fibonacci prime number or not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsFibonacciPrimeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsFibonacciPrimeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsFibonacciPrimeResponse
     */
	public function getNumbersPrimeIsFibonacciPrime(
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsFibonacciPrimeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsFibonacciPrimeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsFibonacciPrimeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/prime/is-fibonacci-prime');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsFibonacciPrimeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsFibonacciPrimeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Checks whether a given number is a known mersenne prime number or not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsMersennePrimeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsMersennePrimeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsMersennePrimeResponse
     */
	public function getNumbersPrimeIsMersennePrime(
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsMersennePrimeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsMersennePrimeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsMersennePrimeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/prime/is-mersenne-prime');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsMersennePrimeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsMersennePrimeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Checks whether a given number is a known partition prime number or not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPartitionPrimeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPartitionPrimeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPartitionPrimeResponse
     */
	public function getNumbersPrimeIsPartitionPrime(
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPartitionPrimeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPartitionPrimeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPartitionPrimeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/prime/is-partition-prime');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPartitionPrimeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPartitionPrimeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Checks whether a given number is a known pell prime number or not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPellPrimeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPellPrimeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPellPrimeResponse
     */
	public function getNumbersPrimeIsPellPrime(
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPellPrimeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPellPrimeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPellPrimeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/prime/is-pell-prime');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPellPrimeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPellPrimeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Checks whether a given number is a perfect number or not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPerfectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPerfectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPerfectResponse
     */
	public function getNumbersPrimeIsPerfect(
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPerfectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPerfectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPerfectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/prime/is-perfect');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPerfectRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPerfectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Checks whether a given number is a known prime number or not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPrimeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPrimeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPrimeResponse
     */
	public function getNumbersPrimeIsPrime(
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPrimeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPrimeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPrimeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/prime/is-prime');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPrimeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNumbersPrimeIsPrimeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
}