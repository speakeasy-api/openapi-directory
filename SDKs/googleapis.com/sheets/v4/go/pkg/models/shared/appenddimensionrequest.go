// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AppendDimensionRequestDimensionEnum - Whether rows or columns should be appended.
type AppendDimensionRequestDimensionEnum string

const (
	AppendDimensionRequestDimensionEnumDimensionUnspecified AppendDimensionRequestDimensionEnum = "DIMENSION_UNSPECIFIED"
	AppendDimensionRequestDimensionEnumRows                 AppendDimensionRequestDimensionEnum = "ROWS"
	AppendDimensionRequestDimensionEnumColumns              AppendDimensionRequestDimensionEnum = "COLUMNS"
)

func (e AppendDimensionRequestDimensionEnum) ToPointer() *AppendDimensionRequestDimensionEnum {
	return &e
}

func (e *AppendDimensionRequestDimensionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DIMENSION_UNSPECIFIED":
		fallthrough
	case "ROWS":
		fallthrough
	case "COLUMNS":
		*e = AppendDimensionRequestDimensionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppendDimensionRequestDimensionEnum: %v", v)
	}
}

// AppendDimensionRequest - Appends rows or columns to the end of a sheet.
type AppendDimensionRequest struct {
	// Whether rows or columns should be appended.
	Dimension *AppendDimensionRequestDimensionEnum `json:"dimension,omitempty"`
	// The number of rows or columns to append.
	Length *int `json:"length,omitempty"`
	// The sheet to append rows or columns to.
	SheetID *int `json:"sheetId,omitempty"`
}
