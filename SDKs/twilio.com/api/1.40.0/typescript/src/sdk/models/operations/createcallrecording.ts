/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateCallRecordingServerList = [
  "https://api.twilio.com",
] as const;

export class CreateCallRecordingSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

/**
 * The HTTP method we should use to call `recording_status_callback`. Can be: `GET` or `POST` and the default is `POST`.
 */
export enum CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

export class CreateCallRecordingCreateCallRecordingRequest extends SpeakeasyBase {
  /**
   * The number of channels used in the recording. Can be: `mono` or `dual` and the default is `mono`. `mono` records all parties of the call into one channel. `dual` records each party of a 2-party call into separate channels.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingChannels" })
  recordingChannels?: string;

  /**
   * The URL we should call using the `recording_status_callback_method` on each recording event specified in  `recording_status_callback_event`. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback).
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingStatusCallback" })
  recordingStatusCallback?: string;

  /**
   * The recording status events on which we should call the `recording_status_callback` URL. Can be: `in-progress`, `completed` and `absent` and the default is `completed`. Separate multiple event values with a space.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingStatusCallbackEvent" })
  recordingStatusCallbackEvent?: string[];

  /**
   * The HTTP method we should use to call `recording_status_callback`. Can be: `GET` or `POST` and the default is `POST`.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingStatusCallbackMethod" })
  recordingStatusCallbackMethod?: CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum;

  /**
   * The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
   */
  @SpeakeasyMetadata({ data: "form, name=RecordingTrack" })
  recordingTrack?: string;

  /**
   * Whether to trim any leading and trailing silence in the recording. Can be: `trim-silence` or `do-not-trim` and the default is `do-not-trim`. `trim-silence` trims the silence from the beginning and end of the recording and `do-not-trim` does not.
   */
  @SpeakeasyMetadata({ data: "form, name=Trim" })
  trim?: string;
}

export class CreateCallRecordingRequest extends SpeakeasyBase {
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=AccountSid",
  })
  accountSid: string;

  /**
   * The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=CallSid",
  })
  callSid: string;

  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: CreateCallRecordingCreateCallRecordingRequest;
}

export class CreateCallRecordingResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  apiV2010AccountCallCallRecording?: shared.ApiV2010AccountCallCallRecording;
}
