"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MetaResourceTypeEnum(str, Enum):
    r"""A type of a resource"""
    USER = 'User'
    GROUP = 'Group'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Meta:
    r"""The metadata associated with the creation/updates to the user."""
    
    resource_type: MetaResourceTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType') }})
    r"""A type of a resource"""  
    created: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'exclude': lambda f: f is None }})
    r"""A date and time when the user was created."""  
    last_modified: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModified'), 'exclude': lambda f: f is None }})
    r"""A data and time when the user was last modified."""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""A URL location of an object"""  
    