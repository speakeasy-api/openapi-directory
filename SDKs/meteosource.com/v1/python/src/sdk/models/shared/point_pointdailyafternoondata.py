"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import point_pointdailyafternooncloudcoverdata as shared_point_pointdailyafternooncloudcoverdata
from ..shared import point_pointdailyafternoonprecipitationdata as shared_point_pointdailyafternoonprecipitationdata
from ..shared import point_pointdailyafternoonprobdata as shared_point_pointdailyafternoonprobdata
from ..shared import point_pointdailyafternoonwinddata as shared_point_pointdailyafternoonwinddata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PointPointDailyAfternoonData:
    
    cloud_cover: shared_point_pointdailyafternooncloudcoverdata.PointPointDailyAfternoonCloudCoverData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloud_cover') }})  
    precipitation: shared_point_pointdailyafternoonprecipitationdata.PointPointDailyAfternoonPrecipitationData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('precipitation') }})  
    probability: shared_point_pointdailyafternoonprobdata.PointPointDailyAfternoonProbData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('probability') }})  
    wind: shared_point_pointdailyafternoonwinddata.PointPointDailyAfternoonWindData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wind') }})  
    dew_point: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dew_point'), 'exclude': lambda f: f is None }})
    r"""Units: metric = °C, us = °F, uk = °C, ca = °C"""  
    feels_like: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feels_like'), 'exclude': lambda f: f is None }})
    r"""Units: metric = °C, us = °F, uk = °C, ca = °C"""  
    humidity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('humidity'), 'exclude': lambda f: f is None }})
    r"""Relative humidity. (afternoon avg)
    Unit: \%
    """  
    icon: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icon'), 'exclude': lambda f: f is None }})
    r"""Afternoon umeric identifier of the weather icon. The following values can appear:
    
    * 1 - Not available
    * 2 - Sunny
    * 3 - Mostly sunny
    * 4 - Partly sunny
    * 5 - Mostly cloudy
    * 6 - Cloudy
    * 7 - Overcast
    * 8 - Overcast with low clouds
    * 9 - Fog
    * 10 - Light rain
    * 11 - Rain
    * 12 - Possible rain
    * 13 - Rain shower
    * 14 - Thunderstorm
    * 15 - Local thunderstorms
    * 16 - Light snow
    * 17 - Snow
    * 18 - Possible snow
    * 19 - Snow shower
    * 20 - Rain and snow
    * 21 - Possible rain and snow
    * 22 - Rain and snow
    * 23 - Freezing rain
    * 24 - Possible freezing rain
    * 25 - Hail
    * 26 - Clear (night)
    * 27 - Mostly clear (night)
    * 28 - Partly clear (night)
    * 29 - Mostly cloudy (night)
    * 30 - Cloudy (night)
    * 31 - Overcast with low clouds (night)
    * 32 - Rain shower (night)
    * 33 - Local thunderstorms (night)
    * 34 - Snow shower (night)
    * 35 - Rain and snow (night)
    * 36 - Possible freezing rain (night)
    
    Unit: icon
    """  
    ozone: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ozone'), 'exclude': lambda f: f is None }})
    r"""Total column of ozone. (afternoon avg)
    Unit: Dobson
    """  
    pressure: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pressure'), 'exclude': lambda f: f is None }})
    r"""Atmospheric pressure at mean sea level. (afternoon avg)
    Units: metric = hPa, us = Hg, uk = hPa, ca = kPa
    """  
    snow_depth: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snow_depth'), 'exclude': lambda f: f is None }})
    r"""Snow depth. (afternoon avg)
    Units: metric = cm, us = inch, uk = cm, ca = cm
    """  
    soil_temperature: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('soil_temperature'), 'exclude': lambda f: f is None }})
    r"""Units: metric = °C, us = °F, uk = °C, ca = °C"""  
    surface_temperature: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('surface_temperature'), 'exclude': lambda f: f is None }})
    r"""Units: metric = °C, us = °F, uk = °C, ca = °C"""  
    temperature: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('temperature'), 'exclude': lambda f: f is None }})
    r"""Temperature 2 metres above ground. (afternoon avg)
    Units: metric = °C, us = °F, uk = °C, ca = °C
    """  
    visibility: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility'), 'exclude': lambda f: f is None }})
    r"""Visibility. (afternoon avg)
    Units: metric = km, us = mi, uk = mi, ca = km
    """  
    weather: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weather'), 'exclude': lambda f: f is None }})
    r"""Afternoon day string identifier of the weather icon, e.g. `light_rain`."""  
    wind_chill: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wind_chill'), 'exclude': lambda f: f is None }})
    r"""Temperature 2 metres above ground. (afternoon avg)
    Units: metric = °C, us = °F, uk = °C, ca = °C
    """  
    