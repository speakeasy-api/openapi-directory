"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import user as shared_user
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PermissionRoleEnum(str, Enum):
    r"""Indicates the Google Drive permissions role. The role determines a user's ability to read, write, or comment on the file."""
    COMMENTER = 'commenter'
    FILE_ORGANIZER = 'fileOrganizer'
    OWNER = 'owner'
    PUBLISHED_READER = 'publishedReader'
    READER = 'reader'
    WRITER = 'writer'

class PermissionTypeEnum(str, Enum):
    r"""Indicates how widely permissions are granted."""
    ANYONE = 'anyone'
    DOMAIN = 'domain'
    GROUP = 'group'
    USER = 'user'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Permission:
    r"""Contains information about the permissions and type of access allowed with regards to a Google Drive object. This is a subset of the fields contained in a corresponding Drive Permissions object."""
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the user or group the permission applies to."""  
    permission_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissionId'), 'exclude': lambda f: f is None }})
    r"""The ID for this permission. Corresponds to the Drive API's permission ID returned as part of the Drive Permissions resource."""  
    role: Optional[PermissionRoleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""Indicates the Google Drive permissions role. The role determines a user's ability to read, write, or comment on the file."""  
    type: Optional[PermissionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Indicates how widely permissions are granted."""  
    user: Optional[shared_user.User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""A representation of a user."""  
    with_link: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('withLink'), 'exclude': lambda f: f is None }})
    r"""Whether the permission requires a link to the file."""  
    