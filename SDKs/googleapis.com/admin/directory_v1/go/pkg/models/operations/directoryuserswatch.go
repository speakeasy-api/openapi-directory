// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DirectoryUsersWatchSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type DirectoryUsersWatchSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type DirectoryUsersWatchSecurityOption3 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type DirectoryUsersWatchSecurity struct {
	Option1 *DirectoryUsersWatchSecurityOption1 `security:"option"`
	Option2 *DirectoryUsersWatchSecurityOption2 `security:"option"`
	Option3 *DirectoryUsersWatchSecurityOption3 `security:"option"`
}

// DirectoryUsersWatchEventEnum - Events to watch for.
type DirectoryUsersWatchEventEnum string

const (
	DirectoryUsersWatchEventEnumAdd       DirectoryUsersWatchEventEnum = "add"
	DirectoryUsersWatchEventEnumDelete    DirectoryUsersWatchEventEnum = "delete"
	DirectoryUsersWatchEventEnumMakeAdmin DirectoryUsersWatchEventEnum = "makeAdmin"
	DirectoryUsersWatchEventEnumUndelete  DirectoryUsersWatchEventEnum = "undelete"
	DirectoryUsersWatchEventEnumUpdate    DirectoryUsersWatchEventEnum = "update"
)

func (e DirectoryUsersWatchEventEnum) ToPointer() *DirectoryUsersWatchEventEnum {
	return &e
}

func (e *DirectoryUsersWatchEventEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "add":
		fallthrough
	case "delete":
		fallthrough
	case "makeAdmin":
		fallthrough
	case "undelete":
		fallthrough
	case "update":
		*e = DirectoryUsersWatchEventEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DirectoryUsersWatchEventEnum: %v", v)
	}
}

// DirectoryUsersWatchOrderByEnum - Column to use for sorting results
type DirectoryUsersWatchOrderByEnum string

const (
	DirectoryUsersWatchOrderByEnumEmail      DirectoryUsersWatchOrderByEnum = "email"
	DirectoryUsersWatchOrderByEnumFamilyName DirectoryUsersWatchOrderByEnum = "familyName"
	DirectoryUsersWatchOrderByEnumGivenName  DirectoryUsersWatchOrderByEnum = "givenName"
)

func (e DirectoryUsersWatchOrderByEnum) ToPointer() *DirectoryUsersWatchOrderByEnum {
	return &e
}

func (e *DirectoryUsersWatchOrderByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		fallthrough
	case "familyName":
		fallthrough
	case "givenName":
		*e = DirectoryUsersWatchOrderByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DirectoryUsersWatchOrderByEnum: %v", v)
	}
}

// DirectoryUsersWatchProjectionEnum - What subset of fields to fetch for this user.
type DirectoryUsersWatchProjectionEnum string

const (
	DirectoryUsersWatchProjectionEnumBasic  DirectoryUsersWatchProjectionEnum = "basic"
	DirectoryUsersWatchProjectionEnumCustom DirectoryUsersWatchProjectionEnum = "custom"
	DirectoryUsersWatchProjectionEnumFull   DirectoryUsersWatchProjectionEnum = "full"
)

func (e DirectoryUsersWatchProjectionEnum) ToPointer() *DirectoryUsersWatchProjectionEnum {
	return &e
}

func (e *DirectoryUsersWatchProjectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		fallthrough
	case "custom":
		fallthrough
	case "full":
		*e = DirectoryUsersWatchProjectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DirectoryUsersWatchProjectionEnum: %v", v)
	}
}

// DirectoryUsersWatchSortOrderEnum - Whether to return results in ascending or descending order.
type DirectoryUsersWatchSortOrderEnum string

const (
	DirectoryUsersWatchSortOrderEnumAscending  DirectoryUsersWatchSortOrderEnum = "ASCENDING"
	DirectoryUsersWatchSortOrderEnumDescending DirectoryUsersWatchSortOrderEnum = "DESCENDING"
)

func (e DirectoryUsersWatchSortOrderEnum) ToPointer() *DirectoryUsersWatchSortOrderEnum {
	return &e
}

func (e *DirectoryUsersWatchSortOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASCENDING":
		fallthrough
	case "DESCENDING":
		*e = DirectoryUsersWatchSortOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DirectoryUsersWatchSortOrderEnum: %v", v)
	}
}

// DirectoryUsersWatchViewTypeEnum - Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).
type DirectoryUsersWatchViewTypeEnum string

const (
	DirectoryUsersWatchViewTypeEnumAdminView    DirectoryUsersWatchViewTypeEnum = "admin_view"
	DirectoryUsersWatchViewTypeEnumDomainPublic DirectoryUsersWatchViewTypeEnum = "domain_public"
)

func (e DirectoryUsersWatchViewTypeEnum) ToPointer() *DirectoryUsersWatchViewTypeEnum {
	return &e
}

func (e *DirectoryUsersWatchViewTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin_view":
		fallthrough
	case "domain_public":
		*e = DirectoryUsersWatchViewTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DirectoryUsersWatchViewTypeEnum: %v", v)
	}
}

type DirectoryUsersWatchRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	Channel     *shared.Channel   `request:"mediaType=application/json"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.
	CustomFieldMask *string `queryParam:"style=form,explode=true,name=customFieldMask"`
	// Immutable ID of the Google Workspace account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.
	Customer *string `queryParam:"style=form,explode=true,name=customer"`
	// Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead."
	Domain *string `queryParam:"style=form,explode=true,name=domain"`
	// Events to watch for.
	Event *DirectoryUsersWatchEventEnum `queryParam:"style=form,explode=true,name=event"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Maximum number of results to return.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Column to use for sorting results
	OrderBy *DirectoryUsersWatchOrderByEnum `queryParam:"style=form,explode=true,name=orderBy"`
	// Token to specify next page in the list
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// What subset of fields to fetch for this user.
	Projection *DirectoryUsersWatchProjectionEnum `queryParam:"style=form,explode=true,name=projection"`
	// Query string search. Should be of the form "". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// If set to true, retrieves the list of deleted users. (Default: false)
	ShowDeleted *string `queryParam:"style=form,explode=true,name=showDeleted"`
	// Whether to return results in ascending or descending order.
	SortOrder *DirectoryUsersWatchSortOrderEnum `queryParam:"style=form,explode=true,name=sortOrder"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).
	ViewType *DirectoryUsersWatchViewTypeEnum `queryParam:"style=form,explode=true,name=viewType"`
}

type DirectoryUsersWatchResponse struct {
	// Successful response
	Channel     *shared.Channel
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
