"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import openhoursrule as shared_openhoursrule
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OpenHours:
    r"""The time when journey allow to send messages. QuietTime should be configured first and SendingSchedule should be set to true."""
    
    custom: Optional[dict[str, list[shared_openhoursrule.OpenHoursRule]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CUSTOM'), 'exclude': lambda f: f is None }})  
    email: Optional[dict[str, list[shared_openhoursrule.OpenHoursRule]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EMAIL'), 'exclude': lambda f: f is None }})  
    push: Optional[dict[str, list[shared_openhoursrule.OpenHoursRule]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PUSH'), 'exclude': lambda f: f is None }})  
    sms: Optional[dict[str, list[shared_openhoursrule.OpenHoursRule]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SMS'), 'exclude': lambda f: f is None }})  
    voice: Optional[dict[str, list[shared_openhoursrule.OpenHoursRule]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VOICE'), 'exclude': lambda f: f is None }})  
    