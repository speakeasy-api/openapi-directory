// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SkaffoldSupportedConditionSkaffoldSupportStateEnum - The skaffold support state for this release's version of skaffold.
type SkaffoldSupportedConditionSkaffoldSupportStateEnum string

const (
	SkaffoldSupportedConditionSkaffoldSupportStateEnumSkaffoldSupportStateUnspecified     SkaffoldSupportedConditionSkaffoldSupportStateEnum = "SKAFFOLD_SUPPORT_STATE_UNSPECIFIED"
	SkaffoldSupportedConditionSkaffoldSupportStateEnumSkaffoldSupportStateSupported       SkaffoldSupportedConditionSkaffoldSupportStateEnum = "SKAFFOLD_SUPPORT_STATE_SUPPORTED"
	SkaffoldSupportedConditionSkaffoldSupportStateEnumSkaffoldSupportStateMaintenanceMode SkaffoldSupportedConditionSkaffoldSupportStateEnum = "SKAFFOLD_SUPPORT_STATE_MAINTENANCE_MODE"
	SkaffoldSupportedConditionSkaffoldSupportStateEnumSkaffoldSupportStateUnsupported     SkaffoldSupportedConditionSkaffoldSupportStateEnum = "SKAFFOLD_SUPPORT_STATE_UNSUPPORTED"
)

func (e *SkaffoldSupportedConditionSkaffoldSupportStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SKAFFOLD_SUPPORT_STATE_UNSPECIFIED":
		fallthrough
	case "SKAFFOLD_SUPPORT_STATE_SUPPORTED":
		fallthrough
	case "SKAFFOLD_SUPPORT_STATE_MAINTENANCE_MODE":
		fallthrough
	case "SKAFFOLD_SUPPORT_STATE_UNSUPPORTED":
		*e = SkaffoldSupportedConditionSkaffoldSupportStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SkaffoldSupportedConditionSkaffoldSupportStateEnum: %s", s)
	}
}

// SkaffoldSupportedCondition - SkaffoldSupportedCondition contains information about when support for the release's version of skaffold ends.
type SkaffoldSupportedCondition struct {
	// The time at which this release's version of skaffold will enter maintenance mode.
	MaintenanceModeTime *string `json:"maintenanceModeTime,omitempty"`
	// The skaffold support state for this release's version of skaffold.
	SkaffoldSupportState *SkaffoldSupportedConditionSkaffoldSupportStateEnum `json:"skaffoldSupportState,omitempty"`
	// True if the version of skaffold used by this release is supported.
	Status *bool `json:"status,omitempty"`
	// The time at which this release's version of skaffold will no longer be supported.
	SupportExpirationTime *string `json:"supportExpirationTime,omitempty"`
}
