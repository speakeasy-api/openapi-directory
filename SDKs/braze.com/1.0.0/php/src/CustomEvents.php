<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CustomEvents 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Custom Events Analytics
     * 
     * This endpoint allows you to retrieve a series of the number of occurrences of a custom event in your app over a designated time period.
     * 
     * ### Components Used
     * -[Segment Identifier](https://www.braze.com/docs/api/identifier_types/)
     * 
     * 
     * ## Response
     * 
     * ```json
     * Content-Type: application/json
     * Authorization: Bearer YOUR-REST-API-KEY
     * {
     *     "message": (required, string) the status of the export, returns 'success' when completed without errors,
     *     "data" : [
     *         {
     *             "time" : (string) point in time - as ISO 8601 extended when unit is "hour" and as ISO 8601 date when unit is "day",
     *             "count" : (int)
     *         },
     *         ...
     *     ]
     * }
     * ```
     * 
     * ### Fatal Error Response Codes
     * The following status codes and associated error messages will be returned if your request encounters a fatal error. Any of these error codes indicate that no data will be processed.
     * 
     * | Error Code       | Reason / Cause                                                   |
     * | ---------------- | ---------------------------------------------------------------- |
     * | 400 Bad Request  | Bad Syntax                                                       |
     * | 401 Unauthorized | Unknown or missing REST API Key                                  |
     * | 429 Rate Limited | Over rate limit                                                  |
     * | 5XX              | Internal server error, you should retry with exponential backoff |
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomEventsAnalyticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomEventsAnalyticsResponse
     */
	public function customEventsAnalytics(
        \OpenAPI\OpenAPI\Models\Operations\CustomEventsAnalyticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomEventsAnalyticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/events/data_series');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomEventsAnalyticsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomEventsAnalyticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Custom Events List
     * 
     * This endpoint allows you to export a list of custom events that have been recorded for your app. The event names are returned in groups of 250, sorted alphabetically.
     * 
     * 
     * ## Response
     * 
     * ```json
     * Content-Type: application/json
     * Authorization: Bearer YOUR-REST-API-KEY
     * {
     *     "message": (required, string) the status of the export, returns 'success' when completed without errors,
     *     "events" : [
     *         "Event A",
     *         "Event B",
     *         "Event C",
     *         ...
     *     ]
     * }
     * ```
     * 
     * ### Fatal Error Response Codes
     * 
     * The following status codes and associated error messages will be returned if your request encounters a fatal error. Any of these error codes indicate that no data will be processed.
     * 
     * | Error Code       | Reason / Cause                                                   |
     * | ---------------- | ---------------------------------------------------------------- |
     * | 400 Bad Request  | Bad Syntax                                                       |
     * | 401 Unauthorized | Unknown or missing REST API Key                                  |
     * | 429 Rate Limited | Over rate limit                                                  |
     * | 5XX              | Internal server error, you should retry with exponential backoff |
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomEventsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomEventsListResponse
     */
	public function customEventsList(
        \OpenAPI\OpenAPI\Models\Operations\CustomEventsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomEventsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/events/list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomEventsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomEventsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}