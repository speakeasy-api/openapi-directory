// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// Order - Order. Production access (all methods) requires the order manager role. Sandbox access does not.
type Order struct {
	// Whether the order was acknowledged.
	Acknowledged *bool `json:"acknowledged,omitempty"`
	// List of key-value pairs that are attached to a given order.
	Annotations     []OrderOrderAnnotation `json:"annotations,omitempty"`
	BillingAddress  *OrderAddress          `json:"billingAddress,omitempty"`
	Customer        *OrderCustomer         `json:"customer,omitempty"`
	DeliveryDetails *OrderDeliveryDetails  `json:"deliveryDetails,omitempty"`
	// The REST ID of the order. Globally unique.
	ID *string `json:"id,omitempty"`
	// Identifies what kind of resource this is. Value: the fixed string "`content#order`"
	Kind *string `json:"kind,omitempty"`
	// Line items that are ordered.
	LineItems  []OrderLineItem `json:"lineItems,omitempty"`
	MerchantID *string         `json:"merchantId,omitempty"`
	// Merchant-provided ID of the order.
	MerchantOrderID *string `json:"merchantOrderId,omitempty"`
	NetPriceAmount  *Price  `json:"netPriceAmount,omitempty"`
	NetTaxAmount    *Price  `json:"netTaxAmount,omitempty"`
	// The status of the payment. Acceptable values are: - "`paymentCaptured`" - "`paymentRejected`" - "`paymentSecured`" - "`pendingAuthorization`"
	PaymentStatus *string             `json:"paymentStatus,omitempty"`
	PickupDetails *OrderPickupDetails `json:"pickupDetails,omitempty"`
	// The date when the order was placed, in ISO 8601 format.
	PlacedDate *string `json:"placedDate,omitempty"`
	// Promotions associated with the order. To determine which promotions apply to which products, check the `Promotions[].appliedItems[].lineItemId` field against the `LineItems[].id` field for each promotion. If a promotion is applied to more than 1 offerId, divide the discount value by the number of affected offers to determine how much discount to apply to each offerId. Examples: 1. To calculate price paid by the customer for a single line item including the discount: For each promotion, subtract the `LineItems[].adjustments[].priceAdjustment.value` amount from the `LineItems[].Price.value`. 2. To calculate price paid by the customer for a single line item including the discount in case of multiple quantity: For each promotion, divide the `LineItems[].adjustments[].priceAdjustment.value` by the quantity of products then subtract the resulting value from the `LineItems[].Product.Price.value` for each quantity item. Only 1 promotion can be applied to an offerId in a given order. To refund an item which had a promotion applied to it, make sure to refund the amount after first subtracting the promotion discount from the item price. More details about the program are here.
	Promotions []OrderPromotion `json:"promotions,omitempty"`
	// Refunds for the order.
	Refunds []OrderRefund `json:"refunds,omitempty"`
	// Shipments of the order.
	Shipments       []OrderShipment `json:"shipments,omitempty"`
	ShippingCost    *Price          `json:"shippingCost,omitempty"`
	ShippingCostTax *Price          `json:"shippingCostTax,omitempty"`
	// The status of the order. Acceptable values are: - "`canceled`" - "`delivered`" - "`inProgress`" - "`partiallyDelivered`" - "`partiallyReturned`" - "`partiallyShipped`" - "`pendingShipment`" - "`returned`" - "`shipped`"
	Status *string `json:"status,omitempty"`
	// The party responsible for collecting and remitting taxes. Acceptable values are: - "`marketplaceFacilitator`" - "`merchant`"
	TaxCollector *string `json:"taxCollector,omitempty"`
}
