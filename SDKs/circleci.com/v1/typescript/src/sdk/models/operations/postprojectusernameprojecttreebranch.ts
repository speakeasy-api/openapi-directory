/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class PostProjectUsernameProjectTreeBranchRequestBody extends SpeakeasyBase {
  /**
   * Additional environment variables to inject into the build environment. A map of names to values.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "build_parameters" })
  buildParameters?: Record<string, any>;

  /**
   * The number of containers to use to run the build. Default is null and the project default is used.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parallel" })
  parallel?: string;

  /**
   * The specific revision to build.
   *
   * @remarks
   * Default is null and the head of the branch is used. Cannot be used with tag parameter.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "revision" })
  revision?: string;
}

export class PostProjectUsernameProjectTreeBranchRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: PostProjectUsernameProjectTreeBranchRequestBody;

  /**
   * The branch name should be url-encoded.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=branch",
  })
  branch: string;

  /**
   * XXXXXXXXX
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=project",
  })
  project: string;

  /**
   * XXXXXXXXX
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=username",
  })
  username: string;
}

export class PostProjectUsernameProjectTreeBranchResponse extends SpeakeasyBase {
  /**
   * returns a summary of the build
   */
  @SpeakeasyMetadata()
  build?: shared.Build;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
