"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Filters:
    r"""differents requests to filter cards"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_categories(self) -> operations.GetCategoriesResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/categories'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCategoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_categories_200_application_json_strings = out

        return res

    def get_categories_category_(self, request: operations.GetCategoriesCategoryRequest) -> operations.GetCategoriesCategoryResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCategoriesCategoryRequest, base_url, '/categories/{category}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCategoriesCategoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StringEndpoint])
                res.string_endpoint = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_dex_ids(self) -> operations.GetDexIdsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dex-ids'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDexIdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_dex_ids_200_application_json_strings = out

        return res

    def get_dex_ids_dex_id_(self, request: operations.GetDexIdsDexIDRequest) -> operations.GetDexIdsDexIDResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDexIdsDexIDRequest, base_url, '/dex-ids/{dexId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDexIdsDexIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CardResume]])
                res.card_resumes = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_energy_types(self) -> operations.GetEnergyTypesResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/energy-types'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEnergyTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_energy_types_200_application_json_strings = out

        return res

    def get_energy_types_energy_type_(self, request: operations.GetEnergyTypesEnergyTypeRequest) -> operations.GetEnergyTypesEnergyTypeResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEnergyTypesEnergyTypeRequest, base_url, '/energy-types/{energy-type}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEnergyTypesEnergyTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CardResume]])
                res.card_resumes = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_hp(self) -> operations.GetHpResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/hp'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetHpResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_hp_200_application_json_strings = out

        return res

    def get_hp_hp_(self, request: operations.GetHpHpRequest) -> operations.GetHpHpResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetHpHpRequest, base_url, '/hp/{hp}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetHpHpResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StringEndpoint])
                res.string_endpoint = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_illustrators(self) -> operations.GetIllustratorsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/illustrators'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIllustratorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_illustrators_200_application_json_strings = out

        return res

    def get_illustrators_illustrator_(self, request: operations.GetIllustratorsIllustratorRequest) -> operations.GetIllustratorsIllustratorResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIllustratorsIllustratorRequest, base_url, '/illustrators/{illustrator}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIllustratorsIllustratorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StringEndpoint])
                res.string_endpoint = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_rarities(self) -> operations.GetRaritiesResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/rarities'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRaritiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_rarities_200_application_json_strings = out

        return res

    def get_rarities_rarity_(self, request: operations.GetRaritiesRarityRequest) -> operations.GetRaritiesRarityResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRaritiesRarityRequest, base_url, '/rarities/{rarity}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRaritiesRarityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StringEndpoint])
                res.string_endpoint = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_regulation_marks(self) -> operations.GetRegulationMarksResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/regulation-marks'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRegulationMarksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_regulation_marks_200_application_json_strings = out

        return res

    def get_regulation_marks_regulation_mark_(self, request: operations.GetRegulationMarksRegulationMarkRequest) -> operations.GetRegulationMarksRegulationMarkResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRegulationMarksRegulationMarkRequest, base_url, '/regulation-marks/{regulation-mark}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRegulationMarksRegulationMarkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CardResume]])
                res.card_resumes = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_retreats(self) -> operations.GetRetreatsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/retreats'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRetreatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_retreats_200_application_json_strings = out

        return res

    def get_retreats_retreat_(self, request: operations.GetRetreatsRetreatRequest) -> operations.GetRetreatsRetreatResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRetreatsRetreatRequest, base_url, '/retreats/{retreat}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRetreatsRetreatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StringEndpoint])
                res.string_endpoint = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_series(self) -> operations.GetSeriesResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/series'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSeriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SerieResume]])
                res.serie_resumes = out

        return res

    def get_series_serie_(self, request: operations.GetSeriesSerieRequest) -> operations.GetSeriesSerieResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSeriesSerieRequest, base_url, '/series/{serie}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSeriesSerieResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Serie])
                res.serie = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_sets(self) -> operations.GetSetsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sets'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SetResume]])
                res.set_resumes = out

        return res

    def get_sets_set_(self, request: operations.GetSetsSetRequest) -> operations.GetSetsSetResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSetsSetRequest, base_url, '/sets/{set}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetsSetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Set])
                res.set = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_stages(self) -> operations.GetStagesResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/stages'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_stages_200_application_json_strings = out

        return res

    def get_stages_stage_(self, request: operations.GetStagesStageRequest) -> operations.GetStagesStageResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetStagesStageRequest, base_url, '/stages/{stage}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStagesStageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CardResume]])
                res.card_resumes = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_suffixes(self) -> operations.GetSuffixesResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/suffixes'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSuffixesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_suffixes_200_application_json_strings = out

        return res

    def get_suffixes_suffix_(self, request: operations.GetSuffixesSuffixRequest) -> operations.GetSuffixesSuffixResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSuffixesSuffixRequest, base_url, '/suffixes/{suffix}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSuffixesSuffixResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CardResume]])
                res.card_resumes = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_trainer_types(self) -> operations.GetTrainerTypesResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/trainer-types'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTrainerTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_trainer_types_200_application_json_strings = out

        return res

    def get_trainer_types_trainer_type_(self, request: operations.GetTrainerTypesTrainerTypeRequest) -> operations.GetTrainerTypesTrainerTypeResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTrainerTypesTrainerTypeRequest, base_url, '/trainer-types/{trainer-type}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTrainerTypesTrainerTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CardResume]])
                res.card_resumes = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_types(self) -> operations.GetTypesResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/types'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_types_200_application_json_strings = out

        return res

    def get_types_type_(self, request: operations.GetTypesTypeRequest) -> operations.GetTypesTypeResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTypesTypeRequest, base_url, '/types/{type}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTypesTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CardResume]])
                res.card_resumes = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_variants(self) -> operations.GetVariantsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/variants'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVariantsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_variants_200_application_json_strings = out

        return res

    def get_variants_variant_(self, request: operations.GetVariantsVariantRequest) -> operations.GetVariantsVariantResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVariantsVariantRequest, base_url, '/variants/{variant}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVariantsVariantResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CardResume]])
                res.card_resumes = out
        elif http_res.status_code == 404:
            pass

        return res

    