// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DescribeInstanceEventWindowsResultInstanceEventWindowsAssociationTargetTags - Describes a tag.
type DescribeInstanceEventWindowsResultInstanceEventWindowsAssociationTargetTags struct {
	Key   *string
	Value *string
}

// DescribeInstanceEventWindowsResultInstanceEventWindowsAssociationTarget - One or more targets associated with the event window.
type DescribeInstanceEventWindowsResultInstanceEventWindowsAssociationTarget struct {
	DedicatedHostIds []string
	InstanceIds      []string
	Tags             []DescribeInstanceEventWindowsResultInstanceEventWindowsAssociationTargetTags
}

// DescribeInstanceEventWindowsResultInstanceEventWindowsStateEnum - The current state of the event window.
type DescribeInstanceEventWindowsResultInstanceEventWindowsStateEnum string

const (
	DescribeInstanceEventWindowsResultInstanceEventWindowsStateEnumCreating DescribeInstanceEventWindowsResultInstanceEventWindowsStateEnum = "creating"
	DescribeInstanceEventWindowsResultInstanceEventWindowsStateEnumDeleting DescribeInstanceEventWindowsResultInstanceEventWindowsStateEnum = "deleting"
	DescribeInstanceEventWindowsResultInstanceEventWindowsStateEnumActive   DescribeInstanceEventWindowsResultInstanceEventWindowsStateEnum = "active"
	DescribeInstanceEventWindowsResultInstanceEventWindowsStateEnumDeleted  DescribeInstanceEventWindowsResultInstanceEventWindowsStateEnum = "deleted"
)

func (e DescribeInstanceEventWindowsResultInstanceEventWindowsStateEnum) ToPointer() *DescribeInstanceEventWindowsResultInstanceEventWindowsStateEnum {
	return &e
}

func (e *DescribeInstanceEventWindowsResultInstanceEventWindowsStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "creating":
		fallthrough
	case "deleting":
		fallthrough
	case "active":
		fallthrough
	case "deleted":
		*e = DescribeInstanceEventWindowsResultInstanceEventWindowsStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeInstanceEventWindowsResultInstanceEventWindowsStateEnum: %v", v)
	}
}

// DescribeInstanceEventWindowsResultInstanceEventWindowsTags - Describes a tag.
type DescribeInstanceEventWindowsResultInstanceEventWindowsTags struct {
	Key   *string
	Value *string
}

// DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnum - The day on which the time range ends.
type DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnum string

const (
	DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnumSunday    DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnum = "sunday"
	DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnumMonday    DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnum = "monday"
	DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnumTuesday   DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnum = "tuesday"
	DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnumWednesday DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnum = "wednesday"
	DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnumThursday  DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnum = "thursday"
	DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnumFriday    DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnum = "friday"
	DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnumSaturday  DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnum = "saturday"
)

func (e DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnum) ToPointer() *DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnum {
	return &e
}

func (e *DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sunday":
		fallthrough
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		*e = DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnum: %v", v)
	}
}

// DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnum - The day on which the time range begins.
type DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnum string

const (
	DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnumSunday    DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnum = "sunday"
	DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnumMonday    DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnum = "monday"
	DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnumTuesday   DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnum = "tuesday"
	DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnumWednesday DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnum = "wednesday"
	DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnumThursday  DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnum = "thursday"
	DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnumFriday    DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnum = "friday"
	DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnumSaturday  DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnum = "saturday"
)

func (e DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnum) ToPointer() *DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnum {
	return &e
}

func (e *DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sunday":
		fallthrough
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		*e = DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnum: %v", v)
	}
}

// DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRanges - The start day and time and the end day and time of the time range, in UTC.
type DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRanges struct {
	EndHour      *int64
	EndWeekDay   *DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesEndWeekDayEnum
	StartHour    *int64
	StartWeekDay *DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRangesStartWeekDayEnum
}

// DescribeInstanceEventWindowsResultInstanceEventWindows - The event window.
type DescribeInstanceEventWindowsResultInstanceEventWindows struct {
	AssociationTarget     *DescribeInstanceEventWindowsResultInstanceEventWindowsAssociationTarget
	CronExpression        *string
	InstanceEventWindowID *string
	Name                  *string
	State                 *DescribeInstanceEventWindowsResultInstanceEventWindowsStateEnum
	Tags                  []DescribeInstanceEventWindowsResultInstanceEventWindowsTags
	TimeRanges            []DescribeInstanceEventWindowsResultInstanceEventWindowsTimeRanges
}

// DescribeInstanceEventWindowsResult - Success
type DescribeInstanceEventWindowsResult struct {
	InstanceEventWindows []DescribeInstanceEventWindowsResultInstanceEventWindows
	NextToken            *string
}
