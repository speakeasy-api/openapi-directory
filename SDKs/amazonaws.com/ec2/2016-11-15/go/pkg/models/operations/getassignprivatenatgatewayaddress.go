// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETAssignPrivateNatGatewayAddressActionEnum
type GETAssignPrivateNatGatewayAddressActionEnum string

const (
	GETAssignPrivateNatGatewayAddressActionEnumAssignPrivateNatGatewayAddress GETAssignPrivateNatGatewayAddressActionEnum = "AssignPrivateNatGatewayAddress"
)

func (e *GETAssignPrivateNatGatewayAddressActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AssignPrivateNatGatewayAddress":
		*e = GETAssignPrivateNatGatewayAddressActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAssignPrivateNatGatewayAddressActionEnum: %s", s)
	}
}

// GETAssignPrivateNatGatewayAddressVersionEnum
type GETAssignPrivateNatGatewayAddressVersionEnum string

const (
	GETAssignPrivateNatGatewayAddressVersionEnumTwoThousandAndSixteen1115 GETAssignPrivateNatGatewayAddressVersionEnum = "2016-11-15"
)

func (e *GETAssignPrivateNatGatewayAddressVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETAssignPrivateNatGatewayAddressVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAssignPrivateNatGatewayAddressVersionEnum: %s", s)
	}
}

type GETAssignPrivateNatGatewayAddressQueryParams struct {
	Action GETAssignPrivateNatGatewayAddressActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The NAT gateway ID.
	NatGatewayID string `queryParam:"style=form,explode=true,name=NatGatewayId"`
	// The private IPv4 addresses you want to assign to the private NAT gateway.
	PrivateIPAddress []string `queryParam:"style=form,explode=true,name=PrivateIpAddress"`
	// The number of private IP addresses to assign to the NAT gateway. You can't specify this parameter when also specifying private IP addresses.
	PrivateIPAddressCount *int64                                       `queryParam:"style=form,explode=true,name=PrivateIpAddressCount"`
	Version               GETAssignPrivateNatGatewayAddressVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETAssignPrivateNatGatewayAddressHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETAssignPrivateNatGatewayAddressRequest struct {
	QueryParams GETAssignPrivateNatGatewayAddressQueryParams
	Headers     GETAssignPrivateNatGatewayAddressHeaders
}

type GETAssignPrivateNatGatewayAddressResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
