"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import marketdatafilter as shared_marketdatafilter
from ..shared import marketfilter as shared_marketfilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MarketSubscriptionMessage:
    
    clk: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clk'), 'exclude': lambda f: f is None }})
    r"""Token value delta (received in MarketChangeMessage) that should be passed to resume a subscription"""  
    conflate_ms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conflateMs'), 'exclude': lambda f: f is None }})
    r"""Conflate Milliseconds - the conflation rate (looped back on initial image after validation: bounds are 0 to 120000)"""  
    heartbeat_ms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('heartbeatMs'), 'exclude': lambda f: f is None }})
    r"""Heartbeat Milliseconds - the heartbeat rate (looped back on initial image after validation: bounds are 500 to 5000)"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Client generated unique id to link request with response (like json rpc)"""  
    initial_clk: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initialClk'), 'exclude': lambda f: f is None }})
    r"""Token value (received in initial MarketChangeMessage) that should be passed to resume a subscription"""  
    market_data_filter: Optional[shared_marketdatafilter.MarketDataFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketDataFilter'), 'exclude': lambda f: f is None }})  
    market_filter: Optional[shared_marketfilter.MarketFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketFilter'), 'exclude': lambda f: f is None }})  
    op: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('op'), 'exclude': lambda f: f is None }})
    r"""The operation type"""  
    segmentation_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segmentationEnabled'), 'exclude': lambda f: f is None }})
    r"""Segmentation Enabled - allow the server to send large sets of data in segments, instead of a single block"""  
    