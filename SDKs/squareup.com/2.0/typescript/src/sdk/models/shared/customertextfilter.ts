/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * A filter to select customers based on exact or fuzzy matching of
 *
 * @remarks
 * customer attributes against a specified query. Depending on the customer attributes,
 * the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
 */
export class CustomerTextFilter extends SpeakeasyBase {
  /**
   * Use the exact filter to select customers whose attributes match exactly the specified query.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exact" })
  exact?: string;

  /**
   * Use the fuzzy filter to select customers whose attributes match the specified query
   *
   * @remarks
   * in a fuzzy manner. When the fuzzy option is used, search queries are tokenized, and then
   * each query token must be matched somewhere in the searched attribute. For single token queries,
   * this is effectively the same behavior as a partial match operation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fuzzy" })
  fuzzy?: string;
}
