/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class CreateQuantumTaskRequestBody extends SpeakeasyBase {
  /**
   * The action associated with the task.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  action: string;

  /**
   * The client token associated with the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken: string;

  /**
   * The ARN of the device to run the task on.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deviceArn" })
  deviceArn: string;

  /**
   * The parameters for the device to run the task on.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deviceParameters" })
  deviceParameters?: string;

  /**
   * The token for an Amazon Braket job that associates it with the quantum task.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jobToken" })
  jobToken?: string;

  /**
   * The S3 bucket to store task result files in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outputS3Bucket" })
  outputS3Bucket: string;

  /**
   * The key prefix for the location in the S3 bucket to store task results in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outputS3KeyPrefix" })
  outputS3KeyPrefix: string;

  /**
   * The number of shots to use for the task.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shots" })
  shots: number;

  /**
   * Tags to be added to the quantum task you're creating.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateQuantumTaskRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateQuantumTaskRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateQuantumTaskResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createQuantumTaskResponse?: shared.CreateQuantumTaskResponse;

  /**
   * DeviceOfflineException
   */
  @SpeakeasyMetadata()
  deviceOfflineException?: any;

  /**
   * DeviceRetiredException
   */
  @SpeakeasyMetadata()
  deviceRetiredException?: any;

  /**
   * InternalServiceException
   */
  @SpeakeasyMetadata()
  internalServiceException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
