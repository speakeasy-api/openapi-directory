// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// OrganisationLegalEntityTypeEnum - The organisation's legal entity type.
type OrganisationLegalEntityTypeEnum string

const (
	OrganisationLegalEntityTypeEnumCompany      OrganisationLegalEntityTypeEnum = "Company"
	OrganisationLegalEntityTypeEnumPartnership  OrganisationLegalEntityTypeEnum = "Partnership"
	OrganisationLegalEntityTypeEnumTrust        OrganisationLegalEntityTypeEnum = "Trust"
	OrganisationLegalEntityTypeEnumJointVenture OrganisationLegalEntityTypeEnum = "Joint Venture"
)

func (e OrganisationLegalEntityTypeEnum) ToPointer() *OrganisationLegalEntityTypeEnum {
	return &e
}

func (e *OrganisationLegalEntityTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Company":
		fallthrough
	case "Partnership":
		fallthrough
	case "Trust":
		fallthrough
	case "Joint Venture":
		*e = OrganisationLegalEntityTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrganisationLegalEntityTypeEnum: %v", v)
	}
}

// OrganisationInput - The Organisation resource.
type OrganisationInput struct {
	Addresses           []OrganisationAddressInput `json:"addresses,omitempty"`
	ElectronicAddresses []ElectronicAddressInput   `json:"electronicAddresses,omitempty"`
	// The organisation's establishment date, for example, `1928-03-03` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).
	EstablishmentDate types.Date `json:"establishmentDate"`
	// The organisation's legal entity type.
	LegalEntityType       OrganisationLegalEntityTypeEnum `json:"legalEntityType"`
	Names                 []OrganisationNameInput         `json:"names,omitempty"`
	RegisteredIdentifiers []RegisteredIdentifierInput     `json:"registeredIdentifiers,omitempty"`
}

// Organisation - The Organisation resource.
type Organisation struct {
	Addresses           []OrganisationAddress `json:"addresses,omitempty"`
	ElectronicAddresses []ElectronicAddress   `json:"electronicAddresses,omitempty"`
	// The organisation's establishment date, for example, `1928-03-03` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).
	EstablishmentDate types.Date `json:"establishmentDate"`
	// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
	FromDate *time.Time `json:"fromDate,omitempty"`
	// The party's unique identifier.
	ID *string `json:"id,omitempty"`
	// The organisation's legal entity type.
	LegalEntityType       OrganisationLegalEntityTypeEnum `json:"legalEntityType"`
	Names                 []OrganisationName              `json:"names,omitempty"`
	RegisteredIdentifiers []RegisteredIdentifier          `json:"registeredIdentifiers,omitempty"`
	// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
	ToDate *time.Time `json:"toDate,omitempty"`
}
