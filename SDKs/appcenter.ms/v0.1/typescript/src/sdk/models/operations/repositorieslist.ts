/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class RepositoriesListSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

/**
 * The selected form of the object
 */
export enum RepositoriesListFormEnum {
  Lite = "lite",
  Full = "full",
}

/**
 * The source host
 */
export enum RepositoriesListSourceHostEnum {
  Github = "github",
  Bitbucket = "bitbucket",
  Vsts = "vsts",
  Gitlab = "gitlab",
}

export class RepositoriesListRequest extends SpeakeasyBase {
  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The selected form of the object
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=form" })
  form?: RepositoriesListFormEnum;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;

  /**
   * The id of the service connection (private). Required for GitLab self-hosted repositories
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=service_connection_id",
  })
  serviceConnectionId?: string;

  /**
   * The source host
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=source_host",
  })
  sourceHost: RepositoriesListSourceHostEnum;

  /**
   * Filter repositories only for specified account and project, "vstsProjectId" is required
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=vstsAccountName",
  })
  vstsAccountName?: string;

  /**
   * Filter repositories only for specified account and project, "vstsAccountName" is required
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=vstsProjectId",
  })
  vstsProjectId?: string;
}

/**
 * Bad Request
 */
export class RepositoriesListDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * The source repository
 */
export class RepositoriesList200ApplicationJSON extends SpeakeasyBase {
  /**
   * URL used to clone the repository
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clone_url" })
  cloneUrl?: string;

  /**
   * The repository name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class RepositoriesListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata({ elemType: RepositoriesList200ApplicationJSON })
  repositoriesList200ApplicationJSONObjects?: RepositoriesList200ApplicationJSON[];

  /**
   * Bad Request
   */
  @SpeakeasyMetadata()
  repositoriesListDefaultApplicationJSONObject?: RepositoriesListDefaultApplicationJSON;
}
