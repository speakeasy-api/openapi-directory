<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class UsersPictures 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a user picture
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePictureRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePictureSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePictureResponse
     */
	public function createPicture(
        \OpenAPI\OpenAPI\Models\Operations\CreatePictureRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreatePictureSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePictureResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/pictures', \OpenAPI\OpenAPI\Models\Operations\CreatePictureRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePictureResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->picture = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Picture', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a user picture
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePictureAlt1Response
     */
	public function createPictureAlt1(
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePictureAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/pictures');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePictureAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->picture = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Picture', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a user picture
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePictureRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePictureSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePictureResponse
     */
	public function deletePicture(
        \OpenAPI\OpenAPI\Models\Operations\DeletePictureRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeletePictureSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePictureResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/pictures/{portraitset_id}', \OpenAPI\OpenAPI\Models\Operations\DeletePictureRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePictureResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a user picture
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePictureAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePictureAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePictureAlt1Response
     */
	public function deletePictureAlt1(
        \OpenAPI\OpenAPI\Models\Operations\DeletePictureAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\DeletePictureAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePictureAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/pictures/{portraitset_id}', \OpenAPI\OpenAPI\Models\Operations\DeletePictureAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePictureAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Edit a user picture
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditPictureRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EditPictureSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EditPictureResponse
     */
	public function editPicture(
        \OpenAPI\OpenAPI\Models\Operations\EditPictureRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EditPictureSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EditPictureResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/pictures/{portraitset_id}', \OpenAPI\OpenAPI\Models\Operations\EditPictureRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditPictureResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->picture = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Picture', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit a user picture
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditPictureAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EditPictureAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EditPictureAlt1Response
     */
	public function editPictureAlt1(
        \OpenAPI\OpenAPI\Models\Operations\EditPictureAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\EditPictureAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EditPictureAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/pictures/{portraitset_id}', \OpenAPI\OpenAPI\Models\Operations\EditPictureAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditPictureAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->picture = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Picture', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific user picture
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPictureRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPictureResponse
     */
	public function getPicture(
        \OpenAPI\OpenAPI\Models\Operations\GetPictureRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPictureResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/pictures/{portraitset_id}', \OpenAPI\OpenAPI\Models\Operations\GetPictureRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPictureResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->picture = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Picture', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific user picture
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPictureAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPictureAlt1Response
     */
	public function getPictureAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetPictureAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPictureAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/pictures/{portraitset_id}', \OpenAPI\OpenAPI\Models\Operations\GetPictureAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPictureAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->picture = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Picture', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the pictures that belong to a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPicturesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPicturesResponse
     */
	public function getPictures(
        \OpenAPI\OpenAPI\Models\Operations\GetPicturesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPicturesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/pictures', \OpenAPI\OpenAPI\Models\Operations\GetPicturesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPicturesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPicturesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pictures = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Picture>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the pictures that belong to a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPicturesAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPicturesAlt1Response
     */
	public function getPicturesAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetPicturesAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPicturesAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/pictures');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPicturesAlt1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPicturesAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pictures = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Picture>', 'json');
            }
        }

        return $response;
    }
}