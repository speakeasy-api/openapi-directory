// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SslConfigTypeEnum - Output only. The ssl config type according to 'client_key', 'client_certificate' and 'ca_certificate'.
type SslConfigTypeEnum string

const (
	SslConfigTypeEnumSslTypeUnspecified SslConfigTypeEnum = "SSL_TYPE_UNSPECIFIED"
	SslConfigTypeEnumServerOnly         SslConfigTypeEnum = "SERVER_ONLY"
	SslConfigTypeEnumServerClient       SslConfigTypeEnum = "SERVER_CLIENT"
)

func (e *SslConfigTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SSL_TYPE_UNSPECIFIED":
		fallthrough
	case "SERVER_ONLY":
		fallthrough
	case "SERVER_CLIENT":
		*e = SslConfigTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SslConfigTypeEnum: %s", s)
	}
}

// SslConfig - SSL configuration information.
type SslConfig struct {
	// Required. Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.
	CaCertificate *string `json:"caCertificate,omitempty"`
	// Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.
	ClientCertificate *string `json:"clientCertificate,omitempty"`
	// Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.
	ClientKey *string `json:"clientKey,omitempty"`
	// Output only. The ssl config type according to 'client_key', 'client_certificate' and 'ca_certificate'.
	Type *SslConfigTypeEnum `json:"type,omitempty"`
}

// SslConfigInput - SSL configuration information.
type SslConfigInput struct {
	// Required. Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.
	CaCertificate *string `json:"caCertificate,omitempty"`
	// Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.
	ClientCertificate *string `json:"clientCertificate,omitempty"`
	// Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.
	ClientKey *string `json:"clientKey,omitempty"`
}
