/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class APIKeyMerchantLevel {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Generate new API key
   *
   * @remarks
   * Returns a new API key for the API credential. You can use the new API key a few minutes after generating it. The old API key stops working 24 hours after generating a new one.
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management APIâ€”API credentials read and write
   */
  postMerchantsMerchantIdApiCredentialsApiCredentialIdGenerateApiKey(
    req: operations.PostMerchantsMerchantIdApiCredentialsApiCredentialIdGenerateApiKeyRequest,
    security: operations.PostMerchantsMerchantIdApiCredentialsApiCredentialIdGenerateApiKeySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostMerchantsMerchantIdApiCredentialsApiCredentialIdGenerateApiKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostMerchantsMerchantIdApiCredentialsApiCredentialIdGenerateApiKeyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/apiCredentials/{apiCredentialId}/generateApiKey",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PostMerchantsMerchantIdApiCredentialsApiCredentialIdGenerateApiKeySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostMerchantsMerchantIdApiCredentialsApiCredentialIdGenerateApiKeyResponse =
        new operations.PostMerchantsMerchantIdApiCredentialsApiCredentialIdGenerateApiKeyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generateApiKeyResponse = utils.objectToClass(
              httpRes?.data,
              shared.GenerateApiKeyResponse
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }
}
