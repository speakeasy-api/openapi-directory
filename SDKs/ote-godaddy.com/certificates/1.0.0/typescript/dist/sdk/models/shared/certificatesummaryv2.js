"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertificateSummaryV2 = exports.CertificateSummaryV2TypeEnum = exports.CertificateSummaryV2StatusEnum = exports.CertificateSummaryV2SlotSizeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Number of subject alternative names (SAN) to be included in certificate (if UCC):
 *
 * @remarks
 *   * `FIVE` - Five slot UCC request
 *   * `TEN` - Ten slot UCC request
 *   * `FIFTEEN` - Fifteen slot UCC request
 *   * `TWENTY` - Twenty slot UCC request
 *   * `THIRTY` - Thirty slot UCC request
 *   * `FOURTY` - Fourty slot UCC request
 *   * `FIFTY` - Fifty slot UCC request
 *   * `ONE_HUNDRED` - One hundred slot UCC request
 *
 */
var CertificateSummaryV2SlotSizeEnum;
(function (CertificateSummaryV2SlotSizeEnum) {
    CertificateSummaryV2SlotSizeEnum["Five"] = "FIVE";
    CertificateSummaryV2SlotSizeEnum["Ten"] = "TEN";
    CertificateSummaryV2SlotSizeEnum["Fifteen"] = "FIFTEEN";
    CertificateSummaryV2SlotSizeEnum["Twenty"] = "TWENTY";
    CertificateSummaryV2SlotSizeEnum["Thirty"] = "THIRTY";
    CertificateSummaryV2SlotSizeEnum["Fourty"] = "FOURTY";
    CertificateSummaryV2SlotSizeEnum["Fifty"] = "FIFTY";
    CertificateSummaryV2SlotSizeEnum["OneHundred"] = "ONE_HUNDRED";
})(CertificateSummaryV2SlotSizeEnum = exports.CertificateSummaryV2SlotSizeEnum || (exports.CertificateSummaryV2SlotSizeEnum = {}));
/**
 * Certificate status (if issued or revoked):
 *
 * @remarks
 *   * `CANCELED` - Certificate request was canceled by customer
 *   * `DENIED` - Certificate request was denied by customer
 *   * `EXPIRED` - Issued certificate has exceeded the valid end date
 *   * `ISSUED` - Certificate has been issued and is within validity period
 *   * `PENDING_ISSUANCE` - Certificate request has completed domain verification and is in the process of being issued
 *   * `PENDING_REKEY` - Previously issued certificate was rekeyed by customer and is in the process of being reissued
 *   * `PENDING_REVOCATION` - Previously issued certificate is in the process of being revoked
 *   * `REVOKED` - Issued certificate has been revoked
 *   * `UNUSED` - Certificate in an error state
 *
 */
var CertificateSummaryV2StatusEnum;
(function (CertificateSummaryV2StatusEnum) {
    CertificateSummaryV2StatusEnum["Issued"] = "ISSUED";
    CertificateSummaryV2StatusEnum["Canceled"] = "CANCELED";
    CertificateSummaryV2StatusEnum["Denied"] = "DENIED";
    CertificateSummaryV2StatusEnum["Expired"] = "EXPIRED";
    CertificateSummaryV2StatusEnum["PendingIssuance"] = "PENDING_ISSUANCE";
    CertificateSummaryV2StatusEnum["PendingRekey"] = "PENDING_REKEY";
    CertificateSummaryV2StatusEnum["PendingRevocation"] = "PENDING_REVOCATION";
    CertificateSummaryV2StatusEnum["Revoked"] = "REVOKED";
    CertificateSummaryV2StatusEnum["Unused"] = "UNUSED";
})(CertificateSummaryV2StatusEnum = exports.CertificateSummaryV2StatusEnum || (exports.CertificateSummaryV2StatusEnum = {}));
/**
 * Certificate type:
 *
 * @remarks
 *   * `DV_SSL` - (Domain Validated Secure Sockets Layer) SSL certificate validated using domain name only
 *   * `DV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using domain name only
 *   * `EV_SSL` - (Extended Validation) SSL certificate validated using organization information, domain name, business legal status, and other factors
 *   * `OV_CODE_SIGNING` - Code signing SSL certificate used by software developers to digitally sign apps. Validated using organization information
 *   * `OV_DRIVER_SIGNING` - Driver signing SSL certificate request used by software developers to digitally sign secure code for Windows hardware drivers. Validated using organization information
 *   * `OV_SSL` - SSL certificate validated using organization information and domain name
 *   * `OV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using organization information and domain name
 *   * `UCC_DV_SSL` - (Unified Communication Certificate) Multi domain SSL certificate validated using domain name only
 *   * `UCC_EV_SSL` - Multi domain SSL certificate validated using organization information, domain name, business legal status, and other factors
 *   * `UCC_OV_SSL` - Multi domain SSL certificate validated using organization information and domain name
 *
 */
var CertificateSummaryV2TypeEnum;
(function (CertificateSummaryV2TypeEnum) {
    CertificateSummaryV2TypeEnum["DvSsl"] = "DV_SSL";
    CertificateSummaryV2TypeEnum["DvWildcardSsl"] = "DV_WILDCARD_SSL";
    CertificateSummaryV2TypeEnum["EvSsl"] = "EV_SSL";
    CertificateSummaryV2TypeEnum["OvCodeSigning"] = "OV_CODE_SIGNING";
    CertificateSummaryV2TypeEnum["OvDriverSigning"] = "OV_DRIVER_SIGNING";
    CertificateSummaryV2TypeEnum["OvSsl"] = "OV_SSL";
    CertificateSummaryV2TypeEnum["OvWildcardSsl"] = "OV_WILDCARD_SSL";
    CertificateSummaryV2TypeEnum["UccDvSsl"] = "UCC_DV_SSL";
    CertificateSummaryV2TypeEnum["UccEvSsl"] = "UCC_EV_SSL";
    CertificateSummaryV2TypeEnum["UccOvSsl"] = "UCC_OV_SSL";
})(CertificateSummaryV2TypeEnum = exports.CertificateSummaryV2TypeEnum || (exports.CertificateSummaryV2TypeEnum = {}));
var CertificateSummaryV2 = /** @class */ (function (_super) {
    __extends(CertificateSummaryV2, _super);
    function CertificateSummaryV2() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "certificateId" }),
        __metadata("design:type", String)
    ], CertificateSummaryV2.prototype, "certificateId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "commonName" }),
        __metadata("design:type", String)
    ], CertificateSummaryV2.prototype, "commonName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "completedAt" }),
        __metadata("design:type", String)
    ], CertificateSummaryV2.prototype, "completedAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createdAt" }),
        __metadata("design:type", String)
    ], CertificateSummaryV2.prototype, "createdAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "period" }),
        __metadata("design:type", Number)
    ], CertificateSummaryV2.prototype, "period", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "renewalAvailable" }),
        __metadata("design:type", Boolean)
    ], CertificateSummaryV2.prototype, "renewalAvailable", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "revokedAt" }),
        __metadata("design:type", String)
    ], CertificateSummaryV2.prototype, "revokedAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serialNumber" }),
        __metadata("design:type", String)
    ], CertificateSummaryV2.prototype, "serialNumber", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "slotSize" }),
        __metadata("design:type", String)
    ], CertificateSummaryV2.prototype, "slotSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], CertificateSummaryV2.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subjectAlternativeNames" }),
        __metadata("design:type", Array)
    ], CertificateSummaryV2.prototype, "subjectAlternativeNames", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], CertificateSummaryV2.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "validEndAt" }),
        __metadata("design:type", String)
    ], CertificateSummaryV2.prototype, "validEndAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "validStartAt" }),
        __metadata("design:type", String)
    ], CertificateSummaryV2.prototype, "validStartAt", void 0);
    return CertificateSummaryV2;
}(utils_1.SpeakeasyBase));
exports.CertificateSummaryV2 = CertificateSummaryV2;
