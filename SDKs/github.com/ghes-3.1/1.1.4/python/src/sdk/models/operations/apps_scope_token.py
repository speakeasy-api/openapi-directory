"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import app_permissions as shared_app_permissions
from ..shared import authorization as shared_authorization
from ..shared import basic_error as shared_basic_error
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppsScopeTokenRequestBody:
    
    access_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access_token') }})
    r"""The OAuth access token used to authenticate to the GitHub API."""  
    permissions: Optional[shared_app_permissions.AppPermissions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})
    r"""The permissions granted to the user-to-server access token."""  
    repositories: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositories'), 'exclude': lambda f: f is None }})
    r"""The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified."""  
    repository_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository_ids'), 'exclude': lambda f: f is None }})
    r"""The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified."""  
    target: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target'), 'exclude': lambda f: f is None }})
    r"""The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified."""  
    target_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified."""  
    

@dataclasses.dataclass
class AppsScopeTokenRequest:
    
    client_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'client_id', 'style': 'simple', 'explode': False }})
    r"""The client ID of the GitHub app."""  
    request_body: AppsScopeTokenRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class AppsScopeTokenResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    authorization: Optional[shared_authorization.Authorization] = dataclasses.field(default=None)
    r"""Response"""  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Requires authentication"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed"""  
    