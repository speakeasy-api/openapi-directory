"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateNetworkAclResult = exports.CreateNetworkAclResultNetworkAcl = exports.CreateNetworkAclResultNetworkAclTags = exports.CreateNetworkAclResultNetworkAclEntries = exports.CreateNetworkAclResultNetworkAclEntriesRuleActionEnum = exports.CreateNetworkAclResultNetworkAclEntriesPortRange = exports.CreateNetworkAclResultNetworkAclEntriesIcmpTypeCode = exports.CreateNetworkAclResultNetworkAclAssociations = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * Describes an association between a network ACL and a subnet.
 */
var CreateNetworkAclResultNetworkAclAssociations = /** @class */ (function (_super) {
    __extends(CreateNetworkAclResultNetworkAclAssociations, _super);
    function CreateNetworkAclResultNetworkAclAssociations() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateNetworkAclResultNetworkAclAssociations.prototype, "networkAclAssociationId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateNetworkAclResultNetworkAclAssociations.prototype, "networkAclId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateNetworkAclResultNetworkAclAssociations.prototype, "subnetId", void 0);
    return CreateNetworkAclResultNetworkAclAssociations;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkAclResultNetworkAclAssociations = CreateNetworkAclResultNetworkAclAssociations;
/**
 * ICMP protocol: The ICMP type and code.
 */
var CreateNetworkAclResultNetworkAclEntriesIcmpTypeCode = /** @class */ (function (_super) {
    __extends(CreateNetworkAclResultNetworkAclEntriesIcmpTypeCode, _super);
    function CreateNetworkAclResultNetworkAclEntriesIcmpTypeCode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateNetworkAclResultNetworkAclEntriesIcmpTypeCode.prototype, "code", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateNetworkAclResultNetworkAclEntriesIcmpTypeCode.prototype, "type", void 0);
    return CreateNetworkAclResultNetworkAclEntriesIcmpTypeCode;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkAclResultNetworkAclEntriesIcmpTypeCode = CreateNetworkAclResultNetworkAclEntriesIcmpTypeCode;
/**
 * TCP or UDP protocols: The range of ports the rule applies to.
 */
var CreateNetworkAclResultNetworkAclEntriesPortRange = /** @class */ (function (_super) {
    __extends(CreateNetworkAclResultNetworkAclEntriesPortRange, _super);
    function CreateNetworkAclResultNetworkAclEntriesPortRange() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateNetworkAclResultNetworkAclEntriesPortRange.prototype, "from", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateNetworkAclResultNetworkAclEntriesPortRange.prototype, "to", void 0);
    return CreateNetworkAclResultNetworkAclEntriesPortRange;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkAclResultNetworkAclEntriesPortRange = CreateNetworkAclResultNetworkAclEntriesPortRange;
/**
 * Indicates whether to allow or deny the traffic that matches the rule.
 */
var CreateNetworkAclResultNetworkAclEntriesRuleActionEnum;
(function (CreateNetworkAclResultNetworkAclEntriesRuleActionEnum) {
    CreateNetworkAclResultNetworkAclEntriesRuleActionEnum["Allow"] = "allow";
    CreateNetworkAclResultNetworkAclEntriesRuleActionEnum["Deny"] = "deny";
})(CreateNetworkAclResultNetworkAclEntriesRuleActionEnum = exports.CreateNetworkAclResultNetworkAclEntriesRuleActionEnum || (exports.CreateNetworkAclResultNetworkAclEntriesRuleActionEnum = {}));
/**
 * Describes an entry in a network ACL.
 */
var CreateNetworkAclResultNetworkAclEntries = /** @class */ (function (_super) {
    __extends(CreateNetworkAclResultNetworkAclEntries, _super);
    function CreateNetworkAclResultNetworkAclEntries() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateNetworkAclResultNetworkAclEntries.prototype, "cidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateNetworkAclResultNetworkAclEntries.prototype, "egress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateNetworkAclResultNetworkAclEntriesIcmpTypeCode)
    ], CreateNetworkAclResultNetworkAclEntries.prototype, "icmpTypeCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateNetworkAclResultNetworkAclEntries.prototype, "ipv6CidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateNetworkAclResultNetworkAclEntriesPortRange)
    ], CreateNetworkAclResultNetworkAclEntries.prototype, "portRange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateNetworkAclResultNetworkAclEntries.prototype, "protocol", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateNetworkAclResultNetworkAclEntries.prototype, "ruleAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateNetworkAclResultNetworkAclEntries.prototype, "ruleNumber", void 0);
    return CreateNetworkAclResultNetworkAclEntries;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkAclResultNetworkAclEntries = CreateNetworkAclResultNetworkAclEntries;
/**
 * Describes a tag.
 */
var CreateNetworkAclResultNetworkAclTags = /** @class */ (function (_super) {
    __extends(CreateNetworkAclResultNetworkAclTags, _super);
    function CreateNetworkAclResultNetworkAclTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateNetworkAclResultNetworkAclTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateNetworkAclResultNetworkAclTags.prototype, "value", void 0);
    return CreateNetworkAclResultNetworkAclTags;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkAclResultNetworkAclTags = CreateNetworkAclResultNetworkAclTags;
/**
 * Information about the network ACL.
 */
var CreateNetworkAclResultNetworkAcl = /** @class */ (function (_super) {
    __extends(CreateNetworkAclResultNetworkAcl, _super);
    function CreateNetworkAclResultNetworkAcl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: CreateNetworkAclResultNetworkAclAssociations }),
        __metadata("design:type", Array)
    ], CreateNetworkAclResultNetworkAcl.prototype, "associations", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: CreateNetworkAclResultNetworkAclEntries }),
        __metadata("design:type", Array)
    ], CreateNetworkAclResultNetworkAcl.prototype, "entries", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateNetworkAclResultNetworkAcl.prototype, "isDefault", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateNetworkAclResultNetworkAcl.prototype, "networkAclId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateNetworkAclResultNetworkAcl.prototype, "ownerId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: CreateNetworkAclResultNetworkAclTags }),
        __metadata("design:type", Array)
    ], CreateNetworkAclResultNetworkAcl.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateNetworkAclResultNetworkAcl.prototype, "vpcId", void 0);
    return CreateNetworkAclResultNetworkAcl;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkAclResultNetworkAcl = CreateNetworkAclResultNetworkAcl;
/**
 * Success
 */
var CreateNetworkAclResult = /** @class */ (function (_super) {
    __extends(CreateNetworkAclResult, _super);
    function CreateNetworkAclResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateNetworkAclResultNetworkAcl)
    ], CreateNetworkAclResult.prototype, "networkAcl", void 0);
    return CreateNetworkAclResult;
}(utils_1.SpeakeasyBase));
exports.CreateNetworkAclResult = CreateNetworkAclResult;
