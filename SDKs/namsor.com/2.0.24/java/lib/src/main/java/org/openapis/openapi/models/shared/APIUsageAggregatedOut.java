/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * APIUsageAggregatedOut - Print historical API usage.
 */
public class APIUsageAggregatedOut {
    /**
     * apiServices as column headers 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("colHeaders")
    public String[] colHeaders;
    public APIUsageAggregatedOut withColHeaders(String[] colHeaders) {
        this.colHeaders = colHeaders;
        return this;
    }
    
    /**
     * Data points : usage per DAY, WEEK or MONTH and per apiService
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    public Integer[][] data;
    public APIUsageAggregatedOut withData(Integer[][] data) {
        this.data = data;
        return this;
    }
    
    /**
     * If the history was truncaded due to data limit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("historyTruncated")
    public Boolean historyTruncated;
    public APIUsageAggregatedOut withHistoryTruncated(Boolean historyTruncated) {
        this.historyTruncated = historyTruncated;
        return this;
    }
    
    /**
     * End datetime of the reporting period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("periodEnd")
    public Long periodEnd;
    public APIUsageAggregatedOut withPeriodEnd(Long periodEnd) {
        this.periodEnd = periodEnd;
        return this;
    }
    
    /**
     * Start datetime of the reporting period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("periodStart")
    public Long periodStart;
    public APIUsageAggregatedOut withPeriodStart(Long periodStart) {
        this.periodStart = periodStart;
        return this;
    }
    
    /**
     * dates as row headers 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rowHeaders")
    public String[] rowHeaders;
    public APIUsageAggregatedOut withRowHeaders(String[] rowHeaders) {
        this.rowHeaders = rowHeaders;
        return this;
    }
    
    /**
     * Time unit is DAY, WEEK or MONTH depending on prior usage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeUnit")
    public String timeUnit;
    public APIUsageAggregatedOut withTimeUnit(String timeUnit) {
        this.timeUnit = timeUnit;
        return this;
    }
    
    /**
     * Total usage in the current period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalUsage")
    public Long totalUsage;
    public APIUsageAggregatedOut withTotalUsage(Long totalUsage) {
        this.totalUsage = totalUsage;
        return this;
    }
    
}
