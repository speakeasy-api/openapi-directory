"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import tablerow as shared_tablerow
from ..shared import tablestyle as shared_tablestyle
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Table:
    r"""A StructuralElement representing a table."""
    
    columns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columns'), 'exclude': lambda f: f is None }})
    r"""Number of columns in the table. It's possible for a table to be non-rectangular, so some rows may have a different number of cells."""  
    rows: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rows'), 'exclude': lambda f: f is None }})
    r"""Number of rows in the table."""  
    suggested_deletion_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedDeletionIds'), 'exclude': lambda f: f is None }})
    r"""The suggested deletion IDs. If empty, then there are no suggested deletions of this content."""  
    suggested_insertion_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedInsertionIds'), 'exclude': lambda f: f is None }})
    r"""The suggested insertion IDs. A Table may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion."""  
    table_rows: Optional[list[shared_tablerow.TableRow]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tableRows'), 'exclude': lambda f: f is None }})
    r"""The contents and style of each row."""  
    table_style: Optional[shared_tablestyle.TableStyle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tableStyle'), 'exclude': lambda f: f is None }})
    r"""Styles that apply to a table."""  
    