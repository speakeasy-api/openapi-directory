"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EngineConfiguration:
    r"""Contains data processing unit (DPU) configuration settings and parameter mappings for a notebook engine."""
    
    max_concurrent_dpus: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxConcurrentDpus') }})  
    additional_configs: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalConfigs'), 'exclude': lambda f: f is None }})  
    coordinator_dpu_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CoordinatorDpuSize'), 'exclude': lambda f: f is None }})  
    default_executor_dpu_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultExecutorDpuSize'), 'exclude': lambda f: f is None }})  
    