"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class CadenceMemberships:
    r"""Cadence Membership"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_v2_cadence_memberships_id_json(self, request: operations.DeleteV2CadenceMembershipsIDJSONRequest) -> operations.DeleteV2CadenceMembershipsIDJSONResponse:
        r"""Delete a cadence membership
        Cadence Membership
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteV2CadenceMembershipsIDJSONRequest, base_url, '/v2/cadence_memberships/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteV2CadenceMembershipsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_v2_cadence_memberships_json(self, request: operations.GetV2CadenceMembershipsJSONRequest) -> operations.GetV2CadenceMembershipsJSONResponse:
        r"""List cadence memberships
        Fetches multiple cadence membership records. The records can be filtered, paged, and sorted according to
        the respective parameters. A cadence membership is the association between a person and their current and
        historical time on a cadence. Cadence membership records are mutable and change over time. If a person is
        added to a cadence and re-added to the same cadence in the future, there is a single membership record.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/cadence_memberships.json'
        
        query_params = utils.get_query_params(operations.GetV2CadenceMembershipsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2CadenceMembershipsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_v2_cadence_memberships_id_json(self, request: operations.GetV2CadenceMembershipsIDJSONRequest) -> operations.GetV2CadenceMembershipsIDJSONResponse:
        r"""Fetch a cadence membership
        Fetches a cadence membership, by ID only.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2CadenceMembershipsIDJSONRequest, base_url, '/v2/cadence_memberships/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2CadenceMembershipsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_v2_cadence_memberships_json(self, request: operations.PostV2CadenceMembershipsJSONRequest) -> operations.PostV2CadenceMembershipsJSONResponse:
        r"""Create a cadence membership
        Adds a person to a cadence. person_id and cadence_id are required, and must be visible to the authenticated user. user_id will
        default to the authenticated user, but can be set to any visible user on the authenticated team.
        
        A person cannot be added to a cadence on behalf of a teammate unless the cadence is a team cadence, the cadence is owned by
        the teammate, or the teammate has the Personal Cadence Admin permission.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/cadence_memberships.json'
        
        query_params = utils.get_query_params(operations.PostV2CadenceMembershipsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV2CadenceMembershipsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    