"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class OnDemandVideos:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_video_to_vod(self, request: operations.AddVideoToVodRequest, security: operations.AddVideoToVodSecurity) -> operations.AddVideoToVodResponse:
        r"""Add a video to an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideoToVodRequest, base_url, '/ondemand/pages/{ondemand_id}/videos/{video_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideoToVodResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnDemandVideo])
                res.on_demand_video = out
        elif http_res.status_code in [400, 403]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_video_from_vod(self, request: operations.DeleteVideoFromVodRequest, security: operations.DeleteVideoFromVodSecurity) -> operations.DeleteVideoFromVodResponse:
        r"""Remove a video from an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVideoFromVodRequest, base_url, '/ondemand/pages/{ondemand_id}/videos/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVideoFromVodResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_vod_video(self, request: operations.GetVodVideoRequest) -> operations.GetVodVideoResponse:
        r"""Get a specific video on an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVodVideoRequest, base_url, '/ondemand/pages/{ondemand_id}/videos/{video_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVodVideoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Video])
                res.video = out

        return res

    def get_vod_videos(self, request: operations.GetVodVideosRequest) -> operations.GetVodVideosResponse:
        r"""Get all the videos on an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVodVideosRequest, base_url, '/ondemand/pages/{ondemand_id}/videos', request)
        
        query_params = utils.get_query_params(operations.GetVodVideosRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVodVideosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Video]])
                res.videos = out

        return res

    