/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ProductFields {
    /**
     * Barcode of the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("barcode")
    public String barcode;
    public ProductFields withBarcode(String barcode) {
        this.barcode = barcode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    public CategoryFields[] categories;
    public ProductFields withCategories(CategoryFields[] categories) {
        this.categories = categories;
        return this;
    }
    
    /**
     * Date of product creation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;
    public ProductFields withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Description of the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public ProductFields withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Diameter of the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diameter")
    public Float diameter;
    public ProductFields withDiameter(Float diameter) {
        this.diameter = diameter;
        return this;
    }
    
    /**
     * Discount of the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount")
    public Float discount;
    public ProductFields withDiscount(Float discount) {
        this.discount = discount;
        return this;
    }
    
    /**
     * True if the product is featured
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("featured")
    public Boolean featured;
    public ProductFields withFeatured(Boolean featured) {
        this.featured = featured;
        return this;
    }
    
    /**
     * Category of a Product based on the Google product taxonomy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("google_product_category")
    public String googleProductCategory;
    public ProductFields withGoogleProductCategory(String googleProductCategory) {
        this.googleProductCategory = googleProductCategory;
        return this;
    }
    
    /**
     * Height of the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    public Float height;
    public ProductFields withHeight(Float height) {
        this.height = height;
        return this;
    }
    
    /**
     * Unique identifier of the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;
    public ProductFields withId(Integer id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    public ImageFields[] images;
    public ProductFields withImages(ImageFields[] images) {
        this.images = images;
        return this;
    }
    
    /**
     * Length of the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("length")
    public Float length;
    public ProductFields withLength(Float length) {
        this.length = length;
        return this;
    }
    
    /**
     * Name of the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public ProductFields withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Format the product package
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("package_format")
    public ProductFieldsPackageFormatEnum packageFormat;
    public ProductFields withPackageFormat(ProductFieldsPackageFormatEnum packageFormat) {
        this.packageFormat = packageFormat;
        return this;
    }
    
    /**
     * Product unique URL path
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permalink")
    public String permalink;
    public ProductFields withPermalink(String permalink) {
        this.permalink = permalink;
        return this;
    }
    
    /**
     * Price of the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    public Float price;
    public ProductFields withPrice(Float price) {
        this.price = price;
        return this;
    }
    
    /**
     * Stock Keeping Unit of the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    public String sku;
    public ProductFields withSku(String sku) {
        this.sku = sku;
        return this;
    }
    
    /**
     * Status of the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public ProductFieldsStatusEnum status;
    public ProductFields withStatus(ProductFieldsStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Quantity in stock for the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stock")
    public Integer stock;
    public ProductFields withStock(Integer stock) {
        this.stock = stock;
        return this;
    }
    
    /**
     * True if the Product has unlimited stock
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stock_unlimited")
    public Boolean stockUnlimited;
    public ProductFields withStockUnlimited(Boolean stockUnlimited) {
        this.stockUnlimited = stockUnlimited;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variants")
    public VariantFields[] variants;
    public ProductFields withVariants(VariantFields[] variants) {
        this.variants = variants;
        return this;
    }
    
    /**
     * Weight of the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight")
    public Float weight;
    public ProductFields withWeight(Float weight) {
        this.weight = weight;
        return this;
    }
    
    /**
     * Width of the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    public Float width;
    public ProductFields withWidth(Float width) {
        this.width = width;
        return this;
    }
    
}
