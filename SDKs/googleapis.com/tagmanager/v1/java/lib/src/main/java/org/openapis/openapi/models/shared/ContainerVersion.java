/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ContainerVersion - Represents a Google Tag Manager Container Version.
 */
public class ContainerVersion {
    /**
     * GTM Account ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountId")
    public String accountId;
    public ContainerVersion withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("container")
    public Container container;
    public ContainerVersion withContainer(Container container) {
        this.container = container;
        return this;
    }
    
    /**
     * GTM Container ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerId")
    public String containerId;
    public ContainerVersion withContainerId(String containerId) {
        this.containerId = containerId;
        return this;
    }
    
    /**
     * The Container Version ID uniquely identifies the GTM Container Version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerVersionId")
    public String containerVersionId;
    public ContainerVersion withContainerVersionId(String containerVersionId) {
        this.containerVersionId = containerVersionId;
        return this;
    }
    
    /**
     * A value of true indicates this container version has been deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    public Boolean deleted;
    public ContainerVersion withDeleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }
    
    /**
     * The fingerprint of the GTM Container Version as computed at storage time. This value is recomputed whenever the container version is modified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fingerprint")
    public String fingerprint;
    public ContainerVersion withFingerprint(String fingerprint) {
        this.fingerprint = fingerprint;
        return this;
    }
    
    /**
     * The folders in the container that this version was taken from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("folder")
    public Folder[] folder;
    public ContainerVersion withFolder(Folder[] folder) {
        this.folder = folder;
        return this;
    }
    
    /**
     * The macros in the container that this version was taken from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("macro")
    public Macro[] macro;
    public ContainerVersion withMacro(Macro[] macro) {
        this.macro = macro;
        return this;
    }
    
    /**
     * Container version display name. @mutable tagmanager.accounts.containers.versions.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public ContainerVersion withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * User notes on how to apply this container version in the container. @mutable tagmanager.accounts.containers.versions.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;
    public ContainerVersion withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * The rules in the container that this version was taken from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rule")
    public Rule[] rule;
    public ContainerVersion withRule(Rule[] rule) {
        this.rule = rule;
        return this;
    }
    
    /**
     * The tags in the container that this version was taken from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tag")
    public Tag[] tag;
    public ContainerVersion withTag(Tag[] tag) {
        this.tag = tag;
        return this;
    }
    
    /**
     * The triggers in the container that this version was taken from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trigger")
    public Trigger[] trigger;
    public ContainerVersion withTrigger(Trigger[] trigger) {
        this.trigger = trigger;
        return this;
    }
    
    /**
     * The variables in the container that this version was taken from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variable")
    public Variable[] variable;
    public ContainerVersion withVariable(Variable[] variable) {
        this.variable = variable;
        return this;
    }
    
}
