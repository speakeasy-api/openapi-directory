/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CustomFieldCompact - Custom Fields store the metadata that is used in order to add user-specified information to tasks in Asana. Be sure to reference the [Custom Fields](/docs/asana-custom-fields) developer documentation for more information about how custom fields relate to various resources in Asana.
 * 
 * Users in Asana can [lock custom fields](https://asana.com/guide/help/premium/custom-fields#gl-lock-fields), which will make them read-only when accessed by other users. Attempting to edit a locked custom field will return HTTP error code `403 Forbidden`.
 */
public class CustomFieldCompact {
    /**
     * *Conditional*. Only relevant for custom fields of type `date`. This object reflects the chosen date (and optionally, time) value of a `date` custom field. If no date is selected, the value of `date_value` will be `null`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_value")
    public CustomFieldCompactDateValue dateValue;
    public CustomFieldCompact withDateValue(CustomFieldCompactDateValue dateValue) {
        this.dateValue = dateValue;
        return this;
    }
    
    /**
     * A string representation for the value of the custom field. Integrations that don't require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_value")
    public String displayValue;
    public CustomFieldCompact withDisplayValue(String displayValue) {
        this.displayValue = displayValue;
        return this;
    }
    
    /**
     * *Conditional*. Determines if the custom field is enabled or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;
    public CustomFieldCompact withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * *Conditional*. Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enum_options")
    public EnumOption[] enumOptions;
    public CustomFieldCompact withEnumOptions(EnumOption[] enumOptions) {
        this.enumOptions = enumOptions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enum_value")
    public CustomFieldCompactEnumValue enumValue;
    public CustomFieldCompact withEnumValue(CustomFieldCompactEnumValue enumValue) {
        this.enumValue = enumValue;
        return this;
    }
    
    /**
     * Globally unique identifier of the resource, as a string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gid")
    public String gid;
    public CustomFieldCompact withGid(String gid) {
        this.gid = gid;
        return this;
    }
    
    /**
     * *Conditional*. Only relevant for custom fields of type `multi_enum`. This object is the chosen values of a `multi_enum` custom field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multi_enum_values")
    public EnumOption[] multiEnumValues;
    public CustomFieldCompact withMultiEnumValues(EnumOption[] multiEnumValues) {
        this.multiEnumValues = multiEnumValues;
        return this;
    }
    
    /**
     * The name of the custom field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public CustomFieldCompact withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * *Conditional*. This number is the value of a `number` custom field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number_value")
    public Double numberValue;
    public CustomFieldCompact withNumberValue(Double numberValue) {
        this.numberValue = numberValue;
        return this;
    }
    
    /**
     * The type of the custom field. Must be one of the given values.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource_subtype")
    public CustomFieldCompactResourceSubtypeEnum resourceSubtype;
    public CustomFieldCompact withResourceSubtype(CustomFieldCompactResourceSubtypeEnum resourceSubtype) {
        this.resourceSubtype = resourceSubtype;
        return this;
    }
    
    /**
     * The base type of this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource_type")
    public String resourceType;
    public CustomFieldCompact withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }
    
    /**
     * *Conditional*. This string is the value of a `text` custom field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text_value")
    public String textValue;
    public CustomFieldCompact withTextValue(String textValue) {
        this.textValue = textValue;
        return this;
    }
    
    /**
     * *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public CustomFieldCompactTypeEnum type;
    public CustomFieldCompact withType(CustomFieldCompactTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
