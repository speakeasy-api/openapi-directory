/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Either `in_setup` or `complete`
 */
export enum RemoteServerEntityAuthStatusEnum {
  NotApplicable = "not_applicable",
  InSetup = "in_setup",
  Complete = "complete",
  Reauthenticate = "reauthenticate",
}

/**
 * Local permissions for files agent. read_only, write_only, or read_write
 */
export enum RemoteServerEntityFilesAgentPermissionSetEnum {
  ReadWrite = "read_write",
  ReadOnly = "read_only",
  WriteOnly = "write_only",
}

/**
 * Either personal or business_other account types
 */
export enum RemoteServerEntityOneDriveAccountTypeEnum {
  Personal = "personal",
  BusinessOther = "business_other",
}

/**
 * Remote server certificate
 */
export enum RemoteServerEntityServerCertificateEnum {
  RequireMatch = "require_match",
  AllowAny = "allow_any",
}

/**
 * Remote server type.
 */
export enum RemoteServerEntityServerTypeEnum {
  Ftp = "ftp",
  Sftp = "sftp",
  S3 = "s3",
  GoogleCloudStorage = "google_cloud_storage",
  Webdav = "webdav",
  Wasabi = "wasabi",
  BackblazeB2 = "backblaze_b2",
  OneDrive = "one_drive",
  Rackspace = "rackspace",
  Box = "box",
  Dropbox = "dropbox",
  GoogleDrive = "google_drive",
  Azure = "azure",
  Sharepoint = "sharepoint",
  S3Compatible = "s3_compatible",
  AzureFiles = "azure_files",
  FilesAgent = "files_agent",
  Filebase = "filebase",
}

/**
 * Should we require SSL?
 */
export enum RemoteServerEntitySslEnum {
  IfAvailable = "if_available",
  Require = "require",
  RequireImplicit = "require_implicit",
  Never = "never",
}

/**
 * Create Remote Server
 */
export class RemoteServerEntity extends SpeakeasyBase {
  /**
   * Describes the authorized account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auth_account_name" })
  authAccountName?: string;

  /**
   * Returns link to login with an Oauth provider
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auth_setup_link" })
  authSetupLink?: string;

  /**
   * Either `in_setup` or `complete`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auth_status" })
  authStatus?: RemoteServerEntityAuthStatusEnum;

  /**
   * Type of authentication method
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authentication_method" })
  authenticationMethod?: string;

  /**
   * AWS Access Key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "aws_access_key" })
  awsAccessKey?: string;

  /**
   * Azure Blob Storage Account name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "azure_blob_storage_account" })
  azureBlobStorageAccount?: string;

  /**
   * Azure Blob Storage Container name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "azure_blob_storage_container" })
  azureBlobStorageContainer?: string;

  /**
   * Shared Access Signature (SAS) token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "azure_blob_storage_sas_token" })
  azureBlobStorageSasToken?: string;

  /**
   * Azure File Storage Account name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "azure_files_storage_account" })
  azureFilesStorageAccount?: string;

  /**
   * Shared Access Signature (SAS) token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "azure_files_storage_sas_token" })
  azureFilesStorageSasToken?: string;

  /**
   * Azure File Storage Share name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "azure_files_storage_share_name" })
  azureFilesStorageShareName?: string;

  /**
   * Backblaze B2 Cloud Storage Bucket name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "backblaze_b2_bucket" })
  backblazeB2Bucket?: string;

  /**
   * Backblaze B2 Cloud Storage S3 Endpoint
   */
  @SpeakeasyMetadata()
  @Expose({ name: "backblaze_b2_s3_endpoint" })
  backblazeB2S3Endpoint?: string;

  /**
   * If true, this server has been disabled due to failures.  Make any change or set disabled to false to clear this flag.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disabled" })
  disabled?: boolean;

  /**
   * `true` if remote server only accepts connections from dedicated IPs
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enable_dedicated_ips" })
  enableDedicatedIps?: boolean;

  /**
   * Filebase Access Key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filebase_access_key" })
  filebaseAccessKey?: string;

  /**
   * Filebase Bucket name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filebase_bucket" })
  filebaseBucket?: string;

  /**
   * Files Agent API Token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "files_agent_api_token" })
  filesAgentApiToken?: string;

  /**
   * Local permissions for files agent. read_only, write_only, or read_write
   */
  @SpeakeasyMetadata()
  @Expose({ name: "files_agent_permission_set" })
  filesAgentPermissionSet?: RemoteServerEntityFilesAgentPermissionSetEnum;

  /**
   * Agent local root path
   */
  @SpeakeasyMetadata()
  @Expose({ name: "files_agent_root" })
  filesAgentRoot?: string;

  /**
   * Google Cloud Storage bucket name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "google_cloud_storage_bucket" })
  googleCloudStorageBucket?: string;

  /**
   * Google Cloud Project ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "google_cloud_storage_project_id" })
  googleCloudStorageProjectId?: string;

  /**
   * Hostname or IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hostname" })
  hostname?: string;

  /**
   * Remote server ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Max number of parallel connections.  Ignored for S3 connections (we will parallelize these as much as possible).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max_connections" })
  maxConnections?: number;

  /**
   * Internal name for your reference
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Either personal or business_other account types
   */
  @SpeakeasyMetadata()
  @Expose({ name: "one_drive_account_type" })
  oneDriveAccountType?: RemoteServerEntityOneDriveAccountTypeEnum;

  /**
   * If true, we will ensure that all communications with this remote server are made through the primary region of the site.  This setting can also be overridden by a sitewide setting which will force it to true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pin_to_site_region" })
  pinToSiteRegion?: boolean;

  /**
   * If set, all communciations with this remote server are made through the provided region.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pinned_region" })
  pinnedRegion?: string;

  /**
   * Port for remote server.  Not needed for S3.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: number;

  /**
   * The name of the container (top level directory) where files will sync.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rackspace_container" })
  rackspaceContainer?: string;

  /**
   * Three letter airport code for Rackspace region. See https://support.rackspace.com/how-to/about-regions/
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rackspace_region" })
  rackspaceRegion?: string;

  /**
   * Rackspace username used to login to the Rackspace Cloud Control Panel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rackspace_username" })
  rackspaceUsername?: string;

  /**
   * Initial home folder on remote server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remote_home_path" })
  remoteHomePath?: string;

  /**
   * S3 bucket name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "s3_bucket" })
  s3Bucket?: string;

  /**
   * S3-compatible Access Key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "s3_compatible_access_key" })
  s3CompatibleAccessKey?: string;

  /**
   * S3-compatible Bucket name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "s3_compatible_bucket" })
  s3CompatibleBucket?: string;

  /**
   * S3-compatible endpoint
   */
  @SpeakeasyMetadata()
  @Expose({ name: "s3_compatible_endpoint" })
  s3CompatibleEndpoint?: string;

  /**
   * S3-compatible endpoint
   */
  @SpeakeasyMetadata()
  @Expose({ name: "s3_compatible_region" })
  s3CompatibleRegion?: string;

  /**
   * S3 region
   */
  @SpeakeasyMetadata()
  @Expose({ name: "s3_region" })
  s3Region?: string;

  /**
   * Remote server certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server_certificate" })
  serverCertificate?: RemoteServerEntityServerCertificateEnum;

  /**
   * Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH format similar to what would go into ~/.ssh/known_hosts
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server_host_key" })
  serverHostKey?: string;

  /**
   * Remote server type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server_type" })
  serverType?: RemoteServerEntityServerTypeEnum;

  /**
   * Should we require SSL?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ssl" })
  ssl?: RemoteServerEntitySslEnum;

  /**
   * Remote server username.  Not needed for S3 buckets.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "username" })
  username?: string;

  /**
   * Wasabi access key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wasabi_access_key" })
  wasabiAccessKey?: string;

  /**
   * Wasabi Bucket name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wasabi_bucket" })
  wasabiBucket?: string;

  /**
   * Wasabi region
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wasabi_region" })
  wasabiRegion?: string;
}
