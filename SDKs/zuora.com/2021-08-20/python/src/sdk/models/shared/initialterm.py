"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class InitialTermPeriodTypeEnum(str, Enum):
    r"""Specify only when the termType is 'TERMED'."""
    MONTH = 'Month'
    YEAR = 'Year'
    DAY = 'Day'
    WEEK = 'Week'

class InitialTermTermTypeEnum(str, Enum):
    TERMED = 'TERMED'
    EVERGREEN = 'EVERGREEN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InitialTerm:
    r"""The length of the period for the current subscription term."""
    
    term_type: InitialTermTermTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termType') }})  
    period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Specify only when the termType is 'TERMED'."""  
    period_type: Optional[InitialTermPeriodTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periodType'), 'exclude': lambda f: f is None }})
    r"""Specify only when the termType is 'TERMED'."""  
    start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start date of the current term."""  
    