<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class VendorInvoices 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new payment on the vendor account and assigns the payment to the invoice.
     * 
     * Creates a new payment on the vendor account and assigns the payment to the invoice.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePayment1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePayment1Response
     */
	public function createPayment1(
        \OpenAPI\OpenAPI\Models\Operations\CreatePayment1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePayment1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/providers/invoices/{invoiceId}/payments', \OpenAPI\OpenAPI\Models\Operations\CreatePayment1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "paymentDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePayment1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Creates a new invoice.
     * 
     * Creates a new invoice from jobs. Jobs are grouped by provider and currency, therefore multiple invoices can be created.If any of the jobs cannot be invoiced (ie. it is already invoiced) then an error is reported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ProviderInvoiceCreateDTO $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Create4Response
     */
	public function create4(
        \OpenAPI\OpenAPI\Models\Shared\ProviderInvoiceCreateDTO $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Create4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/providers/invoices');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Create4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->providerInvoiceCreateResultDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProviderInvoiceCreateResultDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a provider invoice.
     * 
     * Removes a provider invoice.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Delete6Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Delete6Response
     */
	public function delete6(
        \OpenAPI\OpenAPI\Models\Operations\Delete6Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Delete6Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/providers/invoices/{invoiceId}', \OpenAPI\OpenAPI\Models\Operations\Delete6Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Delete6Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Removes a provider payment.
     * 
     * Removes a provider payment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Delete7Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Delete7Response
     */
	public function delete7(
        \OpenAPI\OpenAPI\Models\Operations\Delete7Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Delete7Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/providers/payments/{paymentId}', \OpenAPI\OpenAPI\Models\Operations\Delete7Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Delete7Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Returns vendor invoices' internal identifiers.
     * 
     * Returns vendor invoices' internal identifiers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllIds3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllIds3Response
     */
	public function getAllIds3(
        \OpenAPI\OpenAPI\Models\Operations\GetAllIds3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllIds3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/providers/invoices/ids');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAllIds3Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllIds3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAllIds3DefaultApplicationVndXtrfV1PlusJsonInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all vendor invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     * 
     * Lists all vendor invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAll2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAll2Response
     */
	public function getAll2(
        \OpenAPI\OpenAPI\Models\Operations\GetAll2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAll2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/providers/invoices');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAll2Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAll2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->providerInvoiceDTOS = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProviderInvoiceDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns provider invoice details.
     * 
     * Returns provider invoice details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetById3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetById3Response
     */
	public function getById3(
        \OpenAPI\OpenAPI\Models\Operations\GetById3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetById3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/providers/invoices/{invoiceId}', \OpenAPI\OpenAPI\Models\Operations\GetById3Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetById3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->providerInvoiceDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProviderInvoiceDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates provider invoice document (PDF).
     * 
     * Generates provider invoice document (PDF).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDocument1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDocument1Response
     */
	public function getDocument1(
        \OpenAPI\OpenAPI\Models\Operations\GetDocument1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDocument1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/providers/invoices/{invoiceId}/document', \OpenAPI\OpenAPI\Models\Operations\GetDocument1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDocument1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->urlResultDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UrlResultDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all payments for the vendor invoice.
     * 
     * Returns all payments for the vendor invoice.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayments1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPayments1Response
     */
	public function getPayments1(
        \OpenAPI\OpenAPI\Models\Operations\GetPayments1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPayments1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/providers/invoices/{invoiceId}/payments', \OpenAPI\OpenAPI\Models\Operations\GetPayments1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPayments1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paymentDTOS = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PaymentDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends a provider invoice.
     * 
     * Sends a provider invoice.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SendRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SendResponse
     */
	public function send(
        \OpenAPI\OpenAPI\Models\Operations\SendRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SendResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/providers/invoices/{invoiceId}/send', \OpenAPI\OpenAPI\Models\Operations\SendRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SendResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Changes invoice status to given status.
     * 
     * Changes invoice status to given status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetStatusResponse
     */
	public function setStatus(
        \OpenAPI\OpenAPI\Models\Operations\SetStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/providers/invoices/{invoiceId}/status', \OpenAPI\OpenAPI\Models\Operations\SetStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "statusRequestDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
}