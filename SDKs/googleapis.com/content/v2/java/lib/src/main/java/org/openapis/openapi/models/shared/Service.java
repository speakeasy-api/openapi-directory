/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Service {
    /**
     * A boolean exposing the active status of the shipping service. Required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    public Boolean active;

    public Service withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * The CLDR code of the currency to which this service applies. Must match that of the prices in rate groups.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;

    public Service withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * The CLDR territory code of the country to which the service applies. Required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deliveryCountry")
    public String deliveryCountry;

    public Service withDeliveryCountry(String deliveryCountry) {
        this.deliveryCountry = deliveryCountry;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deliveryTime")
    public DeliveryTime deliveryTime;

    public Service withDeliveryTime(DeliveryTime deliveryTime) {
        this.deliveryTime = deliveryTime;
        return this;
    }
    
    /**
     * Eligibility for this service. Acceptable values are: - "`All scenarios`" - "`All scenarios except Shopping Actions`" - "`Shopping Actions`" 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eligibility")
    public String eligibility;

    public Service withEligibility(String eligibility) {
        this.eligibility = eligibility;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumOrderValue")
    public Price minimumOrderValue;

    public Service withMinimumOrderValue(Price minimumOrderValue) {
        this.minimumOrderValue = minimumOrderValue;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumOrderValueTable")
    public MinimumOrderValueTable minimumOrderValueTable;

    public Service withMinimumOrderValueTable(MinimumOrderValueTable minimumOrderValueTable) {
        this.minimumOrderValueTable = minimumOrderValueTable;
        return this;
    }
    
    /**
     * Free-form name of the service. Must be unique within target account. Required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Service withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pickupService")
    public PickupCarrierService pickupService;

    public Service withPickupService(PickupCarrierService pickupService) {
        this.pickupService = pickupService;
        return this;
    }
    
    /**
     * Shipping rate group definitions. Only the last one is allowed to have an empty `applicableShippingLabels`, which means "everything else". The other `applicableShippingLabels` must not overlap.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rateGroups")
    public RateGroup[] rateGroups;

    public Service withRateGroups(RateGroup[] rateGroups) {
        this.rateGroups = rateGroups;
        return this;
    }
    
    /**
     * Type of locations this service ships orders to. Acceptable values are: - "`delivery`" - "`pickup`" 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipmentType")
    public String shipmentType;

    public Service withShipmentType(String shipmentType) {
        this.shipmentType = shipmentType;
        return this;
    }
    
    public Service(){}
}
