/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Request to signup new user, create anonymous user or anonymous user reauth.
 */
export class IdentitytoolkitRelyingpartySignupNewUserRequest extends SpeakeasyBase {
  /**
   * The captcha challenge.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "captchaChallenge" })
  captchaChallenge?: string;

  /**
   * Response to the captcha.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "captchaResponse" })
  captchaResponse?: string;

  /**
   * Whether to disable the user. Only can be used by service account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disabled" })
  disabled?: boolean;

  /**
   * The name of the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * The email of the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Mark the email as verified or not. Only can be used by service account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emailVerified" })
  emailVerified?: boolean;

  /**
   * The GITKit token of the authenticated user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idToken" })
  idToken?: string;

  /**
   * Instance id token of the app.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instanceId" })
  instanceId?: string;

  /**
   * Privileged caller can create user with specified user id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "localId" })
  localId?: string;

  /**
   * The new password of the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;

  /**
   * Privileged caller can create user with specified phone number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "phoneNumber" })
  phoneNumber?: string;

  /**
   * The photo url of the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "photoUrl" })
  photoUrl?: string;

  /**
   * For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tenantId" })
  tenantId?: string;

  /**
   * Tenant project number to be used for idp discovery.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tenantProjectNumber" })
  tenantProjectNumber?: string;
}
