"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import connectorprofilecredentials as shared_connectorprofilecredentials
from ..shared import connectorprofileproperties as shared_connectorprofileproperties
from ..shared import updateconnectorprofileresponse as shared_updateconnectorprofileresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateConnectorProfileRequestBodyConnectionModeEnum(str, Enum):
    r"""Indicates the connection mode and if it is public or private."""
    PUBLIC = 'Public'
    PRIVATE = 'Private'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateConnectorProfileRequestBodyConnectorProfileConfig:
    r"""Defines the connector-specific configuration and credentials for the connector profile."""
    
    connector_profile_credentials: Optional[shared_connectorprofilecredentials.ConnectorProfileCredentials] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorProfileCredentials'), 'exclude': lambda f: f is None }})  
    connector_profile_properties: Optional[shared_connectorprofileproperties.ConnectorProfileProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorProfileProperties'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateConnectorProfileRequestBody:
    
    connection_mode: UpdateConnectorProfileRequestBodyConnectionModeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectionMode') }})
    r"""Indicates the connection mode and if it is public or private."""  
    connector_profile_config: UpdateConnectorProfileRequestBodyConnectorProfileConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorProfileConfig') }})
    r"""Defines the connector-specific configuration and credentials for the connector profile."""  
    connector_profile_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorProfileName') }})
    r"""The name of the connector profile and is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account."""  
    

@dataclasses.dataclass
class UpdateConnectorProfileRequest:
    
    request_body: UpdateConnectorProfileRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateConnectorProfileResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    connector_authentication_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConnectorAuthenticationException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    update_connector_profile_response: Optional[shared_updateconnectorprofileresponse.UpdateConnectorProfileResponse] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    