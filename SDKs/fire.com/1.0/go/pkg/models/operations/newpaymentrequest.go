// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// NewPaymentRequestNewPaymentRequestCurrencyEnum - Either `EUR` or `GBP`, and must correspond to the currency of the account the funds are being lodged into in the `icanTo`.
type NewPaymentRequestNewPaymentRequestCurrencyEnum string

const (
	NewPaymentRequestNewPaymentRequestCurrencyEnumEur NewPaymentRequestNewPaymentRequestCurrencyEnum = "EUR"
	NewPaymentRequestNewPaymentRequestCurrencyEnumGbp NewPaymentRequestNewPaymentRequestCurrencyEnum = "GBP"
)

func (e *NewPaymentRequestNewPaymentRequestCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EUR":
		fallthrough
	case "GBP":
		*e = NewPaymentRequestNewPaymentRequestCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NewPaymentRequestNewPaymentRequestCurrencyEnum: %s", s)
	}
}

type NewPaymentRequestNewPaymentRequestOrderDetails struct {
	// This is your own comment for the transaction.
	Comment1 *string `json:"comment1,omitempty"`
	// This is your own comment for the transaction.
	Comment2 *string `json:"comment2,omitempty"`
	// Use this field to store a customer number for the transaction (for example).
	CustomerNumber *string `json:"customerNumber,omitempty"`
	// The first line of the delivery address.
	DeliveryAddressLine1 *string `json:"deliveryAddressLine1,omitempty"`
	// The second line of the delivery address.
	DeliveryAddressLine2 *string `json:"deliveryAddressLine2,omitempty"`
	// Delivery address city
	DeliveryCity *string `json:"deliveryCity,omitempty"`
	// 2-digit code for the country
	DeliveryCountry *string `json:"deliveryCountry,omitempty"`
	// Delivery address post code
	DeliveryPostCode *string `json:"deliveryPostCode,omitempty"`
	// This is a reference you use to uniquely identify each of your customers.
	MerchantCustomerIdentification *string `json:"merchantCustomerIdentification,omitempty"`
	// Your Merchant Number (if applicable).
	MerchantNumber *string `json:"merchantNumber,omitempty"`
	// Use this field to store the order id for the transaction. The Order Id cannot be set unless the `maxNumberPayments` is 1.
	OrderID *string `json:"orderId,omitempty"`
	// Use this field to store a product id for the transaction (for example).
	ProductID *string `json:"productId,omitempty"`
	// Use this field to store any other reference for the transaction (for example, a phone number).
	VariableReference *string `json:"variableReference,omitempty"`
}

// NewPaymentRequestNewPaymentRequestTypeEnum - The type of Fire Open Payment that was created
type NewPaymentRequestNewPaymentRequestTypeEnum string

const (
	NewPaymentRequestNewPaymentRequestTypeEnumOther NewPaymentRequestNewPaymentRequestTypeEnum = "OTHER"
)

func (e *NewPaymentRequestNewPaymentRequestTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OTHER":
		*e = NewPaymentRequestNewPaymentRequestTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NewPaymentRequestNewPaymentRequestTypeEnum: %s", s)
	}
}

// NewPaymentRequestNewPaymentRequest - Details of the new payment request
type NewPaymentRequestNewPaymentRequest struct {
	// These fields will be dispalyed to the payer when using the hosted option. You can choose to display any of `ORDER_ID`, `PRODUCT_ID`, `CUSTOMER_ID`, `CUSTOMER_NUMBER` and `COMMENT2` to the payer.
	AdditionalFields *string `json:"additionalFields,omitempty"`
	// The requested amount to pay. Note the last two digits represent pennies/cents, (e.g., £1.00 = 100).
	Amount *int64 `json:"amount,omitempty"`
	// For the hosted option, the payer will be asked to fill in these fields but they will not be mandatory. You can choose to collect any of the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.
	CollectFields *string `json:"collectFields,omitempty"`
	// Either `EUR` or `GBP`, and must correspond to the currency of the account the funds are being lodged into in the `icanTo`.
	Currency NewPaymentRequestNewPaymentRequestCurrencyEnum `json:"currency"`
	// A public facing description of the request. This will be shown to the user when they tap or scan the request.
	Description string `json:"description"`
	// This is the expiry of the payment request. After this time, the payment cannot be paid.
	Expiry *time.Time `json:"expiry,omitempty"`
	// The ican of the account to collect the funds into. Must be one of your fire.com Accounts.
	IcanTo int64 `json:"icanTo"`
	// For the hosted option, these fields will be madatory for the payer to fill in on the hosted payment page. You can choose to collect any the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.
	MandatoryFields *string `json:"mandatoryFields,omitempty"`
	// The max number of people who can pay this request. Must be set to 1 for the ECOMMERCE_GOODS and ECOMMERCE_SERVICES types.
	MaxNumberPayments *int64 `json:"maxNumberPayments,omitempty"`
	// An internal description of the request.
	MyRef        string                                          `json:"myRef"`
	OrderDetails *NewPaymentRequestNewPaymentRequestOrderDetails `json:"orderDetails,omitempty"`
	// The merchant return URL where the customer will be re-directed to with the result of the transaction.
	ReturnURL *string `json:"returnUrl,omitempty"`
	// The type of Fire Open Payment that was created
	Type NewPaymentRequestNewPaymentRequestTypeEnum `json:"type"`
}

type NewPaymentRequestRequest struct {
	// Details of the new payment request
	Request NewPaymentRequestNewPaymentRequest `request:"mediaType=application/json"`
}

// NewPaymentRequestNewPaymentRequestResponseTypeEnum - The type of Fire Open Payment that was created.
type NewPaymentRequestNewPaymentRequestResponseTypeEnum string

const (
	NewPaymentRequestNewPaymentRequestResponseTypeEnumOther NewPaymentRequestNewPaymentRequestResponseTypeEnum = "OTHER"
)

func (e *NewPaymentRequestNewPaymentRequestResponseTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OTHER":
		*e = NewPaymentRequestNewPaymentRequestResponseTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NewPaymentRequestNewPaymentRequestResponseTypeEnum: %s", s)
	}
}

// NewPaymentRequestNewPaymentRequestResponse - Payment Request created successfully
type NewPaymentRequestNewPaymentRequestResponse struct {
	// The code for this request. Create a URL in this format: `https://payments.fire.com/{code}` and share to your customers.
	//
	Code *string `json:"code,omitempty"`
	// The type of Fire Open Payment that was created.
	Type *NewPaymentRequestNewPaymentRequestResponseTypeEnum `json:"type,omitempty"`
}

type NewPaymentRequestResponse struct {
	ContentType string
	// Payment Request created successfully
	NewPaymentRequestResponse *NewPaymentRequestNewPaymentRequestResponse
	StatusCode                int
	RawResponse               *http.Response
}
