"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import clusterendpointencryptiontype_enum as shared_clusterendpointencryptiontype_enum
from ..shared import endpoint as shared_endpoint
from ..shared import node as shared_node
from ..shared import notificationconfiguration as shared_notificationconfiguration
from ..shared import parametergroupstatus as shared_parametergroupstatus
from ..shared import securitygroupmembership as shared_securitygroupmembership
from ..shared import ssedescription as shared_ssedescription
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Cluster:
    r"""Contains all of the attributes of a specific DAX cluster."""
    
    active_nodes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActiveNodes'), 'exclude': lambda f: f is None }})  
    cluster_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterArn'), 'exclude': lambda f: f is None }})  
    cluster_discovery_endpoint: Optional[shared_endpoint.Endpoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterDiscoveryEndpoint'), 'exclude': lambda f: f is None }})  
    cluster_endpoint_encryption_type: Optional[shared_clusterendpointencryptiontype_enum.ClusterEndpointEncryptionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterEndpointEncryptionType'), 'exclude': lambda f: f is None }})  
    cluster_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterName'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    iam_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IamRoleArn'), 'exclude': lambda f: f is None }})  
    node_ids_to_remove: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NodeIdsToRemove'), 'exclude': lambda f: f is None }})  
    nodes: Optional[list[shared_node.Node]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Nodes'), 'exclude': lambda f: f is None }})  
    node_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NodeType'), 'exclude': lambda f: f is None }})  
    notification_configuration: Optional[shared_notificationconfiguration.NotificationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotificationConfiguration'), 'exclude': lambda f: f is None }})  
    parameter_group: Optional[shared_parametergroupstatus.ParameterGroupStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParameterGroup'), 'exclude': lambda f: f is None }})  
    preferred_maintenance_window: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreferredMaintenanceWindow'), 'exclude': lambda f: f is None }})  
    security_groups: Optional[list[shared_securitygroupmembership.SecurityGroupMembership]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityGroups'), 'exclude': lambda f: f is None }})  
    sse_description: Optional[shared_ssedescription.SSEDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SSEDescription'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    subnet_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubnetGroup'), 'exclude': lambda f: f is None }})  
    total_nodes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalNodes'), 'exclude': lambda f: f is None }})  
    