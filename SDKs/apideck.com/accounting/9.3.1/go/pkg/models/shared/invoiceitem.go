// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

type InvoiceItemPurchaseDetailsInput struct {
	// Amounts are including tax
	TaxInclusive *bool               `json:"tax_inclusive,omitempty"`
	TaxRate      *LinkedTaxRateInput `json:"tax_rate,omitempty"`
	// Description of the unit type the item is sold as, ie: kg, hour.
	UnitOfMeasure *string  `json:"unit_of_measure,omitempty"`
	UnitPrice     *float64 `json:"unit_price,omitempty"`
}

type InvoiceItemSalesDetailsInput struct {
	// Amounts are including tax
	TaxInclusive *bool               `json:"tax_inclusive,omitempty"`
	TaxRate      *LinkedTaxRateInput `json:"tax_rate,omitempty"`
	// Description of the unit type the item is sold as, ie: kg, hour.
	UnitOfMeasure *string  `json:"unit_of_measure,omitempty"`
	UnitPrice     *float64 `json:"unit_price,omitempty"`
}

// InvoiceItemTypeEnum - Item type
type InvoiceItemTypeEnum string

const (
	InvoiceItemTypeEnumInventory InvoiceItemTypeEnum = "inventory"
	InvoiceItemTypeEnumService   InvoiceItemTypeEnum = "service"
	InvoiceItemTypeEnumOther     InvoiceItemTypeEnum = "other"
)

func (e InvoiceItemTypeEnum) ToPointer() *InvoiceItemTypeEnum {
	return &e
}

func (e *InvoiceItemTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inventory":
		fallthrough
	case "service":
		fallthrough
	case "other":
		*e = InvoiceItemTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvoiceItemTypeEnum: %v", v)
	}
}

type InvoiceItemInput struct {
	Active       *bool                     `json:"active,omitempty"`
	AssetAccount *LinkedLedgerAccountInput `json:"asset_account,omitempty"`
	// User defined item code
	Code *string `json:"code,omitempty"`
	// A short description of the item
	Description    *string                   `json:"description,omitempty"`
	ExpenseAccount *LinkedLedgerAccountInput `json:"expense_account,omitempty"`
	IncomeAccount  *LinkedLedgerAccountInput `json:"income_account,omitempty"`
	// The date of opening balance if inventory item is tracked - YYYY-MM-DD.
	InventoryDate *types.Date `json:"inventory_date,omitempty"`
	// Item name
	Name            *string                          `json:"name,omitempty"`
	PurchaseDetails *InvoiceItemPurchaseDetailsInput `json:"purchase_details,omitempty"`
	// Item is available for purchase transactions
	Purchased *bool    `json:"purchased,omitempty"`
	Quantity  *float64 `json:"quantity,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion   *string                       `json:"row_version,omitempty"`
	SalesDetails *InvoiceItemSalesDetailsInput `json:"sales_details,omitempty"`
	// Item will be available on sales transactions
	Sold *bool `json:"sold,omitempty"`
	// If true, transactions for this item are taxable
	Taxable *bool `json:"taxable,omitempty"`
	// Item is inventoried
	Tracked *bool `json:"tracked,omitempty"`
	// Item type
	Type      *InvoiceItemTypeEnum `json:"type,omitempty"`
	UnitPrice *float64             `json:"unit_price,omitempty"`
}

type InvoiceItemPurchaseDetails struct {
	// Amounts are including tax
	TaxInclusive *bool          `json:"tax_inclusive,omitempty"`
	TaxRate      *LinkedTaxRate `json:"tax_rate,omitempty"`
	// Description of the unit type the item is sold as, ie: kg, hour.
	UnitOfMeasure *string  `json:"unit_of_measure,omitempty"`
	UnitPrice     *float64 `json:"unit_price,omitempty"`
}

type InvoiceItemSalesDetails struct {
	// Amounts are including tax
	TaxInclusive *bool          `json:"tax_inclusive,omitempty"`
	TaxRate      *LinkedTaxRate `json:"tax_rate,omitempty"`
	// Description of the unit type the item is sold as, ie: kg, hour.
	UnitOfMeasure *string  `json:"unit_of_measure,omitempty"`
	UnitPrice     *float64 `json:"unit_price,omitempty"`
}

type InvoiceItem struct {
	Active       *bool                `json:"active,omitempty"`
	AssetAccount *LinkedLedgerAccount `json:"asset_account,omitempty"`
	// User defined item code
	Code *string `json:"code,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// A short description of the item
	Description    *string              `json:"description,omitempty"`
	ExpenseAccount *LinkedLedgerAccount `json:"expense_account,omitempty"`
	// The ID of the item.
	ID            *string              `json:"id,omitempty"`
	IncomeAccount *LinkedLedgerAccount `json:"income_account,omitempty"`
	// The date of opening balance if inventory item is tracked - YYYY-MM-DD.
	InventoryDate *types.Date `json:"inventory_date,omitempty"`
	// Item name
	Name            *string                     `json:"name,omitempty"`
	PurchaseDetails *InvoiceItemPurchaseDetails `json:"purchase_details,omitempty"`
	// Item is available for purchase transactions
	Purchased *bool    `json:"purchased,omitempty"`
	Quantity  *float64 `json:"quantity,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion   *string                  `json:"row_version,omitempty"`
	SalesDetails *InvoiceItemSalesDetails `json:"sales_details,omitempty"`
	// Item will be available on sales transactions
	Sold *bool `json:"sold,omitempty"`
	// If true, transactions for this item are taxable
	Taxable *bool `json:"taxable,omitempty"`
	// Item is inventoried
	Tracked *bool `json:"tracked,omitempty"`
	// Item type
	Type      *InvoiceItemTypeEnum `json:"type,omitempty"`
	UnitPrice *float64             `json:"unit_price,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
}
