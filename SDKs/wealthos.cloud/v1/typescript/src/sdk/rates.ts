/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Wealth Managers require various types of rates (e.g. spot fx rates, interest rates) for valuations, currency conversations etc.
 *
 * @remarks
 *
 * The Rates endpoint returns all the configured rate types along with the latest available rate.
 */
export class Rates {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Configured Rates
   *
   * @remarks
   * Returns rate details of the requested rate type.
   */
  getRates(
    req: operations.GetRatesRequest,
    security: operations.GetRatesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRatesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRatesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tenant/rates/v1/{rate_type}/getAll",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetRatesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRatesResponse = new operations.GetRatesResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRates200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetRates200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRates401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetRates401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRates403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetRates403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRates404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetRates404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRates429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetRates429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRates500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetRates500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
