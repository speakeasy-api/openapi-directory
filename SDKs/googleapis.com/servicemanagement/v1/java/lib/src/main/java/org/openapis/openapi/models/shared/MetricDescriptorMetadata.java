/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MetricDescriptorMetadata - Additional annotations that can be used to guide the usage of a metric.
 */
public class MetricDescriptorMetadata {
    /**
     * The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ingestDelay")
    public String ingestDelay;

    public MetricDescriptorMetadata withIngestDelay(String ingestDelay) {
        this.ingestDelay = ingestDelay;
        return this;
    }
    
    /**
     * Deprecated. Must use the MetricDescriptor.launch_stage instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("launchStage")
    public MetricDescriptorMetadataLaunchStageEnum launchStage;

    public MetricDescriptorMetadata withLaunchStage(MetricDescriptorMetadataLaunchStageEnum launchStage) {
        this.launchStage = launchStage;
        return this;
    }
    
    /**
     * The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("samplePeriod")
    public String samplePeriod;

    public MetricDescriptorMetadata withSamplePeriod(String samplePeriod) {
        this.samplePeriod = samplePeriod;
        return this;
    }
    
    public MetricDescriptorMetadata(){}
}
