/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ProductionVariant -  Identifies a model that you want to host and the resources chosen to deploy for hosting it. If you are deploying multiple models, tell SageMaker how to distribute traffic among the models by specifying variant weights. For more information on production variants, check &lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html"&gt; Production variants&lt;/a&gt;. 
 */
public class ProductionVariant {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AcceleratorType")
    public ProductionVariantAcceleratorTypeEnum acceleratorType;

    public ProductionVariant withAcceleratorType(ProductionVariantAcceleratorTypeEnum acceleratorType) {
        this.acceleratorType = acceleratorType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ContainerStartupHealthCheckTimeoutInSeconds")
    public Long containerStartupHealthCheckTimeoutInSeconds;

    public ProductionVariant withContainerStartupHealthCheckTimeoutInSeconds(Long containerStartupHealthCheckTimeoutInSeconds) {
        this.containerStartupHealthCheckTimeoutInSeconds = containerStartupHealthCheckTimeoutInSeconds;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CoreDumpConfig")
    public ProductionVariantCoreDumpConfig coreDumpConfig;

    public ProductionVariant withCoreDumpConfig(ProductionVariantCoreDumpConfig coreDumpConfig) {
        this.coreDumpConfig = coreDumpConfig;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EnableSSMAccess")
    public Boolean enableSSMAccess;

    public ProductionVariant withEnableSSMAccess(Boolean enableSSMAccess) {
        this.enableSSMAccess = enableSSMAccess;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InitialInstanceCount")
    public Long initialInstanceCount;

    public ProductionVariant withInitialInstanceCount(Long initialInstanceCount) {
        this.initialInstanceCount = initialInstanceCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InitialVariantWeight")
    public Float initialVariantWeight;

    public ProductionVariant withInitialVariantWeight(Float initialVariantWeight) {
        this.initialVariantWeight = initialVariantWeight;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InstanceType")
    public ProductionVariantInstanceTypeEnum instanceType;

    public ProductionVariant withInstanceType(ProductionVariantInstanceTypeEnum instanceType) {
        this.instanceType = instanceType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ModelDataDownloadTimeoutInSeconds")
    public Long modelDataDownloadTimeoutInSeconds;

    public ProductionVariant withModelDataDownloadTimeoutInSeconds(Long modelDataDownloadTimeoutInSeconds) {
        this.modelDataDownloadTimeoutInSeconds = modelDataDownloadTimeoutInSeconds;
        return this;
    }
    
    @JsonProperty("ModelName")
    public String modelName;

    public ProductionVariant withModelName(String modelName) {
        this.modelName = modelName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ServerlessConfig")
    public ProductionVariantServerlessConfig serverlessConfig;

    public ProductionVariant withServerlessConfig(ProductionVariantServerlessConfig serverlessConfig) {
        this.serverlessConfig = serverlessConfig;
        return this;
    }
    
    @JsonProperty("VariantName")
    public String variantName;

    public ProductionVariant withVariantName(String variantName) {
        this.variantName = variantName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VolumeSizeInGB")
    public Long volumeSizeInGB;

    public ProductionVariant withVolumeSizeInGB(Long volumeSizeInGB) {
        this.volumeSizeInGB = volumeSizeInGB;
        return this;
    }
    
    public ProductionVariant(@JsonProperty("ModelName") String modelName, @JsonProperty("VariantName") String variantName) {
        this.modelName = modelName;
        this.variantName = variantName;
  }
}
