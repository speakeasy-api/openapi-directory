// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateRepositoryXAmzTargetEnum
type CreateRepositoryXAmzTargetEnum string

const (
	CreateRepositoryXAmzTargetEnumAmazonEc2ContainerRegistryV20150921CreateRepository CreateRepositoryXAmzTargetEnum = "AmazonEC2ContainerRegistry_V20150921.CreateRepository"
)

func (e CreateRepositoryXAmzTargetEnum) ToPointer() *CreateRepositoryXAmzTargetEnum {
	return &e
}

func (e *CreateRepositoryXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonEC2ContainerRegistry_V20150921.CreateRepository":
		*e = CreateRepositoryXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRepositoryXAmzTargetEnum: %v", v)
	}
}

type CreateRepositoryRequest struct {
	CreateRepositoryRequest shared.CreateRepositoryRequest `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              CreateRepositoryXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateRepositoryResponse struct {
	ContentType string
	// Success
	CreateRepositoryResponse *shared.CreateRepositoryResponse
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidTagParameterException
	InvalidTagParameterException interface{}
	// KmsException
	KmsException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// RepositoryAlreadyExistsException
	RepositoryAlreadyExistsException interface{}
	// ServerException
	ServerException interface{}
	StatusCode      int
	RawResponse     *http.Response
	// TooManyTagsException
	TooManyTagsException interface{}
}
