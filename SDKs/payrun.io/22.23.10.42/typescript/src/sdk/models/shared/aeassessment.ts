/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The a e assessments' assessment code
 */
export enum AEAssessmentAEAssessmentAssessmentCodeEnum {
  Excluded = "Excluded",
  EligibleJobHolder = "EligibleJobHolder",
  NonEligibleJobHolder = "NonEligibleJobHolder",
  EntitledWorker = "EntitledWorker",
}

/**
 * The a e assessments' assessment event
 */
export enum AEAssessmentAEAssessmentAssessmentEventEnum {
  NonEnrolmentEvent = "NonEnrolmentEvent",
  AutomaticEnrolment = "AutomaticEnrolment",
  OptIn = "OptIn",
  VoluntaryJoiner = "VoluntaryJoiner",
  ContractualEnrolment = "ContractualEnrolment",
}

/**
 * The a e assessments' assessment override
 */
export enum AEAssessmentAEAssessmentAssessmentOverrideEnum {
  None = "None",
  OptOut = "OptOut",
  OptIn = "OptIn",
  VoluntaryJoiner = "VoluntaryJoiner",
  ContractualPension = "ContractualPension",
  CeasedMembership = "CeasedMembership",
  Leaver = "Leaver",
  Excluded = "Excluded",
}

/**
 * The a e assessments' assessment result
 */
export enum AEAssessmentAEAssessmentAssessmentResultEnum {
  Inconclusive = "Inconclusive",
  NoChange = "NoChange",
  Enrol = "Enrol",
  Exit = "Exit",
}

export class AEAssessmentAEAssessment extends SpeakeasyBase {
  /**
   * The a e assessments' age
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Age" })
  age?: number;

  /**
   * The a e assessments' assessment code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AssessmentCode" })
  assessmentCode?: AEAssessmentAEAssessmentAssessmentCodeEnum;

  /**
   * The a e assessments' assessment date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AssessmentDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  assessmentDate?: Date;

  /**
   * The a e assessments' assessment event
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AssessmentEvent" })
  assessmentEvent?: AEAssessmentAEAssessmentAssessmentEventEnum;

  /**
   * The a e assessments' assessment override
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AssessmentOverride" })
  assessmentOverride?: AEAssessmentAEAssessmentAssessmentOverrideEnum;

  /**
   * The a e assessments' assessment result
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AssessmentResult" })
  assessmentResult?: AEAssessmentAEAssessmentAssessmentResultEnum;

  /**
   * The a e assessments' is member of alternative pension scheme
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IsMemberOfAlternativePensionScheme" })
  isMemberOfAlternativePensionScheme?: boolean;

  /**
   * The a e assessments' opt out window end date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OptOutWindowEndDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  optOutWindowEndDate?: Date;

  /**
   * The a e assessments' qualifying earnings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "QualifyingEarnings" })
  qualifyingEarnings?: number;

  /**
   * The a e assessments' reenrolment date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ReenrolmentDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  reenrolmentDate?: Date;

  /**
   * The a e assessments' state pension age
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StatePensionAge" })
  statePensionAge?: number;

  /**
   * The a e assessments' state pension date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StatePensionDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  statePensionDate?: Date;

  /**
   * The a e assessments' tax period
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TaxPeriod" })
  taxPeriod?: number;

  /**
   * The a e assessments' tax year
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TaxYear" })
  taxYear?: number;
}

/**
 * The a e assessment object.
 */
export class AEAssessment extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AEAssessment" })
  @Type(() => AEAssessmentAEAssessment)
  aeAssessment?: AEAssessmentAEAssessment;
}
