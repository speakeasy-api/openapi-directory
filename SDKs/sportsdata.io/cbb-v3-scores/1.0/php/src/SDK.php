<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SDK
{
	public const SERVERS = [
		'http://azure-api.sportsdata.io/v3/cbb/scores',
		'https://azure-api.sportsdata.io/v3/cbb/scores',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Are Games In Progress
     * 
     * Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressResponse
     */
	public function areGamesInProgress(
        \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/AreAnyGamesInProgress', \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->areGamesInProgress200ApplicationJSONBoolean = $serializer->deserialize((string)$httpResponse->getBody(), 'bool', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Current Season
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonResponse
     */
	public function currentSeason(
        \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/CurrentSeason', \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->season = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Season', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Games by Date
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesByDateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesByDateResponse
     */
	public function gamesByDate(
        \OpenAPI\OpenAPI\Models\Operations\GamesByDateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesByDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/GamesByDate/{date}', \OpenAPI\OpenAPI\Models\Operations\GamesByDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesByDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->games = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Game>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Games by Date (Basic)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesByDateBasicRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesByDateBasicResponse
     */
	public function gamesByDateBasic(
        \OpenAPI\OpenAPI\Models\Operations\GamesByDateBasicRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesByDateBasicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/ScoresBasic/{date}', \OpenAPI\OpenAPI\Models\Operations\GamesByDateBasicRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesByDateBasicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreBasics = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ScoreBasic>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Injured Players
     * 
     * This endpoint provides all currently injured college basketball players, along with injury details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersResponse
     */
	public function injuredPlayers(
        \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/InjuredPlayers', \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * League Hierarchy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LeagueHierarchyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LeagueHierarchyResponse
     */
	public function leagueHierarchy(
        \OpenAPI\OpenAPI\Models\Operations\LeagueHierarchyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LeagueHierarchyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/LeagueHierarchy', \OpenAPI\OpenAPI\Models\Operations\LeagueHierarchyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LeagueHierarchyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conferences = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Conference>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Details by Active
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByActiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByActiveResponse
     */
	public function playerDetailsByActive(
        \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByActiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByActiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Players', \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByActiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByActiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Details by Player
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerResponse
     */
	public function playerDetailsByPlayer(
        \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Player/{playerid}', \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->player = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Player', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Details by Team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamResponse
     */
	public function playerDetailsByTeam(
        \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Players/{team}', \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Players by Team (Basic)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayersByTeamBasicRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayersByTeamBasicResponse
     */
	public function playersByTeamBasic(
        \OpenAPI\OpenAPI\Models\Operations\PlayersByTeamBasicRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayersByTeamBasicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayersBasic/{team}', \OpenAPI\OpenAPI\Models\Operations\PlayersByTeamBasicRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayersByTeamBasicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerBasics = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerBasic>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Schedules
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SchedulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SchedulesResponse
     */
	public function schedules(
        \OpenAPI\OpenAPI\Models\Operations\SchedulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SchedulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Games/{season}', \OpenAPI\OpenAPI\Models\Operations\SchedulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SchedulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->games = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Game>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Schedules (Basic)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SchedulesBasicRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SchedulesBasicResponse
     */
	public function schedulesBasic(
        \OpenAPI\OpenAPI\Models\Operations\SchedulesBasicRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SchedulesBasicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/SchedulesBasic/{season}', \OpenAPI\OpenAPI\Models\Operations\SchedulesBasicRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SchedulesBasicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scheduleBasics = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ScheduleBasic>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stadiums
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StadiumsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StadiumsResponse
     */
	public function stadiums(
        \OpenAPI\OpenAPI\Models\Operations\StadiumsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StadiumsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Stadiums', \OpenAPI\OpenAPI\Models\Operations\StadiumsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StadiumsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stadiums = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Stadium>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Team Game Logs By Season
     * 
     * Game by game log of total team statistics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonResponse
     */
	public function teamGameLogsBySeason(
        \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}', \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamGames = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamGame>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Team Game Stats by Date
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByDateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByDateResponse
     */
	public function teamGameStatsByDate(
        \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByDateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/TeamGameStatsByDate/{date}', \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsByDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamGames = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamGame>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Team Schedule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamScheduleResponse
     */
	public function teamSchedule(
        \OpenAPI\OpenAPI\Models\Operations\TeamScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/TeamSchedule/{season}/{team}', \OpenAPI\OpenAPI\Models\Operations\TeamScheduleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->games = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Game>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Team Season Stats
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsResponse
     */
	public function teamSeasonStats(
        \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/TeamSeasonStats/{season}', \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamSeasons = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamSeason>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Teams
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsResponse
     */
	public function teams(
        \OpenAPI\OpenAPI\Models\Operations\TeamsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/teams', \OpenAPI\OpenAPI\Models\Operations\TeamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Teams (Basic)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsBasicRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsBasicResponse
     */
	public function teamsBasic(
        \OpenAPI\OpenAPI\Models\Operations\TeamsBasicRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsBasicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/TeamsBasic', \OpenAPI\OpenAPI\Models\Operations\TeamsBasicRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsBasicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamBasics = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamBasic>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Tournament Hierarchy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TournamentHierarchyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TournamentHierarchyResponse
     */
	public function tournamentHierarchy(
        \OpenAPI\OpenAPI\Models\Operations\TournamentHierarchyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TournamentHierarchyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Tournament/{season}', \OpenAPI\OpenAPI\Models\Operations\TournamentHierarchyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TournamentHierarchyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tournament = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tournament', 'json');
            }
        }

        return $response;
    }
}