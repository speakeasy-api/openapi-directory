"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import lookbackperiodindays_enum as shared_lookbackperiodindays_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RightsizingRecommendationMetadata:
    r"""Metadata for this recommendation set."""
    
    additional_metadata: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalMetadata'), 'exclude': lambda f: f is None }})  
    generation_timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GenerationTimestamp'), 'exclude': lambda f: f is None }})  
    lookback_period_in_days: Optional[shared_lookbackperiodindays_enum.LookbackPeriodInDaysEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookbackPeriodInDays'), 'exclude': lambda f: f is None }})  
    recommendation_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecommendationId'), 'exclude': lambda f: f is None }})  
    