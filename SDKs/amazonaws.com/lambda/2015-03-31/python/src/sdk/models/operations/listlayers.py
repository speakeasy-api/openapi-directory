"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listlayersresponse as shared_listlayersresponse
from enum import Enum
from typing import Any, Optional

class ListLayersCompatibleArchitectureEnum(str, Enum):
    r"""The compatible <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html\\">instruction set architecture</a>."""
    X86_64 = 'x86_64'
    ARM64 = 'arm64'

class ListLayersCompatibleRuntimeEnum(str, Enum):
    r"""A runtime identifier. For example, <code>go1.x</code>."""
    NODEJS = 'nodejs'
    NODEJS4_3 = 'nodejs4.3'
    NODEJS6_10 = 'nodejs6.10'
    NODEJS8_10 = 'nodejs8.10'
    NODEJS10_X = 'nodejs10.x'
    NODEJS12_X = 'nodejs12.x'
    NODEJS14_X = 'nodejs14.x'
    NODEJS16_X = 'nodejs16.x'
    JAVA8 = 'java8'
    JAVA8_AL2 = 'java8.al2'
    JAVA11 = 'java11'
    PYTHON2_7 = 'python2.7'
    PYTHON3_6 = 'python3.6'
    PYTHON3_7 = 'python3.7'
    PYTHON3_8 = 'python3.8'
    PYTHON3_9 = 'python3.9'
    DOTNETCORE1_0 = 'dotnetcore1.0'
    DOTNETCORE2_0 = 'dotnetcore2.0'
    DOTNETCORE2_1 = 'dotnetcore2.1'
    DOTNETCORE3_1 = 'dotnetcore3.1'
    DOTNET6 = 'dotnet6'
    NODEJS4_3_EDGE = 'nodejs4.3-edge'
    GO1_X = 'go1.x'
    RUBY2_5 = 'ruby2.5'
    RUBY2_7 = 'ruby2.7'
    PROVIDED = 'provided'
    PROVIDED_AL2 = 'provided.al2'
    NODEJS18_X = 'nodejs18.x'


@dataclasses.dataclass
class ListLayersRequest:
    
    compatible_architecture: Optional[ListLayersCompatibleArchitectureEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CompatibleArchitecture', 'style': 'form', 'explode': True }})
    r"""The compatible <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html\\">instruction set architecture</a>."""  
    compatible_runtime: Optional[ListLayersCompatibleRuntimeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CompatibleRuntime', 'style': 'form', 'explode': True }})
    r"""A runtime identifier. For example, <code>go1.x</code>."""  
    marker: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Marker', 'style': 'form', 'explode': True }})
    r"""A pagination token returned by a previous call."""  
    max_items: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxItems', 'style': 'form', 'explode': True }})
    r"""The maximum number of layers to return."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListLayersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    invalid_parameter_value_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterValueException"""  
    list_layers_response: Optional[shared_listlayersresponse.ListLayersResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceException"""  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    