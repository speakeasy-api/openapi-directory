/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

export class UpdateAccountAuditConfigurationRequestBody extends SpeakeasyBase {
  /**
   * <p>Specifies which audit checks are enabled and disabled for this account. Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are currently enabled.</p> <p>Some data collection might start immediately when certain checks are enabled. When a check is disabled, any data collected so far in relation to the check is deleted.</p> <p>You cannot disable a check if it's used by any scheduled audit. You must first delete the check from the scheduled audit or delete the scheduled audit itself.</p> <p>On the first call to <code>UpdateAccountAuditConfiguration</code>, this parameter is required and must specify at least one enabled check.</p>
   */
  @SpeakeasyMetadata({ elemType: shared.AuditCheckConfiguration })
  @Expose({ name: "auditCheckConfigurations" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.AuditCheckConfiguration> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.AuditCheckConfiguration);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  auditCheckConfigurations?: Record<string, shared.AuditCheckConfiguration>;

  /**
   * Information about the targets to which audit notifications are sent.
   */
  @SpeakeasyMetadata({ elemType: shared.AuditNotificationTarget })
  @Expose({ name: "auditNotificationTargetConfigurations" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.AuditNotificationTarget> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.AuditNotificationTarget);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  auditNotificationTargetConfigurations?: Record<
    string,
    shared.AuditNotificationTarget
  >;

  /**
   * The Amazon Resource Name (ARN) of the role that grants permission to IoT to access information about your devices, policies, certificates, and other items as required when performing an audit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn?: string;
}

export class UpdateAccountAuditConfigurationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateAccountAuditConfigurationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateAccountAuditConfigurationResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateAccountAuditConfigurationResponse?: Record<string, any>;
}
