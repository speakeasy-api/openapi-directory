// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateSecretXAmzTargetEnum
type UpdateSecretXAmzTargetEnum string

const (
	UpdateSecretXAmzTargetEnumSecretsmanagerUpdateSecret UpdateSecretXAmzTargetEnum = "secretsmanager.UpdateSecret"
)

func (e *UpdateSecretXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "secretsmanager.UpdateSecret":
		*e = UpdateSecretXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSecretXAmzTargetEnum: %s", s)
	}
}

type UpdateSecretHeaders struct {
	XAmzAlgorithm     *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        UpdateSecretXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateSecretRequest struct {
	Headers UpdateSecretHeaders
	Request shared.UpdateSecretRequest `request:"mediaType=application/json"`
}

type UpdateSecretResponse struct {
	ContentType string
	// DecryptionFailure
	DecryptionFailure interface{}
	// EncryptionFailure
	EncryptionFailure interface{}
	// InternalServiceError
	InternalServiceError interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// MalformedPolicyDocumentException
	MalformedPolicyDocumentException interface{}
	// PreconditionNotMetException
	PreconditionNotMetException interface{}
	StatusCode                  int
	RawResponse                 *http.Response
	// ResourceExistsException
	ResourceExistsException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	UpdateSecretResponse *shared.UpdateSecretResponse
}
