<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Conversation 
{
	
	public const RECORD_CONVERSATION_SERVERS = [
        /** Override base path for the PUT /conversations/{conversation_id}/record operation */
		'https://api.nexmo.com/v1',
	];

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateConversationRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateConversationResponse
     */
	public function createConversation(
        \OpenAPI\OpenAPI\Models\Operations\CreateConversationRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateConversationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createConversation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateConversation200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConversationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteConversationResponse
     */
	public function deleteConversation(
        \OpenAPI\OpenAPI\Models\Operations\DeleteConversationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteConversationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteConversation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List conversations
     * 
     * This endpoint is **DEPRECATED**. Please use [/v0.2/conversations](/api/conversation.v2#get-conversations).
     * 
     * List all conversations associated with your application. This endpoint required an admin JWT. To find all conversations for the currently logged in user, see [GET /users/:id/conversations](#getuserConversations)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConversationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListConversationsResponse
     */
	public function listConversations(
        \OpenAPI\OpenAPI\Models\Operations\ListConversationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListConversationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListConversationsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListConversationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConversations200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListConversations200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Record a conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordConversationRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RecordConversationResponse
     */
	public function recordConversation(
        \OpenAPI\OpenAPI\Models\Operations\RecordConversationRequest $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RecordConversationResponse
    {
        $baseUrl = Conversation::RECORD_CONVERSATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/record', \OpenAPI\OpenAPI\Models\Operations\RecordConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecordConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update a conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplaceConversationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReplaceConversationResponse
     */
	public function replaceConversation(
        \OpenAPI\OpenAPI\Models\Operations\ReplaceConversationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReplaceConversationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}', \OpenAPI\OpenAPI\Models\Operations\ReplaceConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReplaceConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->replaceConversation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReplaceConversation200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveConversationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveConversationResponse
     */
	public function retrieveConversation(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveConversationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveConversationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveConversation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RetrieveConversation200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}