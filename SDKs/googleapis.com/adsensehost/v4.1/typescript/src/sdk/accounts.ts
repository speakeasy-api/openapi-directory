/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Accounts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get information about one of the ad clients in the specified publisher's AdSense account.
   */
  adsensehostAccountsAdclientsGet(
    req: operations.AdsensehostAccountsAdclientsGetRequest,
    security: operations.AdsensehostAccountsAdclientsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsensehostAccountsAdclientsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsensehostAccountsAdclientsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsensehostAccountsAdclientsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsensehostAccountsAdclientsGetResponse =
        new operations.AdsensehostAccountsAdclientsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adClient = utils.objectToClass(httpRes?.data, shared.AdClient);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all hosted ad clients in the specified hosted account.
   */
  adsensehostAccountsAdclientsList(
    req: operations.AdsensehostAccountsAdclientsListRequest,
    security: operations.AdsensehostAccountsAdclientsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsensehostAccountsAdclientsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsensehostAccountsAdclientsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsensehostAccountsAdclientsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsensehostAccountsAdclientsListResponse =
        new operations.AdsensehostAccountsAdclientsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adClients = utils.objectToClass(
              httpRes?.data,
              shared.AdClients
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete the specified ad unit from the specified publisher AdSense account.
   */
  adsensehostAccountsAdunitsDelete(
    req: operations.AdsensehostAccountsAdunitsDeleteRequest,
    security: operations.AdsensehostAccountsAdunitsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsensehostAccountsAdunitsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsensehostAccountsAdunitsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsensehostAccountsAdunitsDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsensehostAccountsAdunitsDeleteResponse =
        new operations.AdsensehostAccountsAdunitsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adUnit = utils.objectToClass(httpRes?.data, shared.AdUnit);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the specified host ad unit in this AdSense account.
   */
  adsensehostAccountsAdunitsGet(
    req: operations.AdsensehostAccountsAdunitsGetRequest,
    security: operations.AdsensehostAccountsAdunitsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsensehostAccountsAdunitsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsensehostAccountsAdunitsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsensehostAccountsAdunitsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsensehostAccountsAdunitsGetResponse =
        new operations.AdsensehostAccountsAdunitsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adUnit = utils.objectToClass(httpRes?.data, shared.AdUnit);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get ad code for the specified ad unit, attaching the specified host custom channels.
   */
  adsensehostAccountsAdunitsGetAdCode(
    req: operations.AdsensehostAccountsAdunitsGetAdCodeRequest,
    security: operations.AdsensehostAccountsAdunitsGetAdCodeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsensehostAccountsAdunitsGetAdCodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsensehostAccountsAdunitsGetAdCodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsensehostAccountsAdunitsGetAdCodeSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsensehostAccountsAdunitsGetAdCodeResponse =
        new operations.AdsensehostAccountsAdunitsGetAdCodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adCode = utils.objectToClass(httpRes?.data, shared.AdCode);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Insert the supplied ad unit into the specified publisher AdSense account.
   */
  adsensehostAccountsAdunitsInsert(
    req: operations.AdsensehostAccountsAdunitsInsertRequest,
    security: operations.AdsensehostAccountsAdunitsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsensehostAccountsAdunitsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsensehostAccountsAdunitsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}/adunits",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "adUnit",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsensehostAccountsAdunitsInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsensehostAccountsAdunitsInsertResponse =
        new operations.AdsensehostAccountsAdunitsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adUnit = utils.objectToClass(httpRes?.data, shared.AdUnit);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all ad units in the specified publisher's AdSense account.
   */
  adsensehostAccountsAdunitsList(
    req: operations.AdsensehostAccountsAdunitsListRequest,
    security: operations.AdsensehostAccountsAdunitsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsensehostAccountsAdunitsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsensehostAccountsAdunitsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}/adunits",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsensehostAccountsAdunitsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsensehostAccountsAdunitsListResponse =
        new operations.AdsensehostAccountsAdunitsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adUnits = utils.objectToClass(httpRes?.data, shared.AdUnits);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update the supplied ad unit in the specified publisher AdSense account. This method supports patch semantics.
   */
  adsensehostAccountsAdunitsPatch(
    req: operations.AdsensehostAccountsAdunitsPatchRequest,
    security: operations.AdsensehostAccountsAdunitsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsensehostAccountsAdunitsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsensehostAccountsAdunitsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}/adunits",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "adUnit",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsensehostAccountsAdunitsPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsensehostAccountsAdunitsPatchResponse =
        new operations.AdsensehostAccountsAdunitsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adUnit = utils.objectToClass(httpRes?.data, shared.AdUnit);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update the supplied ad unit in the specified publisher AdSense account.
   */
  adsensehostAccountsAdunitsUpdate(
    req: operations.AdsensehostAccountsAdunitsUpdateRequest,
    security: operations.AdsensehostAccountsAdunitsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsensehostAccountsAdunitsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsensehostAccountsAdunitsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}/adunits",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "adUnit",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsensehostAccountsAdunitsUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsensehostAccountsAdunitsUpdateResponse =
        new operations.AdsensehostAccountsAdunitsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adUnit = utils.objectToClass(httpRes?.data, shared.AdUnit);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get information about the selected associated AdSense account.
   */
  adsensehostAccountsGet(
    req: operations.AdsensehostAccountsGetRequest,
    security: operations.AdsensehostAccountsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsensehostAccountsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsensehostAccountsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsensehostAccountsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsensehostAccountsGetResponse =
        new operations.AdsensehostAccountsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.account = utils.objectToClass(httpRes?.data, shared.Account);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List hosted accounts associated with this AdSense account by ad client id.
   */
  adsensehostAccountsList(
    req: operations.AdsensehostAccountsListRequest,
    security: operations.AdsensehostAccountsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsensehostAccountsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsensehostAccountsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/accounts";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsensehostAccountsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsensehostAccountsListResponse =
        new operations.AdsensehostAccountsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accounts = utils.objectToClass(httpRes?.data, shared.Accounts);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter.
   */
  adsensehostAccountsReportsGenerate(
    req: operations.AdsensehostAccountsReportsGenerateRequest,
    security: operations.AdsensehostAccountsReportsGenerateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsensehostAccountsReportsGenerateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsensehostAccountsReportsGenerateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/reports",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsensehostAccountsReportsGenerateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsensehostAccountsReportsGenerateResponse =
        new operations.AdsensehostAccountsReportsGenerateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.report = utils.objectToClass(httpRes?.data, shared.Report);
          }
          break;
      }

      return res;
    });
  }
}
