"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import failuredetail as shared_failuredetail
from ..shared import inconclusivedetail as shared_inconclusivedetail
from ..shared import skippeddetail as shared_skippeddetail
from ..shared import successdetail as shared_successdetail
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OutcomeSummaryEnum(str, Enum):
    r"""The simplest way to interpret a result. Required"""
    UNSET = 'unset'
    SUCCESS = 'success'
    FAILURE = 'failure'
    INCONCLUSIVE = 'inconclusive'
    SKIPPED = 'skipped'
    FLAKY = 'flaky'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Outcome:
    r"""Interprets a result so that humans and machines can act on it."""
    
    failure_detail: Optional[shared_failuredetail.FailureDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureDetail'), 'exclude': lambda f: f is None }})
    r"""Details for an outcome with a FAILURE outcome summary."""  
    inconclusive_detail: Optional[shared_inconclusivedetail.InconclusiveDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inconclusiveDetail'), 'exclude': lambda f: f is None }})
    r"""Details for an outcome with an INCONCLUSIVE outcome summary."""  
    skipped_detail: Optional[shared_skippeddetail.SkippedDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skippedDetail'), 'exclude': lambda f: f is None }})
    r"""Details for an outcome with a SKIPPED outcome summary."""  
    success_detail: Optional[shared_successdetail.SuccessDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('successDetail'), 'exclude': lambda f: f is None }})
    r"""Details for an outcome with a SUCCESS outcome summary. LINT.IfChange"""  
    summary: Optional[OutcomeSummaryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary'), 'exclude': lambda f: f is None }})
    r"""The simplest way to interpret a result. Required"""  
    