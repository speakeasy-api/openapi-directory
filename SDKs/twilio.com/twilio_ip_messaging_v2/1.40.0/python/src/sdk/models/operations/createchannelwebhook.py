"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import channel_webhook_enum_method_enum as shared_channel_webhook_enum_method_enum
from ..shared import channel_webhook_enum_type_enum as shared_channel_webhook_enum_type_enum
from ..shared import ip_messaging_v2_service_channel_channel_webhook as shared_ip_messaging_v2_service_channel_channel_webhook
from typing import Optional

CREATE_CHANNEL_WEBHOOK_SERVERS = [
	"https://ip-messaging.twilio.com",
]


@dataclasses.dataclass
class CreateChannelWebhookSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class CreateChannelWebhookCreateChannelWebhookRequest:
    
    type: shared_channel_webhook_enum_type_enum.ChannelWebhookEnumTypeEnum = dataclasses.field(metadata={'form': { 'field_name': 'Type' }})  
    configuration_filters: Optional[list[str]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Configuration.Filters' }})  
    configuration_flow_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Configuration.FlowSid' }})  
    configuration_method: Optional[shared_channel_webhook_enum_method_enum.ChannelWebhookEnumMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Configuration.Method' }})  
    configuration_retry_count: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Configuration.RetryCount' }})  
    configuration_triggers: Optional[list[str]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Configuration.Triggers' }})  
    configuration_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Configuration.Url' }})  
    

@dataclasses.dataclass
class CreateChannelWebhookRequest:
    
    channel_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'ChannelSid', 'style': 'simple', 'explode': False }})  
    service_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'ServiceSid', 'style': 'simple', 'explode': False }})  
    request_body: Optional[CreateChannelWebhookCreateChannelWebhookRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class CreateChannelWebhookResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    ip_messaging_v2_service_channel_channel_webhook: Optional[shared_ip_messaging_v2_service_channel_channel_webhook.IPMessagingV2ServiceChannelChannelWebhook] = dataclasses.field(default=None)
    r"""Created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    