// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CreateCapacityReservationResultCapacityReservationCapacityAllocationsAllocationTypeEnum - The usage type. <code>used</code> indicates that the instance capacity is in use by instances that are running in the Capacity Reservation.
type CreateCapacityReservationResultCapacityReservationCapacityAllocationsAllocationTypeEnum string

const (
	CreateCapacityReservationResultCapacityReservationCapacityAllocationsAllocationTypeEnumUsed CreateCapacityReservationResultCapacityReservationCapacityAllocationsAllocationTypeEnum = "used"
)

func (e *CreateCapacityReservationResultCapacityReservationCapacityAllocationsAllocationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "used":
		*e = CreateCapacityReservationResultCapacityReservationCapacityAllocationsAllocationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCapacityReservationResultCapacityReservationCapacityAllocationsAllocationTypeEnum: %s", s)
	}
}

// CreateCapacityReservationResultCapacityReservationCapacityAllocations - Information about instance capacity usage for a Capacity Reservation.
type CreateCapacityReservationResultCapacityReservationCapacityAllocations struct {
	AllocationType *CreateCapacityReservationResultCapacityReservationCapacityAllocationsAllocationTypeEnum
	Count          *int64
}

// CreateCapacityReservationResultCapacityReservationEndDateTypeEnum - <p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:</p> <ul> <li> <p> <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it.</p> </li> <li> <p> <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time.</p> </li> </ul>
type CreateCapacityReservationResultCapacityReservationEndDateTypeEnum string

const (
	CreateCapacityReservationResultCapacityReservationEndDateTypeEnumUnlimited CreateCapacityReservationResultCapacityReservationEndDateTypeEnum = "unlimited"
	CreateCapacityReservationResultCapacityReservationEndDateTypeEnumLimited   CreateCapacityReservationResultCapacityReservationEndDateTypeEnum = "limited"
)

func (e *CreateCapacityReservationResultCapacityReservationEndDateTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "unlimited":
		fallthrough
	case "limited":
		*e = CreateCapacityReservationResultCapacityReservationEndDateTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCapacityReservationResultCapacityReservationEndDateTypeEnum: %s", s)
	}
}

// CreateCapacityReservationResultCapacityReservationInstanceMatchCriteriaEnum - <p>Indicates the type of instance launches that the Capacity Reservation accepts. The options include:</p> <ul> <li> <p> <code>open</code> - The Capacity Reservation accepts all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes launch into the Capacity Reservation automatically without specifying any additional parameters.</p> </li> <li> <p> <code>targeted</code> - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity. </p> </li> </ul>
type CreateCapacityReservationResultCapacityReservationInstanceMatchCriteriaEnum string

const (
	CreateCapacityReservationResultCapacityReservationInstanceMatchCriteriaEnumOpen     CreateCapacityReservationResultCapacityReservationInstanceMatchCriteriaEnum = "open"
	CreateCapacityReservationResultCapacityReservationInstanceMatchCriteriaEnumTargeted CreateCapacityReservationResultCapacityReservationInstanceMatchCriteriaEnum = "targeted"
)

func (e *CreateCapacityReservationResultCapacityReservationInstanceMatchCriteriaEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "open":
		fallthrough
	case "targeted":
		*e = CreateCapacityReservationResultCapacityReservationInstanceMatchCriteriaEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCapacityReservationResultCapacityReservationInstanceMatchCriteriaEnum: %s", s)
	}
}

// CreateCapacityReservationResultCapacityReservationInstancePlatformEnum - The type of operating system for which the Capacity Reservation reserves capacity.
type CreateCapacityReservationResultCapacityReservationInstancePlatformEnum string

const (
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumLinuxUnix                        CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "Linux/UNIX"
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumRedHatEnterpriseLinux            CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "Red Hat Enterprise Linux"
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumSuseLinux                        CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "SUSE Linux"
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumWindows                          CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "Windows"
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumWindowsWithSQLServer             CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "Windows with SQL Server"
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumWindowsWithSQLServerEnterprise   CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "Windows with SQL Server Enterprise"
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumWindowsWithSQLServerStandard     CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "Windows with SQL Server Standard"
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumWindowsWithSQLServerWeb          CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "Windows with SQL Server Web"
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumLinuxWithSQLServerStandard       CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "Linux with SQL Server Standard"
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumLinuxWithSQLServerWeb            CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "Linux with SQL Server Web"
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumLinuxWithSQLServerEnterprise     CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "Linux with SQL Server Enterprise"
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumRhelWithSQLServerStandard        CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "RHEL with SQL Server Standard"
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumRhelWithSQLServerEnterprise      CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "RHEL with SQL Server Enterprise"
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumRhelWithSQLServerWeb             CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "RHEL with SQL Server Web"
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumRhelWithHa                       CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "RHEL with HA"
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumRhelWithHaAndSQLServerStandard   CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "RHEL with HA and SQL Server Standard"
	CreateCapacityReservationResultCapacityReservationInstancePlatformEnumRhelWithHaAndSQLServerEnterprise CreateCapacityReservationResultCapacityReservationInstancePlatformEnum = "RHEL with HA and SQL Server Enterprise"
)

func (e *CreateCapacityReservationResultCapacityReservationInstancePlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Linux/UNIX":
		fallthrough
	case "Red Hat Enterprise Linux":
		fallthrough
	case "SUSE Linux":
		fallthrough
	case "Windows":
		fallthrough
	case "Windows with SQL Server":
		fallthrough
	case "Windows with SQL Server Enterprise":
		fallthrough
	case "Windows with SQL Server Standard":
		fallthrough
	case "Windows with SQL Server Web":
		fallthrough
	case "Linux with SQL Server Standard":
		fallthrough
	case "Linux with SQL Server Web":
		fallthrough
	case "Linux with SQL Server Enterprise":
		fallthrough
	case "RHEL with SQL Server Standard":
		fallthrough
	case "RHEL with SQL Server Enterprise":
		fallthrough
	case "RHEL with SQL Server Web":
		fallthrough
	case "RHEL with HA":
		fallthrough
	case "RHEL with HA and SQL Server Standard":
		fallthrough
	case "RHEL with HA and SQL Server Enterprise":
		*e = CreateCapacityReservationResultCapacityReservationInstancePlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCapacityReservationResultCapacityReservationInstancePlatformEnum: %s", s)
	}
}

// CreateCapacityReservationResultCapacityReservationStateEnum - <p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p> <ul> <li> <p> <code>active</code> - The Capacity Reservation is active and the capacity is available for your use.</p> </li> <li> <p> <code>expired</code> - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.</p> </li> <li> <p> <code>cancelled</code> - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.</p> </li> <li> <p> <code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p> </li> <li> <p> <code>failed</code> - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.</p> </li> </ul>
type CreateCapacityReservationResultCapacityReservationStateEnum string

const (
	CreateCapacityReservationResultCapacityReservationStateEnumActive    CreateCapacityReservationResultCapacityReservationStateEnum = "active"
	CreateCapacityReservationResultCapacityReservationStateEnumExpired   CreateCapacityReservationResultCapacityReservationStateEnum = "expired"
	CreateCapacityReservationResultCapacityReservationStateEnumCancelled CreateCapacityReservationResultCapacityReservationStateEnum = "cancelled"
	CreateCapacityReservationResultCapacityReservationStateEnumPending   CreateCapacityReservationResultCapacityReservationStateEnum = "pending"
	CreateCapacityReservationResultCapacityReservationStateEnumFailed    CreateCapacityReservationResultCapacityReservationStateEnum = "failed"
)

func (e *CreateCapacityReservationResultCapacityReservationStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "expired":
		fallthrough
	case "cancelled":
		fallthrough
	case "pending":
		fallthrough
	case "failed":
		*e = CreateCapacityReservationResultCapacityReservationStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCapacityReservationResultCapacityReservationStateEnum: %s", s)
	}
}

// CreateCapacityReservationResultCapacityReservationTags - Describes a tag.
type CreateCapacityReservationResultCapacityReservationTags struct {
	Key   *string
	Value *string
}

// CreateCapacityReservationResultCapacityReservationTenancyEnum - <p>Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:</p> <ul> <li> <p> <code>default</code> - The Capacity Reservation is created on hardware that is shared with other Amazon Web Services accounts.</p> </li> <li> <p> <code>dedicated</code> - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single Amazon Web Services account.</p> </li> </ul>
type CreateCapacityReservationResultCapacityReservationTenancyEnum string

const (
	CreateCapacityReservationResultCapacityReservationTenancyEnumDefault   CreateCapacityReservationResultCapacityReservationTenancyEnum = "default"
	CreateCapacityReservationResultCapacityReservationTenancyEnumDedicated CreateCapacityReservationResultCapacityReservationTenancyEnum = "dedicated"
)

func (e *CreateCapacityReservationResultCapacityReservationTenancyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "default":
		fallthrough
	case "dedicated":
		*e = CreateCapacityReservationResultCapacityReservationTenancyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCapacityReservationResultCapacityReservationTenancyEnum: %s", s)
	}
}

// CreateCapacityReservationResultCapacityReservation - Information about the Capacity Reservation.
type CreateCapacityReservationResultCapacityReservation struct {
	AvailabilityZone           *string
	AvailabilityZoneID         *string
	AvailableInstanceCount     *int64
	CapacityAllocations        []CreateCapacityReservationResultCapacityReservationCapacityAllocations
	CapacityReservationArn     *string
	CapacityReservationFleetID *string
	CapacityReservationID      *string
	CreateDate                 *time.Time
	EbsOptimized               *bool
	EndDate                    *time.Time
	EndDateType                *CreateCapacityReservationResultCapacityReservationEndDateTypeEnum
	EphemeralStorage           *bool
	InstanceMatchCriteria      *CreateCapacityReservationResultCapacityReservationInstanceMatchCriteriaEnum
	InstancePlatform           *CreateCapacityReservationResultCapacityReservationInstancePlatformEnum
	InstanceType               *string
	OutpostArn                 *string
	OwnerID                    *string
	PlacementGroupArn          *string
	StartDate                  *time.Time
	State                      *CreateCapacityReservationResultCapacityReservationStateEnum
	Tags                       []CreateCapacityReservationResultCapacityReservationTags
	Tenancy                    *CreateCapacityReservationResultCapacityReservationTenancyEnum
	TotalInstanceCount         *int64
}

// CreateCapacityReservationResult - Success
type CreateCapacityReservationResult struct {
	CapacityReservation *CreateCapacityReservationResultCapacityReservation
}
