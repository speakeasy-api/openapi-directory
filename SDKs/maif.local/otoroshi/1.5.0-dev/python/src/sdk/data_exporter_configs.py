"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class DataExporterConfigs:
    r"""Everything about Otoroshi data exporters"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def data_exporter_template(self, request: operations.DataExporterTemplateRequest, security: operations.DataExporterTemplateSecurity) -> operations.DataExporterTemplateResponse:
        r"""Get all data exporter configs
        Get all data exporter configs
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/data-exporter-configs/_template'
        
        query_params = utils.get_query_params(operations.DataExporterTemplateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataExporterTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataExporterConfig])
                res.data_exporter_config = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def create_bulk_data_exporter_configs(self, request: shared.DataExporterConfig, security: operations.CreateBulkDataExporterConfigsSecurity) -> operations.CreateBulkDataExporterConfigsResponse:
        r"""Create a new data exporter configs
        Create a new data exporter configs
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/data-exporter-configs/_bulk'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateBulkDataExporterConfigsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CreateBulkDataExporterConfigs200ApplicationJSON]])
                res.create_bulk_data_exporter_configs_200_application_json_objects = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def create_data_exporter_config(self, request: shared.DataExporterConfig, security: operations.CreateDataExporterConfigSecurity) -> operations.CreateDataExporterConfigResponse:
        r"""Create a new data exporter config
        Create a new data exporter config
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/data-exporter-configs'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateDataExporterConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataExporterConfig])
                res.data_exporter_config = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def delete_data_exporter_config(self, request: operations.DeleteDataExporterConfigRequest, security: operations.DeleteDataExporterConfigSecurity) -> operations.DeleteDataExporterConfigResponse:
        r"""Delete a data exporter config
        Delete a data exporter config
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDataExporterConfigRequest, base_url, '/api/data-exporter-configs/{dataExporterConfigId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDataExporterConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Deleted])
                res.deleted = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def deletebulk_data_exporter_config(self, request: list[shared.Patch], security: operations.DeletebulkDataExporterConfigSecurity) -> operations.DeletebulkDataExporterConfigResponse:
        r"""Delete a data exporter config
        Delete a data exporter config
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/data-exporter-configs/_bulk'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletebulkDataExporterConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.DeletebulkDataExporterConfig200ApplicationJSON]])
                res.deletebulk_data_exporter_config_200_application_json_objects = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def find_all_data_exporters(self) -> operations.FindAllDataExportersResponse:
        r"""Get all data exporter configs
        Get all data exporter configs
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/data-exporter-configs'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindAllDataExportersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DataExporterConfig]])
                res.data_exporter_configs = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def find_data_exporter_config_by_id(self, request: operations.FindDataExporterConfigByIDRequest, security: operations.FindDataExporterConfigByIDSecurity) -> operations.FindDataExporterConfigByIDResponse:
        r"""Get a data exporter config
        Get a data exporter config
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FindDataExporterConfigByIDRequest, base_url, '/api/data-exporter-configs/{dataExporterConfigId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindDataExporterConfigByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataExporterConfig])
                res.data_exporter_config = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def patch_bulk_data_exporter_config(self, request: list[shared.Patch], security: operations.PatchBulkDataExporterConfigSecurity) -> operations.PatchBulkDataExporterConfigResponse:
        r"""Update a data exporter configs with a diff
        Update a data exporter configs with a diff
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/data-exporter-configs/_bulk'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchBulkDataExporterConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.PatchBulkDataExporterConfig200ApplicationJSON]])
                res.patch_bulk_data_exporter_config_200_application_json_objects = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def patch_data_exporter_config(self, request: operations.PatchDataExporterConfigRequest, security: operations.PatchDataExporterConfigSecurity) -> operations.PatchDataExporterConfigResponse:
        r"""Update a data exporter config with a diff
        Update a data exporter config with a diff
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchDataExporterConfigRequest, base_url, '/api/data-exporter-configs/{dataExporterConfigId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchDataExporterConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataExporterConfig])
                res.data_exporter_config = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def update_bulk_data_exporter_config(self, request: shared.DataExporterConfig, security: operations.UpdateBulkDataExporterConfigSecurity) -> operations.UpdateBulkDataExporterConfigResponse:
        r"""Update a data exporter configs
        Update a data exporter configs
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/data-exporter-configs/_bulk'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateBulkDataExporterConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.UpdateBulkDataExporterConfig200ApplicationJSON]])
                res.update_bulk_data_exporter_config_200_application_json_objects = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def update_data_exporter_config(self, request: operations.UpdateDataExporterConfigRequest, security: operations.UpdateDataExporterConfigSecurity) -> operations.UpdateDataExporterConfigResponse:
        r"""Update a data exporter config
        Update a data exporter config
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDataExporterConfigRequest, base_url, '/api/data-exporter-configs/{dataExporterConfigId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "data_exporter_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDataExporterConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DataExporterConfig])
                res.data_exporter_config = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    