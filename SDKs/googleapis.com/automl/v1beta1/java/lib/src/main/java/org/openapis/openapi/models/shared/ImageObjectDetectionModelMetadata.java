/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ImageObjectDetectionModelMetadata - Model metadata specific to image object detection.
 */
public class ImageObjectDetectionModelMetadata {
    /**
     * Optional. Type of the model. The available values are: * `cloud-high-accuracy-1` - (default) A model to be used via prediction calls to AutoML API. Expected to have a higher latency, but should also have a higher prediction quality than other models. * `cloud-low-latency-1` - A model to be used via prediction calls to AutoML API. Expected to have low latency, but may have lower prediction quality than other models. * `mobile-low-latency-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. Expected to have low latency, but may have lower prediction quality than other models. * `mobile-versatile-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. * `mobile-high-accuracy-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. Expected to have a higher latency, but should also have a higher prediction quality than other models.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modelType")
    public String modelType;

    public ImageObjectDetectionModelMetadata withModelType(String modelType) {
        this.modelType = modelType;
        return this;
    }
    
    /**
     * Output only. The number of nodes this model is deployed on. A node is an abstraction of a machine resource, which can handle online prediction QPS as given in the qps_per_node field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeCount")
    public String nodeCount;

    public ImageObjectDetectionModelMetadata withNodeCount(String nodeCount) {
        this.nodeCount = nodeCount;
        return this;
    }
    
    /**
     * Output only. An approximate number of online prediction QPS that can be supported by this model per each node on which it is deployed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeQps")
    public Double nodeQps;

    public ImageObjectDetectionModelMetadata withNodeQps(Double nodeQps) {
        this.nodeQps = nodeQps;
        return this;
    }
    
    /**
     * Output only. The reason that this create model operation stopped, e.g. `BUDGET_REACHED`, `MODEL_CONVERGED`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stopReason")
    public String stopReason;

    public ImageObjectDetectionModelMetadata withStopReason(String stopReason) {
        this.stopReason = stopReason;
        return this;
    }
    
    /**
     * The train budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The actual `train_cost` will be equal or less than this value. If further model training ceases to provide any improvements, it will stop without using full budget and the stop_reason will be `MODEL_CONVERGED`. Note, node_hour = actual_hour * number_of_nodes_invovled. For model type `cloud-high-accuracy-1`(default) and `cloud-low-latency-1`, the train budget must be between 20,000 and 900,000 milli node hours, inclusive. The default value is 216, 000 which represents one day in wall time. For model type `mobile-low-latency-1`, `mobile-versatile-1`, `mobile-high-accuracy-1`, `mobile-core-ml-low-latency-1`, `mobile-core-ml-versatile-1`, `mobile-core-ml-high-accuracy-1`, the train budget must be between 1,000 and 100,000 milli node hours, inclusive. The default value is 24, 000 which represents one day in wall time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trainBudgetMilliNodeHours")
    public String trainBudgetMilliNodeHours;

    public ImageObjectDetectionModelMetadata withTrainBudgetMilliNodeHours(String trainBudgetMilliNodeHours) {
        this.trainBudgetMilliNodeHours = trainBudgetMilliNodeHours;
        return this;
    }
    
    /**
     * Output only. The actual train cost of creating this model, expressed in milli node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed to not exceed the train budget.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trainCostMilliNodeHours")
    public String trainCostMilliNodeHours;

    public ImageObjectDetectionModelMetadata withTrainCostMilliNodeHours(String trainCostMilliNodeHours) {
        this.trainCostMilliNodeHours = trainCostMilliNodeHours;
        return this;
    }
    
    public ImageObjectDetectionModelMetadata(){}
}
