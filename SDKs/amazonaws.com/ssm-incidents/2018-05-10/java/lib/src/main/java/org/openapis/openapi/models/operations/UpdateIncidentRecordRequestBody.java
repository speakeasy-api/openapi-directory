/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UpdateIncidentRecordRequestBody {
    /**
     * The Amazon Resource Name (ARN) of the incident record you are updating.
     */
    @JsonProperty("arn")
    public String arn;
    public UpdateIncidentRecordRequestBody withArn(String arn) {
        this.arn = arn;
        return this;
    }
    
    /**
     * The Chatbot chat channel used for collaboration during an incident.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chatChannel")
    public UpdateIncidentRecordRequestBodyChatChannel chatChannel;
    public UpdateIncidentRecordRequestBody withChatChannel(UpdateIncidentRecordRequestBodyChatChannel chatChannel) {
        this.chatChannel = chatChannel;
        return this;
    }
    
    /**
     * A token that ensures that a client calls the operation only once with the specified details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientToken")
    public String clientToken;
    public UpdateIncidentRecordRequestBody withClientToken(String clientToken) {
        this.clientToken = clientToken;
        return this;
    }
    
    /**
     * &lt;p&gt;Defines the impact of the incident to customers and applications. If you provide an impact for an incident, it overwrites the impact provided by the response plan.&lt;/p&gt; &lt;p class="title"&gt; &lt;b&gt;Possible impacts:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;1&lt;/code&gt; - Critical impact, full application failure that impacts many to all customers. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;2&lt;/code&gt; - High impact, partial application failure with impact to many customers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;3&lt;/code&gt; - Medium impact, the application is providing reduced service to customers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;4&lt;/code&gt; - Low impact, customer aren't impacted by the problem yet.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;5&lt;/code&gt; - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("impact")
    public Long impact;
    public UpdateIncidentRecordRequestBody withImpact(Long impact) {
        this.impact = impact;
        return this;
    }
    
    /**
     * &lt;p&gt;The Amazon SNS targets that Incident Manager notifies when a client updates an incident.&lt;/p&gt; &lt;p&gt;Using multiple SNS topics creates redundancy in the event that a Region is down during the incident.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notificationTargets")
    public org.openapis.openapi.models.shared.NotificationTargetItem[] notificationTargets;
    public UpdateIncidentRecordRequestBody withNotificationTargets(org.openapis.openapi.models.shared.NotificationTargetItem[] notificationTargets) {
        this.notificationTargets = notificationTargets;
        return this;
    }
    
    /**
     * The status of the incident. Possible statuses are &lt;code&gt;Open&lt;/code&gt; or &lt;code&gt;Resolved&lt;/code&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public UpdateIncidentRecordRequestBodyStatusEnum status;
    public UpdateIncidentRecordRequestBody withStatus(UpdateIncidentRecordRequestBodyStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * A longer description of what occurred during the incident.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    public String summary;
    public UpdateIncidentRecordRequestBody withSummary(String summary) {
        this.summary = summary;
        return this;
    }
    
    /**
     * A brief description of the incident.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public UpdateIncidentRecordRequestBody withTitle(String title) {
        this.title = title;
        return this;
    }
    
}
