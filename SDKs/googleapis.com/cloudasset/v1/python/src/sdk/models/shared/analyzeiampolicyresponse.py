"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import iampolicyanalysis as shared_iampolicyanalysis
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyzeIamPolicyResponse:
    r"""A response message for AssetService.AnalyzeIamPolicy."""
    
    fully_explored: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullyExplored'), 'exclude': lambda f: f is None }})
    r"""Represents whether all entries in the main_analysis and service_account_impersonation_analysis have been fully explored to answer the query in the request."""  
    main_analysis: Optional[shared_iampolicyanalysis.IamPolicyAnalysis] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mainAnalysis'), 'exclude': lambda f: f is None }})
    r"""An analysis message to group the query and results."""  
    service_account_impersonation_analysis: Optional[list[shared_iampolicyanalysis.IamPolicyAnalysis]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceAccountImpersonationAnalysis'), 'exclude': lambda f: f is None }})
    r"""The service account impersonation analysis if AnalyzeIamPolicyRequest.analyze_service_account_impersonation is enabled."""  
    