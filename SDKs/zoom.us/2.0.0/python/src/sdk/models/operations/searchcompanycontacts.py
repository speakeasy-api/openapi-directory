"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class SearchCompanyContactsRequest:
    
    search_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'search_key', 'style': 'form', 'explode': True }})
    r"""Provide the keyword - either first name, last name or email of the contact whom you have to search for."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records to be returned with a single API call."""  
    query_presence_status: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query_presence_status', 'style': 'form', 'explode': True }})
    r"""Set `query_presence_status` to `true` in order to include the presence status of a contact in the response."""  
    
class SearchCompanyContacts200ApplicationXMLContactsPresenceStatusEnum(str, Enum):
    r"""Presence status of the contact in Zoom Client. The value of this field can be one of the following:
    `Do_Not_Disturb`<br> `away`<br> `Available`<br> `Offline`
    """
    DO_NOT_DISTURB = 'Do_Not_Disturb'
    AWAY = 'Away'
    AVAILABLE = 'Available'
    OFFLINE = 'Offline'


@dataclasses.dataclass
class SearchCompanyContacts200ApplicationXMLContacts:
    
    dept: Optional[str] = dataclasses.field(default=None)
    r"""Department of the contact as provided in the user's Zoom profile."""  
    direct_numbers: Optional[list[str]] = dataclasses.field(default=None)
    r"""Direct Number(s) of a user who has Zoom Phone license assigned."""  
    email: Optional[str] = dataclasses.field(default=None)
    r"""Email address of the contact."""  
    extension_number: Optional[str] = dataclasses.field(default=None)
    r"""Extension Number of a user who has Zoom Phone license assigned."""  
    first_name: Optional[str] = dataclasses.field(default=None)
    r"""First name of the contact."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""User ID of the contact."""  
    im_group_id: Optional[str] = dataclasses.field(default=None)
    r"""Unique Identifier of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients."""  
    im_group_name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients."""  
    job_title: Optional[str] = dataclasses.field(default=None)
    r"""Department of the user as provided in the user's Zoom profile."""  
    last_name: Optional[str] = dataclasses.field(default=None)
    r"""Last name of the contact."""  
    location: Optional[str] = dataclasses.field(default=None)
    r"""Location of the user as provided in the user's Zoom profile."""  
    phone_number: Optional[str] = dataclasses.field(default=None)
    r"""Phone number of the user."""  
    presence_status: Optional[SearchCompanyContacts200ApplicationXMLContactsPresenceStatusEnum] = dataclasses.field(default=None)
    r"""Presence status of the contact in Zoom Client. The value of this field can be one of the following:
    `Do_Not_Disturb`<br> `away`<br> `Available`<br> `Offline`
    """  
    sip_phone_number: Optional[str] = dataclasses.field(default=None)
    r"""SIP Phone number of the user. Returned only if user has SIP phone enabled."""  
    

@dataclasses.dataclass
class SearchCompanyContacts200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>
    Contact returned successfully.
    """
    
    contacts: Optional[list[SearchCompanyContacts200ApplicationXMLContacts]] = dataclasses.field(default=None)  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned with a single API call. Default value is `1`."""  
    
class SearchCompanyContacts200ApplicationJSONContactsPresenceStatusEnum(str, Enum):
    r"""Presence status of the contact in Zoom Client. The value of this field can be one of the following:
    `Do_Not_Disturb`<br> `away`<br> `Available`<br> `Offline`
    """
    DO_NOT_DISTURB = 'Do_Not_Disturb'
    AWAY = 'Away'
    AVAILABLE = 'Available'
    OFFLINE = 'Offline'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchCompanyContacts200ApplicationJSONContacts:
    
    dept: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dept'), 'exclude': lambda f: f is None }})
    r"""Department of the contact as provided in the user's Zoom profile."""  
    direct_numbers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direct_numbers'), 'exclude': lambda f: f is None }})
    r"""Direct Number(s) of a user who has Zoom Phone license assigned."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email address of the contact."""  
    extension_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension_number'), 'exclude': lambda f: f is None }})
    r"""Extension Number of a user who has Zoom Phone license assigned."""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name'), 'exclude': lambda f: f is None }})
    r"""First name of the contact."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""User ID of the contact."""  
    im_group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('im_group_id'), 'exclude': lambda f: f is None }})
    r"""Unique Identifier of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients."""  
    im_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('im_group_name'), 'exclude': lambda f: f is None }})
    r"""Name of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients."""  
    job_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('job_title'), 'exclude': lambda f: f is None }})
    r"""Department of the user as provided in the user's Zoom profile."""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name'), 'exclude': lambda f: f is None }})
    r"""Last name of the contact."""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Location of the user as provided in the user's Zoom profile."""  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_number'), 'exclude': lambda f: f is None }})
    r"""Phone number of the user."""  
    presence_status: Optional[SearchCompanyContacts200ApplicationJSONContactsPresenceStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('presence_status'), 'exclude': lambda f: f is None }})
    r"""Presence status of the contact in Zoom Client. The value of this field can be one of the following:
    `Do_Not_Disturb`<br> `away`<br> `Available`<br> `Offline`
    """  
    sip_phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sip_phone_number'), 'exclude': lambda f: f is None }})
    r"""SIP Phone number of the user. Returned only if user has SIP phone enabled."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchCompanyContacts200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>
    Contact returned successfully.
    """
    
    contacts: Optional[list[SearchCompanyContacts200ApplicationJSONContacts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contacts'), 'exclude': lambda f: f is None }})  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned with a single API call. Default value is `1`."""  
    

@dataclasses.dataclass
class SearchCompanyContactsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    search_company_contacts_200_application_json_object: Optional[SearchCompanyContacts200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Contact returned successfully.
    """  
    