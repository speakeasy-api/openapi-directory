/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * A classifier that uses <code>grok</code> patterns.
 */
export class GrokClassifier extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Classification" })
  classification: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CreationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "CustomPatterns" })
  customPatterns?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "GrokPattern" })
  grokPattern: string;

  @SpeakeasyMetadata()
  @Expose({ name: "LastUpdated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdated?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Version" })
  version?: number;
}
