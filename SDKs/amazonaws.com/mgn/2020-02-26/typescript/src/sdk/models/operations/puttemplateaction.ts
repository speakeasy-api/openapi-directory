/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

/**
 * Template post migration custom action category.
 */
export enum PutTemplateActionRequestBodyCategoryEnum {
  DisasterRecovery = "DISASTER_RECOVERY",
  OperatingSystem = "OPERATING_SYSTEM",
  LicenseAndSubscription = "LICENSE_AND_SUBSCRIPTION",
  Validation = "VALIDATION",
  Observability = "OBSERVABILITY",
  Security = "SECURITY",
  Networking = "NETWORKING",
  Configuration = "CONFIGURATION",
  Backup = "BACKUP",
  Other = "OTHER",
}

export class PutTemplateActionRequestBody extends SpeakeasyBase {
  /**
   * Template post migration custom action ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "actionID" })
  actionID: string;

  /**
   * Template post migration custom action name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "actionName" })
  actionName: string;

  /**
   * Template post migration custom action active status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active?: boolean;

  /**
   * Template post migration custom action category.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: PutTemplateActionRequestBodyCategoryEnum;

  /**
   * Template post migration custom action description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Template post migration custom action document identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "documentIdentifier" })
  documentIdentifier: string;

  /**
   * Template post migration custom action document version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "documentVersion" })
  documentVersion?: string;

  /**
   * Template post migration custom action external parameters.
   */
  @SpeakeasyMetadata({ elemType: shared.SsmExternalParameter })
  @Expose({ name: "externalParameters" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.SsmExternalParameter> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.SsmExternalParameter);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  externalParameters?: Record<string, shared.SsmExternalParameter>;

  /**
   * Launch configuration template ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "launchConfigurationTemplateID" })
  launchConfigurationTemplateID: string;

  /**
   * Template post migration custom action must succeed for cutover.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mustSucceedForCutover" })
  mustSucceedForCutover?: boolean;

  /**
   * Operating system eligible for this template post migration custom action.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "operatingSystem" })
  operatingSystem?: string;

  /**
   * Template post migration custom action order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "order" })
  order: number;

  /**
   * Template post migration custom action parameters.
   */
  @SpeakeasyMetadata({
    elemType: shared.SsmParameterStoreParameter,
    elemDepth: 2,
  })
  @Expose({ name: "parameters" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.SsmParameterStoreParameter[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.SsmParameterStoreParameter);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  parameters?: Record<string, shared.SsmParameterStoreParameter[]>;

  /**
   * Template post migration custom action timeout in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeoutSeconds" })
  timeoutSeconds?: number;
}

export class PutTemplateActionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: PutTemplateActionRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class PutTemplateActionResponse extends SpeakeasyBase {
  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  templateActionDocument?: shared.TemplateActionDocument;

  /**
   * UninitializedAccountException
   */
  @SpeakeasyMetadata()
  uninitializedAccountException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
