"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Devices:
    r"""Device management"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_devices_id_(self, request: operations.DeleteDevicesIDRequest) -> operations.DeleteDevicesIDResponse:
        r"""Delete a Device"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDevicesIDRequest, base_url, '/devices/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDevicesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_devices(self, request: operations.GetDevicesRequest) -> operations.GetDevicesResponse:
        r"""Fetch a list of Devices
        Without any params, returns a list of the user's devices
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/devices'
        
        query_params = utils.get_query_params(operations.GetDevicesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDevicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Device]])
                res.devices = out
        elif http_res.status_code == 400:
            pass

        return res

    def post_devices(self, request: shared.Device) -> operations.PostDevicesResponse:
        r"""Create a Device"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/devices'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostDevicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Device])
                res.device = out

        return res

    def put_devices_id_(self, request: operations.PutDevicesIDRequest) -> operations.PutDevicesIDResponse:
        r"""Update a Device"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutDevicesIDRequest, base_url, '/devices/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "device", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutDevicesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Device])
                res.device = out

        return res

    def put_devices_id_accumulators(self, request: operations.PutDevicesIDAccumulatorsRequest) -> operations.PutDevicesIDAccumulatorsResponse:
        r"""Update total distance and hours of the Device"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutDevicesIDAccumulatorsRequest, base_url, '/devices/{id}/accumulators', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "device_accumulators", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutDevicesIDAccumulatorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    