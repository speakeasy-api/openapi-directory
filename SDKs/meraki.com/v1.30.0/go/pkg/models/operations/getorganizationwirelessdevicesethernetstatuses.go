// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetOrganizationWirelessDevicesEthernetStatusesPathParams struct {
	OrganizationID string `pathParam:"style=simple,explode=false,name=organizationId"`
}

type GetOrganizationWirelessDevicesEthernetStatusesQueryParams struct {
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	// A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]=N_12345678&networkIds[]=L_3456
	NetworkIds []string `queryParam:"style=form,explode=false,name=networkIds"`
	// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
}

type GetOrganizationWirelessDevicesEthernetStatusesRequest struct {
	PathParams  GetOrganizationWirelessDevicesEthernetStatusesPathParams
	QueryParams GetOrganizationWirelessDevicesEthernetStatusesQueryParams
}

// GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONAggregation - Aggregation details object
type GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONAggregation struct {
	// Link Aggregation enabled flag
	Enabled *bool `json:"enabled,omitempty"`
	// Link Aggregation speed
	Speed *int64 `json:"speed,omitempty"`
}

// GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONNetwork - Network details object
type GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONNetwork struct {
	// The network ID the AP is associated to
	ID *string `json:"id,omitempty"`
}

// GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPortsLinkNegotiation - Link negotiation details object for the port
type GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPortsLinkNegotiation struct {
	// The duplex mode of the port. Can be 'full' or 'half'
	Duplex *string `json:"duplex,omitempty"`
	// The speed of the port
	Speed *int64 `json:"speed,omitempty"`
}

// GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPortsPoe - PoE details object for the port
type GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPortsPoe struct {
	// The PoE Standard for the port. Can be '802.3at', '802.3af', '802.3bt', or null
	Standard *string `json:"standard,omitempty"`
}

type GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPorts struct {
	// Link negotiation details object for the port
	LinkNegotiation *GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPortsLinkNegotiation `json:"linkNegotiation,omitempty"`
	// Label of the port
	Name *string `json:"name,omitempty"`
	// PoE details object for the port
	Poe *GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPortsPoe `json:"poe,omitempty"`
}

// GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPowerAc - AC power details object
type GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPowerAc struct {
	// AC power connected
	IsConnected *bool `json:"isConnected,omitempty"`
}

// GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPowerPoe - PoE power details object
type GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPowerPoe struct {
	// PoE power connected
	IsConnected *bool `json:"isConnected,omitempty"`
}

// GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPower - Power details object
type GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPower struct {
	// AC power details object
	Ac *GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPowerAc `json:"ac,omitempty"`
	// The PoE power mode for the AP. Can be 'full' or 'low'
	Mode *string `json:"mode,omitempty"`
	// PoE power details object
	Poe *GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPowerPoe `json:"poe,omitempty"`
}

type GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSON struct {
	// Aggregation details object
	Aggregation *GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONAggregation `json:"aggregation,omitempty"`
	// The name of the AP
	Name *string `json:"name,omitempty"`
	// Network details object
	Network *GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONNetwork `json:"network,omitempty"`
	// List of port details
	Ports []GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPorts `json:"ports,omitempty"`
	// Power details object
	Power *GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONPower `json:"power,omitempty"`
	// The serial number of the AP
	Serial *string `json:"serial,omitempty"`
}

type GetOrganizationWirelessDevicesEthernetStatusesResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONObjects []GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSON
}
