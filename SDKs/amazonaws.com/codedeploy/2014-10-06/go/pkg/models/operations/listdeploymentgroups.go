// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListDeploymentGroupsXAmzTargetEnum
type ListDeploymentGroupsXAmzTargetEnum string

const (
	ListDeploymentGroupsXAmzTargetEnumCodeDeploy20141006ListDeploymentGroups ListDeploymentGroupsXAmzTargetEnum = "CodeDeploy_20141006.ListDeploymentGroups"
)

func (e ListDeploymentGroupsXAmzTargetEnum) ToPointer() *ListDeploymentGroupsXAmzTargetEnum {
	return &e
}

func (e *ListDeploymentGroupsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeDeploy_20141006.ListDeploymentGroups":
		*e = ListDeploymentGroupsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDeploymentGroupsXAmzTargetEnum: %v", v)
	}
}

type ListDeploymentGroupsRequest struct {
	ListDeploymentGroupsInput shared.ListDeploymentGroupsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm             *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                ListDeploymentGroupsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type ListDeploymentGroupsResponse struct {
	// ApplicationDoesNotExistException
	ApplicationDoesNotExistException interface{}
	// ApplicationNameRequiredException
	ApplicationNameRequiredException interface{}
	ContentType                      string
	// InvalidApplicationNameException
	InvalidApplicationNameException interface{}
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// Success
	ListDeploymentGroupsOutput *shared.ListDeploymentGroupsOutput
	StatusCode                 int
	RawResponse                *http.Response
}
