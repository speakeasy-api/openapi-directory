// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DependabotAlertDependencyScopeEnum - The execution scope of the vulnerable dependency.
type DependabotAlertDependencyScopeEnum string

const (
	DependabotAlertDependencyScopeEnumDevelopment DependabotAlertDependencyScopeEnum = "development"
	DependabotAlertDependencyScopeEnumRuntime     DependabotAlertDependencyScopeEnum = "runtime"
)

func (e DependabotAlertDependencyScopeEnum) ToPointer() *DependabotAlertDependencyScopeEnum {
	return &e
}

func (e *DependabotAlertDependencyScopeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "development":
		fallthrough
	case "runtime":
		*e = DependabotAlertDependencyScopeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DependabotAlertDependencyScopeEnum: %v", v)
	}
}

// DependabotAlertDependency - Details for the vulnerable dependency.
type DependabotAlertDependency struct {
	// The full path to the dependency manifest file, relative to the root of the repository.
	ManifestPath *string `json:"manifest_path,omitempty"`
	// Details for the vulnerable package.
	Package *DependabotAlertPackage `json:"package,omitempty"`
	// The execution scope of the vulnerable dependency.
	Scope *DependabotAlertDependencyScopeEnum `json:"scope,omitempty"`
}

// DependabotAlertDismissedReasonEnum - The reason that the alert was dismissed.
type DependabotAlertDismissedReasonEnum string

const (
	DependabotAlertDismissedReasonEnumFixStarted    DependabotAlertDismissedReasonEnum = "fix_started"
	DependabotAlertDismissedReasonEnumInaccurate    DependabotAlertDismissedReasonEnum = "inaccurate"
	DependabotAlertDismissedReasonEnumNoBandwidth   DependabotAlertDismissedReasonEnum = "no_bandwidth"
	DependabotAlertDismissedReasonEnumNotUsed       DependabotAlertDismissedReasonEnum = "not_used"
	DependabotAlertDismissedReasonEnumTolerableRisk DependabotAlertDismissedReasonEnum = "tolerable_risk"
)

func (e DependabotAlertDismissedReasonEnum) ToPointer() *DependabotAlertDismissedReasonEnum {
	return &e
}

func (e *DependabotAlertDismissedReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fix_started":
		fallthrough
	case "inaccurate":
		fallthrough
	case "no_bandwidth":
		fallthrough
	case "not_used":
		fallthrough
	case "tolerable_risk":
		*e = DependabotAlertDismissedReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DependabotAlertDismissedReasonEnum: %v", v)
	}
}

// DependabotAlertStateEnum - The state of the Dependabot alert.
type DependabotAlertStateEnum string

const (
	DependabotAlertStateEnumDismissed DependabotAlertStateEnum = "dismissed"
	DependabotAlertStateEnumFixed     DependabotAlertStateEnum = "fixed"
	DependabotAlertStateEnumOpen      DependabotAlertStateEnum = "open"
)

func (e DependabotAlertStateEnum) ToPointer() *DependabotAlertStateEnum {
	return &e
}

func (e *DependabotAlertStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dismissed":
		fallthrough
	case "fixed":
		fallthrough
	case "open":
		*e = DependabotAlertStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DependabotAlertStateEnum: %v", v)
	}
}

// DependabotAlert - A Dependabot alert.
type DependabotAlert struct {
	// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	CreatedAt time.Time `json:"created_at"`
	// Details for the vulnerable dependency.
	Dependency DependabotAlertDependency `json:"dependency"`
	// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	DismissedAt time.Time `json:"dismissed_at"`
	// A GitHub user.
	DismissedBy NullableSimpleUser `json:"dismissed_by"`
	// An optional comment associated with the alert's dismissal.
	DismissedComment string `json:"dismissed_comment"`
	// The reason that the alert was dismissed.
	DismissedReason DependabotAlertDismissedReasonEnum `json:"dismissed_reason"`
	// The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	FixedAt time.Time `json:"fixed_at"`
	// The GitHub URL of the alert resource.
	HTMLURL string `json:"html_url"`
	// The security alert number.
	Number int64 `json:"number"`
	// Details for the GitHub Security Advisory.
	SecurityAdvisory DependabotAlertSecurityAdvisory `json:"security_advisory"`
	// Details pertaining to one vulnerable version range for the advisory.
	SecurityVulnerability DependabotAlertSecurityVulnerability `json:"security_vulnerability"`
	// The state of the Dependabot alert.
	State DependabotAlertStateEnum `json:"state"`
	// The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	UpdatedAt time.Time `json:"updated_at"`
	// The REST API URL of the alert resource.
	URL string `json:"url"`
}
