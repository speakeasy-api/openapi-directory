/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  /**
   * No authentication endpoint. Returns latest exchange rates and some metadata.
   */
  "https://api.exchangerate-api.com/v4",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * Fetch the latest currency exchange rates via API. ExchangeRate-API is free and unlimited.
 *
 * @see {@link https://www.exchangerate-api.com/docs/documentation} - API Documentation
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * Returns latest exchange rates in parameter-supplied base currency.
   */
  getLatestBaseCurrency(
    req: operations.GetLatestBaseCurrencyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetLatestBaseCurrencyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetLatestBaseCurrencyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/latest/{base_currency}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetLatestBaseCurrencyResponse =
        new operations.GetLatestBaseCurrencyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getLatestBaseCurrency200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetLatestBaseCurrency200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getLatestBaseCurrency404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetLatestBaseCurrency404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
