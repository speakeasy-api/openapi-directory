<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Cards 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Block a card
     * 
     * Updates status of an existing card to block which prevents any transactions being carried out with that card.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BlockCardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BlockCardResponse
     */
	public function blockCard(
        \OpenAPI\OpenAPI\Models\Operations\BlockCardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BlockCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/cards/{cardId}/block', \OpenAPI\OpenAPI\Models\Operations\BlockCardRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BlockCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Create a new debit card.
     * 
     * You can create multiple debit cards which can be linked to your fire.com accounts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNewCardNewCard $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNewCardResponse
     */
	public function createNewCard(
        \OpenAPI\OpenAPI\Models\Operations\CreateNewCardNewCard $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNewCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/cards');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNewCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->newCardResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNewCardNewCardResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Card Transactions.
     * 
     * Returns a list of cards transactions related to your fire.com card.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListofCardTransactionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListofCardTransactionsResponse
     */
	public function getListofCardTransactions(
        \OpenAPI\OpenAPI\Models\Operations\GetListofCardTransactionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListofCardTransactionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/cards/{cardId}/transactions', \OpenAPI\OpenAPI\Models\Operations\GetListofCardTransactionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListofCardTransactionsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListofCardTransactionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cardTransactionsv1s = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetListofCardTransactionsCardTransactionsv1>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * View List of Cards.
     * 
     * Returns a list of cards related to your fire.com account.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListofCardsResponse
     */
	public function getListofCards(
    ): \OpenAPI\OpenAPI\Models\Operations\GetListofCardsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/cards');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListofCardsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cards = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetListofCardsCards', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Unblock a card
     * 
     * Updates status of an existing card to unblock which means that transactions can be carried out with that card.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnblockCardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnblockCardResponse
     */
	public function unblockCard(
        \OpenAPI\OpenAPI\Models\Operations\UnblockCardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnblockCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/cards/{cardId}/unblock', \OpenAPI\OpenAPI\Models\Operations\UnblockCardRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnblockCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
}