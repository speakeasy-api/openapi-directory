<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RolesByID 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete the role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesByIdRoleIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesByIdRoleIdResponse
     */
	public function deleteRealmRolesByIdRoleId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesByIdRoleIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesByIdRoleIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles-by-id/{role-id}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesByIdRoleIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesByIdRoleIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Remove a set of roles from the role’s composite
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesByIdRoleIdCompositesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesByIdRoleIdCompositesResponse
     */
	public function deleteRealmRolesByIdRoleIdComposites(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesByIdRoleIdCompositesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesByIdRoleIdCompositesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles-by-id/{role-id}/composites', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesByIdRoleIdCompositesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRolesByIdRoleIdCompositesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Get a specific role’s representation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdResponse
     */
	public function getRealmRolesByIdRoleId(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles-by-id/{role-id}', \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RoleRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get role’s children   Returns a set of role’s children provided the role is a composite.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesResponse
     */
	public function getRealmRolesByIdRoleIdComposites(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles-by-id/{role-id}/composites', \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get client-level roles for the client that are in the role’s composite
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesClientsClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesClientsClientResponse
     */
	public function getRealmRolesByIdRoleIdCompositesClientsClient(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesClientsClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesClientsClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles-by-id/{role-id}/composites/clients/{client}', \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesClientsClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesClientsClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get realm-level roles that are in the role’s composite
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesRealmResponse
     */
	public function getRealmRolesByIdRoleIdCompositesRealm(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles-by-id/{role-id}/composites/realm', \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdCompositesRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdManagementPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdManagementPermissionsResponse
     */
	public function getRealmRolesByIdRoleIdManagementPermissions(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdManagementPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdManagementPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles-by-id/{role-id}/management/permissions', \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdManagementPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmRolesByIdRoleIdManagementPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managementPermissionReference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagementPermissionReference', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Make the role a composite role by associating some child roles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesByIdRoleIdCompositesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesByIdRoleIdCompositesResponse
     */
	public function postRealmRolesByIdRoleIdComposites(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesByIdRoleIdCompositesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesByIdRoleIdCompositesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles-by-id/{role-id}/composites', \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesByIdRoleIdCompositesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmRolesByIdRoleIdCompositesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Update the role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesByIdRoleIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesByIdRoleIdResponse
     */
	public function putRealmRolesByIdRoleId(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesByIdRoleIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesByIdRoleIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles-by-id/{role-id}', \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesByIdRoleIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "roleRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesByIdRoleIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesByIdRoleIdManagementPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesByIdRoleIdManagementPermissionsResponse
     */
	public function putRealmRolesByIdRoleIdManagementPermissions(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesByIdRoleIdManagementPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesByIdRoleIdManagementPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/roles-by-id/{role-id}/management/permissions', \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesByIdRoleIdManagementPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "managementPermissionReference", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmRolesByIdRoleIdManagementPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managementPermissionReference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagementPermissionReference', 'json');
            }
        }

        return $response;
    }
}