/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * In Probely, a target is what defines what is being scanned.
 *
 * @remarks
 * Connected to a target there are two other objects: a site and a list of
 * assets.
 *
 * The site is the where the scan starts and will usually be the main
 * entry point for your web application.
 *
 * As things are today, a single URL is not enough to describe all of the
 * resources an application uses.
 * For example, a modern single page web application might load the main
 * page from one domain and make AJAX requests to one or more other domains.
 * This where assets come in, they are used to add extra domains that
 * our scanner should follow.
 *
 */
export class Targets {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete target
   */
  deleteTargetsId(
    req: operations.DeleteTargetsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteTargetsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteTargetsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/targets/{id}/", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteTargetsIdResponse =
        new operations.DeleteTargetsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteTargetsId401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteTargetsId401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteTargetsId403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteTargetsId403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteTargetsId404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteTargetsId404ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List targets
   */
  getTargets(
    req: operations.GetTargetsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/targets/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsResponse =
        new operations.GetTargetsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargets200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetTargets200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargets401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetTargets401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargets404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetTargets404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargets500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetTargets500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve target
   */
  getTargetsId(
    req: operations.GetTargetsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/targets/{id}/", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsIdResponse =
        new operations.GetTargetsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.target = utils.objectToClass(httpRes?.data, shared.Target);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsId401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetTargetsId401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsId404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetTargetsId404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsId500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetTargetsId500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Partial update target
   */
  patchTargetsId(
    req: operations.PatchTargetsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchTargetsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchTargetsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/targets/{id}/", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "targetInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchTargetsIdResponse =
        new operations.PatchTargetsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.target = utils.objectToClass(httpRes?.data, shared.Target);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsId400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PatchTargetsId400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsId401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PatchTargetsId401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsId403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PatchTargetsId403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsId404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PatchTargetsId404ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create target
   */
  postTargets(
    req: shared.TargetInput,
    config?: AxiosRequestConfig
  ): Promise<operations.PostTargetsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.TargetInput(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/targets/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostTargetsResponse =
        new operations.PostTargetsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.target = utils.objectToClass(httpRes?.data, shared.Target);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargets400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostTargets400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargets401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostTargets401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargets403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostTargets403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargets500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostTargets500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update target
   */
  putTargetsId(
    req: operations.PutTargetsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutTargetsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutTargetsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/targets/{id}/", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "targetInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutTargetsIdResponse =
        new operations.PutTargetsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.target = utils.objectToClass(httpRes?.data, shared.Target);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsId400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PutTargetsId400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsId401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PutTargetsId401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsId403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PutTargetsId403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsId404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PutTargetsId404ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
