"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import conflictmetadata as shared_conflictmetadata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetMergeConflictsOutput:
    r"""Success"""
    
    conflict_metadata_list: list[shared_conflictmetadata.ConflictMetadata] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conflictMetadataList') }})  
    destination_commit_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationCommitId') }})  
    mergeable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mergeable') }})  
    source_commit_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceCommitId') }})  
    base_commit_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('baseCommitId'), 'exclude': lambda f: f is None }})  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextToken'), 'exclude': lambda f: f is None }})  
    