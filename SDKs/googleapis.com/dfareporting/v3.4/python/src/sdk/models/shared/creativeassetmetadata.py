"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import clicktag as shared_clicktag
from ..shared import creativeassetid as shared_creativeassetid
from ..shared import creativecustomevent as shared_creativecustomevent
from ..shared import dimensionvalue as shared_dimensionvalue
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreativeAssetMetadataDetectedFeaturesEnum(str, Enum):
    CSS_FONT_FACE = 'CSS_FONT_FACE'
    CSS_BACKGROUND_SIZE = 'CSS_BACKGROUND_SIZE'
    CSS_BORDER_IMAGE = 'CSS_BORDER_IMAGE'
    CSS_BORDER_RADIUS = 'CSS_BORDER_RADIUS'
    CSS_BOX_SHADOW = 'CSS_BOX_SHADOW'
    CSS_FLEX_BOX = 'CSS_FLEX_BOX'
    CSS_HSLA = 'CSS_HSLA'
    CSS_MULTIPLE_BGS = 'CSS_MULTIPLE_BGS'
    CSS_OPACITY = 'CSS_OPACITY'
    CSS_RGBA = 'CSS_RGBA'
    CSS_TEXT_SHADOW = 'CSS_TEXT_SHADOW'
    CSS_ANIMATIONS = 'CSS_ANIMATIONS'
    CSS_COLUMNS = 'CSS_COLUMNS'
    CSS_GENERATED_CONTENT = 'CSS_GENERATED_CONTENT'
    CSS_GRADIENTS = 'CSS_GRADIENTS'
    CSS_REFLECTIONS = 'CSS_REFLECTIONS'
    CSS_TRANSFORMS = 'CSS_TRANSFORMS'
    CSS_TRANSFORMS3_D = 'CSS_TRANSFORMS3D'
    CSS_TRANSITIONS = 'CSS_TRANSITIONS'
    APPLICATION_CACHE = 'APPLICATION_CACHE'
    CANVAS = 'CANVAS'
    CANVAS_TEXT = 'CANVAS_TEXT'
    DRAG_AND_DROP = 'DRAG_AND_DROP'
    HASH_CHANGE = 'HASH_CHANGE'
    HISTORY = 'HISTORY'
    AUDIO = 'AUDIO'
    VIDEO = 'VIDEO'
    INDEXED_DB = 'INDEXED_DB'
    INPUT_ATTR_AUTOCOMPLETE = 'INPUT_ATTR_AUTOCOMPLETE'
    INPUT_ATTR_AUTOFOCUS = 'INPUT_ATTR_AUTOFOCUS'
    INPUT_ATTR_LIST = 'INPUT_ATTR_LIST'
    INPUT_ATTR_PLACEHOLDER = 'INPUT_ATTR_PLACEHOLDER'
    INPUT_ATTR_MAX = 'INPUT_ATTR_MAX'
    INPUT_ATTR_MIN = 'INPUT_ATTR_MIN'
    INPUT_ATTR_MULTIPLE = 'INPUT_ATTR_MULTIPLE'
    INPUT_ATTR_PATTERN = 'INPUT_ATTR_PATTERN'
    INPUT_ATTR_REQUIRED = 'INPUT_ATTR_REQUIRED'
    INPUT_ATTR_STEP = 'INPUT_ATTR_STEP'
    INPUT_TYPE_SEARCH = 'INPUT_TYPE_SEARCH'
    INPUT_TYPE_TEL = 'INPUT_TYPE_TEL'
    INPUT_TYPE_URL = 'INPUT_TYPE_URL'
    INPUT_TYPE_EMAIL = 'INPUT_TYPE_EMAIL'
    INPUT_TYPE_DATETIME = 'INPUT_TYPE_DATETIME'
    INPUT_TYPE_DATE = 'INPUT_TYPE_DATE'
    INPUT_TYPE_MONTH = 'INPUT_TYPE_MONTH'
    INPUT_TYPE_WEEK = 'INPUT_TYPE_WEEK'
    INPUT_TYPE_TIME = 'INPUT_TYPE_TIME'
    INPUT_TYPE_DATETIME_LOCAL = 'INPUT_TYPE_DATETIME_LOCAL'
    INPUT_TYPE_NUMBER = 'INPUT_TYPE_NUMBER'
    INPUT_TYPE_RANGE = 'INPUT_TYPE_RANGE'
    INPUT_TYPE_COLOR = 'INPUT_TYPE_COLOR'
    LOCAL_STORAGE = 'LOCAL_STORAGE'
    POST_MESSAGE = 'POST_MESSAGE'
    SESSION_STORAGE = 'SESSION_STORAGE'
    WEB_SOCKETS = 'WEB_SOCKETS'
    WEB_SQL_DATABASE = 'WEB_SQL_DATABASE'
    WEB_WORKERS = 'WEB_WORKERS'
    GEO_LOCATION = 'GEO_LOCATION'
    INLINE_SVG = 'INLINE_SVG'
    SMIL = 'SMIL'
    SVG_HREF = 'SVG_HREF'
    SVG_CLIP_PATHS = 'SVG_CLIP_PATHS'
    TOUCH = 'TOUCH'
    WEBGL = 'WEBGL'
    SVG_FILTERS = 'SVG_FILTERS'
    SVG_FE_IMAGE = 'SVG_FE_IMAGE'

class CreativeAssetMetadataWarnedValidationRulesEnum(str, Enum):
    CLICK_TAG_NON_TOP_LEVEL = 'CLICK_TAG_NON_TOP_LEVEL'
    CLICK_TAG_MISSING = 'CLICK_TAG_MISSING'
    CLICK_TAG_MORE_THAN_ONE = 'CLICK_TAG_MORE_THAN_ONE'
    CLICK_TAG_INVALID = 'CLICK_TAG_INVALID'
    ORPHANED_ASSET = 'ORPHANED_ASSET'
    PRIMARY_HTML_MISSING = 'PRIMARY_HTML_MISSING'
    EXTERNAL_FILE_REFERENCED = 'EXTERNAL_FILE_REFERENCED'
    MRAID_REFERENCED = 'MRAID_REFERENCED'
    ADMOB_REFERENCED = 'ADMOB_REFERENCED'
    FILE_TYPE_INVALID = 'FILE_TYPE_INVALID'
    ZIP_INVALID = 'ZIP_INVALID'
    LINKED_FILE_NOT_FOUND = 'LINKED_FILE_NOT_FOUND'
    MAX_FLASH_VERSION_11 = 'MAX_FLASH_VERSION_11'
    NOT_SSL_COMPLIANT = 'NOT_SSL_COMPLIANT'
    FILE_DETAIL_EMPTY = 'FILE_DETAIL_EMPTY'
    ASSET_INVALID = 'ASSET_INVALID'
    GWD_PROPERTIES_INVALID = 'GWD_PROPERTIES_INVALID'
    ENABLER_UNSUPPORTED_METHOD_DCM = 'ENABLER_UNSUPPORTED_METHOD_DCM'
    ASSET_FORMAT_UNSUPPORTED_DCM = 'ASSET_FORMAT_UNSUPPORTED_DCM'
    COMPONENT_UNSUPPORTED_DCM = 'COMPONENT_UNSUPPORTED_DCM'
    HTML5_FEATURE_UNSUPPORTED = 'HTML5_FEATURE_UNSUPPORTED'
    CLICK_TAG_IN_GWD = 'CLICK_TAG_IN_GWD'
    CLICK_TAG_HARD_CODED = 'CLICK_TAG_HARD_CODED'
    SVG_INVALID = 'SVG_INVALID'
    CLICK_TAG_IN_RICH_MEDIA = 'CLICK_TAG_IN_RICH_MEDIA'
    MISSING_ENABLER_REFERENCE = 'MISSING_ENABLER_REFERENCE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreativeAssetMetadata:
    r"""CreativeAssets contains properties of a creative asset file which will be uploaded or has already been uploaded. Refer to the creative sample code for how to upload assets and insert a creative."""
    
    asset_identifier: Optional[shared_creativeassetid.CreativeAssetID] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetIdentifier'), 'exclude': lambda f: f is None }})
    r"""Creative Asset ID."""  
    click_tags: Optional[list[shared_clicktag.ClickTag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickTags'), 'exclude': lambda f: f is None }})
    r"""List of detected click tags for assets. This is a read-only, auto-generated field. This field is empty for a rich media asset."""  
    counter_custom_events: Optional[list[shared_creativecustomevent.CreativeCustomEvent]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('counterCustomEvents'), 'exclude': lambda f: f is None }})
    r"""List of counter events configured for the asset. This is a read-only, auto-generated field and only applicable to a rich media asset."""  
    detected_features: Optional[list[CreativeAssetMetadataDetectedFeaturesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectedFeatures'), 'exclude': lambda f: f is None }})
    r"""List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field."""  
    exit_custom_events: Optional[list[shared_creativecustomevent.CreativeCustomEvent]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exitCustomEvents'), 'exclude': lambda f: f is None }})
    r"""List of exit events configured for the asset. This is a read-only, auto-generated field and only applicable to a rich media asset."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Numeric ID of the asset. This is a read-only, auto-generated field."""  
    id_dimension_value: Optional[shared_dimensionvalue.DimensionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idDimensionValue'), 'exclude': lambda f: f is None }})
    r"""Represents a DimensionValue resource."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"dfareporting#creativeAssetMetadata\\"."""  
    rich_media: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('richMedia'), 'exclude': lambda f: f is None }})
    r"""True if the uploaded asset is a rich media asset. This is a read-only, auto-generated field."""  
    timer_custom_events: Optional[list[shared_creativecustomevent.CreativeCustomEvent]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timerCustomEvents'), 'exclude': lambda f: f is None }})
    r"""List of timer events configured for the asset. This is a read-only, auto-generated field and only applicable to a rich media asset."""  
    warned_validation_rules: Optional[list[CreativeAssetMetadataWarnedValidationRulesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warnedValidationRules'), 'exclude': lambda f: f is None }})
    r"""Rules validated during code generation that generated a warning. This is a read-only, auto-generated field. Possible values are: - \\"ADMOB_REFERENCED\\" - \\"ASSET_FORMAT_UNSUPPORTED_DCM\\" - \\"ASSET_INVALID\\" - \\"CLICK_TAG_HARD_CODED\\" - \\"CLICK_TAG_INVALID\\" - \\"CLICK_TAG_IN_GWD\\" - \\"CLICK_TAG_MISSING\\" - \\"CLICK_TAG_MORE_THAN_ONE\\" - \\"CLICK_TAG_NON_TOP_LEVEL\\" - \\"COMPONENT_UNSUPPORTED_DCM\\" - \\"ENABLER_UNSUPPORTED_METHOD_DCM\\" - \\"EXTERNAL_FILE_REFERENCED\\" - \\"FILE_DETAIL_EMPTY\\" - \\"FILE_TYPE_INVALID\\" - \\"GWD_PROPERTIES_INVALID\\" - \\"HTML5_FEATURE_UNSUPPORTED\\" - \\"LINKED_FILE_NOT_FOUND\\" - \\"MAX_FLASH_VERSION_11\\" - \\"MRAID_REFERENCED\\" - \\"NOT_SSL_COMPLIANT\\" - \\"ORPHANED_ASSET\\" - \\"PRIMARY_HTML_MISSING\\" - \\"SVG_INVALID\\" - \\"ZIP_INVALID\\" """  
    