"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import areaofinterest as shared_areaofinterest
from ..shared import propertyfilters as shared_propertyfilters
from ..shared import searchrasterdatacollectionoutput as shared_searchrasterdatacollectionoutput
from ..shared import timerangefilterinput as shared_timerangefilterinput
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchRasterDataCollectionRequestBodyRasterDataCollectionQuery:
    r"""This is a RasterDataCollectionQueryInput containing AreaOfInterest, Time Range filter and Property filters."""
    
    area_of_interest: Optional[shared_areaofinterest.AreaOfInterest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AreaOfInterest'), 'exclude': lambda f: f is None }})  
    band_filter: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BandFilter'), 'exclude': lambda f: f is None }})  
    property_filters: Optional[shared_propertyfilters.PropertyFilters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PropertyFilters'), 'exclude': lambda f: f is None }})  
    time_range_filter: Optional[shared_timerangefilterinput.TimeRangeFilterInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeRangeFilter'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchRasterDataCollectionRequestBody:
    
    arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Arn') }})
    r"""The Amazon Resource Name (ARN) of the raster data collection."""  
    raster_data_collection_query: SearchRasterDataCollectionRequestBodyRasterDataCollectionQuery = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RasterDataCollectionQuery') }})
    r"""This is a RasterDataCollectionQueryInput containing AreaOfInterest, Time Range filter and Property filters."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextToken'), 'exclude': lambda f: f is None }})
    r"""If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results."""  
    

@dataclasses.dataclass
class SearchRasterDataCollectionRequest:
    
    request_body: SearchRasterDataCollectionRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})
    r"""Pagination token"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class SearchRasterDataCollectionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    search_raster_data_collection_output: Optional[shared_searchrasterdatacollectionoutput.SearchRasterDataCollectionOutput] = dataclasses.field(default=None)
    r"""Success"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    