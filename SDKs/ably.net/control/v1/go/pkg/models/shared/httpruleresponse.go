// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type HTTPRuleResponseRuleTypeEnum string

const (
	HTTPRuleResponseRuleTypeEnumHTTP HTTPRuleResponseRuleTypeEnum = "http"
)

func (e HTTPRuleResponseRuleTypeEnum) ToPointer() *HTTPRuleResponseRuleTypeEnum {
	return &e
}

func (e *HTTPRuleResponseRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		*e = HTTPRuleResponseRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HTTPRuleResponseRuleTypeEnum: %v", v)
	}
}

type HTTPRuleResponseTargetHeaders struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

type HTTPRuleResponseTarget struct {
	Enveloped    *bool                           `json:"enveloped,omitempty"`
	Format       string                          `json:"format"`
	Headers      []HTTPRuleResponseTargetHeaders `json:"headers,omitempty"`
	SigningKeyID *string                         `json:"signingKeyId,omitempty"`
	URL          string                          `json:"url"`
}

type HTTPRuleResponse struct {
	Links       map[string]interface{}       `json:"_links,omitempty"`
	AppID       *string                      `json:"appId,omitempty"`
	Created     *float64                     `json:"created,omitempty"`
	ID          *string                      `json:"id,omitempty"`
	Modified    *float64                     `json:"modified,omitempty"`
	RequestMode string                       `json:"requestMode"`
	RuleType    HTTPRuleResponseRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                   `json:"source"`
	Status      *string                      `json:"status,omitempty"`
	Target      HTTPRuleResponseTarget       `json:"target"`
	Version     *string                      `json:"version,omitempty"`
}
