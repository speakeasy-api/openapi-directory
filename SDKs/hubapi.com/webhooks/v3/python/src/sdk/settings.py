"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Settings:
    r"""Operations to manage app-level webhook settings."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_webhooks_v3_app_id_settings_clear(self, request: operations.DeleteWebhooksV3AppIDSettingsClearRequest, security: operations.DeleteWebhooksV3AppIDSettingsClearSecurity) -> operations.DeleteWebhooksV3AppIDSettingsClearResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteWebhooksV3AppIDSettingsClearRequest, base_url, '/webhooks/v3/{appId}/settings', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWebhooksV3AppIDSettingsClearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_webhooks_v3_app_id_settings_get_all(self, request: operations.GetWebhooksV3AppIDSettingsGetAllRequest, security: operations.GetWebhooksV3AppIDSettingsGetAllSecurity) -> operations.GetWebhooksV3AppIDSettingsGetAllResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWebhooksV3AppIDSettingsGetAllRequest, base_url, '/webhooks/v3/{appId}/settings', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWebhooksV3AppIDSettingsGetAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SettingsResponse])
                res.settings_response = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def put_webhooks_v3_app_id_settings_configure(self, request: operations.PutWebhooksV3AppIDSettingsConfigureRequest, security: operations.PutWebhooksV3AppIDSettingsConfigureSecurity) -> operations.PutWebhooksV3AppIDSettingsConfigureResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutWebhooksV3AppIDSettingsConfigureRequest, base_url, '/webhooks/v3/{appId}/settings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "settings_change_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutWebhooksV3AppIDSettingsConfigureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SettingsResponse])
                res.settings_response = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    