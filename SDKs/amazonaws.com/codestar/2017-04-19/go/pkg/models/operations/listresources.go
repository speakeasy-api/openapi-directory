// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListResourcesXAmzTargetEnum
type ListResourcesXAmzTargetEnum string

const (
	ListResourcesXAmzTargetEnumCodeStar20170419ListResources ListResourcesXAmzTargetEnum = "CodeStar_20170419.ListResources"
)

func (e ListResourcesXAmzTargetEnum) ToPointer() *ListResourcesXAmzTargetEnum {
	return &e
}

func (e *ListResourcesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeStar_20170419.ListResources":
		*e = ListResourcesXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListResourcesXAmzTargetEnum: %v", v)
	}
}

type ListResourcesRequest struct {
	ListResourcesRequest shared.ListResourcesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm        *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget           ListResourcesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListResourcesResponse struct {
	ContentType string
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// Success
	ListResourcesResult *shared.ListResourcesResult
	// ProjectNotFoundException
	ProjectNotFoundException interface{}
	StatusCode               int
	RawResponse              *http.Response
	// ValidationException
	ValidationException interface{}
}
