"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class PersonStages:
    r"""Person Stage Management"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_v2_person_stages_id_json(self, request: operations.DeleteV2PersonStagesIDJSONRequest) -> operations.DeleteV2PersonStagesIDJSONResponse:
        r"""Delete an person stage
        Deletes a person stage. This operation is not reversible without contacting support.
        This operation can be called multiple times successfully.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteV2PersonStagesIDJSONRequest, base_url, '/v2/person_stages/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteV2PersonStagesIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_v2_person_stages_json(self, request: operations.GetV2PersonStagesJSONRequest) -> operations.GetV2PersonStagesJSONResponse:
        r"""List person stages
        Fetches multiple person stage records. The records can be filtered, paged, and sorted according to
        the respective parameters.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/person_stages.json'
        
        query_params = utils.get_query_params(operations.GetV2PersonStagesJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2PersonStagesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_v2_person_stages_id_json(self, request: operations.GetV2PersonStagesIDJSONRequest) -> operations.GetV2PersonStagesIDJSONResponse:
        r"""Fetch a person stage
        Fetches a person stage, by ID only.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2PersonStagesIDJSONRequest, base_url, '/v2/person_stages/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2PersonStagesIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_v2_person_stages_json(self, request: operations.PostV2PersonStagesJSONRequestBody) -> operations.PostV2PersonStagesJSONResponse:
        r"""Create a person stage
        Creates a person stage.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/person_stages.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV2PersonStagesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def put_v2_person_stages_id_json(self, request: operations.PutV2PersonStagesIDJSONRequest) -> operations.PutV2PersonStagesIDJSONResponse:
        r"""Update a person stage
        Updates a person stage.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutV2PersonStagesIDJSONRequest, base_url, '/v2/person_stages/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutV2PersonStagesIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    