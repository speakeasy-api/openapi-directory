<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class StoragePools 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of storage pools.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsAggregatedListResponse
     */
	public function computeStoragePoolsAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/storagePools', \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storagePoolAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StoragePoolAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified storage pool. Deleting a storagePool removes its data permanently and is irreversible. However, deleting a storagePool does not delete any snapshots previously made from the storagePool. You must separately delete snapshots.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsDeleteResponse
     */
	public function computeStoragePoolsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/storagePools/{storagePool}', \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a specified storage pool. Gets a list of available storage pools by making a list() request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetResponse
     */
	public function computeStoragePoolsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/storagePools/{storagePool}', \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storagePool = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StoragePool', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetIamPolicyResponse
     */
	public function computeStoragePoolsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/storagePools/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a storage pool in the specified project using the data in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsInsertResponse
     */
	public function computeStoragePoolsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/storagePools', \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "storagePool", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of storage pools contained within the specified zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsListResponse
     */
	public function computeStoragePoolsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/storagePools', \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storagePoolList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StoragePoolList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetIamPolicyResponse
     */
	public function computeStoragePoolsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/storagePools/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "zoneSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the labels on a storage pools. To learn more about labels, read the Labeling Resources documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetLabelsResponse
     */
	public function computeStoragePoolsSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/storagePools/{resource}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "zoneSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsTestIamPermissionsResponse
     */
	public function computeStoragePoolsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/storagePools/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified storagePool with the data included in the request. The update is performed only on selected fields included as part of update-mask. Only the following fields can be modified: size_tb and provisioned_iops.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsUpdateResponse
     */
	public function computeStoragePoolsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/storagePools/{storagePool}', \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "storagePool1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeStoragePoolsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}