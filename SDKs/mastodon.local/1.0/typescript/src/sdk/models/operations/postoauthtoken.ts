/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class PostOauthTokenRequestBody extends SpeakeasyBase {
  /**
   * Client ID, obtained during app registration
   */
  @SpeakeasyMetadata()
  clientId: string;

  /**
   * Client secret, obtained during app registration
   */
  @SpeakeasyMetadata()
  clientSecret: string;

  /**
   * A user authorization code, obtained via /oauth/authorize
   */
  @SpeakeasyMetadata()
  code?: string;

  /**
   * Set equal to authorization_code if code is provided in order to gain user-level access. Otherwise, set equal to client_credentials to obtain app-level access only.
   */
  @SpeakeasyMetadata()
  grantType: string;

  /**
   * Set a URI to redirect the user to. If this parameter is set to urn:ietf:wg:oauth:2.0:oob then the token will be shown instead. Must match one of the redirect URIs declared during app registration.
   */
  @SpeakeasyMetadata()
  redirectUri: string;

  /**
   * List of requested OAuth scopes, separated by spaces. Must be a subset of scopes declared during app registration. If not provided, defaults to read.
   */
  @SpeakeasyMetadata()
  scopes?: string;
}

/**
 * Store this access_token for later use with auth-required methods. The token should be passed as an HTTP Authorization header when making API calls, with the value Bearer access_token
 */
export class PostOauthToken200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "access_token" })
  accessToken?: string;

  /**
   * UNIX timestamp
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "scope" })
  scope?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "token_type" })
  tokenType?: string;
}

export class PostOauthTokenResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * If you try to request a scope that was not included when registering the app, the request will fail.
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Store this access_token for later use with auth-required methods. The token should be passed as an HTTP Authorization header when making API calls, with the value Bearer access_token
   */
  @SpeakeasyMetadata()
  postOauthToken200ApplicationJSONObject?: PostOauthToken200ApplicationJSON;
}
