// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GamesScoresListWindowSecurity struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

// GamesScoresListWindowCollectionEnum - The collection of scores you're requesting.
type GamesScoresListWindowCollectionEnum string

const (
	GamesScoresListWindowCollectionEnumScoreCollectionUnspecified GamesScoresListWindowCollectionEnum = "SCORE_COLLECTION_UNSPECIFIED"
	GamesScoresListWindowCollectionEnumPublic                     GamesScoresListWindowCollectionEnum = "PUBLIC"
	GamesScoresListWindowCollectionEnumSocial                     GamesScoresListWindowCollectionEnum = "SOCIAL"
	GamesScoresListWindowCollectionEnumFriends                    GamesScoresListWindowCollectionEnum = "FRIENDS"
)

func (e *GamesScoresListWindowCollectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SCORE_COLLECTION_UNSPECIFIED":
		fallthrough
	case "PUBLIC":
		fallthrough
	case "SOCIAL":
		fallthrough
	case "FRIENDS":
		*e = GamesScoresListWindowCollectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GamesScoresListWindowCollectionEnum: %s", s)
	}
}

type GamesScoresListWindowPathParams struct {
	// The collection of scores you're requesting.
	Collection GamesScoresListWindowCollectionEnum `pathParam:"style=simple,explode=false,name=collection"`
	// The ID of the leaderboard.
	LeaderboardID string `pathParam:"style=simple,explode=false,name=leaderboardId"`
}

// GamesScoresListWindowTimeSpanEnum - The time span for the scores and ranks you're requesting.
type GamesScoresListWindowTimeSpanEnum string

const (
	GamesScoresListWindowTimeSpanEnumScoreTimeSpanUnspecified GamesScoresListWindowTimeSpanEnum = "SCORE_TIME_SPAN_UNSPECIFIED"
	GamesScoresListWindowTimeSpanEnumAllTime                  GamesScoresListWindowTimeSpanEnum = "ALL_TIME"
	GamesScoresListWindowTimeSpanEnumWeekly                   GamesScoresListWindowTimeSpanEnum = "WEEKLY"
	GamesScoresListWindowTimeSpanEnumDaily                    GamesScoresListWindowTimeSpanEnum = "DAILY"
)

func (e *GamesScoresListWindowTimeSpanEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SCORE_TIME_SPAN_UNSPECIFIED":
		fallthrough
	case "ALL_TIME":
		fallthrough
	case "WEEKLY":
		fallthrough
	case "DAILY":
		*e = GamesScoresListWindowTimeSpanEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GamesScoresListWindowTimeSpanEnum: %s", s)
	}
}

type GamesScoresListWindowQueryParams struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// The preferred language to use for strings returned by this method.
	Language *string `queryParam:"style=form,explode=true,name=language"`
	// The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified `maxResults`.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// The token returned by the previous request.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// The preferred number of scores to return above the player's score. More scores may be returned if the player is at the bottom of the leaderboard; fewer may be returned if the player is at the top. Must be less than or equal to maxResults.
	ResultsAbove *int64 `queryParam:"style=form,explode=true,name=resultsAbove"`
	// True if the top scores should be returned when the player is not in the leaderboard. Defaults to true.
	ReturnTopIfAbsent *bool `queryParam:"style=form,explode=true,name=returnTopIfAbsent"`
	// The time span for the scores and ranks you're requesting.
	TimeSpan GamesScoresListWindowTimeSpanEnum `queryParam:"style=form,explode=true,name=timeSpan"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type GamesScoresListWindowRequest struct {
	PathParams  GamesScoresListWindowPathParams
	QueryParams GamesScoresListWindowQueryParams
	Security    GamesScoresListWindowSecurity
}

type GamesScoresListWindowResponse struct {
	ContentType string
	// Successful response
	LeaderboardScores *shared.LeaderboardScores
	StatusCode        int
	RawResponse       *http.Response
}
