/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Category - Success
 */
public class Category {
    /**
     * The category's child categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("children")
    public Category[] children;
    public Category withChildren(Category[] children) {
        this.children = children;
        return this;
    }
    
    /**
     * The colour for the category.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("colour")
    public String colour;
    public Category withColour(String colour) {
        this.colour = colour;
        return this;
    }
    
    /**
     * When the category was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;
    public Category withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The unique identifier of the category.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public Category withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Whether the category is a bill category. A bill category is when budgeted amounts are normally spent at once, instead of spread across a budgeting period. This category will be included in the bill reminder email when set to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_bill")
    public Boolean isBill;
    public Category withIsBill(Boolean isBill) {
        this.isBill = isBill;
        return this;
    }
    
    /**
     * Whether this category has been marked as a transfer category.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_transfer")
    public Boolean isTransfer;
    public Category withIsTransfer(Boolean isTransfer) {
        this.isTransfer = isTransfer;
        return this;
    }
    
    /**
     * The unique identifier of the parent category of this category, or null if this category has no parent (i.e. is a top-level category)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_id")
    public Long parentId;
    public Category withParentId(Long parentId) {
        this.parentId = parentId;
        return this;
    }
    
    /**
     * How the category's refunds or deductions should be reported on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refund_behaviour")
    public CategoryRefundBehaviourEnum refundBehaviour;
    public Category withRefundBehaviour(CategoryRefundBehaviourEnum refundBehaviour) {
        this.refundBehaviour = refundBehaviour;
        return this;
    }
    
    /**
     * Whether the category's budget is rolled up into its parent category, if a parent category is present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roll_up")
    public Boolean rollUp;
    public Category withRollUp(Boolean rollUp) {
        this.rollUp = rollUp;
        return this;
    }
    
    /**
     * The title of the category.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public Category withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * When the category was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public String updatedAt;
    public Category withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
