/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://proxy.twilio.com",
	};
    /**
	 * CREATE_MESSAGE_INTERACTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_MESSAGE_INTERACTION_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * CREATE_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_PARTICIPANT_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * CREATE_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_PHONE_NUMBER_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * CREATE_SESSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SESSION_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * CREATE_SHORT_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SHORT_CODE_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * DELETE_INTERACTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_INTERACTION_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * DELETE_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_PARTICIPANT_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * DELETE_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_PHONE_NUMBER_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * DELETE_SESSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SESSION_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * DELETE_SHORT_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SHORT_CODE_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * FETCH_INTERACTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_INTERACTION_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * FETCH_MESSAGE_INTERACTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_MESSAGE_INTERACTION_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * FETCH_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_PARTICIPANT_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * FETCH_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_PHONE_NUMBER_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * FETCH_SESSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SESSION_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * FETCH_SHORT_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SHORT_CODE_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * LIST_INTERACTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INTERACTION_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * LIST_MESSAGE_INTERACTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_MESSAGE_INTERACTION_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * LIST_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_PARTICIPANT_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * LIST_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_PHONE_NUMBER_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * LIST_SESSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SESSION_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * LIST_SHORT_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SHORT_CODE_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * UPDATE_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_PHONE_NUMBER_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * UPDATE_SESSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SESSION_SERVERS = {
        "https://proxy.twilio.com",
    };
	
    /**
	 * UPDATE_SHORT_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SHORT_CODE_SERVERS = {
        "https://proxy.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
	}

    /**
     * Create a new message Interaction to send directly from your system to one [Participant](https://www.twilio.com/docs/proxy/api/participant).  The `inbound` properties for the Interaction will always be empty.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateMessageInteractionResponse createMessageInteraction(org.openapis.openapi.models.operations.CreateMessageInteractionRequest request, org.openapis.openapi.models.operations.CreateMessageInteractionSecurity security) throws Exception {
        return this.createMessageInteraction(request, security, null);
    }

    /**
     * Create a new message Interaction to send directly from your system to one [Participant](https://www.twilio.com/docs/proxy/api/participant).  The `inbound` properties for the Interaction will always be empty.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateMessageInteractionResponse createMessageInteraction(org.openapis.openapi.models.operations.CreateMessageInteractionRequest request, org.openapis.openapi.models.operations.CreateMessageInteractionSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_MESSAGE_INTERACTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateMessageInteractionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateMessageInteractionResponse res = new org.openapis.openapi.models.operations.CreateMessageInteractionResponse(contentType, httpRes.statusCode()) {{
            proxyV1ServiceSessionParticipantMessageInteraction = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1ServiceSessionParticipantMessageInteraction out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1ServiceSessionParticipantMessageInteraction.class);
                res.proxyV1ServiceSessionParticipantMessageInteraction = out;
            }
        }

        return res;
    }

    /**
     * Add a new Participant to the Session
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateParticipantResponse createParticipant(org.openapis.openapi.models.operations.CreateParticipantRequest request, org.openapis.openapi.models.operations.CreateParticipantSecurity security) throws Exception {
        return this.createParticipant(request, security, null);
    }

    /**
     * Add a new Participant to the Session
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateParticipantResponse createParticipant(org.openapis.openapi.models.operations.CreateParticipantRequest request, org.openapis.openapi.models.operations.CreateParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateParticipantRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateParticipantResponse res = new org.openapis.openapi.models.operations.CreateParticipantResponse(contentType, httpRes.statusCode()) {{
            proxyV1ServiceSessionParticipant = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1ServiceSessionParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1ServiceSessionParticipant.class);
                res.proxyV1ServiceSessionParticipant = out;
            }
        }

        return res;
    }

    /**
     * Add a Phone Number to a Service's Proxy Number Pool.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreatePhoneNumberResponse createPhoneNumber(org.openapis.openapi.models.operations.CreatePhoneNumberRequest request, org.openapis.openapi.models.operations.CreatePhoneNumberSecurity security) throws Exception {
        return this.createPhoneNumber(request, security, null);
    }

    /**
     * Add a Phone Number to a Service's Proxy Number Pool.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreatePhoneNumberResponse createPhoneNumber(org.openapis.openapi.models.operations.CreatePhoneNumberRequest request, org.openapis.openapi.models.operations.CreatePhoneNumberSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_PHONE_NUMBER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreatePhoneNumberRequest.class, baseUrl, "/v1/Services/{ServiceSid}/PhoneNumbers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreatePhoneNumberResponse res = new org.openapis.openapi.models.operations.CreatePhoneNumberResponse(contentType, httpRes.statusCode()) {{
            proxyV1ServicePhoneNumber = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1ServicePhoneNumber out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1ServicePhoneNumber.class);
                res.proxyV1ServicePhoneNumber = out;
            }
        }

        return res;
    }

    /**
     * Create a new Service for Twilio Proxy
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceResponse createService(org.openapis.openapi.models.operations.CreateServiceCreateServiceRequest request, org.openapis.openapi.models.operations.CreateServiceSecurity security) throws Exception {
        return this.createService(request, security, null);
    }

    /**
     * Create a new Service for Twilio Proxy
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceResponse createService(org.openapis.openapi.models.operations.CreateServiceCreateServiceRequest request, org.openapis.openapi.models.operations.CreateServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceResponse res = new org.openapis.openapi.models.operations.CreateServiceResponse(contentType, httpRes.statusCode()) {{
            proxyV1Service = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1Service.class);
                res.proxyV1Service = out;
            }
        }

        return res;
    }

    /**
     * Create a new Session
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSessionResponse createSession(org.openapis.openapi.models.operations.CreateSessionRequest request, org.openapis.openapi.models.operations.CreateSessionSecurity security) throws Exception {
        return this.createSession(request, security, null);
    }

    /**
     * Create a new Session
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSessionResponse createSession(org.openapis.openapi.models.operations.CreateSessionRequest request, org.openapis.openapi.models.operations.CreateSessionSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SESSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSessionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Sessions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSessionResponse res = new org.openapis.openapi.models.operations.CreateSessionResponse(contentType, httpRes.statusCode()) {{
            proxyV1ServiceSession = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1ServiceSession out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1ServiceSession.class);
                res.proxyV1ServiceSession = out;
            }
        }

        return res;
    }

    /**
     * Add a Short Code to the Proxy Number Pool for the Service.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateShortCodeResponse createShortCode(org.openapis.openapi.models.operations.CreateShortCodeRequest request, org.openapis.openapi.models.operations.CreateShortCodeSecurity security) throws Exception {
        return this.createShortCode(request, security, null);
    }

    /**
     * Add a Short Code to the Proxy Number Pool for the Service.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateShortCodeResponse createShortCode(org.openapis.openapi.models.operations.CreateShortCodeRequest request, org.openapis.openapi.models.operations.CreateShortCodeSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SHORT_CODE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateShortCodeRequest.class, baseUrl, "/v1/Services/{ServiceSid}/ShortCodes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateShortCodeResponse res = new org.openapis.openapi.models.operations.CreateShortCodeResponse(contentType, httpRes.statusCode()) {{
            proxyV1ServiceShortCode = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1ServiceShortCode out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1ServiceShortCode.class);
                res.proxyV1ServiceShortCode = out;
            }
        }

        return res;
    }

    /**
     * Delete a specific Interaction.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteInteractionResponse deleteInteraction(org.openapis.openapi.models.operations.DeleteInteractionRequest request, org.openapis.openapi.models.operations.DeleteInteractionSecurity security) throws Exception {
        return this.deleteInteraction(request, security, null);
    }

    /**
     * Delete a specific Interaction.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteInteractionResponse deleteInteraction(org.openapis.openapi.models.operations.DeleteInteractionRequest request, org.openapis.openapi.models.operations.DeleteInteractionSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_INTERACTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteInteractionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Interactions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteInteractionResponse res = new org.openapis.openapi.models.operations.DeleteInteractionResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Participant. This is a soft-delete. The participant remains associated with the session and cannot be re-added. Participants are only permanently deleted when the [Session](https://www.twilio.com/docs/proxy/api/session) is deleted.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteParticipantResponse deleteParticipant(org.openapis.openapi.models.operations.DeleteParticipantRequest request, org.openapis.openapi.models.operations.DeleteParticipantSecurity security) throws Exception {
        return this.deleteParticipant(request, security, null);
    }

    /**
     * Delete a specific Participant. This is a soft-delete. The participant remains associated with the session and cannot be re-added. Participants are only permanently deleted when the [Session](https://www.twilio.com/docs/proxy/api/session) is deleted.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteParticipantResponse deleteParticipant(org.openapis.openapi.models.operations.DeleteParticipantRequest request, org.openapis.openapi.models.operations.DeleteParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteParticipantRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteParticipantResponse res = new org.openapis.openapi.models.operations.DeleteParticipantResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Phone Number from a Service.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeletePhoneNumberResponse deletePhoneNumber(org.openapis.openapi.models.operations.DeletePhoneNumberRequest request, org.openapis.openapi.models.operations.DeletePhoneNumberSecurity security) throws Exception {
        return this.deletePhoneNumber(request, security, null);
    }

    /**
     * Delete a specific Phone Number from a Service.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeletePhoneNumberResponse deletePhoneNumber(org.openapis.openapi.models.operations.DeletePhoneNumberRequest request, org.openapis.openapi.models.operations.DeletePhoneNumberSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_PHONE_NUMBER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeletePhoneNumberRequest.class, baseUrl, "/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeletePhoneNumberResponse res = new org.openapis.openapi.models.operations.DeletePhoneNumberResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Service.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceResponse deleteService(org.openapis.openapi.models.operations.DeleteServiceRequest request, org.openapis.openapi.models.operations.DeleteServiceSecurity security) throws Exception {
        return this.deleteService(request, security, null);
    }

    /**
     * Delete a specific Service.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceResponse deleteService(org.openapis.openapi.models.operations.DeleteServiceRequest request, org.openapis.openapi.models.operations.DeleteServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceResponse res = new org.openapis.openapi.models.operations.DeleteServiceResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Session.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSessionResponse deleteSession(org.openapis.openapi.models.operations.DeleteSessionRequest request, org.openapis.openapi.models.operations.DeleteSessionSecurity security) throws Exception {
        return this.deleteSession(request, security, null);
    }

    /**
     * Delete a specific Session.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSessionResponse deleteSession(org.openapis.openapi.models.operations.DeleteSessionRequest request, org.openapis.openapi.models.operations.DeleteSessionSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SESSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSessionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Sessions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSessionResponse res = new org.openapis.openapi.models.operations.DeleteSessionResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Short Code from a Service.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteShortCodeResponse deleteShortCode(org.openapis.openapi.models.operations.DeleteShortCodeRequest request, org.openapis.openapi.models.operations.DeleteShortCodeSecurity security) throws Exception {
        return this.deleteShortCode(request, security, null);
    }

    /**
     * Delete a specific Short Code from a Service.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteShortCodeResponse deleteShortCode(org.openapis.openapi.models.operations.DeleteShortCodeRequest request, org.openapis.openapi.models.operations.DeleteShortCodeSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SHORT_CODE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteShortCodeRequest.class, baseUrl, "/v1/Services/{ServiceSid}/ShortCodes/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteShortCodeResponse res = new org.openapis.openapi.models.operations.DeleteShortCodeResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Retrieve a list of Interactions for a given [Session](https://www.twilio.com/docs/proxy/api/session).
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchInteractionResponse fetchInteraction(org.openapis.openapi.models.operations.FetchInteractionRequest request, org.openapis.openapi.models.operations.FetchInteractionSecurity security) throws Exception {
        return this.fetchInteraction(request, security, null);
    }

    /**
     * Retrieve a list of Interactions for a given [Session](https://www.twilio.com/docs/proxy/api/session).
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchInteractionResponse fetchInteraction(org.openapis.openapi.models.operations.FetchInteractionRequest request, org.openapis.openapi.models.operations.FetchInteractionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_INTERACTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchInteractionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Interactions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchInteractionResponse res = new org.openapis.openapi.models.operations.FetchInteractionResponse(contentType, httpRes.statusCode()) {{
            proxyV1ServiceSessionInteraction = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1ServiceSessionInteraction out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1ServiceSessionInteraction.class);
                res.proxyV1ServiceSessionInteraction = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchMessageInteractionResponse fetchMessageInteraction(org.openapis.openapi.models.operations.FetchMessageInteractionRequest request, org.openapis.openapi.models.operations.FetchMessageInteractionSecurity security) throws Exception {
        return this.fetchMessageInteraction(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchMessageInteractionResponse fetchMessageInteraction(org.openapis.openapi.models.operations.FetchMessageInteractionRequest request, org.openapis.openapi.models.operations.FetchMessageInteractionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_MESSAGE_INTERACTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchMessageInteractionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchMessageInteractionResponse res = new org.openapis.openapi.models.operations.FetchMessageInteractionResponse(contentType, httpRes.statusCode()) {{
            proxyV1ServiceSessionParticipantMessageInteraction = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1ServiceSessionParticipantMessageInteraction out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1ServiceSessionParticipantMessageInteraction.class);
                res.proxyV1ServiceSessionParticipantMessageInteraction = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Participant.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchParticipantResponse fetchParticipant(org.openapis.openapi.models.operations.FetchParticipantRequest request, org.openapis.openapi.models.operations.FetchParticipantSecurity security) throws Exception {
        return this.fetchParticipant(request, security, null);
    }

    /**
     * Fetch a specific Participant.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchParticipantResponse fetchParticipant(org.openapis.openapi.models.operations.FetchParticipantRequest request, org.openapis.openapi.models.operations.FetchParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchParticipantRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchParticipantResponse res = new org.openapis.openapi.models.operations.FetchParticipantResponse(contentType, httpRes.statusCode()) {{
            proxyV1ServiceSessionParticipant = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1ServiceSessionParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1ServiceSessionParticipant.class);
                res.proxyV1ServiceSessionParticipant = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Phone Number.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchPhoneNumberResponse fetchPhoneNumber(org.openapis.openapi.models.operations.FetchPhoneNumberRequest request, org.openapis.openapi.models.operations.FetchPhoneNumberSecurity security) throws Exception {
        return this.fetchPhoneNumber(request, security, null);
    }

    /**
     * Fetch a specific Phone Number.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchPhoneNumberResponse fetchPhoneNumber(org.openapis.openapi.models.operations.FetchPhoneNumberRequest request, org.openapis.openapi.models.operations.FetchPhoneNumberSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_PHONE_NUMBER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchPhoneNumberRequest.class, baseUrl, "/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchPhoneNumberResponse res = new org.openapis.openapi.models.operations.FetchPhoneNumberResponse(contentType, httpRes.statusCode()) {{
            proxyV1ServicePhoneNumber = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1ServicePhoneNumber out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1ServicePhoneNumber.class);
                res.proxyV1ServicePhoneNumber = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Service.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceResponse fetchService(org.openapis.openapi.models.operations.FetchServiceRequest request, org.openapis.openapi.models.operations.FetchServiceSecurity security) throws Exception {
        return this.fetchService(request, security, null);
    }

    /**
     * Fetch a specific Service.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceResponse fetchService(org.openapis.openapi.models.operations.FetchServiceRequest request, org.openapis.openapi.models.operations.FetchServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceResponse res = new org.openapis.openapi.models.operations.FetchServiceResponse(contentType, httpRes.statusCode()) {{
            proxyV1Service = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1Service.class);
                res.proxyV1Service = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Session.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSessionResponse fetchSession(org.openapis.openapi.models.operations.FetchSessionRequest request, org.openapis.openapi.models.operations.FetchSessionSecurity security) throws Exception {
        return this.fetchSession(request, security, null);
    }

    /**
     * Fetch a specific Session.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSessionResponse fetchSession(org.openapis.openapi.models.operations.FetchSessionRequest request, org.openapis.openapi.models.operations.FetchSessionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SESSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSessionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Sessions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSessionResponse res = new org.openapis.openapi.models.operations.FetchSessionResponse(contentType, httpRes.statusCode()) {{
            proxyV1ServiceSession = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1ServiceSession out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1ServiceSession.class);
                res.proxyV1ServiceSession = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Short Code.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchShortCodeResponse fetchShortCode(org.openapis.openapi.models.operations.FetchShortCodeRequest request, org.openapis.openapi.models.operations.FetchShortCodeSecurity security) throws Exception {
        return this.fetchShortCode(request, security, null);
    }

    /**
     * Fetch a specific Short Code.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchShortCodeResponse fetchShortCode(org.openapis.openapi.models.operations.FetchShortCodeRequest request, org.openapis.openapi.models.operations.FetchShortCodeSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SHORT_CODE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchShortCodeRequest.class, baseUrl, "/v1/Services/{ServiceSid}/ShortCodes/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchShortCodeResponse res = new org.openapis.openapi.models.operations.FetchShortCodeResponse(contentType, httpRes.statusCode()) {{
            proxyV1ServiceShortCode = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1ServiceShortCode out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1ServiceShortCode.class);
                res.proxyV1ServiceShortCode = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Interactions for a Session. A maximum of 100 records will be returned per page.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListInteractionResponse listInteraction(org.openapis.openapi.models.operations.ListInteractionRequest request, org.openapis.openapi.models.operations.ListInteractionSecurity security) throws Exception {
        return this.listInteraction(request, security, null);
    }

    /**
     * Retrieve a list of all Interactions for a Session. A maximum of 100 records will be returned per page.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListInteractionResponse listInteraction(org.openapis.openapi.models.operations.ListInteractionRequest request, org.openapis.openapi.models.operations.ListInteractionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_INTERACTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListInteractionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Interactions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListInteractionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListInteractionResponse res = new org.openapis.openapi.models.operations.ListInteractionResponse(contentType, httpRes.statusCode()) {{
            listInteractionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListInteractionListInteractionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListInteractionListInteractionResponse.class);
                res.listInteractionResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListMessageInteractionResponse listMessageInteraction(org.openapis.openapi.models.operations.ListMessageInteractionRequest request, org.openapis.openapi.models.operations.ListMessageInteractionSecurity security) throws Exception {
        return this.listMessageInteraction(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListMessageInteractionResponse listMessageInteraction(org.openapis.openapi.models.operations.ListMessageInteractionRequest request, org.openapis.openapi.models.operations.ListMessageInteractionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_MESSAGE_INTERACTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListMessageInteractionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListMessageInteractionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListMessageInteractionResponse res = new org.openapis.openapi.models.operations.ListMessageInteractionResponse(contentType, httpRes.statusCode()) {{
            listMessageInteractionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListMessageInteractionListMessageInteractionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListMessageInteractionListMessageInteractionResponse.class);
                res.listMessageInteractionResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Participants in a Session.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListParticipantResponse listParticipant(org.openapis.openapi.models.operations.ListParticipantRequest request, org.openapis.openapi.models.operations.ListParticipantSecurity security) throws Exception {
        return this.listParticipant(request, security, null);
    }

    /**
     * Retrieve a list of all Participants in a Session.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListParticipantResponse listParticipant(org.openapis.openapi.models.operations.ListParticipantRequest request, org.openapis.openapi.models.operations.ListParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListParticipantRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListParticipantRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListParticipantResponse res = new org.openapis.openapi.models.operations.ListParticipantResponse(contentType, httpRes.statusCode()) {{
            listParticipantResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListParticipantListParticipantResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListParticipantListParticipantResponse.class);
                res.listParticipantResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Phone Numbers in the Proxy Number Pool for a Service. A maximum of 100 records will be returned per page.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListPhoneNumberResponse listPhoneNumber(org.openapis.openapi.models.operations.ListPhoneNumberRequest request, org.openapis.openapi.models.operations.ListPhoneNumberSecurity security) throws Exception {
        return this.listPhoneNumber(request, security, null);
    }

    /**
     * Retrieve a list of all Phone Numbers in the Proxy Number Pool for a Service. A maximum of 100 records will be returned per page.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListPhoneNumberResponse listPhoneNumber(org.openapis.openapi.models.operations.ListPhoneNumberRequest request, org.openapis.openapi.models.operations.ListPhoneNumberSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_PHONE_NUMBER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListPhoneNumberRequest.class, baseUrl, "/v1/Services/{ServiceSid}/PhoneNumbers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListPhoneNumberRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListPhoneNumberResponse res = new org.openapis.openapi.models.operations.ListPhoneNumberResponse(contentType, httpRes.statusCode()) {{
            listPhoneNumberResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListPhoneNumberListPhoneNumberResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListPhoneNumberListPhoneNumberResponse.class);
                res.listPhoneNumberResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Services for Twilio Proxy. A maximum of 100 records will be returned per page.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceResponse listService(org.openapis.openapi.models.operations.ListServiceRequest request, org.openapis.openapi.models.operations.ListServiceSecurity security) throws Exception {
        return this.listService(request, security, null);
    }

    /**
     * Retrieve a list of all Services for Twilio Proxy. A maximum of 100 records will be returned per page.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceResponse listService(org.openapis.openapi.models.operations.ListServiceRequest request, org.openapis.openapi.models.operations.ListServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceResponse res = new org.openapis.openapi.models.operations.ListServiceResponse(contentType, httpRes.statusCode()) {{
            listServiceResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceListServiceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceListServiceResponse.class);
                res.listServiceResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Sessions for the Service. A maximum of 100 records will be returned per page.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSessionResponse listSession(org.openapis.openapi.models.operations.ListSessionRequest request, org.openapis.openapi.models.operations.ListSessionSecurity security) throws Exception {
        return this.listSession(request, security, null);
    }

    /**
     * Retrieve a list of all Sessions for the Service. A maximum of 100 records will be returned per page.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSessionResponse listSession(org.openapis.openapi.models.operations.ListSessionRequest request, org.openapis.openapi.models.operations.ListSessionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SESSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSessionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Sessions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSessionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSessionResponse res = new org.openapis.openapi.models.operations.ListSessionResponse(contentType, httpRes.statusCode()) {{
            listSessionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSessionListSessionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSessionListSessionResponse.class);
                res.listSessionResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Short Codes in the Proxy Number Pool for the Service. A maximum of 100 records will be returned per page.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListShortCodeResponse listShortCode(org.openapis.openapi.models.operations.ListShortCodeRequest request, org.openapis.openapi.models.operations.ListShortCodeSecurity security) throws Exception {
        return this.listShortCode(request, security, null);
    }

    /**
     * Retrieve a list of all Short Codes in the Proxy Number Pool for the Service. A maximum of 100 records will be returned per page.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListShortCodeResponse listShortCode(org.openapis.openapi.models.operations.ListShortCodeRequest request, org.openapis.openapi.models.operations.ListShortCodeSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SHORT_CODE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListShortCodeRequest.class, baseUrl, "/v1/Services/{ServiceSid}/ShortCodes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListShortCodeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListShortCodeResponse res = new org.openapis.openapi.models.operations.ListShortCodeResponse(contentType, httpRes.statusCode()) {{
            listShortCodeResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListShortCodeListShortCodeResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListShortCodeListShortCodeResponse.class);
                res.listShortCodeResponse = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Proxy Number.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdatePhoneNumberResponse updatePhoneNumber(org.openapis.openapi.models.operations.UpdatePhoneNumberRequest request, org.openapis.openapi.models.operations.UpdatePhoneNumberSecurity security) throws Exception {
        return this.updatePhoneNumber(request, security, null);
    }

    /**
     * Update a specific Proxy Number.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdatePhoneNumberResponse updatePhoneNumber(org.openapis.openapi.models.operations.UpdatePhoneNumberRequest request, org.openapis.openapi.models.operations.UpdatePhoneNumberSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_PHONE_NUMBER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdatePhoneNumberRequest.class, baseUrl, "/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdatePhoneNumberResponse res = new org.openapis.openapi.models.operations.UpdatePhoneNumberResponse(contentType, httpRes.statusCode()) {{
            proxyV1ServicePhoneNumber = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1ServicePhoneNumber out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1ServicePhoneNumber.class);
                res.proxyV1ServicePhoneNumber = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Service.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceResponse updateService(org.openapis.openapi.models.operations.UpdateServiceRequest request, org.openapis.openapi.models.operations.UpdateServiceSecurity security) throws Exception {
        return this.updateService(request, security, null);
    }

    /**
     * Update a specific Service.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceResponse updateService(org.openapis.openapi.models.operations.UpdateServiceRequest request, org.openapis.openapi.models.operations.UpdateServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceResponse res = new org.openapis.openapi.models.operations.UpdateServiceResponse(contentType, httpRes.statusCode()) {{
            proxyV1Service = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1Service.class);
                res.proxyV1Service = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Session.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSessionResponse updateSession(org.openapis.openapi.models.operations.UpdateSessionRequest request, org.openapis.openapi.models.operations.UpdateSessionSecurity security) throws Exception {
        return this.updateSession(request, security, null);
    }

    /**
     * Update a specific Session.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSessionResponse updateSession(org.openapis.openapi.models.operations.UpdateSessionRequest request, org.openapis.openapi.models.operations.UpdateSessionSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SESSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSessionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Sessions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSessionResponse res = new org.openapis.openapi.models.operations.UpdateSessionResponse(contentType, httpRes.statusCode()) {{
            proxyV1ServiceSession = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1ServiceSession out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1ServiceSession.class);
                res.proxyV1ServiceSession = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Short Code.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateShortCodeResponse updateShortCode(org.openapis.openapi.models.operations.UpdateShortCodeRequest request, org.openapis.openapi.models.operations.UpdateShortCodeSecurity security) throws Exception {
        return this.updateShortCode(request, security, null);
    }

    /**
     * Update a specific Short Code.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateShortCodeResponse updateShortCode(org.openapis.openapi.models.operations.UpdateShortCodeRequest request, org.openapis.openapi.models.operations.UpdateShortCodeSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SHORT_CODE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateShortCodeRequest.class, baseUrl, "/v1/Services/{ServiceSid}/ShortCodes/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateShortCodeResponse res = new org.openapis.openapi.models.operations.UpdateShortCodeResponse(contentType, httpRes.statusCode()) {{
            proxyV1ServiceShortCode = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProxyV1ServiceShortCode out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProxyV1ServiceShortCode.class);
                res.proxyV1ServiceShortCode = out;
            }
        }

        return res;
    }
}