"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import break_ as shared_break_
from ..shared import shiftwage as shared_shiftwage
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Shift:
    r"""A record of the hourly rate, start, and end times for a single work shift
    for an employee. This might include a record of the start and end times for breaks
    taken during the shift.
    """
    
    start_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_at') }})
    r"""RFC 3339; shifted to the location timezone + offset. Precision up to the
    minute is respected; seconds are truncated.
    """  
    breaks: Optional[list[shared_break_.Break]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('breaks'), 'exclude': lambda f: f is None }})
    r"""A list of all the paid or unpaid breaks that were taken during this shift."""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""A read-only timestamp in RFC 3339 format; presented in UTC."""  
    employee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employee_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the employee this shift belongs to. DEPRECATED at version 2020-08-26. Use `team_member_id` instead."""  
    end_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_at'), 'exclude': lambda f: f is None }})
    r"""RFC 3339; shifted to the timezone + offset. Precision up to the minute is
    respected; seconds are truncated.
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The UUID for this object."""  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the location this shift occurred at. The location should be based on
    where the employee clocked in.
    """  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Describes the working state of the current `Shift`."""  
    team_member_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('team_member_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the team member this shift belongs to. Replaced `employee_id` at version \\"2020-08-26\\"."""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""The read-only convenience value that is calculated from the location based
    on the `location_id`. Format: the IANA timezone database identifier for the
    location timezone.
    """  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})
    r"""A read-only timestamp in RFC 3339 format; presented in UTC."""  
    version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Used for resolving concurrency issues. The request fails if the version
    provided does not match the server version at the time of the request. If not provided,
    Square executes a blind write; potentially overwriting data from another
    write.
    """  
    wage: Optional[shared_shiftwage.ShiftWage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wage'), 'exclude': lambda f: f is None }})
    r"""The hourly wage rate used to compensate an employee for this shift."""  
    