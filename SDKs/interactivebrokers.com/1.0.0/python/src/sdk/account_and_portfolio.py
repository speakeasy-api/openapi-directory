"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class AccountAndPortfolio:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_accounts(self, request: operations.GetAccountsRequest) -> operations.GetAccountsResponse:
        r"""Brokerage Accounts
        Allows the caller to request a list of accounts associated with the session.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounts'
        
        query_params = utils.get_query_params(operations.GetAccountsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAccounts200ApplicationJSON])
                res.get_accounts_200_application_json_object = out
        elif http_res.status_code in [202, 204, 401, 403, 408]:
            pass

        return res

    def get_accounts_account_positions(self, request: operations.GetAccountsAccountPositionsRequest) -> operations.GetAccountsAccountPositionsResponse:
        r"""Account Positions
        Returns a list of positions for the indicated account.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAccountsAccountPositionsRequest, base_url, '/accounts/{account}/positions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountsAccountPositionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetAccountsAccountPositions200ApplicationJSON]])
                res.get_accounts_account_positions_200_application_json_objects = out
        elif http_res.status_code in [202, 204, 400, 401, 403, 408]:
            pass

        return res

    def get_accounts_account_summary(self, request: operations.GetAccountsAccountSummaryRequest) -> operations.GetAccountsAccountSummaryResponse:
        r"""Account Values Summary
        Returns a list of account and margin balances associated with the account passed in the URL
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAccountsAccountSummaryRequest, base_url, '/accounts/{account}/summary', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountsAccountSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAccountsAccountSummary200ApplicationJSON])
                res.get_accounts_account_summary_200_application_json_object = out
        elif http_res.status_code in [202, 204, 400, 401, 403, 408]:
            pass

        return res

    