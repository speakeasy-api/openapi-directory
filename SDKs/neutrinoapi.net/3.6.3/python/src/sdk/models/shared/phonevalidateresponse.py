"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PhoneValidateResponse:
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""The phone number country"""  
    country_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country-code') }})
    r"""The phone number country as an ISO 2-letter country code"""  
    country_code3: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country-code3') }})
    r"""The phone number country as an ISO 3-letter country code"""  
    currency_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency-code') }})
    r"""ISO 4217 currency code associated with the country"""  
    international_calling_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('international-calling-code') }})
    r"""The international calling code"""  
    international_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('international-number') }})
    r"""The number represented in full international format (E.164)"""  
    is_mobile: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-mobile') }})
    r"""True if this is a mobile number. If the number type is unknown this value will be false"""  
    local_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('local-number') }})
    r"""The number represented in local dialing format"""  
    location: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})
    r"""The phone number location. Could be the city, region or country depending on the type of number"""  
    prefix_network: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefix-network') }})
    r"""The network/carrier who owns the prefix (this only works for some countries, use HLR lookup for global network detection)"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The number type based on the number prefix. <br>Possible values are: <br> <ul> <li>mobile</li> <li>fixed-line</li> <li>premium-rate</li> <li>toll-free</li> <li>voip</li> <li>unknown (use HLR lookup)</li> </ul>"""  
    valid: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valid') }})
    r"""Is this a valid phone number"""  
    