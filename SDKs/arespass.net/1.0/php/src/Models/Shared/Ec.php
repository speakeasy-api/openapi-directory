<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Ec - The password analysis, including the calculated entropy.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Ec
{
    /**
     * **The penalty applied to each character that has been found to be part of an alphabet sequence.**
     * 
     * 
     * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
     * 
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\EcAlphabetSequence> $alphabetSequence
     */
	#[\JMS\Serializer\Annotation\SerializedName('alphabetSequence')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\EcAlphabetSequence>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $alphabetSequence = null;
    
    /**
     * **This API version number.**
     * 
     * 
     * 
     * @var ?string $apiVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('apiVersion')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $apiVersion = null;
    
    /**
     * **The detected keyboard, QWERTY or Dvorak.**
     * 
     * 
     * 
     * @var ?string $detectedKeyboard
     */
	#[\JMS\Serializer\Annotation\SerializedName('detectedKeyboard')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $detectedKeyboard = null;
    
    /**
     * **The ratio entropy / idealEntropy.**
     * 
     * 
     * It is a float number in the range [0, 1].
     * 
     * 
     * @var ?float $efficiency
     */
	#[\JMS\Serializer\Annotation\SerializedName('efficiency')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $efficiency = null;
    
    /**
     * **The entropy calculated for the input password.**
     * 
     * 
     * It is measured in bits.
     * 
     * 
     * @var ?float $entropy
     */
	#[\JMS\Serializer\Annotation\SerializedName('entropy')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $entropy = null;
    
    /**
     * **The distribution of the calculated entropy among the password characters.**
     * 
     * 
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\EcEntropyDistribution> $entropyDistribution
     */
	#[\JMS\Serializer\Annotation\SerializedName('entropyDistribution')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\EcEntropyDistribution>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $entropyDistribution = null;
    
    /**
     * **The Shannon entropy.**
     * 
     * 
     * The Shannon entropy is the entropy calculated if no penalizations - words, number sequence, alphabet sequence, etc - were found in the password.
     * 
     * It is measured in bits.
     * 
     * 
     * @var ?float $idealEntropy
     */
	#[\JMS\Serializer\Annotation\SerializedName('idealEntropy')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $idealEntropy = null;
    
    /**
     * **The penalty applied to each character that has been found to be part of a keyboard sequence.**
     * 
     * 
     * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
     * 
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\EcKeyboardSequence> $keyboardSequence
     */
	#[\JMS\Serializer\Annotation\SerializedName('keyboardSequence')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\EcKeyboardSequence>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $keyboardSequence = null;
    
    /**
     * The analyzed password after the l33t substitution.
     * 
     * @var ?string $l33tPassword
     */
	#[\JMS\Serializer\Annotation\SerializedName('l33tPassword')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $l33tPassword = null;
    
    /**
     * **The penalty applied to the whole password because of irregular entropy distribution.**
     * 
     * 
     * This penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
     * 
     * 
     * @var ?float $nonUniformEntropyDistributionPenalty
     */
	#[\JMS\Serializer\Annotation\SerializedName('nonUniformEntropyDistributionPenalty')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $nonUniformEntropyDistributionPenalty = null;
    
    /**
     * **The penalty applied to each character that has been found to be part of a number sequence.**
     * 
     * 
     * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
     * 
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\EcNumberSequence> $numberSequence
     */
	#[\JMS\Serializer\Annotation\SerializedName('numberSequence')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\EcNumberSequence>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $numberSequence = null;
    
    /**
     * The analyzed password.
     * 
     * @var ?string $password
     */
	#[\JMS\Serializer\Annotation\SerializedName('password')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $password = null;
    
    /**
     * The number of characters the password has.
     * 
     * @var ?int $passwordLength
     */
	#[\JMS\Serializer\Annotation\SerializedName('passwordLength')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $passwordLength = null;
    
    /**
     * **The penalty applied to each character that has been found to be part of a word, number sequence, alphabet sequence, etc.**
     * 
     * 
     * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
     * 
     * Its value is equal to the value of the input parameter *penalty*.
     * 
     * 
     * @var ?float $penalty
     */
	#[\JMS\Serializer\Annotation\SerializedName('penalty')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $penalty = null;
    
    /**
     * **The penalty applied to each character that are repeated**
     * 
     * 
     * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.          
     * 
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\EcRepeatedChars> $repeatedChars
     */
	#[\JMS\Serializer\Annotation\SerializedName('repeatedChars')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\EcRepeatedChars>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $repeatedChars = null;
    
    /**
     * **The identifier of the request that corresponds to this response.**
     * 
     * 
     * 
     * @var ?string $requestId
     */
	#[\JMS\Serializer\Annotation\SerializedName('requestId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $requestId = null;
    
    /**
     * **The timestamp for this response.**
     * 
     * 
     * Milliseconds from the epoch of 1970-01-01T00:00:00Z.
     * 
     * 
     * @var ?float $requestTimestamp
     */
	#[\JMS\Serializer\Annotation\SerializedName('requestTimestamp')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $requestTimestamp = null;
    
    /**
     * $summary
     * 
     * @var ?array<string> $summary
     */
	#[\JMS\Serializer\Annotation\SerializedName('summary')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $summary = null;
    
    /**
     * **The total penalty applied to each character.**
     * 
     * 
     * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
     * 
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\EcTotal> $total
     */
	#[\JMS\Serializer\Annotation\SerializedName('total')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\EcTotal>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $total = null;
    
    /**
     * **The penalty applied to each character that has been found to be part of a word.**
     * 
     * 
     * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
     * 
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\EcWords> $words
     */
	#[\JMS\Serializer\Annotation\SerializedName('words')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\EcWords>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $words = null;
    
	public function __construct()
	{
		$this->alphabetSequence = null;
		$this->apiVersion = null;
		$this->detectedKeyboard = null;
		$this->efficiency = null;
		$this->entropy = null;
		$this->entropyDistribution = null;
		$this->idealEntropy = null;
		$this->keyboardSequence = null;
		$this->l33tPassword = null;
		$this->nonUniformEntropyDistributionPenalty = null;
		$this->numberSequence = null;
		$this->password = null;
		$this->passwordLength = null;
		$this->penalty = null;
		$this->repeatedChars = null;
		$this->requestId = null;
		$this->requestTimestamp = null;
		$this->summary = null;
		$this->total = null;
		$this->words = null;
	}
}
