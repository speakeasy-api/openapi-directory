"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class BugTrackerGetRepoIssueFromCrashSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class BugTrackerGetRepoIssueFromCrashRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    crash_group_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'crash_group_id', 'style': 'simple', 'explode': False }})
    r"""CrashGroup Id"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    
class BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONCodeEnum(str, Enum):
    r"""The status code return by the API. It can be 400 or 404 or 409 or 500."""
    FOUR_HUNDRED = '400'
    FOUR_HUNDRED_AND_FOUR = '404'
    FOUR_HUNDRED_AND_NINE = '409'
    FIVE_HUNDRED = '500'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BugTrackerGetRepoIssueFromCrashDefaultApplicationJSON:
    r"""Generic result for any alerting API operation"""
    
    code: BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""The status code return by the API. It can be 400 or 404 or 409 or 500."""  
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id') }})
    r"""Unique request identifier for tracking"""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""The reason for the request failed"""  
    
class BugTrackerGetRepoIssueFromCrash200ApplicationJSONBugTrackerTypeEnum(str, Enum):
    GITHUB = 'github'
    VSTS = 'vsts'
    JIRA = 'jira'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BugTrackerGetRepoIssueFromCrash200ApplicationJSON:
    r"""Object returned in response to getting a bug tracker issue related to a crash group id"""
    
    bug_tracker_type: Optional[BugTrackerGetRepoIssueFromCrash200ApplicationJSONBugTrackerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bug_tracker_type'), 'exclude': lambda f: f is None }})  
    event_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_type'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    mobile_center_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobile_center_id'), 'exclude': lambda f: f is None }})  
    repo_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repo_name'), 'exclude': lambda f: f is None }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class BugTrackerGetRepoIssueFromCrashResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bug_tracker_get_repo_issue_from_crash_200_application_json_object: Optional[BugTrackerGetRepoIssueFromCrash200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    bug_tracker_get_repo_issue_from_crash_default_application_json_object: Optional[BugTrackerGetRepoIssueFromCrashDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error code with reason"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    