// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

// CommentQuotedFileContent - The file content to which the comment refers, typically within the anchor region. For a text file, for example, this would be the text at the location of the comment.
type CommentQuotedFileContent struct {
	// The MIME type of the quoted content.
	MimeType *string `json:"mimeType,omitempty"`
	// The quoted content itself. This is interpreted as plain text if set through the API.
	Value *string `json:"value,omitempty"`
}

// Comment - A comment on a file.
type Comment struct {
	// A region of the document represented as a JSON string. For details on defining anchor properties, refer to  Add comments and replies.
	Anchor *string `json:"anchor,omitempty"`
	// Information about a Drive user.
	Author *User `json:"author,omitempty"`
	// The plain text content of the comment. This field is used for setting the content, while htmlContent should be displayed.
	Content *string `json:"content,omitempty"`
	// The time at which the comment was created (RFC 3339 date-time).
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	// Whether the comment has been deleted. A deleted comment has no content.
	Deleted *bool `json:"deleted,omitempty"`
	// The content of the comment with HTML formatting.
	HTMLContent *string `json:"htmlContent,omitempty"`
	// The ID of the comment.
	ID *string `json:"id,omitempty"`
	// Identifies what kind of resource this is. Value: the fixed string "drive#comment".
	Kind *string `json:"kind,omitempty"`
	// The last time the comment or any of its replies was modified (RFC 3339 date-time).
	ModifiedTime *time.Time `json:"modifiedTime,omitempty"`
	// The file content to which the comment refers, typically within the anchor region. For a text file, for example, this would be the text at the location of the comment.
	QuotedFileContent *CommentQuotedFileContent `json:"quotedFileContent,omitempty"`
	// The full list of replies to the comment in chronological order.
	Replies []Reply `json:"replies,omitempty"`
	// Whether the comment has been resolved by one of its replies.
	Resolved *bool `json:"resolved,omitempty"`
}
