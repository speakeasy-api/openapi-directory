"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ChannelsCategories:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_channel_categories(self, request: operations.AddChannelCategoriesRequest) -> operations.AddChannelCategoriesResponse:
        r"""Add a list of categories to a channel
        This method adds multiple categories to the specified channel.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddChannelCategoriesRequest, base_url, '/channels/{channel_id}/categories', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddChannelCategoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def categorize_channel(self, request: operations.CategorizeChannelRequest, security: operations.CategorizeChannelSecurity) -> operations.CategorizeChannelResponse:
        r"""Categorize a channel
        This method adds a channel to a category.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CategorizeChannelRequest, base_url, '/channels/{channel_id}/categories/{category}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CategorizeChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.category+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.category+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_channel_category(self, request: operations.DeleteChannelCategoryRequest, security: operations.DeleteChannelCategorySecurity) -> operations.DeleteChannelCategoryResponse:
        r"""Remove a category from a channel
        This method removes a single category from the specified channel.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteChannelCategoryRequest, base_url, '/channels/{channel_id}/categories/{category}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteChannelCategoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.category+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.category+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_channel_categories(self, request: operations.GetChannelCategoriesRequest) -> operations.GetChannelCategoriesResponse:
        r"""Get all the categories in a channel
        This method gets all the categories in the specified channel.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChannelCategoriesRequest, base_url, '/channels/{channel_id}/categories', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelCategoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.category+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Category]])
                res.categories = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.category+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    