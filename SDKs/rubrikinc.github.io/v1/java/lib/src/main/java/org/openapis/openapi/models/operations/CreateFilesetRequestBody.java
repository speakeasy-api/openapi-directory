/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CreateFilesetRequestBody - Specify a template ID and either a host ID or a share ID. When a share ID is provided, the host ID is derived from the host share. Also specify whether or not this backup is a direct archive backup.
 */
public class CreateFilesetRequestBody {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arraySpec")
    public org.openapis.openapi.models.shared.FilesetArraySpec arraySpec;

    public CreateFilesetRequestBody withArraySpec(org.openapis.openapi.models.shared.FilesetArraySpec arraySpec) {
        this.arraySpec = arraySpec;
        return this;
    }
    
    /**
     * A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableHardlinkSupport")
    public Boolean enableHardlinkSupport;

    public CreateFilesetRequestBody withEnableHardlinkSupport(Boolean enableHardlinkSupport) {
        this.enableHardlinkSupport = enableHardlinkSupport;
        return this;
    }
    
    /**
     * A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableSymlinkResolution")
    public Boolean enableSymlinkResolution;

    public CreateFilesetRequestBody withEnableSymlinkResolution(Boolean enableSymlinkResolution) {
        this.enableSymlinkResolution = enableSymlinkResolution;
        return this;
    }
    
    /**
     * ID of the failover cluster app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failoverClusterAppId")
    public String failoverClusterAppId;

    public CreateFilesetRequestBody withFailoverClusterAppId(String failoverClusterAppId) {
        this.failoverClusterAppId = failoverClusterAppId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostId")
    public String hostId;

    public CreateFilesetRequestBody withHostId(String hostId) {
        this.hostId = hostId;
        return this;
    }
    
    /**
     * A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPassthrough")
    public Boolean isPassthrough;

    public CreateFilesetRequestBody withIsPassthrough(Boolean isPassthrough) {
        this.isPassthrough = isPassthrough;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shareId")
    public String shareId;

    public CreateFilesetRequestBody withShareId(String shareId) {
        this.shareId = shareId;
        return this;
    }
    
    /**
     * Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapMirrorLabelForFullBackup")
    public String snapMirrorLabelForFullBackup;

    public CreateFilesetRequestBody withSnapMirrorLabelForFullBackup(String snapMirrorLabelForFullBackup) {
        this.snapMirrorLabelForFullBackup = snapMirrorLabelForFullBackup;
        return this;
    }
    
    /**
     * Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapMirrorLabelForIncrementalBackup")
    public String snapMirrorLabelForIncrementalBackup;

    public CreateFilesetRequestBody withSnapMirrorLabelForIncrementalBackup(String snapMirrorLabelForIncrementalBackup) {
        this.snapMirrorLabelForIncrementalBackup = snapMirrorLabelForIncrementalBackup;
        return this;
    }
    
    @JsonProperty("templateId")
    public String templateId;

    public CreateFilesetRequestBody withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }
    
    public CreateFilesetRequestBody(@JsonProperty("templateId") String templateId) {
        this.templateId = templateId;
  }
}
