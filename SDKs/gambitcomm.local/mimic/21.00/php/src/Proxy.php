<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Proxy 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Show the agent's PROXY argument structure
     * 
     * Agent's PROXY configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetArgsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetArgsResponse
     */
	public function protocolProxyGetArgs(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetArgsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetArgsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/proxy/get/args', \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetArgsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetArgsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolProxyGetArgs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's PROXY configuration
     * 
     * Agent's PROXY configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetConfigResponse
     */
	public function protocolProxyGetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/proxy/get/config', \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configPROXY = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigPROXY', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's PROXY statistics
     * 
     * Statistics of fields indicated in the headers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetStatisticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetStatisticsResponse
     */
	public function protocolProxyGetStatistics(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetStatisticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetStatisticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/proxy/get/statistics', \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolProxyGetStatistics200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the PROXY statistics headers
     * 
     * The headers of statistics fields
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetStatsHdrResponse
     */
	public function protocolProxyGetStatsHdr(
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetStatsHdrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/protocol/msg/proxy/get/stats_hdr');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetStatsHdrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolProxyGetStatsHdr200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's PROXY traffic tracing
     * 
     * Trace 1 means enabled, 0 means not
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetTraceResponse
     */
	public function protocolProxyGetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/proxy/get/trace', \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyGetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configPROXY = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigPROXY', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Add individual proxy target on the agent and the simulator host
     * 
     * Additional proxy target
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortAddRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortAddResponse
     */
	public function protocolProxyPortAdd(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortAddRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/proxy/port/add/{port}/{target}/{targetPort}', \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolProxyPortAdd200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Check individual target
     * 
     * Check individual target
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortIsstartedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortIsstartedResponse
     */
	public function protocolProxyPortIsstarted(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortIsstartedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortIsstartedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/proxy/port/isStarted/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortIsstartedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortIsstartedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolProxyPortIsstarted200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * List all proxy targets
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortListResponse
     */
	public function protocolProxyPortList(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/proxy/port/list', \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolProxyPortList200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Remove individual proxy target on the agent and the simulator host
     * 
     * Remove proxy target
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortRemoveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortRemoveResponse
     */
	public function protocolProxyPortRemove(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortRemoveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortRemoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/proxy/port/remove/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortRemoveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortRemoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolProxyPortRemove200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Start additional target
     * 
     * Start additional target
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortStartRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortStartResponse
     */
	public function protocolProxyPortStart(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortStartRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortStartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/proxy/port/start/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortStartRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortStartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolProxyPortStart200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Stop additional target
     * 
     * Stop additional target
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortStopRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortStopResponse
     */
	public function protocolProxyPortStop(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortStopRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/proxy/port/stop/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortStopRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolProxyPortStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolProxyPortStop200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's PROXY configuration
     * 
     * Agent's PROXY configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolProxySetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolProxySetConfigResponse
     */
	public function protocolProxySetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolProxySetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolProxySetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/proxy/set/config/{argument}/{value}', \OpenAPI\OpenAPI\Models\Operations\ProtocolProxySetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolProxySetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolProxySetConfig200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's PROXY traffic tracing
     * 
     * 1 to enable, 0 to disable
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolProxySetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolProxySetTraceResponse
     */
	public function protocolProxySetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolProxySetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolProxySetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/proxy/set/trace/{enableOrNot}', \OpenAPI\OpenAPI\Models\Operations\ProtocolProxySetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolProxySetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolProxySetTrace200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}