// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TransferMessageSeverityEnum - Message severity.
type TransferMessageSeverityEnum string

const (
	TransferMessageSeverityEnumMessageSeverityUnspecified TransferMessageSeverityEnum = "MESSAGE_SEVERITY_UNSPECIFIED"
	TransferMessageSeverityEnumInfo                       TransferMessageSeverityEnum = "INFO"
	TransferMessageSeverityEnumWarning                    TransferMessageSeverityEnum = "WARNING"
	TransferMessageSeverityEnumError                      TransferMessageSeverityEnum = "ERROR"
)

func (e TransferMessageSeverityEnum) ToPointer() *TransferMessageSeverityEnum {
	return &e
}

func (e *TransferMessageSeverityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MESSAGE_SEVERITY_UNSPECIFIED":
		fallthrough
	case "INFO":
		fallthrough
	case "WARNING":
		fallthrough
	case "ERROR":
		*e = TransferMessageSeverityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferMessageSeverityEnum: %v", v)
	}
}

// TransferMessage - Represents a user facing message for a particular data transfer run.
type TransferMessage struct {
	// Message text.
	MessageText *string `json:"messageText,omitempty"`
	// Time when message was logged.
	MessageTime *string `json:"messageTime,omitempty"`
	// Message severity.
	Severity *TransferMessageSeverityEnum `json:"severity,omitempty"`
}
