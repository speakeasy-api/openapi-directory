"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import listsearchkeywordimpressionsmonthlyresponse as shared_listsearchkeywordimpressionsmonthlyresponse
from typing import Optional


@dataclasses.dataclass
class BusinessprofileperformanceLocationsSearchkeywordsImpressionsMonthlyListRequest:
    
    parent: str = dataclasses.field(metadata={'path_param': { 'field_name': 'parent', 'style': 'simple', 'explode': False }})
    r"""Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id."""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    monthly_range_end_month_day: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'monthlyRange.endMonth.day', 'style': 'form', 'explode': True }})
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""  
    monthly_range_end_month_month: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'monthlyRange.endMonth.month', 'style': 'form', 'explode': True }})
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""  
    monthly_range_end_month_year: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'monthlyRange.endMonth.year', 'style': 'form', 'explode': True }})
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""  
    monthly_range_start_month_day: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'monthlyRange.startMonth.day', 'style': 'form', 'explode': True }})
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""  
    monthly_range_start_month_month: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'monthlyRange.startMonth.month', 'style': 'form', 'explode': True }})
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""  
    monthly_range_start_month_year: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'monthlyRange.startMonth.year', 'style': 'form', 'explode': True }})
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageSize', 'style': 'form', 'explode': True }})
    r"""Optional. The number of results requested. The default page size is 100. Page size can be set to a maximum of 100."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    r"""Optional. A token indicating the next paginated result to be returned."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    

@dataclasses.dataclass
class BusinessprofileperformanceLocationsSearchkeywordsImpressionsMonthlyListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_search_keyword_impressions_monthly_response: Optional[shared_listsearchkeywordimpressionsmonthlyresponse.ListSearchKeywordImpressionsMonthlyResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    