// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
)

// dependabot - Endpoints to manage Dependabot.
type dependabot struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newDependabot(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *dependabot {
	return &dependabot{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// DependabotAddSelectedRepoToOrgSecret - Add selected repository to an organization secret
// Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#add-selected-repository-to-an-organization-secret - API method documentation
func (s *dependabot) DependabotAddSelectedRepoToOrgSecret(ctx context.Context, request operations.DependabotAddSelectedRepoToOrgSecretRequest) (*operations.DependabotAddSelectedRepoToOrgSecretResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "PUT", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotAddSelectedRepoToOrgSecretResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 204:
		fallthrough
	case httpRes.StatusCode == 409:
	}

	return res, nil
}

// DependabotCreateOrUpdateOrgSecret - Create or update an organization secret
// Creates or updates an organization secret with an encrypted value. Encrypt your secret using
// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
// token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization
// permission to use this endpoint.
//
// #### Example encrypting a secret using Node.js
//
// Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
//
// ```
// const sodium = require('libsodium-wrappers')
// const secret = 'plain-text-secret' // replace with the secret you want to encrypt
// const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
//
// //Check if libsodium is ready and then proceed.
//
//	sodium.ready.then(() => {
//	  // Convert Secret & Base64 key to Uint8Array.
//	  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
//	  let binsec = sodium.from_string(secret)
//
//	  //Encrypt the secret using LibSodium
//	  let encBytes = sodium.crypto_box_seal(binsec, binkey)
//
//	  // Convert encrypted Uint8Array to Base64
//	  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
//
//	  console.log(output)
//	});
//
// ```
//
// #### Example encrypting a secret using Python
//
// Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
//
// ```
// from base64 import b64encode
// from nacl import encoding, public
//
// def encrypt(public_key: str, secret_value: str) -> str:
//
//	"""Encrypt a Unicode string using the public key."""
//	public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
//	sealed_box = public.SealedBox(public_key)
//	encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
//	return b64encode(encrypted).decode("utf-8")
//
// ```
//
// #### Example encrypting a secret using C#
//
// Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
//
// ```
// var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
// var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
//
// var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
//
// Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
// ```
//
// #### Example encrypting a secret using Ruby
//
// Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
//
// ```ruby
// require "rbnacl"
// require "base64"
//
// key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
// public_key = RbNaCl::PublicKey.new(key)
//
// box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
// encrypted_secret = box.encrypt("my_secret")
//
// # Print the base64 encoded secret
// puts Base64.strict_encode64(encrypted_secret)
// ```
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#create-or-update-an-organization-secret - API method documentation
func (s *dependabot) DependabotCreateOrUpdateOrgSecret(ctx context.Context, request operations.DependabotCreateOrUpdateOrgSecretRequest) (*operations.DependabotCreateOrUpdateOrgSecretResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/orgs/{org}/dependabot/secrets/{secret_name}", request.PathParams, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "PUT", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotCreateOrUpdateOrgSecretResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 201:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.EmptyObject = out
		}
	case httpRes.StatusCode == 204:
	}

	return res, nil
}

// DependabotCreateOrUpdateRepoSecret - Create or update a repository secret
// Creates or updates a repository secret with an encrypted value. Encrypt your secret using
// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
// token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository
// permission to use this endpoint.
//
// #### Example encrypting a secret using Node.js
//
// Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
//
// ```
// const sodium = require('libsodium-wrappers')
// const secret = 'plain-text-secret' // replace with the secret you want to encrypt
// const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
//
// //Check if libsodium is ready and then proceed.
//
//	sodium.ready.then(() => {
//	  // Convert Secret & Base64 key to Uint8Array.
//	  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
//	  let binsec = sodium.from_string(secret)
//
//	  //Encrypt the secret using LibSodium
//	  let encBytes = sodium.crypto_box_seal(binsec, binkey)
//
//	  // Convert encrypted Uint8Array to Base64
//	  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
//
//	  console.log(output)
//	});
//
// ```
//
// #### Example encrypting a secret using Python
//
// Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
//
// ```
// from base64 import b64encode
// from nacl import encoding, public
//
// def encrypt(public_key: str, secret_value: str) -> str:
//
//	"""Encrypt a Unicode string using the public key."""
//	public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
//	sealed_box = public.SealedBox(public_key)
//	encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
//	return b64encode(encrypted).decode("utf-8")
//
// ```
//
// #### Example encrypting a secret using C#
//
// Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
//
// ```
// var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
// var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
//
// var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
//
// Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
// ```
//
// #### Example encrypting a secret using Ruby
//
// Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
//
// ```ruby
// require "rbnacl"
// require "base64"
//
// key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
// public_key = RbNaCl::PublicKey.new(key)
//
// box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
// encrypted_secret = box.encrypt("my_secret")
//
// # Print the base64 encoded secret
// puts Base64.strict_encode64(encrypted_secret)
// ```
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#create-or-update-a-repository-secret - API method documentation
func (s *dependabot) DependabotCreateOrUpdateRepoSecret(ctx context.Context, request operations.DependabotCreateOrUpdateRepoSecretRequest) (*operations.DependabotCreateOrUpdateRepoSecretResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}", request.PathParams, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "PUT", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotCreateOrUpdateRepoSecretResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 201:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.EmptyObject = out
		}
	case httpRes.StatusCode == 204:
	}

	return res, nil
}

// DependabotDeleteOrgSecret - Delete an organization secret
// Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#delete-an-organization-secret - API method documentation
func (s *dependabot) DependabotDeleteOrgSecret(ctx context.Context, request operations.DependabotDeleteOrgSecretRequest) (*operations.DependabotDeleteOrgSecretResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/orgs/{org}/dependabot/secrets/{secret_name}", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "DELETE", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotDeleteOrgSecretResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 204:
	}

	return res, nil
}

// DependabotDeleteRepoSecret - Delete a repository secret
// Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#delete-a-repository-secret - API method documentation
func (s *dependabot) DependabotDeleteRepoSecret(ctx context.Context, request operations.DependabotDeleteRepoSecretRequest) (*operations.DependabotDeleteRepoSecretResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "DELETE", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotDeleteRepoSecretResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 204:
	}

	return res, nil
}

// DependabotGetAlert - Get a Dependabot alert
// You must use an access token with the `security_events` scope to use this endpoint with private repositories.
// You can also use tokens with the `public_repo` scope for public repositories only.
// GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#get-a-dependabot-alert - API method documentation
func (s *dependabot) DependabotGetAlert(ctx context.Context, request operations.DependabotGetAlertRequest) (*operations.DependabotGetAlertResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotGetAlertResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.DependabotAlert
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.DependabotAlert = out
		}
	case httpRes.StatusCode == 304:
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.BasicError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.BasicError = out
		}
	}

	return res, nil
}

// DependabotGetOrgPublicKey - Get an organization public key
// Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#get-an-organization-public-key - API method documentation
func (s *dependabot) DependabotGetOrgPublicKey(ctx context.Context, request operations.DependabotGetOrgPublicKeyRequest) (*operations.DependabotGetOrgPublicKeyResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/orgs/{org}/dependabot/secrets/public-key", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotGetOrgPublicKeyResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.DependabotPublicKey
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.DependabotPublicKey = out
		}
	}

	return res, nil
}

// DependabotGetOrgSecret - Get an organization secret
// Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#get-an-organization-secret - API method documentation
func (s *dependabot) DependabotGetOrgSecret(ctx context.Context, request operations.DependabotGetOrgSecretRequest) (*operations.DependabotGetOrgSecretResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/orgs/{org}/dependabot/secrets/{secret_name}", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotGetOrgSecretResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.OrganizationDependabotSecret
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.OrganizationDependabotSecret = out
		}
	}

	return res, nil
}

// DependabotGetRepoPublicKey - Get a repository public key
// Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#get-a-repository-public-key - API method documentation
func (s *dependabot) DependabotGetRepoPublicKey(ctx context.Context, request operations.DependabotGetRepoPublicKeyRequest) (*operations.DependabotGetRepoPublicKeyResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repos/{owner}/{repo}/dependabot/secrets/public-key", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotGetRepoPublicKeyResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.DependabotPublicKey
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.DependabotPublicKey = out
		}
	}

	return res, nil
}

// DependabotGetRepoSecret - Get a repository secret
// Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#get-a-repository-secret - API method documentation
func (s *dependabot) DependabotGetRepoSecret(ctx context.Context, request operations.DependabotGetRepoSecretRequest) (*operations.DependabotGetRepoSecretResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotGetRepoSecretResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.DependabotSecret
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.DependabotSecret = out
		}
	}

	return res, nil
}

// DependabotListAlertsForEnterprise - List Dependabot alerts for an enterprise
// Lists Dependabot alerts for repositories that are owned by the specified enterprise.
// To use this endpoint, you must be a member of the enterprise, and you must use an
// access token with the `repo` scope or `security_events` scope.
// Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.8/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
// https://docs.github.com/enterprise-server@3.8/rest/dependabot/alerts#list-dependabot-alerts-for-an-enterprise - API method documentation
func (s *dependabot) DependabotListAlertsForEnterprise(ctx context.Context, request operations.DependabotListAlertsForEnterpriseRequest) (*operations.DependabotListAlertsForEnterpriseResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/enterprises/{enterprise}/dependabot/alerts", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotListAlertsForEnterpriseResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out []shared.DependabotAlertWithRepository
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.DependabotAlertWithRepositories = out
		}
	case httpRes.StatusCode == 304:
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.BasicError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.BasicError = out
		}
	case httpRes.StatusCode == 422:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.ValidationErrorSimple
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.ValidationErrorSimple = out
		}
	}

	return res, nil
}

// DependabotListAlertsForOrg - List Dependabot alerts for an organization
// Lists Dependabot alerts for an organization.
//
// To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
//
// For public repositories, you may instead use the `public_repo` scope.
//
// GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
// https://docs.github.com/enterprise-server@3.8/rest/dependabot/alerts#list-dependabot-alerts-for-an-organization - API method documentation
func (s *dependabot) DependabotListAlertsForOrg(ctx context.Context, request operations.DependabotListAlertsForOrgRequest) (*operations.DependabotListAlertsForOrgResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/orgs/{org}/dependabot/alerts", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotListAlertsForOrgResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out []shared.DependabotAlertWithRepository
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.DependabotAlertWithRepositories = out
		}
	case httpRes.StatusCode == 304:
	case httpRes.StatusCode == 400:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.BasicError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.BasicError = out
		case utils.MatchContentType(contentType, `application/scim+json`):
			var out *shared.ScimError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.ScimError = out
		}
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.BasicError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.BasicError = out
		}
	case httpRes.StatusCode == 422:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.ValidationErrorSimple
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.ValidationErrorSimple = out
		}
	}

	return res, nil
}

// DependabotListAlertsForRepo - List Dependabot alerts for a repository
// You must use an access token with the `security_events` scope to use this endpoint with private repositories.
// You can also use tokens with the `public_repo` scope for public repositories only.
// GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#list-dependabot-alerts-for-a-repository - API method documentation
func (s *dependabot) DependabotListAlertsForRepo(ctx context.Context, request operations.DependabotListAlertsForRepoRequest) (*operations.DependabotListAlertsForRepoResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repos/{owner}/{repo}/dependabot/alerts", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotListAlertsForRepoResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out []shared.DependabotAlert
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.DependabotAlerts = out
		}
	case httpRes.StatusCode == 304:
	case httpRes.StatusCode == 400:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.BasicError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.BasicError = out
		case utils.MatchContentType(contentType, `application/scim+json`):
			var out *shared.ScimError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.ScimError = out
		}
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.BasicError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.BasicError = out
		}
	case httpRes.StatusCode == 422:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.ValidationErrorSimple
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.ValidationErrorSimple = out
		}
	}

	return res, nil
}

// DependabotListOrgSecrets - List organization secrets
// Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#list-organization-secrets - API method documentation
func (s *dependabot) DependabotListOrgSecrets(ctx context.Context, request operations.DependabotListOrgSecretsRequest) (*operations.DependabotListOrgSecretsResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/orgs/{org}/dependabot/secrets", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotListOrgSecretsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		res.Headers = httpRes.Header

		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.DependabotListOrgSecrets200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.DependabotListOrgSecrets200ApplicationJSONObject = out
		}
	}

	return res, nil
}

// DependabotListRepoSecrets - List repository secrets
// Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#list-repository-secrets - API method documentation
func (s *dependabot) DependabotListRepoSecrets(ctx context.Context, request operations.DependabotListRepoSecretsRequest) (*operations.DependabotListRepoSecretsResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repos/{owner}/{repo}/dependabot/secrets", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotListRepoSecretsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		res.Headers = httpRes.Header

		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.DependabotListRepoSecrets200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.DependabotListRepoSecrets200ApplicationJSONObject = out
		}
	}

	return res, nil
}

// DependabotListSelectedReposForOrgSecret - List selected repositories for an organization secret
// Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret - API method documentation
func (s *dependabot) DependabotListSelectedReposForOrgSecret(ctx context.Context, request operations.DependabotListSelectedReposForOrgSecretRequest) (*operations.DependabotListSelectedReposForOrgSecretResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/orgs/{org}/dependabot/secrets/{secret_name}/repositories", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotListSelectedReposForOrgSecretResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.DependabotListSelectedReposForOrgSecret200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.DependabotListSelectedReposForOrgSecret200ApplicationJSONObject = out
		}
	}

	return res, nil
}

// DependabotRemoveSelectedRepoFromOrgSecret - Remove selected repository from an organization secret
// Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret - API method documentation
func (s *dependabot) DependabotRemoveSelectedRepoFromOrgSecret(ctx context.Context, request operations.DependabotRemoveSelectedRepoFromOrgSecretRequest) (*operations.DependabotRemoveSelectedRepoFromOrgSecretResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "DELETE", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotRemoveSelectedRepoFromOrgSecretResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 204:
		fallthrough
	case httpRes.StatusCode == 409:
	}

	return res, nil
}

// DependabotSetSelectedReposForOrgSecret - Set selected repositories for an organization secret
// Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret - API method documentation
func (s *dependabot) DependabotSetSelectedReposForOrgSecret(ctx context.Context, request operations.DependabotSetSelectedReposForOrgSecretRequest) (*operations.DependabotSetSelectedReposForOrgSecretResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/orgs/{org}/dependabot/secrets/{secret_name}/repositories", request.PathParams, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "PUT", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotSetSelectedReposForOrgSecretResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 204:
	}

	return res, nil
}

// DependabotUpdateAlert - Update a Dependabot alert
// You must use an access token with the `security_events` scope to use this endpoint with private repositories.
// You can also use tokens with the `public_repo` scope for public repositories only.
// GitHub Apps must have **Dependabot alerts** write permission to use this endpoint.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependabot#update-a-dependabot-alert - API method documentation
func (s *dependabot) DependabotUpdateAlert(ctx context.Context, request operations.DependabotUpdateAlertRequest) (*operations.DependabotUpdateAlertResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}", request.PathParams, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependabotUpdateAlertResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.DependabotAlert
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.DependabotAlert = out
		}
	case httpRes.StatusCode == 400:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.BasicError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.BasicError = out
		case utils.MatchContentType(contentType, `application/scim+json`):
			var out *shared.ScimError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.ScimError = out
		}
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		fallthrough
	case httpRes.StatusCode == 409:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.BasicError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.BasicError = out
		}
	case httpRes.StatusCode == 422:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.ValidationErrorSimple
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.ValidationErrorSimple = out
		}
	}

	return res, nil
}
