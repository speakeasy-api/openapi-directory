"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Users:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def directory_users_aliases_delete(self, request: operations.DirectoryUsersAliasesDeleteRequest, security: operations.DirectoryUsersAliasesDeleteSecurity) -> operations.DirectoryUsersAliasesDeleteResponse:
        r"""Removes an alias."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryUsersAliasesDeleteRequest, base_url, '/admin/directory/v1/users/{userKey}/aliases/{alias}', request)
        
        query_params = utils.get_query_params(operations.DirectoryUsersAliasesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersAliasesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def directory_users_aliases_insert(self, request: operations.DirectoryUsersAliasesInsertRequest, security: operations.DirectoryUsersAliasesInsertSecurity) -> operations.DirectoryUsersAliasesInsertResponse:
        r"""Adds an alias."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryUsersAliasesInsertRequest, base_url, '/admin/directory/v1/users/{userKey}/aliases', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "alias", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryUsersAliasesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersAliasesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Alias])
                res.alias = out

        return res

    def directory_users_aliases_list(self, request: operations.DirectoryUsersAliasesListRequest, security: operations.DirectoryUsersAliasesListSecurity) -> operations.DirectoryUsersAliasesListResponse:
        r"""Lists all aliases for a user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryUsersAliasesListRequest, base_url, '/admin/directory/v1/users/{userKey}/aliases', request)
        
        query_params = utils.get_query_params(operations.DirectoryUsersAliasesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersAliasesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Aliases])
                res.aliases = out

        return res

    def directory_users_aliases_watch(self, request: operations.DirectoryUsersAliasesWatchRequest, security: operations.DirectoryUsersAliasesWatchSecurity) -> operations.DirectoryUsersAliasesWatchResponse:
        r"""Watches for changes in users list."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryUsersAliasesWatchRequest, base_url, '/admin/directory/v1/users/{userKey}/aliases/watch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "channel", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryUsersAliasesWatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersAliasesWatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Channel])
                res.channel = out

        return res

    def directory_users_delete(self, request: operations.DirectoryUsersDeleteRequest, security: operations.DirectoryUsersDeleteSecurity) -> operations.DirectoryUsersDeleteResponse:
        r"""Deletes a user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryUsersDeleteRequest, base_url, '/admin/directory/v1/users/{userKey}', request)
        
        query_params = utils.get_query_params(operations.DirectoryUsersDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def directory_users_get(self, request: operations.DirectoryUsersGetRequest, security: operations.DirectoryUsersGetSecurity) -> operations.DirectoryUsersGetResponse:
        r"""Retrieves a user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryUsersGetRequest, base_url, '/admin/directory/v1/users/{userKey}', request)
        
        query_params = utils.get_query_params(operations.DirectoryUsersGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    def directory_users_insert(self, request: operations.DirectoryUsersInsertRequest, security: operations.DirectoryUsersInsertSecurity) -> operations.DirectoryUsersInsertResponse:
        r"""Creates a user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/directory/v1/users'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryUsersInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    def directory_users_list(self, request: operations.DirectoryUsersListRequest, security: operations.DirectoryUsersListSecurity) -> operations.DirectoryUsersListResponse:
        r"""Retrieves a paginated list of either deleted users or all users in a domain."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/directory/v1/users'
        
        query_params = utils.get_query_params(operations.DirectoryUsersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Users])
                res.users = out

        return res

    def directory_users_make_admin(self, request: operations.DirectoryUsersMakeAdminRequest, security: operations.DirectoryUsersMakeAdminSecurity) -> operations.DirectoryUsersMakeAdminResponse:
        r"""Makes a user a super administrator."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryUsersMakeAdminRequest, base_url, '/admin/directory/v1/users/{userKey}/makeAdmin', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_make_admin", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryUsersMakeAdminRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersMakeAdminResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def directory_users_patch(self, request: operations.DirectoryUsersPatchRequest, security: operations.DirectoryUsersPatchSecurity) -> operations.DirectoryUsersPatchResponse:
        r"""Updates a user using patch semantics. The update method should be used instead, because it also supports patch semantics and has better performance. If you're mapping an external identity to a Google identity, use the [`update`](https://developers.google.com/admin-sdk/directory/v1/reference/users/update) method instead of the `patch` method. This method is unable to clear fields that contain repeated objects (`addresses`, `phones`, etc). Use the update method instead."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryUsersPatchRequest, base_url, '/admin/directory/v1/users/{userKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryUsersPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    def directory_users_photos_delete(self, request: operations.DirectoryUsersPhotosDeleteRequest, security: operations.DirectoryUsersPhotosDeleteSecurity) -> operations.DirectoryUsersPhotosDeleteResponse:
        r"""Removes the user's photo."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryUsersPhotosDeleteRequest, base_url, '/admin/directory/v1/users/{userKey}/photos/thumbnail', request)
        
        query_params = utils.get_query_params(operations.DirectoryUsersPhotosDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersPhotosDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def directory_users_photos_get(self, request: operations.DirectoryUsersPhotosGetRequest, security: operations.DirectoryUsersPhotosGetSecurity) -> operations.DirectoryUsersPhotosGetResponse:
        r"""Retrieves the user's photo."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryUsersPhotosGetRequest, base_url, '/admin/directory/v1/users/{userKey}/photos/thumbnail', request)
        
        query_params = utils.get_query_params(operations.DirectoryUsersPhotosGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersPhotosGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserPhoto])
                res.user_photo = out

        return res

    def directory_users_photos_patch(self, request: operations.DirectoryUsersPhotosPatchRequest, security: operations.DirectoryUsersPhotosPatchSecurity) -> operations.DirectoryUsersPhotosPatchResponse:
        r"""Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryUsersPhotosPatchRequest, base_url, '/admin/directory/v1/users/{userKey}/photos/thumbnail', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_photo", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryUsersPhotosPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersPhotosPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserPhoto])
                res.user_photo = out

        return res

    def directory_users_photos_update(self, request: operations.DirectoryUsersPhotosUpdateRequest, security: operations.DirectoryUsersPhotosUpdateSecurity) -> operations.DirectoryUsersPhotosUpdateResponse:
        r"""Adds a photo for the user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryUsersPhotosUpdateRequest, base_url, '/admin/directory/v1/users/{userKey}/photos/thumbnail', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_photo", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryUsersPhotosUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersPhotosUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserPhoto])
                res.user_photo = out

        return res

    def directory_users_sign_out(self, request: operations.DirectoryUsersSignOutRequest, security: operations.DirectoryUsersSignOutSecurity) -> operations.DirectoryUsersSignOutResponse:
        r"""Signs a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryUsersSignOutRequest, base_url, '/admin/directory/v1/users/{userKey}/signOut', request)
        
        query_params = utils.get_query_params(operations.DirectoryUsersSignOutRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersSignOutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def directory_users_undelete(self, request: operations.DirectoryUsersUndeleteRequest, security: operations.DirectoryUsersUndeleteSecurity) -> operations.DirectoryUsersUndeleteResponse:
        r"""Undeletes a deleted user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryUsersUndeleteRequest, base_url, '/admin/directory/v1/users/{userKey}/undelete', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_undelete", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryUsersUndeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersUndeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def directory_users_update(self, request: operations.DirectoryUsersUpdateRequest, security: operations.DirectoryUsersUpdateSecurity) -> operations.DirectoryUsersUpdateResponse:
        r"""Updates a user. This method supports patch semantics, meaning that you only need to include the fields you wish to update. Fields that are not present in the request will be preserved, and fields set to `null` will be cleared. For repeating fields that contain arrays, individual items in the array can't be patched piecemeal; they must be supplied in the request body with the desired values for all items. See the [user accounts guide](https://developers.google.com/admin-sdk/directory/v1/guides/manage-users#update_user) for more information."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryUsersUpdateRequest, base_url, '/admin/directory/v1/users/{userKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryUsersUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    def directory_users_watch(self, request: operations.DirectoryUsersWatchRequest, security: operations.DirectoryUsersWatchSecurity) -> operations.DirectoryUsersWatchResponse:
        r"""Watches for changes in users list."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/directory/v1/users/watch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "channel", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryUsersWatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryUsersWatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Channel])
                res.channel = out

        return res

    