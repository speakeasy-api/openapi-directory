"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConfigManagementGitConfig:
    r"""Git repo configuration for a single cluster."""
    
    gcp_service_account_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gcpServiceAccountEmail'), 'exclude': lambda f: f is None }})
    r"""The GCP Service Account Email used for auth when secret_type is gcpServiceAccount."""  
    https_proxy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpsProxy'), 'exclude': lambda f: f is None }})
    r"""URL for the HTTPS proxy to be used when communicating with the Git repo."""  
    policy_dir: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyDir'), 'exclude': lambda f: f is None }})
    r"""The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository."""  
    secret_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secretType'), 'exclude': lambda f: f is None }})
    r"""Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required."""  
    sync_branch: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syncBranch'), 'exclude': lambda f: f is None }})
    r"""The branch of the repository to sync from. Default: master."""  
    sync_repo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syncRepo'), 'exclude': lambda f: f is None }})
    r"""The URL of the Git repository to use as the source of truth."""  
    sync_rev: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syncRev'), 'exclude': lambda f: f is None }})
    r"""Git revision (tag or hash) to check out. Default HEAD."""  
    sync_wait_secs: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syncWaitSecs'), 'exclude': lambda f: f is None }})
    r"""Period in seconds between consecutive syncs. Default: 15."""  
    