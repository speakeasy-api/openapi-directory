<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 * 
 * https://github.com/Bungie-net/api/wiki/OAuth-Documentation - Our Wiki page about OAuth through Bungie.net.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see https://github.com/Bungie-net/api/wiki/OAuth-Documentation
 */
class SDK
{
	public const SERVERS = [
		'https://www.bungie.net/Platform',
	];
  	
    /**
     * application
     * 
     * @var App $$app
     */
	public App $app;
	
    /**
     * communitycontent
     * 
     * @var CommunityContent $$communityContent
     */
	public CommunityContent $communityContent;
	
    /**
     * content
     * 
     * @var Content $$content
     */
	public Content $content;
	
    /**
     * destiny2
     * 
     * @var Destiny2 $$destiny2
     */
	public Destiny2 $destiny2;
	
    /**
     * fireteam
     * 
     * @var Fireteam $$fireteam
     */
	public Fireteam $fireteam;
	
    /**
     * forum
     * 
     * @var Forum $$forum
     */
	public Forum $forum;
	
    /**
     * groupV2
     * 
     * @var GroupV2 $$groupV2
     */
	public GroupV2 $groupV2;
	
	public Preview $preview;
	
    /**
     * social
     * 
     * @var Social $$social
     */
	public Social $social;
	
    /**
     * tokens
     * 
     * @var Tokens $$tokens
     */
	public Tokens $tokens;
	
    /**
     * trending
     * 
     * @var Trending $$trending
     */
	public Trending $trending;
	
    /**
     * user
     * 
     * @var User $$user
     */
	public User $user;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->app = new App(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->communityContent = new CommunityContent(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->content = new Content(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->destiny2 = new Destiny2(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->fireteam = new Fireteam(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->forum = new Forum(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->groupV2 = new GroupV2(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->preview = new Preview(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->social = new Social(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->tokens = new Tokens(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->trending = new Trending(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->user = new User(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
	
    /**
     * List of available localization cultures
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\DotGetAvailableLocalesResponse
     */
	public function dotGetAvailableLocales(
    ): \OpenAPI\OpenAPI\Models\Operations\DotGetAvailableLocalesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GetAvailableLocales/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DotGetAvailableLocalesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the common settings used by the Bungie.Net environment.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\DotGetCommonSettingsResponse
     */
	public function dotGetCommonSettings(
    ): \OpenAPI\OpenAPI\Models\Operations\DotGetCommonSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Settings/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DotGetCommonSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets any active global alert for display in the forum banners, help pages, etc. Usually used for DOC alerts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DotGetGlobalAlertsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DotGetGlobalAlertsResponse
     */
	public function dotGetGlobalAlerts(
        \OpenAPI\OpenAPI\Models\Operations\DotGetGlobalAlertsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DotGetGlobalAlertsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GlobalAlerts/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DotGetGlobalAlertsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DotGetGlobalAlertsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the user-specific system overrides that should be respected alongside common systems.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\DotGetUserSystemOverridesResponse
     */
	public function dotGetUserSystemOverrides(
    ): \OpenAPI\OpenAPI\Models\Operations\DotGetUserSystemOverridesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/UserSystemOverrides/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DotGetUserSystemOverridesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}