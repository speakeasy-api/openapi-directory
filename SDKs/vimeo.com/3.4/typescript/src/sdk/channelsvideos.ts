/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class ChannelsVideos {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add a specific video to a channel
   */
  addVideoToChannel(
    req: operations.AddVideoToChannelRequest,
    security: operations.AddVideoToChannelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddVideoToChannelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddVideoToChannelRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/channels/{channel_id}/videos/{video_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddVideoToChannelSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddVideoToChannelResponse =
        new operations.AddVideoToChannelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add a list of videos to a channel
   */
  addVideosToChannel(
    req: operations.AddVideosToChannelRequest,
    security: operations.AddVideosToChannelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddVideosToChannelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddVideosToChannelRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/channels/{channel_id}/videos",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddVideosToChannelSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddVideosToChannelResponse =
        new operations.AddVideosToChannelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a specific video from a channel
   */
  deleteVideoFromChannel(
    req: operations.DeleteVideoFromChannelRequest,
    security: operations.DeleteVideoFromChannelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteVideoFromChannelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteVideoFromChannelRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/channels/{channel_id}/videos/{video_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteVideoFromChannelSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteVideoFromChannelResponse =
        new operations.DeleteVideoFromChannelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the channels to which a user can add or remove a specific video
   */
  getAvailableVideoChannels(
    req: operations.GetAvailableVideoChannelsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAvailableVideoChannelsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAvailableVideoChannelsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/videos/{video_id}/available_channels",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAvailableVideoChannelsResponse =
        new operations.GetAvailableVideoChannelsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.channel+json`
            )
          ) {
            res.channels = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.channels = utils.objectToClass(
              httpRes?.data,
              shared.Channel,
              resFieldDepth
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.channel+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a specific video in a channel
   *
   * @remarks
   * This method returns a specific video in a channel. You can use it to determine whether the video is in the channel.
   */
  getChannelVideo(
    req: operations.GetChannelVideoRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetChannelVideoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetChannelVideoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/channels/{channel_id}/videos/{video_id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetChannelVideoResponse =
        new operations.GetChannelVideoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.video+json`
            )
          ) {
            res.video = utils.objectToClass(httpRes?.data, shared.Video);
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.video+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the videos in a channel
   */
  getChannelVideos(
    req: operations.GetChannelVideosRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetChannelVideosResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetChannelVideosRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/channels/{channel_id}/videos",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetChannelVideosResponse =
        new operations.GetChannelVideosResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.video+json`
            )
          ) {
            res.videos = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.videos = utils.objectToClass(
              httpRes?.data,
              shared.Video,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [400, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.video+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a list of videos from a channel
   */
  removeVideosFromChannel(
    req: operations.RemoveVideosFromChannelRequest,
    security: operations.RemoveVideosFromChannelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveVideosFromChannelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveVideosFromChannelRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/channels/{channel_id}/videos",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemoveVideosFromChannelSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveVideosFromChannelResponse =
        new operations.RemoveVideosFromChannelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.video = utils.objectToClass(httpRes?.data, shared.Video);
          }
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }
}
