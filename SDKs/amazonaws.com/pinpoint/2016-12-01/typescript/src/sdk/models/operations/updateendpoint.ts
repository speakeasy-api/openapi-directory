/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Specifies the channel type and other settings for an endpoint.
 */
export class UpdateEndpointRequestBodyEndpointRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Address" })
  address?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Attributes" })
  attributes?: Record<string, string[]>;

  @SpeakeasyMetadata()
  @Expose({ name: "ChannelType" })
  channelType?: shared.ChannelTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Demographic" })
  @Type(() => shared.EndpointDemographic)
  demographic?: shared.EndpointDemographic;

  @SpeakeasyMetadata()
  @Expose({ name: "EffectiveDate" })
  effectiveDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "EndpointStatus" })
  endpointStatus?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Location" })
  @Type(() => shared.EndpointLocation)
  location?: shared.EndpointLocation;

  @SpeakeasyMetadata()
  @Expose({ name: "Metrics" })
  metrics?: Record<string, number>;

  @SpeakeasyMetadata()
  @Expose({ name: "OptOut" })
  optOut?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RequestId" })
  requestId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "User" })
  @Type(() => shared.EndpointUser)
  user?: shared.EndpointUser;
}

export class UpdateEndpointRequestBody extends SpeakeasyBase {
  /**
   * Specifies the channel type and other settings for an endpoint.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EndpointRequest" })
  @Type(() => UpdateEndpointRequestBodyEndpointRequest)
  endpointRequest: UpdateEndpointRequestBodyEndpointRequest;
}

export class UpdateEndpointRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateEndpointRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=application-id",
  })
  applicationId: string;

  /**
   * The unique identifier for the endpoint.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=endpoint-id",
  })
  endpointId: string;
}

export class UpdateEndpointResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * ForbiddenException
   */
  @SpeakeasyMetadata()
  forbiddenException?: any;

  /**
   * InternalServerErrorException
   */
  @SpeakeasyMetadata()
  internalServerErrorException?: any;

  /**
   * MethodNotAllowedException
   */
  @SpeakeasyMetadata()
  methodNotAllowedException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  /**
   * PayloadTooLargeException
   */
  @SpeakeasyMetadata()
  payloadTooLargeException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateEndpointResponse?: shared.UpdateEndpointResponse;
}
