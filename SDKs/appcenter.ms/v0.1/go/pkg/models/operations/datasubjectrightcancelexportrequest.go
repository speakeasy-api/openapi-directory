// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type DataSubjectRightCancelExportRequestSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type DataSubjectRightCancelExportRequestRequest struct {
	// Unique request ID (GUID)
	Token string `pathParam:"style=simple,explode=false,name=token"`
}

type DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnum string

const (
	DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnumBadRequest          DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnumConflict            DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnum = "Conflict"
	DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnumNotAcceptable       DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnumNotFound            DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnum = "NotFound"
	DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnumInternalServerError DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnumUnauthorized        DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnumTooManyRequests     DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type DataSubjectRightCancelExportRequestDefaultApplicationJSONError struct {
	Code    DataSubjectRightCancelExportRequestDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                                 `json:"message"`
}

// DataSubjectRightCancelExportRequestDefaultApplicationJSON - Error code with reason
type DataSubjectRightCancelExportRequestDefaultApplicationJSON struct {
	Error DataSubjectRightCancelExportRequestDefaultApplicationJSONError `json:"error"`
}

type DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnum string

const (
	DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnumBadRequest          DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnum = "BadRequest"
	DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnumConflict            DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnum = "Conflict"
	DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnumNotAcceptable       DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnum = "NotAcceptable"
	DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnumNotFound            DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnum = "NotFound"
	DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnumInternalServerError DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnum = "InternalServerError"
	DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnumUnauthorized        DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnum = "Unauthorized"
	DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnumTooManyRequests     DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnum: %s", s)
	}
}

type DataSubjectRightCancelExportRequest503ApplicationJSONError struct {
	Code    DataSubjectRightCancelExportRequest503ApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                             `json:"message"`
}

// DataSubjectRightCancelExportRequest503ApplicationJSON - Cancel export request cannot be processed yet.
type DataSubjectRightCancelExportRequest503ApplicationJSON struct {
	Error DataSubjectRightCancelExportRequest503ApplicationJSONError `json:"error"`
}

// DataSubjectRightCancelExportRequest202ApplicationJSON - Data subject right cancel export request has been accepted.
type DataSubjectRightCancelExportRequest202ApplicationJSON struct {
	// ISO 8601 format timestamp of when request was created.
	CreatedAt time.Time `json:"createdAt"`
	// Unique request identifier
	Token string `json:"token"`
}

type DataSubjectRightCancelExportRequestResponse struct {
	ContentType string
	// Data subject right cancel export request has been accepted.
	DataSubjectRightCancelExportRequest202ApplicationJSONObject *DataSubjectRightCancelExportRequest202ApplicationJSON
	// Cancel export request cannot be processed yet.
	DataSubjectRightCancelExportRequest503ApplicationJSONObject *DataSubjectRightCancelExportRequest503ApplicationJSON
	// Error code with reason
	DataSubjectRightCancelExportRequestDefaultApplicationJSONObject *DataSubjectRightCancelExportRequestDefaultApplicationJSON
	Headers                                                         map[string][]string
	StatusCode                                                      int
	RawResponse                                                     *http.Response
}
