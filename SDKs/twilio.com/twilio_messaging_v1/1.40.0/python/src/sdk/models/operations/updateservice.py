"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import messaging_v1_service as shared_messaging_v1_service
from ..shared import service_enum_scan_message_content_enum as shared_service_enum_scan_message_content_enum
from enum import Enum
from typing import Optional

UPDATE_SERVICE_SERVERS = [
	"https://messaging.twilio.com",
]


@dataclasses.dataclass
class UpdateServiceSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class UpdateServiceUpdateServiceRequestFallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `fallback_url`. Can be: `GET` or `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestInboundMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `inbound_request_url`. Can be `GET` or `POST` and the default is `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclasses.dataclass
class UpdateServiceUpdateServiceRequest:
    
    area_code_geomatch: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AreaCodeGeomatch' }})
    r"""Whether to enable [Area Code Geomatch](https://www.twilio.com/docs/sms/services#area-code-geomatch) on the Service Instance."""  
    fallback_method: Optional[UpdateServiceUpdateServiceRequestFallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FallbackMethod' }})
    r"""The HTTP method we should use to call `fallback_url`. Can be: `GET` or `POST`."""  
    fallback_to_long_code: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FallbackToLongCode' }})
    r"""Whether to enable [Fallback to Long Code](https://www.twilio.com/docs/sms/services#fallback-to-long-code) for messages sent through the Service instance."""  
    fallback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FallbackUrl' }})
    r"""The URL that we call using `fallback_method` if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `fallback_url` defined for the Messaging Service."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FriendlyName' }})
    r"""A descriptive string that you create to describe the resource. It can be up to 64 characters long."""  
    inbound_method: Optional[UpdateServiceUpdateServiceRequestInboundMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'InboundMethod' }})
    r"""The HTTP method we should use to call `inbound_request_url`. Can be `GET` or `POST` and the default is `POST`."""  
    inbound_request_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'InboundRequestUrl' }})
    r"""The URL we call using `inbound_method` when a message is received by any phone number or short code in the Service. When this property is `null`, receiving inbound messages is disabled. All messages sent to the Twilio phone number or short code will not be logged and received on the Account. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `inbound_request_url` defined for the Messaging Service."""  
    mms_converter: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MmsConverter' }})
    r"""Whether to enable the [MMS Converter](https://www.twilio.com/docs/sms/services#mms-converter) for messages sent through the Service instance."""  
    scan_message_content: Optional[shared_service_enum_scan_message_content_enum.ServiceEnumScanMessageContentEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ScanMessageContent' }})  
    smart_encoding: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SmartEncoding' }})
    r"""Whether to enable [Smart Encoding](https://www.twilio.com/docs/sms/services#smart-encoding) for messages sent through the Service instance."""  
    status_callback: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StatusCallback' }})
    r"""The URL we should call to [pass status updates](https://www.twilio.com/docs/sms/api/message-resource#message-status-values) about message delivery."""  
    sticky_sender: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StickySender' }})
    r"""Whether to enable [Sticky Sender](https://www.twilio.com/docs/sms/services#sticky-sender) on the Service instance."""  
    synchronous_validation: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SynchronousValidation' }})
    r"""Reserved."""  
    usecase: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Usecase' }})
    r"""A string that describes the scenario in which the Messaging Service will be used. Examples: [notification, marketing, verification, poll ..]"""  
    use_inbound_webhook_on_number: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'UseInboundWebhookOnNumber' }})
    r"""A boolean value that indicates either the webhook url configured on the phone number will be used or `inbound_request_url`/`fallback_url` url will be called when a message is received from the phone number. If this field is enabled then the webhook url defined on the phone number will override the `inbound_request_url`/`fallback_url` defined for the Messaging Service."""  
    validity_period: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ValidityPeriod' }})
    r"""How long, in seconds, messages sent from the Service are valid. Can be an integer from `1` to `14,400`."""  
    

@dataclasses.dataclass
class UpdateServiceRequest:
    
    sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Sid', 'style': 'simple', 'explode': False }})
    r"""The SID of the Service resource to update."""  
    request_body: Optional[UpdateServiceUpdateServiceRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateServiceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    messaging_v1_service: Optional[shared_messaging_v1_service.MessagingV1Service] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    