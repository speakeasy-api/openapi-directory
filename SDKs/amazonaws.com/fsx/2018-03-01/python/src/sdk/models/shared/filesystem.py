"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import administrativeaction as shared_administrativeaction
from ..shared import filesystemfailuredetails as shared_filesystemfailuredetails
from ..shared import filesystemlifecycle_enum as shared_filesystemlifecycle_enum
from ..shared import filesystemtype_enum as shared_filesystemtype_enum
from ..shared import lustrefilesystemconfiguration as shared_lustrefilesystemconfiguration
from ..shared import ontapfilesystemconfiguration as shared_ontapfilesystemconfiguration
from ..shared import openzfsfilesystemconfiguration as shared_openzfsfilesystemconfiguration
from ..shared import storagetype_enum as shared_storagetype_enum
from ..shared import tag as shared_tag
from ..shared import windowsfilesystemconfiguration as shared_windowsfilesystemconfiguration
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FileSystem:
    r"""A description of a specific Amazon FSx file system."""
    
    administrative_actions: Optional[list[shared_administrativeaction.AdministrativeAction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdministrativeActions'), 'exclude': lambda f: f is None }})  
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    dns_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DNSName'), 'exclude': lambda f: f is None }})  
    failure_details: Optional[shared_filesystemfailuredetails.FileSystemFailureDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureDetails'), 'exclude': lambda f: f is None }})
    r"""A structure providing details of any failures that occurred."""  
    file_system_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileSystemId'), 'exclude': lambda f: f is None }})  
    file_system_type: Optional[shared_filesystemtype_enum.FileSystemTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileSystemType'), 'exclude': lambda f: f is None }})  
    file_system_type_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileSystemTypeVersion'), 'exclude': lambda f: f is None }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})  
    lifecycle: Optional[shared_filesystemlifecycle_enum.FileSystemLifecycleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Lifecycle'), 'exclude': lambda f: f is None }})  
    lustre_configuration: Optional[shared_lustrefilesystemconfiguration.LustreFileSystemConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LustreConfiguration'), 'exclude': lambda f: f is None }})
    r"""The configuration for the Amazon FSx for Lustre file system."""  
    network_interface_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkInterfaceIds'), 'exclude': lambda f: f is None }})  
    ontap_configuration: Optional[shared_ontapfilesystemconfiguration.OntapFileSystemConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OntapConfiguration'), 'exclude': lambda f: f is None }})  
    open_zfs_configuration: Optional[shared_openzfsfilesystemconfiguration.OpenZFSFileSystemConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenZFSConfiguration'), 'exclude': lambda f: f is None }})  
    owner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OwnerId'), 'exclude': lambda f: f is None }})  
    resource_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceARN'), 'exclude': lambda f: f is None }})  
    storage_capacity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StorageCapacity'), 'exclude': lambda f: f is None }})  
    storage_type: Optional[shared_storagetype_enum.StorageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StorageType'), 'exclude': lambda f: f is None }})  
    subnet_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubnetIds'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    vpc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcId'), 'exclude': lambda f: f is None }})  
    windows_configuration: Optional[shared_windowsfilesystemconfiguration.WindowsFileSystemConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WindowsConfiguration'), 'exclude': lambda f: f is None }})  
    