// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetFirewallsSortEnum - Can be used multiple times.
type GetFirewallsSortEnum string

const (
	GetFirewallsSortEnumID          GetFirewallsSortEnum = "id"
	GetFirewallsSortEnumIDAsc       GetFirewallsSortEnum = "id:asc"
	GetFirewallsSortEnumIDDesc      GetFirewallsSortEnum = "id:desc"
	GetFirewallsSortEnumName        GetFirewallsSortEnum = "name"
	GetFirewallsSortEnumNameAsc     GetFirewallsSortEnum = "name:asc"
	GetFirewallsSortEnumNameDesc    GetFirewallsSortEnum = "name:desc"
	GetFirewallsSortEnumCreated     GetFirewallsSortEnum = "created"
	GetFirewallsSortEnumCreatedAsc  GetFirewallsSortEnum = "created:asc"
	GetFirewallsSortEnumCreatedDesc GetFirewallsSortEnum = "created:desc"
)

func (e *GetFirewallsSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "id":
		fallthrough
	case "id:asc":
		fallthrough
	case "id:desc":
		fallthrough
	case "name":
		fallthrough
	case "name:asc":
		fallthrough
	case "name:desc":
		fallthrough
	case "created":
		fallthrough
	case "created:asc":
		fallthrough
	case "created:desc":
		*e = GetFirewallsSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallsSortEnum: %s", s)
	}
}

type GetFirewallsRequest struct {
	// Can be used to filter resources by labels. The response will only contain resources matching the label selector.
	LabelSelector *string `queryParam:"style=form,explode=true,name=label_selector"`
	// Can be used to filter resources by their name. The response will only contain the resources matching the specified name
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Can be used multiple times.
	Sort *GetFirewallsSortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type GetFirewallsFirewallsResponseFirewallAppliedToAppliedToResourcesServer struct {
	// ID of the Resource
	ID int64 `json:"id"`
}

// GetFirewallsFirewallsResponseFirewallAppliedToAppliedToResourcesTypeEnum - Type of resource referenced
type GetFirewallsFirewallsResponseFirewallAppliedToAppliedToResourcesTypeEnum string

const (
	GetFirewallsFirewallsResponseFirewallAppliedToAppliedToResourcesTypeEnumServer GetFirewallsFirewallsResponseFirewallAppliedToAppliedToResourcesTypeEnum = "server"
)

func (e *GetFirewallsFirewallsResponseFirewallAppliedToAppliedToResourcesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "server":
		*e = GetFirewallsFirewallsResponseFirewallAppliedToAppliedToResourcesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallsFirewallsResponseFirewallAppliedToAppliedToResourcesTypeEnum: %s", s)
	}
}

type GetFirewallsFirewallsResponseFirewallAppliedToAppliedToResources struct {
	Server *GetFirewallsFirewallsResponseFirewallAppliedToAppliedToResourcesServer `json:"server,omitempty"`
	// Type of resource referenced
	Type *GetFirewallsFirewallsResponseFirewallAppliedToAppliedToResourcesTypeEnum `json:"type,omitempty"`
}

type GetFirewallsFirewallsResponseFirewallAppliedToLabelSelector struct {
	// Label selector
	Selector string `json:"selector"`
}

type GetFirewallsFirewallsResponseFirewallAppliedToServer struct {
	// ID of the Resource
	ID int64 `json:"id"`
}

// GetFirewallsFirewallsResponseFirewallAppliedToTypeEnum - Type of resource referenced
type GetFirewallsFirewallsResponseFirewallAppliedToTypeEnum string

const (
	GetFirewallsFirewallsResponseFirewallAppliedToTypeEnumServer        GetFirewallsFirewallsResponseFirewallAppliedToTypeEnum = "server"
	GetFirewallsFirewallsResponseFirewallAppliedToTypeEnumLabelSelector GetFirewallsFirewallsResponseFirewallAppliedToTypeEnum = "label_selector"
)

func (e *GetFirewallsFirewallsResponseFirewallAppliedToTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "server":
		fallthrough
	case "label_selector":
		*e = GetFirewallsFirewallsResponseFirewallAppliedToTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallsFirewallsResponseFirewallAppliedToTypeEnum: %s", s)
	}
}

type GetFirewallsFirewallsResponseFirewallAppliedTo struct {
	AppliedToResources []GetFirewallsFirewallsResponseFirewallAppliedToAppliedToResources `json:"applied_to_resources,omitempty"`
	LabelSelector      *GetFirewallsFirewallsResponseFirewallAppliedToLabelSelector       `json:"label_selector,omitempty"`
	Server             *GetFirewallsFirewallsResponseFirewallAppliedToServer              `json:"server,omitempty"`
	// Type of resource referenced
	Type GetFirewallsFirewallsResponseFirewallAppliedToTypeEnum `json:"type"`
}

// GetFirewallsFirewallsResponseFirewallRuleDirectionEnum - Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
type GetFirewallsFirewallsResponseFirewallRuleDirectionEnum string

const (
	GetFirewallsFirewallsResponseFirewallRuleDirectionEnumIn  GetFirewallsFirewallsResponseFirewallRuleDirectionEnum = "in"
	GetFirewallsFirewallsResponseFirewallRuleDirectionEnumOut GetFirewallsFirewallsResponseFirewallRuleDirectionEnum = "out"
)

func (e *GetFirewallsFirewallsResponseFirewallRuleDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "in":
		fallthrough
	case "out":
		*e = GetFirewallsFirewallsResponseFirewallRuleDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallsFirewallsResponseFirewallRuleDirectionEnum: %s", s)
	}
}

// GetFirewallsFirewallsResponseFirewallRuleProtocolEnum - Type of traffic to allow
type GetFirewallsFirewallsResponseFirewallRuleProtocolEnum string

const (
	GetFirewallsFirewallsResponseFirewallRuleProtocolEnumTCP  GetFirewallsFirewallsResponseFirewallRuleProtocolEnum = "tcp"
	GetFirewallsFirewallsResponseFirewallRuleProtocolEnumUDP  GetFirewallsFirewallsResponseFirewallRuleProtocolEnum = "udp"
	GetFirewallsFirewallsResponseFirewallRuleProtocolEnumIcmp GetFirewallsFirewallsResponseFirewallRuleProtocolEnum = "icmp"
	GetFirewallsFirewallsResponseFirewallRuleProtocolEnumEsp  GetFirewallsFirewallsResponseFirewallRuleProtocolEnum = "esp"
	GetFirewallsFirewallsResponseFirewallRuleProtocolEnumGre  GetFirewallsFirewallsResponseFirewallRuleProtocolEnum = "gre"
)

func (e *GetFirewallsFirewallsResponseFirewallRuleProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tcp":
		fallthrough
	case "udp":
		fallthrough
	case "icmp":
		fallthrough
	case "esp":
		fallthrough
	case "gre":
		*e = GetFirewallsFirewallsResponseFirewallRuleProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallsFirewallsResponseFirewallRuleProtocolEnum: %s", s)
	}
}

type GetFirewallsFirewallsResponseFirewallRule struct {
	// Description of the Rule
	Description *string `json:"description,omitempty"`
	// List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
	DestinationIps []string `json:"destination_ips,omitempty"`
	// Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
	Direction GetFirewallsFirewallsResponseFirewallRuleDirectionEnum `json:"direction"`
	// Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.
	Port *string `json:"port,omitempty"`
	// Type of traffic to allow
	Protocol GetFirewallsFirewallsResponseFirewallRuleProtocolEnum `json:"protocol"`
	// List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
	SourceIps []string `json:"source_ips,omitempty"`
}

type GetFirewallsFirewallsResponseFirewall struct {
	AppliedTo []GetFirewallsFirewallsResponseFirewallAppliedTo `json:"applied_to"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// ID of the Resource
	ID int64 `json:"id"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels,omitempty"`
	// Name of the Resource. Must be unique per Project.
	Name  string                                      `json:"name"`
	Rules []GetFirewallsFirewallsResponseFirewallRule `json:"rules"`
}

type GetFirewallsFirewallsResponseMetaPagination struct {
	// ID of the last page available. Can be null if the current page is the last one.
	LastPage float64 `json:"last_page"`
	// ID of the next page. Can be null if the current page is the last one.
	NextPage float64 `json:"next_page"`
	// Current page number
	Page float64 `json:"page"`
	// Maximum number of items shown per page in the response
	PerPage float64 `json:"per_page"`
	// ID of the previous page. Can be null if the current page is the first one.
	PreviousPage float64 `json:"previous_page"`
	// The total number of entries that exist in the database for this query. Nullable if unknown.
	TotalEntries float64 `json:"total_entries"`
}

type GetFirewallsFirewallsResponseMeta struct {
	Pagination GetFirewallsFirewallsResponseMetaPagination `json:"pagination"`
}

// GetFirewallsFirewallsResponse - The `firewalls` key contains an array of Firewall objects
type GetFirewallsFirewallsResponse struct {
	Firewalls []GetFirewallsFirewallsResponseFirewall `json:"firewalls"`
	Meta      *GetFirewallsFirewallsResponseMeta      `json:"meta,omitempty"`
}

type GetFirewallsResponse struct {
	ContentType string
	// The `firewalls` key contains an array of Firewall objects
	FirewallsResponse *GetFirewallsFirewallsResponse
	StatusCode        int
	RawResponse       *http.Response
}
