/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ObservabilityConfigurationStatusEnum } from "./observabilityconfigurationstatusenum";
import { TraceConfiguration } from "./traceconfiguration";
import { Expose, Transform, Type } from "class-transformer";

/**
 * <p>Describes an App Runner observability configuration resource. Multiple revisions of a configuration have the same <code>ObservabilityConfigurationName</code> and different <code>ObservabilityConfigurationRevision</code> values.</p> <p>The resource is designed to configure multiple features (currently one feature, tracing). This type contains optional members that describe the configuration of these features (currently one member, <code>TraceConfiguration</code>). If a feature member isn't specified, the feature isn't enabled.</p>
 */
export class ObservabilityConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CreatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "DeletedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  deletedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Latest" })
  latest?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "ObservabilityConfigurationArn" })
  observabilityConfigurationArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ObservabilityConfigurationName" })
  observabilityConfigurationName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ObservabilityConfigurationRevision" })
  observabilityConfigurationRevision?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: ObservabilityConfigurationStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "TraceConfiguration" })
  @Type(() => TraceConfiguration)
  traceConfiguration?: TraceConfiguration;
}
