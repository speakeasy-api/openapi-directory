<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Bidders 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Watches all creatives pertaining to a bidder. It is sufficient to invoke this endpoint once per bidder. A Pub/Sub topic will be created and notifications will be pushed to the topic when any of the bidder's creatives change status. All of the bidder's service accounts will have access to read from the topic. Subsequent invocations of this method will return the existing Pub/Sub configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersCreativesWatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersCreativesWatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersCreativesWatchResponse
     */
	public function realtimebiddingBiddersCreativesWatch(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersCreativesWatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersCreativesWatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersCreativesWatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/creatives:watch', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersCreativesWatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersCreativesWatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersCreativesWatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->watchCreativesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WatchCreativesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the bidder's endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersEndpointsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersEndpointsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersEndpointsListResponse
     */
	public function realtimebiddingBiddersEndpointsList(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersEndpointsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersEndpointsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersEndpointsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/endpoints', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersEndpointsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersEndpointsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersEndpointsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEndpointsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEndpointsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the bidder accounts that belong to the caller.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersListResponse
     */
	public function realtimebiddingBiddersList(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/bidders');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBiddersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListBiddersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Activates a pretargeting configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsActivateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsActivateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsActivateResponse
     */
	public function realtimebiddingBiddersPretargetingConfigsActivate(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsActivateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsActivateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsActivateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:activate', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsActivateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsActivateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsActivateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pretargetingConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PretargetingConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds targeted apps to the pretargeting configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedAppsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedAppsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedAppsResponse
     */
	public function realtimebiddingBiddersPretargetingConfigsAddTargetedApps(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedAppsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedAppsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedAppsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{pretargetingConfig}:addTargetedApps', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedAppsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addTargetedAppsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedAppsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedAppsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pretargetingConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PretargetingConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds targeted publishers to the pretargeting config.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedPublishersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedPublishersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedPublishersResponse
     */
	public function realtimebiddingBiddersPretargetingConfigsAddTargetedPublishers(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedPublishersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedPublishersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedPublishersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{pretargetingConfig}:addTargetedPublishers', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedPublishersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addTargetedPublishersRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedPublishersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedPublishersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pretargetingConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PretargetingConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds targeted sites to the pretargeting configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedSitesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedSitesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedSitesResponse
     */
	public function realtimebiddingBiddersPretargetingConfigsAddTargetedSites(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedSitesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedSitesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedSitesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{pretargetingConfig}:addTargetedSites', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedSitesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addTargetedSitesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedSitesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsAddTargetedSitesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pretargetingConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PretargetingConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a pretargeting configuration. A pretargeting configuration's state (PretargetingConfig.state) is active upon creation, and it will start to affect traffic shortly after. A bidder may create a maximum of 10 pretargeting configurations. Attempts to exceed this maximum results in a 400 bad request error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsCreateResponse
     */
	public function realtimebiddingBiddersPretargetingConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/pretargetingConfigs', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "pretargetingConfigInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pretargetingConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PretargetingConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a pretargeting configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsDeleteResponse
     */
	public function realtimebiddingBiddersPretargetingConfigsDelete(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all pretargeting configurations for a single bidder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsListResponse
     */
	public function realtimebiddingBiddersPretargetingConfigsList(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/pretargetingConfigs', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPretargetingConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPretargetingConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes targeted apps from the pretargeting configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsResponse
     */
	public function realtimebiddingBiddersPretargetingConfigsRemoveTargetedApps(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{pretargetingConfig}:removeTargetedApps', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "removeTargetedAppsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pretargetingConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PretargetingConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes targeted publishers from the pretargeting config.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersResponse
     */
	public function realtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishers(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{pretargetingConfig}:removeTargetedPublishers', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "removeTargetedPublishersRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pretargetingConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PretargetingConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes targeted sites from the pretargeting configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesResponse
     */
	public function realtimebiddingBiddersPretargetingConfigsRemoveTargetedSites(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{pretargetingConfig}:removeTargetedSites', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "removeTargetedSitesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pretargetingConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PretargetingConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Suspends a pretargeting configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsSuspendRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsSuspendSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsSuspendResponse
     */
	public function realtimebiddingBiddersPretargetingConfigsSuspend(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsSuspendRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsSuspendSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsSuspendResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:suspend', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsSuspendRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsSuspendRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPretargetingConfigsSuspendResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pretargetingConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PretargetingConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Batch approves multiple publisher connections.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchApproveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchApproveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchApproveResponse
     */
	public function realtimebiddingBiddersPublisherConnectionsBatchApprove(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchApproveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchApproveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchApproveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/publisherConnections:batchApprove', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchApproveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchApprovePublisherConnectionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchApproveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchApproveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchApprovePublisherConnectionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchApprovePublisherConnectionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Batch rejects multiple publisher connections.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchRejectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchRejectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchRejectResponse
     */
	public function realtimebiddingBiddersPublisherConnectionsBatchReject(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchRejectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchRejectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchRejectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/publisherConnections:batchReject', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchRejectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchRejectPublisherConnectionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchRejectRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsBatchRejectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchRejectPublisherConnectionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchRejectPublisherConnectionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists publisher connections for a given bidder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsListResponse
     */
	public function realtimebiddingBiddersPublisherConnectionsList(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/publisherConnections', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBiddersPublisherConnectionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPublisherConnectionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPublisherConnectionsResponse', 'json');
            }
        }

        return $response;
    }
}