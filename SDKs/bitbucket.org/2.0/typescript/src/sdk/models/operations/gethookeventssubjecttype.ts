/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetHookEventsSubjectTypeSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
  })
  apiKey?: string;

  @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic" })
  basic?: shared.SchemeBasic;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2?: string;
}

/**
 * A resource or subject type.
 */
export enum GetHookEventsSubjectTypeSubjectTypeEnum {
  Repository = "repository",
  Workspace = "workspace",
}

export class GetHookEventsSubjectTypeRequest extends SpeakeasyBase {
  /**
   * A resource or subject type.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=subject_type",
  })
  subjectType: GetHookEventsSubjectTypeSubjectTypeEnum;
}

export class GetHookEventsSubjectTypeResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * If an invalid `{subject_type}` value was specified.
   */
  @SpeakeasyMetadata()
  error?: Record<string, any>;

  /**
   * A paginated list of webhook types available to subscribe on.
   */
  @SpeakeasyMetadata()
  paginatedHookEvents?: shared.PaginatedHookEvents;
}
