<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class InstanceTemplates 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves the list of all InstanceTemplates resources, regional and global, available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesAggregatedListResponse
     */
	public function computeInstanceTemplatesAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/instanceTemplates', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instanceTemplateAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstanceTemplateAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified instance template. Deleting an instance template is permanent and cannot be undone. It is not possible to delete templates that are already in use by a managed instance group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesDeleteResponse
     */
	public function computeInstanceTemplatesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/instanceTemplates/{instanceTemplate}', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified instance template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetResponse
     */
	public function computeInstanceTemplatesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/instanceTemplates/{instanceTemplate}', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instanceTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstanceTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetIamPolicyResponse
     */
	public function computeInstanceTemplatesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an instance template in the specified project using the data that is included in the request. If you are creating a new template to update an existing instance group, your new instance template must use the same network or, if applicable, the same subnetwork as the original template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesInsertResponse
     */
	public function computeInstanceTemplatesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/instanceTemplates', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceTemplate", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of instance templates that are contained within the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesListResponse
     */
	public function computeInstanceTemplatesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/instanceTemplates', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instanceTemplateList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstanceTemplateList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesSetIamPolicyResponse
     */
	public function computeInstanceTemplatesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "globalSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesTestIamPermissionsResponse
     */
	public function computeInstanceTemplatesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceTemplatesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}