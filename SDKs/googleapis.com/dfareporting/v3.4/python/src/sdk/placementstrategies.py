"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PlacementStrategies:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dfareporting_placement_strategies_delete(self, request: operations.DfareportingPlacementStrategiesDeleteRequest, security: operations.DfareportingPlacementStrategiesDeleteSecurity) -> operations.DfareportingPlacementStrategiesDeleteResponse:
        r"""Deletes an existing placement strategy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingPlacementStrategiesDeleteRequest, base_url, '/userprofiles/{profileId}/placementStrategies/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingPlacementStrategiesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingPlacementStrategiesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dfareporting_placement_strategies_get(self, request: operations.DfareportingPlacementStrategiesGetRequest, security: operations.DfareportingPlacementStrategiesGetSecurity) -> operations.DfareportingPlacementStrategiesGetResponse:
        r"""Gets one placement strategy by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingPlacementStrategiesGetRequest, base_url, '/userprofiles/{profileId}/placementStrategies/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingPlacementStrategiesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingPlacementStrategiesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlacementStrategy])
                res.placement_strategy = out

        return res

    def dfareporting_placement_strategies_insert(self, request: operations.DfareportingPlacementStrategiesInsertRequest, security: operations.DfareportingPlacementStrategiesInsertSecurity) -> operations.DfareportingPlacementStrategiesInsertResponse:
        r"""Inserts a new placement strategy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingPlacementStrategiesInsertRequest, base_url, '/userprofiles/{profileId}/placementStrategies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "placement_strategy", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingPlacementStrategiesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingPlacementStrategiesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlacementStrategy])
                res.placement_strategy = out

        return res

    def dfareporting_placement_strategies_list(self, request: operations.DfareportingPlacementStrategiesListRequest, security: operations.DfareportingPlacementStrategiesListSecurity) -> operations.DfareportingPlacementStrategiesListResponse:
        r"""Retrieves a list of placement strategies, possibly filtered. This method supports paging."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingPlacementStrategiesListRequest, base_url, '/userprofiles/{profileId}/placementStrategies', request)
        
        query_params = utils.get_query_params(operations.DfareportingPlacementStrategiesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingPlacementStrategiesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlacementStrategiesListResponse])
                res.placement_strategies_list_response = out

        return res

    def dfareporting_placement_strategies_patch(self, request: operations.DfareportingPlacementStrategiesPatchRequest, security: operations.DfareportingPlacementStrategiesPatchSecurity) -> operations.DfareportingPlacementStrategiesPatchResponse:
        r"""Updates an existing placement strategy. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingPlacementStrategiesPatchRequest, base_url, '/userprofiles/{profileId}/placementStrategies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "placement_strategy", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingPlacementStrategiesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingPlacementStrategiesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlacementStrategy])
                res.placement_strategy = out

        return res

    def dfareporting_placement_strategies_update(self, request: operations.DfareportingPlacementStrategiesUpdateRequest, security: operations.DfareportingPlacementStrategiesUpdateSecurity) -> operations.DfareportingPlacementStrategiesUpdateResponse:
        r"""Updates an existing placement strategy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingPlacementStrategiesUpdateRequest, base_url, '/userprofiles/{profileId}/placementStrategies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "placement_strategy", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingPlacementStrategiesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingPlacementStrategiesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlacementStrategy])
                res.placement_strategy = out

        return res

    