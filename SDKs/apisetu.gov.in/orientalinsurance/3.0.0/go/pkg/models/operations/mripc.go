// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type MripcSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type MripcRequestBodyCertificateParameters struct {
	// INSCODE
	Inscode string `json:"INSCODE"`
	// POLNO
	Polno string `json:"POLNO"`
	// STARTDT
	Startdt string `json:"STARTDT"`
}

// MripcRequestBodyFormatEnum - The format of the certificate in response.
type MripcRequestBodyFormatEnum string

const (
	MripcRequestBodyFormatEnumPdf MripcRequestBodyFormatEnum = "pdf"
)

func (e MripcRequestBodyFormatEnum) ToPointer() *MripcRequestBodyFormatEnum {
	return &e
}

func (e *MripcRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = MripcRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MripcRequestBodyFormatEnum: %v", v)
	}
}

// MripcRequestBody - Request format
type MripcRequestBody struct {
	CertificateParameters *MripcRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format MripcRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Mripc504ApplicationJSONErrorEnum string

const (
	Mripc504ApplicationJSONErrorEnumGatewayTimeout Mripc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Mripc504ApplicationJSONErrorEnum) ToPointer() *Mripc504ApplicationJSONErrorEnum {
	return &e
}

func (e *Mripc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Mripc504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mripc504ApplicationJSONErrorEnum: %v", v)
	}
}

type Mripc504ApplicationJSONErrorDescriptionEnum string

const (
	Mripc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Mripc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Mripc504ApplicationJSONErrorDescriptionEnum) ToPointer() *Mripc504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Mripc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Mripc504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mripc504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Mripc504ApplicationJSON - Gateway timeout
type Mripc504ApplicationJSON struct {
	Error            *Mripc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mripc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mripc503ApplicationJSONErrorEnum string

const (
	Mripc503ApplicationJSONErrorEnumServiceUnavailable Mripc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Mripc503ApplicationJSONErrorEnum) ToPointer() *Mripc503ApplicationJSONErrorEnum {
	return &e
}

func (e *Mripc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Mripc503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mripc503ApplicationJSONErrorEnum: %v", v)
	}
}

type Mripc503ApplicationJSONErrorDescriptionEnum string

const (
	Mripc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Mripc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Mripc503ApplicationJSONErrorDescriptionEnum) ToPointer() *Mripc503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Mripc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Mripc503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mripc503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Mripc503ApplicationJSON - Service unavailable
type Mripc503ApplicationJSON struct {
	Error            *Mripc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mripc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mripc502ApplicationJSONErrorEnum string

const (
	Mripc502ApplicationJSONErrorEnumBadGatewy Mripc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Mripc502ApplicationJSONErrorEnum) ToPointer() *Mripc502ApplicationJSONErrorEnum {
	return &e
}

func (e *Mripc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Mripc502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mripc502ApplicationJSONErrorEnum: %v", v)
	}
}

type Mripc502ApplicationJSONErrorDescriptionEnum string

const (
	Mripc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Mripc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Mripc502ApplicationJSONErrorDescriptionEnum) ToPointer() *Mripc502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Mripc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Mripc502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mripc502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Mripc502ApplicationJSON - Bad gateway
type Mripc502ApplicationJSON struct {
	Error            *Mripc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mripc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mripc500ApplicationJSONErrorEnum string

const (
	Mripc500ApplicationJSONErrorEnumInternalServerError Mripc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Mripc500ApplicationJSONErrorEnum) ToPointer() *Mripc500ApplicationJSONErrorEnum {
	return &e
}

func (e *Mripc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Mripc500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mripc500ApplicationJSONErrorEnum: %v", v)
	}
}

type Mripc500ApplicationJSONErrorDescriptionEnum string

const (
	Mripc500ApplicationJSONErrorDescriptionEnumInternalServerError Mripc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Mripc500ApplicationJSONErrorDescriptionEnum) ToPointer() *Mripc500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Mripc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Mripc500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mripc500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Mripc500ApplicationJSON - Internal server error
type Mripc500ApplicationJSON struct {
	Error            *Mripc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mripc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mripc404ApplicationJSONErrorEnum string

const (
	Mripc404ApplicationJSONErrorEnumRecordNotFound Mripc404ApplicationJSONErrorEnum = "record_not_found"
	Mripc404ApplicationJSONErrorEnumURLNotFound    Mripc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Mripc404ApplicationJSONErrorEnum) ToPointer() *Mripc404ApplicationJSONErrorEnum {
	return &e
}

func (e *Mripc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Mripc404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mripc404ApplicationJSONErrorEnum: %v", v)
	}
}

type Mripc404ApplicationJSONErrorDescriptionEnum string

const (
	Mripc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Mripc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Mripc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Mripc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Mripc404ApplicationJSONErrorDescriptionEnum) ToPointer() *Mripc404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Mripc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Mripc404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mripc404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Mripc404ApplicationJSON - No record found
type Mripc404ApplicationJSON struct {
	Error            *Mripc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mripc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mripc401ApplicationJSONErrorEnum string

const (
	Mripc401ApplicationJSONErrorEnumInvalidAuthentication Mripc401ApplicationJSONErrorEnum = "invalid_authentication"
	Mripc401ApplicationJSONErrorEnumInvalidAuthorization  Mripc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Mripc401ApplicationJSONErrorEnum) ToPointer() *Mripc401ApplicationJSONErrorEnum {
	return &e
}

func (e *Mripc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Mripc401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mripc401ApplicationJSONErrorEnum: %v", v)
	}
}

type Mripc401ApplicationJSONErrorDescriptionEnum string

const (
	Mripc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Mripc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Mripc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Mripc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Mripc401ApplicationJSONErrorDescriptionEnum) ToPointer() *Mripc401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Mripc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Mripc401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mripc401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Mripc401ApplicationJSON - Unauthorized access
type Mripc401ApplicationJSON struct {
	Error            *Mripc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mripc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mripc400ApplicationJSONErrorEnum string

const (
	Mripc400ApplicationJSONErrorEnumMissingParameter Mripc400ApplicationJSONErrorEnum = "missing_parameter"
	Mripc400ApplicationJSONErrorEnumInvalidParameter Mripc400ApplicationJSONErrorEnum = "invalid_parameter"
	Mripc400ApplicationJSONErrorEnumInvalidFormat    Mripc400ApplicationJSONErrorEnum = "invalid_format"
	Mripc400ApplicationJSONErrorEnumInvalidTxnid     Mripc400ApplicationJSONErrorEnum = "invalid_txnid"
	Mripc400ApplicationJSONErrorEnumInvalidConsentid Mripc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Mripc400ApplicationJSONErrorEnum) ToPointer() *Mripc400ApplicationJSONErrorEnum {
	return &e
}

func (e *Mripc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Mripc400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mripc400ApplicationJSONErrorEnum: %v", v)
	}
}

type Mripc400ApplicationJSONErrorDescriptionEnum string

const (
	Mripc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Mripc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Mripc400ApplicationJSONErrorDescriptionEnumBadRequest                              Mripc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Mripc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Mripc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Mripc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Mripc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Mripc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Mripc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Mripc400ApplicationJSONErrorDescriptionEnum) ToPointer() *Mripc400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Mripc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Mripc400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mripc400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Mripc400ApplicationJSON - Bad request
type Mripc400ApplicationJSON struct {
	Error            *Mripc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mripc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type MripcResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Mripc400ApplicationJSONObject *Mripc400ApplicationJSON
	// Unauthorized access
	Mripc401ApplicationJSONObject *Mripc401ApplicationJSON
	// No record found
	Mripc404ApplicationJSONObject *Mripc404ApplicationJSON
	// Internal server error
	Mripc500ApplicationJSONObject *Mripc500ApplicationJSON
	// Bad gateway
	Mripc502ApplicationJSONObject *Mripc502ApplicationJSON
	// Service unavailable
	Mripc503ApplicationJSONObject *Mripc503ApplicationJSON
	// Gateway timeout
	Mripc504ApplicationJSONObject *Mripc504ApplicationJSON
}
