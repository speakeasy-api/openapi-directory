/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class NewProject {
    /**
     * Optional. If you provide a callback URL, we will send POST callbacks when the status of the current project is changed. Possible status changes are, 'translated', 'proofread', 'completed'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callback_url")
    public String callbackUrl;
    public NewProject withCallbackUrl(String callbackUrl) {
        this.callbackUrl = callbackUrl;
        return this;
    }
    
    /**
     * Coupon code to redeem
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coupon_code")
    public String couponCode;
    public NewProject withCouponCode(String couponCode) {
        this.couponCode = couponCode;
        return this;
    }
    
    /**
     * Optional. This is a consistent custom data parameter that will be given to you in the response across every request of this project model. Values should be provided like this, custom[my_key] = my_value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom")
    public String[] custom;
    public NewProject withCustom(String[] custom) {
        this.custom = custom;
        return this;
    }
    
    /**
     * Optional. You can add as many files as you want in documents[] parameter. Or you add your documents later in separate calls.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documents[]")
    public byte[] documents;
    public NewProject withDocuments(byte[] documents) {
        this.documents = documents;
        return this;
    }
    
    /**
     * Optional. Only one glossary is supported at the moment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("glossaries[]")
    public byte[] glossaries;
    public NewProject withGlossaries(byte[] glossaries) {
        this.glossaries = glossaries;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_language")
    public String sourceLanguage;
    public NewProject withSourceLanguage(String sourceLanguage) {
        this.sourceLanguage = sourceLanguage;
        return this;
    }
    
    /**
     * Optional. You can add as many files as you want in styleguides[] parameter. Or you add your style guides later in separate calls.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("styleguides[]")
    public byte[] styleguides;
    public NewProject withStyleguides(byte[] styleguides) {
        this.styleguides = styleguides;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_languages[]")
    public String[] targetLanguages;
    public NewProject withTargetLanguages(String[] targetLanguages) {
        this.targetLanguages = targetLanguages;
        return this;
    }
    
}
