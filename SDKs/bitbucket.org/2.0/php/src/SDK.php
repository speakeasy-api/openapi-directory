<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 * 
 * https://bitbucket.org/api
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see https://bitbucket.org/api
 */
class SDK
{
	public const SERVERS = [
		'https://api.bitbucket.org/2.0',
	];
  	
    /**
     * The addon resource is intended to use used by Bitbucket Cloud Connect
     * 
     * Apps, and only supports JWT authentication.
     * 
     * 
     * @var Addon $$addon
     */
	public Addon $addon;
	
    /**
     * Repository owners and administrators can set branch management
     * 
     * rules on a repository that control what can be pushed by whom.
     * Through these rules, you can enforce a project or team
     * workflow. For example, owners or administrators can:
     * 
     * * Limit push powers
     * * Prevent branch deletion
     * * Prevent history re-writes (Git only)
     * 
     * 
     * @var BranchRestrictions $$branchRestrictions
     */
	public BranchRestrictions $branchRestrictions;
	
    /**
     * The branching model resource is used to modify the branching model
     * 
     * for a repository.
     * 
     * You can use the branching model to define a branch based workflow
     * for your repositories. When you map your workflow to branch types,
     * you can ensure that branches are named consistently by configuring
     * which branch types to make available.
     * 
     * 
     * @var BranchingModel $$branchingModel
     */
	public BranchingModel $branchingModel;
	
    /**
     * Commit statuses provide a way to tag commits with meta data,
     * 
     * like automated build results.
     * 
     * 
     * @var CommitStatuses $$commitStatuses
     */
	public CommitStatuses $commitStatuses;
	
    /**
     * These are the repository's commits. They are paginated and returned in
     * 
     * reverse chronological order, similar to the output of git log.
     * 
     * 
     * @var Commits $$commits
     */
	public Commits $commits;
	
    /**
     * Teams are deploying code faster than ever, thanks to continuous
     * 
     * delivery practices and tools like Bitbucket Pipelines. Bitbucket
     * Deployments gives teams visibility into their deployment
     * environments and helps teams to track how far changes have
     * progressed in their deployment pipeline.
     * 
     * 
     * @var Deployments $$deployments
     */
	public Deployments $deployments;
	
    /**
     * Access the list of download links associated with the repository.
     * 
     * @var Downloads $$downloads
     */
	public Downloads $downloads;
	
    /**
     * The issue resources provide functionality for getting information on
     * 
     * issues in an issue tracker, creating new issues, updating them and deleting
     * them.
     * 
     * You can access public issues without authentication, but you can't gain access
     * to private repositories' issues. By authenticating, you will get the ability
     * to create issues, as well as access to updating data or deleting issues you
     * have access to.
     * 
     * 
     * @var IssueTracker $$issueTracker
     */
	public IssueTracker $issueTracker;
	
    /**
     * Bitbucket Pipelines brings continuous delivery to Bitbucket
     * 
     * Cloud, empowering teams with full branching to deployment
     * visibility and faster feedback loops.
     * 
     * 
     * @var Pipelines $$pipelines
     */
	public Pipelines $pipelines;
	
    /**
     * Bitbucket Cloud projects make it easier for teams to focus on
     * 
     * a goal, product, or process by organizing their repositories.
     * 
     * 
     * @var Projects $$projects
     */
	public Projects $projects;
	
    /**
     * Pull requests are a feature that makes it easier for developers
     * 
     * to collaborate using Bitbucket. They provide a user-friendly web
     * interface for discussing proposed changes before integrating them
     * into the official project.
     * 
     * 
     * @var Pullrequests $$pullrequests
     */
	public Pullrequests $pullrequests;
	
    /**
     * The refs resource allows you access branches and tags in a repository.
     * 
     * By default, results will be in the order the underlying source control
     * system returns them and identical to the ordering one sees when running
     * "$ git show-ref". Note that this follows simple lexical ordering of the
     *  ref names.
     * 
     * 
     * @var Refs $$refs
     */
	public Refs $refs;
	
    /**
     * Code insights provides reports, annotations, and metrics to help you
     * 
     * and your team improve code quality in pull requests throughout the code
     * review process. Some of the available code insights are static analysis
     * reports, security scan results, artifact links, unit tests, and build
     * status.
     * 
     * 
     * @var Reports $$reports
     */
	public Reports $reports;
	
    /**
     * A Git repository is a virtual storage of your project. It
     * 
     * allows you to save versions of your code, which you can access
     * when needed. The repo resource allows you to access public repos,
     * or repos that belong to a specific workspace.
     * 
     * 
     * @var Repositories $$repositories
     */
	public Repositories $repositories;
	
	public Search $search;
	
    /**
     * Snippets allow you share code segments or files with yourself, members of
     * 
     * your workspace, or the world.
     * 
     * Like pull requests, repositories and workspaces, the full set of snippets
     * is defined by what the current user has access to. This includes all
     * snippets owned by any of the workspaces the user is a member of, or
     * snippets by other users that the current user is either watching or has
     *  collaborated on (for instance by commenting on it).
     * 
     * 
     * @var Snippets $$snippets
     */
	public Snippets $snippets;
	
    /**
     * Browse the source code in the repository and
     * 
     *                               create new commits by uploading.
     * 
     * @var Source $$source
     */
	public Source $source;
	
    /**
     * The SSH resource allows you to manage SSH keys.
     * 
     * 
     * 
     * @var Ssh $$ssh
     */
	public Ssh $ssh;
	
    /**
     * The users resource allows you to access public information
     * 
     * associated with a user account. Most resources in the users
     * endpoint have been deprecated in favor of workspaces.
     * 
     * 
     * @var Users $$users
     */
	public Users $users;
	
    /**
     * Webhooks provide a way to configure Bitbucket Cloud to make requests to
     * 
     * your server (or another external service) whenever certain events occur in
     * Bitbucket Cloud.
     * 
     * A webhook consists of:
     * 
     * * A subject -- The resource that generates the events. Currently, this resource
     * is the repository, user account, or team where you create the webhook.
     * * One or more event -- The default event is a repository push, but you can
     * select multiple events that can trigger the webhook.
     * * A URL -- The endpoint where you want Bitbucket to send the event payloads
     * when a matching event happens.
     * 
     * There are two parts to getting a webhook to work: creating the webhook and
     * triggering the webhook. After you create a webhook for an event, every time
     * that event occurs, Bitbucket sends a payload request that describes the event
     * to the specified URL. Thus, you can think of webhooks as a kind of
     * notification system.
     * 
     * Use webhooks to integrate applications with Bitbucket Cloud. The following
     * use cases provides examples of when you would want to use webhooks:
     * 
     * * Every time a user pushes commits in a repository, you may want to notify
     * your CI server to start a build.
     * * Every time a user pushes commits or creates a pull request, you may want to
     * display a notification in your application.
     * 
     * 
     * @var Webhooks $$webhooks
     */
	public Webhooks $webhooks;
	
    /**
     * A workspace is where you create repositories, collaborate on
     * 
     * your code, and organize different streams of work in your Bitbucket
     * Cloud account. Workspaces replace the use of teams and users in API
     * calls.
     * 
     * 
     * @var Workspaces $$workspaces
     */
	public Workspaces $workspaces;
	
	public Properties $properties;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->addon = new Addon(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->branchRestrictions = new BranchRestrictions(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->branchingModel = new BranchingModel(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->commitStatuses = new CommitStatuses(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->commits = new Commits(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->deployments = new Deployments(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->downloads = new Downloads(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->issueTracker = new IssueTracker(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->pipelines = new Pipelines(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->projects = new Projects(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->pullrequests = new Pullrequests(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->refs = new Refs(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->reports = new Reports(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->repositories = new Repositories(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->search = new Search(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->snippets = new Snippets(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->source = new Source(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->ssh = new Ssh(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->users = new Users(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->webhooks = new Webhooks(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->workspaces = new Workspaces(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->properties = new Properties(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}