<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * FirstLastNamePhoneCodedOut - Represents the output of inferring the LIKELY country and phone code from a personal name and phone number.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class FirstLastNamePhoneCodedOut
{
	#[\JMS\Serializer\Annotation\SerializedName('countryIso2')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $countryIso2 = null;
    
    /**
     * The first name (also known as given name)
     * 
     * @var ?string $firstName
     */
	#[\JMS\Serializer\Annotation\SerializedName('firstName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $firstName = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The normalized phone number, verified using libphonenumber.
     * 
     * @var ?string $internationalPhoneNumberVerified
     */
	#[\JMS\Serializer\Annotation\SerializedName('internationalPhoneNumberVerified')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $internationalPhoneNumberVerified = null;
    
    /**
     * The last name (also known as family name, or surname)
     * 
     * @var ?string $lastName
     */
	#[\JMS\Serializer\Annotation\SerializedName('lastName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $lastName = null;
    
    /**
     * The likely country of origin of the name.
     * 
     * @var ?string $originCountryIso2
     */
	#[\JMS\Serializer\Annotation\SerializedName('originCountryIso2')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $originCountryIso2 = null;
    
    /**
     * The best alternative country of origin of the name.
     * 
     * @var ?string $originCountryIso2Alt
     */
	#[\JMS\Serializer\Annotation\SerializedName('originCountryIso2Alt')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $originCountryIso2Alt = null;
    
    /**
     * The phone country code of the phone number, verified using libphonenumber.
     * 
     * @var ?int $phoneCountryCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('phoneCountryCode')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $phoneCountryCode = null;
    
    /**
     * The best alternative phone country code of the phone number.
     * 
     * @var ?int $phoneCountryCodeAlt
     */
	#[\JMS\Serializer\Annotation\SerializedName('phoneCountryCodeAlt')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $phoneCountryCodeAlt = null;
    
    /**
     * The likely country of the phone number.
     * 
     * @var ?string $phoneCountryIso2
     */
	#[\JMS\Serializer\Annotation\SerializedName('phoneCountryIso2')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $phoneCountryIso2 = null;
    
    /**
     * The best alternative country of the phone number.
     * 
     * @var ?string $phoneCountryIso2Alt
     */
	#[\JMS\Serializer\Annotation\SerializedName('phoneCountryIso2Alt')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $phoneCountryIso2Alt = null;
    
    /**
     * The phone ISO2 country code, verified using libphonenumber.
     * 
     * @var ?string $phoneCountryIso2Verified
     */
	#[\JMS\Serializer\Annotation\SerializedName('phoneCountryIso2Verified')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $phoneCountryIso2Verified = null;
    
    /**
     * The input phone number.
     * 
     * @var ?string $phoneNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('phoneNumber')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $phoneNumber = null;
    
    /**
     * Higher score is better, but score is not normalized. Use calibratedProbability if available. 
     * 
     * @var ?float $score
     */
	#[\JMS\Serializer\Annotation\SerializedName('score')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $score = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('script')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $script = null;
    
    /**
     * Indicates if the phone number could be positively verified using libphonenumber.
     * 
     * @var ?bool $verified
     */
	#[\JMS\Serializer\Annotation\SerializedName('verified')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $verified = null;
    
	public function __construct()
	{
		$this->countryIso2 = null;
		$this->firstName = null;
		$this->id = null;
		$this->internationalPhoneNumberVerified = null;
		$this->lastName = null;
		$this->originCountryIso2 = null;
		$this->originCountryIso2Alt = null;
		$this->phoneCountryCode = null;
		$this->phoneCountryCodeAlt = null;
		$this->phoneCountryIso2 = null;
		$this->phoneCountryIso2Alt = null;
		$this->phoneCountryIso2Verified = null;
		$this->phoneNumber = null;
		$this->score = null;
		$this->script = null;
		$this->verified = null;
	}
}
