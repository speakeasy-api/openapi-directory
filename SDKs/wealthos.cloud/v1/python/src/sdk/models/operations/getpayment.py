"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetPaymentSecurity:
    
    api_secret_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' }})  
    

@dataclasses.dataclass
class GetPaymentRequest:
    
    transaction_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'transaction_id', 'style': 'simple', 'explode': False }})
    r"""Transaction Id"""  
    x_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'x-api-key', 'style': 'simple', 'explode': False }})
    r"""ApiSecretKey"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPayment500ApplicationJSON:
    r"""System error. Retry later. If the error persist, contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPayment429ApplicationJSON:
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPayment404ApplicationJSON:
    r"""The specified resource was not found"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPayment403ApplicationJSON:
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPayment401ApplicationJSON:
    r"""You do not have permissions to access this resource."""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPayment400ApplicationJSON:
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPaymentRootTypeForPaymentsInvestmentInstructions:
    
    investment_product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_product_id') }})  
    quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Require if `value` is not available. Must be in correct pattern (eg: 25, 332.34, 1050.0025). For `funds`, upto 4 decimal places. For `equities`, `bonds` and `etf`, 0 decimal places allowed."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Require if `quantity` is not available. Must be in correct pattern (upto 2 decimal places, eg: 25, 332.3, 1050.25)."""  
    
class GetPaymentRootTypeForPaymentsPaymentTypeEnum(str, Enum):
    CARD = 'card'
    ELECTRONIC_FUND_TRANSFER = 'electronic_fund_transfer'

class GetPaymentRootTypeForPaymentsPurposeEnum(str, Enum):
    CASH = 'cash'
    INVEST = 'invest'

class GetPaymentRootTypeForPaymentsServiceProviderEnum(str, Enum):
    STRIPE = 'stripe'
    TRUELAYER = 'truelayer'
    NONE = 'none'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPaymentRootTypeForPaymentsServiceProviderParams:
    r"""Custom parameters based on prerequisites of the selected provider"""
    
    bank_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank_account_id'), 'exclude': lambda f: f is None }})
    r"""Bank account ID of Investor (include if service_provider=\\"truelayer\\")"""  
    hpp_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hpp_url'), 'exclude': lambda f: f is None }})
    r"""URL for Hosted Payment Page (include if service_provider=\\"truelayer\\")"""  
    payment_intent_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_intent_id'), 'exclude': lambda f: f is None }})
    r"""Payment intent ID (include if service_provider=\\"truelayer\\")"""  
    
class GetPaymentRootTypeForPaymentsStatusEnum(str, Enum):
    r"""Status of the payment
    
    - `pending_confirmation`: Payment is pending approvals and confirmation
    - `processing`: Payment is confirmed, and being processed. Depending on the payment method, this may be instantaneous (e.g. card) or take multiple days (e.g. cheque) 
    - `succeeded`: Payment is successful. Cash is cleaned in account. 
    - `cancelled`: Payment cancelled, and any held funds have been returned. 
    - `failed`: Payment failed due to insufficient funds, invalid card details, network issues etc.
    """
    PENDING_CONFIRMATION = 'pending_confirmation'
    PROCESSING = 'processing'
    SUCCEEDED = 'succeeded'
    CANCELLED = 'cancelled'
    FAILED = 'failed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPaymentRootTypeForPayments:
    r"""success"""
    
    amount: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})  
    payment_type: GetPaymentRootTypeForPaymentsPaymentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_type') }})  
    pot_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pot_id') }})  
    purpose: GetPaymentRootTypeForPaymentsPurposeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purpose') }})  
    service_provider: GetPaymentRootTypeForPaymentsServiceProviderEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_provider') }})  
    status: GetPaymentRootTypeForPaymentsStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of the payment
    
    - `pending_confirmation`: Payment is pending approvals and confirmation
    - `processing`: Payment is confirmed, and being processed. Depending on the payment method, this may be instantaneous (e.g. card) or take multiple days (e.g. cheque) 
    - `succeeded`: Payment is successful. Cash is cleaned in account. 
    - `cancelled`: Payment cancelled, and any held funds have been returned. 
    - `failed`: Payment failed due to insufficient funds, invalid card details, network issues etc.
    """  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id') }})  
    investment_instructions: Optional[list[GetPaymentRootTypeForPaymentsInvestmentInstructions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_instructions'), 'exclude': lambda f: f is None }})
    r"""mandatory only if purpose:\\"invest\\" and pot does not have a portfolio template attached (e.g. An execution-only or direct-to-consumer wealth manager)"""  
    service_provider_params: Optional[GetPaymentRootTypeForPaymentsServiceProviderParams] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_provider_params'), 'exclude': lambda f: f is None }})
    r"""Custom parameters based on prerequisites of the selected provider"""  
    

@dataclasses.dataclass
class GetPaymentResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_payment_400_application_json_object: Optional[GetPayment400ApplicationJSON] = dataclasses.field(default=None)
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""  
    get_payment_401_application_json_object: Optional[GetPayment401ApplicationJSON] = dataclasses.field(default=None)
    r"""You do not have permissions to access this resource."""  
    get_payment_403_application_json_object: Optional[GetPayment403ApplicationJSON] = dataclasses.field(default=None)
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""  
    get_payment_404_application_json_object: Optional[GetPayment404ApplicationJSON] = dataclasses.field(default=None)
    r"""The specified resource was not found"""  
    get_payment_429_application_json_object: Optional[GetPayment429ApplicationJSON] = dataclasses.field(default=None)
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""  
    get_payment_500_application_json_object: Optional[GetPayment500ApplicationJSON] = dataclasses.field(default=None)
    r"""System error. Retry later. If the error persist, contact WOS support"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    root_type_for_payments: Optional[GetPaymentRootTypeForPayments] = dataclasses.field(default=None)
    r"""success"""  
    