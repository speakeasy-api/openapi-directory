// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// EventNotificationEventEnum - An event name.
type EventNotificationEventEnum string

const (
	EventNotificationEventEnumUpgradeStart      EventNotificationEventEnum = "upgradeStart"
	EventNotificationEventEnumPeriodicPrechecks EventNotificationEventEnum = "periodicPrechecks"
	EventNotificationEventEnumStageCdmSoftware  EventNotificationEventEnum = "stageCdmSoftware"
)

func (e EventNotificationEventEnum) ToPointer() *EventNotificationEventEnum {
	return &e
}

func (e *EventNotificationEventEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "upgradeStart":
		fallthrough
	case "periodicPrechecks":
		fallthrough
	case "stageCdmSoftware":
		*e = EventNotificationEventEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventNotificationEventEnum: %v", v)
	}
}

type EventNotification struct {
	// An event name.
	Event EventNotificationEventEnum `json:"event"`
	// Timestamp of the event in ISO8601 format.
	Time time.Time `json:"time"`
}
