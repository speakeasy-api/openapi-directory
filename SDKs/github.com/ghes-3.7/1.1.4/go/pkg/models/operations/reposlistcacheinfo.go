// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type ReposListCacheInfoPathParams struct {
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type ReposListCacheInfoQueryParams struct {
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of results per page (max 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
}

type ReposListCacheInfoRequest struct {
	PathParams  ReposListCacheInfoPathParams
	QueryParams ReposListCacheInfoQueryParams
}

type ReposListCacheInfo200ApplicationJSONGitSyncStatusEnum string

const (
	ReposListCacheInfo200ApplicationJSONGitSyncStatusEnumOffline   ReposListCacheInfo200ApplicationJSONGitSyncStatusEnum = "offline"
	ReposListCacheInfo200ApplicationJSONGitSyncStatusEnumInactive  ReposListCacheInfo200ApplicationJSONGitSyncStatusEnum = "inactive"
	ReposListCacheInfo200ApplicationJSONGitSyncStatusEnumInSync    ReposListCacheInfo200ApplicationJSONGitSyncStatusEnum = "in_sync"
	ReposListCacheInfo200ApplicationJSONGitSyncStatusEnumNotInSync ReposListCacheInfo200ApplicationJSONGitSyncStatusEnum = "not_in_sync"
)

func (e *ReposListCacheInfo200ApplicationJSONGitSyncStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "offline":
		fallthrough
	case "inactive":
		fallthrough
	case "in_sync":
		fallthrough
	case "not_in_sync":
		*e = ReposListCacheInfo200ApplicationJSONGitSyncStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposListCacheInfo200ApplicationJSONGitSyncStatusEnum: %s", s)
	}
}

type ReposListCacheInfo200ApplicationJSONGit struct {
	LastSync   time.Time                                             `json:"last_sync"`
	SyncStatus ReposListCacheInfo200ApplicationJSONGitSyncStatusEnum `json:"sync_status"`
}

// ReposListCacheInfo200ApplicationJSON - Status for a cache replica
type ReposListCacheInfo200ApplicationJSON struct {
	Git      ReposListCacheInfo200ApplicationJSONGit `json:"git"`
	Host     string                                  `json:"host"`
	Location string                                  `json:"location"`
}

type ReposListCacheInfoResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Status information for cache replicas
	ReposListCacheInfo200ApplicationJSONObjects []ReposListCacheInfo200ApplicationJSON
}
