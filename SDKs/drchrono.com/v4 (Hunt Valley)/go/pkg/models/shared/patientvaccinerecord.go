// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PatientVaccineRecordVaccinationStatusEnum - Vaccination status, can be `CP`(Complete), `RE`(Refused), `NA`(Not administered), `PA`(Partially administered)
type PatientVaccineRecordVaccinationStatusEnum string

const (
	PatientVaccineRecordVaccinationStatusEnumCp PatientVaccineRecordVaccinationStatusEnum = "CP"
	PatientVaccineRecordVaccinationStatusEnumRe PatientVaccineRecordVaccinationStatusEnum = "RE"
	PatientVaccineRecordVaccinationStatusEnumNa PatientVaccineRecordVaccinationStatusEnum = "NA"
	PatientVaccineRecordVaccinationStatusEnumPa PatientVaccineRecordVaccinationStatusEnum = "PA"
)

func (e *PatientVaccineRecordVaccinationStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CP":
		fallthrough
	case "RE":
		fallthrough
	case "NA":
		fallthrough
	case "PA":
		*e = PatientVaccineRecordVaccinationStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientVaccineRecordVaccinationStatusEnum: %s", s)
	}
}

// PatientVaccineRecordVaccineDose - Vaccine dose ID
type PatientVaccineRecordVaccineDose struct {
	ID           *int64  `json:"id,omitempty"`
	MaxAgeMonths *int64  `json:"max_age_months,omitempty"`
	MinAgeMonths *int64  `json:"min_age_months,omitempty"`
	Title        *string `json:"title,omitempty"`
}

// PatientVaccineRecordFundingEligibilityEnum - The funding program that should pay for a given immunization
type PatientVaccineRecordFundingEligibilityEnum string

const (
	PatientVaccineRecordFundingEligibilityEnumV01 PatientVaccineRecordFundingEligibilityEnum = "V01"
	PatientVaccineRecordFundingEligibilityEnumV02 PatientVaccineRecordFundingEligibilityEnum = "V02"
	PatientVaccineRecordFundingEligibilityEnumV03 PatientVaccineRecordFundingEligibilityEnum = "V03"
	PatientVaccineRecordFundingEligibilityEnumV04 PatientVaccineRecordFundingEligibilityEnum = "V04"
	PatientVaccineRecordFundingEligibilityEnumV05 PatientVaccineRecordFundingEligibilityEnum = "V05"
	PatientVaccineRecordFundingEligibilityEnumV07 PatientVaccineRecordFundingEligibilityEnum = "V07"
)

func (e *PatientVaccineRecordFundingEligibilityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "V01":
		fallthrough
	case "V02":
		fallthrough
	case "V03":
		fallthrough
	case "V04":
		fallthrough
	case "V05":
		fallthrough
	case "V07":
		*e = PatientVaccineRecordFundingEligibilityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientVaccineRecordFundingEligibilityEnum: %s", s)
	}
}

type PatientVaccineRecordObservedImmunityEnum string

const (
	PatientVaccineRecordObservedImmunityEnumThreeHundredAndNinetyEightMillionOneHundredAndTwoThousandAndNine   PatientVaccineRecordObservedImmunityEnum = "398102009"
	PatientVaccineRecordObservedImmunityEnumFourHundredAndNineMillionFourHundredAndNinetyEightThousandAndFour  PatientVaccineRecordObservedImmunityEnum = "409498004"
	PatientVaccineRecordObservedImmunityEnumThreeHundredAndNinetySevenMillionFourHundredAndTwentyEightThousand PatientVaccineRecordObservedImmunityEnum = "397428000"
	PatientVaccineRecordObservedImmunityEnumEighteenMillionSixHundredAndTwentyFourThousand                     PatientVaccineRecordObservedImmunityEnum = "18624000"
	PatientVaccineRecordObservedImmunityEnumNinetyOneMillionFourHundredAndTwentyEightThousandAndFive           PatientVaccineRecordObservedImmunityEnum = "91428005"
	PatientVaccineRecordObservedImmunityEnumTwoHundredAndSeventyOneMillionFiveHundredAndElevenThousand         PatientVaccineRecordObservedImmunityEnum = "271511000"
	PatientVaccineRecordObservedImmunityEnumTwoHundredAndFortyMillionFiveHundredAndThirtyTwoThousandAndNine    PatientVaccineRecordObservedImmunityEnum = "240532009"
	PatientVaccineRecordObservedImmunityEnumSixMillionOneHundredAndFortyTwoThousandAndFour                     PatientVaccineRecordObservedImmunityEnum = "6142004"
	PatientVaccineRecordObservedImmunityEnumFiftyTwoMillionNineHundredAndFortySevenThousandAndSix              PatientVaccineRecordObservedImmunityEnum = "52947006"
	PatientVaccineRecordObservedImmunityEnumFourteenMillionOneHundredAndEightyNineThousandAndFour              PatientVaccineRecordObservedImmunityEnum = "14189004"
	PatientVaccineRecordObservedImmunityEnumTwentyThreeMillionFiveHundredAndElevenThousandAndSix               PatientVaccineRecordObservedImmunityEnum = "23511006"
	PatientVaccineRecordObservedImmunityEnumThirtySixMillionNineHundredAndEightyNineThousandAndFive            PatientVaccineRecordObservedImmunityEnum = "36989005"
	PatientVaccineRecordObservedImmunityEnumTwentySevenMillionEightHundredAndThirtySixThousandAndSeven         PatientVaccineRecordObservedImmunityEnum = "27836007"
	PatientVaccineRecordObservedImmunityEnumSixteenMillionEightHundredAndFourteenThousandAndFour               PatientVaccineRecordObservedImmunityEnum = "16814004"
	PatientVaccineRecordObservedImmunityEnumFourteenMillionOneHundredAndSixtyEightThousandAndEight             PatientVaccineRecordObservedImmunityEnum = "14168008"
	PatientVaccineRecordObservedImmunityEnumThirtySixMillionSixHundredAndFiftyThreeThousand                    PatientVaccineRecordObservedImmunityEnum = "36653000"
	PatientVaccineRecordObservedImmunityEnumSeventySixMillionNineHundredAndTwoThousandAndSix                   PatientVaccineRecordObservedImmunityEnum = "76902006"
	PatientVaccineRecordObservedImmunityEnumSixtySixMillionSeventyOneThousandAndTwo                            PatientVaccineRecordObservedImmunityEnum = "66071002"
	PatientVaccineRecordObservedImmunityEnumFourMillionEightHundredAndThirtyFourThousand                       PatientVaccineRecordObservedImmunityEnum = "4834000"
	PatientVaccineRecordObservedImmunityEnumOneHundredAndElevenMillionEightHundredAndFiftyTwoThousandAndThree  PatientVaccineRecordObservedImmunityEnum = "111852003"
	PatientVaccineRecordObservedImmunityEnumThirtyEightMillionNineHundredAndSevenThousandAndThree              PatientVaccineRecordObservedImmunityEnum = "38907003"
	PatientVaccineRecordObservedImmunityEnumFortyMillionFourHundredAndSixtyEightThousandAndThree               PatientVaccineRecordObservedImmunityEnum = "40468003"
	PatientVaccineRecordObservedImmunityEnumSixteenMillionFiveHundredAndFortyOneThousandAndOne                 PatientVaccineRecordObservedImmunityEnum = "16541001"
)

func (e *PatientVaccineRecordObservedImmunityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "398102009":
		fallthrough
	case "409498004":
		fallthrough
	case "397428000":
		fallthrough
	case "18624000":
		fallthrough
	case "91428005":
		fallthrough
	case "271511000":
		fallthrough
	case "240532009":
		fallthrough
	case "6142004":
		fallthrough
	case "52947006":
		fallthrough
	case "14189004":
		fallthrough
	case "23511006":
		fallthrough
	case "36989005":
		fallthrough
	case "27836007":
		fallthrough
	case "16814004":
		fallthrough
	case "14168008":
		fallthrough
	case "36653000":
		fallthrough
	case "76902006":
		fallthrough
	case "66071002":
		fallthrough
	case "4834000":
		fallthrough
	case "111852003":
		fallthrough
	case "38907003":
		fallthrough
	case "40468003":
		fallthrough
	case "16541001":
		*e = PatientVaccineRecordObservedImmunityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientVaccineRecordObservedImmunityEnum: %s", s)
	}
}

type PatientVaccineRecordRecordTypeEnum string

const (
	PatientVaccineRecordRecordTypeEnumZero  PatientVaccineRecordRecordTypeEnum = "00"
	PatientVaccineRecordRecordTypeEnumOne   PatientVaccineRecordRecordTypeEnum = "01"
	PatientVaccineRecordRecordTypeEnumTwo   PatientVaccineRecordRecordTypeEnum = "02"
	PatientVaccineRecordRecordTypeEnumThree PatientVaccineRecordRecordTypeEnum = "03"
	PatientVaccineRecordRecordTypeEnumFour  PatientVaccineRecordRecordTypeEnum = "04"
	PatientVaccineRecordRecordTypeEnumFive  PatientVaccineRecordRecordTypeEnum = "05"
	PatientVaccineRecordRecordTypeEnumSix   PatientVaccineRecordRecordTypeEnum = "06"
	PatientVaccineRecordRecordTypeEnumSeven PatientVaccineRecordRecordTypeEnum = "07"
	PatientVaccineRecordRecordTypeEnumEight PatientVaccineRecordRecordTypeEnum = "08"
)

func (e *PatientVaccineRecordRecordTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "00":
		fallthrough
	case "01":
		fallthrough
	case "02":
		fallthrough
	case "03":
		fallthrough
	case "04":
		fallthrough
	case "05":
		fallthrough
	case "06":
		fallthrough
	case "07":
		fallthrough
	case "08":
		*e = PatientVaccineRecordRecordTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientVaccineRecordRecordTypeEnum: %s", s)
	}
}

// PatientVaccineRecord - Created
type PatientVaccineRecord struct {
	// ID of `/api/offices` where the administration happened
	AdministeredAt *int64 `json:"administered_at,omitempty"`
	// ID of `/api/users` who performs the administration
	AdministeredBy *string `json:"administered_by,omitempty"`
	// Datetime when the administration starts
	AdministrationStart *string `json:"administration_start,omitempty"`
	// Amount of vaccine administered
	Amount   *float64 `json:"amount,omitempty"`
	Comments *string  `json:"comments,omitempty"`
	// Vaccination status, can be `CP`(Complete), `RE`(Refused), `NA`(Not administered), `PA`(Partially administered)
	CompletionStatus *PatientVaccineRecordVaccinationStatusEnum `json:"completion_status,omitempty"`
	// Consent form related with vaccine record
	ConsentForm *int64 `json:"consent_form,omitempty"`
	// Vaccine cpt code
	CptCode   *string `json:"cpt_code,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	// Vaccine cvx code
	CvxCode string `json:"cvx_code"`
	// Vaccine dose IDs received in consent form signed hook
	Doses []PatientVaccineRecordVaccineDose `json:"doses,omitempty"`
	// ID of user who created the record
	EnteredBy *string `json:"entered_by,omitempty"`
	// The funding program that should pay for a given immunization
	FundingEligibility *PatientVaccineRecordFundingEligibilityEnum `json:"funding_eligibility,omitempty"`
	ID                 *int64                                      `json:"id,omitempty"`
	Name               string                                      `json:"name"`
	// Date for next dose of vaccine
	NextDoseDate     *string                                   `json:"next_dose_date,omitempty"`
	ObservedImmunity *PatientVaccineRecordObservedImmunityEnum `json:"observed_immunity,omitempty"`
	OrderingDoctor   *int64                                    `json:"ordering_doctor,omitempty"`
	Patient          int64                                     `json:"patient"`
	RecordSource     *PatientVaccineRecordRecordTypeEnum       `json:"record_source,omitempty"`
	Route            *string                                   `json:"route,omitempty"`
	Site             *string                                   `json:"site,omitempty"`
	Units            *string                                   `json:"units,omitempty"`
	UpdatedAt        *string                                   `json:"updated_at,omitempty"`
	// ID of `/api/vaccine_inventories` the vaccine is from
	VaccineInventory *int64 `json:"vaccine_inventory,omitempty"`
	// Related vaccine information statement
	Vis *string `json:"vis,omitempty"`
}
