"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import billingupdate as shared_billingupdate
from ..shared import pricingupdateforevergreen as shared_pricingupdateforevergreen
from ..shared import triggerparams as shared_triggerparams
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChargeUpdateForEvergreen:
    r"""The JSON object containing the information for a charge update in the 'UpdateProduct' type order action."""
    
    billing: Optional[shared_billingupdate.BillingUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing'), 'exclude': lambda f: f is None }})  
    charge_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeNumber'), 'exclude': lambda f: f is None }})
    r"""Read only. Identifies the charge to be updated."""  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFields'), 'exclude': lambda f: f is None }})
    r"""Container for custom fields of a Rate Plan Charge object."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    effective_date: Optional[shared_triggerparams.TriggerParams] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effectiveDate'), 'exclude': lambda f: f is None }})
    r"""Specifies when a charge becomes active."""  
    pricing: Optional[shared_pricingupdateforevergreen.PricingUpdateForEvergreen] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricing'), 'exclude': lambda f: f is None }})  
    unique_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uniqueToken'), 'exclude': lambda f: f is None }})
    r"""A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, you would assign a unique token to the product rate plan when added and use that token in future order actions."""  
    