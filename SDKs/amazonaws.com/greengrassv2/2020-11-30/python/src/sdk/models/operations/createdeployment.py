"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import componentdeploymentspecification as shared_componentdeploymentspecification
from ..shared import createdeploymentresponse as shared_createdeploymentresponse
from ..shared import deploymentcomponentupdatepolicy as shared_deploymentcomponentupdatepolicy
from ..shared import deploymentconfigurationvalidationpolicy as shared_deploymentconfigurationvalidationpolicy
from ..shared import deploymentfailurehandlingpolicy_enum as shared_deploymentfailurehandlingpolicy_enum
from ..shared import iotjobabortconfig as shared_iotjobabortconfig
from ..shared import iotjobexecutionsrolloutconfig as shared_iotjobexecutionsrolloutconfig
from ..shared import iotjobtimeoutconfig as shared_iotjobtimeoutconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeploymentRequestBodyDeploymentPolicies:
    r"""Contains information about policies that define how a deployment updates components and handles failure."""
    
    component_update_policy: Optional[shared_deploymentcomponentupdatepolicy.DeploymentComponentUpdatePolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('componentUpdatePolicy'), 'exclude': lambda f: f is None }})  
    configuration_validation_policy: Optional[shared_deploymentconfigurationvalidationpolicy.DeploymentConfigurationValidationPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configurationValidationPolicy'), 'exclude': lambda f: f is None }})  
    failure_handling_policy: Optional[shared_deploymentfailurehandlingpolicy_enum.DeploymentFailureHandlingPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureHandlingPolicy'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeploymentRequestBodyIotJobConfiguration:
    r"""Contains information about an IoT job configuration."""
    
    abort_config: Optional[shared_iotjobabortconfig.IoTJobAbortConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('abortConfig'), 'exclude': lambda f: f is None }})  
    job_executions_rollout_config: Optional[shared_iotjobexecutionsrolloutconfig.IoTJobExecutionsRolloutConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobExecutionsRolloutConfig'), 'exclude': lambda f: f is None }})  
    timeout_config: Optional[shared_iotjobtimeoutconfig.IoTJobTimeoutConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeoutConfig'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeploymentRequestBody:
    
    target_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetArn') }})
    r"""The <a href=\\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\\">ARN</a> of the target IoT thing or thing group. When creating a subdeployment, the targetARN can only be a thing group."""  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientToken'), 'exclude': lambda f: f is None }})
    r"""A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours."""  
    components: Optional[dict[str, shared_componentdeploymentspecification.ComponentDeploymentSpecification]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('components'), 'exclude': lambda f: f is None }})
    r"""The components to deploy. This is a dictionary, where each key is the name of a component, and each key's value is the version and configuration to deploy for that component."""  
    deployment_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentName'), 'exclude': lambda f: f is None }})
    r"""The name of the deployment."""  
    deployment_policies: Optional[CreateDeploymentRequestBodyDeploymentPolicies] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentPolicies'), 'exclude': lambda f: f is None }})
    r"""Contains information about policies that define how a deployment updates components and handles failure."""  
    iot_job_configuration: Optional[CreateDeploymentRequestBodyIotJobConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iotJobConfiguration'), 'exclude': lambda f: f is None }})
    r"""Contains information about an IoT job configuration."""  
    parent_target_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentTargetArn'), 'exclude': lambda f: f is None }})
    r"""The parent deployment's target <a href=\\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\\">ARN</a> within a subdeployment."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""A list of key-value pairs that contain metadata for the resource. For more information, see <a href=\\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\\">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>."""  
    

@dataclasses.dataclass
class CreateDeploymentRequest:
    
    request_body: CreateDeploymentRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateDeploymentResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_deployment_response: Optional[shared_createdeploymentresponse.CreateDeploymentResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    request_already_in_progress_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RequestAlreadyInProgressException"""  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    