// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type IconDisapprovalReasonsEnum string

const (
	IconDisapprovalReasonsEnumImageDisapprovalReasonUnspecified IconDisapprovalReasonsEnum = "IMAGE_DISAPPROVAL_REASON_UNSPECIFIED"
	IconDisapprovalReasonsEnumNotLikeSite                       IconDisapprovalReasonsEnum = "NOT_LIKE_SITE"
	IconDisapprovalReasonsEnumOffensive                         IconDisapprovalReasonsEnum = "OFFENSIVE"
	IconDisapprovalReasonsEnumLowQuality                        IconDisapprovalReasonsEnum = "LOW_QUALITY"
	IconDisapprovalReasonsEnumAnimated                          IconDisapprovalReasonsEnum = "ANIMATED"
	IconDisapprovalReasonsEnumBadBackground                     IconDisapprovalReasonsEnum = "BAD_BACKGROUND"
	IconDisapprovalReasonsEnumTextTooSmall                      IconDisapprovalReasonsEnum = "TEXT_TOO_SMALL"
)

func (e *IconDisapprovalReasonsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IMAGE_DISAPPROVAL_REASON_UNSPECIFIED":
		fallthrough
	case "NOT_LIKE_SITE":
		fallthrough
	case "OFFENSIVE":
		fallthrough
	case "LOW_QUALITY":
		fallthrough
	case "ANIMATED":
		fallthrough
	case "BAD_BACKGROUND":
		fallthrough
	case "TEXT_TOO_SMALL":
		*e = IconDisapprovalReasonsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IconDisapprovalReasonsEnum: %s", s)
	}
}

// IconStateEnum - Output only. The icon's current state.
type IconStateEnum string

const (
	IconStateEnumStateUnspecified IconStateEnum = "STATE_UNSPECIFIED"
	IconStateEnumNew              IconStateEnum = "NEW"
	IconStateEnumApproved         IconStateEnum = "APPROVED"
	IconStateEnumRejected         IconStateEnum = "REJECTED"
)

func (e *IconStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "NEW":
		fallthrough
	case "APPROVED":
		fallthrough
	case "REJECTED":
		*e = IconStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IconStateEnum: %s", s)
	}
}

// Icon - Information about a partner's icon.
type Icon struct {
	// Output only. The icon's disapproval reason(s). Only applies to icons with `REJECTED` state.
	DisapprovalReasons []IconDisapprovalReasonsEnum `json:"disapprovalReasons,omitempty"`
	// Output only. The approved icon's Google-hosted URI. Only applies to icons with `APPROVED` state.
	IconURI *string `json:"iconUri,omitempty"`
	// Required. Input only. The icon contents, which must be in PNG format, or convertible to PNG.
	ImageData *string `json:"imageData,omitempty"`
	// Required. Output only. The resource name for the icon in the format `accounts/{account_id}/icons/{icon_id}`. Google generates the `icon_id` during the `create` operation. Use the `icon_id` to associate the icon with a brand using the [accounts.brands](/hotels/hotel-prices/api-reference/rest/v3/accounts.brands#resource:-brand) API.
	Name *string `json:"name,omitempty"`
	// Optional. Value for tracking the icon. It could be the primary key to your icon in your system, or the icon's filename. Google does not use this value.
	Reference *string `json:"reference,omitempty"`
	// Output only. The icon's current state.
	State *IconStateEnum `json:"state,omitempty"`
}

// IconInput - Information about a partner's icon.
type IconInput struct {
	// Required. Input only. The icon contents, which must be in PNG format, or convertible to PNG.
	ImageData *string `json:"imageData,omitempty"`
	// Optional. Value for tracking the icon. It could be the primary key to your icon in your system, or the icon's filename. Google does not use this value.
	Reference *string `json:"reference,omitempty"`
}
