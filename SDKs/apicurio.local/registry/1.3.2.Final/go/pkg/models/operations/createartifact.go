// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateArtifactIfExistsEnum - Set this option to instruct the server on what to do if the artifact already exists.
type CreateArtifactIfExistsEnum string

const (
	CreateArtifactIfExistsEnumFail           CreateArtifactIfExistsEnum = "FAIL"
	CreateArtifactIfExistsEnumUpdate         CreateArtifactIfExistsEnum = "UPDATE"
	CreateArtifactIfExistsEnumReturn         CreateArtifactIfExistsEnum = "RETURN"
	CreateArtifactIfExistsEnumReturnOrUpdate CreateArtifactIfExistsEnum = "RETURN_OR_UPDATE"
)

func (e *CreateArtifactIfExistsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FAIL":
		fallthrough
	case "UPDATE":
		fallthrough
	case "RETURN":
		fallthrough
	case "RETURN_OR_UPDATE":
		*e = CreateArtifactIfExistsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateArtifactIfExistsEnum: %s", s)
	}
}

type CreateArtifactQueryParams struct {
	// Set this option to instruct the server on what to do if the artifact already exists.
	IfExists *CreateArtifactIfExistsEnum `queryParam:"style=form,explode=true,name=ifExists"`
}

// CreateArtifactXRegistryArtifactTypeEnum - Specifies the type of the artifact being added. Possible values include:
//
// * Avro (`AVRO`)
// * Protobuf (`PROTOBUF`)
// * Protobuf File Descriptor (`PROTOBUF_FD`)
// * JSON Schema (`JSON`)
// * Kafka Connect (`KCONNECT`)
// * OpenAPI (`OPENAPI`)
// * AsyncAPI (`ASYNCAPI`)
// * GraphQL (`GRAPHQL`)
// * Web Services Description Language (`WSDL`)
// * XML Schema (`XSD`)
type CreateArtifactXRegistryArtifactTypeEnum string

const (
	CreateArtifactXRegistryArtifactTypeEnumAvro       CreateArtifactXRegistryArtifactTypeEnum = "AVRO"
	CreateArtifactXRegistryArtifactTypeEnumProtobuf   CreateArtifactXRegistryArtifactTypeEnum = "PROTOBUF"
	CreateArtifactXRegistryArtifactTypeEnumProtobufFd CreateArtifactXRegistryArtifactTypeEnum = "PROTOBUF_FD"
	CreateArtifactXRegistryArtifactTypeEnumJSON       CreateArtifactXRegistryArtifactTypeEnum = "JSON"
	CreateArtifactXRegistryArtifactTypeEnumOpenapi    CreateArtifactXRegistryArtifactTypeEnum = "OPENAPI"
	CreateArtifactXRegistryArtifactTypeEnumAsyncapi   CreateArtifactXRegistryArtifactTypeEnum = "ASYNCAPI"
	CreateArtifactXRegistryArtifactTypeEnumGraphql    CreateArtifactXRegistryArtifactTypeEnum = "GRAPHQL"
	CreateArtifactXRegistryArtifactTypeEnumKconnect   CreateArtifactXRegistryArtifactTypeEnum = "KCONNECT"
	CreateArtifactXRegistryArtifactTypeEnumWsdl       CreateArtifactXRegistryArtifactTypeEnum = "WSDL"
	CreateArtifactXRegistryArtifactTypeEnumXsd        CreateArtifactXRegistryArtifactTypeEnum = "XSD"
	CreateArtifactXRegistryArtifactTypeEnumXML        CreateArtifactXRegistryArtifactTypeEnum = "XML"
)

func (e *CreateArtifactXRegistryArtifactTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AVRO":
		fallthrough
	case "PROTOBUF":
		fallthrough
	case "PROTOBUF_FD":
		fallthrough
	case "JSON":
		fallthrough
	case "OPENAPI":
		fallthrough
	case "ASYNCAPI":
		fallthrough
	case "GRAPHQL":
		fallthrough
	case "KCONNECT":
		fallthrough
	case "WSDL":
		fallthrough
	case "XSD":
		fallthrough
	case "XML":
		*e = CreateArtifactXRegistryArtifactTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateArtifactXRegistryArtifactTypeEnum: %s", s)
	}
}

type CreateArtifactHeaders struct {
	// A client-provided, globally unique identifier for the new artifact.
	XRegistryArtifactID *string `header:"style=simple,explode=false,name=X-Registry-ArtifactId"`
	// Specifies the type of the artifact being added. Possible values include:
	//
	// * Avro (`AVRO`)
	// * Protobuf (`PROTOBUF`)
	// * Protobuf File Descriptor (`PROTOBUF_FD`)
	// * JSON Schema (`JSON`)
	// * Kafka Connect (`KCONNECT`)
	// * OpenAPI (`OPENAPI`)
	// * AsyncAPI (`ASYNCAPI`)
	// * GraphQL (`GRAPHQL`)
	// * Web Services Description Language (`WSDL`)
	// * XML Schema (`XSD`)
	XRegistryArtifactType *CreateArtifactXRegistryArtifactTypeEnum `header:"style=simple,explode=false,name=X-Registry-ArtifactType"`
}

type CreateArtifactRequest struct {
	QueryParams CreateArtifactQueryParams
	Headers     CreateArtifactHeaders
	// The content of the artifact being created. This is often, but not always, JSON data
	// representing one of the supported artifact types:
	//
	// * Avro (`AVRO`)
	// * Protobuf (`PROTOBUF`)
	// * Protobuf File Descriptor (`PROTOBUF_FD`)
	// * JSON Schema (`JSON`)
	// * Kafka Connect (`KCONNECT`)
	// * OpenAPI (`OPENAPI`)
	// * AsyncAPI (`ASYNCAPI`)
	// * GraphQL (`GRAPHQL`)
	// * Web Services Description Language (`WSDL`)
	// * XML Schema (`XSD`)
	//
	Request []byte `request:"mediaType=*/*"`
}

type CreateArtifactResponse struct {
	// Artifact was successfully created.
	ArtifactMetaData *shared.ArtifactMetaData
	ContentType      string
	// Common response for all operations that can return a `400` error.
	Error       *shared.Error
	StatusCode  int
	RawResponse *http.Response
}
