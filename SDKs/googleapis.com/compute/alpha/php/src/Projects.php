<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Disable this project as a shared VPC host project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnHostRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnHostSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnHostResponse
     */
	public function computeProjectsDisableXpnHost(
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnHostRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnHostSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnHostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/disableXpnHost', \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnHostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnHostRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnHostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disable a service resource (also known as service project) associated with this host project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnResourceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnResourceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnResourceResponse
     */
	public function computeProjectsDisableXpnResource(
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnResourceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnResourceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnResourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/disableXpnResource', \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnResourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "projectsDisableXpnResourceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnResourceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsDisableXpnResourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enable this project as a shared VPC host project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnHostRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnHostSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnHostResponse
     */
	public function computeProjectsEnableXpnHost(
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnHostRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnHostSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnHostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/enableXpnHost', \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnHostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnHostRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnHostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enable service resource (a.k.a service project) for a host project, so that subnets in the host project can be used by instances in the service project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnResourceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnResourceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnResourceResponse
     */
	public function computeProjectsEnableXpnResource(
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnResourceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnResourceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnResourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/enableXpnResource', \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnResourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "projectsEnableXpnResourceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnResourceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsEnableXpnResourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified Project resource. To decrease latency for this method, you can optionally omit any unneeded information from the response by using a field mask. This practice is especially recommended for unused quota information (the `quotas` field). To exclude one or more fields, set your request's `fields` query parameter to only include the fields you need. For example, to only include the `id` and `selfLink` fields, add the query parameter `?fields=id,selfLink` to your request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetResponse
     */
	public function computeProjectsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}', \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->project = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Project', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the shared VPC host project that this project links to. May be empty if no link exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnHostRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnHostSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnHostResponse
     */
	public function computeProjectsGetXpnHost(
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnHostRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnHostSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnHostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/getXpnHost', \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnHostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnHostRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnHostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->project = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Project', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets service resources (a.k.a service project) associated with this host project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnResourcesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnResourcesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnResourcesResponse
     */
	public function computeProjectsGetXpnResources(
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnResourcesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnResourcesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnResourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/getXpnResources', \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnResourcesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnResourcesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsGetXpnResourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectsGetXpnResources = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectsGetXpnResources', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all shared VPC host projects visible to the user in an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsListXpnHostsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsListXpnHostsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsListXpnHostsResponse
     */
	public function computeProjectsListXpnHosts(
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsListXpnHostsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsListXpnHostsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsListXpnHostsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/listXpnHosts', \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsListXpnHostsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "projectsListXpnHostsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeProjectsListXpnHostsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsListXpnHostsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->xpnHostList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\XpnHostList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves a persistent disk from one zone to another.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveDiskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveDiskSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveDiskResponse
     */
	public function computeProjectsMoveDisk(
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveDiskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveDiskSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveDiskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/moveDisk', \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveDiskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "diskMoveRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveDiskRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveDiskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves an instance and its attached persistent disks from one zone to another. *Note*: Moving VMs or disks by using this method might cause unexpected behavior. For more information, see the [known issue](/compute/docs/troubleshooting/known-issues#moving_vms_or_disks_using_the_moveinstance_api_or_the_causes_unexpected_behavior).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveInstanceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveInstanceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveInstanceResponse
     */
	public function computeProjectsMoveInstance(
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveInstanceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveInstanceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveInstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/moveInstance', \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveInstanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceMoveRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveInstanceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsMoveInstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets metadata common to all instances within the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetCommonInstanceMetadataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetCommonInstanceMetadataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetCommonInstanceMetadataResponse
     */
	public function computeProjectsSetCommonInstanceMetadata(
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetCommonInstanceMetadataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetCommonInstanceMetadataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetCommonInstanceMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/setCommonInstanceMetadata', \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetCommonInstanceMetadataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "metadata", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetCommonInstanceMetadataRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetCommonInstanceMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the default network tier of the project. The default network tier is used when an address/forwardingRule/instance is created without specifying the network tier field.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultNetworkTierRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultNetworkTierSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultNetworkTierResponse
     */
	public function computeProjectsSetDefaultNetworkTier(
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultNetworkTierRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultNetworkTierSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultNetworkTierResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/setDefaultNetworkTier', \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultNetworkTierRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "projectsSetDefaultNetworkTierRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultNetworkTierRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultNetworkTierResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the default service account of the project. The default service account is used when a VM instance is created with the service account email address set to "default".
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultServiceAccountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultServiceAccountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultServiceAccountResponse
     */
	public function computeProjectsSetDefaultServiceAccount(
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultServiceAccountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultServiceAccountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultServiceAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/setDefaultServiceAccount', \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultServiceAccountRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "projectsSetDefaultServiceAccountRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultServiceAccountRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetDefaultServiceAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enables the usage export feature and sets the usage export bucket where reports are stored. If you provide an empty request body using this method, the usage export feature will be disabled.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetUsageExportBucketRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetUsageExportBucketSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetUsageExportBucketResponse
     */
	public function computeProjectsSetUsageExportBucket(
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetUsageExportBucketRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetUsageExportBucketSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetUsageExportBucketResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/setUsageExportBucket', \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetUsageExportBucketRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "usageExportLocation", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetUsageExportBucketRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeProjectsSetUsageExportBucketResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}