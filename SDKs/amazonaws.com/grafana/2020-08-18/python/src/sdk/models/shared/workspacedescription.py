"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import accountaccesstype_enum as shared_accountaccesstype_enum
from ..shared import authenticationsummary as shared_authenticationsummary
from ..shared import datasourcetype_enum as shared_datasourcetype_enum
from ..shared import licensetype_enum as shared_licensetype_enum
from ..shared import networkaccessconfiguration as shared_networkaccessconfiguration
from ..shared import notificationdestinationtype_enum as shared_notificationdestinationtype_enum
from ..shared import permissiontype_enum as shared_permissiontype_enum
from ..shared import vpcconfiguration as shared_vpcconfiguration
from ..shared import workspacestatus_enum as shared_workspacestatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkspaceDescription:
    r"""A structure containing information about an Amazon Managed Grafana workspace in your account."""
    
    authentication: shared_authenticationsummary.AuthenticationSummary = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication') }})  
    created: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    data_sources: list[shared_datasourcetype_enum.DataSourceTypeEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSources') }})  
    endpoint: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpoint') }})  
    grafana_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grafanaVersion') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    modified: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    status: shared_workspacestatus_enum.WorkspaceStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    account_access_type: Optional[shared_accountaccesstype_enum.AccountAccessTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountAccessType'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    free_trial_consumed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freeTrialConsumed'), 'exclude': lambda f: f is None }})  
    free_trial_expiration: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freeTrialExpiration'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    license_expiration: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licenseExpiration'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    license_type: Optional[shared_licensetype_enum.LicenseTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licenseType'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    network_access_control: Optional[shared_networkaccessconfiguration.NetworkAccessConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkAccessControl'), 'exclude': lambda f: f is None }})  
    notification_destinations: Optional[list[shared_notificationdestinationtype_enum.NotificationDestinationTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notificationDestinations'), 'exclude': lambda f: f is None }})  
    organizational_units: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organizationalUnits'), 'exclude': lambda f: f is None }})  
    organization_role_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organizationRoleName'), 'exclude': lambda f: f is None }})  
    permission_type: Optional[shared_permissiontype_enum.PermissionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissionType'), 'exclude': lambda f: f is None }})  
    stack_set_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stackSetName'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    vpc_configuration: Optional[shared_vpcconfiguration.VpcConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpcConfiguration'), 'exclude': lambda f: f is None }})  
    workspace_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workspaceRoleArn'), 'exclude': lambda f: f is None }})  
    