"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import additionaloption as shared_additionaloption
from ..shared import amount as shared_amount
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PurchasedRate:
    r"""The \\"rate\\" that has been selected and purchased for the shipment, as referenced by the <b>rateId</b> value."""
    
    additional_options: Optional[list[shared_additionaloption.AdditionalOption]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalOptions'), 'exclude': lambda f: f is None }})
    r"""An list of additional, optional features that have been purchased for the shipment."""  
    base_shipping_cost: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('baseShippingCost'), 'exclude': lambda f: f is None }})
    r"""A complex type that describes the value of a monetary amount as represented by a global currency."""  
    destination_time_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationTimeZone'), 'exclude': lambda f: f is None }})
    r"""The time zone of the destination according to <a href=\\"https://www.iana.org/time-zones\\" target=\\"_blank\\">Time Zone Database</a>. For example, \\"America/Los_Angeles\\"."""  
    max_estimated_delivery_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxEstimatedDeliveryDate'), 'exclude': lambda f: f is None }})
    r"""A string value representing maximum (latest) estimated delivery time, formatted as an <a href=\\"https://www.iso.org/iso-8601-date-and-time-format.html\\" title=\\"https://www.iso.org\\" target=\\"_blank\\">ISO 8601</a> string, which is based on the 24-hour Coordinated Universal Time (UTC) clock.  <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[HH]:[MM]:[SS].[SSS]Z</code> <br><b>Example:</b> <code>2018-08-20T07:09:00.000Z</code>"""  
    min_estimated_delivery_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minEstimatedDeliveryDate'), 'exclude': lambda f: f is None }})
    r"""A string value representing minimum (earliest) estimated delivery time, formatted as an <a href=\\"https://www.iso.org/iso-8601-date-and-time-format.html\\" title=\\"https://www.iso.org\\" target=\\"_blank\\">ISO 8601</a>ISO 8601</a> UTC string."""  
    pickup_networks: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupNetworks'), 'exclude': lambda f: f is None }})
    r"""A list of pickup networks compatible with the shipping service."""  
    pickup_slot_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupSlotId'), 'exclude': lambda f: f is None }})
    r"""This unique eBay-assigned ID value is returned only if the shipment has been configured for a scheduled pickup."""  
    pickup_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupType'), 'exclude': lambda f: f is None }})
    r"""The type of pickup or drop off configured for the shipment. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/logistics/types/api:PickupTypeEnum'>eBay API documentation</a>"""  
    rate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rateId'), 'exclude': lambda f: f is None }})
    r"""The eBay-generated ID of the shipping rate that the seller has chosen to purchase for the shipment."""  
    shipping_carrier_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingCarrierCode'), 'exclude': lambda f: f is None }})
    r"""The ID code for the carrier that was selected for the package shipment."""  
    shipping_carrier_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingCarrierName'), 'exclude': lambda f: f is None }})
    r"""The name of the shipping carrier."""  
    shipping_quote_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingQuoteId'), 'exclude': lambda f: f is None }})
    r"""The unique eBay-generated ID of the <i>shipping quote</i> from which the seller selected a shipping rate (<b>rateId</b>)."""  
    shipping_service_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingServiceCode'), 'exclude': lambda f: f is None }})
    r"""String ID code for the shipping service selected for the package shipment. This is a service that the shipping carrier supplies."""  
    shipping_service_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingServiceName'), 'exclude': lambda f: f is None }})
    r"""The name of the shipping service."""  
    total_shipping_cost: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalShippingCost'), 'exclude': lambda f: f is None }})
    r"""A complex type that describes the value of a monetary amount as represented by a global currency."""  
    