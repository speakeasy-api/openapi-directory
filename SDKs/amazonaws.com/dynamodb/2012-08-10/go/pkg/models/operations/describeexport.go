// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeExportXAmzTargetEnum
type DescribeExportXAmzTargetEnum string

const (
	DescribeExportXAmzTargetEnumDynamoDb20120810DescribeExport DescribeExportXAmzTargetEnum = "DynamoDB_20120810.DescribeExport"
)

func (e DescribeExportXAmzTargetEnum) ToPointer() *DescribeExportXAmzTargetEnum {
	return &e
}

func (e *DescribeExportXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DynamoDB_20120810.DescribeExport":
		*e = DescribeExportXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeExportXAmzTargetEnum: %v", v)
	}
}

type DescribeExportRequest struct {
	DescribeExportInput shared.DescribeExportInput   `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          DescribeExportXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeExportResponse struct {
	ContentType string
	// Success
	DescribeExportOutput *shared.DescribeExportOutput
	// ExportNotFoundException
	ExportNotFoundException interface{}
	// InternalServerError
	InternalServerError interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
}
