"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class UserLoginTypeEnum(str, Enum):
    r"""`0` - Facebook.<br>`1` - Google.<br>`99` - API.<br>`100` - Zoom.<br>`101` - SSO."""
    ZERO = '0'
    ONE = '1'
    NINETY_NINE = '99'
    ONE_HUNDRED = '100'
    ONE_HUNDRED_AND_ONE = '101'


@dataclasses.dataclass
class UserRequest:
    
    user_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'userId', 'style': 'simple', 'explode': False }})
    r"""The user ID or email address of the user. For user-level apps, pass `me` as the value for userId."""  
    login_type: Optional[UserLoginTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'login_type', 'style': 'form', 'explode': True }})
    r"""`0` - Facebook.<br>`1` - Google.<br>`99` - API.<br>`100` - Zoom.<br>`101` - SSO."""  
    

@dataclasses.dataclass
class User200ApplicationXMLCustomAttributes:
    r"""Custom attribute(s) that have been assigned to the user."""
    
    key: Optional[str] = dataclasses.field(default=None)
    r"""Identifier for the custom attribute."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the custom attribute."""  
    value: Optional[str] = dataclasses.field(default=None)
    r"""Value of the custom attribute."""  
    
class User200ApplicationXMLLoginTypeEnum(str, Enum):
    r"""Login type.
    
    `0` : Facebook
    
    `1` : Google
    
    `99` : API
    
    `100` : ZOOM
    
    `101` : SSO
    """
    ZERO = '0'
    ONE = '1'
    NINETY_NINE = '99'
    ONE_HUNDRED = '100'
    ONE_HUNDRED_AND_ONE = '101'


@dataclasses.dataclass
class User200ApplicationXMLPhoneNumbers:
    
    code: Optional[str] = dataclasses.field(default=None)
    r"""Country code of the phone number. For example, for United States phone numbers, the value of this field should be \\"+1\\"."""  
    country: Optional[str] = dataclasses.field(default=None)
    r"""[Country ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) of the phone number. For example, if the phone number provided in the `number` field is a Brazil based number, the value of the `country` field should be `BR`."""  
    number: Optional[str] = dataclasses.field(default=None)
    r"""Phone number of the user."""  
    verified: Optional[bool] = dataclasses.field(default=None)
    r"""Indicates whether the phone number has been verified by Zoom or not."""  
    
class User200ApplicationXMLStatusEnum(str, Enum):
    r"""Status of user's account."""
    PENDING = 'pending'
    ACTIVE = 'active'
    INACTIVE = 'inactive'

class User200ApplicationXMLTypeEnum(str, Enum):
    r"""User's plan type:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.<br>`99` - None (this can only be set with `ssoCreate`)."""
    ONE = '1'
    TWO = '2'
    THREE = '3'
    NINETY_NINE = '99'


@dataclasses.dataclass
class User200ApplicationXML:
    r"""The user object represents a specific user on Zoom."""
    
    email: str = dataclasses.field()
    r"""User's email address."""  
    type: User200ApplicationXMLTypeEnum = dataclasses.field()
    r"""User's plan type:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.<br>`99` - None (this can only be set with `ssoCreate`)."""  
    account_id: Optional[str] = dataclasses.field(default=None)
    r"""User's account ID."""  
    cms_user_id: Optional[str] = dataclasses.field(default=None)
    r"""CMS ID of user, only enabled for Kaltura integration."""  
    company: Optional[str] = dataclasses.field(default=None)
    r"""User's company."""  
    created_at: Optional[datetime] = dataclasses.field(default=None)
    r"""The date and time at which this user was created."""  
    custom_attributes: Optional[User200ApplicationXMLCustomAttributes] = dataclasses.field(default=None)
    r"""Custom attribute(s) that have been assigned to the user."""  
    dept: Optional[str] = dataclasses.field(default=None)
    r"""Department."""  
    first_name: Optional[str] = dataclasses.field(default=None)
    r"""User's first name."""  
    group_ids: Optional[list[str]] = dataclasses.field(default=None)
    r"""IDs of the web groups user belongs to."""  
    host_key: Optional[str] = dataclasses.field(default=None)
    r"""User's host key."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""User ID."""  
    im_group_ids: Optional[list[str]] = dataclasses.field(default=None)
    r"""IM IDs of the groups user belongs to."""  
    jid: Optional[str] = dataclasses.field(default=None)  
    job_title: Optional[str] = dataclasses.field(default=None)
    r"""User's job title."""  
    language: Optional[str] = dataclasses.field(default=None)
    r"""Default language for the Zoom Web Portal."""  
    last_client_version: Optional[str] = dataclasses.field(default=None)
    r"""User last login client version."""  
    last_login_time: Optional[datetime] = dataclasses.field(default=None)
    r"""User last login time."""  
    last_name: Optional[str] = dataclasses.field(default=None)
    r"""User's last name."""  
    location: Optional[str] = dataclasses.field(default=None)
    r"""User's location."""  
    login_type: Optional[User200ApplicationXMLLoginTypeEnum] = dataclasses.field(default=None)
    r"""Login type.
    
    `0` : Facebook
    
    `1` : Google
    
    `99` : API
    
    `100` : ZOOM
    
    `101` : SSO
    """  
    manager: Optional[str] = dataclasses.field(default=None)
    r"""The manager for the user."""  
    personal_meeting_url: Optional[str] = dataclasses.field(default=None)
    r"""User's personal meeting url."""  
    phone_country: Optional[str] = dataclasses.field(default=None)
    r"""**Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead of this field. <br> User's country for Company Phone Number."""  
    phone_number: Optional[str] = dataclasses.field(default=None)
    r"""**Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead of this field. <br> User's phone number."""  
    phone_numbers: Optional[User200ApplicationXMLPhoneNumbers] = dataclasses.field(default=None)  
    pic_url: Optional[str] = dataclasses.field(default=None)
    r"""The URL for user's profile picture."""  
    plan_united_type: Optional[str] = dataclasses.field(default=None)
    r"""United plan [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-united-plans). Only returned if user is enrolled in the Zoom United plan."""  
    pmi: Optional[int] = dataclasses.field(default=None)
    r"""Personal meeting ID."""  
    role_id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the [role](https://marketplace.zoom.us/docs/api-reference/zoom-api/roles/roles) assigned to the user."""  
    role_name: Optional[str] = dataclasses.field(default=None)
    r"""User's [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) name."""  
    status: Optional[User200ApplicationXMLStatusEnum] = dataclasses.field(default=None)
    r"""Status of user's account."""  
    timezone: Optional[str] = dataclasses.field(default=None)
    r"""The time zone of the user."""  
    use_pmi: Optional[bool] = dataclasses.field(default=None)
    r"""Displays `true` if user has enabled PMI for instant meetinsgs, `false` otherwise."""  
    vanity_url: Optional[str] = dataclasses.field(default=None)
    r"""Personal meeting room URL, if the user has one."""  
    verified: Optional[int] = dataclasses.field(default=None)
    r"""Displays whether user is verified or not. <br>
    `1` - Account verified.<br>
    `0` - Account not verified.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class User200ApplicationJSONCustomAttributes:
    r"""Custom attribute(s) that have been assigned to the user."""
    
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""Identifier for the custom attribute."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the custom attribute."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value of the custom attribute."""  
    
class User200ApplicationJSONLoginTypeEnum(str, Enum):
    r"""Login type.
    
    `0` : Facebook
    
    `1` : Google
    
    `99` : API
    
    `100` : ZOOM
    
    `101` : SSO
    """
    ZERO = '0'
    ONE = '1'
    NINETY_NINE = '99'
    ONE_HUNDRED = '100'
    ONE_HUNDRED_AND_ONE = '101'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class User200ApplicationJSONPhoneNumbers:
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Country code of the phone number. For example, for United States phone numbers, the value of this field should be \\"+1\\"."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""[Country ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) of the phone number. For example, if the phone number provided in the `number` field is a Brazil based number, the value of the `country` field should be `BR`."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""Phone number of the user."""  
    verified: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verified'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the phone number has been verified by Zoom or not."""  
    
class User200ApplicationJSONStatusEnum(str, Enum):
    r"""Status of user's account."""
    PENDING = 'pending'
    ACTIVE = 'active'
    INACTIVE = 'inactive'

class User200ApplicationJSONTypeEnum(str, Enum):
    r"""User's plan type:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.<br>`99` - None (this can only be set with `ssoCreate`)."""
    ONE = '1'
    TWO = '2'
    THREE = '3'
    NINETY_NINE = '99'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class User200ApplicationJSON:
    r"""The user object represents a specific user on Zoom."""
    
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""User's email address."""  
    type: User200ApplicationJSONTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""User's plan type:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.<br>`99` - None (this can only be set with `ssoCreate`)."""  
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id'), 'exclude': lambda f: f is None }})
    r"""User's account ID."""  
    cms_user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cms_user_id'), 'exclude': lambda f: f is None }})
    r"""CMS ID of user, only enabled for Kaltura integration."""  
    company: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company'), 'exclude': lambda f: f is None }})
    r"""User's company."""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time at which this user was created."""  
    custom_attributes: Optional[User200ApplicationJSONCustomAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_attributes'), 'exclude': lambda f: f is None }})
    r"""Custom attribute(s) that have been assigned to the user."""  
    dept: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dept'), 'exclude': lambda f: f is None }})
    r"""Department."""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name'), 'exclude': lambda f: f is None }})
    r"""User's first name."""  
    group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_ids'), 'exclude': lambda f: f is None }})
    r"""IDs of the web groups user belongs to."""  
    host_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host_key'), 'exclude': lambda f: f is None }})
    r"""User's host key."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""User ID."""  
    im_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('im_group_ids'), 'exclude': lambda f: f is None }})
    r"""IM IDs of the groups user belongs to."""  
    jid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jid'), 'exclude': lambda f: f is None }})  
    job_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('job_title'), 'exclude': lambda f: f is None }})
    r"""User's job title."""  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""Default language for the Zoom Web Portal."""  
    last_client_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_client_version'), 'exclude': lambda f: f is None }})
    r"""User last login client version."""  
    last_login_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_login_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""User last login time."""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name'), 'exclude': lambda f: f is None }})
    r"""User's last name."""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""User's location."""  
    login_type: Optional[User200ApplicationJSONLoginTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('login_type'), 'exclude': lambda f: f is None }})
    r"""Login type.
    
    `0` : Facebook
    
    `1` : Google
    
    `99` : API
    
    `100` : ZOOM
    
    `101` : SSO
    """  
    manager: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manager'), 'exclude': lambda f: f is None }})
    r"""The manager for the user."""  
    personal_meeting_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('personal_meeting_url'), 'exclude': lambda f: f is None }})
    r"""User's personal meeting url."""  
    phone_country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_country'), 'exclude': lambda f: f is None }})
    r"""**Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead of this field. <br> User's country for Company Phone Number."""  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_number'), 'exclude': lambda f: f is None }})
    r"""**Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead of this field. <br> User's phone number."""  
    phone_numbers: Optional[User200ApplicationJSONPhoneNumbers] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_numbers'), 'exclude': lambda f: f is None }})  
    pic_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pic_url'), 'exclude': lambda f: f is None }})
    r"""The URL for user's profile picture."""  
    plan_united_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_united_type'), 'exclude': lambda f: f is None }})
    r"""United plan [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-united-plans). Only returned if user is enrolled in the Zoom United plan."""  
    pmi: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pmi'), 'exclude': lambda f: f is None }})
    r"""Personal meeting ID."""  
    role_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the [role](https://marketplace.zoom.us/docs/api-reference/zoom-api/roles/roles) assigned to the user."""  
    role_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role_name'), 'exclude': lambda f: f is None }})
    r"""User's [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) name."""  
    status: Optional[User200ApplicationJSONStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of user's account."""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""The time zone of the user."""  
    use_pmi: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use_pmi'), 'exclude': lambda f: f is None }})
    r"""Displays `true` if user has enabled PMI for instant meetinsgs, `false` otherwise."""  
    vanity_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vanity_url'), 'exclude': lambda f: f is None }})
    r"""Personal meeting room URL, if the user has one."""  
    verified: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verified'), 'exclude': lambda f: f is None }})
    r"""Displays whether user is verified or not. <br>
    `1` - Account verified.<br>
    `0` - Account not verified.
    """  
    

@dataclasses.dataclass
class UserResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    user_200_application_json_object: Optional[User200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200` **OK**<br>
    User object returned.
    """  
    