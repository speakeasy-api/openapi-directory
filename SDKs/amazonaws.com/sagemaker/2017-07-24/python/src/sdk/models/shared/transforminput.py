"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import compressiontype_enum as shared_compressiontype_enum
from ..shared import splittype_enum as shared_splittype_enum
from ..shared import transformdatasource as shared_transformdatasource
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransformInput:
    r"""Describes the input source of a transform job and the way the transform job consumes it."""
    
    data_source: shared_transformdatasource.TransformDataSource = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataSource') }})  
    compression_type: Optional[shared_compressiontype_enum.CompressionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompressionType'), 'exclude': lambda f: f is None }})  
    content_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContentType'), 'exclude': lambda f: f is None }})  
    split_type: Optional[shared_splittype_enum.SplitTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SplitType'), 'exclude': lambda f: f is None }})  
    