<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TypeProviders 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes a type provider.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersDeleteResponse
     */
	public function deploymentmanagerTypeProvidersDelete(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a specific type provider.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetResponse
     */
	public function deploymentmanagerTypeProvidersGet(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->typeProvider = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TypeProvider', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a type info for a type provided by a TypeProvider.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetTypeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetTypeResponse
     */
	public function deploymentmanagerTypeProvidersGetType(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetTypeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}/types/{type}', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetTypeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersGetTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->typeInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TypeInfo', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a type provider.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersInsertResponse
     */
	public function deploymentmanagerTypeProvidersInsert(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/v2beta/projects/{project}/global/typeProviders', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "typeProvider", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all resource type providers for Deployment Manager.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListResponse
     */
	public function deploymentmanagerTypeProvidersList(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/v2beta/projects/{project}/global/typeProviders', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->typeProvidersListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TypeProvidersListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the type info for a TypeProvider.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListTypesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListTypesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListTypesResponse
     */
	public function deploymentmanagerTypeProvidersListTypes(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListTypesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListTypesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListTypesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}/types', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListTypesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListTypesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersListTypesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->typeProvidersListTypesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TypeProvidersListTypesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches a type provider.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersPatchResponse
     */
	public function deploymentmanagerTypeProvidersPatch(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "typeProvider1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a type provider.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersUpdateResponse
     */
	public function deploymentmanagerTypeProvidersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}', \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "typeProvider1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentmanagerTypeProvidersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}