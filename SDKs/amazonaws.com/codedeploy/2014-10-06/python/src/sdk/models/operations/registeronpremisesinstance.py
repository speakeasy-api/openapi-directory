"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import registeronpremisesinstanceinput as shared_registeronpremisesinstanceinput
from enum import Enum
from typing import Any, Optional

class RegisterOnPremisesInstanceXAmzTargetEnum(str, Enum):
    CODE_DEPLOY_20141006_REGISTER_ON_PREMISES_INSTANCE = 'CodeDeploy_20141006.RegisterOnPremisesInstance'


@dataclasses.dataclass
class RegisterOnPremisesInstanceRequest:
    
    register_on_premises_instance_input: shared_registeronpremisesinstanceinput.RegisterOnPremisesInstanceInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: RegisterOnPremisesInstanceXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class RegisterOnPremisesInstanceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    iam_arn_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""IamArnRequiredException"""  
    iam_session_arn_already_registered_exception: Optional[Any] = dataclasses.field(default=None)
    r"""IamSessionArnAlreadyRegisteredException"""  
    iam_user_arn_already_registered_exception: Optional[Any] = dataclasses.field(default=None)
    r"""IamUserArnAlreadyRegisteredException"""  
    iam_user_arn_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""IamUserArnRequiredException"""  
    instance_name_already_registered_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InstanceNameAlreadyRegisteredException"""  
    instance_name_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InstanceNameRequiredException"""  
    invalid_iam_session_arn_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidIamSessionArnException"""  
    invalid_iam_user_arn_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidIamUserArnException"""  
    invalid_instance_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidInstanceNameException"""  
    multiple_iam_arns_provided_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MultipleIamArnsProvidedException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    