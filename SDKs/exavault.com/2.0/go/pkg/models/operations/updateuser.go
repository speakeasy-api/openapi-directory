// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateUserUpdateUserRequestBodyRoleEnum - The type of user (**admin** or **user**). Note that admin users cannot have a `homeResource` other than '/', and will have full permissions, but you must provide at least "download,upload,list,delete" in the `permissions` parameter.
type UpdateUserUpdateUserRequestBodyRoleEnum string

const (
	UpdateUserUpdateUserRequestBodyRoleEnumUser  UpdateUserUpdateUserRequestBodyRoleEnum = "user"
	UpdateUserUpdateUserRequestBodyRoleEnumAdmin UpdateUserUpdateUserRequestBodyRoleEnum = "admin"
)

func (e *UpdateUserUpdateUserRequestBodyRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "user":
		fallthrough
	case "admin":
		*e = UpdateUserUpdateUserRequestBodyRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateUserUpdateUserRequestBodyRoleEnum: %s", s)
	}
}

type UpdateUserUpdateUserRequestBody struct {
	// Email address for the user
	Email *string `json:"email,omitempty"`
	// Optional timestamp when the user should expire.
	Expiration *string `json:"expiration,omitempty"`
	// Resource identifier for the user's home folder. See details on [how to specify resources](#section/Identifying-Resources) above.
	//
	// The user will be locked to this directory and unable to move 'up' in the account. If the folder does not exist in the account, it will be created when the user logs in.
	//
	// This setting is ignored for users with the `role` **admin**.
	HomeResource *string `json:"homeResource,omitempty"`
	// If true, the user will be prevented from logging in
	Locked *bool `json:"locked,omitempty"`
	// An optional nickname (e.g. 'David from Sales').
	Nickname *string `json:"nickname,omitempty"`
	// Set this to **true** to enable extra help popups in the web file manager for this user.
	Onboarding *bool `json:"onboarding,omitempty"`
	// New password for the user
	Password    *string                 `json:"password,omitempty"`
	Permissions *shared.UserPermissions `json:"permissions,omitempty"`
	// The type of user (**admin** or **user**). Note that admin users cannot have a `homeResource` other than '/', and will have full permissions, but you must provide at least "download,upload,list,delete" in the `permissions` parameter.
	Role *UpdateUserUpdateUserRequestBodyRoleEnum `json:"role,omitempty"`
	// Time zone, used for accurate time display within the application. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values.
	//
	TimeZone *string `json:"timeZone,omitempty"`
	// New username for the user. This should follow standard username conventions - spaces are not allowed, etc. We do allow email addresses as usernames.
	//
	// **Note** Usernames must be unique across all ExaVault accounts.
	Username *string `json:"username,omitempty"`
}

type UpdateUserRequest struct {
	RequestBody *UpdateUserUpdateUserRequestBody `request:"mediaType=application/json"`
	// Access token required to make the API call.
	EvAccessToken string `header:"style=simple,explode=false,name=ev-access-token"`
	// API key required to make the API call.
	EvAPIKey string `header:"style=simple,explode=false,name=ev-api-key"`
	// The user's ID. Note that this is our internal ID, and _not the username_. You can obtain it by calling the [GET /users](#operation/listUsers) method.
	ID int `pathParam:"style=simple,explode=false,name=id"`
}

type UpdateUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful Operation
	UserResponse *shared.UserResponse
}
