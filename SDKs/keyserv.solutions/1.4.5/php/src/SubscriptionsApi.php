<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SubscriptionsApi 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * subscriptionsApiCount
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiCountResponse
     */
	public function subscriptionsApiCount(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiCountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SubscriptionsApi/Count');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiCountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionsApiCount200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * subscriptionsApiDeleteSubscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDeleteSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDeleteSubscriptionResponse
     */
	public function subscriptionsApiDeleteSubscription(
        \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDeleteSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDeleteSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SubscriptionsApi/{serial}', \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDeleteSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDeleteSubscriptionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDeleteSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * subscriptionsApiDeleteSubscription2
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDeleteSubscription2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDeleteSubscription2Response
     */
	public function subscriptionsApiDeleteSubscription2(
        \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDeleteSubscription2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDeleteSubscription2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SubscriptionsApi/{serial}', \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDeleteSubscription2Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDeleteSubscription2Request::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDeleteSubscription2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * subscriptionsApiDisable
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDisableResponse
     */
	public function subscriptionsApiDisable(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDisableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SubscriptionsApi/Disable');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDisableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * subscriptionsApiDisable2
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDisable2Response
     */
	public function subscriptionsApiDisable2(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDisable2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SubscriptionsApi/Disable');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiDisable2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * subscriptionsApiEnable
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiEnableResponse
     */
	public function subscriptionsApiEnable(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiEnableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SubscriptionsApi/Enable');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiEnableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * subscriptionsApiEnable2
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiEnable2Response
     */
	public function subscriptionsApiEnable2(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiEnable2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SubscriptionsApi/Enable');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiEnable2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * subscriptionsApiFind
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiFindResponse
     */
	public function subscriptionsApiFind(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiFindResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SubscriptionsApi/Find');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiFindResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionsApiFind200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * subscriptionsApiList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiListResponse
     */
	public function subscriptionsApiList(
        \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SubscriptionsApi/List');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionViews = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SubscriptionView>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * subscriptionsApiPutSubscription
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiPutSubscriptionResponse
     */
	public function subscriptionsApiPutSubscription(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiPutSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SubscriptionsApi');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiPutSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * subscriptionsApiPutSubscription2
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiPutSubscription2Response
     */
	public function subscriptionsApiPutSubscription2(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiPutSubscription2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SubscriptionsApi');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiPutSubscription2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * subscriptionsApiSave
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiSaveResponse
     */
	public function subscriptionsApiSave(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiSaveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SubscriptionsApi/Save');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscriptionsApiSaveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionsApiSave201ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
}