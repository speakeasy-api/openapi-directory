// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type JobStatistics2ReservationUsage struct {
	// [Output only] Reservation name or "unreserved" for on-demand resources usage.
	Name *string `json:"name,omitempty"`
	// [Output only] Slot-milliseconds the job spent in the given reservation.
	SlotMs *string `json:"slotMs,omitempty"`
}

type JobStatistics2 struct {
	BiEngineStatistics *BiEngineStatistics `json:"biEngineStatistics,omitempty"`
	// [Output only] Billing tier for the job.
	BillingTier *int `json:"billingTier,omitempty"`
	// [Output only] Whether the query result was fetched from the query cache.
	CacheHit *bool `json:"cacheHit,omitempty"`
	// [Output only] [Preview] The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
	DdlAffectedRowAccessPolicyCount *string         `json:"ddlAffectedRowAccessPolicyCount,omitempty"`
	DdlDestinationTable             *TableReference `json:"ddlDestinationTable,omitempty"`
	// The DDL operation performed, possibly dependent on the pre-existence of the DDL target. Possible values (new values might be added in the future): "CREATE": The query created the DDL target. "SKIP": No-op. Example cases: the query is CREATE TABLE IF NOT EXISTS while the table already exists, or the query is DROP TABLE IF EXISTS while the table does not exist. "REPLACE": The query replaced the DDL target. Example case: the query is CREATE OR REPLACE TABLE, and the table already exists. "DROP": The query deleted the DDL target.
	DdlOperationPerformed    *string                   `json:"ddlOperationPerformed,omitempty"`
	DdlTargetDataset         *DatasetReference         `json:"ddlTargetDataset,omitempty"`
	DdlTargetRoutine         *RoutineReference         `json:"ddlTargetRoutine,omitempty"`
	DdlTargetRowAccessPolicy *RowAccessPolicyReference `json:"ddlTargetRowAccessPolicy,omitempty"`
	DdlTargetTable           *TableReference           `json:"ddlTargetTable,omitempty"`
	DmlStats                 *DmlStatistics            `json:"dmlStats,omitempty"`
	// [Output only] The original estimate of bytes processed for the job.
	EstimatedBytesProcessed *string                `json:"estimatedBytesProcessed,omitempty"`
	MlStatistics            *MlStatistics          `json:"mlStatistics,omitempty"`
	ModelTraining           *BigQueryModelTraining `json:"modelTraining,omitempty"`
	// [Output only, Beta] Deprecated; do not use.
	ModelTrainingCurrentIteration *int `json:"modelTrainingCurrentIteration,omitempty"`
	// [Output only, Beta] Deprecated; do not use.
	ModelTrainingExpectedTotalIteration *string `json:"modelTrainingExpectedTotalIteration,omitempty"`
	// [Output only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
	NumDmlAffectedRows *string `json:"numDmlAffectedRows,omitempty"`
	// [Output only] Describes execution plan for the query.
	QueryPlan []ExplainQueryStage `json:"queryPlan,omitempty"`
	// [Output only] Referenced routines (persistent user-defined functions and stored procedures) for the job.
	ReferencedRoutines []RoutineReference `json:"referencedRoutines,omitempty"`
	// [Output only] Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
	ReferencedTables []TableReference `json:"referencedTables,omitempty"`
	// [Output only] Job resource usage breakdown by reservation.
	ReservationUsage []JobStatistics2ReservationUsage `json:"reservationUsage,omitempty"`
	Schema           *TableSchema                     `json:"schema,omitempty"`
	SearchStatistics *SearchStatistics                `json:"searchStatistics,omitempty"`
	SparkStatistics  *SparkStatistics                 `json:"sparkStatistics,omitempty"`
	// The type of query statement, if valid. Possible values (new values might be added in the future): "SELECT": SELECT query. "INSERT": INSERT query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "UPDATE": UPDATE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "DELETE": DELETE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "MERGE": MERGE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "ALTER_TABLE": ALTER TABLE query. "ALTER_VIEW": ALTER VIEW query. "ASSERT": ASSERT condition AS 'description'. "CREATE_FUNCTION": CREATE FUNCTION query. "CREATE_MODEL": CREATE [OR REPLACE] MODEL ... AS SELECT ... . "CREATE_PROCEDURE": CREATE PROCEDURE query. "CREATE_TABLE": CREATE [OR REPLACE] TABLE without AS SELECT. "CREATE_TABLE_AS_SELECT": CREATE [OR REPLACE] TABLE ... AS SELECT ... . "CREATE_VIEW": CREATE [OR REPLACE] VIEW ... AS SELECT ... . "DROP_FUNCTION" : DROP FUNCTION query. "DROP_PROCEDURE": DROP PROCEDURE query. "DROP_TABLE": DROP TABLE query. "DROP_VIEW": DROP VIEW query.
	StatementType *string `json:"statementType,omitempty"`
	// [Output only] [Beta] Describes a timeline of job execution.
	Timeline []QueryTimelineSample `json:"timeline,omitempty"`
	// [Output only] Total bytes billed for the job.
	TotalBytesBilled *string `json:"totalBytesBilled,omitempty"`
	// [Output only] Total bytes processed for the job.
	TotalBytesProcessed *string `json:"totalBytesProcessed,omitempty"`
	// [Output only] For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
	TotalBytesProcessedAccuracy *string `json:"totalBytesProcessedAccuracy,omitempty"`
	// [Output only] Total number of partitions processed from all partitioned tables referenced in the job.
	TotalPartitionsProcessed *string `json:"totalPartitionsProcessed,omitempty"`
	// [Output only] Slot-milliseconds for the job.
	TotalSlotMs *string `json:"totalSlotMs,omitempty"`
	// [Output-only] Total bytes transferred for cross-cloud queries such as Cross Cloud Transfer and CREATE TABLE AS SELECT (CTAS).
	TransferredBytes *string `json:"transferredBytes,omitempty"`
	// Standard SQL only: list of undeclared query parameters detected during a dry run validation.
	UndeclaredQueryParameters []QueryParameter `json:"undeclaredQueryParameters,omitempty"`
}
