// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type BucketByTimePeriodTypeEnum string

const (
	BucketByTimePeriodTypeEnumDay   BucketByTimePeriodTypeEnum = "day"
	BucketByTimePeriodTypeEnumWeek  BucketByTimePeriodTypeEnum = "week"
	BucketByTimePeriodTypeEnumMonth BucketByTimePeriodTypeEnum = "month"
)

func (e BucketByTimePeriodTypeEnum) ToPointer() *BucketByTimePeriodTypeEnum {
	return &e
}

func (e *BucketByTimePeriodTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "day":
		fallthrough
	case "week":
		fallthrough
	case "month":
		*e = BucketByTimePeriodTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BucketByTimePeriodTypeEnum: %v", v)
	}
}

type BucketByTimePeriod struct {
	// org.joda.timezone.DateTimeZone
	TimeZoneID *string                     `json:"timeZoneId,omitempty"`
	Type       *BucketByTimePeriodTypeEnum `json:"type,omitempty"`
	Value      *int                        `json:"value,omitempty"`
}
