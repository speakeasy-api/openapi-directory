/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
 */
export class UpdateFunctionRequestBodyRuntime extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: shared.RuntimeNameEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "runtimeVersion" })
  runtimeVersion?: string;
}

/**
 * <p>Describes a Sync configuration for a resolver.</p> <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.</p>
 */
export class UpdateFunctionRequestBodySyncConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "conflictDetection" })
  conflictDetection?: shared.ConflictDetectionTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "conflictHandler" })
  conflictHandler?: shared.ConflictHandlerTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "lambdaConflictHandlerConfig" })
  @Type(() => shared.LambdaConflictHandlerConfig)
  lambdaConflictHandlerConfig?: shared.LambdaConflictHandlerConfig;
}

export class UpdateFunctionRequestBody extends SpeakeasyBase {
  /**
   * The <code>function</code> code that contains the request and response functions. When code is used, the <code>runtime</code> is required. The <code>runtime</code> value must be <code>APPSYNC_JS</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  /**
   * The <code>Function</code> <code>DataSource</code> name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataSourceName" })
  dataSourceName: string;

  /**
   * The <code>Function</code> description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The <code>version</code> of the request mapping template. Currently, the supported value is 2018-05-29. Note that when using VTL and mapping templates, the <code>functionVersion</code> is required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "functionVersion" })
  functionVersion?: string;

  /**
   * The maximum batching size for a resolver.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxBatchSize" })
  maxBatchSize?: number;

  /**
   * The <code>Function</code> name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The <code>Function</code> request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestMappingTemplate" })
  requestMappingTemplate?: string;

  /**
   * The <code>Function</code> request mapping template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "responseMappingTemplate" })
  responseMappingTemplate?: string;

  /**
   * Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runtime" })
  @Type(() => UpdateFunctionRequestBodyRuntime)
  runtime?: UpdateFunctionRequestBodyRuntime;

  /**
   * <p>Describes a Sync configuration for a resolver.</p> <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "syncConfig" })
  @Type(() => UpdateFunctionRequestBodySyncConfig)
  syncConfig?: UpdateFunctionRequestBodySyncConfig;
}

export class UpdateFunctionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateFunctionRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The GraphQL API ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=apiId",
  })
  apiId: string;

  /**
   * The function ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=functionId",
  })
  functionId: string;
}

export class UpdateFunctionResponse extends SpeakeasyBase {
  /**
   * ConcurrentModificationException
   */
  @SpeakeasyMetadata()
  concurrentModificationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * UnauthorizedException
   */
  @SpeakeasyMetadata()
  unauthorizedException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateFunctionResponse?: shared.UpdateFunctionResponse;
}
