// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTListUsersActionEnum
type POSTListUsersActionEnum string

const (
	POSTListUsersActionEnumListUsers POSTListUsersActionEnum = "ListUsers"
)

func (e *POSTListUsersActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ListUsers":
		*e = POSTListUsersActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTListUsersActionEnum: %s", s)
	}
}

// POSTListUsersVersionEnum
type POSTListUsersVersionEnum string

const (
	POSTListUsersVersionEnumTwoThousandAndTen0508 POSTListUsersVersionEnum = "2010-05-08"
)

func (e *POSTListUsersVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-08":
		*e = POSTListUsersVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTListUsersVersionEnum: %s", s)
	}
}

type POSTListUsersQueryParams struct {
	Action POSTListUsersActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// Pagination limit
	MaxItems *string                  `queryParam:"style=form,explode=true,name=MaxItems"`
	Version  POSTListUsersVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTListUsersHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTListUsersRequest struct {
	QueryParams POSTListUsersQueryParams
	Headers     POSTListUsersHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTListUsersResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
