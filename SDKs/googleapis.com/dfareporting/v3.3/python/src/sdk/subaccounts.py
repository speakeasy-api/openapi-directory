"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Subaccounts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dfareporting_subaccounts_get(self, request: operations.DfareportingSubaccountsGetRequest, security: operations.DfareportingSubaccountsGetSecurity) -> operations.DfareportingSubaccountsGetResponse:
        r"""Gets one subaccount by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingSubaccountsGetRequest, base_url, '/userprofiles/{profileId}/subaccounts/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingSubaccountsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingSubaccountsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Subaccount])
                res.subaccount = out

        return res

    def dfareporting_subaccounts_insert(self, request: operations.DfareportingSubaccountsInsertRequest, security: operations.DfareportingSubaccountsInsertSecurity) -> operations.DfareportingSubaccountsInsertResponse:
        r"""Inserts a new subaccount."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingSubaccountsInsertRequest, base_url, '/userprofiles/{profileId}/subaccounts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "subaccount", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingSubaccountsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingSubaccountsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Subaccount])
                res.subaccount = out

        return res

    def dfareporting_subaccounts_list(self, request: operations.DfareportingSubaccountsListRequest, security: operations.DfareportingSubaccountsListSecurity) -> operations.DfareportingSubaccountsListResponse:
        r"""Gets a list of subaccounts, possibly filtered. This method supports paging."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingSubaccountsListRequest, base_url, '/userprofiles/{profileId}/subaccounts', request)
        
        query_params = utils.get_query_params(operations.DfareportingSubaccountsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingSubaccountsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SubaccountsListResponse])
                res.subaccounts_list_response = out

        return res

    def dfareporting_subaccounts_patch(self, request: operations.DfareportingSubaccountsPatchRequest, security: operations.DfareportingSubaccountsPatchSecurity) -> operations.DfareportingSubaccountsPatchResponse:
        r"""Updates an existing subaccount. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingSubaccountsPatchRequest, base_url, '/userprofiles/{profileId}/subaccounts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "subaccount", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingSubaccountsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingSubaccountsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Subaccount])
                res.subaccount = out

        return res

    def dfareporting_subaccounts_update(self, request: operations.DfareportingSubaccountsUpdateRequest, security: operations.DfareportingSubaccountsUpdateSecurity) -> operations.DfareportingSubaccountsUpdateResponse:
        r"""Updates an existing subaccount."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingSubaccountsUpdateRequest, base_url, '/userprofiles/{profileId}/subaccounts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "subaccount", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingSubaccountsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingSubaccountsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Subaccount])
                res.subaccount = out

        return res

    