<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class ListArchivedFiles200ApplicationJSONMeetingsArchiveFiles
{
    /**
     * The URL using which the archived file can be downloaded. To download the archived file of a meeting or a webinar hosted in your account, create a [Zoom JWT App Type](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app). Use the generated JWT token as the value of the access_token query parameter and include this query parameter at the end of the URL as shown in the example.
     * 
     *  
     * Example: `https://{{base-domain}}/rec/archive/download/xxx?access_token={{Your-JWT}}`
     * 
     * If a user has authorized and installed your OAuth app that supports archiving, use the userâ€™s [OAuth access token](https://marketplace.zoom.us/docs/guides/auth/oauth) to download the file.
     * 
     * Example: `https://{{base-domain}}/rec/archive/download/xxx?access_token={{ OAuth Access Token }}`
     * 
     * @var ?string $downloadUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('download_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $downloadUrl = null;
    
    /**
     * Extension of the recording file.
     * 
     * 
     * 
     * @var ?string $fileExtension
     */
	#[\JMS\Serializer\Annotation\SerializedName('file_extension')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fileExtension = null;
    
    /**
     * The recording file size.
     * 
     * 
     * 
     * @var ?int $fileSize
     */
	#[\JMS\Serializer\Annotation\SerializedName('file_size')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $fileSize = null;
    
    /**
     * Recorded file type. The value of this field could be one of the following:
     * 
     * 
     * `MP4`: Video file of the recording.<br>
     * `M4A`: Audio-only file of the recording.<br>
     * `TRANSCRIPT`: Transcription file of the recording in VTT format.
     * CHAT: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>
     * `CC`: File containing closed captions of the recording in VTT file format.<br>
     * `CSV`: File containing polling data in csv format.
     * 
     * @var ?string $fileType
     */
	#[\JMS\Serializer\Annotation\SerializedName('file_type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fileType = null;
    
    /**
     * Unique identifier of the archived file.
     * 
     * 
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The recording type. The value of this field can be one of the following:
     * 
     * * `shared_screen_with_speaker_view(CC)`
     * * `shared_screen_with_speaker_view`
     * * `shared_screen_with_gallery_view`
     * * `speaker_view`
     * * `gallery_view`
     * * `shared_screen`
     * * `audio_only`
     * * `audio_transcript`
     * * `chat_file`,
     * * `active_speaker`
     * * `host_video`
     * 
     * 
     * @var ?string $recordingType
     */
	#[\JMS\Serializer\Annotation\SerializedName('recording_type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $recordingType = null;
    
    /**
     * Status of the archived file.
     * 
     * 
     * 
     * @var ?string $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $status = null;
    
	public function __construct()
	{
		$this->downloadUrl = null;
		$this->fileExtension = null;
		$this->fileSize = null;
		$this->fileType = null;
		$this->id = null;
		$this->recordingType = null;
		$this->status = null;
	}
}
