/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Account - Configuration data for an Ad Exchange buyer account.
 */
public class Account {
    /**
     * When this is false, bid requests that include a deal ID for a private auction or preferred deal are always sent to your bidder. When true, all active pretargeting configs will be applied to private auctions and preferred deals. Programmatic Guaranteed deals (when enabled) are always sent to your bidder.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applyPretargetingToNonGuaranteedDeals")
    public Boolean applyPretargetingToNonGuaranteedDeals;
    public Account withApplyPretargetingToNonGuaranteedDeals(Boolean applyPretargetingToNonGuaranteedDeals) {
        this.applyPretargetingToNonGuaranteedDeals = applyPretargetingToNonGuaranteedDeals;
        return this;
    }
    
    /**
     * Your bidder locations that have distinct URLs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bidderLocation")
    public AccountBidderLocation[] bidderLocation;
    public Account withBidderLocation(AccountBidderLocation[] bidderLocation) {
        this.bidderLocation = bidderLocation;
        return this;
    }
    
    /**
     * The nid parameter value used in cookie match requests. Please contact your technical account manager if you need to change this.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cookieMatchingNid")
    public String cookieMatchingNid;
    public Account withCookieMatchingNid(String cookieMatchingNid) {
        this.cookieMatchingNid = cookieMatchingNid;
        return this;
    }
    
    /**
     * The base URL used in cookie match requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cookieMatchingUrl")
    public String cookieMatchingUrl;
    public Account withCookieMatchingUrl(String cookieMatchingUrl) {
        this.cookieMatchingUrl = cookieMatchingUrl;
        return this;
    }
    
    /**
     * Account id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;
    public Account withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * Resource type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Account withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The maximum number of active creatives that an account can have, where a creative is active if it was inserted or bid with in the last 30 days. Please contact your technical account manager if you need to change this.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximumActiveCreatives")
    public Integer maximumActiveCreatives;
    public Account withMaximumActiveCreatives(Integer maximumActiveCreatives) {
        this.maximumActiveCreatives = maximumActiveCreatives;
        return this;
    }
    
    /**
     * The sum of all bidderLocation.maximumQps values cannot exceed this. Please contact your technical account manager if you need to change this.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximumTotalQps")
    public Integer maximumTotalQps;
    public Account withMaximumTotalQps(Integer maximumTotalQps) {
        this.maximumTotalQps = maximumTotalQps;
        return this;
    }
    
    /**
     * The number of creatives that this account inserted or bid with in the last 30 days.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberActiveCreatives")
    public Integer numberActiveCreatives;
    public Account withNumberActiveCreatives(Integer numberActiveCreatives) {
        this.numberActiveCreatives = numberActiveCreatives;
        return this;
    }
    
}
