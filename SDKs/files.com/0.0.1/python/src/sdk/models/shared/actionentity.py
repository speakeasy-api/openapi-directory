"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class ActionEntityActionEnum(str, Enum):
    r"""Type of action"""
    CREATE = 'create'
    READ = 'read'
    UPDATE = 'update'
    DESTROY = 'destroy'
    MOVE = 'move'
    LOGIN = 'login'
    FAILEDLOGIN = 'failedlogin'
    COPY = 'copy'
    USER_CREATE = 'user_create'
    USER_UPDATE = 'user_update'
    USER_DESTROY = 'user_destroy'
    GROUP_CREATE = 'group_create'
    GROUP_UPDATE = 'group_update'
    GROUP_DESTROY = 'group_destroy'
    PERMISSION_CREATE = 'permission_create'
    PERMISSION_DESTROY = 'permission_destroy'
    API_KEY_CREATE = 'api_key_create'
    API_KEY_UPDATE = 'api_key_update'
    API_KEY_DESTROY = 'api_key_destroy'

class ActionEntityFailureTypeEnum(str, Enum):
    r"""Failure type.  If action was a user login or session failure, why did it fail?"""
    EXPIRED_TRIAL = 'expired_trial'
    ACCOUNT_OVERDUE = 'account_overdue'
    LOCKED_OUT = 'locked_out'
    IP_MISMATCH = 'ip_mismatch'
    PASSWORD_MISMATCH = 'password_mismatch'
    SITE_MISMATCH = 'site_mismatch'
    USERNAME_NOT_FOUND = 'username_not_found'
    NONE = 'none'
    NO_FTP_PERMISSION = 'no_ftp_permission'
    NO_WEB_PERMISSION = 'no_web_permission'
    NO_DIRECTORY = 'no_directory'
    ERRNO_ENOENT = 'errno_enoent'
    NO_SFTP_PERMISSION = 'no_sftp_permission'
    NO_DAV_PERMISSION = 'no_dav_permission'
    NO_RESTAPI_PERMISSION = 'no_restapi_permission'
    KEY_MISMATCH = 'key_mismatch'
    REGION_MISMATCH = 'region_mismatch'
    EXPIRED_ACCESS = 'expired_access'
    DESKTOP_IP_MISMATCH = 'desktop_ip_mismatch'
    DESKTOP_API_KEY_NOT_USED_QUICKLY_ENOUGH = 'desktop_api_key_not_used_quickly_enough'
    DISABLED = 'disabled'
    COUNTRY_MISMATCH = 'country_mismatch'

class ActionEntityInterfaceEnum(str, Enum):
    r"""Interface on which this action occurred."""
    WEB = 'web'
    FTP = 'ftp'
    ROBOT = 'robot'
    JSAPI = 'jsapi'
    WEBDESKTOPAPI = 'webdesktopapi'
    SFTP = 'sftp'
    DAV = 'dav'
    DESKTOP = 'desktop'
    RESTAPI = 'restapi'
    SCIM = 'scim'
    OFFICE = 'office'
    MOBILE = 'mobile'
    AS2 = 'as2'
    INBOUND_EMAIL = 'inbound_email'
    REMOTE = 'remote'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActionEntity:
    r"""List site full action history."""
    
    action: Optional[ActionEntityActionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""Type of action"""  
    destination: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination'), 'exclude': lambda f: f is None }})
    r"""The destination path for this action, if applicable"""  
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Friendly displayed output"""  
    failure_type: Optional[ActionEntityFailureTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failure_type'), 'exclude': lambda f: f is None }})
    r"""Failure type.  If action was a user login or session failure, why did it fail?"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Action ID"""  
    interface: Optional[ActionEntityInterfaceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interface'), 'exclude': lambda f: f is None }})
    r"""Interface on which this action occurred."""  
    ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip'), 'exclude': lambda f: f is None }})
    r"""IP Address that performed this action"""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    r"""Path"""  
    source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""The source path for this action, if applicable"""  
    targets: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targets'), 'exclude': lambda f: f is None }})
    r"""Targets"""  
    user_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }})
    r"""User ID"""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username'), 'exclude': lambda f: f is None }})
    r"""Username"""  
    when: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('when'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Action occurrence date/time"""  
    