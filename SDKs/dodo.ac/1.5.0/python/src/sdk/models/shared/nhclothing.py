"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NHClothingAvailability:
    
    from_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'exclude': lambda f: f is None }})  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NHClothingBuy:
    
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})  
    
class NHClothingCategoryEnum(str, Enum):
    r"""The category of item as shown in the player's inventory."""
    TOPS = 'Tops'
    BOTTOMS = 'Bottoms'
    DRESS_UP = 'Dress-up'
    HEADWEAR = 'Headwear'
    ACCESSORIES = 'Accessories'
    SOCKS = 'Socks'
    SHOES = 'Shoes'
    BAGS = 'Bags'
    UMBRELLAS = 'Umbrellas'

class NHClothingLabelThemesEnum(str, Enum):
    COMFY = 'Comfy'
    EVERYDAY = 'Everyday'
    FAIRY_TALE = 'Fairy tale'
    FORMAL = 'Formal'
    GOTH = 'Goth'
    OUTDOORSY = 'Outdoorsy'
    PARTY = 'Party'
    SPORTY = 'Sporty'
    THEATRICAL = 'Theatrical'
    VACATION = 'Vacation'
    WORK = 'Work'

class NHClothingStylesEnum(str, Enum):
    ACTIVE = 'Active'
    COOL = 'Cool'
    CUTE = 'Cute'
    ELEGANT = 'Elegant'
    GORGEOUS = 'Gorgeous'
    SIMPLE = 'Simple'

class NHClothingVariationTotalEnum(str, Enum):
    r"""The total number of variations the clothing has, between 0 and 8."""
    ZERO = '0'
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'
    EIGHT = '8'

class NHClothingVariationsColorsEnum(str, Enum):
    AQUA = 'Aqua'
    BEIGE = 'Beige'
    BLACK = 'Black'
    BLUE = 'Blue'
    BROWN = 'Brown'
    COLORFUL = 'Colorful'
    GRAY = 'Gray'
    GREEN = 'Green'
    ORANGE = 'Orange'
    PINK = 'Pink'
    PURPLE = 'Purple'
    RED = 'Red'
    WHITE = 'White'
    YELLOW = 'Yellow'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NHClothingVariations:
    
    colors: Optional[list[NHClothingVariationsColorsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('colors'), 'exclude': lambda f: f is None }})  
    image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_url'), 'exclude': lambda f: f is None }})  
    variation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('variation'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NHClothing:
    r"""A JSON object describing the clothing."""
    
    availability: Optional[list[NHClothingAvailability]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availability'), 'exclude': lambda f: f is None }})
    r"""Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details."""  
    buy: Optional[list[NHClothingBuy]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buy'), 'exclude': lambda f: f is None }})
    r"""An array of prices, for when the item may be purchased with Bells, Nook Miles, etc.."""  
    category: Optional[NHClothingCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The category of item as shown in the player's inventory."""  
    label_themes: Optional[list[NHClothingLabelThemesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_themes'), 'exclude': lambda f: f is None }})
    r"""The clothing's Label theme(s). This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the clothing."""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Any additional miscellaneous information about the clothing, such as a name change from a past update."""  
    seasonality: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seasonality'), 'exclude': lambda f: f is None }})
    r"""The time of the year that the clothing is available."""  
    sell: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sell'), 'exclude': lambda f: f is None }})
    r"""The number of Bells the clothing can be sold to the store for."""  
    styles: Optional[list[NHClothingStylesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('styles'), 'exclude': lambda f: f is None }})
    r"""The clothing's style(s). Styles are used for gifting villagers."""  
    unlocked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unlocked'), 'exclude': lambda f: f is None }})
    r"""Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Link to the respective Nookipedia article."""  
    variation_total: Optional[NHClothingVariationTotalEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('variation_total'), 'exclude': lambda f: f is None }})
    r"""The total number of variations the clothing has, between 0 and 8."""  
    variations: Optional[list[NHClothingVariations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('variations'), 'exclude': lambda f: f is None }})
    r"""An array of objects, each object representing a variation of the clothing. Clothing that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Clothing with multiple variations will have the `variation` fields defined with the name of each variation."""  
    version_added: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version_added'), 'exclude': lambda f: f is None }})
    r"""The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \\"1.0.0\\"."""  
    vill_equip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vill_equip'), 'exclude': lambda f: f is None }})
    r"""Whether villagers may equip this item."""  
    