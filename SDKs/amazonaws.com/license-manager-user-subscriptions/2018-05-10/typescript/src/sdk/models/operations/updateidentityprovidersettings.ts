/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Details about an identity provider.
 */
export class UpdateIdentityProviderSettingsRequestBodyIdentityProvider extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ActiveDirectoryIdentityProvider" })
  @Type(() => shared.ActiveDirectoryIdentityProvider)
  activeDirectoryIdentityProvider?: shared.ActiveDirectoryIdentityProvider;
}

/**
 * Updates the registered identity provider’s product related configuration settings such as the subnets to provision VPC endpoints.
 */
export class UpdateIdentityProviderSettingsRequestBodyUpdateSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AddSubnets" })
  addSubnets?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "RemoveSubnets" })
  removeSubnets?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "SecurityGroupId" })
  securityGroupId?: string;
}

export class UpdateIdentityProviderSettingsRequestBody extends SpeakeasyBase {
  /**
   * Details about an identity provider.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IdentityProvider" })
  @Type(() => UpdateIdentityProviderSettingsRequestBodyIdentityProvider)
  identityProvider: UpdateIdentityProviderSettingsRequestBodyIdentityProvider;

  /**
   * The name of the user-based subscription product.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Product" })
  product: string;

  /**
   * Updates the registered identity provider’s product related configuration settings such as the subnets to provision VPC endpoints.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpdateSettings" })
  @Type(() => UpdateIdentityProviderSettingsRequestBodyUpdateSettings)
  updateSettings: UpdateIdentityProviderSettingsRequestBodyUpdateSettings;
}

export class UpdateIdentityProviderSettingsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateIdentityProviderSettingsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateIdentityProviderSettingsResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateIdentityProviderSettingsResponse?: shared.UpdateIdentityProviderSettingsResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
