/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Type of a <code>Config</code>.
 */
export enum GetConfigConfigTypeEnum {
  AntennaDownlink = "antenna-downlink",
  AntennaDownlinkDemodDecode = "antenna-downlink-demod-decode",
  AntennaUplink = "antenna-uplink",
  DataflowEndpoint = "dataflow-endpoint",
  Tracking = "tracking",
  UplinkEcho = "uplink-echo",
  S3Recording = "s3-recording",
}

export class GetConfigRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * UUID of a <code>Config</code>.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=configId",
  })
  configId: string;

  /**
   * Type of a <code>Config</code>.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=configType",
  })
  configType: GetConfigConfigTypeEnum;
}

export class GetConfigResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * DependencyException
   */
  @SpeakeasyMetadata()
  dependencyException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  getConfigResponse?: shared.GetConfigResponse;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;
}
