<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TagValues 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a TagValue as a child of the specified TagKey. If a another request with the same parameters is sent while the original request is in process the second request will receive an error. A maximum of 1000 TagValues can exist under a TagKey at any given time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesCreateResponse
     */
	public function cloudresourcemanagerTagValuesCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/tagValues');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tagValueInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a TagValue. This method will return `PERMISSION_DENIED` if the value does not exist or the user does not have permission to view it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetResponse
     */
	public function cloudresourcemanagerTagValuesGet(
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagValue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TagValue', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a TagValue. The returned policy may be empty if no such policy or resource exists. The `resource` field should be the TagValue's resource name. For example: `tagValues/1234`. The caller must have the `cloudresourcemanager.googleapis.com/tagValues.getIamPolicy` permission on the identified TagValue to get the access control policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetIamPolicyResponse
     */
	public function cloudresourcemanagerTagValuesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a TagValue by its namespaced name. This method will return `PERMISSION_DENIED` if the value does not exist or the user does not have permission to view it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetNamespacedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetNamespacedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetNamespacedResponse
     */
	public function cloudresourcemanagerTagValuesGetNamespaced(
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetNamespacedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetNamespacedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetNamespacedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/tagValues/namespaced');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetNamespacedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesGetNamespacedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagValue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TagValue', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all TagValues for a specific TagKey.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesListResponse
     */
	public function cloudresourcemanagerTagValuesList(
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/tagValues');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTagValuesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTagValuesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the attributes of the TagValue resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesPatchResponse
     */
	public function cloudresourcemanagerTagValuesPatch(
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tagValueInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on a TagValue, replacing any existing policy. The `resource` field should be the TagValue's resource name. For example: `tagValues/1234`. The caller must have `resourcemanager.tagValues.setIamPolicy` permission on the identified tagValue.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesSetIamPolicyResponse
     */
	public function cloudresourcemanagerTagValuesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a TagHold. Returns ALREADY_EXISTS if a TagHold with the same resource and origin exists under the same TagValue.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsCreateResponse
     */
	public function cloudresourcemanagerTagValuesTagHoldsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/tagHolds', \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tagHoldInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a TagHold.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsDeleteResponse
     */
	public function cloudresourcemanagerTagValuesTagHoldsDelete(
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists TagHolds under a TagValue.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsListResponse
     */
	public function cloudresourcemanagerTagValuesTagHoldsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/tagHolds', \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTagHoldsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTagHoldsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTagHoldsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified TagValue. The `resource` field should be the TagValue's resource name. For example: `tagValues/1234`. There are no permissions required for making this API call.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTestIamPermissionsResponse
     */
	public function cloudresourcemanagerTagValuesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerTagValuesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}