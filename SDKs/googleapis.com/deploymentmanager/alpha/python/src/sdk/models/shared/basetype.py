"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import collectionoverride as shared_collectionoverride
from ..shared import credential as shared_credential
from ..shared import options as shared_options
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BaseType:
    r"""BaseType that describes a service-backed Type."""
    
    collection_overrides: Optional[list[shared_collectionoverride.CollectionOverride]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collectionOverrides'), 'exclude': lambda f: f is None }})
    r"""Allows resource handling overrides for specific collections"""  
    credential: Optional[shared_credential.Credential] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credential'), 'exclude': lambda f: f is None }})
    r"""The credential used by Deployment Manager and TypeProvider. Only one of the options is permitted."""  
    descriptor_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('descriptorUrl'), 'exclude': lambda f: f is None }})
    r"""Descriptor Url for the this type."""  
    options: Optional[shared_options.Options] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""Options allows customized resource handling by Deployment Manager."""  
    