/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * MeetingCreateApplicationJSON - Base object for meeting.
 */
public class MeetingCreateApplicationJSON {
    /**
     * Meeting description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agenda")
    public String agenda;
    public MeetingCreateApplicationJSON withAgenda(String agenda) {
        this.agenda = agenda;
        return this;
    }
    
    /**
     * Meeting duration (minutes). Used for scheduled meetings only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Long duration;
    public MeetingCreateApplicationJSON withDuration(Long duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * Passcode to join the meeting. By default, passcode may only contain the following characters: [a-z A-Z 0-9 @ - _ *] and can have a maximum of 10 characters.
     * 
     * **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements. &lt;br&gt;&lt;br&gt;If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;
    public MeetingCreateApplicationJSON withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurrence")
    public MeetingCreateApplicationJSONRecurrence recurrence;
    public MeetingCreateApplicationJSON withRecurrence(MeetingCreateApplicationJSONRecurrence recurrence) {
        this.recurrence = recurrence;
        return this;
    }
    
    /**
     * If you would like to schedule this meeting for someone else in your account, provide the Zoom user id or email address of the user here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule_for")
    public String scheduleFor;
    public MeetingCreateApplicationJSON withScheduleFor(String scheduleFor) {
        this.scheduleFor = scheduleFor;
        return this;
    }
    
    /**
     * Meeting settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settings")
    public MeetingCreateApplicationJSONSettings settings;
    public MeetingCreateApplicationJSON withSettings(MeetingCreateApplicationJSONSettings settings) {
        this.settings = settings;
        return this;
    }
    
    /**
     * Meeting start time. We support two formats for `start_time` - local time and GMT.&lt;br&gt; 
     * 
     * To set time as GMT the format should be `yyyy-MM-dd`T`HH:mm:ssZ`. Example: "2020-03-31T12:02:00Z"
     * 
     * To set time using a specific timezone, use `yyyy-MM-dd`T`HH:mm:ss` format and specify the timezone [ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) in the `timezone` field OR leave it blank and the timezone set on your Zoom account will be used. You can also set the time as UTC as the timezone field.
     * 
     * The `start_time` should only be used for scheduled and / or recurring webinars with fixed time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start_time")
    public OffsetDateTime startTime;
    public MeetingCreateApplicationJSON withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Unique identifier of the **admin meeting template**. To create admin meeting templates, contact the Zoom support team.
     * 
     * Use this field if you would like to [schedule the meeting from a admin meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates#h_86f06cff-0852-4998-81c5-c83663c176fb). You can retrieve the value of this field by calling the [List meeting templates](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/listmeetingtemplates) API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template_id")
    public String templateId;
    public MeetingCreateApplicationJSON withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }
    
    /**
     * Time zone to format start_time. For example, "America/Los_Angeles". For scheduled meetings only. Please reference our [time zone](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) list for supported time zones and their formats.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;
    public MeetingCreateApplicationJSON withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * Meeting topic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topic")
    public String topic;
    public MeetingCreateApplicationJSON withTopic(String topic) {
        this.topic = topic;
        return this;
    }
    
    /**
     * Tracking fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_fields")
    public MeetingCreateApplicationJSONTrackingFields[] trackingFields;
    public MeetingCreateApplicationJSON withTrackingFields(MeetingCreateApplicationJSONTrackingFields[] trackingFields) {
        this.trackingFields = trackingFields;
        return this;
    }
    
    /**
     * Meeting Type:&lt;br&gt;`1` - Instant meeting.&lt;br&gt;`2` - Scheduled meeting.&lt;br&gt;`3` - Recurring meeting with no fixed time.&lt;br&gt;`8` - Recurring meeting with fixed time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public MeetingCreateApplicationJSONTypeEnum type;
    public MeetingCreateApplicationJSON withType(MeetingCreateApplicationJSONTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
