<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class BankFeeds 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create one or more new feed connection
     * 
     * By passing in the FeedConnections array object in the body, you can create one or more new feed connections
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFeedConnectionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFeedConnectionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFeedConnectionsResponse
     */
	public function createFeedConnections(
        \OpenAPI\OpenAPI\Models\Operations\CreateFeedConnectionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateFeedConnectionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFeedConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/FeedConnections');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "feedConnections", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFeedConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->feedConnections = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FeedConnections', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates one or more new statements
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateStatementsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateStatementsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateStatementsResponse
     */
	public function createStatements(
        \OpenAPI\OpenAPI\Models\Operations\CreateStatementsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateStatementsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateStatementsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Statements');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "statements", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateStatementsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statements = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Statements', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 413 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statements = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Statements', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an existing feed connection
     * 
     * By passing in FeedConnections array object in the body, you can delete a feed connection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFeedConnectionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFeedConnectionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFeedConnectionsResponse
     */
	public function deleteFeedConnections(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFeedConnectionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteFeedConnectionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFeedConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/FeedConnections/DeleteRequests');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "feedConnections", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFeedConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->feedConnections = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FeedConnections', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Retrieve single feed connection based on a unique id provided
     * 
     * By passing in a FeedConnection Id options, you can search for matching feed connections
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFeedConnectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFeedConnectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFeedConnectionResponse
     */
	public function getFeedConnection(
        \OpenAPI\OpenAPI\Models\Operations\GetFeedConnectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFeedConnectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFeedConnectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/FeedConnections/{id}', \OpenAPI\OpenAPI\Models\Operations\GetFeedConnectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFeedConnectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->feedConnection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FeedConnection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Searches for feed connections
     * 
     * By passing in the appropriate options, you can search for available feed connections in the system.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFeedConnectionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFeedConnectionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFeedConnectionsResponse
     */
	public function getFeedConnections(
        \OpenAPI\OpenAPI\Models\Operations\GetFeedConnectionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFeedConnectionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFeedConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/FeedConnections');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFeedConnectionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFeedConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->feedConnections = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FeedConnections', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Retrieve single statement based on unique id provided
     * 
     * By passing in a statement id, you can search for matching statements
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStatementRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStatementSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStatementResponse
     */
	public function getStatement(
        \OpenAPI\OpenAPI\Models\Operations\GetStatementRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetStatementSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStatementResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Statements/{statementID}', \OpenAPI\OpenAPI\Models\Operations\GetStatementRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetStatementRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStatementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statement = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Statement', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Retrieve all statements
     * 
     * By passing in parameters, you can search for matching statements
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStatementsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStatementsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStatementsResponse
     */
	public function getStatements(
        \OpenAPI\OpenAPI\Models\Operations\GetStatementsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetStatementsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStatementsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Statements');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetStatementsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStatementsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statements = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Statements', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statements = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Statements', 'json');
            }
        }

        return $response;
    }
}