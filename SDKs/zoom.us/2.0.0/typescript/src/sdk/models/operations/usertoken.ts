/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class UserTokenSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

/**
 * User token types:<br>`token` - Used for starting meetings with the client SDK. This token expires in 14 days and a new token will be returned after the expiry.<br>`zak` - Used for generating the start meeting URL. The token expiration time is two hours. For API users, the expiration time is 90 days.
 */
export enum UserTokenTypeEnum {
  Token = "token",
  Zak = "zak",
}

export class UserTokenRequest extends SpeakeasyBase {
  /**
   * Use this field in conjunction with the `type` field where the value of `type` field is `zak`. The value of this field denotes the expiry time of the `zak` token in seconds. For example, if you would like the zak token to be expired after one hour of the token generation, the value of this field should be `3600`.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=ttl" })
  ttl?: number;

  /**
   * User token types:<br>`token` - Used for starting meetings with the client SDK. This token expires in 14 days and a new token will be returned after the expiry.<br>`zak` - Used for generating the start meeting URL. The token expiration time is two hours. For API users, the expiration time is 90 days.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: UserTokenTypeEnum;

  /**
   * The user ID or email address of the user. For user-level apps, pass `me` as the value for userId.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=userId",
  })
  userId: string;
}

/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 * Token returned.
 */
export class UserToken200ApplicationXML extends SpeakeasyBase {
  /**
   * User token.
   */
  @SpeakeasyMetadata()
  token?: string;
}

/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 * Token returned.
 */
export class UserToken200ApplicationJSON extends SpeakeasyBase {
  /**
   * User token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "token" })
  token?: string;
}

export class UserTokenResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * Token returned.
   */
  @SpeakeasyMetadata()
  userToken200ApplicationJSONObject?: UserToken200ApplicationJSON;
}
