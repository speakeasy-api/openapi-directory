/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

export class WebhookResourceAttributes extends SpeakeasyBase {
  /**
   * The date-time at which this webhook was created.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * An optional description that was provided at the time the webhook was
   *
   * @remarks
   * created.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * A shared secret key used to sign all webhook events sent to the
   *
   * @remarks
   * configured webhook URL. This field is returned only once, upon the
   * initial creation of the webhook. If lost, create a new webhook and
   * delete this webhook.
   *
   * The webhook URL receives a request with a
   * `X-Up-Authenticity-Signature` header, which is the SHA-256 HMAC of
   * the entire raw request body signed using this `secretKey`. It is
   * advised to compute and check this signature to verify the
   * authenticity of requests sent to the webhook URL. See
   * [Handling webhook events](#callback_post_webhookURL) for full
   * details.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secretKey" })
  secretKey?: string;

  /**
   * The URL that this webhook is configured to `POST` events to.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

export class WebhookResourceLinks extends SpeakeasyBase {
  /**
   * The canonical link to this resource within the API.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  self: string;
}

export class WebhookResourceRelationshipsLogsLinks extends SpeakeasyBase {
  /**
   * The link to retrieve the related resource(s) in this relationship.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "related" })
  related: string;
}

export class WebhookResourceRelationshipsLogs extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => WebhookResourceRelationshipsLogsLinks)
  links?: WebhookResourceRelationshipsLogsLinks;
}

export class WebhookResourceRelationships extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "logs" })
  @Type(() => WebhookResourceRelationshipsLogs)
  logs: WebhookResourceRelationshipsLogs;
}

/**
 * Provides information about a webhook.
 *
 * @remarks
 *
 */
export class WebhookResource extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => WebhookResourceAttributes)
  attributes: WebhookResourceAttributes;

  /**
   * The unique identifier for this webhook.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => WebhookResourceLinks)
  links?: WebhookResourceLinks;

  @SpeakeasyMetadata()
  @Expose({ name: "relationships" })
  @Type(() => WebhookResourceRelationships)
  relationships: WebhookResourceRelationships;

  /**
   * The type of this resource: `webhooks`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}
