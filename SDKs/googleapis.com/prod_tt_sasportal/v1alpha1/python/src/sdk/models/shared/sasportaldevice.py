"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import sasportalchannelwithscore as shared_sasportalchannelwithscore
from ..shared import sasportaldeviceconfig as shared_sasportaldeviceconfig
from ..shared import sasportaldevicegrant as shared_sasportaldevicegrant
from ..shared import sasportaldevicemetadata as shared_sasportaldevicemetadata
from ..shared import sasportalfrequencyrange as shared_sasportalfrequencyrange
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SasPortalDeviceStateEnum(str, Enum):
    r"""Output only. Device state."""
    DEVICE_STATE_UNSPECIFIED = 'DEVICE_STATE_UNSPECIFIED'
    RESERVED = 'RESERVED'
    REGISTERED = 'REGISTERED'
    DEREGISTERED = 'DEREGISTERED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SasPortalDevice:
    r"""Successful response"""
    
    active_config: Optional[shared_sasportaldeviceconfig.SasPortalDeviceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activeConfig'), 'exclude': lambda f: f is None }})
    r"""Information about the device configuration."""  
    current_channels: Optional[list[shared_sasportalchannelwithscore.SasPortalChannelWithScore]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentChannels'), 'exclude': lambda f: f is None }})
    r"""Output only. Current channels with scores."""  
    device_metadata: Optional[shared_sasportaldevicemetadata.SasPortalDeviceMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceMetadata'), 'exclude': lambda f: f is None }})
    r"""Device data overridable by both SAS Portal and registration requests."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Device display name."""  
    fcc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fccId'), 'exclude': lambda f: f is None }})
    r"""The FCC identifier of the device."""  
    grant_range_allowlists: Optional[list[shared_sasportalfrequencyrange.SasPortalFrequencyRange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grantRangeAllowlists'), 'exclude': lambda f: f is None }})
    r"""Only ranges that are within the allowlists are available for new grants."""  
    grants: Optional[list[shared_sasportaldevicegrant.SasPortalDeviceGrant]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grants'), 'exclude': lambda f: f is None }})
    r"""Output only. Grants held by the device."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource path name."""  
    preloaded_config: Optional[shared_sasportaldeviceconfig.SasPortalDeviceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preloadedConfig'), 'exclude': lambda f: f is None }})
    r"""Information about the device configuration."""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serialNumber'), 'exclude': lambda f: f is None }})
    r"""A serial number assigned to the device by the device manufacturer."""  
    state: Optional[SasPortalDeviceStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. Device state."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SasPortalDeviceInput:
    
    active_config: Optional[shared_sasportaldeviceconfig.SasPortalDeviceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activeConfig'), 'exclude': lambda f: f is None }})
    r"""Information about the device configuration."""  
    device_metadata: Optional[shared_sasportaldevicemetadata.SasPortalDeviceMetadataInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceMetadata'), 'exclude': lambda f: f is None }})
    r"""Device data overridable by both SAS Portal and registration requests."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Device display name."""  
    fcc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fccId'), 'exclude': lambda f: f is None }})
    r"""The FCC identifier of the device."""  
    grant_range_allowlists: Optional[list[shared_sasportalfrequencyrange.SasPortalFrequencyRange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grantRangeAllowlists'), 'exclude': lambda f: f is None }})
    r"""Only ranges that are within the allowlists are available for new grants."""  
    grants: Optional[list[shared_sasportaldevicegrant.SasPortalDeviceGrant]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grants'), 'exclude': lambda f: f is None }})
    r"""Output only. Grants held by the device."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource path name."""  
    preloaded_config: Optional[shared_sasportaldeviceconfig.SasPortalDeviceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preloadedConfig'), 'exclude': lambda f: f is None }})
    r"""Information about the device configuration."""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serialNumber'), 'exclude': lambda f: f is None }})
    r"""A serial number assigned to the device by the device manufacturer."""  
    state: Optional[SasPortalDeviceStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. Device state."""  
    