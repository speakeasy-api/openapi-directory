// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworkSensorAlertsProfileRequest struct {
	ID        string `pathParam:"style=simple,explode=false,name=id"`
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum - If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum string

const (
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnumAbove GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum = "above"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnumBelow GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum = "below"
)

func (e GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum) ToPointer() *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum {
	return &e
}

func (e *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "above":
		fallthrough
	case "below":
		*e = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum: %v", v)
	}
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum - Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum int64

const (
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumZero                    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = 0
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumSixty                   GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = 60
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumOneHundredAndTwenty     GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = 120
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumOneHundredAndEighty     GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = 180
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumTwoHundredAndForty      GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = 240
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumThreeHundred            GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = 300
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumSixHundred              GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = 600
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumNineHundred             GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = 900
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumOneThousandEightHundred GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = 1800
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumThreeThousandSixHundred GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = 3600
)

func (e GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum) ToPointer() *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum {
	return &e
}

func (e *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 60:
		fallthrough
	case 120:
		fallthrough
	case 180:
		fallthrough
	case 240:
		fallthrough
	case 300:
		fallthrough
	case 600:
		fallthrough
	case 900:
		fallthrough
	case 1800:
		fallthrough
	case 3600:
		*e = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum: %v", v)
	}
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor - Door open threshold. 'open' must be provided and set to true.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor struct {
	// Alerting threshold for a door open event. Must be set to true.
	Open bool `json:"open"`
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum - Alerting threshold as a qualitative humidity level.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum string

const (
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnumFair       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = "fair"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnumGood       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = "good"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnumInadequate GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = "inadequate"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnumPoor       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = "poor"
)

func (e GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum) ToPointer() *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum {
	return &e
}

func (e *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum: %v", v)
	}
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity - Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity struct {
	// Alerting threshold as a qualitative humidity level.
	Quality *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum `json:"quality,omitempty"`
	// Alerting threshold in %RH.
	RelativePercentage *int64 `json:"relativePercentage,omitempty"`
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum - Alerting threshold as a qualitative indoor air quality level.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum string

const (
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnumFair       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = "fair"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnumGood       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = "good"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnumInadequate GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = "inadequate"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnumPoor       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = "poor"
)

func (e GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum) ToPointer() *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum {
	return &e
}

func (e *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum: %v", v)
	}
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality - Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality struct {
	// Alerting threshold as a qualitative indoor air quality level.
	Quality *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum `json:"quality,omitempty"`
	// Alerting threshold as indoor air quality score.
	Score *int64 `json:"score,omitempty"`
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum - Alerting threshold as a qualitative ambient noise level.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum string

const (
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnumFair       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = "fair"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnumGood       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = "good"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnumInadequate GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = "inadequate"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnumPoor       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = "poor"
)

func (e GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum) ToPointer() *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum {
	return &e
}

func (e *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum: %v", v)
	}
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient - Ambient noise threshold. One of 'level' or 'quality' must be provided.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient struct {
	// Alerting threshold as adjusted decibels.
	Level *int64 `json:"level,omitempty"`
	// Alerting threshold as a qualitative ambient noise level.
	Quality *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum `json:"quality,omitempty"`
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise - Noise threshold. 'ambient' must be provided.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise struct {
	// Ambient noise threshold. One of 'level' or 'quality' must be provided.
	Ambient GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient `json:"ambient"`
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum - Alerting threshold as a qualitative PM2.5 level.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum string

const (
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnumFair       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = "fair"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnumGood       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = "good"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnumInadequate GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = "inadequate"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnumPoor       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = "poor"
)

func (e GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum) ToPointer() *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum {
	return &e
}

func (e *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum: %v", v)
	}
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 - PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 struct {
	// Alerting threshold as PM2.5 parts per million.
	Concentration *int64 `json:"concentration,omitempty"`
	// Alerting threshold as a qualitative PM2.5 level.
	Quality *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum `json:"quality,omitempty"`
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum - Alerting threshold as a qualitative temperature level.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum string

const (
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnumFair       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = "fair"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnumGood       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = "good"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnumInadequate GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = "inadequate"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnumPoor       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = "poor"
)

func (e GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum) ToPointer() *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum {
	return &e
}

func (e *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum: %v", v)
	}
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature - Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature struct {
	// Alerting threshold in degrees Celsius.
	Celsius *float32 `json:"celsius,omitempty"`
	// Alerting threshold in degrees Fahrenheit.
	Fahrenheit *float32 `json:"fahrenheit,omitempty"`
	// Alerting threshold as a qualitative temperature level.
	Quality *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum `json:"quality,omitempty"`
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum - Alerting threshold as a qualitative TVOC level.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum string

const (
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnumFair       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = "fair"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnumGood       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = "good"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnumInadequate GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = "inadequate"
	GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnumPoor       GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = "poor"
)

func (e GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum) ToPointer() *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum {
	return &e
}

func (e *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum: %v", v)
	}
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc - TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc struct {
	// Alerting threshold as TVOC micrograms per cubic meter.
	Concentration *int64 `json:"concentration,omitempty"`
	// Alerting threshold as a qualitative TVOC level.
	Quality *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum `json:"quality,omitempty"`
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater - Water detection threshold. 'present' must be provided and set to true.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater struct {
	// Alerting threshold for a water detection event. Must be set to true.
	Present bool `json:"present"`
}

// GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold - Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
type GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold struct {
	// Door open threshold. 'open' must be provided and set to true.
	Door *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor `json:"door,omitempty"`
	// Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
	Humidity *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity `json:"humidity,omitempty"`
	// Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
	IndoorAirQuality *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality `json:"indoorAirQuality,omitempty"`
	// Noise threshold. 'ambient' must be provided.
	Noise *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise `json:"noise,omitempty"`
	// PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
	Pm25 *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 `json:"pm25,omitempty"`
	// Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
	Temperature *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature `json:"temperature,omitempty"`
	// TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
	Tvoc *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc `json:"tvoc,omitempty"`
	// Water detection threshold. 'present' must be provided and set to true.
	Water *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater `json:"water,omitempty"`
}

type GetNetworkSensorAlertsProfile200ApplicationJSONConditions struct {
	// If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
	Direction *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum `json:"direction,omitempty"`
	// Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
	Duration *GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum `json:"duration,omitempty"`
	// The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
	Metric string `json:"metric"`
	// Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
	Threshold GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold `json:"threshold"`
}

// GetNetworkSensorAlertsProfile200ApplicationJSONRecipients - List of recipients that will recieve the alert.
type GetNetworkSensorAlertsProfile200ApplicationJSONRecipients struct {
	// A list of emails that will receive information about the alert.
	Emails []string `json:"emails,omitempty"`
	// A list of webhook endpoint IDs that will receive information about the alert.
	HTTPServerIds []string `json:"httpServerIds,omitempty"`
	// A list of SMS numbers that will receive information about the alert.
	SmsNumbers []string `json:"smsNumbers,omitempty"`
}

// GetNetworkSensorAlertsProfile200ApplicationJSONSchedule - The sensor schedule to use with the alert profile.
type GetNetworkSensorAlertsProfile200ApplicationJSONSchedule struct {
	// ID of the sensor schedule to use with the alert profile. If not defined, the alert profile will be active at all times.
	ID *string `json:"id,omitempty"`
	// Name of the sensor schedule to use with the alert profile.
	Name *string `json:"name,omitempty"`
}

// GetNetworkSensorAlertsProfile200ApplicationJSON - Successful operation
type GetNetworkSensorAlertsProfile200ApplicationJSON struct {
	// List of conditions that will cause the profile to send an alert.
	Conditions []GetNetworkSensorAlertsProfile200ApplicationJSONConditions `json:"conditions"`
	// Name of the sensor alert profile.
	Name *string `json:"name,omitempty"`
	// ID of the sensor alert profile.
	ProfileID *string `json:"profileId,omitempty"`
	// List of recipients that will recieve the alert.
	Recipients *GetNetworkSensorAlertsProfile200ApplicationJSONRecipients `json:"recipients,omitempty"`
	// The sensor schedule to use with the alert profile.
	Schedule *GetNetworkSensorAlertsProfile200ApplicationJSONSchedule `json:"schedule,omitempty"`
	// List of device serials assigned to this sensor alert profile.
	Serials []string `json:"serials,omitempty"`
}

type GetNetworkSensorAlertsProfileResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkSensorAlertsProfile200ApplicationJSONObject *GetNetworkSensorAlertsProfile200ApplicationJSON
}
