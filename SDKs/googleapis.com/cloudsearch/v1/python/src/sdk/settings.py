"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Settings:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cloudsearch_settings_datasources_create(self, request: operations.CloudsearchSettingsDatasourcesCreateRequest, security: operations.CloudsearchSettingsDatasourcesCreateSecurity) -> operations.CloudsearchSettingsDatasourcesCreateResponse:
        r"""Creates a datasource. **Note:** This API requires an admin account to execute."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/settings/datasources'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "data_source", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudsearchSettingsDatasourcesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchSettingsDatasourcesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def cloudsearch_settings_datasources_list(self, request: operations.CloudsearchSettingsDatasourcesListRequest, security: operations.CloudsearchSettingsDatasourcesListSecurity) -> operations.CloudsearchSettingsDatasourcesListResponse:
        r"""Lists datasources. **Note:** This API requires an admin account to execute."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/settings/datasources'
        
        query_params = utils.get_query_params(operations.CloudsearchSettingsDatasourcesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchSettingsDatasourcesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListDataSourceResponse])
                res.list_data_source_response = out

        return res

    def cloudsearch_settings_get_customer(self, request: operations.CloudsearchSettingsGetCustomerRequest, security: operations.CloudsearchSettingsGetCustomerSecurity) -> operations.CloudsearchSettingsGetCustomerResponse:
        r"""Get customer settings. **Note:** This API requires an admin account to execute."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/settings/customer'
        
        query_params = utils.get_query_params(operations.CloudsearchSettingsGetCustomerRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchSettingsGetCustomerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerSettings])
                res.customer_settings = out

        return res

    def cloudsearch_settings_searchapplications_create(self, request: operations.CloudsearchSettingsSearchapplicationsCreateRequest, security: operations.CloudsearchSettingsSearchapplicationsCreateSecurity) -> operations.CloudsearchSettingsSearchapplicationsCreateResponse:
        r"""Creates a search application. **Note:** This API requires an admin account to execute."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/settings/searchapplications'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "search_application_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudsearchSettingsSearchapplicationsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchSettingsSearchapplicationsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def cloudsearch_settings_searchapplications_delete(self, request: operations.CloudsearchSettingsSearchapplicationsDeleteRequest, security: operations.CloudsearchSettingsSearchapplicationsDeleteSecurity) -> operations.CloudsearchSettingsSearchapplicationsDeleteResponse:
        r"""Deletes a search application. **Note:** This API requires an admin account to execute."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsearchSettingsSearchapplicationsDeleteRequest, base_url, '/v1/settings/{name}', request)
        
        query_params = utils.get_query_params(operations.CloudsearchSettingsSearchapplicationsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchSettingsSearchapplicationsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def cloudsearch_settings_searchapplications_get(self, request: operations.CloudsearchSettingsSearchapplicationsGetRequest, security: operations.CloudsearchSettingsSearchapplicationsGetSecurity) -> operations.CloudsearchSettingsSearchapplicationsGetResponse:
        r"""Gets the specified search application. **Note:** This API requires an admin account to execute."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsearchSettingsSearchapplicationsGetRequest, base_url, '/v1/settings/{name}', request)
        
        query_params = utils.get_query_params(operations.CloudsearchSettingsSearchapplicationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchSettingsSearchapplicationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchApplication])
                res.search_application = out

        return res

    def cloudsearch_settings_searchapplications_list(self, request: operations.CloudsearchSettingsSearchapplicationsListRequest, security: operations.CloudsearchSettingsSearchapplicationsListSecurity) -> operations.CloudsearchSettingsSearchapplicationsListResponse:
        r"""Lists all search applications. **Note:** This API requires an admin account to execute."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/settings/searchapplications'
        
        query_params = utils.get_query_params(operations.CloudsearchSettingsSearchapplicationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchSettingsSearchapplicationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListSearchApplicationsResponse])
                res.list_search_applications_response = out

        return res

    def cloudsearch_settings_searchapplications_patch(self, request: operations.CloudsearchSettingsSearchapplicationsPatchRequest, security: operations.CloudsearchSettingsSearchapplicationsPatchSecurity) -> operations.CloudsearchSettingsSearchapplicationsPatchResponse:
        r"""Updates a search application. **Note:** This API requires an admin account to execute."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsearchSettingsSearchapplicationsPatchRequest, base_url, '/v1/settings/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "search_application_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudsearchSettingsSearchapplicationsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchSettingsSearchapplicationsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def cloudsearch_settings_searchapplications_reset(self, request: operations.CloudsearchSettingsSearchapplicationsResetRequest, security: operations.CloudsearchSettingsSearchapplicationsResetSecurity) -> operations.CloudsearchSettingsSearchapplicationsResetResponse:
        r"""Resets a search application to default settings. This will return an empty response. **Note:** This API requires an admin account to execute."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsearchSettingsSearchapplicationsResetRequest, base_url, '/v1/settings/{name}:reset', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "reset_search_application_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudsearchSettingsSearchapplicationsResetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchSettingsSearchapplicationsResetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def cloudsearch_settings_searchapplications_update(self, request: operations.CloudsearchSettingsSearchapplicationsUpdateRequest, security: operations.CloudsearchSettingsSearchapplicationsUpdateSecurity) -> operations.CloudsearchSettingsSearchapplicationsUpdateResponse:
        r"""Updates a search application. **Note:** This API requires an admin account to execute."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsearchSettingsSearchapplicationsUpdateRequest, base_url, '/v1/settings/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "search_application_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudsearchSettingsSearchapplicationsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchSettingsSearchapplicationsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def cloudsearch_settings_update_customer(self, request: operations.CloudsearchSettingsUpdateCustomerRequest, security: operations.CloudsearchSettingsUpdateCustomerSecurity) -> operations.CloudsearchSettingsUpdateCustomerResponse:
        r"""Update customer settings. **Note:** This API requires an admin account to execute."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/settings/customer'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "customer_settings", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudsearchSettingsUpdateCustomerRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchSettingsUpdateCustomerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    