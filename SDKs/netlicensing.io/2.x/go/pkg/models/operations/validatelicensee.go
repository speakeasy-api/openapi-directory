// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ValidateLicenseeSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

// ValidateLicenseeRequestBodyActionEnum - 'Floating' licensing model: check-out or check-in session action, to allocate or return it from/to the pool of available sessions
type ValidateLicenseeRequestBodyActionEnum string

const (
	ValidateLicenseeRequestBodyActionEnumCheckOut ValidateLicenseeRequestBodyActionEnum = "checkOut"
	ValidateLicenseeRequestBodyActionEnumCheckIn  ValidateLicenseeRequestBodyActionEnum = "checkIn"
)

func (e *ValidateLicenseeRequestBodyActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "checkOut":
		fallthrough
	case "checkIn":
		*e = ValidateLicenseeRequestBodyActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ValidateLicenseeRequestBodyActionEnum: %s", s)
	}
}

type ValidateLicenseeRequestBody struct {
	// 'Floating' licensing model: check-out or check-in session action, to allocate or return it from/to the pool of available sessions
	Action *ValidateLicenseeRequestBodyActionEnum `form:"name=action"`
	// Human-readable name for the auto-created Licensee (will be set as custom Licensee property)
	LicenseeName *string `form:"name=licenseeName"`
	// 'Node-Locked' licensing model: specifies unique secret
	NodeSecret *string `form:"name=nodeSecret"`
	// 'Node-Locked' licensing model: product module number
	ProductModuleNumber *string `form:"name=productModuleNumber"`
	// Product number, must be provided when 'Licensee auto-create' is enabled (see also Product JavaDoc). Identifies the Product to which new Licensee should be added
	ProductNumber *string `form:"name=productNumber"`
	// 'Floating' licensing model: specifies unique session identifier
	SessionID *string `form:"name=sessionId"`
}

type ValidateLicenseeRequest struct {
	RequestBody *ValidateLicenseeRequestBody `request:"mediaType=application/x-www-form-urlencoded"`
	// Licensee number with a maximum length of 1000 characters
	LicenseeNumber string `pathParam:"style=simple,explode=false,name=licenseeNumber"`
}

type ValidateLicenseeResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful request
	Netlicensing *shared.Netlicensing
}
