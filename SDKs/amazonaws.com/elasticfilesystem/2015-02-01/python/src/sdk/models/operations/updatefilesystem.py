"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import filesystemdescription as shared_filesystemdescription
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateFileSystemRequestBodyThroughputModeEnum(str, Enum):
    r"""(Optional) Updates the file system's throughput mode. If you're not updating your throughput mode, you don't need to provide this value in your request. If you are changing the <code>ThroughputMode</code> to <code>provisioned</code>, you must also set a value for <code>ProvisionedThroughputInMibps</code>."""
    BURSTING = 'bursting'
    PROVISIONED = 'provisioned'
    ELASTIC = 'elastic'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFileSystemRequestBody:
    
    provisioned_throughput_in_mibps: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProvisionedThroughputInMibps'), 'exclude': lambda f: f is None }})
    r"""(Optional) Sets the amount of provisioned throughput, in MiB/s, for the file system. Valid values are 1-1024. If you are changing the throughput mode to provisioned, you must also provide the amount of provisioned throughput. Required if <code>ThroughputMode</code> is changed to <code>provisioned</code> on update."""  
    throughput_mode: Optional[UpdateFileSystemRequestBodyThroughputModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThroughputMode'), 'exclude': lambda f: f is None }})
    r"""(Optional) Updates the file system's throughput mode. If you're not updating your throughput mode, you don't need to provide this value in your request. If you are changing the <code>ThroughputMode</code> to <code>provisioned</code>, you must also set a value for <code>ProvisionedThroughputInMibps</code>."""  
    

@dataclasses.dataclass
class UpdateFileSystemRequest:
    
    file_system_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'FileSystemId', 'style': 'simple', 'explode': False }})
    r"""The ID of the file system that you want to update."""  
    request_body: UpdateFileSystemRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateFileSystemResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequest"""  
    file_system_description: Optional[shared_filesystemdescription.FileSystemDescription] = dataclasses.field(default=None)
    r"""Success"""  
    file_system_not_found: Optional[Any] = dataclasses.field(default=None)
    r"""FileSystemNotFound"""  
    incorrect_file_system_life_cycle_state: Optional[Any] = dataclasses.field(default=None)
    r"""IncorrectFileSystemLifeCycleState"""  
    insufficient_throughput_capacity: Optional[Any] = dataclasses.field(default=None)
    r"""InsufficientThroughputCapacity"""  
    internal_server_error: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerError"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throughput_limit_exceeded: Optional[Any] = dataclasses.field(default=None)
    r"""ThroughputLimitExceeded"""  
    too_many_requests: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequests"""  
    