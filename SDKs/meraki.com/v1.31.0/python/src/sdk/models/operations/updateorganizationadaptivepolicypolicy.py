"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationAdaptivePolicyPolicyRequestBodyAcls:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the adaptive policy ACL"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the adaptive policy ACL"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationAdaptivePolicyPolicyRequestBodyDestinationGroup:
    r"""The destination adaptive policy group (requires one unique attribute)"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the destination adaptive policy group"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the destination adaptive policy group"""  
    sgt: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sgt'), 'exclude': lambda f: f is None }})
    r"""The SGT of the destination adaptive policy group"""  
    
class UpdateOrganizationAdaptivePolicyPolicyRequestBodyLastEntryRuleEnum(str, Enum):
    r"""The rule to apply if there is no matching ACL"""
    ALLOW = 'allow'
    DEFAULT = 'default'
    DENY = 'deny'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationAdaptivePolicyPolicyRequestBodySourceGroup:
    r"""The source adaptive policy group (requires one unique attribute)"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the source adaptive policy group"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the source adaptive policy group"""  
    sgt: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sgt'), 'exclude': lambda f: f is None }})
    r"""The SGT of the source adaptive policy group"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationAdaptivePolicyPolicyRequestBody:
    
    acls: Optional[list[UpdateOrganizationAdaptivePolicyPolicyRequestBodyAcls]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acls'), 'exclude': lambda f: f is None }})
    r"""An ordered array of adaptive policy ACLs (each requires one unique attribute) that apply to this policy"""  
    destination_group: Optional[UpdateOrganizationAdaptivePolicyPolicyRequestBodyDestinationGroup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationGroup'), 'exclude': lambda f: f is None }})
    r"""The destination adaptive policy group (requires one unique attribute)"""  
    last_entry_rule: Optional[UpdateOrganizationAdaptivePolicyPolicyRequestBodyLastEntryRuleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastEntryRule'), 'exclude': lambda f: f is None }})
    r"""The rule to apply if there is no matching ACL"""  
    source_group: Optional[UpdateOrganizationAdaptivePolicyPolicyRequestBodySourceGroup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceGroup'), 'exclude': lambda f: f is None }})
    r"""The source adaptive policy group (requires one unique attribute)"""  
    

@dataclasses.dataclass
class UpdateOrganizationAdaptivePolicyPolicyRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})  
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateOrganizationAdaptivePolicyPolicyRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateOrganizationAdaptivePolicyPolicyResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_organization_adaptive_policy_policy_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    