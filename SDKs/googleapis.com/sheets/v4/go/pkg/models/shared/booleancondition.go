// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BooleanConditionTypeEnum - The type of condition.
type BooleanConditionTypeEnum string

const (
	BooleanConditionTypeEnumConditionTypeUnspecified BooleanConditionTypeEnum = "CONDITION_TYPE_UNSPECIFIED"
	BooleanConditionTypeEnumNumberGreater            BooleanConditionTypeEnum = "NUMBER_GREATER"
	BooleanConditionTypeEnumNumberGreaterThanEq      BooleanConditionTypeEnum = "NUMBER_GREATER_THAN_EQ"
	BooleanConditionTypeEnumNumberLess               BooleanConditionTypeEnum = "NUMBER_LESS"
	BooleanConditionTypeEnumNumberLessThanEq         BooleanConditionTypeEnum = "NUMBER_LESS_THAN_EQ"
	BooleanConditionTypeEnumNumberEq                 BooleanConditionTypeEnum = "NUMBER_EQ"
	BooleanConditionTypeEnumNumberNotEq              BooleanConditionTypeEnum = "NUMBER_NOT_EQ"
	BooleanConditionTypeEnumNumberBetween            BooleanConditionTypeEnum = "NUMBER_BETWEEN"
	BooleanConditionTypeEnumNumberNotBetween         BooleanConditionTypeEnum = "NUMBER_NOT_BETWEEN"
	BooleanConditionTypeEnumTextContains             BooleanConditionTypeEnum = "TEXT_CONTAINS"
	BooleanConditionTypeEnumTextNotContains          BooleanConditionTypeEnum = "TEXT_NOT_CONTAINS"
	BooleanConditionTypeEnumTextStartsWith           BooleanConditionTypeEnum = "TEXT_STARTS_WITH"
	BooleanConditionTypeEnumTextEndsWith             BooleanConditionTypeEnum = "TEXT_ENDS_WITH"
	BooleanConditionTypeEnumTextEq                   BooleanConditionTypeEnum = "TEXT_EQ"
	BooleanConditionTypeEnumTextIsEmail              BooleanConditionTypeEnum = "TEXT_IS_EMAIL"
	BooleanConditionTypeEnumTextIsURL                BooleanConditionTypeEnum = "TEXT_IS_URL"
	BooleanConditionTypeEnumDateEq                   BooleanConditionTypeEnum = "DATE_EQ"
	BooleanConditionTypeEnumDateBefore               BooleanConditionTypeEnum = "DATE_BEFORE"
	BooleanConditionTypeEnumDateAfter                BooleanConditionTypeEnum = "DATE_AFTER"
	BooleanConditionTypeEnumDateOnOrBefore           BooleanConditionTypeEnum = "DATE_ON_OR_BEFORE"
	BooleanConditionTypeEnumDateOnOrAfter            BooleanConditionTypeEnum = "DATE_ON_OR_AFTER"
	BooleanConditionTypeEnumDateBetween              BooleanConditionTypeEnum = "DATE_BETWEEN"
	BooleanConditionTypeEnumDateNotBetween           BooleanConditionTypeEnum = "DATE_NOT_BETWEEN"
	BooleanConditionTypeEnumDateIsValid              BooleanConditionTypeEnum = "DATE_IS_VALID"
	BooleanConditionTypeEnumOneOfRange               BooleanConditionTypeEnum = "ONE_OF_RANGE"
	BooleanConditionTypeEnumOneOfList                BooleanConditionTypeEnum = "ONE_OF_LIST"
	BooleanConditionTypeEnumBlank                    BooleanConditionTypeEnum = "BLANK"
	BooleanConditionTypeEnumNotBlank                 BooleanConditionTypeEnum = "NOT_BLANK"
	BooleanConditionTypeEnumCustomFormula            BooleanConditionTypeEnum = "CUSTOM_FORMULA"
	BooleanConditionTypeEnumBoolean                  BooleanConditionTypeEnum = "BOOLEAN"
	BooleanConditionTypeEnumTextNotEq                BooleanConditionTypeEnum = "TEXT_NOT_EQ"
	BooleanConditionTypeEnumDateNotEq                BooleanConditionTypeEnum = "DATE_NOT_EQ"
)

func (e *BooleanConditionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONDITION_TYPE_UNSPECIFIED":
		fallthrough
	case "NUMBER_GREATER":
		fallthrough
	case "NUMBER_GREATER_THAN_EQ":
		fallthrough
	case "NUMBER_LESS":
		fallthrough
	case "NUMBER_LESS_THAN_EQ":
		fallthrough
	case "NUMBER_EQ":
		fallthrough
	case "NUMBER_NOT_EQ":
		fallthrough
	case "NUMBER_BETWEEN":
		fallthrough
	case "NUMBER_NOT_BETWEEN":
		fallthrough
	case "TEXT_CONTAINS":
		fallthrough
	case "TEXT_NOT_CONTAINS":
		fallthrough
	case "TEXT_STARTS_WITH":
		fallthrough
	case "TEXT_ENDS_WITH":
		fallthrough
	case "TEXT_EQ":
		fallthrough
	case "TEXT_IS_EMAIL":
		fallthrough
	case "TEXT_IS_URL":
		fallthrough
	case "DATE_EQ":
		fallthrough
	case "DATE_BEFORE":
		fallthrough
	case "DATE_AFTER":
		fallthrough
	case "DATE_ON_OR_BEFORE":
		fallthrough
	case "DATE_ON_OR_AFTER":
		fallthrough
	case "DATE_BETWEEN":
		fallthrough
	case "DATE_NOT_BETWEEN":
		fallthrough
	case "DATE_IS_VALID":
		fallthrough
	case "ONE_OF_RANGE":
		fallthrough
	case "ONE_OF_LIST":
		fallthrough
	case "BLANK":
		fallthrough
	case "NOT_BLANK":
		fallthrough
	case "CUSTOM_FORMULA":
		fallthrough
	case "BOOLEAN":
		fallthrough
	case "TEXT_NOT_EQ":
		fallthrough
	case "DATE_NOT_EQ":
		*e = BooleanConditionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BooleanConditionTypeEnum: %s", s)
	}
}

// BooleanCondition - A condition that can evaluate to true or false. BooleanConditions are used by conditional formatting, data validation, and the criteria in filters.
type BooleanCondition struct {
	// The type of condition.
	Type *BooleanConditionTypeEnum `json:"type,omitempty"`
	// The values of the condition. The number of supported values depends on the condition type. Some support zero values, others one or two values, and ConditionType.ONE_OF_LIST supports an arbitrary number of values.
	Values []ConditionValue `json:"values,omitempty"`
}
