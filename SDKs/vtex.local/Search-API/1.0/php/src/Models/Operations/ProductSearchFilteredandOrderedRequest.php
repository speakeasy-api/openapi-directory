<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class ProductSearchFilteredandOrderedRequest
{
    /**
     * HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * 
     * @var string $accept
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=Accept')]
    public string $accept;
    
    /**
     * Describes the type of the content being sent.
     * 
     * @var string $contentType
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=Content-Type')]
    public string $contentType;
    
    /**
     * Sorting method. It can be by Price (`O=OrderByPriceDESC` or `O=OrderByPriceASC`), by Top Selling Products (`O=OrderByTopSaleDESC`), by Best Reviews (`O=OrderByReviewRateDESC`), by Name (`O=OrderByNameASC` or `O=OrderByNameDESC`), by Release Date (`O=OrderByReleaseDateDESC`), by Best Discounts (`O=OrderByBestDiscountDESC`), by Score (`O=OrderByScoreDESC`)
     * 
     * @var ?string $o
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=O')]
    public ?string $o = null;
    
    /**
     * Starter page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page.
     * 
     * @var ?string $from
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=_from')]
    public ?string $from = null;
    
    /**
     * Finisher page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page.
     * 
     * @var ?string $to
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=_to')]
    public ?string $to = null;
    
    /**
     * General filter. It can be by category (`fq=C:/{a}/{b}`), by specification (`fq=specificationFilter_{a}:{b}`),  by price range (`fq=P:[{a} TO {b}]`), by collection (`fq=productClusterIds:{{productClusterId}}`), by product ID (`fq=productId:{{productId}}`),  by SKU ID (`fq=skuId:{{skuId}}`), by Reference ID (`fq=alternateIds_RefId:{{referenceId}}`), by EAN13 (`fq=alternateIds_Ean:{{ean13}}`), by availability at a specific sales channel (`fq=isAvailablePerSalesChannel_{{sc}}:{{bool}}`), by available at a specific seller (`fq=sellerId:{{sellerId}}`)
     * 
     * @var ?string $fq
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=fq')]
    public ?string $fq = null;
    
    /**
     * Filter by full text. The form is`ft={searchWord}`
     * 
     * @var ?string $ft
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=ft')]
    public ?string $ft = null;
    
	public function __construct()
	{
		$this->accept = "";
		$this->contentType = "";
		$this->o = null;
		$this->from = null;
		$this->to = null;
		$this->fq = null;
		$this->ft = null;
	}
}
