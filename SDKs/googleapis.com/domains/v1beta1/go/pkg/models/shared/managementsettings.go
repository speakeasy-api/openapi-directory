// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ManagementSettingsTransferLockStateEnum - Controls whether the domain can be transferred to another registrar.
type ManagementSettingsTransferLockStateEnum string

const (
	ManagementSettingsTransferLockStateEnumTransferLockStateUnspecified ManagementSettingsTransferLockStateEnum = "TRANSFER_LOCK_STATE_UNSPECIFIED"
	ManagementSettingsTransferLockStateEnumUnlocked                     ManagementSettingsTransferLockStateEnum = "UNLOCKED"
	ManagementSettingsTransferLockStateEnumLocked                       ManagementSettingsTransferLockStateEnum = "LOCKED"
)

func (e ManagementSettingsTransferLockStateEnum) ToPointer() *ManagementSettingsTransferLockStateEnum {
	return &e
}

func (e *ManagementSettingsTransferLockStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TRANSFER_LOCK_STATE_UNSPECIFIED":
		fallthrough
	case "UNLOCKED":
		fallthrough
	case "LOCKED":
		*e = ManagementSettingsTransferLockStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ManagementSettingsTransferLockStateEnum: %v", v)
	}
}

// ManagementSettingsInput - Defines renewal, billing, and transfer settings for a `Registration`.
type ManagementSettingsInput struct {
	// Controls whether the domain can be transferred to another registrar.
	TransferLockState *ManagementSettingsTransferLockStateEnum `json:"transferLockState,omitempty"`
}

// ManagementSettingsRenewalMethodEnum - Output only. The renewal method for this `Registration`.
type ManagementSettingsRenewalMethodEnum string

const (
	ManagementSettingsRenewalMethodEnumRenewalMethodUnspecified ManagementSettingsRenewalMethodEnum = "RENEWAL_METHOD_UNSPECIFIED"
	ManagementSettingsRenewalMethodEnumAutomaticRenewal         ManagementSettingsRenewalMethodEnum = "AUTOMATIC_RENEWAL"
	ManagementSettingsRenewalMethodEnumManualRenewal            ManagementSettingsRenewalMethodEnum = "MANUAL_RENEWAL"
)

func (e ManagementSettingsRenewalMethodEnum) ToPointer() *ManagementSettingsRenewalMethodEnum {
	return &e
}

func (e *ManagementSettingsRenewalMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RENEWAL_METHOD_UNSPECIFIED":
		fallthrough
	case "AUTOMATIC_RENEWAL":
		fallthrough
	case "MANUAL_RENEWAL":
		*e = ManagementSettingsRenewalMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ManagementSettingsRenewalMethodEnum: %v", v)
	}
}

// ManagementSettings - Defines renewal, billing, and transfer settings for a `Registration`.
type ManagementSettings struct {
	// Output only. The renewal method for this `Registration`.
	RenewalMethod *ManagementSettingsRenewalMethodEnum `json:"renewalMethod,omitempty"`
	// Controls whether the domain can be transferred to another registrar.
	TransferLockState *ManagementSettingsTransferLockStateEnum `json:"transferLockState,omitempty"`
}
