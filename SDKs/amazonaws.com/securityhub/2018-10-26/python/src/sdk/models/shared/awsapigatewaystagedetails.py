"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsapigatewayaccesslogsettings as shared_awsapigatewayaccesslogsettings
from ..shared import awsapigatewaycanarysettings as shared_awsapigatewaycanarysettings
from ..shared import awsapigatewaymethodsettings as shared_awsapigatewaymethodsettings
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsAPIGatewayStageDetails:
    r"""Provides information about a version 1 Amazon API Gateway stage."""
    
    access_log_settings: Optional[shared_awsapigatewayaccesslogsettings.AwsAPIGatewayAccessLogSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessLogSettings'), 'exclude': lambda f: f is None }})  
    cache_cluster_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CacheClusterEnabled'), 'exclude': lambda f: f is None }})  
    cache_cluster_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CacheClusterSize'), 'exclude': lambda f: f is None }})  
    cache_cluster_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CacheClusterStatus'), 'exclude': lambda f: f is None }})  
    canary_settings: Optional[shared_awsapigatewaycanarysettings.AwsAPIGatewayCanarySettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CanarySettings'), 'exclude': lambda f: f is None }})  
    client_certificate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientCertificateId'), 'exclude': lambda f: f is None }})  
    created_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedDate'), 'exclude': lambda f: f is None }})  
    deployment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeploymentId'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    documentation_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DocumentationVersion'), 'exclude': lambda f: f is None }})  
    last_updated_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdatedDate'), 'exclude': lambda f: f is None }})  
    method_settings: Optional[list[shared_awsapigatewaymethodsettings.AwsAPIGatewayMethodSettings]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MethodSettings'), 'exclude': lambda f: f is None }})  
    stage_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StageName'), 'exclude': lambda f: f is None }})  
    tracing_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TracingEnabled'), 'exclude': lambda f: f is None }})  
    variables: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Variables'), 'exclude': lambda f: f is None }})  
    web_acl_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WebAclArn'), 'exclude': lambda f: f is None }})  
    