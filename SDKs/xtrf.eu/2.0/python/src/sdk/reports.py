"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Reports:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_11(self, request: operations.Delete11Request) -> operations.Delete11Response:
        r"""Removes a report.
        Removes a report.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Delete11Request, base_url, '/reports/{reportId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Delete11Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def duplicate_1(self, request: operations.Duplicate1Request) -> operations.Duplicate1Response:
        r"""Duplicates a report.
        Duplicates a report.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Duplicate1Request, base_url, '/reports/{reportId}/duplicate', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Duplicate1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def export_to_xml(self, request: shared.ExportRequestDTO) -> operations.ExportToXMLResponse:
        r"""Exports reports definition to XML.
        Exports reports definition to XML.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/reports/export/xml'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportToXMLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReportResultDTO])
                res.report_result_dto = out

        return res

    def generate_csv(self, request: operations.GenerateCSVRequest) -> operations.GenerateCSVResponse:
        r"""Generates CSV content for a report.
        Generates CSV content for a report.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GenerateCSVRequest, base_url, '/reports/{reportId}/result/csv', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GenerateCSVResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReportResultDTO])
                res.report_result_dto = out

        return res

    def generate_printer_friendly(self, request: operations.GeneratePrinterFriendlyRequest) -> operations.GeneratePrinterFriendlyResponse:
        r"""Generates printer friendly content for a report.
        Generates printer friendly content for a report.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GeneratePrinterFriendlyRequest, base_url, '/reports/{reportId}/result/printerFriendly', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GeneratePrinterFriendlyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReportResultDTO])
                res.report_result_dto = out

        return res

    def import_from_xml(self, request: shared.ImportRequestDTO) -> operations.ImportFromXMLResponse:
        r"""Imports reports definition from XML.
        Imports a report definition from an XML using a file token. To obtain the token, you first need to upload a temporary XML file, as specified in the Files section. Note that the name of the imported report must be unique.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/reports/import/xml'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportFromXMLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImportResultDTO])
                res.import_result_dto = out

        return res

    def set_preferred(self, request: operations.SetPreferredRequest) -> operations.SetPreferredResponse:
        r"""Marks report as preferred or not.
        Marks report as preferred or not.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SetPreferredRequest, base_url, '/reports/{reportId}/preferred', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "preferred_request_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetPreferredResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    