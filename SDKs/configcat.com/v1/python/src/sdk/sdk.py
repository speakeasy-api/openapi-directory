"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .audit_logs import AuditLogs
from .code_references import CodeReferences
from .configs import Configs
from .environments import Environments
from .feature_flag_and_setting_values import FeatureFlagAndSettingValues
from .feature_flag_and_setting_values_using_sdk_key import FeatureFlagAndSettingValuesUsingSDKKey
from .feature_flags_and_settings import FeatureFlagsAndSettings
from .integration_links import IntegrationLinks
from .me import Me
from .members import Members
from .organizations import Organizations
from .permission_groups import PermissionGroups
from .products import Products
from .sdk_keys import SDKKeys
from .segments import Segments
from .tags import Tags
from sdk.models import shared

SERVERS = [
    "https://api.configcat.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""**Base API URL**: https://api.configcat.com
    
    If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).
    
    The purpose of this API is to access the ConfigCat platform programmatically. 
    You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat. 
    
    The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON 
    and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).
    
    
    # OpenAPI Specification
    
    The complete specification is publicly available here: [swagger.json](v1/swagger.json). 
    You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or
    [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.
    
    # Authentication
    This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication). 
    
    <!-- ReDoc-Inject: <security-definitions> -->
    
    # Throttling and rate limits
    All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:
    
    | Header | Description |
    | :- | :- |
    | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. |
    | X-Rate-Limit-Reset     | The time	when the current rate limit period resets.						  |
    
    When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header.
    """
    audit_logs: AuditLogs
    r"""Access audit log entries."""
    code_references: CodeReferences
    r"""With this endpoint you can upload Feature Flag and Setting usage references that will be shown on the ConfigCat Dashboard.
    
    <a href=\"https://configcat.com/docs/advanced/code-references/overview/\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the concept of Code References.
    """
    configs: Configs
    r"""With these endpoints you can manage your Configs.
    This also can be used to manage [Feature Flags and Settings](#tag/Feature-Flags-and-Settings) and their 
    [served values](#tag/Feature-Flag-and-Setting-values) through this API.
    
    <a href=\"https://configcat.com/docs/main-concepts/#config\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the concept of Configs.
    """
    environments: Environments
    r"""With these endpoints you can update existing Environments or add new ones into your selected [Product](#tag/Products).
    
    <a href=\"https://configcat.com/docs/main-concepts/#environment\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the concept of Environments.
    """
    feature_flag_and_setting_values: FeatureFlagAndSettingValues
    r"""With these endpoints you can control how your existing Feature Flags and Settings should serve their values.
    You can turn Feature Flags on or off, update Setting values and also add, remove or reorder Percentage and Targeting Rules.
    
    To determine which Feature Flag or Setting you want to work with you have to pass its `settingId`. It can be
    obtained from the [Feature Flag & Setting](#tag/Feature-Flags-and-Settings) endpoints.
    
    You also have to specify in which Environment you want to change the served value configuration by its
    `environmentId` which can be obtained from the [List Environments](#operation/get-environments) endpoint.
    """
    feature_flag_and_setting_values_using_sdk_key: FeatureFlagAndSettingValuesUsingSDKKey
    r"""With these endpoints you can control how your existing Feature Flags and Settings should serve their values.
    You can turn Feature Flags on or off, update Setting values and also add, remove or change the order of Percentage and Targeting Rules.
    
    These endpoints are determining the Environment and Config by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in
    the `X-CONFIGCAT-SDKKEY` request header. To identify the desired Feature Flag or Setting to change, 
    you can use either its `settingId` or `key` attribute. You can get those attributes 
    from the [Feature Flag & Setting](#tag/Feature-Flags-and-Settings) endpoints.
    """
    feature_flags_and_settings: FeatureFlagsAndSettings
    r"""With these endpoints you can manage your Feature Flags or Settings within a Config.
    However you can't use them for manipulating the values of your Feature Flags and Settings,
    to do that please visit the [Feature Flag & Setting values using SDK Key](#tag/Feature-Flag-and-Setting-values-using-SDK-Key)
    and [Feature Flag & Setting values](#tag/Feature-Flag-and-Setting-values) sections of the API.
    
    For using these endpoints, first you have to select which Config you want to work with by its `configId` 
    which can be obtained from the [List Configs](#operation/get-configs) endpoint. 
    Then you can use it to create new Feature Flags or to get information about existing ones.
    
    Then you can obtain the `settingId` or `key` of your desired Feature Flag or Setting 
    to use them for further operations in this API. 
    
    <a href=\"https://configcat.com/docs/main-concepts/#setting\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the concept of Settings.
    """
    integration_links: IntegrationLinks
    me: Me
    r"""Information about the current user."""
    members: Members
    r"""With these endpoints you can manage your Members.
    
    <a href=\"https://configcat.com/docs/advanced/team-collaboration\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about Team Collaboration.
    """
    organizations: Organizations
    r"""With these endpoints you can get useful information about your Organizations.
    This also can be used to manage your [Products](#tag/Products).
    
    <a href=\"https://configcat.com/docs/organization/\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the Organizations.
    """
    permission_groups: PermissionGroups
    r"""With these endpoints you can manage your Permission Groups.
    
    <a href=\"https://configcat.com/docs/advanced/team-collaboration#permissions--groups\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about Permissions.
    """
    products: Products
    r"""With these endpoints you can manage your Products.
    This also can be used to manage [Environments](#tag/Environments), [Configs](#tag/Configs), [Tags](#tag/Tags) and [Permission Groups](#tag/Permission-Groups) through this API.
    
    <a href=\"https://configcat.com/docs/main-concepts/#product\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the concept of Products.
    """
    sdk_keys: SDKKeys
    r"""With these endpoints you can manage your SDK Keys."""
    segments: Segments
    r"""With these endpoints you can manage your Segments.
    Segments allow you to group your users based on any of their properties. Define user segments and add them to multiple feature flags.
    """
    tags: Tags
    r"""With these endpoints you can manage Tags. Tags are stored under a Product. You can  and add a Tag to a Feature Flag or Setting using the [Update Flag](#operation/update-setting) endpoint."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.audit_logs = AuditLogs(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.code_references = CodeReferences(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.configs = Configs(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.environments = Environments(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.feature_flag_and_setting_values = FeatureFlagAndSettingValues(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.feature_flag_and_setting_values_using_sdk_key = FeatureFlagAndSettingValuesUsingSDKKey(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.feature_flags_and_settings = FeatureFlagsAndSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.integration_links = IntegrationLinks(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.me = Me(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.members = Members(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.organizations = Organizations(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.permission_groups = PermissionGroups(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.products = Products(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.sdk_keys = SDKKeys(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.segments = Segments(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.tags = Tags(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    