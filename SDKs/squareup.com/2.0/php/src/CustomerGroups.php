<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CustomerGroups 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * CreateCustomerGroup
     * 
     * Creates a new customer group for a business.
     * 
     * The request must include the `name` value of the group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateCustomerGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCustomerGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCustomerGroupResponse
     */
	public function createCustomerGroup(
        \OpenAPI\OpenAPI\Models\Shared\CreateCustomerGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCustomerGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCustomerGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customers/groups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCustomerGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createCustomerGroupResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateCustomerGroupResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DeleteCustomerGroup
     * 
     * Deletes a customer group as identified by the `group_id` value.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerGroupResponse
     */
	public function deleteCustomerGroup(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customers/groups/{group_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteCustomerGroupResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteCustomerGroupResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListCustomerGroups
     * 
     * Retrieves the list of customer groups of a business.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCustomerGroupsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCustomerGroupsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCustomerGroupsResponse
     */
	public function listCustomerGroups(
        \OpenAPI\OpenAPI\Models\Operations\ListCustomerGroupsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCustomerGroupsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCustomerGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customers/groups');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCustomerGroupsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCustomerGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCustomerGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCustomerGroupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveCustomerGroup
     * 
     * Retrieves a specific customer group as identified by the `group_id` value.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveCustomerGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveCustomerGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveCustomerGroupResponse
     */
	public function retrieveCustomerGroup(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveCustomerGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveCustomerGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveCustomerGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customers/groups/{group_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveCustomerGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveCustomerGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveCustomerGroupResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveCustomerGroupResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UpdateCustomerGroup
     * 
     * Updates a customer group as identified by the `group_id` value.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerGroupResponse
     */
	public function updateCustomerGroup(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customers/groups/{group_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateCustomerGroupRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateCustomerGroupResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateCustomerGroupResponse', 'json');
            }
        }

        return $response;
    }
}