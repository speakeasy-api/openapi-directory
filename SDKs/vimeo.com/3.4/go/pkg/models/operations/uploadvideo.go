// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UploadVideoPathParams struct {
	// The ID of the user.
	UserID float64 `pathParam:"style=simple,explode=false,name=user_id"`
}

type UploadVideoRequestBodyEmbedButtons struct {
	// Show or hide the Embed button.
	Embed *bool `json:"embed,omitempty"`
	// Show or hide the Fullscreen button.
	Fullscreen *bool `json:"fullscreen,omitempty"`
	// Show or hide the HD button.
	Hd *bool `json:"hd,omitempty"`
	// Show or hide the Like button.
	Like *bool `json:"like,omitempty"`
	// Show or hide the Scaling button (shown only in Fullscreen mode).
	Scaling *bool `json:"scaling,omitempty"`
	// Show or hide the Share button.
	Share *bool `json:"share,omitempty"`
	// Show or hide the Watch Later button.
	Watchlater *bool `json:"watchlater,omitempty"`
}

type UploadVideoRequestBodyEmbedLogosCustom struct {
	// Show or hide your custom logo.
	Active *bool `json:"active,omitempty"`
	// The URL that loads when the user clicks your custom logo.
	Link *string `json:"link,omitempty"`
	// Whether always to show the custom logo or to hide it after time with the rest of the UI.
	Sticky *bool `json:"sticky,omitempty"`
}

type UploadVideoRequestBodyEmbedLogos struct {
	Custom *UploadVideoRequestBodyEmbedLogosCustom `json:"custom,omitempty"`
	// Show or hide the Vimeo logo.
	Vimeo *bool `json:"vimeo,omitempty"`
}

// UploadVideoRequestBodyEmbedTitleNameEnum - Show or hide the video title, or enable the user to determine whether the video title appears.
type UploadVideoRequestBodyEmbedTitleNameEnum string

const (
	UploadVideoRequestBodyEmbedTitleNameEnumHide UploadVideoRequestBodyEmbedTitleNameEnum = "hide"
	UploadVideoRequestBodyEmbedTitleNameEnumShow UploadVideoRequestBodyEmbedTitleNameEnum = "show"
	UploadVideoRequestBodyEmbedTitleNameEnumUser UploadVideoRequestBodyEmbedTitleNameEnum = "user"
)

func (e *UploadVideoRequestBodyEmbedTitleNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hide":
		fallthrough
	case "show":
		fallthrough
	case "user":
		*e = UploadVideoRequestBodyEmbedTitleNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoRequestBodyEmbedTitleNameEnum: %s", s)
	}
}

// UploadVideoRequestBodyEmbedTitleOwnerEnum - Show or hide the owner information, or enable the user to determine whether the owner information appears.
type UploadVideoRequestBodyEmbedTitleOwnerEnum string

const (
	UploadVideoRequestBodyEmbedTitleOwnerEnumHide UploadVideoRequestBodyEmbedTitleOwnerEnum = "hide"
	UploadVideoRequestBodyEmbedTitleOwnerEnumShow UploadVideoRequestBodyEmbedTitleOwnerEnum = "show"
	UploadVideoRequestBodyEmbedTitleOwnerEnumUser UploadVideoRequestBodyEmbedTitleOwnerEnum = "user"
)

func (e *UploadVideoRequestBodyEmbedTitleOwnerEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hide":
		fallthrough
	case "show":
		fallthrough
	case "user":
		*e = UploadVideoRequestBodyEmbedTitleOwnerEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoRequestBodyEmbedTitleOwnerEnum: %s", s)
	}
}

// UploadVideoRequestBodyEmbedTitlePortraitEnum - Show or hide the owner portrait, or enable the user to determine whether the owner portrait appears.
type UploadVideoRequestBodyEmbedTitlePortraitEnum string

const (
	UploadVideoRequestBodyEmbedTitlePortraitEnumHide UploadVideoRequestBodyEmbedTitlePortraitEnum = "hide"
	UploadVideoRequestBodyEmbedTitlePortraitEnumShow UploadVideoRequestBodyEmbedTitlePortraitEnum = "show"
	UploadVideoRequestBodyEmbedTitlePortraitEnumUser UploadVideoRequestBodyEmbedTitlePortraitEnum = "user"
)

func (e *UploadVideoRequestBodyEmbedTitlePortraitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hide":
		fallthrough
	case "show":
		fallthrough
	case "user":
		*e = UploadVideoRequestBodyEmbedTitlePortraitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoRequestBodyEmbedTitlePortraitEnum: %s", s)
	}
}

type UploadVideoRequestBodyEmbedTitle struct {
	// Show or hide the video title, or enable the user to determine whether the video title appears.
	Name *UploadVideoRequestBodyEmbedTitleNameEnum `json:"name,omitempty"`
	// Show or hide the owner information, or enable the user to determine whether the owner information appears.
	Owner *UploadVideoRequestBodyEmbedTitleOwnerEnum `json:"owner,omitempty"`
	// Show or hide the owner portrait, or enable the user to determine whether the owner portrait appears.
	Portrait *UploadVideoRequestBodyEmbedTitlePortraitEnum `json:"portrait,omitempty"`
}

type UploadVideoRequestBodyEmbed struct {
	Buttons *UploadVideoRequestBodyEmbedButtons `json:"buttons,omitempty"`
	// The main color of the embed player.
	Color *string                           `json:"color,omitempty"`
	Logos *UploadVideoRequestBodyEmbedLogos `json:"logos,omitempty"`
	// Show or hide the playbar.
	Playbar *bool                             `json:"playbar,omitempty"`
	Title   *UploadVideoRequestBodyEmbedTitle `json:"title,omitempty"`
	// Show or hide the volume selector.
	Volume *bool `json:"volume,omitempty"`
}

// UploadVideoRequestBodyLicenseEnum - The Creative Commons license.
type UploadVideoRequestBodyLicenseEnum string

const (
	UploadVideoRequestBodyLicenseEnumBy     UploadVideoRequestBodyLicenseEnum = "by"
	UploadVideoRequestBodyLicenseEnumByNc   UploadVideoRequestBodyLicenseEnum = "by-nc"
	UploadVideoRequestBodyLicenseEnumByNcNd UploadVideoRequestBodyLicenseEnum = "by-nc-nd"
	UploadVideoRequestBodyLicenseEnumByNcSa UploadVideoRequestBodyLicenseEnum = "by-nc-sa"
	UploadVideoRequestBodyLicenseEnumByNd   UploadVideoRequestBodyLicenseEnum = "by-nd"
	UploadVideoRequestBodyLicenseEnumBySa   UploadVideoRequestBodyLicenseEnum = "by-sa"
	UploadVideoRequestBodyLicenseEnumCc0    UploadVideoRequestBodyLicenseEnum = "cc0"
)

func (e *UploadVideoRequestBodyLicenseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "by":
		fallthrough
	case "by-nc":
		fallthrough
	case "by-nc-nd":
		fallthrough
	case "by-nc-sa":
		fallthrough
	case "by-nd":
		fallthrough
	case "by-sa":
		fallthrough
	case "cc0":
		*e = UploadVideoRequestBodyLicenseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoRequestBodyLicenseEnum: %s", s)
	}
}

// UploadVideoRequestBodyPrivacyCommentsEnum - The privacy level required to comment on the video.
type UploadVideoRequestBodyPrivacyCommentsEnum string

const (
	UploadVideoRequestBodyPrivacyCommentsEnumAnybody  UploadVideoRequestBodyPrivacyCommentsEnum = "anybody"
	UploadVideoRequestBodyPrivacyCommentsEnumContacts UploadVideoRequestBodyPrivacyCommentsEnum = "contacts"
	UploadVideoRequestBodyPrivacyCommentsEnumNobody   UploadVideoRequestBodyPrivacyCommentsEnum = "nobody"
)

func (e *UploadVideoRequestBodyPrivacyCommentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "nobody":
		*e = UploadVideoRequestBodyPrivacyCommentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoRequestBodyPrivacyCommentsEnum: %s", s)
	}
}

// UploadVideoRequestBodyPrivacyEmbedEnum - The video's embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains.
type UploadVideoRequestBodyPrivacyEmbedEnum string

const (
	UploadVideoRequestBodyPrivacyEmbedEnumPrivate   UploadVideoRequestBodyPrivacyEmbedEnum = "private"
	UploadVideoRequestBodyPrivacyEmbedEnumPublic    UploadVideoRequestBodyPrivacyEmbedEnum = "public"
	UploadVideoRequestBodyPrivacyEmbedEnumWhitelist UploadVideoRequestBodyPrivacyEmbedEnum = "whitelist"
)

func (e *UploadVideoRequestBodyPrivacyEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private":
		fallthrough
	case "public":
		fallthrough
	case "whitelist":
		*e = UploadVideoRequestBodyPrivacyEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoRequestBodyPrivacyEmbedEnum: %s", s)
	}
}

// UploadVideoRequestBodyPrivacyViewEnum - The video's privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`.
type UploadVideoRequestBodyPrivacyViewEnum string

const (
	UploadVideoRequestBodyPrivacyViewEnumAnybody  UploadVideoRequestBodyPrivacyViewEnum = "anybody"
	UploadVideoRequestBodyPrivacyViewEnumContacts UploadVideoRequestBodyPrivacyViewEnum = "contacts"
	UploadVideoRequestBodyPrivacyViewEnumDisable  UploadVideoRequestBodyPrivacyViewEnum = "disable"
	UploadVideoRequestBodyPrivacyViewEnumNobody   UploadVideoRequestBodyPrivacyViewEnum = "nobody"
	UploadVideoRequestBodyPrivacyViewEnumPassword UploadVideoRequestBodyPrivacyViewEnum = "password"
	UploadVideoRequestBodyPrivacyViewEnumUnlisted UploadVideoRequestBodyPrivacyViewEnum = "unlisted"
	UploadVideoRequestBodyPrivacyViewEnumUsers    UploadVideoRequestBodyPrivacyViewEnum = "users"
)

func (e *UploadVideoRequestBodyPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "disable":
		fallthrough
	case "nobody":
		fallthrough
	case "password":
		fallthrough
	case "unlisted":
		fallthrough
	case "users":
		*e = UploadVideoRequestBodyPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoRequestBodyPrivacyViewEnum: %s", s)
	}
}

type UploadVideoRequestBodyPrivacy struct {
	// Whether a user can add the video to an album, channel, or group.
	Add *bool `json:"add,omitempty"`
	// The privacy level required to comment on the video.
	Comments *UploadVideoRequestBodyPrivacyCommentsEnum `json:"comments,omitempty"`
	// Whether a user can download the video. Not available to users with a Basic membership
	Download *bool `json:"download,omitempty"`
	// The video's embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains.
	Embed *UploadVideoRequestBodyPrivacyEmbedEnum `json:"embed,omitempty"`
	// The video's privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`.
	View *UploadVideoRequestBodyPrivacyViewEnum `json:"view,omitempty"`
}

// UploadVideoRequestBodyRatingsMpaaReasonEnum - The reason for the video's MPAA rating.
//
// Option descriptions:
//   - `at` - Adult themes
//   - `bn` - Brief nudity
//   - `n` - Nudity
//   - `sl` - Strong language
//   - `ss` - Sexual situations
//   - `v` - Violence
type UploadVideoRequestBodyRatingsMpaaReasonEnum string

const (
	UploadVideoRequestBodyRatingsMpaaReasonEnumAt UploadVideoRequestBodyRatingsMpaaReasonEnum = "at"
	UploadVideoRequestBodyRatingsMpaaReasonEnumBn UploadVideoRequestBodyRatingsMpaaReasonEnum = "bn"
	UploadVideoRequestBodyRatingsMpaaReasonEnumN  UploadVideoRequestBodyRatingsMpaaReasonEnum = "n"
	UploadVideoRequestBodyRatingsMpaaReasonEnumSl UploadVideoRequestBodyRatingsMpaaReasonEnum = "sl"
	UploadVideoRequestBodyRatingsMpaaReasonEnumSs UploadVideoRequestBodyRatingsMpaaReasonEnum = "ss"
	UploadVideoRequestBodyRatingsMpaaReasonEnumV  UploadVideoRequestBodyRatingsMpaaReasonEnum = "v"
)

func (e *UploadVideoRequestBodyRatingsMpaaReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "at":
		fallthrough
	case "bn":
		fallthrough
	case "n":
		fallthrough
	case "sl":
		fallthrough
	case "ss":
		fallthrough
	case "v":
		*e = UploadVideoRequestBodyRatingsMpaaReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoRequestBodyRatingsMpaaReasonEnum: %s", s)
	}
}

type UploadVideoRequestBodyRatingsMpaa struct {
	// The reason for the video's MPAA rating.
	//
	// Option descriptions:
	//  * `at` - Adult themes
	//  * `bn` - Brief nudity
	//  * `n` - Nudity
	//  * `sl` - Strong language
	//  * `ss` - Sexual situations
	//  * `v` - Violence
	//
	Reason *UploadVideoRequestBodyRatingsMpaaReasonEnum `json:"reason,omitempty"`
}

// UploadVideoRequestBodyRatingsTvReasonEnum - The reason for the video's TV rating.
//
// Option descriptions:
//   - `d` - Suggestive dialogue
//   - `fv` - Fantasy violence
//   - `l` - Language
//   - `ss` - Sexual situations
//   - `v` - Violence
type UploadVideoRequestBodyRatingsTvReasonEnum string

const (
	UploadVideoRequestBodyRatingsTvReasonEnumD  UploadVideoRequestBodyRatingsTvReasonEnum = "d"
	UploadVideoRequestBodyRatingsTvReasonEnumFv UploadVideoRequestBodyRatingsTvReasonEnum = "fv"
	UploadVideoRequestBodyRatingsTvReasonEnumL  UploadVideoRequestBodyRatingsTvReasonEnum = "l"
	UploadVideoRequestBodyRatingsTvReasonEnumSs UploadVideoRequestBodyRatingsTvReasonEnum = "ss"
	UploadVideoRequestBodyRatingsTvReasonEnumV  UploadVideoRequestBodyRatingsTvReasonEnum = "v"
)

func (e *UploadVideoRequestBodyRatingsTvReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "d":
		fallthrough
	case "fv":
		fallthrough
	case "l":
		fallthrough
	case "ss":
		fallthrough
	case "v":
		*e = UploadVideoRequestBodyRatingsTvReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoRequestBodyRatingsTvReasonEnum: %s", s)
	}
}

type UploadVideoRequestBodyRatingsTv struct {
	// The reason for the video's TV rating.
	//
	// Option descriptions:
	//  * `d` - Suggestive dialogue
	//  * `fv` - Fantasy violence
	//  * `l` - Language
	//  * `ss` - Sexual situations
	//  * `v` - Violence
	//
	Reason *UploadVideoRequestBodyRatingsTvReasonEnum `json:"reason,omitempty"`
}

type UploadVideoRequestBodyRatings struct {
	Mpaa *UploadVideoRequestBodyRatingsMpaa `json:"mpaa,omitempty"`
	Tv   *UploadVideoRequestBodyRatingsTv   `json:"tv,omitempty"`
}

type UploadVideoRequestBodyReviewPage struct {
	// Enable or disable video review.
	Active *bool `json:"active,omitempty"`
}

type UploadVideoRequestBodySpatialDirectorTimeline struct {
	// The timeline pitch. This value must be between -90 and 90.
	Pitch float64 `json:"pitch"`
	// The timeline roll.
	Roll *float64 `json:"roll,omitempty"`
	// The 360 director timeline time code.
	TimeCode float64 `json:"time_code"`
	// The timeline yaw. This value must be between 0 and 360.
	Yaw float64 `json:"yaw"`
}

// UploadVideoRequestBodySpatialProjectionEnum - The 360 spatial projection.
type UploadVideoRequestBodySpatialProjectionEnum string

const (
	UploadVideoRequestBodySpatialProjectionEnumCubical         UploadVideoRequestBodySpatialProjectionEnum = "cubical"
	UploadVideoRequestBodySpatialProjectionEnumCylindrical     UploadVideoRequestBodySpatialProjectionEnum = "cylindrical"
	UploadVideoRequestBodySpatialProjectionEnumDome            UploadVideoRequestBodySpatialProjectionEnum = "dome"
	UploadVideoRequestBodySpatialProjectionEnumEquirectangular UploadVideoRequestBodySpatialProjectionEnum = "equirectangular"
	UploadVideoRequestBodySpatialProjectionEnumPyramid         UploadVideoRequestBodySpatialProjectionEnum = "pyramid"
)

func (e *UploadVideoRequestBodySpatialProjectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cubical":
		fallthrough
	case "cylindrical":
		fallthrough
	case "dome":
		fallthrough
	case "equirectangular":
		fallthrough
	case "pyramid":
		*e = UploadVideoRequestBodySpatialProjectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoRequestBodySpatialProjectionEnum: %s", s)
	}
}

// UploadVideoRequestBodySpatialStereoFormatEnum - The 360 spatial stereo format.
type UploadVideoRequestBodySpatialStereoFormatEnum string

const (
	UploadVideoRequestBodySpatialStereoFormatEnumLeftRight UploadVideoRequestBodySpatialStereoFormatEnum = "left-right"
	UploadVideoRequestBodySpatialStereoFormatEnumMono      UploadVideoRequestBodySpatialStereoFormatEnum = "mono"
	UploadVideoRequestBodySpatialStereoFormatEnumTopBottom UploadVideoRequestBodySpatialStereoFormatEnum = "top-bottom"
)

func (e *UploadVideoRequestBodySpatialStereoFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "left-right":
		fallthrough
	case "mono":
		fallthrough
	case "top-bottom":
		*e = UploadVideoRequestBodySpatialStereoFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoRequestBodySpatialStereoFormatEnum: %s", s)
	}
}

type UploadVideoRequestBodySpatial struct {
	// The 360 director timeline.
	DirectorTimeline []UploadVideoRequestBodySpatialDirectorTimeline `json:"director_timeline,omitempty"`
	// The 360 field of view: default 50, minimum 30, maximum 90.
	FieldOfView *float64 `json:"field_of_view,omitempty"`
	// The 360 spatial projection.
	Projection *UploadVideoRequestBodySpatialProjectionEnum `json:"projection,omitempty"`
	// The 360 spatial stereo format.
	StereoFormat *UploadVideoRequestBodySpatialStereoFormatEnum `json:"stereo_format,omitempty"`
}

// UploadVideoRequestBodyUploadApproachEnum - The upload approach.
type UploadVideoRequestBodyUploadApproachEnum string

const (
	UploadVideoRequestBodyUploadApproachEnumPost      UploadVideoRequestBodyUploadApproachEnum = "post"
	UploadVideoRequestBodyUploadApproachEnumPull      UploadVideoRequestBodyUploadApproachEnum = "pull"
	UploadVideoRequestBodyUploadApproachEnumStreaming UploadVideoRequestBodyUploadApproachEnum = "streaming"
	UploadVideoRequestBodyUploadApproachEnumTus       UploadVideoRequestBodyUploadApproachEnum = "tus"
)

func (e *UploadVideoRequestBodyUploadApproachEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "post":
		fallthrough
	case "pull":
		fallthrough
	case "streaming":
		fallthrough
	case "tus":
		*e = UploadVideoRequestBodyUploadApproachEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoRequestBodyUploadApproachEnum: %s", s)
	}
}

type UploadVideoRequestBodyUpload struct {
	// The upload approach.
	Approach UploadVideoRequestBodyUploadApproachEnum `json:"approach"`
	// The public URL at which the video is hosted. The URL must be valid for at least 24 hours. Use this parameter when `approach` is `pull`.
	Link *string `json:"link,omitempty"`
	// The app's redirect URL. Use this parameter when `approach` is `post`.
	RedirectURL *string `json:"redirect_url,omitempty"`
	// The size in bytes of the video to upload.
	Size *string `json:"size,omitempty"`
}

type UploadVideoRequestBody struct {
	// A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint.
	ContentRating []string `json:"content_rating,omitempty"`
	// The description of the video.
	Description *string                      `json:"description,omitempty"`
	Embed       *UploadVideoRequestBodyEmbed `json:"embed,omitempty"`
	// The Creative Commons license.
	License *UploadVideoRequestBodyLicenseEnum `json:"license,omitempty"`
	// The video's default language. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.
	Locale *string `json:"locale,omitempty"`
	// The title of the video.
	Name *string `json:"name,omitempty"`
	// The password. When you set `privacy.view` to `password`, you must provide the password as an additional parameter.
	Password   *string                           `json:"password,omitempty"`
	Privacy    *UploadVideoRequestBodyPrivacy    `json:"privacy,omitempty"`
	Ratings    *UploadVideoRequestBodyRatings    `json:"ratings,omitempty"`
	ReviewPage *UploadVideoRequestBodyReviewPage `json:"review_page,omitempty"`
	Spatial    *UploadVideoRequestBodySpatial    `json:"spatial,omitempty"`
	Upload     UploadVideoRequestBodyUpload      `json:"upload"`
}

type UploadVideoRequest struct {
	PathParams UploadVideoPathParams
	Request    UploadVideoRequestBody `request:"mediaType=application/vnd.vimeo.video+json"`
}

type UploadVideoResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// * Error code 2205: The body of the request isn't formatted properly.
	// * Error code 2204: The request contains invalid parameters.
	// * Error code 2204: The request contains invalid body parameters.
	// * Error code 2230: The upload type is invalid.
	// * Error code 3116: If a `type` payload parameter was supplied instead of `upload.approach`.
	Error *shared.Error
	// The upload procedure has begun.
	Video *shared.Video
}
