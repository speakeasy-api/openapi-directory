"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetMapFormatEnum(str, Enum):
    r"""Image format to be returned"""
    IMAGE_JPEG = 'image/jpeg'
    IMAGE_PNG = 'image/png'

class GetMapLayersEnum(str, Enum):
    r"""Map layers requested Currently only the basic layer is available"""
    BASIC = 'basic'

class GetMapRequestEnum(str, Enum):
    r"""Request type"""
    GET_MAP = 'GetMap'

class GetMapServiceEnum(str, Enum):
    r"""Service type"""
    WMS = 'WMS'

class GetMapSrsEnum(str, Enum):
    r"""Projection used in describing the <b>bbox</b> EPSG:3857 is
    recommended, particularly at higher zoom levels. (Note that
    EPSG:3857 is functionally equivalent to EPSG:900913/EPSG:3785)
    """
    EPSG_3857 = 'EPSG:3857'
    EPSG_4326 = 'EPSG:4326'

class GetMapStylesEnum(str, Enum):
    r"""Map styles to be returned. Currently, no styles are available. This
    parameter is present for forward compatibility; it must be used and
    left blank.
    """
    UNKNOWN = ''

class GetMapVersionEnum(str, Enum):
    r"""WMS service version"""
    ONE_1_1 = '1.1.1'

class GetMapVersionNumberEnum(str, Enum):
    r"""Version of the service to call. The current version is 1"""
    ONE = '1'


@dataclasses.dataclass
class GetMapRequest:
    
    bbox: str = dataclasses.field(metadata={'query_param': { 'field_name': 'bbox', 'style': 'form', 'explode': True }})
    r"""Bounding box in the projection stated in <b>srs</b>
    (minLon,minLat,maxLon,maxLat)
    """  
    format: GetMapFormatEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'format', 'style': 'form', 'explode': True }})
    r"""Image format to be returned"""  
    height: int = dataclasses.field(metadata={'query_param': { 'field_name': 'height', 'style': 'form', 'explode': True }})
    r"""Height of the resulting image, in pixels Maximum value is 2048"""  
    layers: GetMapLayersEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'layers', 'style': 'form', 'explode': True }})
    r"""Map layers requested Currently only the basic layer is available"""  
    request: GetMapRequestEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'request', 'style': 'form', 'explode': True }})
    r"""Request type"""  
    srs: GetMapSrsEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'srs', 'style': 'form', 'explode': True }})
    r"""Projection used in describing the <b>bbox</b> EPSG:3857 is
    recommended, particularly at higher zoom levels. (Note that
    EPSG:3857 is functionally equivalent to EPSG:900913/EPSG:3785)
    """  
    version: GetMapVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'version', 'style': 'form', 'explode': True }})
    r"""WMS service version"""  
    version_number: GetMapVersionNumberEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'versionNumber', 'style': 'simple', 'explode': False }})
    r"""Version of the service to call. The current version is 1"""  
    width: int = dataclasses.field(metadata={'query_param': { 'field_name': 'width', 'style': 'form', 'explode': True }})
    r"""Width of the resulting image, in pixels Maximum value is 2048"""  
    service: Optional[GetMapServiceEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'service', 'style': 'form', 'explode': True }})
    r"""Service type"""  
    styles: Optional[GetMapStylesEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'styles', 'style': 'form', 'explode': True }})
    r"""Map styles to be returned. Currently, no styles are available. This
    parameter is present for forward compatibility; it must be used and
    left blank.
    """  
    

@dataclasses.dataclass
class GetMapResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    