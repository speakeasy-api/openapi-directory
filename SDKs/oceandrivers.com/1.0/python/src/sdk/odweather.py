"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class ODWeather:
    r"""ODWeather API service"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def compare_station(self, request: operations.CompareStationRequest) -> operations.CompareStationResponse:
        r"""Get forecast and realtime information for known points<br/>None"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompareStationRequest, base_url, '/v1.0/compareStation/{stationName}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompareStationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_aemet_station(self, request: operations.GetAemetStationRequest) -> operations.GetAemetStationResponse:
        r"""Get data from the aemet stations<br/>None"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAemetStationRequest, base_url, '/v1.0/getAemetStation/{stationName}/{period}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAemetStationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_easywind(self, request: operations.GetEasywindRequest) -> operations.GetEasywindResponse:
        r"""Get data from the easywind weather stations<br/>None"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEasywindRequest, base_url, '/v1.0/getEasyWind/{easywindId}/', request)
        
        query_params = utils.get_query_params(operations.GetEasywindRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEasywindResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_event_stations(self, request: operations.GetEventStationsRequest) -> operations.GetEventStationsResponse:
        r"""Get stations in an event<br/>None"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEventStationsRequest, base_url, '/v1.0/getEventStations/{eventId}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEventStationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_forecast_points(self, request: operations.GetForecastPointsRequest) -> operations.GetForecastPointsResponse:
        r"""Get forecast points of a yatchclub<br/>None"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetForecastPointsRequest, base_url, '/v1.0/getForecastPoints/{yatchclubid}/language/{language}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetForecastPointsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_forecast_time_series(self, request: operations.GetForecastTimeSeriesRequest) -> operations.GetForecastTimeSeriesResponse:
        r"""Get timeseries forecast information<br/>None"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetForecastTimeSeriesRequest, base_url, '/v1.0/getForecastTimeSeries/{latitude}/{longitude}/', request)
        
        query_params = utils.get_query_params(operations.GetForecastTimeSeriesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetForecastTimeSeriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_forecast_time_series_wrf(self, request: operations.GetForecastTimeSeriesWrfRequest) -> operations.GetForecastTimeSeriesWrfResponse:
        r"""Get timeseries forecast information<br/>None"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetForecastTimeSeriesWrfRequest, base_url, '/v1.0/getForecastTimeSeriesWrf/{latitude}/{longitude}/', request)
        
        query_params = utils.get_query_params(operations.GetForecastTimeSeriesWrfRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetForecastTimeSeriesWrfResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_socib_weather_station(self, request: operations.GetSocibWeatherStationRequest) -> operations.GetSocibWeatherStationResponse:
        r"""Get data from the socib bahia de palma buoy<br/>None"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSocibWeatherStationRequest, base_url, '/v1.0/getSocibWeatherStation/{stationName}/{period}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSocibWeatherStationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_weather_display(self, request: operations.GetWeatherDisplayRequest) -> operations.GetWeatherDisplayResponse:
        r"""Get data from the weather display software<br/>None"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWeatherDisplayRequest, base_url, '/v1.0/getWeatherDisplay/{stationName}/', request)
        
        query_params = utils.get_query_params(operations.GetWeatherDisplayRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWeatherDisplayResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_web_cams(self) -> operations.GetWebCamsResponse:
        r"""Get forecast and realtime information for known points<br/>None"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1.0/getWebCams/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWebCamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    