"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudvisionv1p1beta1boundingpoly as shared_googlecloudvisionv1p1beta1boundingpoly
from ..shared import googlecloudvisionv1p1beta1paragraph as shared_googlecloudvisionv1p1beta1paragraph
from ..shared import googlecloudvisionv1p1beta1textannotationtextproperty as shared_googlecloudvisionv1p1beta1textannotationtextproperty
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudVisionV1p1beta1BlockBlockTypeEnum(str, Enum):
    r"""Detected block type (text, image etc) for this block."""
    UNKNOWN = 'UNKNOWN'
    TEXT = 'TEXT'
    TABLE = 'TABLE'
    PICTURE = 'PICTURE'
    RULER = 'RULER'
    BARCODE = 'BARCODE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudVisionV1p1beta1Block:
    r"""Logical element on the page."""
    
    block_type: Optional[GoogleCloudVisionV1p1beta1BlockBlockTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockType'), 'exclude': lambda f: f is None }})
    r"""Detected block type (text, image etc) for this block."""  
    bounding_box: Optional[shared_googlecloudvisionv1p1beta1boundingpoly.GoogleCloudVisionV1p1beta1BoundingPoly] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('boundingBox'), 'exclude': lambda f: f is None }})
    r"""A bounding polygon for the detected image annotation."""  
    confidence: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidence'), 'exclude': lambda f: f is None }})
    r"""Confidence of the OCR results on the block. Range [0, 1]."""  
    paragraphs: Optional[list[shared_googlecloudvisionv1p1beta1paragraph.GoogleCloudVisionV1p1beta1Paragraph]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paragraphs'), 'exclude': lambda f: f is None }})
    r"""List of paragraphs in this block (if this blocks is of type text)."""  
    property: Optional[shared_googlecloudvisionv1p1beta1textannotationtextproperty.GoogleCloudVisionV1p1beta1TextAnnotationTextProperty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('property'), 'exclude': lambda f: f is None }})
    r"""Additional information detected on the structural component."""  
    