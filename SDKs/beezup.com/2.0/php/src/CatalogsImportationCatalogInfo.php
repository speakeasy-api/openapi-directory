<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CatalogsImportationCatalogInfo 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Configure catalog column
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationConfigureCatalogColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationConfigureCatalogColumnResponse
     */
	public function importationConfigureCatalogColumn(
        \OpenAPI\OpenAPI\Models\Operations\ImportationConfigureCatalogColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationConfigureCatalogColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}', \OpenAPI\OpenAPI\Models\Operations\ImportationConfigureCatalogColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "configureCatalogColumnCatalogRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationConfigureCatalogColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Custom Column
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationDeleteCustomColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationDeleteCustomColumnResponse
     */
	public function importationDeleteCustomColumn(
        \OpenAPI\OpenAPI\Models\Operations\ImportationDeleteCustomColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationDeleteCustomColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}', \OpenAPI\OpenAPI\Models\Operations\ImportationDeleteCustomColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationDeleteCustomColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the encrypted custom column expression in this importation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationGetCustomColumnExpressionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationGetCustomColumnExpressionResponse
     */
	public function importationGetCustomColumnExpression(
        \OpenAPI\OpenAPI\Models\Operations\ImportationGetCustomColumnExpressionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationGetCustomColumnExpressionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression', \OpenAPI\OpenAPI\Models\Operations\ImportationGetCustomColumnExpressionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationGetCustomColumnExpressionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->importationGetCustomColumnExpression200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get custom columns currently place in this importation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationGetCustomColumnsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationGetCustomColumnsResponse
     */
	public function importationGetCustomColumns(
        \OpenAPI\OpenAPI\Models\Operations\ImportationGetCustomColumnsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationGetCustomColumnsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns', \OpenAPI\OpenAPI\Models\Operations\ImportationGetCustomColumnsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationGetCustomColumnsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importationCustomColumnList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportationCustomColumnList', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get detected catalog columns during this importation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationGetDetectedCatalogColumnsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationGetDetectedCatalogColumnsResponse
     */
	public function importationGetDetectedCatalogColumns(
        \OpenAPI\OpenAPI\Models\Operations\ImportationGetDetectedCatalogColumnsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationGetDetectedCatalogColumnsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns', \OpenAPI\OpenAPI\Models\Operations\ImportationGetDetectedCatalogColumnsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationGetDetectedCatalogColumnsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->detectedCatalogColumnList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DetectedCatalogColumnList', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the product sample related to this importation with all columns (catalog and custom)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductSampleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductSampleResponse
     */
	public function importationGetProductSample(
        \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductSampleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductSampleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}', \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductSampleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductSampleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productSample = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProductSample', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get product sample custom column value related to this importation.
     * 
     * /!\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductSampleCustomColumnValueRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductSampleCustomColumnValueResponse
     */
	public function importationGetProductSampleCustomColumnValue(
        \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductSampleCustomColumnValueRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductSampleCustomColumnValueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}', \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductSampleCustomColumnValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductSampleCustomColumnValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->importationGetProductSampleCustomColumnValue200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Ignore Column
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationIgnoreColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationIgnoreColumnResponse
     */
	public function importationIgnoreColumn(
        \OpenAPI\OpenAPI\Models\Operations\ImportationIgnoreColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationIgnoreColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore', \OpenAPI\OpenAPI\Models\Operations\ImportationIgnoreColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationIgnoreColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Map catalog column to a BeezUP column
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationMapCatalogColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationMapCatalogColumnResponse
     */
	public function importationMapCatalogColumn(
        \OpenAPI\OpenAPI\Models\Operations\ImportationMapCatalogColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationMapCatalogColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map', \OpenAPI\OpenAPI\Models\Operations\ImportationMapCatalogColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "mapBeezUPColumnRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationMapCatalogColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Map custom column to a BeezUP column
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationMapCustomColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationMapCustomColumnResponse
     */
	public function importationMapCustomColumn(
        \OpenAPI\OpenAPI\Models\Operations\ImportationMapCustomColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationMapCustomColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map', \OpenAPI\OpenAPI\Models\Operations\ImportationMapCustomColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "mapBeezUPColumnRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationMapCustomColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reattend Column
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationReattendColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationReattendColumnResponse
     */
	public function importationReattendColumn(
        \OpenAPI\OpenAPI\Models\Operations\ImportationReattendColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationReattendColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend', \OpenAPI\OpenAPI\Models\Operations\ImportationReattendColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationReattendColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create or replace a custom column
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationSaveCustomColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationSaveCustomColumnResponse
     */
	public function importationSaveCustomColumn(
        \OpenAPI\OpenAPI\Models\Operations\ImportationSaveCustomColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationSaveCustomColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}', \OpenAPI\OpenAPI\Models\Operations\ImportationSaveCustomColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "changeCustomColumnRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationSaveCustomColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unmap catalog column
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationUnmapCatalogColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationUnmapCatalogColumnResponse
     */
	public function importationUnmapCatalogColumn(
        \OpenAPI\OpenAPI\Models\Operations\ImportationUnmapCatalogColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationUnmapCatalogColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap', \OpenAPI\OpenAPI\Models\Operations\ImportationUnmapCatalogColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationUnmapCatalogColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unmap custom column
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationUnmapCustomColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationUnmapCustomColumnResponse
     */
	public function importationUnmapCustomColumn(
        \OpenAPI\OpenAPI\Models\Operations\ImportationUnmapCustomColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationUnmapCustomColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap', \OpenAPI\OpenAPI\Models\Operations\ImportationUnmapCustomColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationUnmapCustomColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
}