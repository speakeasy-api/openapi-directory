"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AnalyticsTracking:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_store_tracked_clicks(self, request: operations.GetStoreTrackedClicksRequest) -> operations.GetStoreTrackedClicksResponse:
        r"""Get the latest tracked clicks"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetStoreTrackedClicksRequest, base_url, '/v2/user/analytics/{storeId}/tracking/clicks', request)
        
        query_params = utils.get_query_params(operations.GetStoreTrackedClicksRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStoreTrackedClicksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrackedClicks])
                res.tracked_clicks = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def get_store_tracked_external_orders(self, request: operations.GetStoreTrackedExternalOrdersRequest) -> operations.GetStoreTrackedExternalOrdersResponse:
        r"""Get the latest tracked external orders"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetStoreTrackedExternalOrdersRequest, base_url, '/v2/user/analytics/{storeId}/tracking/externalorders', request)
        
        query_params = utils.get_query_params(operations.GetStoreTrackedExternalOrdersRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStoreTrackedExternalOrdersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrackedExternalOrders])
                res.tracked_external_orders = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def get_store_tracked_orders(self, request: operations.GetStoreTrackedOrdersRequest) -> operations.GetStoreTrackedOrdersResponse:
        r"""Get the latest tracked orders"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetStoreTrackedOrdersRequest, base_url, '/v2/user/analytics/{storeId}/tracking/orders', request)
        
        query_params = utils.get_query_params(operations.GetStoreTrackedOrdersRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStoreTrackedOrdersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrackedOrders])
                res.tracked_orders = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def get_store_tracking_status(self, request: operations.GetStoreTrackingStatusRequest) -> operations.GetStoreTrackingStatusResponse:
        r"""Get the synchronization status of clicks and orders of a store
        Clicks and orders are eventually consistent. \
        This operation gets the current state of projections for a store.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetStoreTrackingStatusRequest, base_url, '/v2/user/analytics/{storeId}/tracking/status', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStoreTrackingStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StoreTrackingStatus])
                res.store_tracking_status = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def get_tracking_status(self) -> operations.GetTrackingStatusResponse:
        r"""Get the global synchronization status of clicks and orders
        Clicks and orders are eventually consistent. \
        This operation gets the current global state of projections.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/user/analytics/tracking/status'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTrackingStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrackingStatus])
                res.tracking_status = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    