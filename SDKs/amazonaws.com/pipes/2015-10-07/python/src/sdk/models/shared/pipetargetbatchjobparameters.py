"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import batcharrayproperties as shared_batcharrayproperties
from ..shared import batchcontaineroverrides as shared_batchcontaineroverrides
from ..shared import batchjobdependency as shared_batchjobdependency
from ..shared import batchretrystrategy as shared_batchretrystrategy
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PipeTargetBatchJobParameters:
    r"""The parameters for using an Batch job as a target."""
    
    job_definition: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobDefinition') }})  
    job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobName') }})  
    array_properties: Optional[shared_batcharrayproperties.BatchArrayProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArrayProperties'), 'exclude': lambda f: f is None }})  
    container_overrides: Optional[shared_batchcontaineroverrides.BatchContainerOverrides] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContainerOverrides'), 'exclude': lambda f: f is None }})  
    depends_on: Optional[list[shared_batchjobdependency.BatchJobDependency]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DependsOn'), 'exclude': lambda f: f is None }})  
    parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Parameters'), 'exclude': lambda f: f is None }})  
    retry_strategy: Optional[shared_batchretrystrategy.BatchRetryStrategy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RetryStrategy'), 'exclude': lambda f: f is None }})  
    