// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleCloudConnectorsV1SslConfigClientCertTypeEnum - Type of Client Cert (PEM/JKS/.. etc.)
type GoogleCloudConnectorsV1SslConfigClientCertTypeEnum string

const (
	GoogleCloudConnectorsV1SslConfigClientCertTypeEnumCertTypeUnspecified GoogleCloudConnectorsV1SslConfigClientCertTypeEnum = "CERT_TYPE_UNSPECIFIED"
	GoogleCloudConnectorsV1SslConfigClientCertTypeEnumPem                 GoogleCloudConnectorsV1SslConfigClientCertTypeEnum = "PEM"
)

func (e *GoogleCloudConnectorsV1SslConfigClientCertTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CERT_TYPE_UNSPECIFIED":
		fallthrough
	case "PEM":
		*e = GoogleCloudConnectorsV1SslConfigClientCertTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudConnectorsV1SslConfigClientCertTypeEnum: %s", s)
	}
}

// GoogleCloudConnectorsV1SslConfigServerCertTypeEnum - Type of Server Cert (PEM/JKS/.. etc.)
type GoogleCloudConnectorsV1SslConfigServerCertTypeEnum string

const (
	GoogleCloudConnectorsV1SslConfigServerCertTypeEnumCertTypeUnspecified GoogleCloudConnectorsV1SslConfigServerCertTypeEnum = "CERT_TYPE_UNSPECIFIED"
	GoogleCloudConnectorsV1SslConfigServerCertTypeEnumPem                 GoogleCloudConnectorsV1SslConfigServerCertTypeEnum = "PEM"
)

func (e *GoogleCloudConnectorsV1SslConfigServerCertTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CERT_TYPE_UNSPECIFIED":
		fallthrough
	case "PEM":
		*e = GoogleCloudConnectorsV1SslConfigServerCertTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudConnectorsV1SslConfigServerCertTypeEnum: %s", s)
	}
}

// GoogleCloudConnectorsV1SslConfigTrustModelEnum - Trust Model of the SSL connection
type GoogleCloudConnectorsV1SslConfigTrustModelEnum string

const (
	GoogleCloudConnectorsV1SslConfigTrustModelEnumPublic   GoogleCloudConnectorsV1SslConfigTrustModelEnum = "PUBLIC"
	GoogleCloudConnectorsV1SslConfigTrustModelEnumPrivate  GoogleCloudConnectorsV1SslConfigTrustModelEnum = "PRIVATE"
	GoogleCloudConnectorsV1SslConfigTrustModelEnumInsecure GoogleCloudConnectorsV1SslConfigTrustModelEnum = "INSECURE"
)

func (e *GoogleCloudConnectorsV1SslConfigTrustModelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PUBLIC":
		fallthrough
	case "PRIVATE":
		fallthrough
	case "INSECURE":
		*e = GoogleCloudConnectorsV1SslConfigTrustModelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudConnectorsV1SslConfigTrustModelEnum: %s", s)
	}
}

// GoogleCloudConnectorsV1SslConfigTypeEnum - Controls the ssl type for the given connector version.
type GoogleCloudConnectorsV1SslConfigTypeEnum string

const (
	GoogleCloudConnectorsV1SslConfigTypeEnumSslTypeUnspecified GoogleCloudConnectorsV1SslConfigTypeEnum = "SSL_TYPE_UNSPECIFIED"
	GoogleCloudConnectorsV1SslConfigTypeEnumTLS                GoogleCloudConnectorsV1SslConfigTypeEnum = "TLS"
	GoogleCloudConnectorsV1SslConfigTypeEnumMtls               GoogleCloudConnectorsV1SslConfigTypeEnum = "MTLS"
)

func (e *GoogleCloudConnectorsV1SslConfigTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SSL_TYPE_UNSPECIFIED":
		fallthrough
	case "TLS":
		fallthrough
	case "MTLS":
		*e = GoogleCloudConnectorsV1SslConfigTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudConnectorsV1SslConfigTypeEnum: %s", s)
	}
}

// GoogleCloudConnectorsV1SslConfig - SSL Configuration of a connection
type GoogleCloudConnectorsV1SslConfig struct {
	// Additional SSL related field values
	AdditionalVariables []GoogleCloudConnectorsV1ConfigVariable `json:"additionalVariables,omitempty"`
	// Type of Client Cert (PEM/JKS/.. etc.)
	ClientCertType *GoogleCloudConnectorsV1SslConfigClientCertTypeEnum `json:"clientCertType,omitempty"`
	// Secret provides a reference to entries in Secret Manager.
	ClientCertificate *GoogleCloudConnectorsV1Secret `json:"clientCertificate,omitempty"`
	// Secret provides a reference to entries in Secret Manager.
	ClientPrivateKey *GoogleCloudConnectorsV1Secret `json:"clientPrivateKey,omitempty"`
	// Secret provides a reference to entries in Secret Manager.
	ClientPrivateKeyPass *GoogleCloudConnectorsV1Secret `json:"clientPrivateKeyPass,omitempty"`
	// Secret provides a reference to entries in Secret Manager.
	PrivateServerCertificate *GoogleCloudConnectorsV1Secret `json:"privateServerCertificate,omitempty"`
	// Type of Server Cert (PEM/JKS/.. etc.)
	ServerCertType *GoogleCloudConnectorsV1SslConfigServerCertTypeEnum `json:"serverCertType,omitempty"`
	// Trust Model of the SSL connection
	TrustModel *GoogleCloudConnectorsV1SslConfigTrustModelEnum `json:"trustModel,omitempty"`
	// Controls the ssl type for the given connector version.
	Type *GoogleCloudConnectorsV1SslConfigTypeEnum `json:"type,omitempty"`
	// Bool for enabling SSL
	UseSsl *bool `json:"useSsl,omitempty"`
}
