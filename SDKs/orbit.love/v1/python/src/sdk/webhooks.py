"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Webhooks:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_workspace_slug_webhooks_id_(self, request: operations.DeleteWorkspaceSlugWebhooksIDRequest, security: operations.DeleteWorkspaceSlugWebhooksIDSecurity) -> operations.DeleteWorkspaceSlugWebhooksIDResponse:
        r"""Delete a webhook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteWorkspaceSlugWebhooksIDRequest, base_url, '/{workspace_slug}/webhooks/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWorkspaceSlugWebhooksIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_workspace_slug_webhooks(self, request: operations.GetWorkspaceSlugWebhooksRequest, security: operations.GetWorkspaceSlugWebhooksSecurity) -> operations.GetWorkspaceSlugWebhooksResponse:
        r"""List webhooks in a workspace"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceSlugWebhooksRequest, base_url, '/{workspace_slug}/webhooks', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceSlugWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_workspace_slug_webhooks_id_(self, request: operations.GetWorkspaceSlugWebhooksIDRequest, security: operations.GetWorkspaceSlugWebhooksIDSecurity) -> operations.GetWorkspaceSlugWebhooksIDResponse:
        r"""Get a webhook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceSlugWebhooksIDRequest, base_url, '/{workspace_slug}/webhooks/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceSlugWebhooksIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_workspace_slug_webhooks(self, request: operations.PostWorkspaceSlugWebhooksRequest, security: operations.PostWorkspaceSlugWebhooksSecurity) -> operations.PostWorkspaceSlugWebhooksResponse:
        r"""Create a webhook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostWorkspaceSlugWebhooksRequest, base_url, '/{workspace_slug}/webhooks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "webhook_subscription", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostWorkspaceSlugWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_workspace_slug_webhooks_id_(self, request: operations.PutWorkspaceSlugWebhooksIDRequest, security: operations.PutWorkspaceSlugWebhooksIDSecurity) -> operations.PutWorkspaceSlugWebhooksIDResponse:
        r"""Update a webhook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutWorkspaceSlugWebhooksIDRequest, base_url, '/{workspace_slug}/webhooks/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "webhook_subscription", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutWorkspaceSlugWebhooksIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    