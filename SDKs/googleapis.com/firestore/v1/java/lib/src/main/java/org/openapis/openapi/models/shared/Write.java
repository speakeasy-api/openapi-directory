/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Write - A write on a document.
 */
public class Write {
    /**
     * A precondition on a document, used for conditional operations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentDocument")
    public Precondition currentDocument;
    public Write withCurrentDocument(Precondition currentDocument) {
        this.currentDocument = currentDocument;
        return this;
    }
    
    /**
     * A document name to delete. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delete")
    public String delete;
    public Write withDelete(String delete) {
        this.delete = delete;
        return this;
    }
    
    /**
     * A transformation of a document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transform")
    public DocumentTransform transform;
    public Write withTransform(DocumentTransform transform) {
        this.transform = transform;
        return this;
    }
    
    /**
     * A Firestore document. Must not exceed 1 MiB - 4 bytes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("update")
    public Document update;
    public Write withUpdate(Document update) {
        this.update = update;
        return this;
    }
    
    /**
     * A set of field paths on a document. Used to restrict a get or update operation on a document to a subset of its fields. This is different from standard field masks, as this is always scoped to a Document, and takes in account the dynamic nature of Value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateMask")
    public DocumentMask updateMask;
    public Write withUpdateMask(DocumentMask updateMask) {
        this.updateMask = updateMask;
        return this;
    }
    
    /**
     * The transforms to perform after update. This field can be set only when the operation is `update`. If present, this write is equivalent to performing `update` and `transform` to the same document atomically and in order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTransforms")
    public FieldTransform[] updateTransforms;
    public Write withUpdateTransforms(FieldTransform[] updateTransforms) {
        this.updateTransforms = updateTransforms;
        return this;
    }
    
}
