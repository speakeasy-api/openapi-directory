// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetIntersectionsNearOutputFormatOutputFormatEnum - Results format. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target="_blank">outputFormat</a>.
//
// Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS=4326)
type GetIntersectionsNearOutputFormatOutputFormatEnum string

const (
	GetIntersectionsNearOutputFormatOutputFormatEnumJSON    GetIntersectionsNearOutputFormatOutputFormatEnum = "json"
	GetIntersectionsNearOutputFormatOutputFormatEnumGeojson GetIntersectionsNearOutputFormatOutputFormatEnum = "geojson"
	GetIntersectionsNearOutputFormatOutputFormatEnumXhtml   GetIntersectionsNearOutputFormatOutputFormatEnum = "xhtml"
	GetIntersectionsNearOutputFormatOutputFormatEnumKml     GetIntersectionsNearOutputFormatOutputFormatEnum = "kml"
	GetIntersectionsNearOutputFormatOutputFormatEnumGml     GetIntersectionsNearOutputFormatOutputFormatEnum = "gml"
	GetIntersectionsNearOutputFormatOutputFormatEnumCsv     GetIntersectionsNearOutputFormatOutputFormatEnum = "csv"
	GetIntersectionsNearOutputFormatOutputFormatEnumShpz    GetIntersectionsNearOutputFormatOutputFormatEnum = "shpz"
)

func (e *GetIntersectionsNearOutputFormatOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "geojson":
		fallthrough
	case "xhtml":
		fallthrough
	case "kml":
		fallthrough
	case "gml":
		fallthrough
	case "csv":
		fallthrough
	case "shpz":
		*e = GetIntersectionsNearOutputFormatOutputFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIntersectionsNearOutputFormatOutputFormatEnum: %s", s)
	}
}

type GetIntersectionsNearOutputFormatPathParams struct {
	// Results format. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target="_blank">outputFormat</a>.
	//
	// Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS=4326)
	OutputFormat GetIntersectionsNearOutputFormatOutputFormatEnum `pathParam:"style=simple,explode=false,name=outputFormat"`
}

// GetIntersectionsNearOutputFormatOutputSrsEnum - The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
type GetIntersectionsNearOutputFormatOutputSrsEnum string

const (
	GetIntersectionsNearOutputFormatOutputSrsEnumFourThousandThreeHundredAndTwentySix  GetIntersectionsNearOutputFormatOutputSrsEnum = "4326"
	GetIntersectionsNearOutputFormatOutputSrsEnumFourThousandTwoHundredAndSixtyNine    GetIntersectionsNearOutputFormatOutputSrsEnum = "4269"
	GetIntersectionsNearOutputFormatOutputSrsEnumThreeThousandAndFive                  GetIntersectionsNearOutputFormatOutputSrsEnum = "3005"
	GetIntersectionsNearOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndSeven  GetIntersectionsNearOutputFormatOutputSrsEnum = "26907"
	GetIntersectionsNearOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndEight  GetIntersectionsNearOutputFormatOutputSrsEnum = "26908"
	GetIntersectionsNearOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndNine   GetIntersectionsNearOutputFormatOutputSrsEnum = "26909"
	GetIntersectionsNearOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndTen    GetIntersectionsNearOutputFormatOutputSrsEnum = "26910"
	GetIntersectionsNearOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndEleven GetIntersectionsNearOutputFormatOutputSrsEnum = "26911"
)

func (e *GetIntersectionsNearOutputFormatOutputSrsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4326":
		fallthrough
	case "4269":
		fallthrough
	case "3005":
		fallthrough
	case "26907":
		fallthrough
	case "26908":
		fallthrough
	case "26909":
		fallthrough
	case "26910":
		fallthrough
	case "26911":
		*e = GetIntersectionsNearOutputFormatOutputSrsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIntersectionsNearOutputFormatOutputSrsEnum: %s", s)
	}
}

type GetIntersectionsNearOutputFormatQueryParams struct {
	// The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4.
	MaxDegree *int64 `queryParam:"style=form,explode=true,name=maxDegree"`
	// The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited.
	MaxDistance *int64 `queryParam:"style=form,explode=true,name=maxDistance"`
	// The maximum number of search results to return.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1.
	MinDegree *int64 `queryParam:"style=form,explode=true,name=minDegree"`
	// The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
	OutputSRS GetIntersectionsNearOutputFormatOutputSrsEnum `queryParam:"style=form,explode=true,name=outputSRS"`
	// The point (x,y) from which the nearest site will be identified. The coordinates must be specified in the same SRS as given by the 'outputSRS' parameter.
	Point string `queryParam:"style=form,explode=true,name=point"`
}

type GetIntersectionsNearOutputFormatRequest struct {
	PathParams  GetIntersectionsNearOutputFormatPathParams
	QueryParams GetIntersectionsNearOutputFormatQueryParams
}

type GetIntersectionsNearOutputFormatResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
