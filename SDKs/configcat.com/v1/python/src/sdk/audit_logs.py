"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AuditLogs:
    r"""Access audit log entries."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_auditlogs(self, request: operations.GetAuditlogsRequest) -> operations.GetAuditlogsResponse:
        r"""List Audit log items for Product
        This endpoint returns the list of Audit log items for a given Product 
        and the result can be optionally filtered by Config and/or Environment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAuditlogsRequest, base_url, '/v1/products/{productId}/auditlogs', request)
        
        query_params = utils.get_query_params(operations.GetAuditlogsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAuditlogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AuditLogItemModel]])
                res.audit_log_item_models = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AuditLogItemModel]])
                res.audit_log_item_models = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    def get_deleted_settings(self, request: operations.GetDeletedSettingsRequest) -> operations.GetDeletedSettingsResponse:
        r"""List Deleted Settings
        This endpoint returns the list of Feature Flags and Settings that were deleted from the given Config.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeletedSettingsRequest, base_url, '/v1/configs/{configId}/deleted-settings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeletedSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SettingModelHaljson]])
                res.setting_model_haljsons = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SettingModel]])
                res.setting_models = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    def get_organization_auditlogs(self, request: operations.GetOrganizationAuditlogsRequest) -> operations.GetOrganizationAuditlogsResponse:
        r"""List Audit log items for Organization
        This endpoint returns the list of Audit log items for a given Organization 
        and the result can be optionally filtered by Product and/or Config and/or Environment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationAuditlogsRequest, base_url, '/v1/organizations/{organizationId}/auditlogs', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationAuditlogsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationAuditlogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AuditLogItemModel]])
                res.audit_log_item_models = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AuditLogItemModel]])
                res.audit_log_item_models = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    