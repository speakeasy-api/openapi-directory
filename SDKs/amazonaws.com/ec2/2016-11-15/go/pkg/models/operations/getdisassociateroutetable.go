// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDisassociateRouteTableActionEnum
type GETDisassociateRouteTableActionEnum string

const (
	GETDisassociateRouteTableActionEnumDisassociateRouteTable GETDisassociateRouteTableActionEnum = "DisassociateRouteTable"
)

func (e GETDisassociateRouteTableActionEnum) ToPointer() *GETDisassociateRouteTableActionEnum {
	return &e
}

func (e *GETDisassociateRouteTableActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DisassociateRouteTable":
		*e = GETDisassociateRouteTableActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDisassociateRouteTableActionEnum: %v", v)
	}
}

// GETDisassociateRouteTableVersionEnum
type GETDisassociateRouteTableVersionEnum string

const (
	GETDisassociateRouteTableVersionEnumTwoThousandAndSixteen1115 GETDisassociateRouteTableVersionEnum = "2016-11-15"
)

func (e GETDisassociateRouteTableVersionEnum) ToPointer() *GETDisassociateRouteTableVersionEnum {
	return &e
}

func (e *GETDisassociateRouteTableVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETDisassociateRouteTableVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDisassociateRouteTableVersionEnum: %v", v)
	}
}

type GETDisassociateRouteTableRequest struct {
	Action GETDisassociateRouteTableActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The association ID representing the current association between the route table and subnet or gateway.
	AssociationID string `queryParam:"style=form,explode=true,name=AssociationId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun            *bool                                `queryParam:"style=form,explode=true,name=DryRun"`
	Version           GETDisassociateRouteTableVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDisassociateRouteTableResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
