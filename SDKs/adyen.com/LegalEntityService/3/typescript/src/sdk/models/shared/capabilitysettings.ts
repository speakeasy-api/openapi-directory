/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Amount } from "./amount";
import { Expose, Transform, Type } from "class-transformer";

export enum CapabilitySettingsFundingSourceEnum {
  Credit = "credit",
  Debit = "debit",
  Prepaid = "prepaid",
}

/**
 * The period when the rule conditions apply.
 */
export enum CapabilitySettingsIntervalEnum {
  Daily = "daily",
  Monthly = "monthly",
  Weekly = "weekly",
}

export class CapabilitySettings extends SpeakeasyBase {
  /**
   * The maximum amount a card holder can spend per industry.
   */
  @SpeakeasyMetadata({ elemType: Amount })
  @Expose({ name: "amountPerIndustry" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Amount> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Amount);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  amountPerIndustry?: Record<string, Amount>;

  /**
   * The number of card holders who can use the card.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizedCardUsers" })
  authorizedCardUsers?: boolean;

  /**
   * The funding source of the card, for example **debit**.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fundingSource" })
  fundingSource?: CapabilitySettingsFundingSourceEnum[];

  /**
   * The period when the rule conditions apply.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interval" })
  interval?: CapabilitySettingsIntervalEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "maxAmount" })
  @Type(() => Amount)
  maxAmount?: Amount;
}
