"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlesecuritysafebrowsingv4threatmatch as shared_googlesecuritysafebrowsingv4threatmatch
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleSecuritySafebrowsingV4FindFullHashesResponse:
    r"""Successful response"""
    
    matches: Optional[list[shared_googlesecuritysafebrowsingv4threatmatch.GoogleSecuritySafebrowsingV4ThreatMatch]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matches'), 'exclude': lambda f: f is None }})
    r"""The full hashes that matched the requested prefixes."""  
    minimum_wait_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumWaitDuration'), 'exclude': lambda f: f is None }})
    r"""The minimum duration the client must wait before issuing any find hashes request. If this field is not set, clients can issue a request as soon as they want."""  
    negative_cache_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('negativeCacheDuration'), 'exclude': lambda f: f is None }})
    r"""For requested entities that did not match the threat list, how long to cache the response."""  
    