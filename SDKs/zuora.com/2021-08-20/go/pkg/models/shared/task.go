// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TaskActionTypeEnum - The type of the task.
type TaskActionTypeEnum string

const (
	TaskActionTypeEnumApproval                      TaskActionTypeEnum = "Approval"
	TaskActionTypeEnumAttachment                    TaskActionTypeEnum = "Attachment"
	TaskActionTypeEnumBillingBillRun                TaskActionTypeEnum = "Billing::BillRun"
	TaskActionTypeEnumBillingCurrencyConversion     TaskActionTypeEnum = "Billing::CurrencyConversion"
	TaskActionTypeEnumBillingCustomInvoice          TaskActionTypeEnum = "Billing::CustomInvoice"
	TaskActionTypeEnumCallout                       TaskActionTypeEnum = "Callout"
	TaskActionTypeEnumCancel                        TaskActionTypeEnum = "Cancel"
	TaskActionTypeEnumCreate                        TaskActionTypeEnum = "Create"
	TaskActionTypeEnumCustomObjectCreate            TaskActionTypeEnum = "CustomObject::Create"
	TaskActionTypeEnumCustomObjectDelete            TaskActionTypeEnum = "CustomObject::Delete"
	TaskActionTypeEnumCustomObjectQuery             TaskActionTypeEnum = "CustomObject::Query"
	TaskActionTypeEnumCustomObjectUpdate            TaskActionTypeEnum = "CustomObject::Update"
	TaskActionTypeEnumDataBillingPreviewRun         TaskActionTypeEnum = "Data::BillingPreviewRun"
	TaskActionTypeEnumDataLink                      TaskActionTypeEnum = "Data::Link"
	TaskActionTypeEnumDelay                         TaskActionTypeEnum = "Delay"
	TaskActionTypeEnumDelete                        TaskActionTypeEnum = "Delete"
	TaskActionTypeEnumDownloadSftp                  TaskActionTypeEnum = "Download::SFTP"
	TaskActionTypeEnumEmail                         TaskActionTypeEnum = "Email"
	TaskActionTypeEnumExport                        TaskActionTypeEnum = "Export"
	TaskActionTypeEnumFileCustomPdfCustomDocument   TaskActionTypeEnum = "File::CustomPDF::CustomDocument"
	TaskActionTypeEnumIf                            TaskActionTypeEnum = "If"
	TaskActionTypeEnumInvoiceGenerate               TaskActionTypeEnum = "InvoiceGenerate"
	TaskActionTypeEnumIterate                       TaskActionTypeEnum = "Iterate"
	TaskActionTypeEnumLogicCsvTranslator            TaskActionTypeEnum = "Logic::CSVTranslator"
	TaskActionTypeEnumLogicCase                     TaskActionTypeEnum = "Logic::Case"
	TaskActionTypeEnumLogicCustomCode               TaskActionTypeEnum = "Logic::CustomCode"
	TaskActionTypeEnumLogicJSONTransform            TaskActionTypeEnum = "Logic::JSONTransform"
	TaskActionTypeEnumLogicLambda                   TaskActionTypeEnum = "Logic::Lambda"
	TaskActionTypeEnumLogicResponseFormatter        TaskActionTypeEnum = "Logic::ResponseFormatter"
	TaskActionTypeEnumLogicXMLTransform             TaskActionTypeEnum = "Logic::XMLTransform"
	TaskActionTypeEnumNewProduct                    TaskActionTypeEnum = "NewProduct"
	TaskActionTypeEnumNotificationsGoogleCloudPrint TaskActionTypeEnum = "Notifications::GoogleCloudPrint"
	TaskActionTypeEnumNotificationsPhoneCall        TaskActionTypeEnum = "Notifications::PhoneCall"
	TaskActionTypeEnumNotificationsSms              TaskActionTypeEnum = "Notifications::SMS"
	TaskActionTypeEnumPaymentGatewayReconciliation  TaskActionTypeEnum = "Payment::GatewayReconciliation"
	TaskActionTypeEnumPaymentPaymentRun             TaskActionTypeEnum = "Payment::PaymentRun"
	TaskActionTypeEnumQuery                         TaskActionTypeEnum = "Query"
	TaskActionTypeEnumRemoveProduct                 TaskActionTypeEnum = "RemoveProduct"
	TaskActionTypeEnumReportingReportData           TaskActionTypeEnum = "Reporting::ReportData"
	TaskActionTypeEnumReportingRunReport            TaskActionTypeEnum = "Reporting::RunReport"
	TaskActionTypeEnumResume                        TaskActionTypeEnum = "Resume"
	TaskActionTypeEnumSuspend                       TaskActionTypeEnum = "Suspend"
	TaskActionTypeEnumUIPage                        TaskActionTypeEnum = "UI::Page"
	TaskActionTypeEnumUIStop                        TaskActionTypeEnum = "UI::Stop"
	TaskActionTypeEnumUpdate                        TaskActionTypeEnum = "Update"
	TaskActionTypeEnumUploadFtp                     TaskActionTypeEnum = "Upload::FTP"
	TaskActionTypeEnumUploadSftp                    TaskActionTypeEnum = "Upload::SFTP"
	TaskActionTypeEnumWriteOff                      TaskActionTypeEnum = "WriteOff"
)

func (e *TaskActionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Approval":
		fallthrough
	case "Attachment":
		fallthrough
	case "Billing::BillRun":
		fallthrough
	case "Billing::CurrencyConversion":
		fallthrough
	case "Billing::CustomInvoice":
		fallthrough
	case "Callout":
		fallthrough
	case "Cancel":
		fallthrough
	case "Create":
		fallthrough
	case "CustomObject::Create":
		fallthrough
	case "CustomObject::Delete":
		fallthrough
	case "CustomObject::Query":
		fallthrough
	case "CustomObject::Update":
		fallthrough
	case "Data::BillingPreviewRun":
		fallthrough
	case "Data::Link":
		fallthrough
	case "Delay":
		fallthrough
	case "Delete":
		fallthrough
	case "Download::SFTP":
		fallthrough
	case "Email":
		fallthrough
	case "Export":
		fallthrough
	case "File::CustomPDF::CustomDocument":
		fallthrough
	case "If":
		fallthrough
	case "InvoiceGenerate":
		fallthrough
	case "Iterate":
		fallthrough
	case "Logic::CSVTranslator":
		fallthrough
	case "Logic::Case":
		fallthrough
	case "Logic::CustomCode":
		fallthrough
	case "Logic::JSONTransform":
		fallthrough
	case "Logic::Lambda":
		fallthrough
	case "Logic::ResponseFormatter":
		fallthrough
	case "Logic::XMLTransform":
		fallthrough
	case "NewProduct":
		fallthrough
	case "Notifications::GoogleCloudPrint":
		fallthrough
	case "Notifications::PhoneCall":
		fallthrough
	case "Notifications::SMS":
		fallthrough
	case "Payment::GatewayReconciliation":
		fallthrough
	case "Payment::PaymentRun":
		fallthrough
	case "Query":
		fallthrough
	case "RemoveProduct":
		fallthrough
	case "Reporting::ReportData":
		fallthrough
	case "Reporting::RunReport":
		fallthrough
	case "Resume":
		fallthrough
	case "Suspend":
		fallthrough
	case "UI::Page":
		fallthrough
	case "UI::Stop":
		fallthrough
	case "Update":
		fallthrough
	case "Upload::FTP":
		fallthrough
	case "Upload::SFTP":
		fallthrough
	case "WriteOff":
		*e = TaskActionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TaskActionTypeEnum: %s", s)
	}
}

// TaskStatusEnum - If **Instance** is **true**, the status of the task instance.
type TaskStatusEnum string

const (
	TaskStatusEnumQueued     TaskStatusEnum = "Queued"
	TaskStatusEnumProcessing TaskStatusEnum = "Processing"
	TaskStatusEnumPending    TaskStatusEnum = "Pending"
	TaskStatusEnumSuccess    TaskStatusEnum = "Success"
	TaskStatusEnumStopped    TaskStatusEnum = "Stopped"
	TaskStatusEnumError      TaskStatusEnum = "Error"
)

func (e *TaskStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Queued":
		fallthrough
	case "Processing":
		fallthrough
	case "Pending":
		fallthrough
	case "Success":
		fallthrough
	case "Stopped":
		fallthrough
	case "Error":
		*e = TaskStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TaskStatusEnum: %s", s)
	}
}

// Task - A task.
type Task struct {
	// The type of the task.
	//
	ActionType *TaskActionTypeEnum `json:"action_type,omitempty"`
	// The type of API used.
	//
	CallType *string `json:"call_type,omitempty"`
	// the number of concurrent tasks that are allowed to run simultaneously
	ConcurrentLimit *int64 `json:"concurrent_limit,omitempty"`
	// The data payload for the task.
	//
	Data map[string]interface{} `json:"data,omitempty"`
	// If **Instance** is **true**, the end time of the task instance.
	//
	EndTime *string `json:"end_time,omitempty"`
	// If **Instance** is **true** and **status** is **Error**, the error reason of the task instance failure.
	//
	Error *string `json:"error,omitempty"`
	// If **Instance** is **true** and **status** is **Error**, the error class of the task instance failure.
	//
	ErrorClass *string `json:"error_class,omitempty"`
	// If **Instance** is **true** and **status** is **Error**, the error details of the task instance failure.
	//
	ErrorDetails *string `json:"error_details,omitempty"`
	// The unique ID of the task.
	//
	ID *int64 `json:"id,omitempty"`
	// Indicates whether this task belongs to an instance of a workflow.
	//
	Instance *bool `json:"instance,omitempty"`
	// The name of the task.
	//
	Name *string `json:"name,omitempty"`
	// The selected object for the task.
	//
	Object *string `json:"object,omitempty"`
	// The id of the selected object of the task.
	//
	ObjectID *string `json:"object_id,omitempty"`
	// If **Instance** is **true**, the ID of the original task in the original workflow.
	//
	OriginalTaskID *int64 `json:"original_task_id,omitempty"`
	// If **Instance** is **true**, the ID of the original workflow.
	//
	OriginalWorkflowID *int64 `json:"original_workflow_id,omitempty"`
	// The configuration of the task.
	//
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// If **Instance** is **true**, the start time of the task instance.
	//
	StartTime *string `json:"start_time,omitempty"`
	// If **Instance** is **true**, the status of the task instance.
	//
	Status *TaskStatusEnum `json:"status,omitempty"`
	// The array of filter tags.
	//
	Tags []string `json:"tags,omitempty"`
	// the id of this task's parent task. Will be null if this is the first task of the workflow
	TaskID *int64 `json:"task_id,omitempty"`
	// The ID of the workflow that the task belongs to.
	//
	WorkflowID *int64 `json:"workflow_id,omitempty"`
}
