/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Volumes {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Return a list of associated books.
   */
  booksVolumesAssociatedList(
    req: operations.BooksVolumesAssociatedListRequest,
    security: operations.BooksVolumesAssociatedListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksVolumesAssociatedListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksVolumesAssociatedListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/volumes/{volumeId}/associated",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksVolumesAssociatedListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksVolumesAssociatedListResponse =
        new operations.BooksVolumesAssociatedListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.volumes = utils.objectToClass(httpRes?.data, shared.Volumes);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets volume information for a single volume.
   */
  booksVolumesGet(
    req: operations.BooksVolumesGetRequest,
    security: operations.BooksVolumesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksVolumesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksVolumesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/volumes/{volumeId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksVolumesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksVolumesGetResponse =
        new operations.BooksVolumesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.volume = utils.objectToClass(httpRes?.data, shared.Volume);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Performs a book search.
   */
  booksVolumesList(
    req: operations.BooksVolumesListRequest,
    security: operations.BooksVolumesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksVolumesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksVolumesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/books/v1/volumes";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksVolumesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksVolumesListResponse =
        new operations.BooksVolumesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.volumes = utils.objectToClass(httpRes?.data, shared.Volumes);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Return a list of books in My Library.
   */
  booksVolumesMybooksList(
    req: operations.BooksVolumesMybooksListRequest,
    security: operations.BooksVolumesMybooksListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksVolumesMybooksListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksVolumesMybooksListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/books/v1/volumes/mybooks";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksVolumesMybooksListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksVolumesMybooksListResponse =
        new operations.BooksVolumesMybooksListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.volumes = utils.objectToClass(httpRes?.data, shared.Volumes);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Return a list of recommended books for the current user.
   */
  booksVolumesRecommendedList(
    req: operations.BooksVolumesRecommendedListRequest,
    security: operations.BooksVolumesRecommendedListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksVolumesRecommendedListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksVolumesRecommendedListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/books/v1/volumes/recommended";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksVolumesRecommendedListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksVolumesRecommendedListResponse =
        new operations.BooksVolumesRecommendedListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.volumes = utils.objectToClass(httpRes?.data, shared.Volumes);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Rate a recommended book for the current user.
   */
  booksVolumesRecommendedRate(
    req: operations.BooksVolumesRecommendedRateRequest,
    security: operations.BooksVolumesRecommendedRateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksVolumesRecommendedRateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksVolumesRecommendedRateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/books/v1/volumes/recommended/rate";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksVolumesRecommendedRateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksVolumesRecommendedRateResponse =
        new operations.BooksVolumesRecommendedRateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.booksVolumesRecommendedRateResponse = utils.objectToClass(
              httpRes?.data,
              shared.BooksVolumesRecommendedRateResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Return a list of books uploaded by the current user.
   */
  booksVolumesUseruploadedList(
    req: operations.BooksVolumesUseruploadedListRequest,
    security: operations.BooksVolumesUseruploadedListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksVolumesUseruploadedListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksVolumesUseruploadedListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/books/v1/volumes/useruploaded";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksVolumesUseruploadedListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksVolumesUseruploadedListResponse =
        new operations.BooksVolumesUseruploadedListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.volumes = utils.objectToClass(httpRes?.data, shared.Volumes);
          }
          break;
      }

      return res;
    });
  }
}
