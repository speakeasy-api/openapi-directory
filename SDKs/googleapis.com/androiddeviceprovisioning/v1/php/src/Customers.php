<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Customers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new configuration. Once created, a customer can apply the configuration to devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsCreateResponse
     */
	public function androiddeviceprovisioningCustomersConfigurationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/configurations', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "configurationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsCreateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configuration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Configuration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an unused configuration. The API call fails if the customer has devices with the configuration applied.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsDeleteResponse
     */
	public function androiddeviceprovisioningCustomersConfigurationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsDeleteRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists a customer's configurations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsListResponse
     */
	public function androiddeviceprovisioningCustomersConfigurationsList(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/configurations', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerListConfigurationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerListConfigurationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a configuration's field values.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsPatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsPatchResponse
     */
	public function androiddeviceprovisioningCustomersConfigurationsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsPatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "configurationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsPatchRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersConfigurationsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configuration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Configuration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Applies a Configuration to the device to register the device for zero-touch enrollment. After applying a configuration to a device, the device automatically provisions itself on first boot, or next factory reset.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesApplyConfigurationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesApplyConfigurationResponse
     */
	public function androiddeviceprovisioningCustomersDevicesApplyConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesApplyConfigurationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesApplyConfigurationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/devices:applyConfiguration', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesApplyConfigurationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customerApplyConfigurationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesApplyConfigurationRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesApplyConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists a customer's devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesListResponse
     */
	public function androiddeviceprovisioningCustomersDevicesList(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/devices', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerListDevicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerListDevicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a configuration from device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesRemoveConfigurationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesRemoveConfigurationResponse
     */
	public function androiddeviceprovisioningCustomersDevicesRemoveConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesRemoveConfigurationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesRemoveConfigurationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/devices:removeConfiguration', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesRemoveConfigurationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customerRemoveConfigurationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesRemoveConfigurationRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesRemoveConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unclaims a device from a customer and removes it from zero-touch enrollment. After removing a device, a customer must contact their reseller to register the device into zero-touch enrollment again.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesUnclaimRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesUnclaimResponse
     */
	public function androiddeviceprovisioningCustomersDevicesUnclaim(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesUnclaimRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesUnclaimResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/devices:unclaim', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesUnclaimRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customerUnclaimDeviceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesUnclaimRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDevicesUnclaimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the DPCs (device policy controllers) that support zero-touch enrollment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDpcsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDpcsListResponse
     */
	public function androiddeviceprovisioningCustomersDpcsList(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDpcsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDpcsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/dpcs', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDpcsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDpcsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersDpcsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerListDpcsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerListDpcsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the user's customer accounts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersListResponse
     */
	public function androiddeviceprovisioningCustomersList(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/customers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningCustomersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerListCustomersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerListCustomersResponse', 'json');
            }
        }

        return $response;
    }
}