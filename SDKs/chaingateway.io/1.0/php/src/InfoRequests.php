<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class InfoRequests 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * getBlock
     * 
     * Returns information of an ethereum block with or without transactions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBlockRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBlockResponse
     */
	public function getBlock(
        \OpenAPI\OpenAPI\Models\Operations\GetBlockRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBlockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getBlock');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getBlockRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBlockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBlock = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetBlock', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getEthereumBalance
     * 
     * Returns the ethereum balance of a given address.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEthereumBalanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEthereumBalanceResponse
     */
	public function getEthereumBalance(
        \OpenAPI\OpenAPI\Models\Operations\GetEthereumBalanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEthereumBalanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getEthereumBalance');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getEthereumBalanceRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEthereumBalanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEthereumBalance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetEthereumBalance', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getExchangeRate
     * 
     * Returns the current Ethereum price in Euro or US Dollar.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetExchangeRateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetExchangeRateResponse
     */
	public function getExchangeRate(
        \OpenAPI\OpenAPI\Models\Operations\GetExchangeRateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetExchangeRateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getExchangeRate');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getExchangeRateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetExchangeRateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getExchangeRate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetExchangeRate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getGasPrice
     * 
     * Returns the current gas price in GWEI.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGasPriceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGasPriceResponse
     */
	public function getGasPrice(
        \OpenAPI\OpenAPI\Models\Operations\GetGasPriceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGasPriceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getGasPrice');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGasPriceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getGasPrice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetGasPrice', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getLastBlockNumber
     * 
     * Returns the block number of the last mined ethereum block.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLastBlockNumberRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLastBlockNumberResponse
     */
	public function getLastBlockNumber(
        \OpenAPI\OpenAPI\Models\Operations\GetLastBlockNumberRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLastBlockNumberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getLastBlockNumber');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLastBlockNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getLastBlockNumber = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetLastBlockNumber', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getToken
     * 
     * Returns information about a specific ERC20 token like name, symbol, decimal places and total supply.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTokenResponse
     */
	public function getToken(
        \OpenAPI\OpenAPI\Models\Operations\GetTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getToken');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getTokenRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTokenBalance
     * 
     * Returns the token balance of a given address.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTokenBalanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTokenBalanceResponse
     */
	public function getTokenBalance(
        \OpenAPI\OpenAPI\Models\Operations\GetTokenBalanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTokenBalanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getTokenBalance');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getTokenBalanceRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTokenBalanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTokenBalance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetTokenBalance', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTransactions
     * 
     * Returns information like confirmations, token contract address, amount, gas price and more of a given transaction.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTransactionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTransactionsResponse
     */
	public function getTransactions(
        \OpenAPI\OpenAPI\Models\Operations\GetTransactionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTransactionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getTransactions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getTransactionsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTransactionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTransactions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetTransactions', 'json');
            }
        }

        return $response;
    }
}