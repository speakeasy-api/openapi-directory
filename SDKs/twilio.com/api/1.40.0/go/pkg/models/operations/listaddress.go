// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

var ListAddressServerList = []string{
	"https://api.twilio.com",
}

type ListAddressSecurity struct {
	AccountSidAuthToken shared.SchemeAccountSidAuthToken `security:"scheme,type=http,subtype=basic"`
}

type ListAddressPathParams struct {
	// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read.
	AccountSid string `pathParam:"style=simple,explode=false,name=AccountSid"`
}

type ListAddressQueryParams struct {
	// The `customer_name` of the Address resources to read.
	CustomerName *string `queryParam:"style=form,explode=true,name=CustomerName"`
	// The string that identifies the Address resources to read.
	FriendlyName *string `queryParam:"style=form,explode=true,name=FriendlyName"`
	// The ISO country code of the Address resources to read.
	IsoCountry *string `queryParam:"style=form,explode=true,name=IsoCountry"`
	// The page index. This value is simply for client state.
	Page *int64 `queryParam:"style=form,explode=true,name=Page"`
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int64 `queryParam:"style=form,explode=true,name=PageSize"`
	// The page token. This is provided by the API.
	PageToken *string `queryParam:"style=form,explode=true,name=PageToken"`
}

type ListAddressRequest struct {
	PathParams  ListAddressPathParams
	QueryParams ListAddressQueryParams
	Security    ListAddressSecurity
	ServerURL   *string
}

// ListAddressListAddressResponse - OK
type ListAddressListAddressResponse struct {
	Addresses       []shared.APIV2010AccountAddress `json:"addresses,omitempty"`
	End             *int64                          `json:"end,omitempty"`
	FirstPageURI    *string                         `json:"first_page_uri,omitempty"`
	NextPageURI     *string                         `json:"next_page_uri,omitempty"`
	Page            *int64                          `json:"page,omitempty"`
	PageSize        *int64                          `json:"page_size,omitempty"`
	PreviousPageURI *string                         `json:"previous_page_uri,omitempty"`
	Start           *int64                          `json:"start,omitempty"`
	URI             *string                         `json:"uri,omitempty"`
}

type ListAddressResponse struct {
	ContentType string
	// OK
	ListAddressResponse *ListAddressListAddressResponse
	StatusCode          int
	RawResponse         *http.Response
}
