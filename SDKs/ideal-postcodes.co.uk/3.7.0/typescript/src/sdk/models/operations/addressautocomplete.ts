/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class AddressAutocompleteRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=api_key",
  })
  apiKey?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=bias_country",
  })
  biasCountry?: string;

  /**
   * Biases search based on approximate geolocation of IP address.
   *
   * @remarks
   * Set `bias_ip=true` to enable.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=bias_ip",
  })
  biasIp?: shared.BiasIpParamEnum;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=bias_lonlat",
  })
  biasLonlat?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=bias_post_town",
  })
  biasPostTown?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=bias_postcode",
  })
  biasPostcode?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=bias_postcode_area",
  })
  biasPostcodeArea?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=bias_postcode_outward",
  })
  biasPostcodeOutward?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=bias_postcode_sector",
  })
  biasPostcodeSector?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=bias_thoroughfare",
  })
  biasThoroughfare?: string;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=false;name=box" })
  box?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=context",
  })
  context?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=country",
  })
  country?: string;

  /**
   * Limits number of address suggestions unless a postcode is detected. In this instance entire list of addreses for that postcode is returned.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=limit",
  })
  limit?: number;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=post_town",
  })
  postTown?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=postcode",
  })
  postcode?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=postcode_area",
  })
  postcodeArea?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=postcode_outward",
  })
  postcodeOutward?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=postcode_sector",
  })
  postcodeSector?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=postcode_type",
  })
  postcodeType?: string;

  /**
   * Specifies the address you wish to query. Query can be shortened to `q=`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=query",
  })
  query?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=su_organisation_indicator",
  })
  suOrganisationIndicator?: string;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=false;name=uprn" })
  uprn?: number;
}

export class AddressAutocompleteResponse extends SpeakeasyBase {
  /**
   * Success
   */
  @SpeakeasyMetadata()
  autocompleteResponse?: shared.AutocompleteResponse;

  /**
   * Bad Request
   */
  @SpeakeasyMetadata()
  badRequestResponse?: shared.BadRequestResponse;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
