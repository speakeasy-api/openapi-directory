"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Subscription:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def are_hooks_supported(self) -> operations.AreHooksSupportedResponse:
        r"""This method can be used to determine if hooks are supported.
        This method can be used to determine if hooks are supported.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/subscription/supports'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AreHooksSupportedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.are_hooks_supported_default_application_vnd_xtrf_v1_plus_json_boolean = out

        return res

    def get_all_4(self) -> operations.GetAll4Response:
        r"""Returns all subscriptions
        Returns all subscriptions. Subscriptions are automatically removed if they do not work (ie. if 404 status is returned). To improve notification reliability one can use this method to check if subscription is still active and re-subscribe if necessary.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/subscription'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAll4Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ActiveSubscriptionDTO]])
                res.active_subscription_dtos = out

        return res

    def subscribe(self, request: shared.SubscriptionDTO) -> operations.SubscribeResponse:
        r"""Subscribe to event
        Subscribe to event. Returns subscription Id.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/subscription'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscribeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                res.subscribe_201_application_vnd_xtrf_v1_plus_json_string = http_res.content
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                res.subscribe_409_application_vnd_xtrf_v1_plus_json_string = http_res.content

        return res

    def unsubscribe(self, request: operations.UnsubscribeRequest) -> operations.UnsubscribeResponse:
        r"""Unsubscribe from event
        Unsubscribe from job status changed event
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnsubscribeRequest, base_url, '/subscription/{subscriptionId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnsubscribeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    