// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TflAPIPresentationEntitiesStopPointSequenceServiceTypeEnum string

const (
	TflAPIPresentationEntitiesStopPointSequenceServiceTypeEnumRegular TflAPIPresentationEntitiesStopPointSequenceServiceTypeEnum = "Regular"
	TflAPIPresentationEntitiesStopPointSequenceServiceTypeEnumNight   TflAPIPresentationEntitiesStopPointSequenceServiceTypeEnum = "Night"
)

func (e *TflAPIPresentationEntitiesStopPointSequenceServiceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Regular":
		fallthrough
	case "Night":
		*e = TflAPIPresentationEntitiesStopPointSequenceServiceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TflAPIPresentationEntitiesStopPointSequenceServiceTypeEnum: %s", s)
	}
}

type TflAPIPresentationEntitiesStopPointSequence struct {
	// The id of this branch.
	BranchID  *int    `json:"branchId,omitempty"`
	Direction *string `json:"direction,omitempty"`
	LineID    *string `json:"lineId,omitempty"`
	LineName  *string `json:"lineName,omitempty"`
	// The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be
	//             identical in the case of a looped route e.g. the Circle line.
	NextBranchIds []int `json:"nextBranchIds,omitempty"`
	// The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be
	//             identical in the case of a looped route e.g. the Circle line.
	PrevBranchIds []int                                                       `json:"prevBranchIds,omitempty"`
	ServiceType   *TflAPIPresentationEntitiesStopPointSequenceServiceTypeEnum `json:"serviceType,omitempty"`
	StopPoint     []TflAPIPresentationEntitiesMatchedStop                     `json:"stopPoint,omitempty"`
}
