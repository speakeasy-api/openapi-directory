/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Task - Successful response
 */
public class Task {
    /**
     * Completion date of the task (as a RFC 3339 timestamp). This field is omitted if the task has not been completed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completed")
    public String completed;
    public Task withCompleted(String completed) {
        this.completed = completed;
        return this;
    }
    
    /**
     * Flag indicating whether the task has been deleted. The default is False.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    public Boolean deleted;
    public Task withDeleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }
    
    /**
     * Due date of the task (as a RFC 3339 timestamp). Optional. The due date only records date information; the time portion of the timestamp is discarded when setting the due date. It isn't possible to read or write the time that a task is due via the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("due")
    public String due;
    public Task withDue(String due) {
        this.due = due;
        return this;
    }
    
    /**
     * ETag of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;
    public Task withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Flag indicating whether the task is hidden. This is the case if the task had been marked completed when the task list was last cleared. The default is False. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hidden")
    public Boolean hidden;
    public Task withHidden(Boolean hidden) {
        this.hidden = hidden;
        return this;
    }
    
    /**
     * Task identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Task withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Type of the resource. This is always "tasks#task".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Task withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Collection of links. This collection is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    public TaskLinks[] links;
    public Task withLinks(TaskLinks[] links) {
        this.links = links;
        return this;
    }
    
    /**
     * Notes describing the task. Optional.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;
    public Task withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * Parent task identifier. This field is omitted if it is a top-level task. This field is read-only. Use the "move" method to move the task under a different parent or to the top level.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent")
    public String parent;
    public Task withParent(String parent) {
        this.parent = parent;
        return this;
    }
    
    /**
     * String indicating the position of the task among its sibling tasks under the same parent task or at the top level. If this string is greater than another task's corresponding position string according to lexicographical ordering, the task is positioned after the other task under the same parent task (or at the top level). This field is read-only. Use the "move" method to move the task to another position.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("position")
    public String position;
    public Task withPosition(String position) {
        this.position = position;
        return this;
    }
    
    /**
     * URL pointing to this task. Used to retrieve, update, or delete this task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;
    public Task withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * Status of the task. This is either "needsAction" or "completed".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public Task withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * Title of the task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public Task withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * Last modification time of the task (as a RFC 3339 timestamp).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated")
    public String updated;
    public Task withUpdated(String updated) {
        this.updated = updated;
        return this;
    }
    
}
