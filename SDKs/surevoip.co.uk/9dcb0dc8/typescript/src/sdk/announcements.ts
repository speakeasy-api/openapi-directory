/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Announcements that can be played during or before a call
 */
export class Announcements {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete an announcement audio file
   */
  deleteCustomersAccountAnnouncementsAnnouncementId(
    req: operations.DeleteCustomersAccountAnnouncementsAnnouncementIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteCustomersAccountAnnouncementsAnnouncementIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteCustomersAccountAnnouncementsAnnouncementIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/customers/{account}/announcements/{announcement_id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteCustomersAccountAnnouncementsAnnouncementIdResponse =
        new operations.DeleteCustomersAccountAnnouncementsAnnouncementIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case [404, 410].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.oneannouncementsPostResponses403ContentApplication1jsonSchema =
              utils.objectToClass(
                httpRes?.data,
                shared.OneannouncementsPostResponses403ContentApplication1jsonSchema
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List global announcements
   */
  getAnnouncements(
    config?: AxiosRequestConfig
  ): Promise<operations.GetAnnouncementsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/announcements";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAnnouncementsResponse =
        new operations.GetAnnouncementsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.oneGetResponses200ContentApplication1jsonSchema =
              utils.objectToClass(
                httpRes?.data,
                shared.OneGetResponses200ContentApplication1jsonSchema
              );
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * List of announcement audio files
   */
  getCustomersAccountAnnouncements(
    req: operations.GetCustomersAccountAnnouncementsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCustomersAccountAnnouncementsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCustomersAccountAnnouncementsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/customers/{account}/announcements",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCustomersAccountAnnouncementsResponse =
        new operations.GetCustomersAccountAnnouncementsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getCustomersAccountAnnouncements200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetCustomersAccountAnnouncements200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.oneannouncementsPostResponses403ContentApplication1jsonSchema =
              utils.objectToClass(
                httpRes?.data,
                shared.OneannouncementsPostResponses403ContentApplication1jsonSchema
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Represents an announcement audio file
   */
  getCustomersAccountAnnouncementsAnnouncementId(
    req: operations.GetCustomersAccountAnnouncementsAnnouncementIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCustomersAccountAnnouncementsAnnouncementIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetCustomersAccountAnnouncementsAnnouncementIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/customers/{account}/announcements/{announcement_id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCustomersAccountAnnouncementsAnnouncementIdResponse =
        new operations.GetCustomersAccountAnnouncementsAnnouncementIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.oneannouncementsPostResponses201ContentApplication1jsonSchema =
              utils.objectToClass(
                httpRes?.data,
                shared.OneannouncementsPostResponses201ContentApplication1jsonSchema
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getCustomersAccountAnnouncementsAnnouncementId404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetCustomersAccountAnnouncementsAnnouncementId404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add a new announcement audio file
   */
  postAnnouncements(
    req: operations.PostAnnouncementsRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostAnnouncementsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostAnnouncementsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/announcements";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostAnnouncementsResponse =
        new operations.PostAnnouncementsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAnnouncements201ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostAnnouncements201ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAnnouncements400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostAnnouncements400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAnnouncements403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostAnnouncements403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.oneannouncementsPostResponses403ContentApplication1jsonSchema =
              utils.objectToClass(
                httpRes?.data,
                shared.OneannouncementsPostResponses403ContentApplication1jsonSchema
              );
          }
          break;
      }

      return res;
    });
  }
}
