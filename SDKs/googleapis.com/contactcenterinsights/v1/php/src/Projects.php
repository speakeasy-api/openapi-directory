<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates an analysis. The long running operation is done when the analysis has completed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateResponse
     */
	public function contactcenterinsightsProjectsLocationsConversationsAnalysesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/analyses', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudContactcenterinsightsV1AnalysisInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists analyses.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesListResponse
     */
	public function contactcenterinsightsProjectsLocationsConversationsAnalysesList(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/analyses', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsAnalysesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudContactcenterinsightsV1ListAnalysesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudContactcenterinsightsV1ListAnalysesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Analyzes multiple conversations in a single request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeResponse
     */
	public function contactcenterinsightsProjectsLocationsConversationsBulkAnalyze(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/conversations:bulkAnalyze', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudContactcenterinsightsV1BulkAnalyzeConversationsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets conversation statistics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCalculateStatsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCalculateStatsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCalculateStatsResponse
     */
	public function contactcenterinsightsProjectsLocationsConversationsCalculateStats(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCalculateStatsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCalculateStatsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCalculateStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{location}/conversations:calculateStats', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCalculateStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCalculateStatsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCalculateStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudContactcenterinsightsV1CalculateStatsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudContactcenterinsightsV1CalculateStatsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a conversation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCreateResponse
     */
	public function contactcenterinsightsProjectsLocationsConversationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/conversations', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudContactcenterinsightsV1ConversationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudContactcenterinsightsV1Conversation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudContactcenterinsightsV1Conversation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports conversations and processes them according to the user's configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsIngestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsIngestSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsIngestResponse
     */
	public function contactcenterinsightsProjectsLocationsConversationsIngest(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsIngestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsIngestSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsIngestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/conversations:ingest', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsIngestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudContactcenterinsightsV1IngestConversationsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsIngestRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsIngestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists conversations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsListResponse
     */
	public function contactcenterinsightsProjectsLocationsConversationsList(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/conversations', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsConversationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudContactcenterinsightsV1ListConversationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudContactcenterinsightsV1ListConversationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Export insights data to a destination defined in the request body.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsInsightsdataExportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsInsightsdataExportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsInsightsdataExportResponse
     */
	public function contactcenterinsightsProjectsLocationsInsightsdataExport(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsInsightsdataExportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsInsightsdataExportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsInsightsdataExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/insightsdata:export', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsInsightsdataExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudContactcenterinsightsV1ExportInsightsDataRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsInsightsdataExportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsInsightsdataExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets an issue model's statistics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsResponse
     */
	public function contactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStats(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{issueModel}:calculateIssueModelStats', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an issue model.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCreateResponse
     */
	public function contactcenterinsightsProjectsLocationsIssueModelsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/issueModels', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudContactcenterinsightsV1IssueModelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deploys an issue model. Returns an error if a model is already deployed. An issue model can only be used in analysis after it has been deployed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsDeployRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsDeploySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsDeployResponse
     */
	public function contactcenterinsightsProjectsLocationsIssueModelsDeploy(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsDeployRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsDeploySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsDeployResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:deploy', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsDeployRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudContactcenterinsightsV1DeployIssueModelRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsDeployRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsDeployResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists issues.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsIssuesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsIssuesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsIssuesListResponse
     */
	public function contactcenterinsightsProjectsLocationsIssueModelsIssuesList(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsIssuesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsIssuesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsIssuesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/issues', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsIssuesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsIssuesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsIssuesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudContactcenterinsightsV1ListIssuesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudContactcenterinsightsV1ListIssuesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists issue models.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsListResponse
     */
	public function contactcenterinsightsProjectsLocationsIssueModelsList(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/issueModels', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudContactcenterinsightsV1ListIssueModelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudContactcenterinsightsV1ListIssueModelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Undeploys an issue model. An issue model can not be used in analysis after it has been undeployed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsUndeployRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsUndeploySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsUndeployResponse
     */
	public function contactcenterinsightsProjectsLocationsIssueModelsUndeploy(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsUndeployRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsUndeploySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsUndeployResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:undeploy', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsUndeployRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudContactcenterinsightsV1UndeployIssueModelRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsUndeployRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsIssueModelsUndeployResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsCancelResponse
     */
	public function contactcenterinsightsProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsListResponse
     */
	public function contactcenterinsightsProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a phrase matcher.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersCreateResponse
     */
	public function contactcenterinsightsProjectsLocationsPhraseMatchersCreate(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/phraseMatchers', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudContactcenterinsightsV1PhraseMatcherInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudContactcenterinsightsV1PhraseMatcher = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudContactcenterinsightsV1PhraseMatcher', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists phrase matchers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersListResponse
     */
	public function contactcenterinsightsProjectsLocationsPhraseMatchersList(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/phraseMatchers', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsPhraseMatchersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudContactcenterinsightsV1ListPhraseMatchersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudContactcenterinsightsV1ListPhraseMatchersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a view.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsCreateResponse
     */
	public function contactcenterinsightsProjectsLocationsViewsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/views', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudContactcenterinsightsV1ViewInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudContactcenterinsightsV1View = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudContactcenterinsightsV1View', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a view.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsDeleteResponse
     */
	public function contactcenterinsightsProjectsLocationsViewsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a view.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsGetResponse
     */
	public function contactcenterinsightsProjectsLocationsViewsGet(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudContactcenterinsightsV1View = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudContactcenterinsightsV1View', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists views.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsListResponse
     */
	public function contactcenterinsightsProjectsLocationsViewsList(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/views', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudContactcenterinsightsV1ListViewsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudContactcenterinsightsV1ListViewsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a view.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsPatchResponse
     */
	public function contactcenterinsightsProjectsLocationsViewsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudContactcenterinsightsV1ViewInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenterinsightsProjectsLocationsViewsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudContactcenterinsightsV1View = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudContactcenterinsightsV1View', 'json');
            }
        }

        return $response;
    }
}