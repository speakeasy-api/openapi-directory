<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Refunds 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * GetPaymentRefund
     * 
     * Retrieves a specific refund using the `refund_id`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPaymentRefundRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPaymentRefundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPaymentRefundResponse
     */
	public function getPaymentRefund(
        \OpenAPI\OpenAPI\Models\Operations\GetPaymentRefundRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPaymentRefundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPaymentRefundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/refunds/{refund_id}', \OpenAPI\OpenAPI\Models\Operations\GetPaymentRefundRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPaymentRefundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPaymentRefundResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetPaymentRefundResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListPaymentRefunds
     * 
     * Retrieves a list of refunds for the account making the request.
     * 
     * Results are eventually consistent, and new refunds or changes to refunds might take several
     * seconds to appear.
     * 
     * The maximum results per page is 100.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPaymentRefundsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPaymentRefundsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListPaymentRefundsResponse
     */
	public function listPaymentRefunds(
        \OpenAPI\OpenAPI\Models\Operations\ListPaymentRefundsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListPaymentRefundsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListPaymentRefundsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/refunds');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListPaymentRefundsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListPaymentRefundsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPaymentRefundsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPaymentRefundsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RefundPayment
     * 
     * Refunds a payment. You can refund the entire payment amount or a
     * portion of it. You can use this endpoint to refund a card payment or record a 
     * refund of a cash or external payment. For more information, see
     * [Refund Payment](https://developer.squareup.com/docs/payments-api/refund-payments).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RefundPaymentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RefundPaymentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RefundPaymentResponse
     */
	public function refundPayment(
        \OpenAPI\OpenAPI\Models\Shared\RefundPaymentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RefundPaymentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RefundPaymentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/refunds');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RefundPaymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->refundPaymentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RefundPaymentResponse', 'json');
            }
        }

        return $response;
    }
}