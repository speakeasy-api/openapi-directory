<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - ## Important
 * 
 * An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.
 * 
 * ### Getting Started
 *   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.
 *   * Scroll down and click the "**Authorize**" button.
 *   * Enter your API key into the "**value**" input, click the "**Authorize**" button, then click the "**Close**" button.
 *   * Scroll down to the section titled "**default**" and click on the API endpoint you wish to use.
 *   * Click the "**Try it out**" button.
 *   * Enter the information the endpoint requires.
 *   * Click the "**Execute**" button.
 * 
 * ### Example 
 *   * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**
 *   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**
 *   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**
 * 
 * ### How Do I Find My API Key?
 *   * Your API key was sent to the email address you used to create your subscription.
 *   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.
 *   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.
 * 
 * ### Helpful Links
 *   * **Help & Support**
 *     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)
 *     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)
 *     * [Client Center &raquo;](https://chompthis.com/api/manage.php)
 *   * **Pricing**
 *     * [Subscription Options &raquo;](https://chompthis.com/api/)
 *     * [Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)
 *   * **Guidelines**
 *     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)
 *     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php)
 * 
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
        /** Production server (uses live data) */
		'https://chompthis.com/api/v2',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Get a branded food item using a barcode
     * 
     * ## Get data for a branded food using the food's UPC/EAN barcode.
     * 
     * **Example** 
     * > ```https://chompthis.com/api/v2/food/branded/barcode.php?api_key=API_KEY&code=CODE```
     * 
     * **Tips**
     *   * Read our **[Knowledge Base article](https://desk.zoho.com/portal/chompthis/kb/articles/im-having-trouble-getting-matches-for-barcodes-what-can-id-do)** for helpful tips and tricks.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedBarcodePhpRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedBarcodePhpSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedBarcodePhpResponse
     */
	public function getFoodBrandedBarcodePhp(
        \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedBarcodePhpRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedBarcodePhpSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedBarcodePhpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/food/branded/barcode.php');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedBarcodePhpRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedBarcodePhpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->brandedFoodObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BrandedFoodObject', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get a branded food item by name
     * 
     * ## Search for branded food items by name.
     * 
     * **Example**
     * > ```https://chompthis.com/api/v2/food/branded/name.php?api_key=API_KEY&name=NAME```
     * 
     * **Tips**
     *   * Get started by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.
     * 
     * > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedNamePhpRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedNamePhpSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedNamePhpResponse
     */
	public function getFoodBrandedNamePhp(
        \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedNamePhpRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedNamePhpSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedNamePhpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/food/branded/name.php');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedNamePhpRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedNamePhpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->brandedFoodObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BrandedFoodObject', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get data for branded food items using various search parameters
     * 
     * ## Search for branded food items using various parameters.
     * 
     * **Example**
     * > ```https://chompthis.com/api/v2/food/branded/search.php?api_key=API_KEY&brand=BRAND&country=COUNTRY&page=1```
     * 
     * **Tips** 
     *   * Get started by using the **[Query Builder](https://chompthis.com/api/build.php)**.
     * 
     * > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedSearchPhpRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedSearchPhpSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedSearchPhpResponse
     */
	public function getFoodBrandedSearchPhp(
        \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedSearchPhpRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedSearchPhpSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedSearchPhpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/food/branded/search.php');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedSearchPhpRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFoodBrandedSearchPhpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->brandedFoodObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BrandedFoodObject', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get raw/generic food ingredient item(s)
     * 
     * ## Get data for a specific ingredient or a specific set of ingredients.
     * 
     * **Example #1: Single Ingredient**
     * > ```https://chompthis.com/api/v2/ingredient/search.php?api_key=API_KEY&find=raw broccoli```
     * 
     * **Example #2: Set of Ingredients**
     * > ```https://chompthis.com/api/v2/ingredient/search.php?api_key=API_KEY&find=raw broccoli,mashed potatoes,chicken drumstick```
     * 
     * **Tips**
     *   * Expose ingredient endpoints by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.
     * 
     * > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFoodIngredientSearchPhpRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFoodIngredientSearchPhpSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFoodIngredientSearchPhpResponse
     */
	public function getFoodIngredientSearchPhp(
        \OpenAPI\OpenAPI\Models\Operations\GetFoodIngredientSearchPhpRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFoodIngredientSearchPhpSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFoodIngredientSearchPhpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/food/ingredient/search.php');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFoodIngredientSearchPhpRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFoodIngredientSearchPhpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ingredientObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IngredientObject', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}