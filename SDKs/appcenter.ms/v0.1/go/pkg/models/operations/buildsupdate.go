// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type BuildsUpdateSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// BuildsUpdateRequestBodyStatusEnum - The build status; used to cancel builds
type BuildsUpdateRequestBodyStatusEnum string

const (
	BuildsUpdateRequestBodyStatusEnumCancelling BuildsUpdateRequestBodyStatusEnum = "cancelling"
)

func (e BuildsUpdateRequestBodyStatusEnum) ToPointer() *BuildsUpdateRequestBodyStatusEnum {
	return &e
}

func (e *BuildsUpdateRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cancelling":
		*e = BuildsUpdateRequestBodyStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BuildsUpdateRequestBodyStatusEnum: %v", v)
	}
}

type BuildsUpdateRequestBody struct {
	// The build status; used to cancel builds
	Status *BuildsUpdateRequestBodyStatusEnum `json:"status,omitempty"`
}

type BuildsUpdateRequest struct {
	RequestBody BuildsUpdateRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The build ID
	BuildID int64 `pathParam:"style=simple,explode=false,name=build_id"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

// BuildsUpdate200ApplicationJSON - Success
type BuildsUpdate200ApplicationJSON struct {
	// The build number
	BuildNumber string `json:"buildNumber"`
	// The time the build was finished
	FinishTime *string `json:"finishTime,omitempty"`
	// The build ID
	ID int64 `json:"id"`
	// The time the build status was last changed
	LastChangedDate *string `json:"lastChangedDate,omitempty"`
	// The time the build was queued
	QueueTime string `json:"queueTime"`
	// The build result
	Result string `json:"result"`
	// The source branch name
	SourceBranch string `json:"sourceBranch"`
	// The source SHA
	SourceVersion string `json:"sourceVersion"`
	// The time the build was started
	StartTime *string `json:"startTime,omitempty"`
	// The build status
	Status string `json:"status"`
}

type BuildsUpdateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	BuildsUpdate200ApplicationJSONObject *BuildsUpdate200ApplicationJSON
}
