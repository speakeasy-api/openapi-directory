/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Edge - Information about a connection between two services. An edge can be a synchronous connection, such as typical call between client and service, or an asynchronous link, such as a Lambda function which retrieves an event from an SNS queue.
 */
public class Edge {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Aliases")
    public Alias[] aliases;

    public Edge withAliases(Alias[] aliases) {
        this.aliases = aliases;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EdgeType")
    public String edgeType;

    public Edge withEdgeType(String edgeType) {
        this.edgeType = edgeType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("EndTime")
    public OffsetDateTime endTime;

    public Edge withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReceivedEventAgeHistogram")
    public HistogramEntry[] receivedEventAgeHistogram;

    public Edge withReceivedEventAgeHistogram(HistogramEntry[] receivedEventAgeHistogram) {
        this.receivedEventAgeHistogram = receivedEventAgeHistogram;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReferenceId")
    public Long referenceId;

    public Edge withReferenceId(Long referenceId) {
        this.referenceId = referenceId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ResponseTimeHistogram")
    public HistogramEntry[] responseTimeHistogram;

    public Edge withResponseTimeHistogram(HistogramEntry[] responseTimeHistogram) {
        this.responseTimeHistogram = responseTimeHistogram;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("StartTime")
    public OffsetDateTime startTime;

    public Edge withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SummaryStatistics")
    public EdgeStatistics summaryStatistics;

    public Edge withSummaryStatistics(EdgeStatistics summaryStatistics) {
        this.summaryStatistics = summaryStatistics;
        return this;
    }
    
    public Edge(){}
}
