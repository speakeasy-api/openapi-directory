/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NestedUser } from "./nesteduser";
import { Expose, Transform, Type } from "class-transformer";

export enum ObjectChangeActionLabelEnum {
  Created = "Created",
  Updated = "Updated",
  Deleted = "Deleted",
}

export enum ObjectChangeActionValueEnum {
  Create = "create",
  Update = "update",
  Delete = "delete",
}

export class ObjectChangeAction extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label: ObjectChangeActionLabelEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: ObjectChangeActionValueEnum;
}

export class ObjectChange extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  @Type(() => ObjectChangeAction)
  action?: ObjectChangeAction;

  /**
   *
   * @remarks
   * Serialize a nested representation of the changed object.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "changed_object" })
  changedObject?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "changed_object_id" })
  changedObjectId: number;

  @SpeakeasyMetadata()
  @Expose({ name: "changed_object_type" })
  changedObjectType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "object_data" })
  objectData?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "request_id" })
  requestId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => NestedUser)
  user?: NestedUser;

  @SpeakeasyMetadata()
  @Expose({ name: "user_name" })
  userName?: string;
}
