// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FirstLastNameGenderedOutLikelyGenderEnum - Most likely gender
type FirstLastNameGenderedOutLikelyGenderEnum string

const (
	FirstLastNameGenderedOutLikelyGenderEnumMale    FirstLastNameGenderedOutLikelyGenderEnum = "male"
	FirstLastNameGenderedOutLikelyGenderEnumFemale  FirstLastNameGenderedOutLikelyGenderEnum = "female"
	FirstLastNameGenderedOutLikelyGenderEnumUnknown FirstLastNameGenderedOutLikelyGenderEnum = "unknown"
)

func (e *FirstLastNameGenderedOutLikelyGenderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "male":
		fallthrough
	case "female":
		fallthrough
	case "unknown":
		*e = FirstLastNameGenderedOutLikelyGenderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FirstLastNameGenderedOutLikelyGenderEnum: %s", s)
	}
}

// FirstLastNameGenderedOut - Represents the output of inferring the LIKELY gender from a personal name.
type FirstLastNameGenderedOut struct {
	// The first name (also known as given name)
	FirstName *string `json:"firstName,omitempty"`
	// Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.
	GenderScale *float64 `json:"genderScale,omitempty"`
	ID          *string  `json:"id,omitempty"`
	// The last name (also known as family name, or surname)
	LastName *string `json:"lastName,omitempty"`
	// Most likely gender
	LikelyGender *FirstLastNameGenderedOutLikelyGenderEnum `json:"likelyGender,omitempty"`
	// The calibrated probability for inferred gender to have been guessed correctly. -1 = still calibrating.
	ProbabilityCalibrated *float64 `json:"probabilityCalibrated,omitempty"`
	// Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available.
	Score  *float64 `json:"score,omitempty"`
	Script *string  `json:"script,omitempty"`
}
