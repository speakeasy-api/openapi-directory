"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigRule = void 0;
var utils_1 = require("../../../internal/utils");
var configrulestateenum_1 = require("./configrulestateenum");
var evaluationmodeconfiguration_1 = require("./evaluationmodeconfiguration");
var maximumexecutionfrequencyenum_1 = require("./maximumexecutionfrequencyenum");
var scope_1 = require("./scope");
var source_1 = require("./source");
var class_transformer_1 = require("class-transformer");
/**
 * <p>Config rules evaluate the configuration settings of your Amazon Web Services resources. A rule can run when Config detects a configuration change to an Amazon Web Services resource or at a periodic frequency that you choose (for example, every 24 hours). There are two types of rules: <i>Config Managed Rules</i> and <i>Config Custom Rules</i>.</p> <p>Config Managed Rules are predefined, customizable rules created by Config. For a list of managed rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html">List of Config Managed Rules</a>.</p> <p>Config Custom Rules are rules that you create from scratch. There are two ways to create Config custom rules: with Lambda functions (<a href="https://docs.aws.amazon.com/config/latest/developerguide/gettingstarted-concepts.html#gettingstarted-concepts-function"> Lambda Developer Guide</a>) and with Guard (<a href="https://github.com/aws-cloudformation/cloudformation-guard">Guard GitHub Repository</a>), a policy-as-code language. Config custom rules created with Lambda are called <i>Config Custom Lambda Rules</i> and Config custom rules created with Guard are called <i>Config Custom Policy Rules</i>.</p> <p>For more information about developing and using Config rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html">Evaluating Resource with Config Rules</a> in the <i>Config Developer Guide</i>.</p> <note> <p>You can use the Amazon Web Services CLI and Amazon Web Services SDKs if you want to create a rule that triggers evaluations for your resources when Config delivers the configuration snapshot. For more information, see <a>ConfigSnapshotDeliveryProperties</a>.</p> </note>
 */
var ConfigRule = /** @class */ (function (_super) {
    __extends(ConfigRule, _super);
    function ConfigRule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ConfigRuleArn" }),
        __metadata("design:type", String)
    ], ConfigRule.prototype, "configRuleArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ConfigRuleId" }),
        __metadata("design:type", String)
    ], ConfigRule.prototype, "configRuleId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ConfigRuleName" }),
        __metadata("design:type", String)
    ], ConfigRule.prototype, "configRuleName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ConfigRuleState" }),
        __metadata("design:type", String)
    ], ConfigRule.prototype, "configRuleState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CreatedBy" }),
        __metadata("design:type", String)
    ], ConfigRule.prototype, "createdBy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Description" }),
        __metadata("design:type", String)
    ], ConfigRule.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: evaluationmodeconfiguration_1.EvaluationModeConfiguration }),
        (0, class_transformer_1.Expose)({ name: "EvaluationModes" }),
        (0, class_transformer_1.Type)(function () { return evaluationmodeconfiguration_1.EvaluationModeConfiguration; }),
        __metadata("design:type", Array)
    ], ConfigRule.prototype, "evaluationModes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "InputParameters" }),
        __metadata("design:type", String)
    ], ConfigRule.prototype, "inputParameters", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "MaximumExecutionFrequency" }),
        __metadata("design:type", String)
    ], ConfigRule.prototype, "maximumExecutionFrequency", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Scope" }),
        (0, class_transformer_1.Type)(function () { return scope_1.Scope; }),
        __metadata("design:type", scope_1.Scope)
    ], ConfigRule.prototype, "scope", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Source" }),
        (0, class_transformer_1.Type)(function () { return source_1.Source; }),
        __metadata("design:type", source_1.Source)
    ], ConfigRule.prototype, "source", void 0);
    return ConfigRule;
}(utils_1.SpeakeasyBase));
exports.ConfigRule = ConfigRule;
