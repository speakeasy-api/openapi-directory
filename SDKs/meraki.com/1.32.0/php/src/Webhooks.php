<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Webhooks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add an HTTP server to a network
     * 
     * Add an HTTP server to a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksHttpServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksHttpServerResponse
     */
	public function createNetworkWebhooksHttpServer(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksHttpServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksHttpServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/httpServers', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksHttpServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksHttpServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkWebhooksHttpServer201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksHttpServer201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a webhook payload template for a network
     * 
     * Create a webhook payload template for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksPayloadTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksPayloadTemplateResponse
     */
	public function createNetworkWebhooksPayloadTemplate(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksPayloadTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksPayloadTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/payloadTemplates', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksPayloadTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksPayloadTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkWebhooksPayloadTemplate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksPayloadTemplate201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send a test webhook for a network
     * 
     * Send a test webhook for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksWebhookTestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksWebhookTestResponse
     */
	public function createNetworkWebhooksWebhookTest(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksWebhookTestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksWebhookTestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/webhookTests', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksWebhookTestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksWebhookTestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkWebhooksWebhookTest201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksWebhookTest201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an HTTP server from a network
     * 
     * Delete an HTTP server from a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksHttpServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksHttpServerResponse
     */
	public function deleteNetworkWebhooksHttpServer(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksHttpServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksHttpServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/httpServers/{httpServerId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksHttpServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksHttpServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Destroy a webhook payload template for a network
     * 
     * Destroy a webhook payload template for a network. Does not work for included templates ('wpt_00001', 'wpt_00002', 'wpt_00003', 'wpt_00004', 'wpt_00005' or 'wpt_00006')
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksPayloadTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksPayloadTemplateResponse
     */
	public function deleteNetworkWebhooksPayloadTemplate(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksPayloadTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksPayloadTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksPayloadTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksPayloadTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Return an HTTP server for a network
     * 
     * Return an HTTP server for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServerResponse
     */
	public function getNetworkWebhooksHttpServer(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/httpServers/{httpServerId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWebhooksHttpServer200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServer200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the HTTP servers for a network
     * 
     * List the HTTP servers for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServersResponse
     */
	public function getNetworkWebhooksHttpServers(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/httpServers', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWebhooksHttpServers200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServers200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the webhook payload template for a network
     * 
     * Get the webhook payload template for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplateResponse
     */
	public function getNetworkWebhooksPayloadTemplate(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWebhooksPayloadTemplate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplate200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the webhook payload templates for a network
     * 
     * List the webhook payload templates for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplatesResponse
     */
	public function getNetworkWebhooksPayloadTemplates(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/payloadTemplates', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWebhooksPayloadTemplates200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplates200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the status of a webhook test for a network
     * 
     * Return the status of a webhook test for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksWebhookTestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksWebhookTestResponse
     */
	public function getNetworkWebhooksWebhookTest(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksWebhookTestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksWebhookTestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/webhookTests/{webhookTestId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksWebhookTestRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksWebhookTestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWebhooksWebhookTest200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksWebhookTest200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a list of alert types to be used with managing webhook alerts
     * 
     * Return a list of alert types to be used with managing webhook alerts
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesResponse
     */
	public function getOrganizationWebhooksAlertTypes(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/webhooks/alertTypes', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksAlertTypesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationWebhooksAlertTypes200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the log of webhook POSTs sent
     * 
     * Return the log of webhook POSTs sent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsResponse
     */
	public function getOrganizationWebhooksLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/webhooks/logs', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationWebhooksLogs200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationWebhooksLogs200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an HTTP server
     * 
     * Update an HTTP server. To change a URL, create a new HTTP server.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksHttpServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksHttpServerResponse
     */
	public function updateNetworkWebhooksHttpServer(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksHttpServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksHttpServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/httpServers/{httpServerId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksHttpServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksHttpServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWebhooksHttpServer200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksHttpServer200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a webhook payload template for a network
     * 
     * Update a webhook payload template for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksPayloadTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksPayloadTemplateResponse
     */
	public function updateNetworkWebhooksPayloadTemplate(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksPayloadTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksPayloadTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksPayloadTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksPayloadTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWebhooksPayloadTemplate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksPayloadTemplate200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}