"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import aclconfiguration as shared_aclconfiguration
from ..shared import encryptionconfiguration as shared_encryptionconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResultConfigurationUpdates:
    r"""The information about the updates in the query results, such as output location and encryption configuration for the query results."""
    
    acl_configuration: Optional[shared_aclconfiguration.ACLConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AclConfiguration'), 'exclude': lambda f: f is None }})  
    encryption_configuration: Optional[shared_encryptionconfiguration.EncryptionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionConfiguration'), 'exclude': lambda f: f is None }})  
    expected_bucket_owner: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpectedBucketOwner'), 'exclude': lambda f: f is None }})  
    output_location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputLocation'), 'exclude': lambda f: f is None }})  
    remove_acl_configuration: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemoveAclConfiguration'), 'exclude': lambda f: f is None }})  
    remove_encryption_configuration: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemoveEncryptionConfiguration'), 'exclude': lambda f: f is None }})  
    remove_expected_bucket_owner: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemoveExpectedBucketOwner'), 'exclude': lambda f: f is None }})  
    remove_output_location: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemoveOutputLocation'), 'exclude': lambda f: f is None }})  
    