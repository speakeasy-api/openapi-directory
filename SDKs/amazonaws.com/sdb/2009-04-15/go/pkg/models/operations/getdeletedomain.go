// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeleteDomainActionEnum
type GETDeleteDomainActionEnum string

const (
	GETDeleteDomainActionEnumDeleteDomain GETDeleteDomainActionEnum = "DeleteDomain"
)

func (e *GETDeleteDomainActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeleteDomain":
		*e = GETDeleteDomainActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteDomainActionEnum: %s", s)
	}
}

// GETDeleteDomainVersionEnum
type GETDeleteDomainVersionEnum string

const (
	GETDeleteDomainVersionEnumTwoThousandAndNine0415 GETDeleteDomainVersionEnum = "2009-04-15"
)

func (e *GETDeleteDomainVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2009-04-15":
		*e = GETDeleteDomainVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteDomainVersionEnum: %s", s)
	}
}

type GETDeleteDomainRequest struct {
	AWSAccessKeyID string                    `queryParam:"style=form,explode=true,name=AWSAccessKeyId"`
	Action         GETDeleteDomainActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The name of the domain to delete.
	DomainName       string                     `queryParam:"style=form,explode=true,name=DomainName"`
	Signature        string                     `queryParam:"style=form,explode=true,name=Signature"`
	SignatureMethod  string                     `queryParam:"style=form,explode=true,name=SignatureMethod"`
	SignatureVersion string                     `queryParam:"style=form,explode=true,name=SignatureVersion"`
	Timestamp        string                     `queryParam:"style=form,explode=true,name=Timestamp"`
	Version          GETDeleteDomainVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDeleteDomainResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
