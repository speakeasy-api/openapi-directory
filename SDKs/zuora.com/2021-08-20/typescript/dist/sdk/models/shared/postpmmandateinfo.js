"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POSTPMMandateInfo = exports.POSTPMMandateInfoMitProfileActionEnum = exports.POSTPMMandateInfoMitConsentAgreementSrcEnum = exports.POSTPMMandateInfoMandateReceivedStatusEnum = exports.POSTPMMandateInfoExistingMandateStatusEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Indicates whether the mandate is an existing mandate.
 *
 * @remarks
 *
 */
var POSTPMMandateInfoExistingMandateStatusEnum;
(function (POSTPMMandateInfoExistingMandateStatusEnum) {
    POSTPMMandateInfoExistingMandateStatusEnum["True"] = "true";
    POSTPMMandateInfoExistingMandateStatusEnum["False"] = "false";
})(POSTPMMandateInfoExistingMandateStatusEnum = exports.POSTPMMandateInfoExistingMandateStatusEnum || (exports.POSTPMMandateInfoExistingMandateStatusEnum = {}));
/**
 * Indicates whether the mandate is received from the gateway
 *
 * @remarks
 *
 */
var POSTPMMandateInfoMandateReceivedStatusEnum;
(function (POSTPMMandateInfoMandateReceivedStatusEnum) {
    POSTPMMandateInfoMandateReceivedStatusEnum["True"] = "true";
    POSTPMMandateInfoMandateReceivedStatusEnum["False"] = "false";
})(POSTPMMandateInfoMandateReceivedStatusEnum = exports.POSTPMMandateInfoMandateReceivedStatusEnum || (exports.POSTPMMandateInfoMandateReceivedStatusEnum = {}));
var POSTPMMandateInfoMitConsentAgreementSrcEnum;
(function (POSTPMMandateInfoMitConsentAgreementSrcEnum) {
    POSTPMMandateInfoMitConsentAgreementSrcEnum["External"] = "External";
})(POSTPMMandateInfoMitConsentAgreementSrcEnum = exports.POSTPMMandateInfoMitConsentAgreementSrcEnum || (exports.POSTPMMandateInfoMitConsentAgreementSrcEnum = {}));
/**
 * Specifies how Zuora activates the stored credential profile. Only applicable if you set the `status` field to `Active`.
 *
 * @remarks
 *
 * * `Activate` (default) - Use this value if you are creating the stored credential profile after receiving the customer's consent.
 *
 *   Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.
 *
 *   If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
 *
 *
 * * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
 *
 */
var POSTPMMandateInfoMitProfileActionEnum;
(function (POSTPMMandateInfoMitProfileActionEnum) {
    POSTPMMandateInfoMitProfileActionEnum["Activate"] = "Activate";
    POSTPMMandateInfoMitProfileActionEnum["Persist"] = "Persist";
})(POSTPMMandateInfoMitProfileActionEnum = exports.POSTPMMandateInfoMitProfileActionEnum || (exports.POSTPMMandateInfoMitProfileActionEnum = {}));
/**
 * The mandate information for the Credit Card, ACH, or Bank Transfer payment method.
 *
 * @remarks
 *
 * The following mandate fields are specific to the ACH and Bank Transfer payment methods:
 * * `mandateId`
 * * `mandateReceivedStatus`
 * * `existingMandateStatus`
 * * `mandateCreationDate`
 * * `mandateUpdateDate`
 * * `mandateStatus`
 * * `mandateReason`
 *
 * The following mandate fields are specific to the Credit Card payment method:
 * * `mitTransactionId`
 * * `mitProfileAgreedOn`
 * * `mitConsentAgreementRef`
 * * `mitConsentAgreementSrc`
 * * `mitProfileType`
 * * `mitProfileAction`
 *
 */
var POSTPMMandateInfo = /** @class */ (function (_super) {
    __extends(POSTPMMandateInfo, _super);
    function POSTPMMandateInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "existingMandateStatus" }),
        __metadata("design:type", String)
    ], POSTPMMandateInfo.prototype, "existingMandateStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mandateCreationDate" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], POSTPMMandateInfo.prototype, "mandateCreationDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mandateId" }),
        __metadata("design:type", String)
    ], POSTPMMandateInfo.prototype, "mandateId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mandateReason" }),
        __metadata("design:type", String)
    ], POSTPMMandateInfo.prototype, "mandateReason", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mandateReceivedStatus" }),
        __metadata("design:type", String)
    ], POSTPMMandateInfo.prototype, "mandateReceivedStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mandateStatus" }),
        __metadata("design:type", String)
    ], POSTPMMandateInfo.prototype, "mandateStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mandateUpdateDate" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], POSTPMMandateInfo.prototype, "mandateUpdateDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mitConsentAgreementRef" }),
        __metadata("design:type", String)
    ], POSTPMMandateInfo.prototype, "mitConsentAgreementRef", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mitConsentAgreementSrc" }),
        __metadata("design:type", String)
    ], POSTPMMandateInfo.prototype, "mitConsentAgreementSrc", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mitProfileAction" }),
        __metadata("design:type", String)
    ], POSTPMMandateInfo.prototype, "mitProfileAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mitProfileAgreedOn" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], POSTPMMandateInfo.prototype, "mitProfileAgreedOn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mitProfileType" }),
        __metadata("design:type", String)
    ], POSTPMMandateInfo.prototype, "mitProfileType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mitTransactionId" }),
        __metadata("design:type", String)
    ], POSTPMMandateInfo.prototype, "mitTransactionId", void 0);
    return POSTPMMandateInfo;
}(utils_1.SpeakeasyBase));
exports.POSTPMMandateInfo = POSTPMMandateInfo;
