// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetDiscoveryV2ClassificationsIncludeLicensedContentEnum - Yes if you want to display licensed content
type GetDiscoveryV2ClassificationsIncludeLicensedContentEnum string

const (
	GetDiscoveryV2ClassificationsIncludeLicensedContentEnumYes GetDiscoveryV2ClassificationsIncludeLicensedContentEnum = "yes"
	GetDiscoveryV2ClassificationsIncludeLicensedContentEnumNo  GetDiscoveryV2ClassificationsIncludeLicensedContentEnum = " no"
)

func (e *GetDiscoveryV2ClassificationsIncludeLicensedContentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yes":
		fallthrough
	case " no":
		*e = GetDiscoveryV2ClassificationsIncludeLicensedContentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2ClassificationsIncludeLicensedContentEnum: %s", s)
	}
}

// GetDiscoveryV2ClassificationsIncludeSpellcheckEnum - yes, to include spell check suggestions in the response.
type GetDiscoveryV2ClassificationsIncludeSpellcheckEnum string

const (
	GetDiscoveryV2ClassificationsIncludeSpellcheckEnumYes GetDiscoveryV2ClassificationsIncludeSpellcheckEnum = "yes"
	GetDiscoveryV2ClassificationsIncludeSpellcheckEnumNo  GetDiscoveryV2ClassificationsIncludeSpellcheckEnum = " no"
)

func (e *GetDiscoveryV2ClassificationsIncludeSpellcheckEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yes":
		fallthrough
	case " no":
		*e = GetDiscoveryV2ClassificationsIncludeSpellcheckEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2ClassificationsIncludeSpellcheckEnum: %s", s)
	}
}

// GetDiscoveryV2ClassificationsIncludeTestEnum - True if you want to have entities flag as test in the response. Only, if you only wanted test entities
type GetDiscoveryV2ClassificationsIncludeTestEnum string

const (
	GetDiscoveryV2ClassificationsIncludeTestEnumYes  GetDiscoveryV2ClassificationsIncludeTestEnum = "yes"
	GetDiscoveryV2ClassificationsIncludeTestEnumNo   GetDiscoveryV2ClassificationsIncludeTestEnum = " no"
	GetDiscoveryV2ClassificationsIncludeTestEnumOnly GetDiscoveryV2ClassificationsIncludeTestEnum = " only"
)

func (e *GetDiscoveryV2ClassificationsIncludeTestEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yes":
		fallthrough
	case " no":
		fallthrough
	case " only":
		*e = GetDiscoveryV2ClassificationsIncludeTestEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2ClassificationsIncludeTestEnum: %s", s)
	}
}

// GetDiscoveryV2ClassificationsSourceEnum - Filter entities by its source name
type GetDiscoveryV2ClassificationsSourceEnum string

const (
	GetDiscoveryV2ClassificationsSourceEnumTicketmaster GetDiscoveryV2ClassificationsSourceEnum = "ticketmaster"
	GetDiscoveryV2ClassificationsSourceEnumUniverse     GetDiscoveryV2ClassificationsSourceEnum = " universe"
	GetDiscoveryV2ClassificationsSourceEnumFrontgate    GetDiscoveryV2ClassificationsSourceEnum = " frontgate"
	GetDiscoveryV2ClassificationsSourceEnumTmr          GetDiscoveryV2ClassificationsSourceEnum = " tmr"
)

func (e *GetDiscoveryV2ClassificationsSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ticketmaster":
		fallthrough
	case " universe":
		fallthrough
	case " frontgate":
		fallthrough
	case " tmr":
		*e = GetDiscoveryV2ClassificationsSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2ClassificationsSourceEnum: %s", s)
	}
}

type GetDiscoveryV2ClassificationsRequest struct {
	// Filter entities by its id
	ID *string `queryParam:"style=form,explode=true,name=id"`
	// Yes if you want to display licensed content
	IncludeLicensedContent *GetDiscoveryV2ClassificationsIncludeLicensedContentEnum `queryParam:"style=form,explode=true,name=includeLicensedContent"`
	// yes, to include spell check suggestions in the response.
	IncludeSpellcheck *GetDiscoveryV2ClassificationsIncludeSpellcheckEnum `queryParam:"style=form,explode=true,name=includeSpellcheck"`
	// True if you want to have entities flag as test in the response. Only, if you only wanted test entities
	IncludeTest *GetDiscoveryV2ClassificationsIncludeTestEnum `queryParam:"style=form,explode=true,name=includeTest"`
	// Keyword to search on
	Keyword *string `queryParam:"style=form,explode=true,name=keyword"`
	// The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*')
	Locale *string `queryParam:"style=form,explode=true,name=locale"`
	// Page number
	Page *string `queryParam:"style=form,explode=true,name=page"`
	// Page size of the response
	Size *string `queryParam:"style=form,explode=true,name=size"`
	// Sorting order of the search result
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Filter entities by its source name
	Source *GetDiscoveryV2ClassificationsSourceEnum `queryParam:"style=form,explode=true,name=source"`
}

type GetDiscoveryV2ClassificationsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
