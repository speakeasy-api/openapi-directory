"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import access_token_enum_factor_types_enum as shared_access_token_enum_factor_types_enum
from ..shared import verify_v2_service_access_token as shared_verify_v2_service_access_token
from typing import Optional

CREATE_ACCESS_TOKEN_SERVERS = [
	"https://verify.twilio.com",
]


@dataclasses.dataclass
class CreateAccessTokenSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class CreateAccessTokenCreateAccessTokenRequest:
    
    factor_type: shared_access_token_enum_factor_types_enum.AccessTokenEnumFactorTypesEnum = dataclasses.field(metadata={'form': { 'field_name': 'FactorType' }})  
    identity: str = dataclasses.field(metadata={'form': { 'field_name': 'Identity' }})
    r"""The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user's UUID, GUID, or SID."""  
    factor_friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FactorFriendlyName' }})
    r"""The friendly name of the factor that is going to be created with this access token"""  
    ttl: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Ttl' }})
    r"""How long, in seconds, the access token is valid. Can be an integer between 60 and 300. Default is 60."""  
    

@dataclasses.dataclass
class CreateAccessTokenRequest:
    
    service_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'ServiceSid', 'style': 'simple', 'explode': False }})
    r"""The unique SID identifier of the Service."""  
    request_body: Optional[CreateAccessTokenCreateAccessTokenRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class CreateAccessTokenResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    verify_v2_service_access_token: Optional[shared_verify_v2_service_access_token.VerifyV2ServiceAccessToken] = dataclasses.field(default=None)
    r"""Created"""  
    