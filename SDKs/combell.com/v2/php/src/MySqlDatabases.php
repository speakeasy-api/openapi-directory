<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class MySqlDatabases 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Change password for mysql user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeDatabaseUserPasswordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeDatabaseUserPasswordResponse
     */
	public function changeDatabaseUserPassword(
        \OpenAPI\OpenAPI\Models\Operations\ChangeDatabaseUserPasswordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeDatabaseUserPasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mysqldatabases/{databaseName}/users/{userName}/password', \OpenAPI\OpenAPI\Models\Operations\ChangeDatabaseUserPasswordRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateUserPasswordRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChangeDatabaseUserPasswordRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeDatabaseUserPasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Enable/disable mysql user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeDatabaseUserStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeDatabaseUserStatusResponse
     */
	public function changeDatabaseUserStatus(
        \OpenAPI\OpenAPI\Models\Operations\ChangeDatabaseUserStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeDatabaseUserStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mysqldatabases/{databaseName}/users/{userName}/status', \OpenAPI\OpenAPI\Models\Operations\ChangeDatabaseUserStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateUserStatusRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChangeDatabaseUserStatusRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeDatabaseUserStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Create a new mysql database
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateMySqlDatabase $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateMySqlDatabaseResponse
     */
	public function createMySqlDatabase(
        \OpenAPI\OpenAPI\Models\Shared\CreateMySqlDatabase $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateMySqlDatabaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mysqldatabases');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateMySqlDatabaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BadRequestResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new mysql user
     * 
     * The creation of a new mysql user will result in a user with read_only rights.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMySqlUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateMySqlUserResponse
     */
	public function createMySqlUser(
        \OpenAPI\OpenAPI\Models\Operations\CreateMySqlUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateMySqlUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mysqldatabases/{databaseName}/users', \OpenAPI\OpenAPI\Models\Operations\CreateMySqlUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createMySqlUser", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateMySqlUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateMySqlUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BadRequestResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a mysql database
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDatabaseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDatabaseResponse
     */
	public function deleteDatabase(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDatabaseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDatabaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mysqldatabases/{databaseName}', \OpenAPI\OpenAPI\Models\Operations\DeleteDatabaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteDatabaseRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDatabaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Delete a mysql user
     * 
     * The deletion of a mysql user is allowed for users with read_only rights.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDatabaseUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDatabaseUserResponse
     */
	public function deleteDatabaseUser(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDatabaseUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDatabaseUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mysqldatabases/{databaseName}/users/{userName}', \OpenAPI\OpenAPI\Models\Operations\DeleteDatabaseUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteDatabaseUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDatabaseUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Overview of mysql users
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDatabaseUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDatabaseUsersResponse
     */
	public function getDatabaseUsers(
        \OpenAPI\OpenAPI\Models\Operations\GetDatabaseUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDatabaseUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mysqldatabases/{databaseName}/users', \OpenAPI\OpenAPI\Models\Operations\GetDatabaseUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDatabaseUsersRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDatabaseUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mySqlUsers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MySqlUser>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific database
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMySqlDatabaseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMySqlDatabaseResponse
     */
	public function getMySqlDatabase(
        \OpenAPI\OpenAPI\Models\Operations\GetMySqlDatabaseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMySqlDatabaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mysqldatabases/{databaseName}', \OpenAPI\OpenAPI\Models\Operations\GetMySqlDatabaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMySqlDatabaseRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMySqlDatabaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mySqlDatabase = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MySqlDatabase', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Overview of mysql databases
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMySqlDatabasesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMySqlDatabasesResponse
     */
	public function getMySqlDatabases(
        \OpenAPI\OpenAPI\Models\Operations\GetMySqlDatabasesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMySqlDatabasesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mysqldatabases');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMySqlDatabasesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMySqlDatabasesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mySqlDatabases = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MySqlDatabase>', 'json');
            }
        }

        return $response;
    }
}