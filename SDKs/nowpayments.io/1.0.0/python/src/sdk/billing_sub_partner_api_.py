"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class BillingSubPartnerAPI:
    r"""NOWPayments allows you to create sub-partner accounts for your users, enabling full-fledged crypto billing solution."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_all_transfers(self, request: operations.GetAllTransfersRequest) -> operations.GetAllTransfersResponse:
        r"""Get all transfers
        Returns the entire list of transfers created by your sub-partners.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/sub-partner/transfers'
        
        query_params = utils.get_query_params(operations.GetAllTransfersRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllTransfersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllTransfers200ApplicationJSON])
                res.get_all_transfers_200_application_json_object = out

        return res

    def get_sub_partner_balance(self, request: operations.GetSubPartnerBalanceRequest) -> operations.GetSubPartnerBalanceResponse:
        r"""Get sub-partner balance
        This request can be made only from a whitelisted IP.  
        If IP whitelisting is disabled, this request can be made by any user that has an API key.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSubPartnerBalanceRequest, base_url, '/v1/sub-partner/balance/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubPartnerBalanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSubPartnerBalance200ApplicationJSON])
                res.get_sub_partner_balance_200_application_json_object = out

        return res

    def get_sub_partners(self, request: operations.GetSubPartnersRequest) -> operations.GetSubPartnersResponse:
        r"""Get sub-partners
        This method returns the entire list of your sub-partners.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/sub-partner'
        
        query_params = utils.get_query_params(operations.GetSubPartnersRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubPartnersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_transfer(self, request: operations.GetTransferRequest) -> operations.GetTransferResponse:
        r"""Get transfer
        Get the actual information about the transfer. You need to provide the transfer ID in the request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTransferRequest, base_url, '/v1/sub-partner/transfer/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransferResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTransfer200ApplicationJSON])
                res.get_transfer_200_application_json_object = out

        return res

    