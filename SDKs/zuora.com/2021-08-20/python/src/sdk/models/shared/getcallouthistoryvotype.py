"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETCalloutHistoryVOType:
    
    attempted_num: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attemptedNum'), 'exclude': lambda f: f is None }})
    r"""The number of times the callout was retried."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""The time that the calloutHistory record was made."""  
    event_category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventCategory'), 'exclude': lambda f: f is None }})
    r"""The event category for the callout."""  
    event_context: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventContext'), 'exclude': lambda f: f is None }})
    r"""The context of the callout event."""  
    notification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notification'), 'exclude': lambda f: f is None }})
    r"""The name of the notification."""  
    request_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestMethod'), 'exclude': lambda f: f is None }})
    r"""The request method set in notifications settings."""  
    request_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestUrl'), 'exclude': lambda f: f is None }})
    r"""The base url set in notifications settings."""  
    response_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responseCode'), 'exclude': lambda f: f is None }})
    r"""The responseCode of the request."""  
    response_content: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responseContent'), 'exclude': lambda f: f is None }})  
    