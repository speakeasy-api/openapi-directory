<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class GeocodeReverseResponse
{
    /**
     * The complete address using comma-separated values
     * 
     * @var string $address
     */
	#[\JMS\Serializer\Annotation\SerializedName('address')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $address;
    
    /**
     * The components which make up the address such as road, city, state, etc
     * 
     * @var array<string, string> $addressComponents
     */
	#[\JMS\Serializer\Annotation\SerializedName('address-components')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    public array $addressComponents;
    
    /**
     * The city of the location
     * 
     * @var string $city
     */
	#[\JMS\Serializer\Annotation\SerializedName('city')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $city;
    
    /**
     * The country of the location
     * 
     * @var string $country
     */
	#[\JMS\Serializer\Annotation\SerializedName('country')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $country;
    
    /**
     * The ISO 2-letter country code of the location
     * 
     * @var string $countryCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('country-code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $countryCode;
    
    /**
     * The ISO 3-letter country code of the location
     * 
     * @var string $countryCode3
     */
	#[\JMS\Serializer\Annotation\SerializedName('country-code3')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $countryCode3;
    
    /**
     * ISO 4217 currency code associated with the country
     * 
     * @var string $currencyCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('currency-code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $currencyCode;
    
    /**
     * True if these coordinates map to a real location
     * 
     * @var bool $found
     */
	#[\JMS\Serializer\Annotation\SerializedName('found')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $found;
    
    /**
     * The location latitude
     * 
     * @var float $latitude
     */
	#[\JMS\Serializer\Annotation\SerializedName('latitude')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $latitude;
    
    /**
     * Array of strings containing any location tags associated with the address. Tags are additional pieces of metadata about a specific location, there are thousands of different tags. Some examples of tags: shop, office, cafe, bank, pub
     * 
     * @var array<string> $locationTags
     */
	#[\JMS\Serializer\Annotation\SerializedName('location-tags')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    public array $locationTags;
    
    /**
     * The detected location type ordered roughly from most to least precise, possible values are: <br> <ul> <li>address - indicates a precise street address</li> <li>street - accurate to the street level but may not point to the exact location of the house/building number</li> <li>city - accurate to the city level, this includes villages, towns, suburbs, etc</li> <li>postal-code - indicates a postal code area (no house or street information present)</li> <li>railway - location is part of a rail network such as a station or railway track</li> <li>natural - indicates a natural feature, for example a mountain peak or a waterway</li> <li>island - location is an island or archipelago</li> <li>administrative - indicates an administrative boundary such as a country, state or province</li> </ul>
     * 
     * @var string $locationType
     */
	#[\JMS\Serializer\Annotation\SerializedName('location-type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $locationType;
    
    /**
     * The location longitude
     * 
     * @var float $longitude
     */
	#[\JMS\Serializer\Annotation\SerializedName('longitude')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $longitude;
    
    /**
     * The formatted address using local standards suitable for printing on an envelope
     * 
     * @var string $postalAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('postal-address')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $postalAddress;
    
    /**
     * The postal code for the location
     * 
     * @var string $postalCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('postal-code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $postalCode;
    
    /**
     * The ISO 3166-2 region code for the location
     * 
     * @var string $regionCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('region-code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $regionCode;
    
    /**
     * The state of the location
     * 
     * @var string $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $state;
    
    /**
     * Map containing timezone details for the location
     * 
     * @var array<string, \OpenAPI\OpenAPI\Models\Shared\Timezone> $timezone
     */
	#[\JMS\Serializer\Annotation\SerializedName('timezone')]
    #[\JMS\Serializer\Annotation\Type('array<string, OpenAPI\OpenAPI\Models\Shared\Timezone>')]
    public array $timezone;
    
	public function __construct()
	{
		$this->address = "";
		$this->addressComponents = [];
		$this->city = "";
		$this->country = "";
		$this->countryCode = "";
		$this->countryCode3 = "";
		$this->currencyCode = "";
		$this->found = false;
		$this->latitude = 0;
		$this->locationTags = [];
		$this->locationType = "";
		$this->longitude = 0;
		$this->postalAddress = "";
		$this->postalCode = "";
		$this->regionCode = "";
		$this->state = "";
		$this->timezone = [];
	}
}
