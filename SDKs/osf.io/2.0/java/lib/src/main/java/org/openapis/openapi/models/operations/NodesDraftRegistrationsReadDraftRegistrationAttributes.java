/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;

/**
 * NodesDraftRegistrationsReadDraftRegistrationAttributes - The properties of the Draft Registration entity.
 */
public class NodesDraftRegistrationsReadDraftRegistrationAttributes {
    /**
     * The category of the Draft Registration.
     */
    
    public String category;
    public NodesDraftRegistrationsReadDraftRegistrationAttributes withCategory(String category) {
        this.category = category;
        return this;
    }
    
    /**
     * The current users permission level for the Draft Registration.
     */
    
    public String[] currentUserPermissions;
    public NodesDraftRegistrationsReadDraftRegistrationAttributes withCurrentUserPermissions(String[] currentUserPermissions) {
        this.currentUserPermissions = currentUserPermissions;
        return this;
    }
    
    /**
     * The time at which the draft registration was first initiated, as an iso8601 formatted timestamp.
     */
    
    public OffsetDateTime datetimeInitiated;
    public NodesDraftRegistrationsReadDraftRegistrationAttributes withDatetimeInitiated(OffsetDateTime datetimeInitiated) {
        this.datetimeInitiated = datetimeInitiated;
        return this;
    }
    
    /**
     * The time at which the draft registration was last updated, as an iso8601 formatted timestamp.
     */
    
    public OffsetDateTime datetimeUpdated;
    public NodesDraftRegistrationsReadDraftRegistrationAttributes withDatetimeUpdated(OffsetDateTime datetimeUpdated) {
        this.datetimeUpdated = datetimeUpdated;
        return this;
    }
    
    /**
     * The description of the Draft Registration.
     */
    
    public String description;
    public NodesDraftRegistrationsReadDraftRegistrationAttributes withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * This indicates whether a Draft Registration was branched from a project.
     */
    
    public Boolean hasProject;
    public NodesDraftRegistrationsReadDraftRegistrationAttributes withHasProject(Boolean hasProject) {
        this.hasProject = hasProject;
        return this;
    }
    
    
    public NodesDraftRegistrationsReadDraftRegistrationAttributesNodeLicense nodeLicense;
    public NodesDraftRegistrationsReadDraftRegistrationAttributes withNodeLicense(NodesDraftRegistrationsReadDraftRegistrationAttributesNodeLicense nodeLicense) {
        this.nodeLicense = nodeLicense;
        return this;
    }
    
    /**
     * This is a legacy format for `registration_responses`.
     */
    
    public java.util.Map<String, Object> registrationMetadata;
    public NodesDraftRegistrationsReadDraftRegistrationAttributes withRegistrationMetadata(java.util.Map<String, Object> registrationMetadata) {
        this.registrationMetadata = registrationMetadata;
        return this;
    }
    
    /**
     * A dictionary of question IDs and responses from the registration schema.
     */
    
    public java.util.Map<String, Object> registrationResponses;
    public NodesDraftRegistrationsReadDraftRegistrationAttributes withRegistrationResponses(java.util.Map<String, Object> registrationResponses) {
        this.registrationResponses = registrationResponses;
        return this;
    }
    
    /**
     * The searchable tags of the Draft Registration.
     */
    
    public String[] tags;
    public NodesDraftRegistrationsReadDraftRegistrationAttributes withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * The title of the Draft Registration.
     */
    
    public String title;
    public NodesDraftRegistrationsReadDraftRegistrationAttributes withTitle(String title) {
        this.title = title;
        return this;
    }
    
}
