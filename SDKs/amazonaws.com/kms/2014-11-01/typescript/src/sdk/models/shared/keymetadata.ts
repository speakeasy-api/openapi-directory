/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EncryptionAlgorithmSpecEnum } from "./encryptionalgorithmspecenum";
import { ExpirationModelTypeEnum } from "./expirationmodeltypeenum";
import { KeyManagerTypeEnum } from "./keymanagertypeenum";
import { KeySpecEnum } from "./keyspecenum";
import { KeyStateEnum } from "./keystateenum";
import { KeyUsageTypeEnum } from "./keyusagetypeenum";
import { MacAlgorithmSpecEnum } from "./macalgorithmspecenum";
import { MultiRegionConfiguration } from "./multiregionconfiguration";
import { OriginTypeEnum } from "./origintypeenum";
import { SigningAlgorithmSpecEnum } from "./signingalgorithmspecenum";
import { XksKeyConfigurationType } from "./xkskeyconfigurationtype";
import { Expose, Transform, Type } from "class-transformer";

/**
 * <p>Instead, use the <code>KeySpec</code> field.</p> <p>The <code>KeySpec</code> and <code>CustomerMasterKeySpec</code> fields have the same value. We recommend that you use the <code>KeySpec</code> field in your code. However, to avoid breaking changes, KMS supports both fields.</p>This field has been deprecated. Instead, use the KeySpec field.
 */
export enum KeyMetadataCustomerMasterKeySpecEnum {
  Rsa2048 = "RSA_2048",
  Rsa3072 = "RSA_3072",
  Rsa4096 = "RSA_4096",
  EccNistP256 = "ECC_NIST_P256",
  EccNistP384 = "ECC_NIST_P384",
  EccNistP521 = "ECC_NIST_P521",
  EccSecgP256K1 = "ECC_SECG_P256K1",
  SymmetricDefault = "SYMMETRIC_DEFAULT",
  Hmac224 = "HMAC_224",
  Hmac256 = "HMAC_256",
  Hmac384 = "HMAC_384",
  Hmac512 = "HMAC_512",
  Sm2 = "SM2",
}

/**
 * <p>Contains metadata about a KMS key.</p> <p>This data type is used as a response element for the <a>CreateKey</a>, <a>DescribeKey</a>, and <a>ReplicateKey</a> operations.</p>
 */
export class KeyMetadata extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AWSAccountId" })
  awsAccountId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CloudHsmClusterId" })
  cloudHsmClusterId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CreationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "CustomKeyStoreId" })
  customKeyStoreId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CustomerMasterKeySpec" })
  customerMasterKeySpec?: KeyMetadataCustomerMasterKeySpecEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "DeletionDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  deletionDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Enabled" })
  enabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "EncryptionAlgorithms" })
  encryptionAlgorithms?: EncryptionAlgorithmSpecEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "ExpirationModel" })
  expirationModel?: ExpirationModelTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "KeyId" })
  keyId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "KeyManager" })
  keyManager?: KeyManagerTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "KeySpec" })
  keySpec?: KeySpecEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "KeyState" })
  keyState?: KeyStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "KeyUsage" })
  keyUsage?: KeyUsageTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "MacAlgorithms" })
  macAlgorithms?: MacAlgorithmSpecEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "MultiRegion" })
  multiRegion?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "MultiRegionConfiguration" })
  @Type(() => MultiRegionConfiguration)
  multiRegionConfiguration?: MultiRegionConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "Origin" })
  origin?: OriginTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "PendingDeletionWindowInDays" })
  pendingDeletionWindowInDays?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "SigningAlgorithms" })
  signingAlgorithms?: SigningAlgorithmSpecEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "ValidTo" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  validTo?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "XksKeyConfiguration" })
  @Type(() => XksKeyConfigurationType)
  xksKeyConfiguration?: XksKeyConfigurationType;
}
