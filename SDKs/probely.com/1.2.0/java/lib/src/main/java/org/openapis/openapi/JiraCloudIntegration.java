/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * To start integrating Probely with Jira you will first need to add the
 * Probely app to your Jira instance.
 * Go to the marketplace, search for Probely and install the application.
 * When prompted click the "Get Started" button and follow the steps described
 * to connect both accounts.
 * A short explanation of the sync options can be found
 * [here](https://help.probely.com/integrations/jira-syncronization-settings).
 * 
 */
public class JiraCloudIntegration {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public JiraCloudIntegration(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * List Jira Projects
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsResponse getIntegrationsJiraCloudProjects() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/integrations/jira-cloud/projects/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsResponse res = new org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsResponse() {{
            jiraProjects = null;
            getIntegrationsJiraCloudProjects401ApplicationJSONObject = null;
            getIntegrationsJiraCloudProjects403ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.JiraProject[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.JiraProject[].class);
                res.jiraProjects = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjects401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjects401ApplicationJSON.class);
                res.getIntegrationsJiraCloudProjects401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjects403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjects403ApplicationJSON.class);
                res.getIntegrationsJiraCloudProjects403ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Retrieve project issue types
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesResponse getIntegrationsJiraCloudProjectsProjectIdIssueTypes(org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesPathParams.class, baseUrl, "/integrations/jira-cloud/projects/{project_id}/issue_types/", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesResponse res = new org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesResponse() {{
            jiraIssueTypes = null;
            getIntegrationsJiraCloudProjectsProjectIdIssueTypes401ApplicationJSONObject = null;
            getIntegrationsJiraCloudProjectsProjectIdIssueTypes403ApplicationJSONObject = null;
            getIntegrationsJiraCloudProjectsProjectIdIssueTypes404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.JiraIssueType[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.JiraIssueType[].class);
                res.jiraIssueTypes = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypes401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypes401ApplicationJSON.class);
                res.getIntegrationsJiraCloudProjectsProjectIdIssueTypes401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypes403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypes403ApplicationJSON.class);
                res.getIntegrationsJiraCloudProjectsProjectIdIssueTypes403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypes404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypes404ApplicationJSON.class);
                res.getIntegrationsJiraCloudProjectsProjectIdIssueTypes404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Retrieve issue priorities
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPrioritiesResponse getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities(org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPrioritiesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPrioritiesPathParams.class, baseUrl, "/integrations/jira-cloud/projects/{project_id}/issue_types/{issue_type_id}/priorities/", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPrioritiesResponse res = new org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPrioritiesResponse() {{
            jiraIssuePriorities = null;
            getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities401ApplicationJSONObject = null;
            getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities403ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.JiraIssuePriority[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.JiraIssuePriority[].class);
                res.jiraIssuePriorities = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities401ApplicationJSON.class);
                res.getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities403ApplicationJSON.class);
                res.getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities403ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Retrieve issue statuses
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatusResponse getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus(org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatusRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatusPathParams.class, baseUrl, "/integrations/jira-cloud/projects/{project_id}/issue_types/{issue_type_id}/status/", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatusResponse res = new org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatusResponse() {{
            jiraIssueStatuses = null;
            getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus401ApplicationJSONObject = null;
            getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus403ApplicationJSONObject = null;
            getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.JiraIssueStatus[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.JiraIssueStatus[].class);
                res.jiraIssueStatuses = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus401ApplicationJSON.class);
                res.getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus403ApplicationJSON.class);
                res.getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus404ApplicationJSON.class);
                res.getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Retrieve Jira Cloud finding configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse getTargetsTargetIdFindingsIdIntegrationsJiraCloud(org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdIntegrationsJiraCloudPathParams.class, baseUrl, "/targets/{target_id}/findings/{id}/integrations/jira-cloud/", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse res = new org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse() {{
            jiraFinding = null;
            getTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSONObject = null;
            getTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.JiraFinding out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.JiraFinding.class);
                res.jiraFinding = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSON.class);
                res.getTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSON.class);
                res.getTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Retrieve Jira Cloud Target configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsJiraCloudResponse getTargetsTargetIdIntegrationsJiraCloud(org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsJiraCloudRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsJiraCloudPathParams.class, baseUrl, "/targets/{target_id}/integrations/jira-cloud/", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsJiraCloudResponse res = new org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsJiraCloudResponse() {{
            jiraScope = null;
            getTargetsTargetIdIntegrationsJiraCloud401ApplicationJSONObject = null;
            getTargetsTargetIdIntegrationsJiraCloud403ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.JiraScope out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.JiraScope.class);
                res.jiraScope = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsJiraCloud401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsJiraCloud401ApplicationJSON.class);
                res.getTargetsTargetIdIntegrationsJiraCloud401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsJiraCloud403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTargetsTargetIdIntegrationsJiraCloud403ApplicationJSON.class);
                res.getTargetsTargetIdIntegrationsJiraCloud403ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update Jira Cloud finding configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse patchTargetsTargetIdFindingsIdIntegrationsJiraCloud(org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloudPathParams.class, baseUrl, "/targets/{target_id}/findings/{id}/integrations/jira-cloud/", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse res = new org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse() {{
            jiraFinding = null;
            patchTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSONObject = null;
            patchTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSONObject = null;
            patchTargetsTargetIdFindingsIdIntegrationsJiraCloud404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.JiraFinding out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.JiraFinding.class);
                res.jiraFinding = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSON.class);
                res.patchTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSON.class);
                res.patchTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloud404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloud404ApplicationJSON.class);
                res.patchTargetsTargetIdFindingsIdIntegrationsJiraCloud404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update Jira Cloud target configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsJiraCloudResponse patchTargetsTargetIdIntegrationsJiraCloud(org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsJiraCloudRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsJiraCloudPathParams.class, baseUrl, "/targets/{target_id}/integrations/jira-cloud/", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsJiraCloudResponse res = new org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsJiraCloudResponse() {{
            jiraScope = null;
            patchTargetsTargetIdIntegrationsJiraCloud401ApplicationJSONObject = null;
            patchTargetsTargetIdIntegrationsJiraCloud403ApplicationJSONObject = null;
            patchTargetsTargetIdIntegrationsJiraCloud404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.JiraScope out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.JiraScope.class);
                res.jiraScope = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsJiraCloud401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsJiraCloud401ApplicationJSON.class);
                res.patchTargetsTargetIdIntegrationsJiraCloud401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsJiraCloud403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsJiraCloud403ApplicationJSON.class);
                res.patchTargetsTargetIdIntegrationsJiraCloud403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsJiraCloud404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PatchTargetsTargetIdIntegrationsJiraCloud404ApplicationJSON.class);
                res.patchTargetsTargetIdIntegrationsJiraCloud404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update Jira Cloud finding configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse putTargetsTargetIdFindingsIdIntegrationsJiraCloud(org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloudPathParams.class, baseUrl, "/targets/{target_id}/findings/{id}/integrations/jira-cloud/", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse res = new org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse() {{
            jiraFinding = null;
            putTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSONObject = null;
            putTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSONObject = null;
            putTargetsTargetIdFindingsIdIntegrationsJiraCloud404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.JiraFinding out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.JiraFinding.class);
                res.jiraFinding = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSON.class);
                res.putTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSON.class);
                res.putTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloud404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloud404ApplicationJSON.class);
                res.putTargetsTargetIdFindingsIdIntegrationsJiraCloud404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update Jira Cloud target configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsJiraCloudResponse putTargetsTargetIdIntegrationsJiraCloud(org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsJiraCloudRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsJiraCloudPathParams.class, baseUrl, "/targets/{target_id}/integrations/jira-cloud/", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsJiraCloudResponse res = new org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsJiraCloudResponse() {{
            jiraScope = null;
            putTargetsTargetIdIntegrationsJiraCloud401ApplicationJSONObject = null;
            putTargetsTargetIdIntegrationsJiraCloud403ApplicationJSONObject = null;
            putTargetsTargetIdIntegrationsJiraCloud404ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.JiraScope out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.JiraScope.class);
                res.jiraScope = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsJiraCloud401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsJiraCloud401ApplicationJSON.class);
                res.putTargetsTargetIdIntegrationsJiraCloud401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsJiraCloud403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsJiraCloud403ApplicationJSON.class);
                res.putTargetsTargetIdIntegrationsJiraCloud403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsJiraCloud404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutTargetsTargetIdIntegrationsJiraCloud404ApplicationJSON.class);
                res.putTargetsTargetIdIntegrationsJiraCloud404ApplicationJSONObject = out;
            }
        }

        return res;
    }
}