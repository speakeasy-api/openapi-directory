// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MediaTypeEnum - String type of the media element.
type MediaTypeEnum string

const (
	MediaTypeEnumYoutube          MediaTypeEnum = "youtube"
	MediaTypeEnumCdphotothread    MediaTypeEnum = "cdphotothread"
	MediaTypeEnumImgur            MediaTypeEnum = "imgur"
	MediaTypeEnumFacebookProfile  MediaTypeEnum = "facebook-profile"
	MediaTypeEnumYoutubeChannel   MediaTypeEnum = "youtube-channel"
	MediaTypeEnumTwitterProfile   MediaTypeEnum = "twitter-profile"
	MediaTypeEnumGithubProfile    MediaTypeEnum = "github-profile"
	MediaTypeEnumInstagramProfile MediaTypeEnum = "instagram-profile"
	MediaTypeEnumPeriscopeProfile MediaTypeEnum = "periscope-profile"
	MediaTypeEnumGrabcad          MediaTypeEnum = "grabcad"
	MediaTypeEnumInstagramImage   MediaTypeEnum = "instagram-image"
	MediaTypeEnumExternalLink     MediaTypeEnum = "external-link"
	MediaTypeEnumAvatar           MediaTypeEnum = "avatar"
)

func (e MediaTypeEnum) ToPointer() *MediaTypeEnum {
	return &e
}

func (e *MediaTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "youtube":
		fallthrough
	case "cdphotothread":
		fallthrough
	case "imgur":
		fallthrough
	case "facebook-profile":
		fallthrough
	case "youtube-channel":
		fallthrough
	case "twitter-profile":
		fallthrough
	case "github-profile":
		fallthrough
	case "instagram-profile":
		fallthrough
	case "periscope-profile":
		fallthrough
	case "grabcad":
		fallthrough
	case "instagram-image":
		fallthrough
	case "external-link":
		fallthrough
	case "avatar":
		*e = MediaTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MediaTypeEnum: %v", v)
	}
}

// Media - The `Media` object contains a reference for most any media associated with a team or event on TBA.
type Media struct {
	// If required, a JSON dict of additional media information.
	Details map[string]interface{} `json:"details,omitempty"`
	// Direct URL to the media.
	DirectURL *string `json:"direct_url,omitempty"`
	// The key used to identify this media on the media site.
	ForeignKey string `json:"foreign_key"`
	// True if the media is of high quality.
	Preferred *bool `json:"preferred,omitempty"`
	// String type of the media element.
	Type MediaTypeEnum `json:"type"`
	// The URL that leads to the full web page for the media, if one exists.
	ViewURL *string `json:"view_url,omitempty"`
}
