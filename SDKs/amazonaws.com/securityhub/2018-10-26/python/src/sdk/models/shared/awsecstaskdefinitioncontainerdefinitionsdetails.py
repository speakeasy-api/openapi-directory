"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsecstaskdefinitioncontainerdefinitionsdependsondetails as shared_awsecstaskdefinitioncontainerdefinitionsdependsondetails
from ..shared import awsecstaskdefinitioncontainerdefinitionsenvironmentdetails as shared_awsecstaskdefinitioncontainerdefinitionsenvironmentdetails
from ..shared import awsecstaskdefinitioncontainerdefinitionsenvironmentfilesdetails as shared_awsecstaskdefinitioncontainerdefinitionsenvironmentfilesdetails
from ..shared import awsecstaskdefinitioncontainerdefinitionsextrahostsdetails as shared_awsecstaskdefinitioncontainerdefinitionsextrahostsdetails
from ..shared import awsecstaskdefinitioncontainerdefinitionsfirelensconfigurationdetails as shared_awsecstaskdefinitioncontainerdefinitionsfirelensconfigurationdetails
from ..shared import awsecstaskdefinitioncontainerdefinitionshealthcheckdetails as shared_awsecstaskdefinitioncontainerdefinitionshealthcheckdetails
from ..shared import awsecstaskdefinitioncontainerdefinitionslinuxparametersdetails as shared_awsecstaskdefinitioncontainerdefinitionslinuxparametersdetails
from ..shared import awsecstaskdefinitioncontainerdefinitionslogconfigurationdetails as shared_awsecstaskdefinitioncontainerdefinitionslogconfigurationdetails
from ..shared import awsecstaskdefinitioncontainerdefinitionsmountpointsdetails as shared_awsecstaskdefinitioncontainerdefinitionsmountpointsdetails
from ..shared import awsecstaskdefinitioncontainerdefinitionsportmappingsdetails as shared_awsecstaskdefinitioncontainerdefinitionsportmappingsdetails
from ..shared import awsecstaskdefinitioncontainerdefinitionsrepositorycredentialsdetails as shared_awsecstaskdefinitioncontainerdefinitionsrepositorycredentialsdetails
from ..shared import awsecstaskdefinitioncontainerdefinitionsresourcerequirementsdetails as shared_awsecstaskdefinitioncontainerdefinitionsresourcerequirementsdetails
from ..shared import awsecstaskdefinitioncontainerdefinitionssecretsdetails as shared_awsecstaskdefinitioncontainerdefinitionssecretsdetails
from ..shared import awsecstaskdefinitioncontainerdefinitionssystemcontrolsdetails as shared_awsecstaskdefinitioncontainerdefinitionssystemcontrolsdetails
from ..shared import awsecstaskdefinitioncontainerdefinitionsulimitsdetails as shared_awsecstaskdefinitioncontainerdefinitionsulimitsdetails
from ..shared import awsecstaskdefinitioncontainerdefinitionsvolumesfromdetails as shared_awsecstaskdefinitioncontainerdefinitionsvolumesfromdetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsEcsTaskDefinitionContainerDefinitionsDetails:
    r"""A container definition that describes a container in the task."""
    
    command: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Command'), 'exclude': lambda f: f is None }})  
    cpu: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Cpu'), 'exclude': lambda f: f is None }})  
    depends_on: Optional[list[shared_awsecstaskdefinitioncontainerdefinitionsdependsondetails.AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DependsOn'), 'exclude': lambda f: f is None }})  
    disable_networking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DisableNetworking'), 'exclude': lambda f: f is None }})  
    dns_search_domains: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DnsSearchDomains'), 'exclude': lambda f: f is None }})  
    dns_servers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DnsServers'), 'exclude': lambda f: f is None }})  
    docker_labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DockerLabels'), 'exclude': lambda f: f is None }})  
    docker_security_options: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DockerSecurityOptions'), 'exclude': lambda f: f is None }})  
    entry_point: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EntryPoint'), 'exclude': lambda f: f is None }})  
    environment: Optional[list[shared_awsecstaskdefinitioncontainerdefinitionsenvironmentdetails.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Environment'), 'exclude': lambda f: f is None }})  
    environment_files: Optional[list[shared_awsecstaskdefinitioncontainerdefinitionsenvironmentfilesdetails.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnvironmentFiles'), 'exclude': lambda f: f is None }})  
    essential: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Essential'), 'exclude': lambda f: f is None }})  
    extra_hosts: Optional[list[shared_awsecstaskdefinitioncontainerdefinitionsextrahostsdetails.AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraHosts'), 'exclude': lambda f: f is None }})  
    firelens_configuration: Optional[shared_awsecstaskdefinitioncontainerdefinitionsfirelensconfigurationdetails.AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirelensConfiguration'), 'exclude': lambda f: f is None }})  
    health_check: Optional[shared_awsecstaskdefinitioncontainerdefinitionshealthcheckdetails.AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HealthCheck'), 'exclude': lambda f: f is None }})  
    hostname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Hostname'), 'exclude': lambda f: f is None }})  
    image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Image'), 'exclude': lambda f: f is None }})  
    interactive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Interactive'), 'exclude': lambda f: f is None }})  
    links: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Links'), 'exclude': lambda f: f is None }})  
    linux_parameters: Optional[shared_awsecstaskdefinitioncontainerdefinitionslinuxparametersdetails.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LinuxParameters'), 'exclude': lambda f: f is None }})  
    log_configuration: Optional[shared_awsecstaskdefinitioncontainerdefinitionslogconfigurationdetails.AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LogConfiguration'), 'exclude': lambda f: f is None }})  
    memory: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Memory'), 'exclude': lambda f: f is None }})  
    memory_reservation: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MemoryReservation'), 'exclude': lambda f: f is None }})  
    mount_points: Optional[list[shared_awsecstaskdefinitioncontainerdefinitionsmountpointsdetails.AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MountPoints'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    port_mappings: Optional[list[shared_awsecstaskdefinitioncontainerdefinitionsportmappingsdetails.AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PortMappings'), 'exclude': lambda f: f is None }})  
    privileged: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Privileged'), 'exclude': lambda f: f is None }})  
    pseudo_terminal: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PseudoTerminal'), 'exclude': lambda f: f is None }})  
    readonly_root_filesystem: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReadonlyRootFilesystem'), 'exclude': lambda f: f is None }})  
    repository_credentials: Optional[shared_awsecstaskdefinitioncontainerdefinitionsrepositorycredentialsdetails.AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RepositoryCredentials'), 'exclude': lambda f: f is None }})  
    resource_requirements: Optional[list[shared_awsecstaskdefinitioncontainerdefinitionsresourcerequirementsdetails.AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceRequirements'), 'exclude': lambda f: f is None }})  
    secrets: Optional[list[shared_awsecstaskdefinitioncontainerdefinitionssecretsdetails.AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Secrets'), 'exclude': lambda f: f is None }})  
    start_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartTimeout'), 'exclude': lambda f: f is None }})  
    stop_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StopTimeout'), 'exclude': lambda f: f is None }})  
    system_controls: Optional[list[shared_awsecstaskdefinitioncontainerdefinitionssystemcontrolsdetails.AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SystemControls'), 'exclude': lambda f: f is None }})  
    ulimits: Optional[list[shared_awsecstaskdefinitioncontainerdefinitionsulimitsdetails.AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ulimits'), 'exclude': lambda f: f is None }})  
    user: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('User'), 'exclude': lambda f: f is None }})  
    volumes_from: Optional[list[shared_awsecstaskdefinitioncontainerdefinitionsvolumesfromdetails.AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VolumesFrom'), 'exclude': lambda f: f is None }})  
    working_directory: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkingDirectory'), 'exclude': lambda f: f is None }})  
    