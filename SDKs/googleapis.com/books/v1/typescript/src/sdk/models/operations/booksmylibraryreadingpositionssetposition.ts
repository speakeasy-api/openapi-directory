/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class BooksMylibraryReadingpositionsSetPositionSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

/**
 * Action that caused this reading position to be set.
 */
export enum BooksMylibraryReadingpositionsSetPositionActionEnum {
  ActionUndefined = "ACTION_UNDEFINED",
  Bookmark = "bookmark",
  Chapter = "chapter",
  NextPage = "next-page",
  PrevPage = "prev-page",
  Scroll = "scroll",
  Search = "search",
}

export class BooksMylibraryReadingpositionsSetPositionRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * Action that caused this reading position to be set.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=action",
  })
  action?: BooksMylibraryReadingpositionsSetPositionActionEnum;

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * Volume content version for which this reading position applies.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=contentVersion",
  })
  contentVersion?: string;

  /**
   * Random persistent device cookie optional on set position.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=deviceCookie",
  })
  deviceCookie?: string;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * Position string for the new volume reading position.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=position",
  })
  position: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * String to identify the originator of this request.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=source",
  })
  source?: string;

  /**
   * RFC 3339 UTC format timestamp associated with this reading position.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=timestamp",
  })
  timestamp: string;

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;

  /**
   * ID of volume for which to update the reading position.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=volumeId",
  })
  volumeId: string;
}

export class BooksMylibraryReadingpositionsSetPositionResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  empty?: Record<string, any>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
