// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// GETBacktrackDBClusterActionEnum
type GETBacktrackDBClusterActionEnum string

const (
	GETBacktrackDBClusterActionEnumBacktrackDbCluster GETBacktrackDBClusterActionEnum = "BacktrackDBCluster"
)

func (e *GETBacktrackDBClusterActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BacktrackDBCluster":
		*e = GETBacktrackDBClusterActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETBacktrackDBClusterActionEnum: %s", s)
	}
}

// GETBacktrackDBClusterVersionEnum
type GETBacktrackDBClusterVersionEnum string

const (
	GETBacktrackDBClusterVersionEnumTwoThousandAndFourteen1031 GETBacktrackDBClusterVersionEnum = "2014-10-31"
)

func (e *GETBacktrackDBClusterVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2014-10-31":
		*e = GETBacktrackDBClusterVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETBacktrackDBClusterVersionEnum: %s", s)
	}
}

type GETBacktrackDBClusterRequest struct {
	Action GETBacktrackDBClusterActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
	BacktrackTo time.Time `queryParam:"style=form,explode=true,name=BacktrackTo"`
	// <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
	DBClusterIdentifier string `queryParam:"style=form,explode=true,name=DBClusterIdentifier"`
	// A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
	Force *bool `queryParam:"style=form,explode=true,name=Force"`
	// A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
	UseEarliestTimeOnPointInTimeUnavailable *bool                            `queryParam:"style=form,explode=true,name=UseEarliestTimeOnPointInTimeUnavailable"`
	Version                                 GETBacktrackDBClusterVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm                           *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                       *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                          *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                                *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                       *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                           *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                       *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETBacktrackDBClusterResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
