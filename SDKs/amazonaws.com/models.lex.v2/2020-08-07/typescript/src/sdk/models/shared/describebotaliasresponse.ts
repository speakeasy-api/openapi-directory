/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { BotAliasHistoryEvent } from "./botaliashistoryevent";
import { BotAliasLocaleSettings } from "./botaliaslocalesettings";
import { BotAliasStatusEnum } from "./botaliasstatusenum";
import { ConversationLogSettings } from "./conversationlogsettings";
import { ParentBotNetwork } from "./parentbotnetwork";
import { SentimentAnalysisSettings } from "./sentimentanalysissettings";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class DescribeBotAliasResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: BotAliasHistoryEvent })
  @Expose({ name: "botAliasHistoryEvents" })
  @Type(() => BotAliasHistoryEvent)
  botAliasHistoryEvents?: BotAliasHistoryEvent[];

  @SpeakeasyMetadata()
  @Expose({ name: "botAliasId" })
  botAliasId?: string;

  @SpeakeasyMetadata({ elemType: BotAliasLocaleSettings })
  @Expose({ name: "botAliasLocaleSettings" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, BotAliasLocaleSettings> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], BotAliasLocaleSettings);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  botAliasLocaleSettings?: Record<string, BotAliasLocaleSettings>;

  @SpeakeasyMetadata()
  @Expose({ name: "botAliasName" })
  botAliasName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "botAliasStatus" })
  botAliasStatus?: BotAliasStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "botId" })
  botId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "botVersion" })
  botVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "conversationLogSettings" })
  @Type(() => ConversationLogSettings)
  conversationLogSettings?: ConversationLogSettings;

  @SpeakeasyMetadata()
  @Expose({ name: "creationDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationDateTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdatedDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdatedDateTime?: Date;

  @SpeakeasyMetadata({ elemType: ParentBotNetwork })
  @Expose({ name: "parentBotNetworks" })
  @Type(() => ParentBotNetwork)
  parentBotNetworks?: ParentBotNetwork[];

  /**
   * Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sentimentAnalysisSettings" })
  @Type(() => SentimentAnalysisSettings)
  sentimentAnalysisSettings?: SentimentAnalysisSettings;
}
