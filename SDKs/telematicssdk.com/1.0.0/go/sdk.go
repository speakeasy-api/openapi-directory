// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://api.telematicssdk.com",
	"https://mobilesdk.telematicssdk.com",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// SDK - # Introduction
// We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.
//
// * [CONTACT US](https://telematicssdk.com)
// * [SANDBOX](https://userdatahub.com)
// * [DEV.PORTAL](https://docs.telematicssdk.com)
// * [DEMO APP](https://raxeltelematics.com/telematics-app)
//
// # Overview
// Datamotion provides telematics infrastructure for mobile applications.
//
// Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application
//
// There are 3 groups of methods:
// * 1 - user management
// * 2 - statistics for mobile app
// * 3 - statistics for back-end(s)
//
// in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns)
// # Possible architecture
//
// There are three common schemes that are used by our clients. These schemes can be combined
// * Collect, Process, Store (required: 1&2)
// * Collect, Process (required: 1& sns)
// * Collect (required 1&sns)
//
// ## Collect, Process, Store
// ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)
//
// ## Collect, Process
// ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)
//
// ## Collect
// ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)
//
// ***
// ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)
//
// # Common use-cases:
// * Safe and efficient driving
// * Usage-based insurance
// * Safe driving assessment
// * Driver assessment
// * Trip log
// * Geo-analysis
// * Accident monitoring
// * Driving engagements
// * Location based services
// * Realtime Tracking
// and beyond
//
// # How to start
// * Register a [SANDBOX ACCOUNT](https://userdatahub.com)
// * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)
// * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)
//
// # Authentication
// To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials
//
// Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
type SDK struct {
	// TwoForMobileAppOptional - # Introduction
	// These API services designed to use it inside a mobile applications to get statistics data and services directly from telematics platform and show it in the app
	//
	// # Scheme
	// ![API statistics](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/API+statistics+integration.png)
	TwoForMobileAppOptional     *twoForMobileAppOptional
	Two1UserStatisticsOptional  *two1UserStatisticsOptional
	Two2UserTripsOptional       *two2UserTripsOptional
	Two4UserSafeScoringOptional *two4UserSafeScoringOptional
	// ThreeForBackEndOptional - # Introduction
	// The methods are required to have an admin authentication.
	//
	// # How to get admin credentials
	// Please create admin credentials in [Datahub](https://userdatahub.com) and use method v1/Auth/Login (1. User management)
	//
	// # Scheme
	// ![Admin statistics integration](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/admin+statistics+integration.png)
	ThreeForBackEndOptional *threeForBackEndOptional
	ConsolidatedSafeScoring *consolidatedSafeScoring
	ConsolidatedStatistics  *consolidatedStatistics

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient

	_serverURL  string
	_language   string
	_sdkVersion string
	_genVersion string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		sdk._securityClient = sdk._defaultClient
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.TwoForMobileAppOptional = newTwoForMobileAppOptional(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Two1UserStatisticsOptional = newTwo1UserStatisticsOptional(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Two2UserTripsOptional = newTwo2UserTripsOptional(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Two4UserSafeScoringOptional = newTwo4UserSafeScoringOptional(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ThreeForBackEndOptional = newThreeForBackEndOptional(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ConsolidatedSafeScoring = newConsolidatedSafeScoring(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ConsolidatedStatistics = newConsolidatedStatistics(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
