"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import asyncoperationstatus as shared_asyncoperationstatus
from typing import Optional


@dataclasses.dataclass
class PackageProjectTranslationMemoryRequest:
    
    project_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'projectId', 'style': 'simple', 'explode': False }})
    r"""Project ID"""  
    async_: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'async', 'style': 'form', 'explode': True }})
    r"""If you want to package and download the translation memory synchronously, mark this parameter as '0'. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call."""  
    format: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'format', 'style': 'form', 'explode': True }})
    r"""Translation Memory file format"""  
    

@dataclasses.dataclass
class PackageProjectTranslationMemoryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    async_operation_status: Optional[shared_asyncoperationstatus.AsyncOperationStatus] = dataclasses.field(default=None)
    r"""Response in TMX or async request"""  
    package_project_translation_memory_200_application_xml_binary_string: Optional[bytes] = dataclasses.field(default=None)
    r"""Response in TMX or async request"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    