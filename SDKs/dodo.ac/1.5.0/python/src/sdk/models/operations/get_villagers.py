"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error400 as shared_error400
from ..shared import error401 as shared_error401
from ..shared import error500 as shared_error500
from ..shared import villager as shared_villager
from enum import Enum
from typing import Optional

class GetVillagersGameEnum(str, Enum):
    DNM = 'DNM'
    AC = 'AC'
    E_PLUS = 'E_PLUS'
    WW = 'WW'
    CF = 'CF'
    NL = 'NL'
    WA = 'WA'
    NH = 'NH'
    FILM = 'FILM'
    HHD = 'HHD'
    PC = 'PC'

class GetVillagersPersonalityEnum(str, Enum):
    r"""Retrieve villagers with a certain personality. For 'sisterly', note that the community often also calls it 'uchi' or 'big sister'."""
    LAZY = 'lazy'
    JOCK = 'jock'
    CRANKY = 'cranky'
    SMUG = 'smug'
    NORMAL = 'normal'
    PEPPY = 'peppy'
    SNOOTY = 'snooty'
    SISTERLY = 'sisterly'

class GetVillagersSpeciesEnum(str, Enum):
    r"""Retrieve villagers of a certain species."""
    ALLIGATOR = 'alligator'
    ANTEATER = 'anteater'
    BEAR = 'bear'
    BIRD = 'bird'
    BULL = 'bull'
    CAT = 'cat'
    CUB = 'cub'
    CHICKEN = 'chicken'
    COW = 'cow'
    DEER = 'deer'
    DOG = 'dog'
    DUCK = 'duck'
    EAGLE = 'eagle'
    ELEPHANT = 'elephant'
    FROG = 'frog'
    GOAT = 'goat'
    GORILLA = 'gorilla'
    HAMSTER = 'hamster'
    HIPPO = 'hippo'
    HORSE = 'horse'
    KOALA = 'koala'
    KANGAROO = 'kangaroo'
    LION = 'lion'
    MONKEY = 'monkey'
    MOUSE = 'mouse'
    OCTOPUS = 'octopus'
    OSTRICH = 'ostrich'
    PENGUIN = 'penguin'
    PIG = 'pig'
    RABBIT = 'rabbit'
    RHINO = 'rhino'
    SHEEP = 'sheep'
    SQUIRREL = 'squirrel'
    TIGER = 'tiger'
    WOLF = 'wolf'


@dataclasses.dataclass
class GetVillagersRequest:
    
    accept_version: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept-Version', 'style': 'simple', 'explode': False }})
    r"""The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes."""  
    x_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'X-API-KEY', 'style': 'simple', 'explode': False }})
    r"""Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API."""  
    birthday: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'birthday', 'style': 'form', 'explode': True }})
    r"""Use with `birthmonth` to get villager(s) born on a specific day. Value should be an int, 1 through 31."""  
    birthmonth: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'birthmonth', 'style': 'form', 'explode': True }})
    r"""Retrieve villagers born in a specific month. Value may be the month's name (`jan`, `january`) or the integer representing the month (`01`, `1`)."""  
    excludedetails: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'excludedetails', 'style': 'form', 'explode': True }})
    r"""When set to `true`, only villager names are returned. Instead of an array of objects with all details, the return will be an array of strings."""  
    game: Optional[list[GetVillagersGameEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'game', 'style': 'form', 'explode': True }})
    r"""Retrieve villagers that appear in all listed games. For example, if you want only villagers that appear in both *New Horizons* and *Pocket Camp*, you would send in `?game=nh&game=pc`."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Villager name. For most names you will get back an array with one object, but note that names are not a unique identifier across the series, as there are 3 names that are shared by multiple villagers (Lulu, Petunia, Carmen). For those 3 names you will get back an array with 2 objects. How you disambiguate between these villagers is up to you."""  
    nhdetails: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nhdetails', 'style': 'form', 'explode': True }})
    r"""When set to `true`, an `nh_details` object will be included that contains *New Horizons* details about the villager. If the villager does not appear in *New Horizons*, the returned `nh_details` field will be set to null."""  
    personality: Optional[GetVillagersPersonalityEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'personality', 'style': 'form', 'explode': True }})
    r"""Retrieve villagers with a certain personality. For 'sisterly', note that the community often also calls it 'uchi' or 'big sister'."""  
    species: Optional[GetVillagersSpeciesEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'species', 'style': 'form', 'explode': True }})
    r"""Retrieve villagers of a certain species."""  
    thumbsize: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'thumbsize', 'style': 'form', 'explode': True }})
    r"""Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time."""  
    

@dataclasses.dataclass
class GetVillagersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error400: Optional[shared_error400.Error400] = dataclasses.field(default=None)
    r"""One of the inputs (usually query parameters) has an invalid value."""  
    error401: Optional[shared_error401.Error401] = dataclasses.field(default=None)
    r"""Failed to authenticate user from `X-API-KEY`."""  
    error500: Optional[shared_error500.Error500] = dataclasses.field(default=None)
    r"""There was an error fetching the requested data."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    villagers: Optional[list[shared_villager.Villager]] = dataclasses.field(default=None)
    r"""A JSON array of villagers."""  
    