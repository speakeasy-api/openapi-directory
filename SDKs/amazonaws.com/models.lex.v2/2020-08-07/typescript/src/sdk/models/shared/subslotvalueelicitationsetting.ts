/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PromptSpecification } from "./promptspecification";
import { SampleUtterance } from "./sampleutterance";
import { SlotDefaultValueSpecification } from "./slotdefaultvaluespecification";
import { WaitAndContinueSpecification } from "./waitandcontinuespecification";
import { Expose, Type } from "class-transformer";

/**
 * <p>Subslot elicitation settings.</p> <p> <code>DefaultValueSpecification</code> is a list of default values for a constituent sub slot in a composite slot. Default values are used when Amazon Lex hasn't determined a value for a slot. You can specify default values from context variables, session attributes, and defined values. This is similar to <code>DefaultValueSpecification</code> for slots.</p> <p> <code>PromptSpecification</code> is the prompt that Amazon Lex uses to elicit the sub slot value from the user. This is similar to <code>PromptSpecification</code> for slots.</p>
 */
export class SubSlotValueElicitationSetting extends SpeakeasyBase {
  /**
   * Defines a list of values that Amazon Lex should use as the default value for a slot.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultValueSpecification" })
  @Type(() => SlotDefaultValueSpecification)
  defaultValueSpecification?: SlotDefaultValueSpecification;

  /**
   * Specifies a list of message groups that Amazon Lex sends to a user to elicit a response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "promptSpecification" })
  @Type(() => PromptSpecification)
  promptSpecification: PromptSpecification;

  @SpeakeasyMetadata({ elemType: SampleUtterance })
  @Expose({ name: "sampleUtterances" })
  @Type(() => SampleUtterance)
  sampleUtterances?: SampleUtterance[];

  /**
   * Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "waitAndContinueSpecification" })
  @Type(() => WaitAndContinueSpecification)
  waitAndContinueSpecification?: WaitAndContinueSpecification;
}
