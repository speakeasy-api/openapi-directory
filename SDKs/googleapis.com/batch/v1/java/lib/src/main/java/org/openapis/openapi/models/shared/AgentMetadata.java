/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AgentMetadata - VM Agent Metadata.
 */
public class AgentMetadata {
    /**
     * When the VM agent started. Use agent_startup_time instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTime")
    public String creationTime;

    public AgentMetadata withCreationTime(String creationTime) {
        this.creationTime = creationTime;
        return this;
    }
    
    /**
     * Full name of the entity that created this vm. For MIG, this path is: projects/{project}/regions/{region}/InstanceGroupManagers/{igm} The value is retrieved from the vm metadata key of "created-by".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creator")
    public String creator;

    public AgentMetadata withCreator(String creator) {
        this.creator = creator;
        return this;
    }
    
    /**
     * image version for the VM that this agent is installed on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageVersion")
    public String imageVersion;

    public AgentMetadata withImageVersion(String imageVersion) {
        this.imageVersion = imageVersion;
        return this;
    }
    
    /**
     * GCP instance name (go/instance-name).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance")
    public String instance;

    public AgentMetadata withInstance(String instance) {
        this.instance = instance;
        return this;
    }
    
    /**
     * GCP instance ID (go/instance-id).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceId")
    public String instanceId;

    public AgentMetadata withInstanceId(String instanceId) {
        this.instanceId = instanceId;
        return this;
    }
    
    /**
     * If the GCP instance has received preemption notice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instancePreemptionNoticeReceived")
    public Boolean instancePreemptionNoticeReceived;

    public AgentMetadata withInstancePreemptionNoticeReceived(Boolean instancePreemptionNoticeReceived) {
        this.instancePreemptionNoticeReceived = instancePreemptionNoticeReceived;
        return this;
    }
    
    /**
     * parsed contents of /etc/os-release
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("osRelease")
    public java.util.Map<String, String> osRelease;

    public AgentMetadata withOsRelease(java.util.Map<String, String> osRelease) {
        this.osRelease = osRelease;
        return this;
    }
    
    /**
     * agent binary version running on VM
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public String version;

    public AgentMetadata withVersion(String version) {
        this.version = version;
        return this;
    }
    
    /**
     * Agent zone.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zone")
    public String zone;

    public AgentMetadata withZone(String zone) {
        this.zone = zone;
        return this;
    }
    
    public AgentMetadata(){}
}
