// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ProtocolExceptionReasonEnum string

const (
	ProtocolExceptionReasonEnumUnsupported  ProtocolExceptionReasonEnum = "unsupported"
	ProtocolExceptionReasonEnumUnauthorized ProtocolExceptionReasonEnum = "unauthorized"
	ProtocolExceptionReasonEnumUnexpected   ProtocolExceptionReasonEnum = "unexpected"
	ProtocolExceptionReasonEnumInvalid      ProtocolExceptionReasonEnum = "invalid"
	ProtocolExceptionReasonEnumUnparseable  ProtocolExceptionReasonEnum = "unparseable"
	ProtocolExceptionReasonEnumDeprecated   ProtocolExceptionReasonEnum = "deprecated"
	ProtocolExceptionReasonEnumInternal     ProtocolExceptionReasonEnum = "internal"
	ProtocolExceptionReasonEnumComplex      ProtocolExceptionReasonEnum = "complex"
	ProtocolExceptionReasonEnumBusy         ProtocolExceptionReasonEnum = "busy"
)

func (e ProtocolExceptionReasonEnum) ToPointer() *ProtocolExceptionReasonEnum {
	return &e
}

func (e *ProtocolExceptionReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unsupported":
		fallthrough
	case "unauthorized":
		fallthrough
	case "unexpected":
		fallthrough
	case "invalid":
		fallthrough
	case "unparseable":
		fallthrough
	case "deprecated":
		fallthrough
	case "internal":
		fallthrough
	case "complex":
		fallthrough
	case "busy":
		*e = ProtocolExceptionReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProtocolExceptionReasonEnum: %v", v)
	}
}
