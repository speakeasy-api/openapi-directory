<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Message - The message detail
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Message
{
    /**
     * The content of the message
     * 
     * @var mixed $body
     */
	#[\JMS\Serializer\Annotation\SerializedName('body')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    public mixed $body;
    
    /**
     * The cost of the message (in credits).   Note that this field does not have a value in the submission response.
     * 
     * @var ?float $creditCost
     */
	#[\JMS\Serializer\Annotation\SerializedName('creditCost')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $creditCost = null;
    
    /**
     * The type of the content.  See the `encoding` field for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\MessageEncodingEnum $encoding
     */
	#[\JMS\Serializer\Annotation\SerializedName('encoding')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\MessageEncodingEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?MessageEncodingEnum $encoding = null;
    
    /**
     * The address part of the sender id
     * 
     * @var ?string $from
     */
	#[\JMS\Serializer\Annotation\SerializedName('from')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $from = null;
    
    /**
     * A unique identifier that is assigned when the message is created.
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * See the `messageClass` field for more information.
     * 
     * @var ?int $messageClass
     */
	#[\JMS\Serializer\Annotation\SerializedName('messageClass')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $messageClass = null;
    
    /**
     * The number of parts.  If this is a concatenated message, the number of parts will be more than 1.  Note that this field does not have a value in the submission response.
     * 
     * @var ?int $numberOfParts
     */
	#[\JMS\Serializer\Annotation\SerializedName('numberOfParts')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $numberOfParts = null;
    
    /**
     * See the `protocolId` field for more information.
     * 
     * @var ?int $protocolId
     */
	#[\JMS\Serializer\Annotation\SerializedName('protocolId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $protocolId = null;
    
    /**
     * This field has a value only if the type is RECEIVED.
     * 
     * With SMS messages, it is not possible to link a reply directly with a specific sent message.  However, if you specified `REPLIABLE` in the `from` property, BulkSMS will link any reply to the most recent message sent to a given phone number.
     * 
     * The `relatedSentMessageId` property keeps the information about this link.
     * 
     * You can use this property to derive an implicit conversation from a set of messages.
     *   - If a received reply message has a `relatedSentMessageId`, you can use it to retrieve the last message that was sent before the reply was received.
     *   - If you have the `id` of the sent message and you want all the received messages that relate to it, you can use the List Related Messages Operation.
     * 
     * 
     * @var ?string $relatedSentMessageId
     */
	#[\JMS\Serializer\Annotation\SerializedName('relatedSentMessageId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $relatedSentMessageId = null;
    
    /**
     * The status of the message
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\MessageStatus $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\MessageStatus')]
    public MessageStatus $status;
    
    /**
     * Identifies the submission.
     * 
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\MessageSubmission $submission
     */
	#[\JMS\Serializer\Annotation\SerializedName('submission')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\MessageSubmission')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?MessageSubmission $submission = null;
    
    /**
     * The phone number of the recipient
     * 
     * @var string $to
     */
	#[\JMS\Serializer\Annotation\SerializedName('to')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $to;
    
    /**
     * The message direction
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\MessageTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\MessageTypeEnum>')]
    public MessageTypeEnum $type;
    
    /**
     * This is the value you supplied in the `userSuppliedId` field.
     * 
     * Has a value only if the `type` is SENT.
     * 
     * 
     * @var ?string $userSuppliedId
     */
	#[\JMS\Serializer\Annotation\SerializedName('userSuppliedId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userSuppliedId = null;
    
	public function __construct()
	{
		$this->body = null;
		$this->creditCost = null;
		$this->encoding = null;
		$this->from = null;
		$this->id = "";
		$this->messageClass = null;
		$this->numberOfParts = null;
		$this->protocolId = null;
		$this->relatedSentMessageId = null;
		$this->status = new \OpenAPI\OpenAPI\Models\Shared\MessageStatus();
		$this->submission = null;
		$this->to = "";
		$this->type = \OpenAPI\OpenAPI\Models\Shared\MessageTypeEnum::SENT;
		$this->userSuppliedId = null;
	}
}
