// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListJobExecutionsForThingStatusEnum - An optional filter that lets you search for jobs that have the specified status.
type ListJobExecutionsForThingStatusEnum string

const (
	ListJobExecutionsForThingStatusEnumQueued     ListJobExecutionsForThingStatusEnum = "QUEUED"
	ListJobExecutionsForThingStatusEnumInProgress ListJobExecutionsForThingStatusEnum = "IN_PROGRESS"
	ListJobExecutionsForThingStatusEnumSucceeded  ListJobExecutionsForThingStatusEnum = "SUCCEEDED"
	ListJobExecutionsForThingStatusEnumFailed     ListJobExecutionsForThingStatusEnum = "FAILED"
	ListJobExecutionsForThingStatusEnumTimedOut   ListJobExecutionsForThingStatusEnum = "TIMED_OUT"
	ListJobExecutionsForThingStatusEnumRejected   ListJobExecutionsForThingStatusEnum = "REJECTED"
	ListJobExecutionsForThingStatusEnumRemoved    ListJobExecutionsForThingStatusEnum = "REMOVED"
	ListJobExecutionsForThingStatusEnumCanceled   ListJobExecutionsForThingStatusEnum = "CANCELED"
)

func (e ListJobExecutionsForThingStatusEnum) ToPointer() *ListJobExecutionsForThingStatusEnum {
	return &e
}

func (e *ListJobExecutionsForThingStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "IN_PROGRESS":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		fallthrough
	case "TIMED_OUT":
		fallthrough
	case "REJECTED":
		fallthrough
	case "REMOVED":
		fallthrough
	case "CANCELED":
		*e = ListJobExecutionsForThingStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListJobExecutionsForThingStatusEnum: %v", v)
	}
}

type ListJobExecutionsForThingRequest struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The unique identifier you assigned to this job when it was created.
	JobID *string `queryParam:"style=form,explode=true,name=jobId"`
	// The maximum number of results to be returned per request.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// <p>The namespace used to indicate that a job is a customer-managed job.</p> <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p> <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note> <p>The <code>namespaceId</code> feature is in public preview.</p> </note>
	NamespaceID *string `queryParam:"style=form,explode=true,name=namespaceId"`
	// The token to retrieve the next set of results.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
	// An optional filter that lets you search for jobs that have the specified status.
	Status *ListJobExecutionsForThingStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// The thing name.
	ThingName string `pathParam:"style=simple,explode=false,name=thingName"`
}

type ListJobExecutionsForThingResponse struct {
	ContentType string
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListJobExecutionsForThingResponse *shared.ListJobExecutionsForThingResponse
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	StatusCode                  int
	RawResponse                 *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
