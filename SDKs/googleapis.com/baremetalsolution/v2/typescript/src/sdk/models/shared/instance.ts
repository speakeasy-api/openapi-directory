/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GoogleCloudBaremetalsolutionV2LogicalInterface } from "./googlecloudbaremetalsolutionv2logicalinterface";
import { Lun, LunInput } from "./lun";
import { Network } from "./network";
import { Volume, VolumeInput } from "./volume";
import { Expose, Type } from "class-transformer";

/**
 * Output only. The state of the server.
 */
export enum InstanceStateEnum {
  StateUnspecified = "STATE_UNSPECIFIED",
  Provisioning = "PROVISIONING",
  Running = "RUNNING",
  Deleted = "DELETED",
  Updating = "UPDATING",
  Starting = "STARTING",
  Stopping = "STOPPING",
  Shutdown = "SHUTDOWN",
}

/**
 * The workload profile for the instance.
 */
export enum InstanceWorkloadProfileEnum {
  WorkloadProfileUnspecified = "WORKLOAD_PROFILE_UNSPECIFIED",
  WorkloadProfileGeneric = "WORKLOAD_PROFILE_GENERIC",
  WorkloadProfileHana = "WORKLOAD_PROFILE_HANA",
}

/**
 * A server.
 */
export class Instance extends SpeakeasyBase {
  /**
   * Output only. Create a time stamp.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * Output only. The firmware version for the instance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmwareVersion" })
  firmwareVersion?: string;

  /**
   * True if you enable hyperthreading for the server, otherwise false. The default value is false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hyperthreadingEnabled" })
  hyperthreadingEnabled?: boolean;

  /**
   * Output only. An identifier for the `Instance`, generated by the backend.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Output only. True if the interactive serial console feature is enabled for the instance, false otherwise. The default value is false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interactiveSerialConsoleEnabled" })
  interactiveSerialConsoleEnabled?: boolean;

  /**
   * Labels as key value pairs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.
   */
  @SpeakeasyMetadata({
    elemType: GoogleCloudBaremetalsolutionV2LogicalInterface,
  })
  @Expose({ name: "logicalInterfaces" })
  @Type(() => GoogleCloudBaremetalsolutionV2LogicalInterface)
  logicalInterfaces?: GoogleCloudBaremetalsolutionV2LogicalInterface[];

  /**
   * Output only. Text field about info for logging in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "loginInfo" })
  loginInfo?: string;

  /**
   * Immutable. List of LUNs associated with this server.
   */
  @SpeakeasyMetadata({ elemType: Lun })
  @Expose({ name: "luns" })
  @Type(() => Lun)
  luns?: Lun[];

  /**
   * Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "machineType" })
  machineType?: string;

  /**
   * Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of "bond" or "nic".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "networkTemplate" })
  networkTemplate?: string;

  /**
   * Output only. List of networks associated with this server.
   */
  @SpeakeasyMetadata({ elemType: Network })
  @Expose({ name: "networks" })
  @Type(() => Network)
  networks?: Network[];

  /**
   * The OS image currently installed on the server.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "osImage" })
  osImage?: string;

  /**
   * Immutable. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes) allocated in the same pod only.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pod" })
  pod?: string;

  /**
   * Output only. The state of the server.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: InstanceStateEnum;

  /**
   * Output only. Update a time stamp.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;

  /**
   * Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.
   */
  @SpeakeasyMetadata({ elemType: Volume })
  @Expose({ name: "volumes" })
  @Type(() => Volume)
  volumes?: Volume[];

  /**
   * The workload profile for the instance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workloadProfile" })
  workloadProfile?: InstanceWorkloadProfileEnum;
}

/**
 * A server.
 */
export class InstanceInput extends SpeakeasyBase {
  /**
   * True if you enable hyperthreading for the server, otherwise false. The default value is false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hyperthreadingEnabled" })
  hyperthreadingEnabled?: boolean;

  /**
   * Labels as key value pairs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.
   */
  @SpeakeasyMetadata({
    elemType: GoogleCloudBaremetalsolutionV2LogicalInterface,
  })
  @Expose({ name: "logicalInterfaces" })
  @Type(() => GoogleCloudBaremetalsolutionV2LogicalInterface)
  logicalInterfaces?: GoogleCloudBaremetalsolutionV2LogicalInterface[];

  /**
   * Immutable. List of LUNs associated with this server.
   */
  @SpeakeasyMetadata({ elemType: LunInput })
  @Expose({ name: "luns" })
  @Type(() => LunInput)
  luns?: LunInput[];

  /**
   * Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "machineType" })
  machineType?: string;

  /**
   * Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of "bond" or "nic".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "networkTemplate" })
  networkTemplate?: string;

  /**
   * The OS image currently installed on the server.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "osImage" })
  osImage?: string;

  /**
   * Immutable. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes) allocated in the same pod only.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pod" })
  pod?: string;

  /**
   * Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.
   */
  @SpeakeasyMetadata({ elemType: VolumeInput })
  @Expose({ name: "volumes" })
  @Type(() => VolumeInput)
  volumes?: VolumeInput[];

  /**
   * The workload profile for the instance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workloadProfile" })
  workloadProfile?: InstanceWorkloadProfileEnum;
}
