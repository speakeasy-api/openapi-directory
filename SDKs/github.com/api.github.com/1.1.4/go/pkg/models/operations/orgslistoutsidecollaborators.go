// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type OrgsListOutsideCollaboratorsPathParams struct {
	// The organization name. The name is not case sensitive.
	Org string `pathParam:"style=simple,explode=false,name=org"`
}

// OrgsListOutsideCollaboratorsFilterEnum - Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned.
type OrgsListOutsideCollaboratorsFilterEnum string

const (
	OrgsListOutsideCollaboratorsFilterEnumTwofaDisabled OrgsListOutsideCollaboratorsFilterEnum = "2fa_disabled"
	OrgsListOutsideCollaboratorsFilterEnumAll           OrgsListOutsideCollaboratorsFilterEnum = "all"
)

func (e *OrgsListOutsideCollaboratorsFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2fa_disabled":
		fallthrough
	case "all":
		*e = OrgsListOutsideCollaboratorsFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OrgsListOutsideCollaboratorsFilterEnum: %s", s)
	}
}

type OrgsListOutsideCollaboratorsQueryParams struct {
	// Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned.
	Filter *OrgsListOutsideCollaboratorsFilterEnum `queryParam:"style=form,explode=true,name=filter"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of results per page (max 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
}

type OrgsListOutsideCollaboratorsRequest struct {
	PathParams  OrgsListOutsideCollaboratorsPathParams
	QueryParams OrgsListOutsideCollaboratorsQueryParams
}

type OrgsListOutsideCollaboratorsResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Response
	SimpleUsers []shared.SimpleUser
}
