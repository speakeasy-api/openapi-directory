"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Payments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cancel_payment(self, request: operations.CancelPaymentRequest, security: operations.CancelPaymentSecurity) -> operations.CancelPaymentResponse:
        r"""CancelPayment
        Cancels (voids) a payment. You can use this endpoint to cancel a payment with 
        the APPROVED `status`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CancelPaymentRequest, base_url, '/v2/payments/{payment_id}/cancel', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelPaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CancelPaymentResponse])
                res.cancel_payment_response = out

        return res

    def cancel_payment_by_idempotency_key(self, request: shared.CancelPaymentByIdempotencyKeyRequest, security: operations.CancelPaymentByIdempotencyKeySecurity) -> operations.CancelPaymentByIdempotencyKeyResponse:
        r"""CancelPaymentByIdempotencyKey
        Cancels (voids) a payment identified by the idempotency key that is specified in the
        request.
        
        Use this method when the status of a `CreatePayment` request is unknown (for example, after you send a
        `CreatePayment` request, a network error occurs and you do not get a response). In this case, you can
        direct Square to cancel the payment using this endpoint. In the request, you provide the same
        idempotency key that you provided in your `CreatePayment` request that you want to cancel. After
        canceling the payment, you can submit your `CreatePayment` request again.
        
        Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint
        returns successfully.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/payments/cancel'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelPaymentByIdempotencyKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CancelPaymentByIdempotencyKeyResponse])
                res.cancel_payment_by_idempotency_key_response = out

        return res

    def complete_payment(self, request: operations.CompletePaymentRequest, security: operations.CompletePaymentSecurity) -> operations.CompletePaymentResponse:
        r"""CompletePayment
        Completes (captures) a payment.
        By default, payments are set to complete immediately after they are created.
        
        You can use this endpoint to complete a payment with the APPROVED `status`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompletePaymentRequest, base_url, '/v2/payments/{payment_id}/complete', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompletePaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompletePaymentResponse])
                res.complete_payment_response = out

        return res

    def create_payment(self, request: shared.CreatePaymentRequest, security: operations.CreatePaymentSecurity) -> operations.CreatePaymentResponse:
        r"""CreatePayment
        Creates a payment using the provided source. You can use this endpoint 
        to charge a card (credit/debit card or    
        Square gift card) or record a payment that the seller received outside of Square 
        (cash payment from a buyer or a payment that an external entity 
        processed on behalf of the seller).
        
        The endpoint creates a 
        `Payment` object and returns it in the response.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/payments'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreatePaymentResponse])
                res.create_payment_response = out

        return res

    def get_payment(self, request: operations.GetPaymentRequest, security: operations.GetPaymentSecurity) -> operations.GetPaymentResponse:
        r"""GetPayment
        Retrieves details for a specific payment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPaymentRequest, base_url, '/v2/payments/{payment_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetPaymentResponse])
                res.get_payment_response = out

        return res

    def update_payment(self, request: operations.UpdatePaymentRequest, security: operations.UpdatePaymentSecurity) -> operations.UpdatePaymentResponse:
        r"""UpdatePayment
        Updates a payment with the APPROVED status.
        You can update the `amount_money` and `tip_money` using this endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePaymentRequest, base_url, '/v2/payments/{payment_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_payment_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdatePaymentResponse])
                res.update_payment_response = out

        return res

    def get_v2_payments(self, request: operations.GetV2PaymentsRequest, security: operations.GetV2PaymentsSecurity) -> operations.GetV2PaymentsResponse:
        r"""ListPayments
        Retrieves a list of payments taken by the account making the request.
        
        Results are eventually consistent, and new payments or changes to payments might take several
        seconds to appear.
        
        The maximum results per page is 100.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/payments'
        
        query_params = utils.get_query_params(operations.GetV2PaymentsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2PaymentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPaymentsResponse])
                res.list_payments_response = out

        return res

    