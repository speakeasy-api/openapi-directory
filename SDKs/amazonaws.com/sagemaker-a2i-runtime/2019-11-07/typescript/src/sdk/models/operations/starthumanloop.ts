/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Attributes of the data specified by the customer. Use these to describe the data to be labeled.
 */
export class StartHumanLoopRequestBodyDataAttributes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ContentClassifiers" })
  contentClassifiers?: shared.ContentClassifierEnum[];
}

/**
 * An object containing the human loop input in JSON format.
 */
export class StartHumanLoopRequestBodyHumanLoopInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "InputContent" })
  inputContent?: string;
}

export class StartHumanLoopRequestBody extends SpeakeasyBase {
  /**
   * Attributes of the data specified by the customer. Use these to describe the data to be labeled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DataAttributes" })
  @Type(() => StartHumanLoopRequestBodyDataAttributes)
  dataAttributes?: StartHumanLoopRequestBodyDataAttributes;

  /**
   * The Amazon Resource Name (ARN) of the flow definition associated with this human loop.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FlowDefinitionArn" })
  flowDefinitionArn: string;

  /**
   * An object containing the human loop input in JSON format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "HumanLoopInput" })
  @Type(() => StartHumanLoopRequestBodyHumanLoopInput)
  humanLoopInput: StartHumanLoopRequestBodyHumanLoopInput;

  /**
   * The name of the human loop.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "HumanLoopName" })
  humanLoopName: string;
}

export class StartHumanLoopRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: StartHumanLoopRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class StartHumanLoopResponse extends SpeakeasyBase {
  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  startHumanLoopResponse?: shared.StartHumanLoopResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
