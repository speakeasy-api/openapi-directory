"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import initialterm as shared_initialterm
from ..shared import renewalterm as shared_renewalterm
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TermsAndConditionsRenewalSettingEnum(str, Enum):
    RENEW_WITH_SPECIFIC_TERM = 'RENEW_WITH_SPECIFIC_TERM'
    RENEW_TO_EVERGREEN = 'RENEW_TO_EVERGREEN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TermsAndConditions:
    r"""Information about an order action of type `TermsAndConditions`."""
    
    auto_renew: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoRenew'), 'exclude': lambda f: f is None }})  
    initial_term: Optional[shared_initialterm.InitialTerm] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initialTerm'), 'exclude': lambda f: f is None }})
    r"""The length of the period for the current subscription term."""  
    renewal_setting: Optional[TermsAndConditionsRenewalSettingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewalSetting'), 'exclude': lambda f: f is None }})  
    renewal_terms: Optional[list[shared_renewalterm.RenewalTerm]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewalTerms'), 'exclude': lambda f: f is None }})  
    