// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VmwareVMDetailsBootOptionEnum - Output only. The VM Boot Option.
type VmwareVMDetailsBootOptionEnum string

const (
	VmwareVMDetailsBootOptionEnumBootOptionUnspecified VmwareVMDetailsBootOptionEnum = "BOOT_OPTION_UNSPECIFIED"
	VmwareVMDetailsBootOptionEnumEfi                   VmwareVMDetailsBootOptionEnum = "EFI"
	VmwareVMDetailsBootOptionEnumBios                  VmwareVMDetailsBootOptionEnum = "BIOS"
)

func (e VmwareVMDetailsBootOptionEnum) ToPointer() *VmwareVMDetailsBootOptionEnum {
	return &e
}

func (e *VmwareVMDetailsBootOptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BOOT_OPTION_UNSPECIFIED":
		fallthrough
	case "EFI":
		fallthrough
	case "BIOS":
		*e = VmwareVMDetailsBootOptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VmwareVMDetailsBootOptionEnum: %v", v)
	}
}

// VmwareVMDetailsPowerStateEnum - The power state of the VM at the moment list was taken.
type VmwareVMDetailsPowerStateEnum string

const (
	VmwareVMDetailsPowerStateEnumPowerStateUnspecified VmwareVMDetailsPowerStateEnum = "POWER_STATE_UNSPECIFIED"
	VmwareVMDetailsPowerStateEnumOn                    VmwareVMDetailsPowerStateEnum = "ON"
	VmwareVMDetailsPowerStateEnumOff                   VmwareVMDetailsPowerStateEnum = "OFF"
	VmwareVMDetailsPowerStateEnumSuspended             VmwareVMDetailsPowerStateEnum = "SUSPENDED"
)

func (e VmwareVMDetailsPowerStateEnum) ToPointer() *VmwareVMDetailsPowerStateEnum {
	return &e
}

func (e *VmwareVMDetailsPowerStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POWER_STATE_UNSPECIFIED":
		fallthrough
	case "ON":
		fallthrough
	case "OFF":
		fallthrough
	case "SUSPENDED":
		*e = VmwareVMDetailsPowerStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VmwareVMDetailsPowerStateEnum: %v", v)
	}
}

// VmwareVMDetails - VmwareVmDetails describes a VM in vCenter.
type VmwareVMDetails struct {
	// Output only. The VM Boot Option.
	BootOption *VmwareVMDetailsBootOptionEnum `json:"bootOption,omitempty"`
	// The total size of the storage allocated to the VM in MB.
	CommittedStorage *string `json:"committedStorage,omitempty"`
	// The total size of the storage allocated to the VM in MB.
	CommittedStorageMb *string `json:"committedStorageMb,omitempty"`
	// The number of cpus in the VM.
	CPUCount *int `json:"cpuCount,omitempty"`
	// The descriptive name of the vCenter's datacenter this VM is contained in.
	DatacenterDescription *string `json:"datacenterDescription,omitempty"`
	// The id of the vCenter's datacenter this VM is contained in.
	DatacenterID *string `json:"datacenterId,omitempty"`
	// The number of disks the VM has.
	DiskCount *int `json:"diskCount,omitempty"`
	// The display name of the VM. Note that this is not necessarily unique.
	DisplayName *string `json:"displayName,omitempty"`
	// The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
	GuestDescription *string `json:"guestDescription,omitempty"`
	// The size of the memory of the VM in MB.
	MemoryMb *int `json:"memoryMb,omitempty"`
	// The power state of the VM at the moment list was taken.
	PowerState *VmwareVMDetailsPowerStateEnum `json:"powerState,omitempty"`
	// The unique identifier of the VM in vCenter.
	UUID *string `json:"uuid,omitempty"`
	// The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
	VMID *string `json:"vmId,omitempty"`
}

// VmwareVMDetailsInput - VmwareVmDetails describes a VM in vCenter.
type VmwareVMDetailsInput struct {
	// The total size of the storage allocated to the VM in MB.
	CommittedStorage *string `json:"committedStorage,omitempty"`
	// The total size of the storage allocated to the VM in MB.
	CommittedStorageMb *string `json:"committedStorageMb,omitempty"`
	// The number of cpus in the VM.
	CPUCount *int `json:"cpuCount,omitempty"`
	// The descriptive name of the vCenter's datacenter this VM is contained in.
	DatacenterDescription *string `json:"datacenterDescription,omitempty"`
	// The id of the vCenter's datacenter this VM is contained in.
	DatacenterID *string `json:"datacenterId,omitempty"`
	// The number of disks the VM has.
	DiskCount *int `json:"diskCount,omitempty"`
	// The display name of the VM. Note that this is not necessarily unique.
	DisplayName *string `json:"displayName,omitempty"`
	// The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
	GuestDescription *string `json:"guestDescription,omitempty"`
	// The size of the memory of the VM in MB.
	MemoryMb *int `json:"memoryMb,omitempty"`
	// The power state of the VM at the moment list was taken.
	PowerState *VmwareVMDetailsPowerStateEnum `json:"powerState,omitempty"`
	// The unique identifier of the VM in vCenter.
	UUID *string `json:"uuid,omitempty"`
	// The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
	VMID *string `json:"vmId,omitempty"`
}
