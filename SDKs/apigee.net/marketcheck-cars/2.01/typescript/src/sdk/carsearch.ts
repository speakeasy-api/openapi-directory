/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class CarSearch {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * API for auto-completion of inputs
   *
   * @remarks
   * Auto-complete the inputs of your end users
   */
  autoComplete(
    req: operations.AutoCompleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AutoCompleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AutoCompleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/search/car/auto-complete";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AutoCompleteResponse =
        new operations.AutoCompleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchAutoCompleteResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchAutoCompleteResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Listing by id
   *
   * @remarks
   * Get a particular dealer listing by its id
   */
  getListing(
    req: operations.GetListingRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/listing/car/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingResponse =
        new operations.GetListingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listing = utils.objectToClass(httpRes?.data, shared.Listing);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get dealers active inventory
   *
   * @remarks
   * Get dealers active inventory
   */
  getCarDealerInventoryActive(
    req: operations.GetCarDealerInventoryActiveRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCarDealerInventoryActiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCarDealerInventoryActiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/car/dealer/inventory/active";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCarDealerInventoryActiveResponse =
        new operations.GetCarDealerInventoryActiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Listing by id
   *
   * @remarks
   * Get a particular auction listing by its id
   */
  getListingCarAuctionId(
    req: operations.GetListingCarAuctionIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingCarAuctionIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingCarAuctionIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/car/auction/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingCarAuctionIdResponse =
        new operations.GetListingCarAuctionIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listing = utils.objectToClass(httpRes?.data, shared.Listing);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Long text Listings attributes for Listing with the given id
   *
   * @remarks
   * Get listing options, features, seller comments
   */
  getListingCarAuctionIdExtra(
    req: operations.GetListingCarAuctionIdExtraRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingCarAuctionIdExtraResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingCarAuctionIdExtraRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/car/auction/{id}/extra",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingCarAuctionIdExtraResponse =
        new operations.GetListingCarAuctionIdExtraResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listingExtraAttributes = utils.objectToClass(
              httpRes?.data,
              shared.ListingExtraAttributes
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Listing media by id
   *
   * @remarks
   * Get listing media (photo, photos) by id
   */
  getListingCarAuctionIdMedia(
    req: operations.GetListingCarAuctionIdMediaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingCarAuctionIdMediaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingCarAuctionIdMediaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/car/auction/{id}/media",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingCarAuctionIdMediaResponse =
        new operations.GetListingCarAuctionIdMediaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listingMedia = utils.objectToClass(
              httpRes?.data,
              shared.ListingMedia
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Listing by id
   *
   * @remarks
   * Get a particular private party listing by its id
   */
  getListingCarFsboId(
    req: operations.GetListingCarFsboIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingCarFsboIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingCarFsboIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/car/fsbo/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingCarFsboIdResponse =
        new operations.GetListingCarFsboIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listing = utils.objectToClass(httpRes?.data, shared.Listing);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Long text Listings attributes for Listing with the given id
   *
   * @remarks
   * Get listing options, features, seller comments
   */
  getListingCarFsboIdExtra(
    req: operations.GetListingCarFsboIdExtraRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingCarFsboIdExtraResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingCarFsboIdExtraRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/car/fsbo/{id}/extra",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingCarFsboIdExtraResponse =
        new operations.GetListingCarFsboIdExtraResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listingExtraAttributes = utils.objectToClass(
              httpRes?.data,
              shared.ListingExtraAttributes
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Listing media by id
   *
   * @remarks
   * Get listing media (photo, photos) by id
   */
  getListingCarFsboIdMedia(
    req: operations.GetListingCarFsboIdMediaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingCarFsboIdMediaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingCarFsboIdMediaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/car/fsbo/{id}/media",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingCarFsboIdMediaResponse =
        new operations.GetListingCarFsboIdMediaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listingMedia = utils.objectToClass(
              httpRes?.data,
              shared.ListingMedia
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Listing by id
   *
   * @remarks
   * Get a particular dealer listing by its id
   */
  getListingCarUkId(
    req: operations.GetListingCarUkIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingCarUkIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingCarUkIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/listing/car/uk/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingCarUkIdResponse =
        new operations.GetListingCarUkIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listing = utils.objectToClass(httpRes?.data, shared.Listing);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Long text Listings attributes for Listing with the given id
   *
   * @remarks
   * Get listing options, features, seller comments
   */
  getListingCarUkIdExtra(
    req: operations.GetListingCarUkIdExtraRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingCarUkIdExtraResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingCarUkIdExtraRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/car/uk/{id}/extra",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingCarUkIdExtraResponse =
        new operations.GetListingCarUkIdExtraResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listingExtraAttributes = utils.objectToClass(
              httpRes?.data,
              shared.ListingExtraAttributes
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Listing media by id
   *
   * @remarks
   * Get listing media (photo, photos) by id
   */
  getListingCarUkIdMedia(
    req: operations.GetListingCarUkIdMediaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingCarUkIdMediaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingCarUkIdMediaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/car/uk/{id}/media",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingCarUkIdMediaResponse =
        new operations.GetListingCarUkIdMediaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listingMedia = utils.objectToClass(
              httpRes?.data,
              shared.ListingMedia
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Long text Listings attributes for Listing with the given id
   *
   * @remarks
   * Get listing options, features, seller comments
   */
  getListingCarIdExtra(
    req: operations.GetListingCarIdExtraRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingCarIdExtraResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingCarIdExtraRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/car/{id}/extra",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingCarIdExtraResponse =
        new operations.GetListingCarIdExtraResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listingExtraAttributes = utils.objectToClass(
              httpRes?.data,
              shared.ListingExtraAttributes
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Listing media by id
   *
   * @remarks
   * Get listing media (photo, photos) by id
   */
  getListingCarIdMedia(
    req: operations.GetListingCarIdMediaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingCarIdMediaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingCarIdMediaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/car/{id}/media",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingCarIdMediaResponse =
        new operations.GetListingCarIdMediaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listingMedia = utils.objectToClass(
              httpRes?.data,
              shared.ListingMedia
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets active car listings for the given search criteria
   *
   * @remarks
   * This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active cars from the market for the given search criteria. The API results are limited to allow pagination upto 10000 rows.
   *  The search API facilitates the following use cases -
   * 1. Search Cars around a given geo-point within a given radius
   * 2. Search cars for a specific year / make / model or combination of these
   * 3. Search cars matching multiple year, make, model combinatins in the same search request
   * 4. Filter results by most car specification attributes
   * 5. Search for similar cars by VIN or Taxonomy VIN
   * 6. Filter cars within a given price / miles / days on market (dom) range
   * 7. Specify a sort order for the results on price / miles / dom / listed date
   * 8. Search cars for a given City / State combination
   * 9. Get Facets to build the search drill downs
   * 10. Get Market averages for price/miles/dom for your search
   */
  getSearchCarActive(
    req: operations.GetSearchCarActiveRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchCarActiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchCarActiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/search/car/active";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchCarActiveResponse =
        new operations.GetSearchCarActiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets active auction car listings for the given search criteria
   *
   * @remarks
   * This API produces a list of currently active auction cars from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.
   *  The search API facilitates the following use cases -
   * 1. Search Cars around a given geo-point within a given radius
   * 2. Search cars for a specific year / make / model or combination of these
   * 3. Search cars matching multiple year, make, model combinatins in the same search request
   * 4. Filter results by most car specification attributes
   * 5. Search for similar cars by VIN or Taxonomy VIN
   * 6. Filter cars within a given price / miles / days on market (dom) range
   * 7. Specify a sort order for the results on price / miles / dom / listed date
   * 8. Search cars for a given City / State combination
   * 9. Get Facets to build the search drill downs
   * 10. Get Market averages for price/miles/dom for your search
   */
  getSearchCarAuctionActive(
    req: operations.GetSearchCarAuctionActiveRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchCarAuctionActiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchCarAuctionActiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/search/car/auction/active";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchCarAuctionActiveResponse =
        new operations.GetSearchCarAuctionActiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets active private party car listings for the given search criteria
   *
   * @remarks
   * This API produces a list of currently active FSBO cars from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.
   *  The search API facilitates the following use cases -
   * 1. Search Cars around a given geo-point within a given radius
   * 2. Search cars for a specific year / make / model or combination of these
   * 3. Search cars matching multiple year, make, model combinatins in the same search request
   * 4. Filter results by most car specification attributes
   * 5. Search for similar cars by VIN or Taxonomy VIN
   * 6. Filter cars within a given price / miles / days on market (dom) range
   * 7. Specify a sort order for the results on price / miles / dom / listed date
   * 8. Search cars for a given City / State combination
   * 9. Get Facets to build the search drill downs
   * 10. Get Market averages for price/miles/dom for your search
   */
  getSearchCarFsboActive(
    req: operations.GetSearchCarFsboActiveRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchCarFsboActiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchCarFsboActiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/search/car/fsbo/active";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchCarFsboActiveResponse =
        new operations.GetSearchCarFsboActiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets Recent car listings for the given search criteria
   *
   * @remarks
   * This API produces a list of recently active (past 90 days) cars from the market for the given search criteria
   */
  getSearchCarRecents(
    req: operations.GetSearchCarRecentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchCarRecentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchCarRecentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/search/car/recents";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchCarRecentsResponse =
        new operations.GetSearchCarRecentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets Recent UK car listings for the given search criteria
   *
   * @remarks
   * This API produces a list of recently active (past 90 days) cars from the market for the given search criteria
   */
  getSearchCarUkRecents(
    req: operations.GetSearchCarUkRecentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchCarUkRecentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchCarUkRecentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/search/car/uk/recents";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchCarUkRecentsResponse =
        new operations.GetSearchCarUkRecentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ukSearchResponse = utils.objectToClass(
              httpRes?.data,
              shared.UKSearchResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets active car listings in UK for the given search criteria
   *
   * @remarks
   * Search cars for sale in UK
   */
  search(
    req: operations.SearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/search/car/uk/active";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SearchResponse = new operations.SearchResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ukSearchResponse = utils.objectToClass(
              httpRes?.data,
              shared.UKSearchResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
