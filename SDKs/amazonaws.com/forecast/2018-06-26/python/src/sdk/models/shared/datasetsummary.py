"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import datasettype_enum as shared_datasettype_enum
from ..shared import domain_enum as shared_domain_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DatasetSummary:
    r"""Provides a summary of the dataset properties used in the <a href=\\"https://docs.aws.amazon.com/forecast/latest/dg/API_ListDatasets.html\\">ListDatasets</a> operation. To get the complete set of properties, call the <a href=\\"https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDataset.html\\">DescribeDataset</a> operation, and provide the <code>DatasetArn</code>."""
    
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    dataset_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatasetArn'), 'exclude': lambda f: f is None }})  
    dataset_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatasetName'), 'exclude': lambda f: f is None }})  
    dataset_type: Optional[shared_datasettype_enum.DatasetTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatasetType'), 'exclude': lambda f: f is None }})  
    domain: Optional[shared_domain_enum.DomainEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Domain'), 'exclude': lambda f: f is None }})  
    last_modification_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModificationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    