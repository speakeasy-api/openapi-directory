"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmailHistoryResourceAttributesStatusTimes:
    r"""Status of email. Multiple statuses may be defined. The current status is the one with the most recent date."""
    
    bounce: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bounce'), 'exclude': lambda f: f is None }})
    r"""Time email was bounced."""  
    click: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('click'), 'exclude': lambda f: f is None }})
    r"""Time email was clicked."""  
    deferred: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deferred'), 'exclude': lambda f: f is None }})
    r"""Time email was deferred."""  
    delivered: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delivered'), 'exclude': lambda f: f is None }})
    r"""Time email was delivered."""  
    dropped: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dropped'), 'exclude': lambda f: f is None }})
    r"""Time email was dropped."""  
    open: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('open'), 'exclude': lambda f: f is None }})
    r"""Time email was opened."""  
    processed: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processed'), 'exclude': lambda f: f is None }})
    r"""Time email was processed."""  
    spamreport: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spamreport'), 'exclude': lambda f: f is None }})
    r"""Time email was reported as spam."""  
    unsubscribe: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unsubscribe'), 'exclude': lambda f: f is None }})
    r"""Time email was unsubscribed from."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmailHistoryResourceAttributes:
    
    email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_address'), 'exclude': lambda f: f is None }})
    r"""Address email was sent to."""  
    email_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_type'), 'exclude': lambda f: f is None }})
    r"""Type of email."""  
    send_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('send_time'), 'exclude': lambda f: f is None }})
    r"""Time email was sent."""  
    status_times: Optional[EmailHistoryResourceAttributesStatusTimes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status_times'), 'exclude': lambda f: f is None }})
    r"""Status of email. Multiple statuses may be defined. The current status is the one with the most recent date."""  
    twine_email_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('twine_email_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for this email."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmailHistoryResourceRelationshipsReceiverData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmailHistoryResourceRelationshipsReceiver:
    
    data: Optional[EmailHistoryResourceRelationshipsReceiverData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmailHistoryResourceRelationshipsSenderData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmailHistoryResourceRelationshipsSender:
    
    data: Optional[EmailHistoryResourceRelationshipsSenderData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmailHistoryResourceRelationships:
    
    receiver: Optional[EmailHistoryResourceRelationshipsReceiver] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiver'), 'exclude': lambda f: f is None }})  
    sender: Optional[EmailHistoryResourceRelationshipsSender] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sender'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmailHistoryResource:
    
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    attributes: Optional[EmailHistoryResourceAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    relationships: Optional[EmailHistoryResourceRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    