import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig } from "axios";
export declare class SNMPv3 {
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    _language: string;
    _sdkVersion: string;
    _genVersion: string;
    constructor(defaultClient: AxiosInstance, securityClient: AxiosInstance, serverURL: string, language: string, sdkVersion: string, genVersion: string);
    /**
     * Adds a new access entry with the specified parameters.
     *
     * @remarks
     * Adds a new access entry with the specified parameters.
     */
    protocolSnmpv3AccessAdd(req: operations.ProtocolSnmpv3AccessAddRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3AccessAddResponse>;
    /**
     * Clears all access entries.
     *
     * @remarks
     * Clears all access entries.
     */
    protocolSnmpv3AccessClear(req: operations.ProtocolSnmpv3AccessClearRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3AccessClearResponse>;
    /**
     * Deletes the specified access entry.
     *
     * @remarks
     * Deletes the specified access entry.
     */
    protocolSnmpv3AccessDel(req: operations.ProtocolSnmpv3AccessDelRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3AccessDelResponse>;
    /**
     * Returns the current acccess entries as an array of strings.
     *
     * @remarks
     * Returns the current acccess entries as an array of strings.
     */
    protocolSnmpv3AccessList(req: operations.ProtocolSnmpv3AccessListRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3AccessListResponse>;
    /**
     * Returns the SNMPv3 configuration.
     *
     * @remarks
     * Returns the SNMPv3 configuration.
     */
    protocolSnmpv3GetConfig(req: operations.ProtocolSnmpv3GetConfigRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3GetConfigResponse>;
    /**
     * Retrieves the contextEngineID for the agent instance.
     *
     * @remarks
     * Retrieves the contextEngineID for the agent instance.
     */
    protocolSnmpv3GetContextEngineid(req: operations.ProtocolSnmpv3GetContextEngineidRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3GetContextEngineidResponse>;
    /**
     * Retrieves the number of times the agent has been restarted.
     *
     * @remarks
     * Retrieves the number of times the agent has been restarted.
     */
    protocolSnmpv3GetEngineboots(req: operations.ProtocolSnmpv3GetEnginebootsRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3GetEnginebootsResponse>;
    /**
     * For started agents, retrieves the current engineID in use by the snmpv3 module.
     *
     * @remarks
     * For stopped agents, this operation is meaningless. If not explicitly set by the user then the autogenerated engineID is returned. The format of the engineID is in the familiar hex format, eg. \x01 23 45 67 89...
     */
    protocolSnmpv3GetEngineid(req: operations.ProtocolSnmpv3GetEngineidRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3GetEngineidResponse>;
    /**
     * Retrieves the time in seconds for which the agent has been running.
     *
     * @remarks
     * Retrieves the time in seconds for which the agent has been running.
     */
    protocolSnmpv3GetEnginetime(req: operations.ProtocolSnmpv3GetEnginetimeRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3GetEnginetimeResponse>;
    /**
     * Adds a new group entry with the specified parameters.
     *
     * @remarks
     * Adds a new group entry with the specified parameters.
     */
    protocolSnmpv3GroupAdd(req: operations.ProtocolSnmpv3GroupAddRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3GroupAddResponse>;
    /**
     * Clears all group entries.
     *
     * @remarks
     * Clears all group entries.
     */
    protocolSnmpv3GroupClear(req: operations.ProtocolSnmpv3GroupClearRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3GroupClearResponse>;
    /**
     * Deletes the specified group entry.
     *
     * @remarks
     * Deletes the specified group entry.
     */
    protocolSnmpv3GroupDel(req: operations.ProtocolSnmpv3GroupDelRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3GroupDelResponse>;
    /**
     * Returns the current group entries as an array of strings.
     *
     * @remarks
     * Returns the current group entries as an array of strings.
     */
    protocolSnmpv3GroupList(req: operations.ProtocolSnmpv3GroupListRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3GroupListResponse>;
    /**
     * Changes the SNMPv3 configuration.
     *
     * @remarks
     * Changes the SNMPv3 configuration.
     */
    protocolSnmpv3SetConfig(req: operations.ProtocolSnmpv3SetConfigRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3SetConfigResponse>;
    /**
     * Adds a new user entry with the specified parameters.
     *
     * @remarks
     * Adds a new user entry with the specified parameters.
     */
    protocolSnmpv3UserAdd(req: operations.ProtocolSnmpv3UserAddRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3UserAddResponse>;
    /**
     * Clears all user entries.
     *
     * @remarks
     * Clears all user entries.
     */
    protocolSnmpv3UserClear(req: operations.ProtocolSnmpv3UserClearRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3UserClearResponse>;
    /**
     * Deletes the specified user entry.
     *
     * @remarks
     * Deletes the specified user entry.
     */
    protocolSnmpv3UserDel(req: operations.ProtocolSnmpv3UserDelRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3UserDelResponse>;
    /**
     * Returns the current user entries as a Tcl list.
     *
     * @remarks
     * Returns the current user entries as a Tcl list.
     */
    protocolSnmpv3UserList(req: operations.ProtocolSnmpv3UserListRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3UserListResponse>;
    /**
     * Saves current user settings in the currently loaded USM config file.
     *
     * @remarks
     * Saves current user settings in the currently loaded USM config file.
     */
    protocolSnmpv3UsmSave(req: operations.ProtocolSnmpv3UsmSaveRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3UsmSaveResponse>;
    /**
     * Saves current user settings in the specified USM config file.
     *
     * @remarks
     * Saves current user settings in the specified USM config file.
     */
    protocolSnmpv3UsmSaveas(req: operations.ProtocolSnmpv3UsmSaveasRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3UsmSaveasResponse>;
    /**
     * Saves current group, access, view settings in the currently loaded VACM config file.
     *
     * @remarks
     * Saves current group, access, view settings in the currently loaded VACM config file.
     */
    protocolSnmpv3VacmSave(req: operations.ProtocolSnmpv3VacmSaveRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3VacmSaveResponse>;
    /**
     * Saves current group, access, view settings in the specified VACM config file.
     *
     * @remarks
     * Saves current group, access, view settings in the specified VACM config file.
     */
    protocolSnmpv3VacmSaveas(req: operations.ProtocolSnmpv3VacmSaveasRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3VacmSaveasResponse>;
    /**
     * Adds a new view entry with the specified parameters.
     *
     * @remarks
     * Adds a new view entry with the specified parameters.
     */
    protocolSnmpv3ViewAdd(req: operations.ProtocolSnmpv3ViewAddRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3ViewAddResponse>;
    /**
     * Clears all view entries.
     *
     * @remarks
     * Clears all view entries.
     */
    protocolSnmpv3ViewClear(req: operations.ProtocolSnmpv3ViewClearRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3ViewClearResponse>;
    /**
     * Deletes the specified view entry.
     *
     * @remarks
     * Deletes the specified view entry.
     */
    protocolSnmpv3ViewDel(req: operations.ProtocolSnmpv3ViewDelRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3ViewDelResponse>;
    /**
     * Returns the current view entries as an array of strings.
     *
     * @remarks
     * Returns the current view entries as an array of strings.
     */
    protocolSnmpv3ViewList(req: operations.ProtocolSnmpv3ViewListRequest, config?: AxiosRequestConfig): Promise<operations.ProtocolSnmpv3ViewListResponse>;
}
