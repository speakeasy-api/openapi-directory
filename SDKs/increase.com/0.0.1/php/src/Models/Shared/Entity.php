<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Entity - Entities are the legal entities that own accounts. They can be people, corporations, partnerships, or trusts.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Entity
{
    /**
     * Details of the corporation entity. Will be present if `structure` is equal to `corporation`.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\EntityCorporation $corporation
     */
	#[\JMS\Serializer\Annotation\SerializedName('corporation')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\EntityCorporation')]
    public EntityCorporation $corporation;
    
    /**
     * The entity's description for display purposes.
     * 
     * @var string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $description;
    
    /**
     * The entity's identifier.
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * Details of the joint entity. Will be present if `structure` is equal to `joint`.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\EntityJoint $joint
     */
	#[\JMS\Serializer\Annotation\SerializedName('joint')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\EntityJoint')]
    public EntityJoint $joint;
    
    /**
     * Details of the natural person entity. Will be present if `structure` is equal to `natural_person`.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\EntityIndividual $naturalPerson
     */
	#[\JMS\Serializer\Annotation\SerializedName('natural_person')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\EntityIndividual')]
    public EntityIndividual $naturalPerson;
    
    /**
     * The relationship between your group and the entity.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\EntityRelationshipEnum $relationship
     */
	#[\JMS\Serializer\Annotation\SerializedName('relationship')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\EntityRelationshipEnum>')]
    public EntityRelationshipEnum $relationship;
    
    /**
     * The entity's legal structure.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\EntityStructureEnum $structure
     */
	#[\JMS\Serializer\Annotation\SerializedName('structure')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\EntityStructureEnum>')]
    public EntityStructureEnum $structure;
    
    /**
     * Additional documentation associated with the entity.
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\EntitySupplementalDocumentsElement> $supplementalDocuments
     */
	#[\JMS\Serializer\Annotation\SerializedName('supplemental_documents')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\EntitySupplementalDocumentsElement>')]
    public array $supplementalDocuments;
    
    /**
     * Details of the trust entity. Will be present if `structure` is equal to `trust`.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\EntityTrust $trust
     */
	#[\JMS\Serializer\Annotation\SerializedName('trust')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\EntityTrust')]
    public EntityTrust $trust;
    
    /**
     * A constant representing the object's type. For this resource it will always be `entity`.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\EntityTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\EntityTypeEnum>')]
    public EntityTypeEnum $type;
    
	public function __construct()
	{
		$this->corporation = new \OpenAPI\OpenAPI\Models\Shared\EntityCorporation();
		$this->description = "";
		$this->id = "";
		$this->joint = new \OpenAPI\OpenAPI\Models\Shared\EntityJoint();
		$this->naturalPerson = new \OpenAPI\OpenAPI\Models\Shared\EntityIndividual();
		$this->relationship = \OpenAPI\OpenAPI\Models\Shared\EntityRelationshipEnum::AFFILIATED;
		$this->structure = \OpenAPI\OpenAPI\Models\Shared\EntityStructureEnum::CORPORATION;
		$this->supplementalDocuments = [];
		$this->trust = new \OpenAPI\OpenAPI\Models\Shared\EntityTrust();
		$this->type = \OpenAPI\OpenAPI\Models\Shared\EntityTypeEnum::ENTITY;
	}
}
