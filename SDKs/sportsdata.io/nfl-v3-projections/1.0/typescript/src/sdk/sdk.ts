/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "http://azure-api.sportsdata.io/v3/nfl/projections",
  "https://azure-api.sportsdata.io/v3/nfl/projections",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * NFL projected stats API.
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }
  }

  /**
   * DFS Slate Ownership Projections by SlateID
   *
   * @remarks
   * Slate Ownership Projections for a specific slate. Projections are for GPP format ownership. Will return an empty list if the slate is not yet projected or not a slate we have projections for.
   */
  dfsSlateOwnershipProjectionsBySlateid(
    req: operations.DfsSlateOwnershipProjectionsBySlateidRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DfsSlateOwnershipProjectionsBySlateidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfsSlateOwnershipProjectionsBySlateidRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/DfsSlateOwnershipProjectionsBySlateID/{slateId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfsSlateOwnershipProjectionsBySlateidResponse =
        new operations.DfsSlateOwnershipProjectionsBySlateidResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dfsSlateWithOwnershipProjection = utils.objectToClass(
              httpRes?.data,
              shared.DfsSlateWithOwnershipProjection
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * DFS Slates by Date
   */
  dfsSlatesByDate(
    req: operations.DfsSlatesByDateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DfsSlatesByDateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfsSlatesByDateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/DfsSlatesByDate/{date}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfsSlatesByDateResponse =
        new operations.DfsSlatesByDateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dfsSlates = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.dfsSlates = utils.objectToClass(
              httpRes?.data,
              shared.DfsSlate,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * DFS Slates by Week
   */
  dfsSlatesByWeek(
    req: operations.DfsSlatesByWeekRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DfsSlatesByWeekResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfsSlatesByWeekRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/DfsSlatesByWeek/{season}/{week}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfsSlatesByWeekResponse =
        new operations.DfsSlatesByWeekResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dfsSlates = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.dfsSlates = utils.objectToClass(
              httpRes?.data,
              shared.DfsSlate,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * IDP Projected Player Game Stats by Player (w/ Injuries, Lineups, DFS Salaries)
   */
  idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries(
    req: operations.IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/IdpPlayerGameProjectionStatsByPlayerID/{season}/{week}/{playerid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse =
        new operations.IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerGameProjection = utils.objectToClass(
              httpRes?.data,
              shared.PlayerGameProjection
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * IDP Projected Player Game Stats by Team (w/ Injuries, Lineups, DFS Salaries)
   */
  idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries(
    req: operations.IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/IdpPlayerGameProjectionStatsByTeam/{season}/{week}/{team}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse =
        new operations.IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerGameProjections = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playerGameProjections = utils.objectToClass(
              httpRes?.data,
              shared.PlayerGameProjection,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * IDP Projected Player Game Stats by Week (w/ Injuries, Lineups, DFS Salaries)
   */
  idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries(
    req: operations.IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/IdpPlayerGameProjectionStatsByWeek/{season}/{week}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse =
        new operations.IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerGameProjections = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playerGameProjections = utils.objectToClass(
              httpRes?.data,
              shared.PlayerGameProjection,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Injured Players
   *
   * @remarks
   * This endpoint provides all currently injured NFL players, along with injury details.
   */
  injuredPlayers(
    req: operations.InjuredPlayersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.InjuredPlayersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.InjuredPlayersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/InjuredPlayers",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.InjuredPlayersResponse =
        new operations.InjuredPlayersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.players = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.players = utils.objectToClass(
              httpRes?.data,
              shared.Player,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Projected Fantasy Defense Game Stats (w/ DFS Salaries)
   */
  projectedFantasyDefenseGameStatsWDfsSalaries(
    req: operations.ProjectedFantasyDefenseGameStatsWDfsSalariesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectedFantasyDefenseGameStatsWDfsSalariesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectedFantasyDefenseGameStatsWDfsSalariesRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/FantasyDefenseProjectionsByGame/{season}/{week}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectedFantasyDefenseGameStatsWDfsSalariesResponse =
        new operations.ProjectedFantasyDefenseGameStatsWDfsSalariesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fantasyDefenseGameProjections = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.fantasyDefenseGameProjections = utils.objectToClass(
              httpRes?.data,
              shared.FantasyDefenseGameProjection,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Projected Fantasy Defense Season Stats (w/ ADP)
   */
  projectedFantasyDefenseSeasonStatsWAdp(
    req: operations.ProjectedFantasyDefenseSeasonStatsWAdpRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectedFantasyDefenseSeasonStatsWAdpResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectedFantasyDefenseSeasonStatsWAdpRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/FantasyDefenseProjectionsBySeason/{season}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectedFantasyDefenseSeasonStatsWAdpResponse =
        new operations.ProjectedFantasyDefenseSeasonStatsWAdpResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fantasyDefenseSeasonProjections = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.fantasyDefenseSeasonProjections = utils.objectToClass(
              httpRes?.data,
              shared.FantasyDefenseSeasonProjection,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Projected Player Game Stats by Player (w/ Injuries, Lineups, DFS Salaries)
   */
  projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries(
    req: operations.ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/PlayerGameProjectionStatsByPlayerID/{season}/{week}/{playerid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse =
        new operations.ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerGameProjection = utils.objectToClass(
              httpRes?.data,
              shared.PlayerGameProjection
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Projected Player Game Stats by Team (w/ Injuries, Lineups, DFS Salaries)
   */
  projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries(
    req: operations.ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/PlayerGameProjectionStatsByTeam/{season}/{week}/{team}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse =
        new operations.ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerGameProjections = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playerGameProjections = utils.objectToClass(
              httpRes?.data,
              shared.PlayerGameProjection,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Projected Player Game Stats by Week (w/ Injuries, Lineups, DFS Salaries)
   */
  projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries(
    req: operations.ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/PlayerGameProjectionStatsByWeek/{season}/{week}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse =
        new operations.ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerGameProjections = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playerGameProjections = utils.objectToClass(
              httpRes?.data,
              shared.PlayerGameProjection,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Projected Player Season Stats by Player (w/ ADP)
   */
  projectedPlayerSeasonStatsByPlayerWAdp(
    req: operations.ProjectedPlayerSeasonStatsByPlayerWAdpRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectedPlayerSeasonStatsByPlayerWAdpResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectedPlayerSeasonStatsByPlayerWAdpRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/PlayerSeasonProjectionStatsByPlayerID/{season}/{playerid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectedPlayerSeasonStatsByPlayerWAdpResponse =
        new operations.ProjectedPlayerSeasonStatsByPlayerWAdpResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerSeasonProjection = utils.objectToClass(
              httpRes?.data,
              shared.PlayerSeasonProjection
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Projected Player Season Stats by Team (w/ ADP)
   */
  projectedPlayerSeasonStatsByTeamWAdp(
    req: operations.ProjectedPlayerSeasonStatsByTeamWAdpRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectedPlayerSeasonStatsByTeamWAdpResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectedPlayerSeasonStatsByTeamWAdpRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/PlayerSeasonProjectionStatsByTeam/{season}/{team}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectedPlayerSeasonStatsByTeamWAdpResponse =
        new operations.ProjectedPlayerSeasonStatsByTeamWAdpResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerSeasonProjections = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playerSeasonProjections = utils.objectToClass(
              httpRes?.data,
              shared.PlayerSeasonProjection,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Projected Player Season Stats (w/ ADP)
   */
  projectedPlayerSeasonStatsWAdp(
    req: operations.ProjectedPlayerSeasonStatsWAdpRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectedPlayerSeasonStatsWAdpResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectedPlayerSeasonStatsWAdpRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/PlayerSeasonProjectionStats/{season}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectedPlayerSeasonStatsWAdpResponse =
        new operations.ProjectedPlayerSeasonStatsWAdpResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerSeasonProjections = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playerSeasonProjections = utils.objectToClass(
              httpRes?.data,
              shared.PlayerSeasonProjection,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Upcoming DFS Slate Ownership Projections
   *
   * @remarks
   * Grabs DFS Slates which have not yet started for which we have DFS Ownership projections.
   */
  upcomingDfsSlateOwnershipProjections(
    req: operations.UpcomingDfsSlateOwnershipProjectionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpcomingDfsSlateOwnershipProjectionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpcomingDfsSlateOwnershipProjectionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/UpcomingDfsSlateOwnershipProjections",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpcomingDfsSlateOwnershipProjectionsResponse =
        new operations.UpcomingDfsSlateOwnershipProjectionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dfsSlateWithOwnershipProjections = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.dfsSlateWithOwnershipProjections = utils.objectToClass(
              httpRes?.data,
              shared.DfsSlateWithOwnershipProjection,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
