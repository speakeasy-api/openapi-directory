// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type InstantTranslationResultType string

const (
	InstantTranslationResultTypeInstantContentsTranslationResult InstantTranslationResultType = "InstantContentsTranslationResult"
	InstantTranslationResultTypeInstantFilesTranslationResult    InstantTranslationResultType = "InstantFilesTranslationResult"
)

type InstantTranslationResult struct {
	InstantContentsTranslationResult *InstantContentsTranslationResult
	InstantFilesTranslationResult    *InstantFilesTranslationResult

	Type InstantTranslationResultType
}

func CreateInstantTranslationResultInstantContentsTranslationResult(instantContentsTranslationResult InstantContentsTranslationResult) InstantTranslationResult {
	typ := InstantTranslationResultTypeInstantContentsTranslationResult

	return InstantTranslationResult{
		InstantContentsTranslationResult: &instantContentsTranslationResult,
		Type:                             typ,
	}
}

func CreateInstantTranslationResultInstantFilesTranslationResult(instantFilesTranslationResult InstantFilesTranslationResult) InstantTranslationResult {
	typ := InstantTranslationResultTypeInstantFilesTranslationResult

	return InstantTranslationResult{
		InstantFilesTranslationResult: &instantFilesTranslationResult,
		Type:                          typ,
	}
}

func (u *InstantTranslationResult) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	instantContentsTranslationResult := new(InstantContentsTranslationResult)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&instantContentsTranslationResult); err == nil {
		u.InstantContentsTranslationResult = instantContentsTranslationResult
		u.Type = InstantTranslationResultTypeInstantContentsTranslationResult
		return nil
	}

	instantFilesTranslationResult := new(InstantFilesTranslationResult)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&instantFilesTranslationResult); err == nil {
		u.InstantFilesTranslationResult = instantFilesTranslationResult
		u.Type = InstantTranslationResultTypeInstantFilesTranslationResult
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u InstantTranslationResult) MarshalJSON() ([]byte, error) {
	if u.InstantContentsTranslationResult != nil {
		return json.Marshal(u.InstantContentsTranslationResult)
	}

	if u.InstantFilesTranslationResult != nil {
		return json.Marshal(u.InstantFilesTranslationResult)
	}

	return nil, nil
}
