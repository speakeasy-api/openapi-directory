"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ReposListCacheInfoRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results per page (max 100)."""  
    
class ReposListCacheInfo200ApplicationJSONGitSyncStatusEnum(str, Enum):
    OFFLINE = 'offline'
    INACTIVE = 'inactive'
    IN_SYNC = 'in_sync'
    NOT_IN_SYNC = 'not_in_sync'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposListCacheInfo200ApplicationJSONGit:
    
    last_sync: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_sync'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    sync_status: ReposListCacheInfo200ApplicationJSONGitSyncStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sync_status') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposListCacheInfo200ApplicationJSON:
    r"""Status for a cache replica"""
    
    git: ReposListCacheInfo200ApplicationJSONGit = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git') }})  
    host: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host') }})  
    location: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})  
    

@dataclasses.dataclass
class ReposListCacheInfoResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Forbidden"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    repos_list_cache_info_200_application_json_objects: Optional[list[ReposListCacheInfo200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Status information for cache replicas"""  
    