"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import filter as shared_filter
from ..shared import listcontainerrecipesresponse as shared_listcontainerrecipesresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ListContainerRecipesRequestBodyOwnerEnum(str, Enum):
    r"""Returns container recipes belonging to the specified owner, that have been shared with you. You can omit this field to return container recipes belonging to your account."""
    SELF = 'Self'
    SHARED = 'Shared'
    AMAZON = 'Amazon'
    THIRD_PARTY = 'ThirdParty'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListContainerRecipesRequestBody:
    
    filters: Optional[list[shared_filter.Filter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filters'), 'exclude': lambda f: f is None }})
    r"""<p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>containerType</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>parentImage</code> </p> </li> <li> <p> <code>platform</code> </p> </li> </ul>"""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxResults'), 'exclude': lambda f: f is None }})
    r"""The maximum number of results to return in the list."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextToken'), 'exclude': lambda f: f is None }})
    r"""Provides a token for pagination, which determines where to begin the next set of results when the current set reaches the maximum for one request."""  
    owner: Optional[ListContainerRecipesRequestBodyOwnerEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner'), 'exclude': lambda f: f is None }})
    r"""Returns container recipes belonging to the specified owner, that have been shared with you. You can omit this field to return container recipes belonging to your account."""  
    

@dataclasses.dataclass
class ListContainerRecipesRequest:
    
    request_body: ListContainerRecipesRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    max_results: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Pagination limit"""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""Pagination token"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListContainerRecipesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    call_rate_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CallRateLimitExceededException"""  
    client_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ClientException"""  
    forbidden_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ForbiddenException"""  
    invalid_pagination_token_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidPaginationTokenException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    list_container_recipes_response: Optional[shared_listcontainerrecipesresponse.ListContainerRecipesResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    