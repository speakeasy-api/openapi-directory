"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dimensionheader as shared_dimensionheader
from ..shared import metricheader as shared_metricheader
from ..shared import pivotheader as shared_pivotheader
from ..shared import propertyquota as shared_propertyquota
from ..shared import responsemetadata as shared_responsemetadata
from ..shared import row as shared_row
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RunPivotReportResponse:
    r"""The response pivot report table corresponding to a pivot request."""
    
    aggregates: Optional[list[shared_row.Row]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregates'), 'exclude': lambda f: f is None }})
    r"""Aggregation of metric values. Can be totals, minimums, or maximums. The returned aggregations are controlled by the metric_aggregations in the pivot. The type of aggregation returned in each row is shown by the dimension_values which are set to \\"RESERVED_\\"."""  
    dimension_headers: Optional[list[shared_dimensionheader.DimensionHeader]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimensionHeaders'), 'exclude': lambda f: f is None }})
    r"""Describes dimension columns. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this message is. This `kind` is always the fixed string \\"analyticsData#runPivotReport\\". Useful to distinguish between response types in JSON."""  
    metadata: Optional[shared_responsemetadata.ResponseMetaData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Response's metadata carrying additional information about the report content."""  
    metric_headers: Optional[list[shared_metricheader.MetricHeader]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricHeaders'), 'exclude': lambda f: f is None }})
    r"""Describes metric columns. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows."""  
    pivot_headers: Optional[list[shared_pivotheader.PivotHeader]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pivotHeaders'), 'exclude': lambda f: f is None }})
    r"""Summarizes the columns and rows created by a pivot. Each pivot in the request produces one header in the response. If we have a request like this: \\"pivots\\": [{ \\"fieldNames\\": [\\"country\\", \\"city\\"] }, { \\"fieldNames\\": \\"eventName\\" }] We will have the following `pivotHeaders` in the response: \\"pivotHeaders\\" : [{ \\"dimensionHeaders\\": [{ \\"dimensionValues\\": [ { \\"value\\": \\"United Kingdom\\" }, { \\"value\\": \\"London\\" } ] }, { \\"dimensionValues\\": [ { \\"value\\": \\"Japan\\" }, { \\"value\\": \\"Osaka\\" } ] }] }, { \\"dimensionHeaders\\": [{ \\"dimensionValues\\": [{ \\"value\\": \\"session_start\\" }] }, { \\"dimensionValues\\": [{ \\"value\\": \\"scroll\\" }] }] }]"""  
    property_quota: Optional[shared_propertyquota.PropertyQuota] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('propertyQuota'), 'exclude': lambda f: f is None }})
    r"""Current state of all quotas for this Analytics Property. If any quota for a property is exhausted, all requests to that property will return Resource Exhausted errors."""  
    rows: Optional[list[shared_row.Row]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rows'), 'exclude': lambda f: f is None }})
    r"""Rows of dimension value combinations and metric values in the report."""  
    