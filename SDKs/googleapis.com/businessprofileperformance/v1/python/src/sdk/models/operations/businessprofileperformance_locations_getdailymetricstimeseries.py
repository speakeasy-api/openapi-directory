"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import getdailymetricstimeseriesresponse as shared_getdailymetricstimeseriesresponse
from enum import Enum
from typing import Optional

class BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesDailyMetricEnum(str, Enum):
    r"""Required. The metric to retrieve time series."""
    DAILY_METRIC_UNKNOWN = 'DAILY_METRIC_UNKNOWN'
    BUSINESS_IMPRESSIONS_DESKTOP_MAPS = 'BUSINESS_IMPRESSIONS_DESKTOP_MAPS'
    BUSINESS_IMPRESSIONS_DESKTOP_SEARCH = 'BUSINESS_IMPRESSIONS_DESKTOP_SEARCH'
    BUSINESS_IMPRESSIONS_MOBILE_MAPS = 'BUSINESS_IMPRESSIONS_MOBILE_MAPS'
    BUSINESS_IMPRESSIONS_MOBILE_SEARCH = 'BUSINESS_IMPRESSIONS_MOBILE_SEARCH'
    BUSINESS_CONVERSATIONS = 'BUSINESS_CONVERSATIONS'
    BUSINESS_DIRECTION_REQUESTS = 'BUSINESS_DIRECTION_REQUESTS'
    CALL_CLICKS = 'CALL_CLICKS'
    WEBSITE_CLICKS = 'WEBSITE_CLICKS'
    BUSINESS_BOOKINGS = 'BUSINESS_BOOKINGS'
    BUSINESS_FOOD_ORDERS = 'BUSINESS_FOOD_ORDERS'
    BUSINESS_FOOD_MENU_CLICKS = 'BUSINESS_FOOD_MENU_CLICKS'

class BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesDailySubEntityTypeDayOfWeekEnum(str, Enum):
    r"""Represents the day of the week. Eg: MONDAY."""
    DAY_OF_WEEK_UNSPECIFIED = 'DAY_OF_WEEK_UNSPECIFIED'
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'
    SUNDAY = 'SUNDAY'


@dataclasses.dataclass
class BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesRequest:
    
    name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'name', 'style': 'simple', 'explode': False }})
    r"""Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id."""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    daily_metric: Optional[BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesDailyMetricEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dailyMetric', 'style': 'form', 'explode': True }})
    r"""Required. The metric to retrieve time series."""  
    daily_range_end_date_day: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dailyRange.endDate.day', 'style': 'form', 'explode': True }})
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""  
    daily_range_end_date_month: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dailyRange.endDate.month', 'style': 'form', 'explode': True }})
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""  
    daily_range_end_date_year: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dailyRange.endDate.year', 'style': 'form', 'explode': True }})
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""  
    daily_range_start_date_day: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dailyRange.startDate.day', 'style': 'form', 'explode': True }})
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""  
    daily_range_start_date_month: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dailyRange.startDate.month', 'style': 'form', 'explode': True }})
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""  
    daily_range_start_date_year: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dailyRange.startDate.year', 'style': 'form', 'explode': True }})
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""  
    daily_sub_entity_type_day_of_week: Optional[BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesDailySubEntityTypeDayOfWeekEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dailySubEntityType.dayOfWeek', 'style': 'form', 'explode': True }})
    r"""Represents the day of the week. Eg: MONDAY."""  
    daily_sub_entity_type_time_of_day_hours: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dailySubEntityType.timeOfDay.hours', 'style': 'form', 'explode': True }})
    r"""Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \\"24:00:00\\" for scenarios like business closing time."""  
    daily_sub_entity_type_time_of_day_minutes: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dailySubEntityType.timeOfDay.minutes', 'style': 'form', 'explode': True }})
    r"""Minutes of hour of day. Must be from 0 to 59."""  
    daily_sub_entity_type_time_of_day_nanos: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dailySubEntityType.timeOfDay.nanos', 'style': 'form', 'explode': True }})
    r"""Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999."""  
    daily_sub_entity_type_time_of_day_seconds: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dailySubEntityType.timeOfDay.seconds', 'style': 'form', 'explode': True }})
    r"""Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    

@dataclasses.dataclass
class BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_daily_metrics_time_series_response: Optional[shared_getdailymetricstimeseriesresponse.GetDailyMetricsTimeSeriesResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    