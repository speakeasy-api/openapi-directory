<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ProductSearch - List of products for the given query.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ProductSearch
{
    /**
     * Object with information of misspelled terms.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ProductSearchCorrection $correction
     */
	#[\JMS\Serializer\Annotation\SerializedName('correction')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ProductSearchCorrection')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ProductSearchCorrection $correction = null;
    
    /**
     * Indicates how the search engine corrected the misspelled word by using fuzzy logic. It can be a number representing the max number of misspelled letters, or the string `auto` suggesting that the search-engine should set this value by itself.
     * 
     * @var ?string $fuzzy
     */
	#[\JMS\Serializer\Annotation\SerializedName('fuzzy')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fuzzy = null;
    
    /**
     * Indicates how the search-engine dealt with the fullText when there is more than one word.
     * 
     *  * `and` - It means that the products contains all the words in the query.
     *  * `or` - It means that the results will contain at least one word from the original search query. If `and` was not possible, `or` will be the fallback.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ProductSearchOperatorEnum $operator
     */
	#[\JMS\Serializer\Annotation\SerializedName('operator')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ProductSearchOperatorEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ProductSearchOperatorEnum $operator = null;
    
    /**
     * List of products
     * 
     * @var ?array<array<string, mixed>> $products
     */
	#[\JMS\Serializer\Annotation\SerializedName('products')]
    #[\JMS\Serializer\Annotation\Type('array<array<string, mixed>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $products = null;
    
    /**
     * Total number of products.
     * 
     * @var ?float $recordsFiltered
     */
	#[\JMS\Serializer\Annotation\SerializedName('recordsFiltered')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $recordsFiltered = null;
    
    /**
     * Whether the list of products was translated by the IS (`true`) or not (`false`).
     * 
     * @var ?bool $translated
     */
	#[\JMS\Serializer\Annotation\SerializedName('translated')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $translated = null;
    
	public function __construct()
	{
		$this->correction = null;
		$this->fuzzy = null;
		$this->operator = null;
		$this->products = null;
		$this->recordsFiltered = null;
		$this->translated = null;
	}
}
