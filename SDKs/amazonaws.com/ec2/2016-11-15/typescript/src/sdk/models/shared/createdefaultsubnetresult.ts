/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The state of a CIDR block.
 */
export enum CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum {
  Associating = "associating",
  Associated = "associated",
  Disassociating = "disassociating",
  Disassociated = "disassociated",
  Failing = "failing",
  Failed = "failed",
}

/**
 * The state of the CIDR block.
 */
export class CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState extends SpeakeasyBase {
  @SpeakeasyMetadata()
  state?: CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum;

  @SpeakeasyMetadata()
  statusMessage?: string;
}

/**
 * Describes an association between a subnet and an IPv6 CIDR block.
 */
export class CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  associationId?: string;

  @SpeakeasyMetadata()
  ipv6CidrBlock?: string;

  @SpeakeasyMetadata()
  ipv6CidrBlockState?: CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState;
}

/**
 * The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID.
 */
export enum CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum {
  IpName = "ip-name",
  ResourceName = "resource-name",
}

/**
 * The type of hostnames to assign to instances in the subnet at launch. An instance hostname is based on the IPv4 address or ID of the instance.
 */
export class CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunch extends SpeakeasyBase {
  @SpeakeasyMetadata()
  enableResourceNameDnsAAAARecord?: boolean;

  @SpeakeasyMetadata()
  enableResourceNameDnsARecord?: boolean;

  @SpeakeasyMetadata()
  hostnameType?: CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum;
}

/**
 * The current state of the subnet.
 */
export enum CreateDefaultSubnetResultSubnetStateEnum {
  Pending = "pending",
  Available = "available",
}

/**
 * Describes a tag.
 */
export class CreateDefaultSubnetResultSubnetTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Information about the subnet.
 */
export class CreateDefaultSubnetResultSubnet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  assignIpv6AddressOnCreation?: boolean;

  @SpeakeasyMetadata()
  availabilityZone?: string;

  @SpeakeasyMetadata()
  availabilityZoneId?: string;

  @SpeakeasyMetadata()
  availableIpAddressCount?: number;

  @SpeakeasyMetadata()
  cidrBlock?: string;

  @SpeakeasyMetadata()
  customerOwnedIpv4Pool?: string;

  @SpeakeasyMetadata()
  defaultForAz?: boolean;

  @SpeakeasyMetadata()
  enableDns64?: boolean;

  @SpeakeasyMetadata()
  enableLniAtDeviceIndex?: number;

  @SpeakeasyMetadata({
    elemType: CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet,
  })
  ipv6CidrBlockAssociationSet?: CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet[];

  @SpeakeasyMetadata()
  ipv6Native?: boolean;

  @SpeakeasyMetadata()
  mapCustomerOwnedIpOnLaunch?: boolean;

  @SpeakeasyMetadata()
  mapPublicIpOnLaunch?: boolean;

  @SpeakeasyMetadata()
  outpostArn?: string;

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata()
  privateDnsNameOptionsOnLaunch?: CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunch;

  @SpeakeasyMetadata()
  state?: CreateDefaultSubnetResultSubnetStateEnum;

  @SpeakeasyMetadata()
  subnetArn?: string;

  @SpeakeasyMetadata()
  subnetId?: string;

  @SpeakeasyMetadata({ elemType: CreateDefaultSubnetResultSubnetTags })
  tags?: CreateDefaultSubnetResultSubnetTags[];

  @SpeakeasyMetadata()
  vpcId?: string;
}

/**
 * Success
 */
export class CreateDefaultSubnetResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  subnet?: CreateDefaultSubnetResultSubnet;
}
