/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum CreateDeploymentGroupXAmzTargetEnum {
  CodeDeploy20141006CreateDeploymentGroup = "CodeDeploy_20141006.CreateDeploymentGroup",
}

export class CreateDeploymentGroupRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  createDeploymentGroupInput: shared.CreateDeploymentGroupInput;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: CreateDeploymentGroupXAmzTargetEnum;
}

export class CreateDeploymentGroupResponse extends SpeakeasyBase {
  /**
   * AlarmsLimitExceededException
   */
  @SpeakeasyMetadata()
  alarmsLimitExceededException?: any;

  /**
   * ApplicationDoesNotExistException
   */
  @SpeakeasyMetadata()
  applicationDoesNotExistException?: any;

  /**
   * ApplicationNameRequiredException
   */
  @SpeakeasyMetadata()
  applicationNameRequiredException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createDeploymentGroupOutput?: shared.CreateDeploymentGroupOutput;

  /**
   * DeploymentConfigDoesNotExistException
   */
  @SpeakeasyMetadata()
  deploymentConfigDoesNotExistException?: any;

  /**
   * DeploymentGroupAlreadyExistsException
   */
  @SpeakeasyMetadata()
  deploymentGroupAlreadyExistsException?: any;

  /**
   * DeploymentGroupLimitExceededException
   */
  @SpeakeasyMetadata()
  deploymentGroupLimitExceededException?: any;

  /**
   * DeploymentGroupNameRequiredException
   */
  @SpeakeasyMetadata()
  deploymentGroupNameRequiredException?: any;

  /**
   * ECSServiceMappingLimitExceededException
   */
  @SpeakeasyMetadata()
  ecsServiceMappingLimitExceededException?: any;

  /**
   * InvalidAlarmConfigException
   */
  @SpeakeasyMetadata()
  invalidAlarmConfigException?: any;

  /**
   * InvalidApplicationNameException
   */
  @SpeakeasyMetadata()
  invalidApplicationNameException?: any;

  /**
   * InvalidAutoRollbackConfigException
   */
  @SpeakeasyMetadata()
  invalidAutoRollbackConfigException?: any;

  /**
   * InvalidAutoScalingGroupException
   */
  @SpeakeasyMetadata()
  invalidAutoScalingGroupException?: any;

  /**
   * InvalidBlueGreenDeploymentConfigurationException
   */
  @SpeakeasyMetadata()
  invalidBlueGreenDeploymentConfigurationException?: any;

  /**
   * InvalidDeploymentConfigNameException
   */
  @SpeakeasyMetadata()
  invalidDeploymentConfigNameException?: any;

  /**
   * InvalidDeploymentGroupNameException
   */
  @SpeakeasyMetadata()
  invalidDeploymentGroupNameException?: any;

  /**
   * InvalidDeploymentStyleException
   */
  @SpeakeasyMetadata()
  invalidDeploymentStyleException?: any;

  /**
   * InvalidEC2TagCombinationException
   */
  @SpeakeasyMetadata()
  invalidEc2TagCombinationException?: any;

  /**
   * InvalidEC2TagException
   */
  @SpeakeasyMetadata()
  invalidEc2TagException?: any;

  /**
   * InvalidECSServiceException
   */
  @SpeakeasyMetadata()
  invalidECSServiceException?: any;

  /**
   * InvalidInputException
   */
  @SpeakeasyMetadata()
  invalidInputException?: any;

  /**
   * InvalidLoadBalancerInfoException
   */
  @SpeakeasyMetadata()
  invalidLoadBalancerInfoException?: any;

  /**
   * InvalidOnPremisesTagCombinationException
   */
  @SpeakeasyMetadata()
  invalidOnPremisesTagCombinationException?: any;

  /**
   * InvalidRoleException
   */
  @SpeakeasyMetadata()
  invalidRoleException?: any;

  /**
   * InvalidTagException
   */
  @SpeakeasyMetadata()
  invalidTagException?: any;

  /**
   * InvalidTagsToAddException
   */
  @SpeakeasyMetadata()
  invalidTagsToAddException?: any;

  /**
   * InvalidTargetGroupPairException
   */
  @SpeakeasyMetadata()
  invalidTargetGroupPairException?: any;

  /**
   * InvalidTrafficRoutingConfigurationException
   */
  @SpeakeasyMetadata()
  invalidTrafficRoutingConfigurationException?: any;

  /**
   * InvalidTriggerConfigException
   */
  @SpeakeasyMetadata()
  invalidTriggerConfigException?: any;

  /**
   * LifecycleHookLimitExceededException
   */
  @SpeakeasyMetadata()
  lifecycleHookLimitExceededException?: any;

  /**
   * RoleRequiredException
   */
  @SpeakeasyMetadata()
  roleRequiredException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TagSetListLimitExceededException
   */
  @SpeakeasyMetadata()
  tagSetListLimitExceededException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * TriggerTargetsLimitExceededException
   */
  @SpeakeasyMetadata()
  triggerTargetsLimitExceededException?: any;
}
