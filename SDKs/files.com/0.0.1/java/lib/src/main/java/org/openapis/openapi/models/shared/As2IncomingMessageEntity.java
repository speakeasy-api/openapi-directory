/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * As2IncomingMessageEntity - List As2 Incoming Messages
 */
public class As2IncomingMessageEntity {
    /**
     * JSON Structure of the activity log.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activity_log")
    public String activityLog;

    public As2IncomingMessageEntity withActivityLog(String activityLog) {
        this.activityLog = activityLog;
        return this;
    }
    
    /**
     * AS2 FROM header of message
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("as2_from")
    public String as2From;

    public As2IncomingMessageEntity withAs2From(String as2From) {
        this.as2From = as2From;
        return this;
    }
    
    /**
     * Id of the AS2 Partner associated with this message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("as2_partner_id")
    public Integer as2PartnerId;

    public As2IncomingMessageEntity withAs2PartnerId(Integer as2PartnerId) {
        this.as2PartnerId = as2PartnerId;
        return this;
    }
    
    /**
     * Id of the AS2 Station associated with this message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("as2_station_id")
    public Integer as2StationId;

    public As2IncomingMessageEntity withAs2StationId(Integer as2StationId) {
        this.as2StationId = as2StationId;
        return this;
    }
    
    /**
     * AS2 TO header of message
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("as2_to")
    public String as2To;

    public As2IncomingMessageEntity withAs2To(String as2To) {
        this.as2To = as2To;
        return this;
    }
    
    /**
     * Filename of the file being received.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachment_filename")
    public String attachmentFilename;

    public As2IncomingMessageEntity withAttachmentFilename(String attachmentFilename) {
        this.attachmentFilename = attachmentFilename;
        return this;
    }
    
    /**
     * Encrypted Payload Body Size
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body_size")
    public String bodySize;

    public As2IncomingMessageEntity withBodySize(String bodySize) {
        this.bodySize = bodySize;
        return this;
    }
    
    /**
     * Content Type header of the incoming message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content_type")
    public String contentType;

    public As2IncomingMessageEntity withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * Message creation date/time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public As2IncomingMessageEntity withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Date Header
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    public String date;

    public As2IncomingMessageEntity withDate(String date) {
        this.date = date;
        return this;
    }
    
    /**
     * URL to download the encrypted signed smime that is to sent as AS2 body
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encrypted_uri")
    public String encryptedUri;

    public As2IncomingMessageEntity withEncryptedUri(String encryptedUri) {
        this.encryptedUri = encryptedUri;
        return this;
    }
    
    /**
     * Incoming Message Recipient(the Client Cert used to encrypt this message)'s serial in hex format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hex_recipient_serial")
    public String hexRecipientSerial;

    public As2IncomingMessageEntity withHexRecipientSerial(String hexRecipientSerial) {
        this.hexRecipientSerial = hexRecipientSerial;
        return this;
    }
    
    /**
     * HTTP Headers sent with this message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("http_headers")
    public java.util.Map<String, Object> httpHeaders;

    public As2IncomingMessageEntity withHttpHeaders(java.util.Map<String, Object> httpHeaders) {
        this.httpHeaders = httpHeaders;
        return this;
    }
    
    /**
     * HTTP Response Code sent for this message
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("http_response_code")
    public String httpResponseCode;

    public As2IncomingMessageEntity withHttpResponseCode(String httpResponseCode) {
        this.httpResponseCode = httpResponseCode;
        return this;
    }
    
    /**
     * HTTP Headers sent for this message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("http_response_headers")
    public java.util.Map<String, Object> httpResponseHeaders;

    public As2IncomingMessageEntity withHttpResponseHeaders(java.util.Map<String, Object> httpResponseHeaders) {
        this.httpResponseHeaders = httpResponseHeaders;
        return this;
    }
    
    /**
     * Id of the AS2 Partner.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;

    public As2IncomingMessageEntity withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * IP Address of the Sender
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip")
    public String ip;

    public As2IncomingMessageEntity withIp(String ip) {
        this.ip = ip;
        return this;
    }
    
    /**
     * URL to download the http response body
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mdn_response_uri")
    public String mdnResponseUri;

    public As2IncomingMessageEntity withMdnResponseUri(String mdnResponseUri) {
        this.mdnResponseUri = mdnResponseUri;
        return this;
    }
    
    /**
     * Message decrypted successfully?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message_decrypted")
    public Boolean messageDecrypted;

    public As2IncomingMessageEntity withMessageDecrypted(Boolean messageDecrypted) {
        this.messageDecrypted = messageDecrypted;
        return this;
    }
    
    /**
     * AS2 Message Id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message_id")
    public String messageId;

    public As2IncomingMessageEntity withMessageId(String messageId) {
        this.messageId = messageId;
        return this;
    }
    
    /**
     * MDN returned?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message_mdn_returned")
    public Boolean messageMdnReturned;

    public As2IncomingMessageEntity withMessageMdnReturned(Boolean messageMdnReturned) {
        this.messageMdnReturned = messageMdnReturned;
        return this;
    }
    
    /**
     * Message processed successfully?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message_processing_success")
    public Boolean messageProcessingSuccess;

    public As2IncomingMessageEntity withMessageProcessingSuccess(Boolean messageProcessingSuccess) {
        this.messageProcessingSuccess = messageProcessingSuccess;
        return this;
    }
    
    /**
     * Message body received?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message_received")
    public Boolean messageReceived;

    public As2IncomingMessageEntity withMessageReceived(Boolean messageReceived) {
        this.messageReceived = messageReceived;
        return this;
    }
    
    /**
     * Message signature verified?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message_signature_verified")
    public Boolean messageSignatureVerified;

    public As2IncomingMessageEntity withMessageSignatureVerified(Boolean messageSignatureVerified) {
        this.messageSignatureVerified = messageSignatureVerified;
        return this;
    }
    
    /**
     * AS2 Message Integrity Check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mic")
    public String mic;

    public As2IncomingMessageEntity withMic(String mic) {
        this.mic = mic;
        return this;
    }
    
    /**
     * AS2 Message Integrity Check Algorithm Used
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mic_algo")
    public String micAlgo;

    public As2IncomingMessageEntity withMicAlgo(String micAlgo) {
        this.micAlgo = micAlgo;
        return this;
    }
    
    /**
     * Result of processing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processing_result")
    public As2IncomingMessageEntityProcessingResultEnum processingResult;

    public As2IncomingMessageEntity withProcessingResult(As2IncomingMessageEntityProcessingResultEnum processingResult) {
        this.processingResult = processingResult;
        return this;
    }
    
    /**
     * Result of processing description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processing_result_description")
    public String processingResultDescription;

    public As2IncomingMessageEntity withProcessingResultDescription(String processingResultDescription) {
        this.processingResultDescription = processingResultDescription;
        return this;
    }
    
    /**
     * URL to download the original file contents
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw_uri")
    public String rawUri;

    public As2IncomingMessageEntity withRawUri(String rawUri) {
        this.rawUri = rawUri;
        return this;
    }
    
    /**
     * Incoming Message Recipient(the Client Cert used to encrypt this message)'s issuer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient_issuer")
    public String recipientIssuer;

    public As2IncomingMessageEntity withRecipientIssuer(String recipientIssuer) {
        this.recipientIssuer = recipientIssuer;
        return this;
    }
    
    /**
     * Incoming Message Recipient(the Client Cert used to encrypt this message)'s serial
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient_serial")
    public String recipientSerial;

    public As2IncomingMessageEntity withRecipientSerial(String recipientSerial) {
        this.recipientSerial = recipientSerial;
        return this;
    }
    
    /**
     * URL to download the file contents as smime with signature
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smime_signed_uri")
    public String smimeSignedUri;

    public As2IncomingMessageEntity withSmimeSignedUri(String smimeSignedUri) {
        this.smimeSignedUri = smimeSignedUri;
        return this;
    }
    
    /**
     * URL to download the file contents encoded as smime
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smime_uri")
    public String smimeUri;

    public As2IncomingMessageEntity withSmimeUri(String smimeUri) {
        this.smimeUri = smimeUri;
        return this;
    }
    
    /**
     * AS2 Subject Header
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    public String subject;

    public As2IncomingMessageEntity withSubject(String subject) {
        this.subject = subject;
        return this;
    }
    
    /**
     * UUID assigned to this message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    public String uuid;

    public As2IncomingMessageEntity withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }
    
    public As2IncomingMessageEntity(){}
}
