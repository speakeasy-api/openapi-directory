"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import propertyreference as shared_propertyreference
from ..shared import value as shared_value
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PropertyFilterOpEnum(str, Enum):
    r"""The operator to filter by."""
    OPERATOR_UNSPECIFIED = 'OPERATOR_UNSPECIFIED'
    LESS_THAN = 'LESS_THAN'
    LESS_THAN_OR_EQUAL = 'LESS_THAN_OR_EQUAL'
    GREATER_THAN = 'GREATER_THAN'
    GREATER_THAN_OR_EQUAL = 'GREATER_THAN_OR_EQUAL'
    EQUAL = 'EQUAL'
    IN = 'IN'
    NOT_EQUAL = 'NOT_EQUAL'
    HAS_ANCESTOR = 'HAS_ANCESTOR'
    NOT_IN = 'NOT_IN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PropertyFilter:
    r"""A filter on a specific property."""
    
    op: Optional[PropertyFilterOpEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('op'), 'exclude': lambda f: f is None }})
    r"""The operator to filter by."""  
    property: Optional[shared_propertyreference.PropertyReference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('property'), 'exclude': lambda f: f is None }})
    r"""A reference to a property relative to the kind expressions."""  
    value: Optional[shared_value.Value] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""A message that can hold any of the supported value types and associated metadata."""  
    