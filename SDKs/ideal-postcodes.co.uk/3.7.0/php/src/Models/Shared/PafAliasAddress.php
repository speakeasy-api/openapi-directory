<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PafAliasAddress - PAF Aliases addresses are alternate ways to present an address already found on PAF.
 * 
 * 
 * Alias data is information the public chooses to use when addressing mail, but which isn’t actually required for delivery purposes.  The Alias data contains records of alternative address details that are included in the address but not necessarily needed for delivery purposes.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PafAliasAddress
{
    /**
     * The current administrative county to which the postcode has been assigned.
     * 
     * 
     * A Unitary Authority name, where one is present. If there is no Unitary Authority, the County name is used. This information is not static, because County boundaries may change due to administrative changes. Data
     * 
     * source: ONS
     * 
     * @var string $administrativeCounty
     */
	#[\JMS\Serializer\Annotation\SerializedName('administrative_county')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $administrativeCounty;
    
    /**
     * Name of residential or commercial premise. 
     * 
     * 
     * Examples:
     *   - The Manor
     *   - 1-2
     *   - A
     *   - 12A
     *   - K
     *   - Victoria House
     * 
     * @var string $buildingName
     */
	#[\JMS\Serializer\Annotation\SerializedName('building_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $buildingName;
    
    /**
     * Number to identify premise on a thoroughfare or dependant thoroughfare.
     * 
     * @var string $buildingNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('building_number')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $buildingNumber;
    
	#[\JMS\Serializer\Annotation\SerializedName('country')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PafAliasAddressCountryEnum>')]
    public PafAliasAddressCountryEnum $country;
    
	#[\JMS\Serializer\Annotation\SerializedName('country_iso')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PafAliasAddressCountryIsoEnum>')]
    public PafAliasAddressCountryIsoEnum $countryIso;
    
	#[\JMS\Serializer\Annotation\SerializedName('country_iso_2')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PafAliasAddressCountryIso2Enum>')]
    public PafAliasAddressCountryIso2Enum $countryIso2;
    
    /**
     * Since postal, administrative or traditional counties may not apply to some addresses, the county field is designed to return whatever county data is available. Normally, the postal county is returned. If this is not present, the county field will fall back to the administrative county. If the administrative county is also not present, the county field will fall back to the traditional county. May be empty in cases where no administrative, postal or traditional county present.
     * 
     * @var string $county
     */
	#[\JMS\Serializer\Annotation\SerializedName('county')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $county;
    
    /**
     * Short code representing the county or province. May be empty (`""`)
     * 
     * @var string $countyCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('county_code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $countyCode;
    
	#[\JMS\Serializer\Annotation\SerializedName('dataset')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PafAliasAddressDatasetEnum>')]
    public PafAliasAddressDatasetEnum $dataset;
    
    /**
     * A unique Royal Mail 2-character code (the first numeric & the second alphabetical), which, when added to the Postcode, enables each live Delivery Point to be uniquely identified. Once the Delivery Point is deleted from PAF the DPS may be reused (although they aren’t reused until all remaining Delivery Points in the range have been allocated). The DPS for a Large User is always '1A' as each Large User has its own Postcode.
     * 
     * @var string $deliveryPointSuffix
     */
	#[\JMS\Serializer\Annotation\SerializedName('delivery_point_suffix')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $deliveryPointSuffix;
    
    /**
     * Used to supplment Organisation Name to identify a deparment within the organisation.
     * 
     * @var string $departmentName
     */
	#[\JMS\Serializer\Annotation\SerializedName('department_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $departmentName;
    
    /**
     * When the same thoroughfare name reoccurs in a Post town, it may not be possible to make it dependant on a dependant thoroughfare. In this case the thoroughfare is dependant on a locality. For example if we want to find 1 Back Lane in Huddersfield we see that there are three.
     * 
     * @var string $dependantLocality
     */
	#[\JMS\Serializer\Annotation\SerializedName('dependant_locality')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $dependantLocality;
    
    /**
     * Used to supplement thoroughfare. When a thoroughfare name is used twice in the same Post Town, the dependant thoroughfare is added to uniquely indentify a delivery point.
     * 
     * @var string $dependantThoroughfare
     */
	#[\JMS\Serializer\Annotation\SerializedName('dependant_thoroughfare')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $dependantThoroughfare;
    
    /**
     * The current district/unitary authority to which the postcode has been assigned.
     * 
     * @var string $district
     */
	#[\JMS\Serializer\Annotation\SerializedName('district')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $district;
    
    /**
     * Used to supplement Dependant Locality. A Double Dependant Locality supplied along with a Dependant Locality if the Dependant Locality exists twice in the same locality.
     * 
     * @var string $doubleDependantLocality
     */
	#[\JMS\Serializer\Annotation\SerializedName('double_dependant_locality')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $doubleDependantLocality;
    
    /**
     * Eastings reference using the [Ordnance Survey National Grid reference system](https://en.wikipedia.org/wiki/Ordnance_Survey_National_Grid).
     * 
     * 
     * Northern Ireland Eastings uses the [Irish Grid Reference System](https://en.wikipedia.org/wiki/Irish_grid_reference_system).
     * 
     * Metres from origin. E.g. `550458`
     * 
     * Returns an empty string if no location data is available. Otherwise a number is returned.
     * 
     * @var mixed $eastings
     */
	#[\JMS\Serializer\Annotation\SerializedName('eastings')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    public mixed $eastings;
    
    /**
     * Global unique internally generated identifier for an address
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
	#[\JMS\Serializer\Annotation\SerializedName('language')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PafAliasAddressLanguageEnum>')]
    public PafAliasAddressLanguageEnum $language;
    
    /**
     * The latitude of the postcode (WGS84/ETRS89).
     * 
     * 
     * Can be a positive or negative decimal. E.g. `51.5083983`.
     * 
     * Returns an empty string if no location data is available. 
     * 
     * @var mixed $latitude
     */
	#[\JMS\Serializer\Annotation\SerializedName('latitude')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    public mixed $latitude;
    
    /**
     * First Address Line. Often contains premise and thoroughfare information. In the case of a commercial premise, the first line is always the full name of the registered organisation. Never empty.
     * 
     * @var string $line1
     */
	#[\JMS\Serializer\Annotation\SerializedName('line_1')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $line1;
    
    /**
     * Second Address Line. Often contains thoroughfare and locality information. May be empty
     * 
     * @var string $line2
     */
	#[\JMS\Serializer\Annotation\SerializedName('line_2')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $line2;
    
    /**
     * Third address line. May be empty.
     * 
     * @var string $line3
     */
	#[\JMS\Serializer\Annotation\SerializedName('line_3')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $line3;
    
    /**
     * The longitude of the postcode (WGS84/ETRS89).
     * 
     * 
     * Can be a positive or negative decimal. E.g. -0.1283983
     * 
     * Returns an empty string if no location data is available. 
     * 
     * @var mixed $longitude
     */
	#[\JMS\Serializer\Annotation\SerializedName('longitude')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    public mixed $longitude;
    
    /**
     * Northings reference using the [Ordnance Survey National Grid reference system](https://en.wikipedia.org/wiki/Ordnance_Survey_National_Grid)
     * 
     * 
     * Northern Ireland Northings uses the [Irish Grid Reference System](https://en.wikipedia.org/wiki/Irish_grid_reference_system)
     * 
     * Metres from origin. E.g. `180458`
     * 
     * Returns an empty string if no location data is available. Otherwise a number is returned  
     * 
     * @var mixed $northings
     */
	#[\JMS\Serializer\Annotation\SerializedName('northings')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    public mixed $northings;
    
    /**
     * Used to supplment Organisation Name to identify a deparment within the organisation
     * 
     * @var string $organisationName
     */
	#[\JMS\Serializer\Annotation\SerializedName('organisation_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $organisationName;
    
    /**
     * When the PO Box Number field is populated it will contain PO BOX nnnnnn where n represents the PO Box number. Note that the PO Box details can occasionally consist of a combination of numbers and letters. PO Box Numbers are only allocated to Large Users.
     * 
     * @var string $poBox
     */
	#[\JMS\Serializer\Annotation\SerializedName('po_box')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $poBox;
    
    /**
     * A Post Town is mandatory for delivery of mail to a Delivery Point. This is not necessarily the nearest town geographically, but a routing instruction to the Royal Mail delivery office sorting mail for that Delivery Point. A Post Town will always be present in every address, and for some Localities the Post Town will be the only locality element present.
     * 
     * @var string $postTown
     */
	#[\JMS\Serializer\Annotation\SerializedName('post_town')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $postTown;
    
    /**
     * Postal counties were used for the distribution of mail before the Postcode system was introduced in the 1970s. The Former Postal County was the Administrative County at the time. This data rarely changes. May be empty.
     * 
     * @var string $postalCounty
     */
	#[\JMS\Serializer\Annotation\SerializedName('postal_county')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $postalCounty;
    
    /**
     * Correctly formatted postcode. Capitalised and spaced.
     * 
     * @var string $postcode
     */
	#[\JMS\Serializer\Annotation\SerializedName('postcode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $postcode;
    
    /**
     * The second part of a postcode is known as the inward code. e.g. The inward code of ID1 1QD is 1QD.
     * 
     * 
     * The number identifies the sector in the postal district. The number is followed by 2 letters. The letters then define one or more properties in that sector.
     * 
     * @var string $postcodeInward
     */
	#[\JMS\Serializer\Annotation\SerializedName('postcode_inward')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $postcodeInward;
    
    /**
     * The first part of a postcode is known as the outward code. e.g. The outward code of ID1 1QD is ID1. Enables mail to be sorted to the correct local area for delivery. This part of the code contains the area and the district to which the mail is to be delivered, e.g. ‘PO1’, ‘SW1A’ or ‘B23’.
     * 
     * @var string $postcodeOutward
     */
	#[\JMS\Serializer\Annotation\SerializedName('postcode_outward')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $postcodeOutward;
    
    /**
     * This indicates the type of user. It can only take the values 'S' or 'L' indicating small or large respectively. Large User Postcodes. These are assigned to one single address either due to the large volume of mail received at that address, or because a PO Box or Selectapost service has been set up. Small User Postcodes. These identify a group of Delivery Points.
     * 
     * 
     * On average there are 15 Delivery Points per Postcode. However this can vary between 1 and, in some cases, 100. There will never be more than 100 Delivery Points on a Postcode.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\PafPostcodeTypeEnum $postcodeType
     */
	#[\JMS\Serializer\Annotation\SerializedName('postcode_type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PafPostcodeTypeEnum>')]
    public PafPostcodeTypeEnum $postcodeType;
    
    /**
     * A pre-computed string which sensibly combines building_number, building_name and sub_building_name. building_number, building_name and sub_building_name represent raw data from Royal Mail's and can be difficult to parse if you are unaware of how the Postcode Address File premise fields work together. For this reason, we also provide a pre-computed premise field which intelligently gathers these points into a single, simple premise string. This field is ideal if you want to pull premise information and thoroughfare information separately instead of using our address lines data.
     * 
     * @var string $premise
     */
	#[\JMS\Serializer\Annotation\SerializedName('premise')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $premise;
    
    /**
     * Small User Organisation Indicator can have the values 'Y' or space. A value of 'Y' indicates that a Small User Organisation is present at this address.
     * 
     * @var string $suOrganisationIndicator
     */
	#[\JMS\Serializer\Annotation\SerializedName('su_organisation_indicator')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $suOrganisationIndicator;
    
    /**
     * When a premise is split into individual units such as flats, apartments or business units. Cannot be present without either building_name or building_number. E.g. Flat 1, A, 10B
     * 
     * @var string $subBuildingName
     */
	#[\JMS\Serializer\Annotation\SerializedName('sub_building_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $subBuildingName;
    
    /**
     * Also known as the street or road name. In general each Thoroughfare Name will have a separate Postcode. Longer Thoroughfares with high number ranges often have multiple Postcodes covering the entire length of the road, with breaks at suitable points e.g. junctions or natural breaks in the road.
     * 
     * @var string $thoroughfare
     */
	#[\JMS\Serializer\Annotation\SerializedName('thoroughfare')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $thoroughfare;
    
    /**
     * Traditional counties are provided by the Association of British Counties. It is historical data, and can date from the 1800s. May be empty.
     * 
     * @var string $traditionalCounty
     */
	#[\JMS\Serializer\Annotation\SerializedName('traditional_county')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $traditionalCounty;
    
    /**
     * UDPRN stands for ‘Unique Delivery Point Reference Number’. Royal Mail assigns a unique UDPRN code for each premise on PAF. Simple, unique reference number for each Delivery Point. Unlikely to be reused when an address expires.
     * 
     * 
     * Up to 8-digit numeric code.
     * 
     * A new UDPRN is automatically assigned to each new Delivery Point added to PAF.
     * 
     * @var int $udprn
     */
	#[\JMS\Serializer\Annotation\SerializedName('udprn')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $udprn;
    
    /**
     * A small minority of individual premises (as identified by a UDPRN) may have multiple occupants behind the same letterbox. These are known as Multiple Residence occupants and can be queried via the Multiple Residence dataset. Simple, unique reference number for each Multiple Residence occupant.
     * 
     * 
     * Note: this will be an empty string `""` when not used.
     * 
     * @var mixed $umprn
     */
	#[\JMS\Serializer\Annotation\SerializedName('umprn')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    public mixed $umprn;
    
    /**
     * UPRN stands for Unique Property Reference Number and is maintained by the Ordnance Survey (OS). Local governments in the UK have allocated a unique number for each land or property.
     * 
     * 
     * Up to 12 digits in length.
     * 
     * Multiple Residence premises currently share the same UPRN as the parent premise.
     * 
     * May not be available for a small number of Great Britain addresses due to longer update cycles for Ordnance Survey's AddressBase datasets. Returns empty string "" in these instances.
     * 
     * Although UPRN takes an integer format, we encode and transmit this data as strings. As a 12 digit number, the UPRN can exceed the maximum safe integer `Number.MAX_SAFE_INTEGER` in most browsers causing this datapoint to be corrupted.
     * 
     * Take special care when storing UPRN. As a 12 digit identifier, you will need 64 bits to encode every possible UPRN value. This means applications like Excel will corrupt cells containing UPRN values.
     * 
     * @var string $uprn
     */
	#[\JMS\Serializer\Annotation\SerializedName('uprn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $uprn;
    
    /**
     * The current administrative/electoral area to which the postcode has been assigned. May be empty for a small number of addresses.
     * 
     * @var string $ward
     */
	#[\JMS\Serializer\Annotation\SerializedName('ward')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $ward;
    
	public function __construct()
	{
		$this->administrativeCounty = "";
		$this->buildingName = "";
		$this->buildingNumber = "";
		$this->country = \OpenAPI\OpenAPI\Models\Shared\PafAliasAddressCountryEnum::ENGLAND;
		$this->countryIso = \OpenAPI\OpenAPI\Models\Shared\PafAliasAddressCountryIsoEnum::GBR;
		$this->countryIso2 = \OpenAPI\OpenAPI\Models\Shared\PafAliasAddressCountryIso2Enum::GB;
		$this->county = "";
		$this->countyCode = "";
		$this->dataset = \OpenAPI\OpenAPI\Models\Shared\PafAliasAddressDatasetEnum::PAFA;
		$this->deliveryPointSuffix = "";
		$this->departmentName = "";
		$this->dependantLocality = "";
		$this->dependantThoroughfare = "";
		$this->district = "";
		$this->doubleDependantLocality = "";
		$this->eastings = null;
		$this->id = "";
		$this->language = \OpenAPI\OpenAPI\Models\Shared\PafAliasAddressLanguageEnum::EN;
		$this->latitude = null;
		$this->line1 = "";
		$this->line2 = "";
		$this->line3 = "";
		$this->longitude = null;
		$this->northings = null;
		$this->organisationName = "";
		$this->poBox = "";
		$this->postTown = "";
		$this->postalCounty = "";
		$this->postcode = "";
		$this->postcodeInward = "";
		$this->postcodeOutward = "";
		$this->postcodeType = \OpenAPI\OpenAPI\Models\Shared\PafPostcodeTypeEnum::S;
		$this->premise = "";
		$this->suOrganisationIndicator = "";
		$this->subBuildingName = "";
		$this->thoroughfare = "";
		$this->traditionalCounty = "";
		$this->udprn = 0;
		$this->umprn = null;
		$this->uprn = "";
		$this->ward = "";
	}
}
