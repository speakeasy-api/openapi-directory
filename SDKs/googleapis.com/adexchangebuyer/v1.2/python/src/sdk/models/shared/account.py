"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountBidderLocation:
    
    maximum_qps: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumQps'), 'exclude': lambda f: f is None }})
    r"""The maximum queries per second the Ad Exchange will send."""  
    region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region'), 'exclude': lambda f: f is None }})
    r"""The geographical region the Ad Exchange should send requests from. Only used by some quota systems, but always setting the value is recommended. Allowed values:
    - ASIA 
    - EUROPE 
    - US_EAST 
    - US_WEST
    """  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The URL to which the Ad Exchange will send bid requests."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Account:
    r"""Configuration data for an Ad Exchange buyer account."""
    
    bidder_location: Optional[list[AccountBidderLocation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bidderLocation'), 'exclude': lambda f: f is None }})
    r"""Your bidder locations that have distinct URLs."""  
    cookie_matching_nid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cookieMatchingNid'), 'exclude': lambda f: f is None }})
    r"""The nid parameter value used in cookie match requests. Please contact your technical account manager if you need to change this."""  
    cookie_matching_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cookieMatchingUrl'), 'exclude': lambda f: f is None }})
    r"""The base URL used in cookie match requests."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Account id."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Resource type."""  
    maximum_active_creatives: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumActiveCreatives'), 'exclude': lambda f: f is None }})
    r"""The maximum number of active creatives that an account can have, where a creative is active if it was inserted or bid with in the last 30 days. Please contact your technical account manager if you need to change this."""  
    maximum_total_qps: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumTotalQps'), 'exclude': lambda f: f is None }})
    r"""The sum of all bidderLocation.maximumQps values cannot exceed this. Please contact your technical account manager if you need to change this."""  
    number_active_creatives: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberActiveCreatives'), 'exclude': lambda f: f is None }})
    r"""The number of creatives that this account inserted or bid with in the last 30 days."""  
    