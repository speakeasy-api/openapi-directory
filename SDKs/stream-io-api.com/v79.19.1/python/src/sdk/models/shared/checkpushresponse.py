"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import deviceerrorinfo as shared_deviceerrorinfo
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckPushResponse:
    r"""Successful response"""
    
    duration: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration') }})  
    device_errors: Optional[dict[str, shared_deviceerrorinfo.DeviceErrorInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_errors'), 'exclude': lambda f: f is None }})
    r"""Object with device errors"""  
    general_errors: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('general_errors'), 'exclude': lambda f: f is None }})
    r"""List of general errors"""  
    rendered_apn_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rendered_apn_template'), 'exclude': lambda f: f is None }})  
    rendered_firebase_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rendered_firebase_template'), 'exclude': lambda f: f is None }})  
    rendered_message: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rendered_message'), 'exclude': lambda f: f is None }})  
    skip_devices: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_devices'), 'exclude': lambda f: f is None }})
    r"""Don't require existing devices to render templates"""  
    