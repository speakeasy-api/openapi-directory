/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * KeywordPagedCollectionResponse - A type that defines the keywords of the paged collection.
 */
public class KeywordPagedCollectionResponse {
    /**
     * The URI of the current page of results from the result set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("href")
    public String href;
    public KeywordPagedCollectionResponse withHref(String href) {
        this.href = href;
        return this;
    }
    
    /**
     * This array contains all of the keywords that match the request criteria. Keywords will be sorted by adGroupId, regardless of whether you searched for keywords across the entire campaign, or if you searched for keywords within one or specific ad groups.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keywords")
    public Keyword[] keywords;
    public KeywordPagedCollectionResponse withKeywords(Keyword[] keywords) {
        this.keywords = keywords;
        return this;
    }
    
    /**
     * The number of keywords returned on a single page from the result set. This value can be set in the request with the &lt;b&gt;limit&lt;/b&gt; query parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    public Integer limit;
    public KeywordPagedCollectionResponse withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * The call URI that can be used to retrieve the next page in the result set. This value is returned only if there is an additional page of results to display from the result set. &lt;br&gt;&lt;br&gt;&lt;b&gt;Max length&lt;/b&gt;: 2048
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next")
    public String next;
    public KeywordPagedCollectionResponse withNext(String next) {
        this.next = next;
        return this;
    }
    
    /**
     * The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the &lt;b&gt;offset&lt;/b&gt; query parameter. &lt;p class="tablenote"&gt;&lt;strong&gt;Note: &lt;/strong&gt;The items in a paginated result set use a zero-based list where the first item in the list has an offset of &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    public Integer offset;
    public KeywordPagedCollectionResponse withOffset(Integer offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * The call URI that can be used to retrieve the previous page in the result set. Basically, all of the request parameters will remain the same except the offset value, which will be decreased to retrieve the previous page of results. &lt;br&gt;&lt;br&gt;&lt;b&gt;Max length&lt;/b&gt;: 2048
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prev")
    public String prev;
    public KeywordPagedCollectionResponse withPrev(String prev) {
        this.prev = prev;
        return this;
    }
    
    /**
     * The total number of keywords retrieved in the result set.  &lt;br&gt;&lt;br&gt;If no keywords are found, this field is returned with a value of &lt;code&gt;0&lt;/code&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    public Integer total;
    public KeywordPagedCollectionResponse withTotal(Integer total) {
        this.total = total;
        return this;
    }
    
}
