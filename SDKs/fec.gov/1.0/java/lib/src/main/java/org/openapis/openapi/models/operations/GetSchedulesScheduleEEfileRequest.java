/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.LocalDate;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetSchedulesScheduleEEfileRequest {
    /**
     * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=api_key")
    public String apiKey;
    public GetSchedulesScheduleEEfileRequest withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    
    /**
     * A unique identifier assigned to each candidate registered with the FEC.
     * If a person runs for several offices, that person will have separate candidate IDs for each office.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=candidate_id")
    public String[] candidateId;
    public GetSchedulesScheduleEEfileRequest withCandidateId(String[] candidateId) {
        this.candidateId = candidateId;
        return this;
    }
    
    /**
     * Federal office candidate runs for: H, S or P
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=candidate_office")
    public GetSchedulesScheduleEEfileCandidateOfficeEnum candidateOffice;
    public GetSchedulesScheduleEEfileRequest withCandidateOffice(GetSchedulesScheduleEEfileCandidateOfficeEnum candidateOffice) {
        this.candidateOffice = candidateOffice;
        return this;
    }
    
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=candidate_office_district")
    public String[] candidateOfficeDistrict;
    public GetSchedulesScheduleEEfileRequest withCandidateOfficeDistrict(String[] candidateOfficeDistrict) {
        this.candidateOfficeDistrict = candidateOfficeDistrict;
        return this;
    }
    
    /**
     * US state or territory where a candidate runs for office
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=candidate_office_state")
    public String[] candidateOfficeState;
    public GetSchedulesScheduleEEfileRequest withCandidateOfficeState(String[] candidateOfficeState) {
        this.candidateOfficeState = candidateOfficeState;
        return this;
    }
    
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=candidate_party")
    public String[] candidateParty;
    public GetSchedulesScheduleEEfileRequest withCandidateParty(String[] candidateParty) {
        this.candidateParty = candidateParty;
        return this;
    }
    
    /**
     * Search for candidates by candiate id or candidate first or last name
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=candidate_search")
    public String[] candidateSearch;
    public GetSchedulesScheduleEEfileRequest withCandidateSearch(String[] candidateSearch) {
        this.candidateSearch = candidateSearch;
        return this;
    }
    
    /**
     * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=committee_id")
    public String[] committeeId;
    public GetSchedulesScheduleEEfileRequest withCommitteeId(String[] committeeId) {
        this.committeeId = committeeId;
        return this;
    }
    
    /**
     * The form where the underlying data comes from, for example, Form 1 would appear as F1:
     *     - F1   Statement of Organization
     *     - F1M  Notification of Multicandidate Status
     *     - F2   Statement of Candidacy
     *     - F3   Report of Receipts and Disbursements for an Authorized Committee
     *     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
     *     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
     *     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
     *     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
     *     - F5   Report of Independent Expenditures Made and Contributions Received
     *     - F6   48 Hour Notice of Contributions/Loans Received
     *     - F7   Report of Communication Costs by Corporations and Membership Organizations
     *     - F8   Debt Settlement Plan
     *     - F9   24 Hour Notice of Disbursements for Electioneering Communications
     *     - F13  Report of Donations Accepted for Inaugural Committee
     *     - F99  Miscellaneous Text
     *     - FRQ  Request for Additional Information
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=filing_form")
    public String[] filingForm;
    public GetSchedulesScheduleEEfileRequest withFilingForm(String[] filingForm) {
        this.filingForm = filingForm;
        return this;
    }
    
    /**
     * An unique identifier for each page where the electronic or paper filing is reported.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=image_number")
    public String[] imageNumber;
    public GetSchedulesScheduleEEfileRequest withImageNumber(String[] imageNumber) {
        this.imageNumber = imageNumber;
        return this;
    }
    
    /**
     * Record filed as 24- or 48-hour notice.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=is_notice")
    public Boolean isNotice;
    public GetSchedulesScheduleEEfileRequest withIsNotice(Boolean isNotice) {
        this.isNotice = isNotice;
        return this;
    }
    
    /**
     * Selects all items distributed by this committee before this date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_dissemination_date")
    public LocalDate maxDisseminationDate;
    public GetSchedulesScheduleEEfileRequest withMaxDisseminationDate(LocalDate maxDisseminationDate) {
        this.maxDisseminationDate = maxDisseminationDate;
        return this;
    }
    
    /**
     * Selects all items expended by this committee less than this amount
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_expenditure_amount")
    public Integer maxExpenditureAmount;
    public GetSchedulesScheduleEEfileRequest withMaxExpenditureAmount(Integer maxExpenditureAmount) {
        this.maxExpenditureAmount = maxExpenditureAmount;
        return this;
    }
    
    /**
     * Selects all items expended by this committee before this date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_expenditure_date")
    public LocalDate maxExpenditureDate;
    public GetSchedulesScheduleEEfileRequest withMaxExpenditureDate(LocalDate maxExpenditureDate) {
        this.maxExpenditureDate = maxExpenditureDate;
        return this;
    }
    
    /**
     * Timestamp of electronic or paper record that FEC received
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_filed_date")
    public LocalDate maxFiledDate;
    public GetSchedulesScheduleEEfileRequest withMaxFiledDate(LocalDate maxFiledDate) {
        this.maxFiledDate = maxFiledDate;
        return this;
    }
    
    /**
     * Selects all items distributed by this committee after this date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=min_dissemination_date")
    public LocalDate minDisseminationDate;
    public GetSchedulesScheduleEEfileRequest withMinDisseminationDate(LocalDate minDisseminationDate) {
        this.minDisseminationDate = minDisseminationDate;
        return this;
    }
    
    /**
     * Selects all items expended by this committee greater than this amount
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=min_expenditure_amount")
    public Integer minExpenditureAmount;
    public GetSchedulesScheduleEEfileRequest withMinExpenditureAmount(Integer minExpenditureAmount) {
        this.minExpenditureAmount = minExpenditureAmount;
        return this;
    }
    
    /**
     * Selects all items expended by this committee after this date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=min_expenditure_date")
    public LocalDate minExpenditureDate;
    public GetSchedulesScheduleEEfileRequest withMinExpenditureDate(LocalDate minExpenditureDate) {
        this.minExpenditureDate = minExpenditureDate;
        return this;
    }
    
    /**
     * Timestamp of electronic or paper record that FEC received
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=min_filed_date")
    public LocalDate minFiledDate;
    public GetSchedulesScheduleEEfileRequest withMinFiledDate(LocalDate minFiledDate) {
        this.minFiledDate = minFiledDate;
        return this;
    }
    
    /**
     * The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (`null`) is always included.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=most_recent")
    public Boolean mostRecent;
    public GetSchedulesScheduleEEfileRequest withMostRecent(Boolean mostRecent) {
        this.mostRecent = mostRecent;
        return this;
    }
    
    /**
     * For paginating through results, starting at page 1
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Integer page;
    public GetSchedulesScheduleEEfileRequest withPage(Integer page) {
        this.page = page;
        return this;
    }
    
    /**
     * Name of the entity that received the payment.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=payee_name")
    public String[] payeeName;
    public GetSchedulesScheduleEEfileRequest withPayeeName(String[] payeeName) {
        this.payeeName = payeeName;
        return this;
    }
    
    /**
     * The number of results returned per page. Defaults to 20.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Integer perPage;
    public GetSchedulesScheduleEEfileRequest withPerPage(Integer perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * Provide a field to sort by. Use `-` for descending order.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String sort;
    public GetSchedulesScheduleEEfileRequest withSort(String sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Hide null values on sorted column(s).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_hide_null")
    public Boolean sortHideNull;
    public GetSchedulesScheduleEEfileRequest withSortHideNull(Boolean sortHideNull) {
        this.sortHideNull = sortHideNull;
        return this;
    }
    
    /**
     * Toggle that filters out all rows having sort column that is non-null
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_null_only")
    public Boolean sortNullOnly;
    public GetSchedulesScheduleEEfileRequest withSortNullOnly(Boolean sortNullOnly) {
        this.sortNullOnly = sortNullOnly;
        return this;
    }
    
    /**
     * Toggle that sorts null values last
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_nulls_last")
    public Boolean sortNullsLast;
    public GetSchedulesScheduleEEfileRequest withSortNullsLast(Boolean sortNullsLast) {
        this.sortNullsLast = sortNullsLast;
        return this;
    }
    
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=spender_name")
    public String[] spenderName;
    public GetSchedulesScheduleEEfileRequest withSpenderName(String[] spenderName) {
        this.spenderName = spenderName;
        return this;
    }
    
    /**
     * Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=support_oppose_indicator")
    public GetSchedulesScheduleEEfileSupportOpposeIndicatorEnum[] supportOpposeIndicator;
    public GetSchedulesScheduleEEfileRequest withSupportOpposeIndicator(GetSchedulesScheduleEEfileSupportOpposeIndicatorEnum[] supportOpposeIndicator) {
        this.supportOpposeIndicator = supportOpposeIndicator;
        return this;
    }
    
}
