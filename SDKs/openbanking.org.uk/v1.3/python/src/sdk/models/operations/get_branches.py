"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetBranchesRequest:
    
    if_modified_since: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'If-Modified-Since', 'style': 'simple', 'explode': False }})
    r"""Used for conditional request, to retrieve data only if modified since a given date"""  
    if_none_match: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'If-None-Match', 'style': 'simple', 'explode': False }})
    r"""Used for conditional request, to retrieve data only if the given Etag value does not match"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranchesErrorObject:
    r"""A standard error response."""
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Further details describing the error"""  
    status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""This corresponds to the HTTP status code"""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""A short title of the type of error"""  
    
class GetBranches503ErrorObjectDescriptionEnum(str, Enum):
    THE_SERVICE_IS_TEMPORARILY_UNAVAILABLE_ = 'The service is temporarily unavailable.'

class GetBranches503ErrorObjectStatusEnum(str, Enum):
    FIVE_HUNDRED_AND_THREE = '503'

class GetBranches503ErrorObjectTitleEnum(str, Enum):
    SERVICE_TEMPORARILY_UNAVAILABLE = 'Service temporarily unavailable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches503ErrorObject:
    r"""The service is temporarily unavailable."""
    
    description: GetBranches503ErrorObjectDescriptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    status: GetBranches503ErrorObjectStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: GetBranches503ErrorObjectTitleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    
class GetBranches500ErrorObjectDescriptionEnum(str, Enum):
    AN_ERROR_OCCURRED_ON_THE_SERVER_NO_FURTHER_INFORMATION_IS_AVAILABLE_ = 'An error occurred on the server. No further information is available.'

class GetBranches500ErrorObjectStatusEnum(str, Enum):
    FIVE_HUNDRED = '500'

class GetBranches500ErrorObjectTitleEnum(str, Enum):
    INTERNAL_SERVER_ERROR = 'Internal server error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches500ErrorObject:
    r"""An error occurred on the server. No further information is available."""
    
    description: GetBranches500ErrorObjectDescriptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    status: GetBranches500ErrorObjectStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: GetBranches500ErrorObjectTitleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    
class GetBranches429ErrorObjectDescriptionEnum(str, Enum):
    YOU_HAVE_REQUESTED_THIS_RESOURCE_TOO_OFTEN_SLOW_DOWN_ = 'You have requested this resource too often. Slow down.'

class GetBranches429ErrorObjectStatusEnum(str, Enum):
    FOUR_HUNDRED_AND_TWENTY_NINE = '429'

class GetBranches429ErrorObjectTitleEnum(str, Enum):
    TOO_MANY_REQUESTS = 'Too many requests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches429ErrorObject:
    r"""You have requested this resource too often. Slow down."""
    
    description: GetBranches429ErrorObjectDescriptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    status: GetBranches429ErrorObjectStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: GetBranches429ErrorObjectTitleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    
class GetBranches408ErrorObjectDescriptionEnum(str, Enum):
    YOUR_CLIENT_HAS_FAILED_TO_SUBMIT_A_REQUEST_AND_A_TIMEOUT_HAS_OCCURRED_ = 'Your client has failed to submit a request, and a timeout has occurred.'

class GetBranches408ErrorObjectStatusEnum(str, Enum):
    FOUR_HUNDRED_AND_EIGHT = '408'

class GetBranches408ErrorObjectTitleEnum(str, Enum):
    CLIENT_TIMEOUT = 'Client timeout'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches408ErrorObject:
    r"""Your client has failed to submit a request, and a timeout has occurred."""
    
    description: GetBranches408ErrorObjectDescriptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    status: GetBranches408ErrorObjectStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: GetBranches408ErrorObjectTitleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    
class GetBranches400ErrorObjectDescriptionEnum(str, Enum):
    YOU_HAVE_SENT_A_REQUEST_WHICH_COULD_NOT_BE_UNDERSTOOD_ = 'You have sent a request which could not be understood.'

class GetBranches400ErrorObjectStatusEnum(str, Enum):
    FOUR_HUNDRED = '400'

class GetBranches400ErrorObjectTitleEnum(str, Enum):
    BAD_REQUEST = 'Bad request'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches400ErrorObject:
    r"""You have sent a request which could not be understood."""
    
    description: GetBranches400ErrorObjectDescriptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    status: GetBranches400ErrorObjectStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: GetBranches400ErrorObjectTitleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchAccessibilityTypesEnum(str, Enum):
    r"""Information about the accessibility"""
    AUDIO_CASH_MACHINE = 'AudioCashMachine'
    AUTOMATIC_DOORS = 'AutomaticDoors'
    CHAIR_ACCESS = 'ChairAccess'
    DRIVE_THRU = 'DriveThru'
    EXTERNAL_RAMP = 'ExternalRamp'
    INDUCTION_LOOP = 'InductionLoop'
    INTERNAL_RAMP = 'InternalRamp'
    LEVEL_ACCESS = 'LevelAccess'
    LOWER_LEVEL_COUNTER = 'LowerLevelCounter'
    WHEELCHAIR_ACCESS = 'WheelchairAccess'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchAddress:
    r"""Postal Address"""
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Country') }})
    r"""Nation with its own government"""  
    building_number_or_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BuildingNumberOrName'), 'exclude': lambda f: f is None }})
    r"""Number or Name that identifies the position of a building on a street"""  
    country_sub_division: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CountrySubDivision'), 'exclude': lambda f: f is None }})
    r"""Identifies a subdivision of a country such as state, region, county"""  
    optional_address_field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OptionalAddressField'), 'exclude': lambda f: f is None }})
    r"""Directions for customers"""  
    post_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostCode'), 'exclude': lambda f: f is None }})
    r"""Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail"""  
    street_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreetName'), 'exclude': lambda f: f is None }})
    r"""Name of a street or thoroughfare"""  
    town_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TownName'), 'exclude': lambda f: f is None }})
    r"""Name of a built-up area, with defined boundaries, and a local government"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchAlternatePhone:
    r"""Alternative Phone Number"""
    
    alternate_telephone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlternateTelephoneNumber'), 'exclude': lambda f: f is None }})
    r"""Collection of information that identifies a phone number, as defined by telecom services."""  
    alternate_telephone_number_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlternateTelephoneNumberDescription'), 'exclude': lambda f: f is None }})
    r"""Description of the telephone number"""  
    
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchBranchFacilitiesNameEnum(str, Enum):
    r"""Information about branch facilities"""
    BUSINESS_IT_SUPPORT = 'BusinessITSupport'
    COLLECTION_LOCKERS = 'CollectionLockers'
    MEETING_ROOMS = 'MeetingRooms'
    PARKING = 'Parking'
    WIFI = 'Wifi'

class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchBranchMediatedServiceNameEnum(str, Enum):
    r"""Information about mediated branch facilities"""
    BUREAU_DE_CHANGE = 'BureauDeChange'
    BUSINESS_COUNTER = 'BusinessCounter'
    CARD_ISSUANCE_FACILITY = 'CardIssuanceFacility'
    COUNTER_SERVICES = 'CounterServices'
    DRIVE_THRU = 'DriveThru'
    MORTGAGE_ADVISOR = 'MortgageAdvisor'
    NIGHT_SAFE = 'NightSafe'
    ON_DEMAND_CURRENCY = 'OnDemandCurrency'
    PREMIER_COUNTER = 'PremierCounter'
    VIDEO_BANKING = 'VideoBanking'
    WHEEL_CHAIR_ACCESS = 'WheelChairAccess'

class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchBranchSelfServeServiceNameEnum(str, Enum):
    r"""Information about self service branch services"""
    ACCOUNT_VERIFICATION_SERVICE = 'AccountVerificationService'
    ASSISTED_SERVICE_COUNTER = 'AssistedServiceCounter'
    BUSINESS_DEPOSIT_TERMINAL = 'BusinessDepositTerminal'
    CASH_CHEQUE_DEPOSIT_MACHINE_COIN = 'CashChequeDepositMachineCoin'
    CASH_CHEQUE_DEPOSIT_MACHINE_NO_COIN = 'CashChequeDepositMachineNoCoin'
    EXTERNAL_ATM_AUDIO = 'ExternalAtmAudio'
    EXTERNAL_ATM_NO_AUDIO = 'ExternalAtmNoAudio'
    EXTERNAL_QUICK_SERVICE_POINT = 'ExternalQuickServicePoint'
    INTERNAL_ATM_AUDIO = 'InternalAtmAudio'
    INTERNAL_ATM_NO_AUDIO = 'InternalAtmNoAudio'
    INTERNAL_QUICK_SERVICE_POINT = 'InternalQuickServicePoint'
    LODGEMENT_DEVICE = 'LodgementDevice'
    ONLINE_BANKING_POINT = 'OnlineBankingPoint'
    QUICK_DEPOSIT = 'QuickDeposit'
    SATURDAY_COUNTER_SERVICE = 'SaturdayCounterService'
    SELF_SERVICE_ACCOUNT_OPENING = 'SelfServiceAccountOpening'
    STATEMENT_PRINTER = 'StatementPrinter'

class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchBranchTypeEnum(str, Enum):
    r"""Information on the type of branch"""
    PHYSICAL = 'Physical'
    MOBILE = 'Mobile'

class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchCustomerSegmentEnum(str, Enum):
    r"""Customer segment which the branch is able to service"""
    BUSINESS = 'Business'
    CORPORATE = 'Corporate'
    PERSONAL = 'Personal'
    PREMIER = 'Premier'
    PRIVATE = 'Private'
    SELECT = 'Select'
    SME = 'SME'
    WEALTH = 'Wealth'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchGeographicLocation:
    r"""Geographic Coordinates"""
    
    latitude: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Latitude') }})
    r"""The Latitude measured in decimal format according to ISO 213"""  
    longitude: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Longitude') }})
    r"""The longitude measured in decimal format according to ISO 213"""  
    
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchOpeningTimesOpeningDayEnum(str, Enum):
    r"""Day of the week"""
    MONDAY = 'Monday'
    TUESDAY = 'Tuesday'
    WEDNESDAY = 'Wednesday'
    THURSDAY = 'Thursday'
    FRIDAY = 'Friday'
    SATURDAY = 'Saturday'
    SUNDAY = 'Sunday'
    PUBLIC_AND_BANK_HOLIDAY = 'Public and Bank Holiday'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchOpeningTimes:
    
    closing_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClosingTime') }})
    r"""ISOTime, local time hh:mm:ss.sss or time in utc hh:mm:ss.sssZ or time with timezone hh:mm:ss.sss+hh:mm hh:mm:ss.sss-hh:mm"""  
    opening_day: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchOpeningTimesOpeningDayEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpeningDay') }})
    r"""Day of the week"""  
    opening_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpeningTime') }})
    r"""ISOTime, local time hh:mm:ss.sss or time in utc hh:mm:ss.sssZ or time with timezone hh:mm:ss.sss+hh:mm hh:mm:ss.sss-hh:mm"""  
    unavailable_finish_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnavailableFinishTime'), 'exclude': lambda f: f is None }})
    r"""ISOTime, local time hh:mm:ss.sss or time in utc hh:mm:ss.sssZ or time with timezone hh:mm:ss.sss+hh:mm hh:mm:ss.sss-hh:mm"""  
    unavailable_start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnavailableStartTime'), 'exclude': lambda f: f is None }})
    r"""ISOTime, local time hh:mm:ss.sss or time in utc hh:mm:ss.sssZ or time with timezone hh:mm:ss.sss+hh:mm hh:mm:ss.sss-hh:mm"""  
    
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchOrganisationBrandTrademarkIPOCodeEnum(str, Enum):
    r"""The Intellectual Property Office (IPO) is the official body responsible for intellectual property (IP) rights including patents, designs, trademarks and copyright. (Code: UK or EU only)"""
    UK = 'UK'
    EU = 'EU'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchOrganisationBrand:
    r"""Brand"""
    
    trademark_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrademarkID') }})
    r"""The trademark number that has been registered with the Intellectual Property Office. Note: The 2 letter IPO prefix should be omitted"""  
    trademark_ipo_code: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchOrganisationBrandTrademarkIPOCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrademarkIPOCode') }})
    r"""The Intellectual Property Office (IPO) is the official body responsible for intellectual property (IP) rights including patents, designs, trademarks and copyright. (Code: UK or EU only)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchOrganisationParentOrganisationOrganisationName:
    r"""Organisation Name"""
    
    legal_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LegalName') }})
    r"""Legal Name of the organisation"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchOrganisationParentOrganisation:
    r"""Parent organisation"""
    
    organisation_name: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchOrganisationParentOrganisationOrganisationName = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrganisationName') }})
    r"""Organisation Name"""  
    bic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BIC'), 'exclude': lambda f: f is None }})
    r"""The BIC from the organisation"""  
    lei: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LEI'), 'exclude': lambda f: f is None }})
    r"""The LEI ID of the organisation"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchOrganisation:
    r"""Organisation"""
    
    brand: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchOrganisationBrand = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Brand') }})
    r"""Brand"""  
    parent_organisation: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchOrganisationParentOrganisation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParentOrganisation') }})
    r"""Parent organisation"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchPlannedBranchClosure:
    r"""Planned branch closure"""
    
    end_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndDate'), 'exclude': lambda f: f is None }})
    r"""Date when a branch is due to re-open following temporary closure"""  
    start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartDate'), 'exclude': lambda f: f is None }})
    r"""Date when a branch is due to close temporarily or permanently"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranch:
    
    address: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address') }})
    r"""Postal Address"""  
    atm_at_branch: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ATMAtBranch') }})
    r"""Indicated whether an ATM is at the branch"""  
    branch_identification: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BranchIdentification') }})
    r"""Unique and unambiguous identification of a retail branch of a financial institution"""  
    branch_type: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchBranchTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BranchType') }})
    r"""Information on the type of branch"""  
    customer_segment: list[GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchCustomerSegmentEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerSegment') }})
    r"""Customer segment which the branch is able to service"""  
    opening_times: list[GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchOpeningTimes] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpeningTimes') }})
    r"""Branch Opening Times"""  
    organisation: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchOrganisation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Organisation') }})
    r"""Organisation"""  
    telephone_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TelephoneNumber') }})
    r"""Collection of information that identifies a phone number, as defined by telecom services."""  
    accessibility_types: Optional[GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchAccessibilityTypesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessibilityTypes'), 'exclude': lambda f: f is None }})
    r"""Information about the accessibility"""  
    alternate_phone: Optional[list[GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchAlternatePhone]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlternatePhone'), 'exclude': lambda f: f is None }})  
    arrival_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArrivalTime'), 'exclude': lambda f: f is None }})
    r"""Time that the mobile branch is scheduled to arrive"""  
    branch_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BranchDescription'), 'exclude': lambda f: f is None }})
    r"""Description of the branch"""  
    branch_facilities_name: Optional[list[GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchBranchFacilitiesNameEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BranchFacilitiesName'), 'exclude': lambda f: f is None }})
    r"""Information about branch facilities"""  
    branch_mediated_service_name: Optional[list[GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchBranchMediatedServiceNameEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BranchMediatedServiceName'), 'exclude': lambda f: f is None }})
    r"""Information about mediated branch facilities"""  
    branch_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BranchName'), 'exclude': lambda f: f is None }})
    r"""Name by which a party is known and which is usually used to identify that party"""  
    branch_other_facilities: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BranchOtherFacilities'), 'exclude': lambda f: f is None }})
    r"""Any other facilities not mentioned in BranchFacilitiesName"""  
    branch_other_mediated_services: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BranchOtherMediatedServices'), 'exclude': lambda f: f is None }})
    r"""Mediated Services not described in BranchMediatedServiceName"""  
    branch_other_self_services: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BranchOtherSelfServices'), 'exclude': lambda f: f is None }})
    r"""Self Services not described in BranchSelfServeServiceName"""  
    branch_photo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BranchPhoto'), 'exclude': lambda f: f is None }})
    r"""Image related to the branch"""  
    branch_self_serve_service_name: Optional[list[GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchBranchSelfServeServiceNameEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BranchSelfServeServiceName'), 'exclude': lambda f: f is None }})  
    days_of_the_week: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DaysOfTheWeek'), 'exclude': lambda f: f is None }})
    r"""Description on when the mobile branch is available. e.g. The weekend of Glastonbury festival; or Mondays and during the shrimp season also Wednesdays"""  
    departure_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DepartureTime'), 'exclude': lambda f: f is None }})
    r"""Time that the mobile branch is scheduled to depart"""  
    fax_number: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FaxNumber'), 'exclude': lambda f: f is None }})
    r"""Collection of information that identifies a FAX number, as defined by telecom services."""  
    geographic_location: Optional[GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchGeographicLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GeographicLocation'), 'exclude': lambda f: f is None }})
    r"""Geographic Coordinates"""  
    parking_location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParkingLocation'), 'exclude': lambda f: f is None }})
    r"""Place where the mobile branch is located, such as between the news agent and the church."""  
    planned_branch_closure: Optional[list[GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranchPlannedBranchClosure]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlannedBranchClosure'), 'exclude': lambda f: f is None }})  
    stop_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StopName'), 'exclude': lambda f: f is None }})
    r"""Name of the stop of the mobile branch"""  
    
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataAgreementEnum(str, Enum):
    USE_OF_THE_AP_IS_AND_ANY_RELATED_DATA_WILL_BE_SUBJECT_TO_THE_TERMS_OF_THE_OPEN_LICENCE_AND_SUBJECT_TO_TERMS_AND_CONDITIONS = 'Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions'

class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataLicenseEnum(str, Enum):
    r"""Open Banking License"""
    HTTPS_WWW_OPENBANKING_ORG_UK_OPEN_LICENCE = 'https://www.openbanking.org.uk/open-licence'

class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataTermsOfUseEnum(str, Enum):
    r"""Open Banking Terms of Use"""
    HTTPS_WWW_OPENBANKING_ORG_UK_TERMS = 'https://www.openbanking.org.uk/terms'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaData:
    
    agreement: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataAgreementEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Agreement') }})  
    last_updated: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdated'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    license: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataLicenseEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('License') }})
    r"""Open Banking License"""  
    terms_of_use: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataTermsOfUseEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TermsOfUse') }})
    r"""Open Banking Terms of Use"""  
    total_results: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalResults') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSON:
    r"""Successful response with a list of `Branch` data"""
    
    data: list[GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONBranch] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    meta: GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta') }})  
    

@dataclasses.dataclass
class GetBranchesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    four_hundred_error_object: Optional[GetBranches400ErrorObject] = dataclasses.field(default=None)
    r"""You have sent a request which could not be understood."""  
    four_hundred_and_eight_error_object: Optional[GetBranches408ErrorObject] = dataclasses.field(default=None)
    r"""Your client has failed to submit a request, and a timeout has occurred."""  
    four_hundred_and_twenty_nine_error_object: Optional[GetBranches429ErrorObject] = dataclasses.field(default=None)
    r"""You have requested this resource too often. Slow down."""  
    five_hundred_error_object: Optional[GetBranches500ErrorObject] = dataclasses.field(default=None)
    r"""An error occurred on the server. No further information is available."""  
    five_hundred_and_three_error_object: Optional[GetBranches503ErrorObject] = dataclasses.field(default=None)
    r"""The service is temporarily unavailable."""  
    error_object: Optional[GetBranchesErrorObject] = dataclasses.field(default=None)
    r"""A standard error response."""  
    get_branches_200_application_prs_openbanking_opendata_v1_3_plus_json_object: Optional[GetBranches200ApplicationPrsOpenbankingOpendataV13PlusJSON] = dataclasses.field(default=None)
    r"""Successful response with a list of `Branch` data"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    