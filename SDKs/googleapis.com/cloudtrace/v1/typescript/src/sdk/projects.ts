/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Sends new traces to Cloud Trace or updates existing traces. If the ID of a trace that you send matches that of an existing trace, any fields in the existing trace and its spans are overwritten by the provided values, and any new fields provided are merged with the existing trace data. If the ID does not match, a new trace is created.
   */
  cloudtraceProjectsPatchTraces(
    req: operations.CloudtraceProjectsPatchTracesRequest,
    security: operations.CloudtraceProjectsPatchTracesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudtraceProjectsPatchTracesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudtraceProjectsPatchTracesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{projectId}/traces",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "traces",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudtraceProjectsPatchTracesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudtraceProjectsPatchTracesResponse =
        new operations.CloudtraceProjectsPatchTracesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a single trace by its ID.
   */
  cloudtraceProjectsTracesGet(
    req: operations.CloudtraceProjectsTracesGetRequest,
    security: operations.CloudtraceProjectsTracesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudtraceProjectsTracesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudtraceProjectsTracesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{projectId}/traces/{traceId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudtraceProjectsTracesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudtraceProjectsTracesGetResponse =
        new operations.CloudtraceProjectsTracesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.trace = utils.objectToClass(httpRes?.data, shared.Trace);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of traces that match the specified filter conditions.
   */
  cloudtraceProjectsTracesList(
    req: operations.CloudtraceProjectsTracesListRequest,
    security: operations.CloudtraceProjectsTracesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudtraceProjectsTracesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudtraceProjectsTracesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{projectId}/traces",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudtraceProjectsTracesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudtraceProjectsTracesListResponse =
        new operations.CloudtraceProjectsTracesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTracesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTracesResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
