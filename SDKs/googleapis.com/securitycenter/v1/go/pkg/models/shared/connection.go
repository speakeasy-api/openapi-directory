// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConnectionProtocolEnum - IANA Internet Protocol Number such as TCP(6) and UDP(17).
type ConnectionProtocolEnum string

const (
	ConnectionProtocolEnumProtocolUnspecified ConnectionProtocolEnum = "PROTOCOL_UNSPECIFIED"
	ConnectionProtocolEnumIcmp                ConnectionProtocolEnum = "ICMP"
	ConnectionProtocolEnumTCP                 ConnectionProtocolEnum = "TCP"
	ConnectionProtocolEnumUDP                 ConnectionProtocolEnum = "UDP"
	ConnectionProtocolEnumGre                 ConnectionProtocolEnum = "GRE"
	ConnectionProtocolEnumEsp                 ConnectionProtocolEnum = "ESP"
)

func (e ConnectionProtocolEnum) ToPointer() *ConnectionProtocolEnum {
	return &e
}

func (e *ConnectionProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROTOCOL_UNSPECIFIED":
		fallthrough
	case "ICMP":
		fallthrough
	case "TCP":
		fallthrough
	case "UDP":
		fallthrough
	case "GRE":
		fallthrough
	case "ESP":
		*e = ConnectionProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionProtocolEnum: %v", v)
	}
}

// Connection - Contains information about the IP connection associated with the finding.
type Connection struct {
	// Destination IP address. Not present for sockets that are listening and not connected.
	DestinationIP *string `json:"destinationIp,omitempty"`
	// Destination port. Not present for sockets that are listening and not connected.
	DestinationPort *int `json:"destinationPort,omitempty"`
	// IANA Internet Protocol Number such as TCP(6) and UDP(17).
	Protocol *ConnectionProtocolEnum `json:"protocol,omitempty"`
	// Source IP address.
	SourceIP *string `json:"sourceIp,omitempty"`
	// Source port.
	SourcePort *int `json:"sourcePort,omitempty"`
}
