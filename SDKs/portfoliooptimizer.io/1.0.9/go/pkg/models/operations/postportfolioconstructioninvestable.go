// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type PostPortfolioConstructionInvestableRequestBody struct {
	// The number of assets
	Assets       int64     `json:"assets"`
	AssetsGroups [][]int64 `json:"assetsGroups,omitempty"`
	// assetsGroupsWeights[i] is the desired weight of the assets group k in the portfolio, in percentage (can be null to indicate no specific desire); requires assetsGroups to be present
	AssetsGroupsWeights []float64 `json:"assetsGroupsWeights,omitempty"`
	// assetsMinimumNotionalValues[i] is the minimum monetary value that the position in the asset i is required to represent when the asset i is included in the portfolio
	AssetsMinimumNotionalValues []float64 `json:"assetsMinimumNotionalValues,omitempty"`
	// assetsMinimumPositions[i] is the minimum number of shares of the asset i that is required to purchase when the asset i is included in the portfolio (usual values are the same as for assetsSizeLots)
	AssetsMinimumPositions []float64 `json:"assetsMinimumPositions,omitempty"`
	// assetsPrices[i] is the price of the asset i
	AssetsPrices []float64 `json:"assetsPrices"`
	// assetsSizeLots[i] is the number of shares by which it is required to purchase the asset i (usual values are 1 if the asset needs to be purchased share by share, 100 if the asset needs to be purchased by an integer multiple of 100 shares, and 1/1000000 - e.g. for Robinhood broker - if the asset can be purchased by fractional shares)
	AssetsSizeLots []float64 `json:"assetsSizeLots,omitempty"`
	// assetsWeights[i] is the desired weight of the asset i in the portfolio, in percentage (can be null to indicate no specific desire)
	AssetsWeights []float64 `json:"assetsWeights,omitempty"`
	// maximumAssetsGroupsWeights[k] is the maximum desired weight of the assets group k in the portfolio, in percentage (can be null to indicate no specific desire); requires assetsGroups to be present
	MaximumAssetsGroupsWeights []float64 `json:"maximumAssetsGroupsWeights,omitempty"`
	// The monetary value of the portfolio
	PortfolioValue float64 `json:"portfolioValue"`
}

type PostPortfolioConstructionInvestableRequest struct {
	Request PostPortfolioConstructionInvestableRequestBody `request:"mediaType=application/json"`
}

// PostPortfolioConstructionInvestable200ApplicationJSON - OK
type PostPortfolioConstructionInvestable200ApplicationJSON struct {
	// assetsPositions[i] is the number of shares of the asset i in the portfolio
	AssetsPositions []float64 `json:"assetsPositions"`
	// assetsWeights[i] is the weight of the asset i in the portfolio, in percentage
	AssetsWeights []float64 `json:"assetsWeights"`
}

type PostPortfolioConstructionInvestableResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	PostPortfolioConstructionInvestable200ApplicationJSONObject *PostPortfolioConstructionInvestable200ApplicationJSON
}
