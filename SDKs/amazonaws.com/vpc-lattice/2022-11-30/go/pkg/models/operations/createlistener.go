// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateListenerRequestBodyDefaultAction - Describes the action for a rule. Each rule must include exactly one of the following types of actions: <code>forward </code>or <code>fixed-response</code>, and it must be the last action to be performed.
type CreateListenerRequestBodyDefaultAction struct {
	FixedResponse *shared.FixedResponseAction `json:"fixedResponse,omitempty"`
	Forward       *shared.ForwardAction       `json:"forward,omitempty"`
}

// CreateListenerRequestBodyProtocolEnum - The listener protocol HTTP or HTTPS.
type CreateListenerRequestBodyProtocolEnum string

const (
	CreateListenerRequestBodyProtocolEnumHTTP  CreateListenerRequestBodyProtocolEnum = "HTTP"
	CreateListenerRequestBodyProtocolEnumHTTPS CreateListenerRequestBodyProtocolEnum = "HTTPS"
)

func (e CreateListenerRequestBodyProtocolEnum) ToPointer() *CreateListenerRequestBodyProtocolEnum {
	return &e
}

func (e *CreateListenerRequestBodyProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HTTP":
		fallthrough
	case "HTTPS":
		*e = CreateListenerRequestBodyProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateListenerRequestBodyProtocolEnum: %v", v)
	}
}

type CreateListenerRequestBody struct {
	// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.
	ClientToken *string `json:"clientToken,omitempty"`
	// Describes the action for a rule. Each rule must include exactly one of the following types of actions: <code>forward </code>or <code>fixed-response</code>, and it must be the last action to be performed.
	DefaultAction CreateListenerRequestBodyDefaultAction `json:"defaultAction"`
	// The name of the listener. A listener name must be unique within a service. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
	Name string `json:"name"`
	// The listener port. You can specify a value from <code>1</code> to <code>65535</code>. For HTTP, the default is <code>80</code>. For HTTPS, the default is <code>443</code>.
	Port *int64 `json:"port,omitempty"`
	// The listener protocol HTTP or HTTPS.
	Protocol CreateListenerRequestBodyProtocolEnum `json:"protocol"`
	// The tags for the listener.
	Tags map[string]string `json:"tags,omitempty"`
}

type CreateListenerRequest struct {
	RequestBody       CreateListenerRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The ID or Amazon Resource Name (ARN) of the service.
	ServiceIdentifier string `pathParam:"style=simple,explode=false,name=serviceIdentifier"`
}

type CreateListenerResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateListenerResponse *shared.CreateListenerResponse
	// InternalServerException
	InternalServerException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
