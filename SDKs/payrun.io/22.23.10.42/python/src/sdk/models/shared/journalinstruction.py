"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class JournalInstructionJournalInstructionAccountingTypeEnum(str, Enum):
    r"""The journal instructions' accounting type"""
    CREDIT = 'Credit'
    DEBIT = 'Debit'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JournalInstructionJournalInstruction:
    
    accounting_type: Optional[JournalInstructionJournalInstructionAccountingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountingType'), 'exclude': lambda f: f is None }})
    r"""The journal instructions' accounting type"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    r"""The journal instructions' description"""  
    end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The journal instructions' end date"""  
    expression: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Expression'), 'exclude': lambda f: f is None }})
    r"""The journal instructions' expression"""  
    journal_line_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JournalLineTag'), 'exclude': lambda f: f is None }})
    r"""The journal instructions' journal line tag"""  
    ledger_target: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LedgerTarget'), 'exclude': lambda f: f is None }})
    r"""The journal instructions' ledger target"""  
    nom_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NomCode'), 'exclude': lambda f: f is None }})
    r"""The journal instructions' nom code"""  
    start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The journal instructions' start date"""  
    sub_nom_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubNomCode'), 'exclude': lambda f: f is None }})
    r"""The journal instructions' sub nom code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JournalInstruction:
    r"""The journal instruction object."""
    
    journal_instruction: Optional[JournalInstructionJournalInstruction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JournalInstruction'), 'exclude': lambda f: f is None }})  
    