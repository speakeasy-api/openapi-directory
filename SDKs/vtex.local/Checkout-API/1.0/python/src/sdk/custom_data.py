"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class CustomData:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def removesinglecustomfieldvalue(self, request: operations.RemovesinglecustomfieldvalueRequest) -> operations.RemovesinglecustomfieldvalueResponse:
        r"""Remove single custom field value
        Your account may create `apps`, which contain custom fields, through the [Update orderForm configuration](https://developers.vtex.com/reference#updateorderformconfiguration) request. The value of a specific custom field can be removed by this request.
        
        
        To do that, you need to inform in the URL the ID of the app you created with the configuration API (`appId`).
        
        
        You also need to iform the specific field created in this app (identified by the `appFieldName` parameter, also passed through the URL) whose value you want to remove.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemovesinglecustomfieldvalueRequest, base_url, '/api/checkout/pub/orderForm/{orderFormId}/customData/{appId}/{appFieldName}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemovesinglecustomfieldvalueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def set_multiple_custom_field_values(self, request: operations.SetMultipleCustomFieldValuesRequest) -> operations.SetMultipleCustomFieldValuesResponse:
        r"""Set multiple custom field values
        Your account may create `apps`, which contain custom fields, through the [Update orderForm configuration](https://developers.vtex.com/reference/configuration#updateorderformconfiguration) request. The values of these custom fields can then be updated by this request.
        
        
        To do that, you need to inform the ID of the app you created with the configuration API (`appId`).
        
        
        In the body of the request, for each field created in this app (`appFieldName`) you will inform a value (`appFieldValue`).
        
        The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SetMultipleCustomFieldValuesRequest, base_url, '/api/checkout/pub/orderForm/{orderFormId}/customData/{appId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetMultipleCustomFieldValuesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.set_multiple_custom_field_values_200_application_json_any = out

        return res

    def set_single_custom_field_value(self, request: operations.SetSingleCustomFieldValueRequest) -> operations.SetSingleCustomFieldValueResponse:
        r"""Set single custom field value
        Your account may create `apps`, which contain custom fields, through the [Update orderForm configuration](https://developers.vtex.com/reference#updateorderformconfiguration) request. The value of a specific custom field can then be updated by this request.
        
        
        To do that, you need to inform in the URL the ID of the app you created with the configuration API (`appId`).
        
        
        In the body of the request, you will inform the new value (`appFieldValue`, passed through the body) of the specific field created in this app (identified by the `appFieldName` parameter, passed through the URL).
        
        The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SetSingleCustomFieldValueRequest, base_url, '/api/checkout/pub/orderForm/{orderFormId}/customData/{appId}/{appFieldName}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "setsinglecustomfieldvalue_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetSingleCustomFieldValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    