/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ScimSchemaAttribute } from "./scimschemaattribute";
import { Expose, Type } from "class-transformer";

export enum ScimSchemaParentAttributeTypeEnum {
  String = "string",
  Boolean = "boolean",
  Complex = "complex",
}

export class ScimSchemaParentAttribute extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "caseExact" })
  caseExact?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "multiValued" })
  multiValued?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "mutability" })
  mutability?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "required" })
  required?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "returned" })
  returned?: string;

  @SpeakeasyMetadata({ elemType: ScimSchemaAttribute })
  @Expose({ name: "subAttributes" })
  @Type(() => ScimSchemaAttribute)
  subAttributes?: ScimSchemaAttribute[];

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: ScimSchemaParentAttributeTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "uniqueness" })
  uniqueness?: string;
}
