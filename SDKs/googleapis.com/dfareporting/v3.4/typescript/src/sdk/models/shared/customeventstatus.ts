/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CustomEvent } from "./customevent";
import { CustomEventError } from "./customeventerror";
import { Expose, Type } from "class-transformer";

/**
 * The original custom event that was inserted and whether there were any errors.
 */
export class CustomEventStatus extends SpeakeasyBase {
  /**
   * Experimental feature (no support provided) A custom event represents a third party impression, a third party click, an annotation on a first party impression, or an annotation on a first party click.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customEvent" })
  @Type(() => CustomEvent)
  customEvent?: CustomEvent;

  /**
   * A list of errors related to this custom event.
   */
  @SpeakeasyMetadata({ elemType: CustomEventError })
  @Expose({ name: "errors" })
  @Type(() => CustomEventError)
  errors?: CustomEventError[];

  /**
   * Identifies what kind of resource this is. Value: the fixed string "dfareporting#customEventStatus".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;
}
