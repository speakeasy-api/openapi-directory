"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class MobileAuthorization:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_mobile_authorization_code(self, request: shared.CreateMobileAuthorizationCodeRequest, security: operations.CreateMobileAuthorizationCodeSecurity) -> operations.CreateMobileAuthorizationCodeResponse:
        r"""CreateMobileAuthorizationCode
        Generates code to authorize a mobile application to connect to a Square card reader
        
        Authorization codes are one-time-use and expire __60 minutes__ after being issued.
        
        __Important:__ The `Authorization` header you provide to this endpoint must have the following format:
        
        ```
        Authorization: Bearer ACCESS_TOKEN
        ```
        
        Replace `ACCESS_TOKEN` with a
        [valid production authorization credential](https://developer.squareup.com/docs/build-basics/access-tokens).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mobile/authorization-code'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateMobileAuthorizationCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateMobileAuthorizationCodeResponse])
                res.create_mobile_authorization_code_response = out

        return res

    