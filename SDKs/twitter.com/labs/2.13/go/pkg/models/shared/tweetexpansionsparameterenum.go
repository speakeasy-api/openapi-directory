// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TweetExpansionsParameterEnum string

const (
	TweetExpansionsParameterEnumAuthorID                   TweetExpansionsParameterEnum = "author_id"
	TweetExpansionsParameterEnumReferencedTweetsID         TweetExpansionsParameterEnum = "referenced_tweets.id"
	TweetExpansionsParameterEnumInReplyToUserID            TweetExpansionsParameterEnum = "in_reply_to_user_id"
	TweetExpansionsParameterEnumGeoPlaceID                 TweetExpansionsParameterEnum = "geo.place_id"
	TweetExpansionsParameterEnumAttachmentsMediaKeys       TweetExpansionsParameterEnum = "attachments.media_keys"
	TweetExpansionsParameterEnumAttachmentsPollIds         TweetExpansionsParameterEnum = "attachments.poll_ids"
	TweetExpansionsParameterEnumEntitiesMentionsUsername   TweetExpansionsParameterEnum = "entities.mentions.username"
	TweetExpansionsParameterEnumReferencedTweetsIDAuthorID TweetExpansionsParameterEnum = "referenced_tweets.id.author_id"
)

func (e *TweetExpansionsParameterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "author_id":
		fallthrough
	case "referenced_tweets.id":
		fallthrough
	case "in_reply_to_user_id":
		fallthrough
	case "geo.place_id":
		fallthrough
	case "attachments.media_keys":
		fallthrough
	case "attachments.poll_ids":
		fallthrough
	case "entities.mentions.username":
		fallthrough
	case "referenced_tweets.id.author_id":
		*e = TweetExpansionsParameterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TweetExpansionsParameterEnum: %s", s)
	}
}
