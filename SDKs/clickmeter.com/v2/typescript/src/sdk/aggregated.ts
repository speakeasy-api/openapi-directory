/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Aggregated {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve statistics about a subset of conversions for a timeframe with conversions data
   */
  aggregatedGetConversionsSummary(
    req: operations.AggregatedGetConversionsSummaryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AggregatedGetConversionsSummaryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AggregatedGetConversionsSummaryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/aggregated/summary/conversions";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AggregatedGetConversionsSummaryResponse =
        new operations.AggregatedGetConversionsSummaryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreDtoAggregatedAggregatedSummaryResult =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreDtoAggregatedAggregatedSummaryResult
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreDtoAggregatedAggregatedSummaryResult =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreDtoAggregatedAggregatedSummaryResult
              );
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve statistics about a subset of datapoints for a timeframe with datapoints data
   */
  aggregatedGetDatapointsSummary(
    req: operations.AggregatedGetDatapointsSummaryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AggregatedGetDatapointsSummaryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AggregatedGetDatapointsSummaryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/aggregated/summary/datapoints";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AggregatedGetDatapointsSummaryResponse =
        new operations.AggregatedGetDatapointsSummaryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreDtoAggregatedAggregatedSummaryResult =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreDtoAggregatedAggregatedSummaryResult
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreDtoAggregatedAggregatedSummaryResult =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreDtoAggregatedAggregatedSummaryResult
              );
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve statistics about a subset of groups for a timeframe with groups data
   */
  aggregatedGetGroupsSummary(
    req: operations.AggregatedGetGroupsSummaryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AggregatedGetGroupsSummaryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AggregatedGetGroupsSummaryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/aggregated/summary/groups";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AggregatedGetGroupsSummaryResponse =
        new operations.AggregatedGetGroupsSummaryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreDtoAggregatedAggregatedSummaryResult =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreDtoAggregatedAggregatedSummaryResult
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreDtoAggregatedAggregatedSummaryResult =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreDtoAggregatedAggregatedSummaryResult
              );
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve statistics about this customer for a timeframe grouped by some temporal entity (day/week/month)
   */
  aggregatedGetStatisticsList(
    req: operations.AggregatedGetStatisticsListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AggregatedGetStatisticsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AggregatedGetStatisticsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/aggregated/list";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AggregatedGetStatisticsListResponse =
        new operations.AggregatedGetStatisticsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult
              );
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve statistics about this customer for a timeframe
   */
  aggregatedGetStatisticsSingle(
    req: operations.AggregatedGetStatisticsSingleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AggregatedGetStatisticsSingleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AggregatedGetStatisticsSingleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/aggregated";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AggregatedGetStatisticsSingleResponse =
        new operations.AggregatedGetStatisticsSingleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreDtoAggregatedAggregatedResult = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreDtoAggregatedAggregatedResult
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreDtoAggregatedAggregatedResult = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreDtoAggregatedAggregatedResult
            );
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
