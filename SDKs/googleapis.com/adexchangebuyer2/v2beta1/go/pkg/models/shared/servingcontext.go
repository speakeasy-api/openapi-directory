// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ServingContextAllEnum - Matches all contexts.
type ServingContextAllEnum string

const (
	ServingContextAllEnumSimpleContext ServingContextAllEnum = "SIMPLE_CONTEXT"
)

func (e *ServingContextAllEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SIMPLE_CONTEXT":
		*e = ServingContextAllEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServingContextAllEnum: %s", s)
	}
}

// ServingContext - The serving context for this restriction.
type ServingContext struct {
	// Matches all contexts.
	All *ServingContextAllEnum `json:"all,omitempty"`
	// Output only. The app type the restriction applies to for mobile device.
	AppType *AppContext `json:"appType,omitempty"`
	// Output only. The auction type the restriction applies to.
	AuctionType *AuctionContext `json:"auctionType,omitempty"`
	// Output only. The Geo criteria the restriction applies to.
	Location *LocationContext `json:"location,omitempty"`
	// Output only. The type of platform the restriction applies to.
	Platform *PlatformContext `json:"platform,omitempty"`
	// Output only. A security context.
	SecurityType *SecurityContext `json:"securityType,omitempty"`
}
