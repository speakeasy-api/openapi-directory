"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import assessmentrunstate_enum as shared_assessmentrunstate_enum
from ..shared import durationrange as shared_durationrange
from ..shared import timestamprange as shared_timestamprange
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssessmentRunFilter:
    r"""Used as the request parameter in the <a>ListAssessmentRuns</a> action."""
    
    completion_time_range: Optional[shared_timestamprange.TimestampRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completionTimeRange'), 'exclude': lambda f: f is None }})  
    duration_range: Optional[shared_durationrange.DurationRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('durationRange'), 'exclude': lambda f: f is None }})  
    name_pattern: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namePattern'), 'exclude': lambda f: f is None }})  
    rules_package_arns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rulesPackageArns'), 'exclude': lambda f: f is None }})  
    start_time_range: Optional[shared_timestamprange.TimestampRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTimeRange'), 'exclude': lambda f: f is None }})  
    state_change_time_range: Optional[shared_timestamprange.TimestampRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateChangeTimeRange'), 'exclude': lambda f: f is None }})  
    states: Optional[list[shared_assessmentrunstate_enum.AssessmentRunStateEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('states'), 'exclude': lambda f: f is None }})  
    