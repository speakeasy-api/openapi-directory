/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AutomaticTerminationModeEnum } from "./automaticterminationmodeenum";
import { SessionPersistenceModeEnum } from "./sessionpersistencemodeenum";
import { StreamConfigurationSessionBackup } from "./streamconfigurationsessionbackup";
import { StreamConfigurationSessionStorage } from "./streamconfigurationsessionstorage";
import { StreamingClipboardModeEnum } from "./streamingclipboardmodeenum";
import { StreamingInstanceTypeEnum } from "./streaminginstancetypeenum";
import { VolumeConfiguration } from "./volumeconfiguration";
import { Expose, Type } from "class-transformer";

/**
 * A configuration for a streaming session.
 */
export class StreamConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "automaticTerminationMode" })
  automaticTerminationMode?: AutomaticTerminationModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "clipboardMode" })
  clipboardMode: StreamingClipboardModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "ec2InstanceTypes" })
  ec2InstanceTypes: StreamingInstanceTypeEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "maxSessionLengthInMinutes" })
  maxSessionLengthInMinutes?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "maxStoppedSessionLengthInMinutes" })
  maxStoppedSessionLengthInMinutes?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "sessionBackup" })
  @Type(() => StreamConfigurationSessionBackup)
  sessionBackup?: StreamConfigurationSessionBackup;

  @SpeakeasyMetadata()
  @Expose({ name: "sessionPersistenceMode" })
  sessionPersistenceMode?: SessionPersistenceModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "sessionStorage" })
  @Type(() => StreamConfigurationSessionStorage)
  sessionStorage?: StreamConfigurationSessionStorage;

  @SpeakeasyMetadata()
  @Expose({ name: "streamingImageIds" })
  streamingImageIds: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "volumeConfiguration" })
  @Type(() => VolumeConfiguration)
  volumeConfiguration?: VolumeConfiguration;
}
