// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoalRequestMetricUnitEnum - A supported unit of measure for the goal metric, or none.
type GoalRequestMetricUnitEnum string

const (
	GoalRequestMetricUnitEnumNone       GoalRequestMetricUnitEnum = "none"
	GoalRequestMetricUnitEnumCurrency   GoalRequestMetricUnitEnum = "currency"
	GoalRequestMetricUnitEnumPercentage GoalRequestMetricUnitEnum = "percentage"
)

func (e *GoalRequestMetricUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "none":
		fallthrough
	case "currency":
		fallthrough
	case "percentage":
		*e = GoalRequestMetricUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoalRequestMetricUnitEnum: %s", s)
	}
}

// GoalRequestMetricInput - A generic Asana Resource, containing a globally unique identifier.
type GoalRequestMetricInput struct {
	// ISO 4217 currency code to format this custom field. This will be null if the `format` is not `currency`.
	CurrencyCode *string `json:"currency_code,omitempty"`
	// *Conditional*. This string is the current value of a goal metric of type string.
	CurrentDisplayValue *string `json:"current_display_value,omitempty"`
	// *Conditional*. This number is the current value of a goal metric of type number.
	CurrentNumberValue *float64 `json:"current_number_value,omitempty"`
	// *Conditional*. This number is the start value of a goal metric of type number.
	InitialNumberValue *float64 `json:"initial_number_value,omitempty"`
	// Only relevant for goal metrics of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.
	// For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.
	Precision *int64 `json:"precision,omitempty"`
	// *Conditional*. This number is the end value of a goal metric of type number.
	TargetNumberValue *float64 `json:"target_number_value,omitempty"`
	// A supported unit of measure for the goal metric, or none.
	Unit *GoalRequestMetricUnitEnum `json:"unit,omitempty"`
}

// GoalRequestOwnerInput - A *user* object represents an account in Asana that can be given access to various workspaces, projects, and tasks.
type GoalRequestOwnerInput struct {
	// *Read-only except when same user as requester*. The user’s name.
	Name *string `json:"name,omitempty"`
}

// GoalRequestTeamInput - A *team* is used to group related projects and people together within an organization. Each project in an organization is associated with a team.
type GoalRequestTeamInput struct {
	// The name of the team.
	Name *string `json:"name,omitempty"`
}

// GoalRequestTimePeriodPeriodEnum - The cadence and index of the time period. The value is one of: `FY`, `H1`, `H2`, `Q1`, `Q2`, `Q3`, or `Q4`.
type GoalRequestTimePeriodPeriodEnum string

const (
	GoalRequestTimePeriodPeriodEnumFy GoalRequestTimePeriodPeriodEnum = "FY"
	GoalRequestTimePeriodPeriodEnumH1 GoalRequestTimePeriodPeriodEnum = "H1"
	GoalRequestTimePeriodPeriodEnumH2 GoalRequestTimePeriodPeriodEnum = "H2"
	GoalRequestTimePeriodPeriodEnumQ1 GoalRequestTimePeriodPeriodEnum = "Q1"
	GoalRequestTimePeriodPeriodEnumQ2 GoalRequestTimePeriodPeriodEnum = "Q2"
	GoalRequestTimePeriodPeriodEnumQ3 GoalRequestTimePeriodPeriodEnum = "Q3"
	GoalRequestTimePeriodPeriodEnumQ4 GoalRequestTimePeriodPeriodEnum = "Q4"
)

func (e *GoalRequestTimePeriodPeriodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FY":
		fallthrough
	case "H1":
		fallthrough
	case "H2":
		fallthrough
	case "Q1":
		fallthrough
	case "Q2":
		fallthrough
	case "Q3":
		fallthrough
	case "Q4":
		*e = GoalRequestTimePeriodPeriodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoalRequestTimePeriodPeriodEnum: %s", s)
	}
}

// GoalRequestTimePeriodInput - A generic Asana Resource, containing a globally unique identifier.
type GoalRequestTimePeriodInput struct {
	// The localized end date of the time period in `YYYY-MM-DD` format.
	EndOn *string `json:"end_on,omitempty"`
	// The cadence and index of the time period. The value is one of: `FY`, `H1`, `H2`, `Q1`, `Q2`, `Q3`, or `Q4`.
	Period *GoalRequestTimePeriodPeriodEnum `json:"period,omitempty"`
	// The localized start date of the time period in `YYYY-MM-DD` format.
	StartOn *string `json:"start_on,omitempty"`
}

// GoalRequestWorkspaceInput - A *workspace* is the highest-level organizational unit in Asana. All projects and tasks have an associated workspace.
type GoalRequestWorkspaceInput struct {
	// The name of the workspace.
	Name *string `json:"name,omitempty"`
}

// GoalRequestInput - A generic Asana Resource, containing a globally unique identifier.
type GoalRequestInput struct {
	// The localized day on which this goal is due. This takes a date with format `YYYY-MM-DD`.
	DueOn *string `json:"due_on,omitempty"`
	// Array of users following this goal.
	Followers []UserCompactInput `json:"followers,omitempty"`
	// The notes of the goal with formatting as HTML.
	HTMLNotes *string `json:"html_notes,omitempty"`
	// *Conditional*. This property is only present when the `workspace` provided is an organization. Whether the goal belongs to the `workspace` (and is listed as part of the workspace’s goals) or not. If it isn’t a workspace-level goal, it is a team-level goal, and is associated with the goal’s team.
	IsWorkspaceLevel *bool `json:"is_workspace_level,omitempty"`
	// True if the goal is liked by the authorized user, false if not.
	Liked  *bool                   `json:"liked,omitempty"`
	Metric *GoalRequestMetricInput `json:"metric,omitempty"`
	// The name of the goal.
	Name *string `json:"name,omitempty"`
	// Free-form textual information associated with the goal (i.e. its description).
	Notes *string                `json:"notes,omitempty"`
	Owner *GoalRequestOwnerInput `json:"owner,omitempty"`
	// The day on which work for this goal begins, or null if the goal has no start date. This takes a date with `YYYY-MM-DD` format, and cannot be set unless there is an accompanying due date.
	StartOn *string `json:"start_on,omitempty"`
	// The current status of this goal. When the goal is open, its status can be `green`, `yellow`, and `red` to reflect "On Track", "At Risk", and "Off Track", respectively. When the goal is closed, the value can be `missed`, `achieved`, `partial`, or `dropped`.
	Status *string `json:"status,omitempty"`
	// *Conditional*. This property is only present when the `workspace` provided is an organization.
	Team       *GoalRequestTeamInput       `json:"team,omitempty"`
	TimePeriod *GoalRequestTimePeriodInput `json:"time_period,omitempty"`
	Workspace  *GoalRequestWorkspaceInput  `json:"workspace,omitempty"`
}
