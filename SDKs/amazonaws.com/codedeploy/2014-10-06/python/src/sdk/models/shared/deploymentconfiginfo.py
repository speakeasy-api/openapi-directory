"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import computeplatform_enum as shared_computeplatform_enum
from ..shared import minimumhealthyhosts as shared_minimumhealthyhosts
from ..shared import trafficroutingconfig as shared_trafficroutingconfig
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeploymentConfigInfo:
    r"""Information about a deployment configuration."""
    
    compute_platform: Optional[shared_computeplatform_enum.ComputePlatformEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('computePlatform'), 'exclude': lambda f: f is None }})  
    create_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    deployment_config_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentConfigId'), 'exclude': lambda f: f is None }})  
    deployment_config_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentConfigName'), 'exclude': lambda f: f is None }})  
    minimum_healthy_hosts: Optional[shared_minimumhealthyhosts.MinimumHealthyHosts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumHealthyHosts'), 'exclude': lambda f: f is None }})  
    traffic_routing_config: Optional[shared_trafficroutingconfig.TrafficRoutingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trafficRoutingConfig'), 'exclude': lambda f: f is None }})  
    