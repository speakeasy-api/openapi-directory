"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import costestimationresourcecollectionfilter as shared_costestimationresourcecollectionfilter
from ..shared import costestimationstatus_enum as shared_costestimationstatus_enum
from ..shared import costestimationtimerange as shared_costestimationtimerange
from ..shared import serviceresourcecost as shared_serviceresourcecost
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCostEstimationResponse:
    r"""Success"""
    
    costs: Optional[list[shared_serviceresourcecost.ServiceResourceCost]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Costs'), 'exclude': lambda f: f is None }})  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextToken'), 'exclude': lambda f: f is None }})  
    resource_collection: Optional[shared_costestimationresourcecollectionfilter.CostEstimationResourceCollectionFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceCollection'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_costestimationstatus_enum.CostEstimationStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    time_range: Optional[shared_costestimationtimerange.CostEstimationTimeRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeRange'), 'exclude': lambda f: f is None }})  
    total_cost: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalCost'), 'exclude': lambda f: f is None }})  
    