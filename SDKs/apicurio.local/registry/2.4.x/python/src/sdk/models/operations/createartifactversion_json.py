"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import contentcreaterequest as shared_contentcreaterequest
from ..shared import error as shared_error
from ..shared import ruleviolationerror as shared_ruleviolationerror
from ..shared import versionmetadata as shared_versionmetadata
from typing import Optional


@dataclasses.dataclass
class CreateArtifactVersionJSONRequest:
    
    artifact_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'artifactId', 'style': 'simple', 'explode': False }})
    r"""The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier."""  
    content_create_request: shared_contentcreaterequest.ContentCreateRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/vnd.create.extended+json' }})
    r"""The content of the artifact version being created or the content and a set of references to other artifacts. This is often, but not always, JSON data
    representing one of the supported artifact types:
    
    * Avro (`AVRO`)
    * Protobuf (`PROTOBUF`)
    * JSON Schema (`JSON`)
    * Kafka Connect (`KCONNECT`)
    * OpenAPI (`OPENAPI`)
    * AsyncAPI (`ASYNCAPI`)
    * GraphQL (`GRAPHQL`)
    * Web Services Description Language (`WSDL`)
    * XML Schema (`XSD`)
    """  
    group_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'groupId', 'style': 'simple', 'explode': False }})
    r"""The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts."""  
    x_registry_description: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Registry-Description', 'style': 'simple', 'explode': False }})
    r"""Specifies the artifact description of this new version of the artifact content. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content."""  
    x_registry_description_encoded: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Registry-Description-Encoded', 'style': 'simple', 'explode': False }})
    r"""Specifies the artifact description of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content."""  
    x_registry_name: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Registry-Name', 'style': 'simple', 'explode': False }})
    r"""Specifies the artifact name of this new version of the artifact content. Name must be ASCII-only string. If this is not
    provided, the server will extract the name from the artifact content.
    """  
    x_registry_name_encoded: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Registry-Name-Encoded', 'style': 'simple', 'explode': False }})
    r"""Specifies the artifact name of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content."""  
    x_registry_version: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Registry-Version', 'style': 'simple', 'explode': False }})
    r"""Specifies the version number of this new version of the artifact content.  This would typically
    be a simple integer or a SemVer value.  It must be unique within the artifact.  If this is not
    provided, the server will generate a new, unique version number for this new updated content.
    """  
    

@dataclasses.dataclass
class CreateArtifactVersionJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Common response for all operations that can return a `404` error."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    rule_violation_error: Optional[shared_ruleviolationerror.RuleViolationError] = dataclasses.field(default=None)
    r"""Common response used when an input conflicts with existing data."""  
    version_meta_data: Optional[shared_versionmetadata.VersionMetaData] = dataclasses.field(default=None)
    r"""The artifact version was successfully created."""  
    