/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class ClassificationInclusion {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get ClassificationInclusion records
   *
   * @remarks
   * Classification Inclusions connect classifications with entities like series, episodes, or campaigns, amongst others.
   *
   * In order to retrieve a set of classification inclusions, at least one of the following filter parameters must
   * be provided. Failing to do so renders a `400 Bad Request` response.
   *
   * - `ids[]`
   * - `classified_id` and `classified_type`
   * - `classified_id` and `classification_type`
   * - `classification_id` and `classified_type`
   *
   */
  getClassificationInclusions(
    req: operations.GetClassificationInclusionsRequest,
    security: operations.GetClassificationInclusionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetClassificationInclusionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetClassificationInclusionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/classification_inclusions";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetClassificationInclusionsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetClassificationInclusionsResponse =
        new operations.GetClassificationInclusionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.getClassificationInclusions200ApplicationVndApiPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetClassificationInclusions200ApplicationVndApiPlusJson
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.getClassificationInclusions400ApplicationVndApiPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetClassificationInclusions400ApplicationVndApiPlusJson
              );
          }
          break;
        case [401, 403, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Get a specific classification inclusion
   */
  getClassificationInclusionsId(
    req: operations.GetClassificationInclusionsIdRequest,
    security: operations.GetClassificationInclusionsIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetClassificationInclusionsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetClassificationInclusionsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/classification_inclusions/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetClassificationInclusionsIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetClassificationInclusionsIdResponse =
        new operations.GetClassificationInclusionsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.getClassificationInclusionsId200ApplicationVndApiPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetClassificationInclusionsId200ApplicationVndApiPlusJson
              );
          }
          break;
        case [401, 403, 404, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }
}
