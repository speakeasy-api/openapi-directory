"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

SERVERS = [
    "https://api.contentgroove.com",
    r"""API server"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""# Overview
    
    The ContentGroove Developer API enables you to add the power of ContentGroove's video AI to your own applications and workflows.
    
    Webhooks are a way for ContentGroove to send video information
    to your application, to update your system and/or trigger other business processes.
    
    You can use Webhooks and the Developer API separately or together.
    
    # Getting Started with Webhooks
    
    - Sign up for an account at [app.contentgroove.com](https://app.contentgroove.com)
    - Read \"Using Webhooks\" on the [API Reference page](https://developers.contentgroove.com/api_reference)
    - Visit the [Webhooks page](https://app.contentgroove.com/webhook_subscriptions) and create a new webhook
    
    # Using Webhooks
    
    Webhooks, also known as callbacks, are a way for ContentGroove to notify your application as soon as possible after an event has occurred in ContentGroove.
    For example after a media completes processing, ContentGroove can use a webhook to notify your application with information about the video: Suggested clips, transcription, and so on.
    You can use the information sent to update your system and/or use the
    webhook to trigger other business processes.
    
    The webhook request is sent as an HTTP POST containing a payload of JSON-formatted data.
    For the details of the payload format see the \"CALLBACKS\" sections below.
    
    When your application receives the webhook request, it must respond with
    a 200 HTTP status code (success).
    If a 200 HTTP status code is not returned,
    ContentGroove will assume that the webhook was not delivered and
    will retry a limited number of times, using an exponential backoff algorithm.
    
    ContentGroove makes a best effort to attempt to send the webhook at
    least once.
    Applications receiving webhooks must tolerate the
    possibility of a single webhook payload being sent more than once
    (idempotent behavior).
    Applications receiving webhooks should tolerate the possibility that
    a webhook could not be delivered
    (for example your application was down when delivery was attempted).
    
    # Getting Started with the Developer API
    
    - Sign up for an account at [app.contentgroove.com](https://app.contentgroove.com)
    - Visit the [API Keys page](https://app.contentgroove.com/api_keys)
      - Create a new API Key then copy and save the value.
        > ⚠️ **IMPORTANT**: This API Key is intended only for use on the server side. Be sure never to use a server-side API Key in client-side (web, mobile, or otherwise) code. ⚠️
    - View all available endpoints, and try the API, on our [API Reference page](https://developers.contentgroove.com/api_reference)
    
    # Using the Developer API
    
    - Create a new media (video or audio) in ContentGroove
      - If the video or audio is available from a URL, you can create a media by providing the `source_url` parameter. ContentGroove will fetch the video or audio from the URL if possible.
      - Or, you can create a media from a video or audio file which you upload directly to ContentGroove (see File Uploading section below).
    - After the new media is created, at first it will be in a \"processing\" state.
      Depending on the size and duration of the video or audio file, it will take some time for processing to complete.
      - You can use ContentGroove Webhooks to be notified immediately when processing has completed. (Details coming soon.)
      - You can also use the API to read the state of the media, to determine if the media has completed processing yet.
    - After the media has completed processing, you can access all of these details about the media:
      - The media name and description
      - The transcription of spoken words
      - Topics and keywords which were discussed in the transcription
      - Suggested video clips are automatically created
    - In addition to the automatically created video clips, you can create more video clips from the media
    
    # Response Codes
    
    The following is a comprehensive list of the status codes you may receive while using the ContentGroove API:
    
    - 200 \"Ok\"
      - The request was valid
    - 400 \"Bad Request
      - This is returned when there was a problem parsing the JSON body of your request if you supplied the 'Content-Type': 'application/json' header, or if your request is missing the 'Content-Type' header altogether
    - 401 \"Unauthorized\"
      - This is returned when you are attempting to perform an action on a resource that you are not authorized to do
    - 402 \"Payment Required\"
      - This is returned when you are attempting to perform an action that would push your account above a usage limit. You can view your usage at: https://app.contentgroove.com/quota_usage
    - 404 \"Not Found\"
      - This is returned when the resource you are trying to view does not exist
    - 429 \"Too Many Requests\"
      - This is returned when you have performed too many requests within a given period of time
    - 500 \"Internal Server Error\"
      - This is returned when your request was valid but there was a problem on our end
    
    # File Uploading
    
    - Step 1: Make a GET request to the direct uploads URL endpoint (/api/v1/direct_uploads) to receive an upload URL to upload the file to and an upload id.
    - Step 2: Make a PUT request with the file as the body to the upload URL received in step 1. The response will have a 200 status with no body if the upload is successful.
      ```
      curl -T /path/to/file upload_url
      ```
    - Step 3: After uploading the file to the upload URL, make a POST request to the create medias endpoint (/api/v1/medias), with the upload id and optionally a name and description for the new media.
      > At this time, file uploads are limited to 5gb per file.
    
    # Allowed media types
    
    Video:
    
    - Supported: Most common video formats and codecs are supported.
    - Recommended: mp4
    
    Audio:
    
    - Supported: aac, mp3, flac, ogg, wav, and wma
    - Recommended: aac
    
    # Authentication
    
    You can use the API Key to authenticate your API requests using any of these methods. (Replace abc123 with your actual API Key.)
    
    - Request header `Authorization: Bearer abc123`
    - Request header `X-API-KEY: abc123`
    - Query parameter `api_key=abc123`
      > ⚠️ **IMPORTANT**: This API Key is intended only for use on the server side. Be sure never to use a server-side API Key in client-side (web, mobile, or otherwise) code. ⚠️
    
    # Link to openapi.json spec
    
    - https://api.contentgroove.com/api-docs/v1/openapi.json
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def delete_api_v1_clips_id_(self, request: operations.DeleteAPIV1ClipsIDRequest, security: operations.DeleteAPIV1ClipsIDSecurity) -> operations.DeleteAPIV1ClipsIDResponse:
        r"""delete clip"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAPIV1ClipsIDRequest, base_url, '/api/v1/clips/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAPIV1ClipsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_api_v1_medias_id_(self, request: operations.DeleteAPIV1MediasIDRequest, security: operations.DeleteAPIV1MediasIDSecurity) -> operations.DeleteAPIV1MediasIDResponse:
        r"""delete media"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAPIV1MediasIDRequest, base_url, '/api/v1/medias/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAPIV1MediasIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_api_v1_webhook_subscriptions_id_(self, request: operations.DeleteAPIV1WebhookSubscriptionsIDRequest, security: operations.DeleteAPIV1WebhookSubscriptionsIDSecurity) -> operations.DeleteAPIV1WebhookSubscriptionsIDResponse:
        r"""delete webhook subscription"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAPIV1WebhookSubscriptionsIDRequest, base_url, '/api/v1/webhook_subscriptions/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAPIV1WebhookSubscriptionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_api_v1_clips(self, request: operations.GetAPIV1ClipsRequest, security: operations.GetAPIV1ClipsSecurity) -> operations.GetAPIV1ClipsResponse:
        r"""list clips"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/clips'
        
        query_params = utils.get_query_params(operations.GetAPIV1ClipsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1ClipsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_api_v1_clips_id_(self, request: operations.GetAPIV1ClipsIDRequest, security: operations.GetAPIV1ClipsIDSecurity) -> operations.GetAPIV1ClipsIDResponse:
        r"""show clip"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV1ClipsIDRequest, base_url, '/api/v1/clips/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1ClipsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_api_v1_direct_uploads(self) -> operations.GetAPIV1DirectUploadsResponse:
        r"""prepare presigned upload url"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/direct_uploads'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1DirectUploadsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_api_v1_medias(self, request: operations.GetAPIV1MediasRequest, security: operations.GetAPIV1MediasSecurity) -> operations.GetAPIV1MediasResponse:
        r"""list medias"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/medias'
        
        query_params = utils.get_query_params(operations.GetAPIV1MediasRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1MediasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_api_v1_medias_id_(self, request: operations.GetAPIV1MediasIDRequest, security: operations.GetAPIV1MediasIDSecurity) -> operations.GetAPIV1MediasIDResponse:
        r"""show media"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV1MediasIDRequest, base_url, '/api/v1/medias/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1MediasIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_api_v1_webhook_subscriptions(self, request: operations.GetAPIV1WebhookSubscriptionsRequest, security: operations.GetAPIV1WebhookSubscriptionsSecurity) -> operations.GetAPIV1WebhookSubscriptionsResponse:
        r"""list webhook subscriptions"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/webhook_subscriptions'
        
        query_params = utils.get_query_params(operations.GetAPIV1WebhookSubscriptionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1WebhookSubscriptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_api_v1_webhook_subscriptions_id_(self, request: operations.GetAPIV1WebhookSubscriptionsIDRequest, security: operations.GetAPIV1WebhookSubscriptionsIDSecurity) -> operations.GetAPIV1WebhookSubscriptionsIDResponse:
        r"""show webhook subscription"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV1WebhookSubscriptionsIDRequest, base_url, '/api/v1/webhook_subscriptions/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1WebhookSubscriptionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_api_v1_clips(self, request: operations.PostAPIV1ClipsRequestBody, security: operations.PostAPIV1ClipsSecurity) -> operations.PostAPIV1ClipsResponse:
        r"""create clip"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/clips'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV1ClipsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_api_v1_medias(self, request: operations.PostAPIV1MediasRequestBody, security: operations.PostAPIV1MediasSecurity) -> operations.PostAPIV1MediasResponse:
        r"""create media"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/medias'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV1MediasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_api_v1_webhook_subscriptions(self, request: operations.PostAPIV1WebhookSubscriptionsRequestBody, security: operations.PostAPIV1WebhookSubscriptionsSecurity) -> operations.PostAPIV1WebhookSubscriptionsResponse:
        r"""create webhook subscription"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/webhook_subscriptions'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV1WebhookSubscriptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_api_v1_clips_id_(self, request: operations.PutAPIV1ClipsIDRequest, security: operations.PutAPIV1ClipsIDSecurity) -> operations.PutAPIV1ClipsIDResponse:
        r"""update clip"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutAPIV1ClipsIDRequest, base_url, '/api/v1/clips/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutAPIV1ClipsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_api_v1_medias_id_(self, request: operations.PutAPIV1MediasIDRequest, security: operations.PutAPIV1MediasIDSecurity) -> operations.PutAPIV1MediasIDResponse:
        r"""update media"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutAPIV1MediasIDRequest, base_url, '/api/v1/medias/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutAPIV1MediasIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    