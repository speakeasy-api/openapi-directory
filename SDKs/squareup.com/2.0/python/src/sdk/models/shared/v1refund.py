"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import v1money as shared_v1money
from ..shared import v1paymentsurcharge as shared_v1paymentsurcharge
from ..shared import v1paymenttax as shared_v1paymenttax
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V1Refund:
    r"""V1Refund"""
    
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""The time when the merchant initiated the refund for Square to process, in ISO 8601 format."""  
    is_exchange: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_exchange'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not the refund is associated with an exchange. If is_exchange is true, the refund reflects the value of goods returned in the exchange not the total money refunded."""  
    merchant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchant_id'), 'exclude': lambda f: f is None }})  
    payment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_id'), 'exclude': lambda f: f is None }})
    r"""A Square-issued ID associated with the refund. For single-tender refunds, payment_id is the ID of the original payment ID. For split-tender refunds, payment_id is the ID of the original tender. For exchange-based refunds (is_exchange == true), payment_id is the ID of the original payment ID even if the payment includes other tenders."""  
    processed_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processed_at'), 'exclude': lambda f: f is None }})
    r"""The time when Square processed the refund on behalf of the merchant, in ISO 8601 format."""  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""The merchant-specified reason for the refund."""  
    refunded_additive_tax: Optional[list[shared_v1paymenttax.V1PaymentTax]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_additive_tax'), 'exclude': lambda f: f is None }})
    r"""All of the additive taxes associated with the refund."""  
    refunded_additive_tax_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_additive_tax_money'), 'exclude': lambda f: f is None }})  
    refunded_discount_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_discount_money'), 'exclude': lambda f: f is None }})  
    refunded_inclusive_tax: Optional[list[shared_v1paymenttax.V1PaymentTax]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_inclusive_tax'), 'exclude': lambda f: f is None }})
    r"""All of the inclusive taxes associated with the refund."""  
    refunded_inclusive_tax_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_inclusive_tax_money'), 'exclude': lambda f: f is None }})  
    refunded_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_money'), 'exclude': lambda f: f is None }})  
    refunded_processing_fee_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_processing_fee_money'), 'exclude': lambda f: f is None }})  
    refunded_surcharge_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_surcharge_money'), 'exclude': lambda f: f is None }})  
    refunded_surcharges: Optional[list[shared_v1paymentsurcharge.V1PaymentSurcharge]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_surcharges'), 'exclude': lambda f: f is None }})
    r"""A list of all surcharges associated with the refund."""  
    refunded_tax_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_tax_money'), 'exclude': lambda f: f is None }})  
    refunded_tip_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_tip_money'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of refund"""  
    