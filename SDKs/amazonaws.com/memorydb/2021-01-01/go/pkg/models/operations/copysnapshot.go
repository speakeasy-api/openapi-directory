// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CopySnapshotXAmzTargetEnum
type CopySnapshotXAmzTargetEnum string

const (
	CopySnapshotXAmzTargetEnumAmazonMemoryDbCopySnapshot CopySnapshotXAmzTargetEnum = "AmazonMemoryDB.CopySnapshot"
)

func (e CopySnapshotXAmzTargetEnum) ToPointer() *CopySnapshotXAmzTargetEnum {
	return &e
}

func (e *CopySnapshotXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonMemoryDB.CopySnapshot":
		*e = CopySnapshotXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CopySnapshotXAmzTargetEnum: %v", v)
	}
}

type CopySnapshotRequest struct {
	CopySnapshotRequest shared.CopySnapshotRequest `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          CopySnapshotXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CopySnapshotResponse struct {
	ContentType string
	// Success
	CopySnapshotResponse *shared.CopySnapshotResponse
	// InvalidParameterCombinationException
	InvalidParameterCombinationException interface{}
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	// InvalidSnapshotStateFault
	InvalidSnapshotStateFault interface{}
	// ServiceLinkedRoleNotFoundFault
	ServiceLinkedRoleNotFoundFault interface{}
	// SnapshotAlreadyExistsFault
	SnapshotAlreadyExistsFault interface{}
	// SnapshotQuotaExceededFault
	SnapshotQuotaExceededFault interface{}
	StatusCode                 int
	RawResponse                *http.Response
	// SnapshotNotFoundFault
	SnapshotNotFoundFault interface{}
	// TagQuotaPerResourceExceeded
	TagQuotaPerResourceExceeded interface{}
}
