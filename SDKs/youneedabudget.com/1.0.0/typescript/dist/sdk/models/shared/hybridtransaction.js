"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HybridTransaction = exports.HybridTransactionTypeEnum = exports.HybridTransactionFlagColorEnum = exports.HybridTransactionDebtTransactionTypeEnum = exports.HybridTransactionClearedEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The cleared status of the transaction
 */
var HybridTransactionClearedEnum;
(function (HybridTransactionClearedEnum) {
    HybridTransactionClearedEnum["Cleared"] = "cleared";
    HybridTransactionClearedEnum["Uncleared"] = "uncleared";
    HybridTransactionClearedEnum["Reconciled"] = "reconciled";
})(HybridTransactionClearedEnum = exports.HybridTransactionClearedEnum || (exports.HybridTransactionClearedEnum = {}));
/**
 * If the transaction is a debt/loan account transaction, the type of transaction
 */
var HybridTransactionDebtTransactionTypeEnum;
(function (HybridTransactionDebtTransactionTypeEnum) {
    HybridTransactionDebtTransactionTypeEnum["Payment"] = "payment";
    HybridTransactionDebtTransactionTypeEnum["Refund"] = "refund";
    HybridTransactionDebtTransactionTypeEnum["Fee"] = "fee";
    HybridTransactionDebtTransactionTypeEnum["Interest"] = "interest";
    HybridTransactionDebtTransactionTypeEnum["Escrow"] = "escrow";
    HybridTransactionDebtTransactionTypeEnum["BalancedAdjustment"] = "balancedAdjustment";
    HybridTransactionDebtTransactionTypeEnum["Credit"] = "credit";
    HybridTransactionDebtTransactionTypeEnum["Charge"] = "charge";
    HybridTransactionDebtTransactionTypeEnum["Null"] = "null";
})(HybridTransactionDebtTransactionTypeEnum = exports.HybridTransactionDebtTransactionTypeEnum || (exports.HybridTransactionDebtTransactionTypeEnum = {}));
/**
 * The transaction flag
 */
var HybridTransactionFlagColorEnum;
(function (HybridTransactionFlagColorEnum) {
    HybridTransactionFlagColorEnum["Red"] = "red";
    HybridTransactionFlagColorEnum["Orange"] = "orange";
    HybridTransactionFlagColorEnum["Yellow"] = "yellow";
    HybridTransactionFlagColorEnum["Green"] = "green";
    HybridTransactionFlagColorEnum["Blue"] = "blue";
    HybridTransactionFlagColorEnum["Purple"] = "purple";
    HybridTransactionFlagColorEnum["Null"] = "null";
})(HybridTransactionFlagColorEnum = exports.HybridTransactionFlagColorEnum || (exports.HybridTransactionFlagColorEnum = {}));
/**
 * Whether the hybrid transaction represents a regular transaction or a subtransaction
 */
var HybridTransactionTypeEnum;
(function (HybridTransactionTypeEnum) {
    HybridTransactionTypeEnum["Transaction"] = "transaction";
    HybridTransactionTypeEnum["Subtransaction"] = "subtransaction";
})(HybridTransactionTypeEnum = exports.HybridTransactionTypeEnum || (exports.HybridTransactionTypeEnum = {}));
var HybridTransaction = /** @class */ (function (_super) {
    __extends(HybridTransaction, _super);
    function HybridTransaction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "account_id" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "accountId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "account_name" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "accountName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "amount" }),
        __metadata("design:type", Number)
    ], HybridTransaction.prototype, "amount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "approved" }),
        __metadata("design:type", Boolean)
    ], HybridTransaction.prototype, "approved", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "category_id" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "categoryId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "category_name" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "categoryName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cleared" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "cleared", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "date" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], HybridTransaction.prototype, "date", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "debt_transaction_type" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "debtTransactionType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "deleted" }),
        __metadata("design:type", Boolean)
    ], HybridTransaction.prototype, "deleted", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "flag_color" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "flagColor", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "import_id" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "importId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "import_payee_name" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "importPayeeName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "import_payee_name_original" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "importPayeeNameOriginal", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "matched_transaction_id" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "matchedTransactionId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "memo" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "memo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "parent_transaction_id" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "parentTransactionId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "payee_id" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "payeeId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "payee_name" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "payeeName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transfer_account_id" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "transferAccountId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transfer_transaction_id" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "transferTransactionId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], HybridTransaction.prototype, "type", void 0);
    return HybridTransaction;
}(utils_1.SpeakeasyBase));
exports.HybridTransaction = HybridTransaction;
