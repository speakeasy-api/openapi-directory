// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type IssuesCreateRequestBodyLabels2 struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	ID          *int64  `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
}

type IssuesCreateRequestBodyLabelsType string

const (
	IssuesCreateRequestBodyLabelsTypeStr                            IssuesCreateRequestBodyLabelsType = "str"
	IssuesCreateRequestBodyLabelsTypeIssuesCreateRequestBodyLabels2 IssuesCreateRequestBodyLabelsType = "issues/create_requestBody_labels_2"
)

type IssuesCreateRequestBodyLabels struct {
	Str                            *string
	IssuesCreateRequestBodyLabels2 *IssuesCreateRequestBodyLabels2

	Type IssuesCreateRequestBodyLabelsType
}

func CreateIssuesCreateRequestBodyLabelsStr(str string) IssuesCreateRequestBodyLabels {
	typ := IssuesCreateRequestBodyLabelsTypeStr

	return IssuesCreateRequestBodyLabels{
		Str:  &str,
		Type: typ,
	}
}

func CreateIssuesCreateRequestBodyLabelsIssuesCreateRequestBodyLabels2(issuesCreateRequestBodyLabels2 IssuesCreateRequestBodyLabels2) IssuesCreateRequestBodyLabels {
	typ := IssuesCreateRequestBodyLabelsTypeIssuesCreateRequestBodyLabels2

	return IssuesCreateRequestBodyLabels{
		IssuesCreateRequestBodyLabels2: &issuesCreateRequestBodyLabels2,
		Type:                           typ,
	}
}

func (u *IssuesCreateRequestBodyLabels) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = IssuesCreateRequestBodyLabelsTypeStr
		return nil
	}

	issuesCreateRequestBodyLabels2 := new(IssuesCreateRequestBodyLabels2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&issuesCreateRequestBodyLabels2); err == nil {
		u.IssuesCreateRequestBodyLabels2 = issuesCreateRequestBodyLabels2
		u.Type = IssuesCreateRequestBodyLabelsTypeIssuesCreateRequestBodyLabels2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IssuesCreateRequestBodyLabels) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.IssuesCreateRequestBodyLabels2 != nil {
		return json.Marshal(u.IssuesCreateRequestBodyLabels2)
	}

	return nil, nil
}

type IssuesCreateRequestBodyMilestoneType string

const (
	IssuesCreateRequestBodyMilestoneTypeStr     IssuesCreateRequestBodyMilestoneType = "str"
	IssuesCreateRequestBodyMilestoneTypeInteger IssuesCreateRequestBodyMilestoneType = "integer"
)

type IssuesCreateRequestBodyMilestone struct {
	Str     *string
	Integer *int64

	Type IssuesCreateRequestBodyMilestoneType
}

func CreateIssuesCreateRequestBodyMilestoneStr(str string) IssuesCreateRequestBodyMilestone {
	typ := IssuesCreateRequestBodyMilestoneTypeStr

	return IssuesCreateRequestBodyMilestone{
		Str:  &str,
		Type: typ,
	}
}

func CreateIssuesCreateRequestBodyMilestoneInteger(integer int64) IssuesCreateRequestBodyMilestone {
	typ := IssuesCreateRequestBodyMilestoneTypeInteger

	return IssuesCreateRequestBodyMilestone{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *IssuesCreateRequestBodyMilestone) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = IssuesCreateRequestBodyMilestoneTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = IssuesCreateRequestBodyMilestoneTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IssuesCreateRequestBodyMilestone) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

type IssuesCreateRequestBodyTitleType string

const (
	IssuesCreateRequestBodyTitleTypeStr     IssuesCreateRequestBodyTitleType = "str"
	IssuesCreateRequestBodyTitleTypeInteger IssuesCreateRequestBodyTitleType = "integer"
)

type IssuesCreateRequestBodyTitle struct {
	Str     *string
	Integer *int64

	Type IssuesCreateRequestBodyTitleType
}

func CreateIssuesCreateRequestBodyTitleStr(str string) IssuesCreateRequestBodyTitle {
	typ := IssuesCreateRequestBodyTitleTypeStr

	return IssuesCreateRequestBodyTitle{
		Str:  &str,
		Type: typ,
	}
}

func CreateIssuesCreateRequestBodyTitleInteger(integer int64) IssuesCreateRequestBodyTitle {
	typ := IssuesCreateRequestBodyTitleTypeInteger

	return IssuesCreateRequestBodyTitle{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *IssuesCreateRequestBodyTitle) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = IssuesCreateRequestBodyTitleTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = IssuesCreateRequestBodyTitleTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IssuesCreateRequestBodyTitle) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

type IssuesCreateRequestBody struct {
	// Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
	Assignee *string `json:"assignee,omitempty"`
	// Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
	Assignees []string `json:"assignees,omitempty"`
	// The contents of the issue.
	Body *string `json:"body,omitempty"`
	// Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
	Labels    []IssuesCreateRequestBodyLabels   `json:"labels,omitempty"`
	Milestone *IssuesCreateRequestBodyMilestone `json:"milestone,omitempty"`
	// The title of the issue.
	Title IssuesCreateRequestBodyTitle `json:"title"`
}

type IssuesCreateRequest struct {
	RequestBody IssuesCreateRequestBody `request:"mediaType=application/json"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

// IssuesCreate503ApplicationJSON - Service unavailable
type IssuesCreate503ApplicationJSON struct {
	Code             *string `json:"code,omitempty"`
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message          *string `json:"message,omitempty"`
}

type IssuesCreateResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Response
	Issue *shared.Issue
	// Service unavailable
	IssuesCreate503ApplicationJSONObject *IssuesCreate503ApplicationJSON
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
