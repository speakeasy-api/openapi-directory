"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Account:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_account_credential(self, request: shared.CredentialOptions, security: operations.CreateAccountCredentialSecurity) -> operations.CreateAccountCredentialResponse:
        r"""Create a new credential"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/credentials'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAccountCredentialResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Credential])
                res.credential = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def create_account_group(self, request: shared.GroupPost, security: operations.CreateAccountGroupSecurity) -> operations.CreateAccountGroupResponse:
        r"""Create a new group"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAccountGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def create_account_group_mapping(self, request: shared.GroupMapping, security: operations.CreateAccountGroupMappingSecurity) -> operations.CreateAccountGroupMappingResponse:
        r"""Create a new SSO group mapping"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/sso/groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAccountGroupMappingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def create_account_key(self, request: shared.APIKeyOptions, security: operations.CreateAccountKeySecurity) -> operations.CreateAccountKeyResponse:
        r"""Create a new key"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/keys'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAccountKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKey])
                res.api_key = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def create_account_organization(self, request: shared.OrgOptions, security: operations.CreateAccountOrganizationSecurity) -> operations.CreateAccountOrganizationResponse:
        r"""Create a new organization"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/orgs'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAccountOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Organization])
                res.organization = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def create_account_scan_template(self, request: shared.ScanTemplateOptions, security: operations.CreateAccountScanTemplateSecurity) -> operations.CreateAccountScanTemplateResponse:
        r"""Create a new scan template"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/tasks/templates'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAccountScanTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScanTemplate])
                res.scan_template = out
        elif http_res.status_code in [400, 401, 422]:
            pass

        return res

    def create_account_user(self, request: shared.UserOptions, security: operations.CreateAccountUserSecurity) -> operations.CreateAccountUserResponse:
        r"""Create a new user account"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/users'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAccountUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def create_account_user_invite(self, request: shared.UserInviteOptions, security: operations.CreateAccountUserInviteSecurity) -> operations.CreateAccountUserInviteResponse:
        r"""Create a new user account and send an email invite"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/users/invite'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAccountUserInviteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def delete_account_organization_export_token(self, request: operations.DeleteAccountOrganizationExportTokenRequest, security: operations.DeleteAccountOrganizationExportTokenSecurity) -> operations.DeleteAccountOrganizationExportTokenResponse:
        r"""Removes the export token from the specified organization"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAccountOrganizationExportTokenRequest, base_url, '/account/orgs/{org_id}/exportToken', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAccountOrganizationExportTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def export_events_json(self, request: operations.ExportEventsJSONRequest, security: operations.ExportEventsJSONSecurity) -> operations.ExportEventsJSONResponse:
        r"""System event log as JSON"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/events.json'
        
        query_params = utils.get_query_params(operations.ExportEventsJSONRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportEventsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Event]])
                res.events = out
        elif http_res.status_code == 401:
            pass

        return res

    def export_events_jsonl(self, request: operations.ExportEventsJSONLRequest, security: operations.ExportEventsJSONLSecurity) -> operations.ExportEventsJSONLResponse:
        r"""System event log as JSON line-delimited"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/events.jsonl'
        
        query_params = utils.get_query_params(operations.ExportEventsJSONLRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportEventsJSONLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Event]])
                res.events = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_account_agents(self, request: operations.GetAccountAgentsRequest, security: operations.GetAccountAgentsSecurity) -> operations.GetAccountAgentsResponse:
        r"""Get all agents across all organizations"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/agents'
        
        query_params = utils.get_query_params(operations.GetAccountAgentsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountAgentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Agent]])
                res.agents = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_account_credential(self, request: operations.GetAccountCredentialRequest, security: operations.GetAccountCredentialSecurity) -> operations.GetAccountCredentialResponse:
        r"""Get credential details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAccountCredentialRequest, base_url, '/account/credentials/{credential_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountCredentialResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Credential])
                res.credential = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def get_account_credentials(self, request: operations.GetAccountCredentialsRequest, security: operations.GetAccountCredentialsSecurity) -> operations.GetAccountCredentialsResponse:
        r"""Get all account credentials"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/credentials'
        
        query_params = utils.get_query_params(operations.GetAccountCredentialsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountCredentialsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Credential]])
                res.credentials = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_account_group(self, request: operations.GetAccountGroupRequest, security: operations.GetAccountGroupSecurity) -> operations.GetAccountGroupResponse:
        r"""Get group details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAccountGroupRequest, base_url, '/account/groups/{group_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def get_account_group_mapping(self, request: operations.GetAccountGroupMappingRequest, security: operations.GetAccountGroupMappingSecurity) -> operations.GetAccountGroupMappingResponse:
        r"""Get SSO group mapping details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAccountGroupMappingRequest, base_url, '/account/sso/groups/{group_mapping_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountGroupMappingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def get_account_group_mappings(self) -> operations.GetAccountGroupMappingsResponse:
        r"""Get all SSO group mappings"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/sso/groups'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountGroupMappingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def get_account_groups(self) -> operations.GetAccountGroupsResponse:
        r"""Get all groups"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/groups'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def get_account_key(self, request: operations.GetAccountKeyRequest, security: operations.GetAccountKeySecurity) -> operations.GetAccountKeyResponse:
        r"""Get key details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAccountKeyRequest, base_url, '/account/keys/{key_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def get_account_keys(self) -> operations.GetAccountKeysResponse:
        r"""Get all active API keys"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/keys'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.APIKey]])
                res.api_keys = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_account_license(self) -> operations.GetAccountLicenseResponse:
        r"""Get license details"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/license'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountLicenseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def get_account_organization(self, request: operations.GetAccountOrganizationRequest, security: operations.GetAccountOrganizationSecurity) -> operations.GetAccountOrganizationResponse:
        r"""Get organization details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAccountOrganizationRequest, base_url, '/account/orgs/{org_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def get_account_organizations(self, request: operations.GetAccountOrganizationsRequest, security: operations.GetAccountOrganizationsSecurity) -> operations.GetAccountOrganizationsResponse:
        r"""Get all organization details"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/orgs'
        
        query_params = utils.get_query_params(operations.GetAccountOrganizationsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountOrganizationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Organization]])
                res.organizations = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_account_scan_template(self, request: operations.GetAccountScanTemplateRequest, security: operations.GetAccountScanTemplateSecurity) -> operations.GetAccountScanTemplateResponse:
        r"""Get scan template details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAccountScanTemplateRequest, base_url, '/account/tasks/templates/{scan_template_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountScanTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScanTemplate])
                res.scan_template = out
        elif http_res.status_code in [401, 404, 422]:
            pass

        return res

    def get_account_scan_templates(self, request: operations.GetAccountScanTemplatesRequest, security: operations.GetAccountScanTemplatesSecurity) -> operations.GetAccountScanTemplatesResponse:
        r"""Get all scan templates across all organizations (up to 1000)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/tasks/templates'
        
        query_params = utils.get_query_params(operations.GetAccountScanTemplatesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountScanTemplatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ScanTemplate]])
                res.scan_templates = out
        elif http_res.status_code in [401, 422]:
            pass

        return res

    def get_account_sites(self, request: operations.GetAccountSitesRequest, security: operations.GetAccountSitesSecurity) -> operations.GetAccountSitesResponse:
        r"""Get all sites details across all organizations"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/sites'
        
        query_params = utils.get_query_params(operations.GetAccountSitesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountSitesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Site]])
                res.sites = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_account_tasks(self, request: operations.GetAccountTasksRequest, security: operations.GetAccountTasksSecurity) -> operations.GetAccountTasksResponse:
        r"""Get all task details across all organizations (up to 1000)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/tasks'
        
        query_params = utils.get_query_params(operations.GetAccountTasksRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountTasksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Task]])
                res.tasks = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_account_user(self, request: operations.GetAccountUserRequest, security: operations.GetAccountUserSecurity) -> operations.GetAccountUserResponse:
        r"""Get user details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAccountUserRequest, base_url, '/account/users/{user_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def get_account_users(self) -> operations.GetAccountUsersResponse:
        r"""Get all users"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/users'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.User]])
                res.users = out
        elif http_res.status_code == 401:
            pass

        return res

    def remove_account_credential(self, request: operations.RemoveAccountCredentialRequest, security: operations.RemoveAccountCredentialSecurity) -> operations.RemoveAccountCredentialResponse:
        r"""Remove this credential"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveAccountCredentialRequest, base_url, '/account/credentials/{credential_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveAccountCredentialResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def remove_account_group(self, request: operations.RemoveAccountGroupRequest, security: operations.RemoveAccountGroupSecurity) -> operations.RemoveAccountGroupResponse:
        r"""Remove this group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveAccountGroupRequest, base_url, '/account/groups/{group_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveAccountGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def remove_account_group_mapping(self, request: operations.RemoveAccountGroupMappingRequest, security: operations.RemoveAccountGroupMappingSecurity) -> operations.RemoveAccountGroupMappingResponse:
        r"""Remove this SSO group mapping"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveAccountGroupMappingRequest, base_url, '/account/sso/groups/{group_mapping_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveAccountGroupMappingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def remove_account_key(self, request: operations.RemoveAccountKeyRequest, security: operations.RemoveAccountKeySecurity) -> operations.RemoveAccountKeyResponse:
        r"""Remove this key"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveAccountKeyRequest, base_url, '/account/keys/{key_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveAccountKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def remove_account_organization(self, request: operations.RemoveAccountOrganizationRequest, security: operations.RemoveAccountOrganizationSecurity) -> operations.RemoveAccountOrganizationResponse:
        r"""Remove this organization"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveAccountOrganizationRequest, base_url, '/account/orgs/{org_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveAccountOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def remove_account_scan_template(self, request: operations.RemoveAccountScanTemplateRequest, security: operations.RemoveAccountScanTemplateSecurity) -> operations.RemoveAccountScanTemplateResponse:
        r"""Remove scan template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveAccountScanTemplateRequest, base_url, '/account/tasks/templates/{scan_template_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveAccountScanTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScanTemplate])
                res.scan_template = out
        elif http_res.status_code in [401, 404, 422]:
            pass

        return res

    def remove_account_user(self, request: operations.RemoveAccountUserRequest, security: operations.RemoveAccountUserSecurity) -> operations.RemoveAccountUserResponse:
        r"""Remove this user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveAccountUserRequest, base_url, '/account/users/{user_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveAccountUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reset_account_user_lockout(self, request: operations.ResetAccountUserLockoutRequest, security: operations.ResetAccountUserLockoutSecurity) -> operations.ResetAccountUserLockoutResponse:
        r"""Resets the user's lockout status"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ResetAccountUserLockoutRequest, base_url, '/account/users/{user_id}/resetLockout', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetAccountUserLockoutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def reset_account_user_mfa(self, request: operations.ResetAccountUserMFARequest, security: operations.ResetAccountUserMFASecurity) -> operations.ResetAccountUserMFAResponse:
        r"""Resets the user's MFA tokens"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ResetAccountUserMFARequest, base_url, '/account/users/{user_id}/resetMFA', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetAccountUserMFAResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def reset_account_user_password(self, request: operations.ResetAccountUserPasswordRequest, security: operations.ResetAccountUserPasswordSecurity) -> operations.ResetAccountUserPasswordResponse:
        r"""Sends the user a password reset email"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ResetAccountUserPasswordRequest, base_url, '/account/users/{user_id}/resetPassword', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetAccountUserPasswordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def rotate_account_key(self, request: operations.RotateAccountKeyRequest, security: operations.RotateAccountKeySecurity) -> operations.RotateAccountKeyResponse:
        r"""Rotates the key secret"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RotateAccountKeyRequest, base_url, '/account/keys/{key_id}/rotate', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RotateAccountKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKey])
                res.api_key = out
        elif http_res.status_code == 401:
            pass

        return res

    def rotate_account_organization_export_token(self, request: operations.RotateAccountOrganizationExportTokenRequest, security: operations.RotateAccountOrganizationExportTokenSecurity) -> operations.RotateAccountOrganizationExportTokenResponse:
        r"""Rotates the organization export token and returns the updated organization"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RotateAccountOrganizationExportTokenRequest, base_url, '/account/orgs/{org_id}/exportToken/rotate', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RotateAccountOrganizationExportTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Organization])
                res.organization = out
        elif http_res.status_code == 401:
            pass

        return res

    def update_account_group(self, request: shared.GroupPut, security: operations.UpdateAccountGroupSecurity) -> operations.UpdateAccountGroupResponse:
        r"""Update an existing group"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAccountGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def update_account_group_mapping(self, request: shared.GroupMapping, security: operations.UpdateAccountGroupMappingSecurity) -> operations.UpdateAccountGroupMappingResponse:
        r"""Update an existing SSO group mapping"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/sso/groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAccountGroupMappingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def update_account_organization(self, request: operations.UpdateAccountOrganizationRequest, security: operations.UpdateAccountOrganizationSecurity) -> operations.UpdateAccountOrganizationResponse:
        r"""Update organization details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateAccountOrganizationRequest, base_url, '/account/orgs/{org_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "org_options", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAccountOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Organization])
                res.organization = out
        elif http_res.status_code == 401:
            pass

        return res

    def update_account_scan_template(self, request: shared.ScanTemplate, security: operations.UpdateAccountScanTemplateSecurity) -> operations.UpdateAccountScanTemplateResponse:
        r"""Update scan template"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/tasks/templates'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAccountScanTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScanTemplate])
                res.scan_template = out
        elif http_res.status_code in [400, 401, 404, 422]:
            pass

        return res

    def update_account_user(self, request: operations.UpdateAccountUserRequest, security: operations.UpdateAccountUserSecurity) -> operations.UpdateAccountUserResponse:
        r"""Update a user's details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateAccountUserRequest, base_url, '/account/users/{user_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_options", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAccountUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    