/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * TaskSet - Information about a set of Amazon ECS tasks in either an CodeDeploy or an &lt;code&gt;EXTERNAL&lt;/code&gt; deployment. An Amazon ECS task set includes details such as the desired number of tasks, how many tasks are running, and whether the task set serves production traffic.
 */
public class TaskSet {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capacityProviderStrategy")
    public CapacityProviderStrategyItem[] capacityProviderStrategy;
    public TaskSet withCapacityProviderStrategy(CapacityProviderStrategyItem[] capacityProviderStrategy) {
        this.capacityProviderStrategy = capacityProviderStrategy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clusterArn")
    public String clusterArn;
    public TaskSet withClusterArn(String clusterArn) {
        this.clusterArn = clusterArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("computedDesiredCount")
    public Long computedDesiredCount;
    public TaskSet withComputedDesiredCount(Long computedDesiredCount) {
        this.computedDesiredCount = computedDesiredCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;
    public TaskSet withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalId")
    public String externalId;
    public TaskSet withExternalId(String externalId) {
        this.externalId = externalId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public TaskSet withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("launchType")
    public LaunchTypeEnum launchType;
    public TaskSet withLaunchType(LaunchTypeEnum launchType) {
        this.launchType = launchType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loadBalancers")
    public LoadBalancer[] loadBalancers;
    public TaskSet withLoadBalancers(LoadBalancer[] loadBalancers) {
        this.loadBalancers = loadBalancers;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkConfiguration")
    public NetworkConfiguration networkConfiguration;
    public TaskSet withNetworkConfiguration(NetworkConfiguration networkConfiguration) {
        this.networkConfiguration = networkConfiguration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingCount")
    public Long pendingCount;
    public TaskSet withPendingCount(Long pendingCount) {
        this.pendingCount = pendingCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platformFamily")
    public String platformFamily;
    public TaskSet withPlatformFamily(String platformFamily) {
        this.platformFamily = platformFamily;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platformVersion")
    public String platformVersion;
    public TaskSet withPlatformVersion(String platformVersion) {
        this.platformVersion = platformVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runningCount")
    public Long runningCount;
    public TaskSet withRunningCount(Long runningCount) {
        this.runningCount = runningCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scale")
    public Scale scale;
    public TaskSet withScale(Scale scale) {
        this.scale = scale;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceArn")
    public String serviceArn;
    public TaskSet withServiceArn(String serviceArn) {
        this.serviceArn = serviceArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceRegistries")
    public ServiceRegistry[] serviceRegistries;
    public TaskSet withServiceRegistries(ServiceRegistry[] serviceRegistries) {
        this.serviceRegistries = serviceRegistries;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stabilityStatus")
    public StabilityStatusEnum stabilityStatus;
    public TaskSet withStabilityStatus(StabilityStatusEnum stabilityStatus) {
        this.stabilityStatus = stabilityStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("stabilityStatusAt")
    public OffsetDateTime stabilityStatusAt;
    public TaskSet withStabilityStatusAt(OffsetDateTime stabilityStatusAt) {
        this.stabilityStatusAt = stabilityStatusAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startedBy")
    public String startedBy;
    public TaskSet withStartedBy(String startedBy) {
        this.startedBy = startedBy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public TaskSet withStatus(String status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public Tag[] tags;
    public TaskSet withTags(Tag[] tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskDefinition")
    public String taskDefinition;
    public TaskSet withTaskDefinition(String taskDefinition) {
        this.taskDefinition = taskDefinition;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskSetArn")
    public String taskSetArn;
    public TaskSet withTaskSetArn(String taskSetArn) {
        this.taskSetArn = taskSetArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedAt")
    public OffsetDateTime updatedAt;
    public TaskSet withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
