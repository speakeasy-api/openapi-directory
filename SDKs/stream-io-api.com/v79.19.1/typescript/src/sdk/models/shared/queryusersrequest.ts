/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SortParam } from "./sortparam";
import { Expose, Type } from "class-transformer";

export class QueryUsersRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "client_id" })
  clientId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "connection_id" })
  connectionId?: string;

  /**
   * User filters
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filter_conditions" })
  filterConditions: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "id_gt" })
  idGt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id_gte" })
  idGte?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id_lt" })
  idLt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id_lte" })
  idLte?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "limit" })
  limit?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "offset" })
  offset?: number;

  /**
   * Request user presence status
   */
  @SpeakeasyMetadata()
  @Expose({ name: "presence" })
  presence?: boolean;

  /**
   * Array of sort parameters
   */
  @SpeakeasyMetadata({ elemType: SortParam })
  @Expose({ name: "sort" })
  @Type(() => SortParam)
  sort: SortParam[];

  /**
   * Represents chat user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  user?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "user_id" })
  userId?: string;
}
