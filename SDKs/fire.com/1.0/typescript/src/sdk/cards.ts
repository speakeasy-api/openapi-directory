/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Cards {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Block a card
   *
   * @remarks
   * Updates status of an existing card to block which prevents any transactions being carried out with that card.
   */
  blockCard(
    req: operations.BlockCardRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.BlockCardResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BlockCardRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/cards/{cardId}/block",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BlockCardResponse =
        new operations.BlockCardResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Create a new debit card.
   *
   * @remarks
   * You can create multiple debit cards which can be linked to your fire.com accounts.
   */
  createNewCard(
    req: operations.CreateNewCardNewCard,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateNewCardResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateNewCardNewCard(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/cards";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateNewCardResponse =
        new operations.CreateNewCardResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.newCardResponse = utils.objectToClass(
              httpRes?.data,
              operations.CreateNewCardNewCardResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Card Transactions.
   *
   * @remarks
   * Returns a list of cards transactions related to your fire.com card.
   */
  getListofCardTransactions(
    req: operations.GetListofCardTransactionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListofCardTransactionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListofCardTransactionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/cards/{cardId}/transactions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListofCardTransactionsResponse =
        new operations.GetListofCardTransactionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cardTransactionsv1s = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.cardTransactionsv1s = utils.objectToClass(
              httpRes?.data,
              operations.GetListofCardTransactionsCardTransactionsv1,
              resFieldDepth
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * View List of Cards.
   *
   * @remarks
   * Returns a list of cards related to your fire.com account.
   */
  getListofCards(
    config?: AxiosRequestConfig
  ): Promise<operations.GetListofCardsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/cards";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListofCardsResponse =
        new operations.GetListofCardsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cards = utils.objectToClass(
              httpRes?.data,
              operations.GetListofCardsCards
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Unblock a card
   *
   * @remarks
   * Updates status of an existing card to unblock which means that transactions can be carried out with that card.
   */
  unblockCard(
    req: operations.UnblockCardRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UnblockCardResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UnblockCardRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/cards/{cardId}/unblock",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UnblockCardResponse =
        new operations.UnblockCardResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }
}
