"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import recommendationsourcetype_enum as shared_recommendationsourcetype_enum
from ..shared import recommendationtriggerdata as shared_recommendationtriggerdata
from ..shared import recommendationtriggertype_enum as shared_recommendationtriggertype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecommendationTrigger:
    r"""A recommendation trigger provides context on the event that produced the referenced recommendations. Recommendations are only referenced in <code>recommendationIds</code> by a single RecommendationTrigger."""
    
    data: shared_recommendationtriggerdata.RecommendationTriggerData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    recommendation_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommendationIds') }})  
    source: shared_recommendationsourcetype_enum.RecommendationSourceTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source') }})  
    type: shared_recommendationtriggertype_enum.RecommendationTriggerTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    