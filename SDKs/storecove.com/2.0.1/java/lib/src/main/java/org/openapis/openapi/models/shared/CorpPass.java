/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CorpPass {
    /**
     * The URL the CorpPass system will redirect to in case of a failure to perform identity verfication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_redirect_fail_url")public String clientRedirectFailUrl;
    public CorpPass withClientRedirectFailUrl(String clientRedirectFailUrl) {
        this.clientRedirectFailUrl = clientRedirectFailUrl;
        return this;
    }
    
    /**
     * The URL the CorpPass system will redirect to in case of successful identity verfication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_redirect_success_url")public String clientRedirectSuccessUrl;
    public CorpPass withClientRedirectSuccessUrl(String clientRedirectSuccessUrl) {
        this.clientRedirectSuccessUrl = clientRedirectSuccessUrl;
        return this;
    }
    
    /**
     * The CorpPass redirect URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("corppass_url")public String corppassUrl;
    public CorpPass withCorppassUrl(String corppassUrl) {
        this.corppassUrl = corppassUrl;
        return this;
    }
    
    /**
     * Whether or not the CorpPass flow is enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")public Boolean enabled;
    public CorpPass withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * The CorpPass flow type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flow_type")public CorpPassFlowTypeEnum flowType;
    public CorpPass withFlowType(CorpPassFlowTypeEnum flowType) {
        this.flowType = flowType;
        return this;
    }
    
    /**
     * The email of the person who is going to perform the CorpPass process.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signer_email")public String signerEmail;
    public CorpPass withSignerEmail(String signerEmail) {
        this.signerEmail = signerEmail;
        return this;
    }
    
    /**
     * The name of the person who is going to perform the CorpPass process.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signer_name")public String signerName;
    public CorpPass withSignerName(String signerName) {
        this.signerName = signerName;
        return this;
    }
    
    /**
     * Whether or not CorpPass is being simulated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("simulate_corppass")public Boolean simulateCorppass;
    public CorpPass withSimulateCorppass(Boolean simulateCorppass) {
        this.simulateCorppass = simulateCorppass;
        return this;
    }
    
    /**
     * The status of the CorpPass process.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")public CorpPassCorpPassStatusEnum status;
    public CorpPass withStatus(CorpPassCorpPassStatusEnum status) {
        this.status = status;
        return this;
    }
    
}
