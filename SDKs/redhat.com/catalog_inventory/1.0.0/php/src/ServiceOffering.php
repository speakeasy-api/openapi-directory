<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ServiceOffering 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Invokes computing of ServiceInventories tags for given ServiceOffering
     * 
     * Returns an array of inventories tags
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppliedInventoriesTagsForServiceOfferingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppliedInventoriesTagsForServiceOfferingResponse
     */
	public function appliedInventoriesTagsForServiceOffering(
        \OpenAPI\OpenAPI\Models\Operations\AppliedInventoriesTagsForServiceOfferingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppliedInventoriesTagsForServiceOfferingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/service_offerings/{id}/applied_inventories_tags', \OpenAPI\OpenAPI\Models\Operations\AppliedInventoriesTagsForServiceOfferingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "appliedInventoriesParametersServicePlan", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppliedInventoriesTagsForServiceOfferingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tags = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Tag>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * List ServiceInstances for ServiceOffering
     * 
     * Returns an array of ServiceInstance objects
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServiceInstancesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServiceInstancesResponse
     */
	public function listServiceOfferingServiceInstances(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServiceInstancesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServiceInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/service_offerings/{id}/service_instances', \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServiceInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServiceInstancesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServiceInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceInstancesCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceInstancesCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorNotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List ServiceOfferingNodes for ServiceOffering
     * 
     * Returns an array of ServiceOfferingNode objects
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServiceOfferingNodesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServiceOfferingNodesResponse
     */
	public function listServiceOfferingServiceOfferingNodes(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServiceOfferingNodesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServiceOfferingNodesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/service_offerings/{id}/service_offering_nodes', \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServiceOfferingNodesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServiceOfferingNodesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServiceOfferingNodesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceOfferingNodesCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceOfferingNodesCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorNotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List ServicePlans for ServiceOffering
     * 
     * Returns an array of ServicePlan objects
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServicePlansRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServicePlansResponse
     */
	public function listServiceOfferingServicePlans(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServicePlansRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServicePlansResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/service_offerings/{id}/service_plans', \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServicePlansRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServicePlansRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingServicePlansResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->servicePlansCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServicePlansCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorNotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List ServiceOfferings
     * 
     * Returns an array of ServiceOffering objects
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingsResponse
     */
	public function listServiceOfferings(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/service_offerings');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceOfferingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceOfferingsCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceOfferingsCollection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Order an existing ServiceOffering
     * 
     * Returns a Task id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderServiceOfferingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderServiceOfferingResponse
     */
	public function orderServiceOffering(
        \OpenAPI\OpenAPI\Models\Operations\OrderServiceOfferingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderServiceOfferingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/service_offerings/{id}/order', \OpenAPI\OpenAPI\Models\Operations\OrderServiceOfferingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "orderParametersServiceOfferingInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderServiceOfferingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderServiceOffering200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OrderServiceOffering200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show an existing ServiceOffering
     * 
     * Returns a ServiceOffering object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ShowServiceOfferingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ShowServiceOfferingResponse
     */
	public function showServiceOffering(
        \OpenAPI\OpenAPI\Models\Operations\ShowServiceOfferingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ShowServiceOfferingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/service_offerings/{id}', \OpenAPI\OpenAPI\Models\Operations\ShowServiceOfferingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ShowServiceOfferingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceOffering = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceOffering', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorNotFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorNotFound', 'json');
            }
        }

        return $response;
    }
}