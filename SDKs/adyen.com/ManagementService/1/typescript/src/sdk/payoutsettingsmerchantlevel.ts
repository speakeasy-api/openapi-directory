/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class PayoutSettingsMerchantLevel {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a payout setting
   *
   * @remarks
   * Deletes the payout setting identified in the path.
   *
   * Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   *
   * * Management API—Payout account settings read and write
   */
  deleteMerchantsMerchantIdPayoutSettingsPayoutSettingsId(
    req: operations.DeleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdRequest,
    security: operations.DeleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/payoutSettings/{payoutSettingsId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DeleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse =
        new operations.DeleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of payout settings
   *
   * @remarks
   * Returns the list of payout settings for the merchant account identified in the path.
   *
   * Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Payout account settings read
   */
  getMerchantsMerchantIdPayoutSettings(
    req: operations.GetMerchantsMerchantIdPayoutSettingsRequest,
    security: operations.GetMerchantsMerchantIdPayoutSettingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMerchantsMerchantIdPayoutSettingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMerchantsMerchantIdPayoutSettingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/payoutSettings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMerchantsMerchantIdPayoutSettingsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMerchantsMerchantIdPayoutSettingsResponse =
        new operations.GetMerchantsMerchantIdPayoutSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.payoutSettingsResponse = utils.objectToClass(
              httpRes?.data,
              shared.PayoutSettingsResponse
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a payout setting
   *
   * @remarks
   * Returns the payout setting identified in the path.
   *
   * Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   * * Management API—Payout account settings read
   */
  getMerchantsMerchantIdPayoutSettingsPayoutSettingsId(
    req: operations.GetMerchantsMerchantIdPayoutSettingsPayoutSettingsIdRequest,
    security: operations.GetMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetMerchantsMerchantIdPayoutSettingsPayoutSettingsIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/payoutSettings/{payoutSettingsId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse =
        new operations.GetMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.payoutSettings = utils.objectToClass(
              httpRes?.data,
              shared.PayoutSettings
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a payout setting
   *
   * @remarks
   * Updates the payout setting identified in the path. You can enable or disable the payout setting.
   *
   * Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   *
   * * Management API—Payout account settings read and write
   */
  patchMerchantsMerchantIdPayoutSettingsPayoutSettingsId(
    req: operations.PatchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdRequest,
    security: operations.PatchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PatchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/payoutSettings/{payoutSettingsId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updatePayoutSettingsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PatchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse =
        new operations.PatchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.payoutSettings = utils.objectToClass(
              httpRes?.data,
              shared.PayoutSettings
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add a payout setting
   *
   * @remarks
   * Sends a request to add a payout setting for the merchant account specified in the path. A payout setting links the merchant account to the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments) that contains the details of the payout bank account. Adyen verifies the bank account before allowing and enabling the payout setting.
   *
   * If you're accepting payments in multiple currencies, you may add multiple payout settings for the merchant account.
   *
   * Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
   *
   * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
   *
   * * Management API—Payout account settings read and write
   */
  postMerchantsMerchantIdPayoutSettings(
    req: operations.PostMerchantsMerchantIdPayoutSettingsRequest,
    security: operations.PostMerchantsMerchantIdPayoutSettingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostMerchantsMerchantIdPayoutSettingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostMerchantsMerchantIdPayoutSettingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/merchants/{merchantId}/payoutSettings",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "payoutSettingsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostMerchantsMerchantIdPayoutSettingsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostMerchantsMerchantIdPayoutSettingsResponse =
        new operations.PostMerchantsMerchantIdPayoutSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.payoutSettings = utils.objectToClass(
              httpRes?.data,
              shared.PayoutSettings
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }
}
