"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import clientinfo as shared_clientinfo
from ..shared import environmentmatrix as shared_environmentmatrix
from ..shared import resultstorage as shared_resultstorage
from ..shared import testexecution as shared_testexecution
from ..shared import testspecification as shared_testspecification
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TestMatrixInvalidMatrixDetailsEnum(str, Enum):
    r"""Output only. Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state."""
    INVALID_MATRIX_DETAILS_UNSPECIFIED = 'INVALID_MATRIX_DETAILS_UNSPECIFIED'
    DETAILS_UNAVAILABLE = 'DETAILS_UNAVAILABLE'
    MALFORMED_APK = 'MALFORMED_APK'
    MALFORMED_TEST_APK = 'MALFORMED_TEST_APK'
    NO_MANIFEST = 'NO_MANIFEST'
    NO_PACKAGE_NAME = 'NO_PACKAGE_NAME'
    INVALID_PACKAGE_NAME = 'INVALID_PACKAGE_NAME'
    TEST_SAME_AS_APP = 'TEST_SAME_AS_APP'
    NO_INSTRUMENTATION = 'NO_INSTRUMENTATION'
    NO_SIGNATURE = 'NO_SIGNATURE'
    INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE = 'INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE'
    NO_TEST_RUNNER_CLASS = 'NO_TEST_RUNNER_CLASS'
    NO_LAUNCHER_ACTIVITY = 'NO_LAUNCHER_ACTIVITY'
    FORBIDDEN_PERMISSIONS = 'FORBIDDEN_PERMISSIONS'
    INVALID_ROBO_DIRECTIVES = 'INVALID_ROBO_DIRECTIVES'
    INVALID_RESOURCE_NAME = 'INVALID_RESOURCE_NAME'
    INVALID_DIRECTIVE_ACTION = 'INVALID_DIRECTIVE_ACTION'
    TEST_LOOP_INTENT_FILTER_NOT_FOUND = 'TEST_LOOP_INTENT_FILTER_NOT_FOUND'
    SCENARIO_LABEL_NOT_DECLARED = 'SCENARIO_LABEL_NOT_DECLARED'
    SCENARIO_LABEL_MALFORMED = 'SCENARIO_LABEL_MALFORMED'
    SCENARIO_NOT_DECLARED = 'SCENARIO_NOT_DECLARED'
    DEVICE_ADMIN_RECEIVER = 'DEVICE_ADMIN_RECEIVER'
    MALFORMED_XC_TEST_ZIP = 'MALFORMED_XC_TEST_ZIP'
    BUILT_FOR_IOS_SIMULATOR = 'BUILT_FOR_IOS_SIMULATOR'
    NO_TESTS_IN_XC_TEST_ZIP = 'NO_TESTS_IN_XC_TEST_ZIP'
    USE_DESTINATION_ARTIFACTS = 'USE_DESTINATION_ARTIFACTS'
    TEST_NOT_APP_HOSTED = 'TEST_NOT_APP_HOSTED'
    PLIST_CANNOT_BE_PARSED = 'PLIST_CANNOT_BE_PARSED'
    TEST_ONLY_APK = 'TEST_ONLY_APK'
    MALFORMED_IPA = 'MALFORMED_IPA'
    MISSING_URL_SCHEME = 'MISSING_URL_SCHEME'
    MALFORMED_APP_BUNDLE = 'MALFORMED_APP_BUNDLE'
    NO_CODE_APK = 'NO_CODE_APK'
    INVALID_INPUT_APK = 'INVALID_INPUT_APK'
    INVALID_APK_PREVIEW_SDK = 'INVALID_APK_PREVIEW_SDK'
    MATRIX_TOO_LARGE = 'MATRIX_TOO_LARGE'
    TEST_QUOTA_EXCEEDED = 'TEST_QUOTA_EXCEEDED'
    SERVICE_NOT_ACTIVATED = 'SERVICE_NOT_ACTIVATED'
    UNKNOWN_PERMISSION_ERROR = 'UNKNOWN_PERMISSION_ERROR'

class TestMatrixOutcomeSummaryEnum(str, Enum):
    r"""Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED."""
    OUTCOME_SUMMARY_UNSPECIFIED = 'OUTCOME_SUMMARY_UNSPECIFIED'
    SUCCESS = 'SUCCESS'
    FAILURE = 'FAILURE'
    INCONCLUSIVE = 'INCONCLUSIVE'
    SKIPPED = 'SKIPPED'

class TestMatrixStateEnum(str, Enum):
    r"""Output only. Indicates the current progress of the test matrix."""
    TEST_STATE_UNSPECIFIED = 'TEST_STATE_UNSPECIFIED'
    VALIDATING = 'VALIDATING'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    FINISHED = 'FINISHED'
    ERROR = 'ERROR'
    UNSUPPORTED_ENVIRONMENT = 'UNSUPPORTED_ENVIRONMENT'
    INCOMPATIBLE_ENVIRONMENT = 'INCOMPATIBLE_ENVIRONMENT'
    INCOMPATIBLE_ARCHITECTURE = 'INCOMPATIBLE_ARCHITECTURE'
    CANCELLED = 'CANCELLED'
    INVALID = 'INVALID'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestMatrix:
    r"""TestMatrix captures all details about a test. It contains the environment configuration, test specification, test executions and overall state and outcome."""
    
    client_info: Optional[shared_clientinfo.ClientInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientInfo'), 'exclude': lambda f: f is None }})
    r"""Information about the client which invoked the test."""  
    environment_matrix: Optional[shared_environmentmatrix.EnvironmentMatrix] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentMatrix'), 'exclude': lambda f: f is None }})
    r"""The matrix of environments in which the test is to be executed."""  
    fail_fast: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failFast'), 'exclude': lambda f: f is None }})
    r"""If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation."""  
    flaky_test_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flakyTestAttempts'), 'exclude': lambda f: f is None }})
    r"""The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns."""  
    invalid_matrix_details: Optional[TestMatrixInvalidMatrixDetailsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invalidMatrixDetails'), 'exclude': lambda f: f is None }})
    r"""Output only. Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state."""  
    outcome_summary: Optional[TestMatrixOutcomeSummaryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outcomeSummary'), 'exclude': lambda f: f is None }})
    r"""Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED."""  
    project_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectId'), 'exclude': lambda f: f is None }})
    r"""The cloud project that owns the test matrix."""  
    result_storage: Optional[shared_resultstorage.ResultStorage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resultStorage'), 'exclude': lambda f: f is None }})
    r"""Locations where the results of running the test are stored."""  
    state: Optional[TestMatrixStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. Indicates the current progress of the test matrix."""  
    test_executions: Optional[list[shared_testexecution.TestExecution]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testExecutions'), 'exclude': lambda f: f is None }})
    r"""Output only. The list of test executions that the service creates for this matrix."""  
    test_matrix_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testMatrixId'), 'exclude': lambda f: f is None }})
    r"""Output only. Unique id set by the service."""  
    test_specification: Optional[shared_testspecification.TestSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testSpecification'), 'exclude': lambda f: f is None }})
    r"""A description of how to run the test."""  
    timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})
    r"""Output only. The time this test matrix was initially created."""  
    