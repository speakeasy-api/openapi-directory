// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostAPIV1DonationsCreateSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

// PostAPIV1DonationsCreateFundingSourceEnum - Source of the donation funds. If you are collecting payment from your customer for the donation, use `customer`.
type PostAPIV1DonationsCreateFundingSourceEnum string

const (
	PostAPIV1DonationsCreateFundingSourceEnumMerchant PostAPIV1DonationsCreateFundingSourceEnum = "merchant"
	PostAPIV1DonationsCreateFundingSourceEnumCustomer PostAPIV1DonationsCreateFundingSourceEnum = "customer"
)

func (e *PostAPIV1DonationsCreateFundingSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "merchant":
		fallthrough
	case "customer":
		*e = PostAPIV1DonationsCreateFundingSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAPIV1DonationsCreateFundingSourceEnum: %s", s)
	}
}

type PostAPIV1DonationsCreateRequest struct {
	// The amount of the donation in cents.
	Amount string `queryParam:"style=form,explode=true,name=amount"`
	// Source of the donation funds. If you are collecting payment from your customer for the donation, use `customer`.
	FundingSource PostAPIV1DonationsCreateFundingSourceEnum `queryParam:"style=form,explode=true,name=funding_source"`
	// The id of a nonprofit from the CHANGE network.
	NonprofitID string `queryParam:"style=form,explode=true,name=nonprofit_id"`
	// The customer's zip code. Provide this to unlock geographic insights.
	ZipCode *string `queryParam:"style=form,explode=true,name=zip_code"`
}

type PostAPIV1DonationsCreateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
