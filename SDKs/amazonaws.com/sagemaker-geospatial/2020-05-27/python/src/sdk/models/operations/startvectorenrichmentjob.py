"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import mapmatchingconfig as shared_mapmatchingconfig
from ..shared import reversegeocodingconfig as shared_reversegeocodingconfig
from ..shared import startvectorenrichmentjoboutput as shared_startvectorenrichmentjoboutput
from ..shared import vectorenrichmentjobdatasourceconfiginput as shared_vectorenrichmentjobdatasourceconfiginput
from ..shared import vectorenrichmentjobdocumenttype_enum as shared_vectorenrichmentjobdocumenttype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartVectorEnrichmentJobRequestBodyInputConfig:
    r"""The input structure for the InputConfig in a VectorEnrichmentJob."""
    
    data_source_config: Optional[shared_vectorenrichmentjobdatasourceconfiginput.VectorEnrichmentJobDataSourceConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataSourceConfig'), 'exclude': lambda f: f is None }})  
    document_type: Optional[shared_vectorenrichmentjobdocumenttype_enum.VectorEnrichmentJobDocumentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DocumentType'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartVectorEnrichmentJobRequestBodyJobConfig:
    r"""It contains configs such as ReverseGeocodingConfig and MapMatchingConfig."""
    
    map_matching_config: Optional[shared_mapmatchingconfig.MapMatchingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MapMatchingConfig'), 'exclude': lambda f: f is None }})  
    reverse_geocoding_config: Optional[shared_reversegeocodingconfig.ReverseGeocodingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReverseGeocodingConfig'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartVectorEnrichmentJobRequestBody:
    
    execution_role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecutionRoleArn') }})
    r"""The Amazon Resource Name (ARN) of the IAM role that you specified for the job."""  
    input_config: StartVectorEnrichmentJobRequestBodyInputConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputConfig') }})
    r"""The input structure for the InputConfig in a VectorEnrichmentJob."""  
    job_config: StartVectorEnrichmentJobRequestBodyJobConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobConfig') }})
    r"""It contains configs such as ReverseGeocodingConfig and MapMatchingConfig."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""The name of the Vector Enrichment job."""  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientToken'), 'exclude': lambda f: f is None }})
    r"""A unique token that guarantees that the call to this API is idempotent."""  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})
    r"""The Amazon Key Management Service (KMS) key ID for server-side encryption."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})
    r"""Each tag consists of a key and a value."""  
    

@dataclasses.dataclass
class StartVectorEnrichmentJobRequest:
    
    request_body: StartVectorEnrichmentJobRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class StartVectorEnrichmentJobResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    start_vector_enrichment_job_output: Optional[shared_startvectorenrichmentjoboutput.StartVectorEnrichmentJobOutput] = dataclasses.field(default=None)
    r"""Success"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    