"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class APIs:
    r"""Actions relating to APIs in the collection"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_metrics(self) -> operations.GetMetricsResponse:
        r"""Get basic metrics
        Some basic metrics for the entire directory.
        Just stunning numbers to put on a front page and are intended purely for WoW effect :)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/metrics.json'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMetricsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Metrics])
                res.metrics = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Metrics])
                res.metrics = out

        return res

    def list_ap_is(self) -> operations.ListAPIsResponse:
        r"""List all APIs
        List all APIs in the directory.
        Returns links to OpenAPI specification for each API in the directory.
        If API exist in multiple versions `preferred` one is explicitly marked.
        
        Some basic info from OpenAPI spec is cached inside each object.
        This allows to generate some simple views without need to fetch OpenAPI spec for each API.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/list.json'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAPIsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, shared.API]])
                res.ap_is = out
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, shared.API]])
                res.ap_is = out

        return res

    