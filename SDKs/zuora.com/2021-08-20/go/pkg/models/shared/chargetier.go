// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ChargeTierPriceFormatEnum - Specifies whether the tier has a fixed price or a per-unit price.
type ChargeTierPriceFormatEnum string

const (
	ChargeTierPriceFormatEnumFlatFee ChargeTierPriceFormatEnum = "FlatFee"
	ChargeTierPriceFormatEnumPerUnit ChargeTierPriceFormatEnum = "PerUnit"
)

func (e *ChargeTierPriceFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FlatFee":
		fallthrough
	case "PerUnit":
		*e = ChargeTierPriceFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargeTierPriceFormatEnum: %s", s)
	}
}

type ChargeTier struct {
	// Limit on the number of units for which the tier is effective.
	//
	EndingUnit *float64 `json:"endingUnit,omitempty"`
	// Price or per-unit price of the tier, depending on the value of the `priceFormat` field.
	//
	Price float64 `json:"price"`
	// Specifies whether the tier has a fixed price or a per-unit price.
	//
	PriceFormat ChargeTierPriceFormatEnum `json:"priceFormat"`
	// Number of units at which the tier becomes effective.
	//
	StartingUnit float64 `json:"startingUnit"`
	// Index of the tier in the charge.
	//
	Tier int64 `json:"tier"`
}
