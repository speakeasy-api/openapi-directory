"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RangeTypeEnum(str, Enum):
    r"""The type of range."""
    RANGE_TYPE_UNSPECIFIED = 'RANGE_TYPE_UNSPECIFIED'
    FIXED_RANGE = 'FIXED_RANGE'
    FROM_START_INDEX = 'FROM_START_INDEX'
    ALL = 'ALL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Range:
    r"""Specifies a contiguous range of an indexed collection, such as characters in text."""
    
    end_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endIndex'), 'exclude': lambda f: f is None }})
    r"""The optional zero-based index of the end of the collection. Required for `FIXED_RANGE` ranges."""  
    start_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startIndex'), 'exclude': lambda f: f is None }})
    r"""The optional zero-based index of the beginning of the collection. Required for `FIXED_RANGE` and `FROM_START_INDEX` ranges."""  
    type: Optional[RangeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of range."""  
    