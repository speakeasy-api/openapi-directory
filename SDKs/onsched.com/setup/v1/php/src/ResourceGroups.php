<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ResourceGroups 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete Resource Group
     * 
     * <p>Use this endpoint to <b>Delete</b> a resourceGroup object. A valid <b>resourceGroup id</b> is required. The resource group is not permanently deleted and can be recovered by using the <i>PUT ​/setup​/v1​/resourcegroups​/{id}​/recover</i> endpoint.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSetupV1ResourcegroupsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSetupV1ResourcegroupsIdResponse
     */
	public function deleteSetupV1ResourcegroupsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSetupV1ResourcegroupsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSetupV1ResourcegroupsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/resourcegroups/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteSetupV1ResourcegroupsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSetupV1ResourcegroupsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceGroupViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceGroupViewModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Resource Groups
     * 
     * <p>Use this endpoint to <b>List Resource Groups</b> for the specified location. If not specified, the business location defaults to the primary business location. <b>Name</b> is a required field.</p>
     * <p>Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, maximum is 100. Use the query parameters to filter the results further.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ResourcegroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ResourcegroupsResponse
     */
	public function getSetupV1Resourcegroups(
        \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ResourcegroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ResourcegroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/resourcegroups');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSetupV1ResourcegroupsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ResourcegroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceGroupListViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceGroupListViewModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Resource Group
     * 
     * <p>Use this endpoint to return a <b>Resource Group</b> object. A valid <b>resourceGroup id</b> is required. Find resourceGroup id's by using the <i>GET setup/v1/resourceGroups</i> endpoint.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ResourcegroupsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ResourcegroupsIdResponse
     */
	public function getSetupV1ResourcegroupsId(
        \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ResourcegroupsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ResourcegroupsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/resourcegroups/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ResourcegroupsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ResourcegroupsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceGroupViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceGroupViewModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create Resource Group
     * 
     * <p>Use this endpoint to <b>Create</b> a resourceGroup object. Resource groups are used to categorize your resources.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ResourceGroupInputModel $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSetupV1ResourcegroupsResponse
     */
	public function postSetupV1Resourcegroups(
        \OpenAPI\OpenAPI\Models\Shared\ResourceGroupInputModel $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSetupV1ResourcegroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/resourcegroups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSetupV1ResourcegroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceGroupViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceGroupViewModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Resource Group
     * 
     * <p>Use this endpoint to <b>Update</b> a resourceGroup object. A valid <b>resourceGroup id</b> is required. </p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ResourcegroupsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ResourcegroupsIdResponse
     */
	public function putSetupV1ResourcegroupsId(
        \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ResourcegroupsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ResourcegroupsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/resourcegroups/{id}', \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ResourcegroupsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resourceGroupUpdateModel", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ResourcegroupsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceGroupViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceGroupViewModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Recover Resource Group
     * 
     * <p>Use this endpoint to <b>Recover</b> a deleted resourceGroup object. A valid <b>resourceGroup id</b> is required.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ResourcegroupsIdRecoverRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ResourcegroupsIdRecoverResponse
     */
	public function putSetupV1ResourcegroupsIdRecover(
        \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ResourcegroupsIdRecoverRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ResourcegroupsIdRecoverResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/resourcegroups/{id}/recover', \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ResourcegroupsIdRecoverRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ResourcegroupsIdRecoverResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceViewModel', 'json');
            }
        }

        return $response;
    }
}