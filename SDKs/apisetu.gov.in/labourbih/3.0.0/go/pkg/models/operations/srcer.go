// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SrcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type SrcerRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token ID
	TokenNo string `json:"TokenNo"`
}

// SrcerRequestBodyFormatEnum - The format of the certificate in response.
type SrcerRequestBodyFormatEnum string

const (
	SrcerRequestBodyFormatEnumPdf SrcerRequestBodyFormatEnum = "pdf"
)

func (e SrcerRequestBodyFormatEnum) ToPointer() *SrcerRequestBodyFormatEnum {
	return &e
}

func (e *SrcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = SrcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SrcerRequestBodyFormatEnum: %v", v)
	}
}

// SrcerRequestBody - Request format
type SrcerRequestBody struct {
	CertificateParameters *SrcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SrcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Srcer504ApplicationJSONErrorEnum string

const (
	Srcer504ApplicationJSONErrorEnumGatewayTimeout Srcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Srcer504ApplicationJSONErrorEnum) ToPointer() *Srcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Srcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Srcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Srcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Srcer504ApplicationJSONErrorDescriptionEnum string

const (
	Srcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Srcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Srcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Srcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Srcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Srcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Srcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Srcer504ApplicationJSON - Gateway timeout
type Srcer504ApplicationJSON struct {
	Error            *Srcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Srcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Srcer503ApplicationJSONErrorEnum string

const (
	Srcer503ApplicationJSONErrorEnumServiceUnavailable Srcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Srcer503ApplicationJSONErrorEnum) ToPointer() *Srcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Srcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Srcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Srcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Srcer503ApplicationJSONErrorDescriptionEnum string

const (
	Srcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Srcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Srcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Srcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Srcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Srcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Srcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Srcer503ApplicationJSON - Service unavailable
type Srcer503ApplicationJSON struct {
	Error            *Srcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Srcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Srcer502ApplicationJSONErrorEnum string

const (
	Srcer502ApplicationJSONErrorEnumBadGatewy Srcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Srcer502ApplicationJSONErrorEnum) ToPointer() *Srcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Srcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Srcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Srcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Srcer502ApplicationJSONErrorDescriptionEnum string

const (
	Srcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Srcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Srcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Srcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Srcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Srcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Srcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Srcer502ApplicationJSON - Bad gateway
type Srcer502ApplicationJSON struct {
	Error            *Srcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Srcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Srcer500ApplicationJSONErrorEnum string

const (
	Srcer500ApplicationJSONErrorEnumInternalServerError Srcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Srcer500ApplicationJSONErrorEnum) ToPointer() *Srcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Srcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Srcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Srcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Srcer500ApplicationJSONErrorDescriptionEnum string

const (
	Srcer500ApplicationJSONErrorDescriptionEnumInternalServerError Srcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Srcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Srcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Srcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Srcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Srcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Srcer500ApplicationJSON - Internal server error
type Srcer500ApplicationJSON struct {
	Error            *Srcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Srcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Srcer404ApplicationJSONErrorEnum string

const (
	Srcer404ApplicationJSONErrorEnumRecordNotFound Srcer404ApplicationJSONErrorEnum = "record_not_found"
	Srcer404ApplicationJSONErrorEnumURLNotFound    Srcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Srcer404ApplicationJSONErrorEnum) ToPointer() *Srcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Srcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Srcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Srcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Srcer404ApplicationJSONErrorDescriptionEnum string

const (
	Srcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Srcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Srcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Srcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Srcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Srcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Srcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Srcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Srcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Srcer404ApplicationJSON - No record found
type Srcer404ApplicationJSON struct {
	Error            *Srcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Srcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Srcer401ApplicationJSONErrorEnum string

const (
	Srcer401ApplicationJSONErrorEnumInvalidAuthentication Srcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Srcer401ApplicationJSONErrorEnumInvalidAuthorization  Srcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Srcer401ApplicationJSONErrorEnum) ToPointer() *Srcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Srcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Srcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Srcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Srcer401ApplicationJSONErrorDescriptionEnum string

const (
	Srcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Srcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Srcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Srcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Srcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Srcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Srcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Srcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Srcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Srcer401ApplicationJSON - Unauthorized access
type Srcer401ApplicationJSON struct {
	Error            *Srcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Srcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Srcer400ApplicationJSONErrorEnum string

const (
	Srcer400ApplicationJSONErrorEnumMissingParameter Srcer400ApplicationJSONErrorEnum = "missing_parameter"
	Srcer400ApplicationJSONErrorEnumInvalidParameter Srcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Srcer400ApplicationJSONErrorEnumInvalidFormat    Srcer400ApplicationJSONErrorEnum = "invalid_format"
	Srcer400ApplicationJSONErrorEnumInvalidTxnid     Srcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Srcer400ApplicationJSONErrorEnumInvalidConsentid Srcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Srcer400ApplicationJSONErrorEnum) ToPointer() *Srcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Srcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Srcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Srcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Srcer400ApplicationJSONErrorDescriptionEnum string

const (
	Srcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Srcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Srcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Srcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Srcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Srcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Srcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Srcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Srcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Srcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Srcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Srcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Srcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Srcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Srcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Srcer400ApplicationJSON - Bad request
type Srcer400ApplicationJSON struct {
	Error            *Srcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Srcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SrcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Srcer400ApplicationJSONObject *Srcer400ApplicationJSON
	// Unauthorized access
	Srcer401ApplicationJSONObject *Srcer401ApplicationJSON
	// No record found
	Srcer404ApplicationJSONObject *Srcer404ApplicationJSON
	// Internal server error
	Srcer500ApplicationJSONObject *Srcer500ApplicationJSON
	// Bad gateway
	Srcer502ApplicationJSONObject *Srcer502ApplicationJSON
	// Service unavailable
	Srcer503ApplicationJSONObject *Srcer503ApplicationJSON
	// Gateway timeout
	Srcer504ApplicationJSONObject *Srcer504ApplicationJSON
}
