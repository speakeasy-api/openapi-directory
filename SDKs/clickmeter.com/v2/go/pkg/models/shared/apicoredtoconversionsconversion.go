// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type APICoreDtoConversionsConversionProtocolEnum string

const (
	APICoreDtoConversionsConversionProtocolEnumHTTP  APICoreDtoConversionsConversionProtocolEnum = "Http"
	APICoreDtoConversionsConversionProtocolEnumHTTPS APICoreDtoConversionsConversionProtocolEnum = "Https"
)

func (e APICoreDtoConversionsConversionProtocolEnum) ToPointer() *APICoreDtoConversionsConversionProtocolEnum {
	return &e
}

func (e *APICoreDtoConversionsConversionProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Http":
		fallthrough
	case "Https":
		*e = APICoreDtoConversionsConversionProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for APICoreDtoConversionsConversionProtocolEnum: %v", v)
	}
}

// APICoreDtoConversionsConversion - The body of the conversion
type APICoreDtoConversionsConversion struct {
	Code *string `json:"code,omitempty" form:"name=code"`
	//  (A date in "YmdHis" format)
	CreationDate *string                                      `json:"creationDate,omitempty" form:"name=creationDate"`
	Deleted      *bool                                        `json:"deleted,omitempty" form:"name=deleted"`
	Description  *string                                      `json:"description,omitempty" form:"name=description"`
	ID           *int64                                       `json:"id,omitempty" form:"name=id"`
	Name         *string                                      `json:"name,omitempty" form:"name=name"`
	Protocol     *APICoreDtoConversionsConversionProtocolEnum `json:"protocol,omitempty" form:"name=protocol"`
	Value        *float64                                     `json:"value,omitempty" form:"name=value"`
}
