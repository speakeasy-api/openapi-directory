/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ClientRepresentation } from "./clientrepresentation";
import { GroupRepresentation } from "./grouprepresentation";
import { IdentityProviderRepresentation } from "./identityproviderrepresentation";
import { RolesRepresentation } from "./rolesrepresentation";
import { UserRepresentation } from "./userrepresentation";
import { Expose, Type } from "class-transformer";

export enum PartialImportRepresentationPolicyEnum {
  Skip = "SKIP",
  Overwrite = "OVERWRITE",
  Fail = "FAIL",
}

export class PartialImportRepresentation extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ClientRepresentation })
  @Expose({ name: "clients" })
  @Type(() => ClientRepresentation)
  clients?: ClientRepresentation[];

  @SpeakeasyMetadata({ elemType: GroupRepresentation })
  @Expose({ name: "groups" })
  @Type(() => GroupRepresentation)
  groups?: GroupRepresentation[];

  @SpeakeasyMetadata({ elemType: IdentityProviderRepresentation })
  @Expose({ name: "identityProviders" })
  @Type(() => IdentityProviderRepresentation)
  identityProviders?: IdentityProviderRepresentation[];

  @SpeakeasyMetadata()
  @Expose({ name: "ifResourceExists" })
  ifResourceExists?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "policy" })
  policy?: PartialImportRepresentationPolicyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "roles" })
  @Type(() => RolesRepresentation)
  roles?: RolesRepresentation;

  @SpeakeasyMetadata({ elemType: UserRepresentation })
  @Expose({ name: "users" })
  @Type(() => UserRepresentation)
  users?: UserRepresentation[];
}
