// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CardBillingAddress - The Card's billing address.
type CardBillingAddress struct {
	// The city of the billing address.
	City string `json:"city"`
	// The first line of the billing address.
	Line1 string `json:"line1"`
	// The second line of the billing address.
	Line2 string `json:"line2"`
	// The postal code of the billing address.
	PostalCode string `json:"postal_code"`
	// The US state of the billing address.
	State string `json:"state"`
}

// CardDigitalWallet - The contact information used in the two-factor steps for digital wallet card creation. At least one field must be present to complete the digital wallet steps.
type CardDigitalWallet struct {
	// The card profile assigned to this digital card. Card profiles may also be assigned at the program level.
	CardProfileID string `json:"card_profile_id"`
	// An email address that can be used to verify the cardholder via one-time passcode over email.
	Email string `json:"email"`
	// A phone number that can be used to verify the cardholder via one-time passcode over SMS.
	Phone string `json:"phone"`
}

// CardStatusEnum - This indicates if payments can be made with the card.
type CardStatusEnum string

const (
	CardStatusEnumActive   CardStatusEnum = "active"
	CardStatusEnumDisabled CardStatusEnum = "disabled"
	CardStatusEnumCanceled CardStatusEnum = "canceled"
)

func (e *CardStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "disabled":
		fallthrough
	case "canceled":
		*e = CardStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CardStatusEnum: %s", s)
	}
}

// CardTypeEnum - A constant representing the object's type. For this resource it will always be `card`.
type CardTypeEnum string

const (
	CardTypeEnumCard CardTypeEnum = "card"
)

func (e *CardTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "card":
		*e = CardTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CardTypeEnum: %s", s)
	}
}

// Card - Cards are commercial credit cards. They'll immediately work for online purchases after you create them. All cards maintain a credit limit of 100% of the Accountâ€™s available balance at the time of transaction. Funds are deducted from the Account upon transaction settlement.
type Card struct {
	// The identifier for the account this card belongs to.
	AccountID string `json:"account_id"`
	// The Card's billing address.
	BillingAddress CardBillingAddress `json:"billing_address"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card was created.
	CreatedAt time.Time `json:"created_at"`
	// The card's description for display purposes.
	Description string `json:"description"`
	// The contact information used in the two-factor steps for digital wallet card creation. At least one field must be present to complete the digital wallet steps.
	DigitalWallet CardDigitalWallet `json:"digital_wallet"`
	// The month the card expires in M format (e.g., August is 8).
	ExpirationMonth int64 `json:"expiration_month"`
	// The year the card expires in YYYY format (e.g., 2025).
	ExpirationYear int64 `json:"expiration_year"`
	// The card identifier.
	ID string `json:"id"`
	// The last 4 digits of the Card's Primary Account Number.
	Last4 string `json:"last4"`
	// This indicates if payments can be made with the card.
	Status CardStatusEnum `json:"status"`
	// A constant representing the object's type. For this resource it will always be `card`.
	Type CardTypeEnum `json:"type"`
}
