"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetDetailsSingleBatchRequest:
    
    batch_uuid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'batchUuid', 'style': 'simple', 'explode': False }})  
    
class GetDetailsSingleBatchBatchStatusEnum(str, Enum):
    r"""status of the batch object"""
    PENDING_APPROVAL = 'PENDING_APPROVAL'
    REJECTED = 'REJECTED'
    COMPLETE = 'COMPLETE'
    OPEN = 'OPEN'
    CANCELLED = 'CANCELLED'
    PENDING_PARENT_BATCH_APPROVAL = 'PENDING_PARENT_BATCH_APPROVAL'
    READY_FOR_PROCESSING = 'READY_FOR_PROCESSING'
    PROCESSING = 'PROCESSING'

class GetDetailsSingleBatchBatchTypeEnum(str, Enum):
    r"""The type of the batch - can be one of the listed 3"""
    INTERNAL_TRANSFER = 'INTERNAL_TRANSFER'
    BANK_TRANSFER = 'BANK_TRANSFER'
    NEW_PAYEE = 'NEW_PAYEE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDetailsSingleBatchBatch:
    r"""Returns the details of the batch specified in the API endpoint - {batchUuid}."""
    
    batch_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batchName'), 'exclude': lambda f: f is None }})
    r"""An optional name you give to the batch at creation time"""  
    batch_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batchUuid'), 'exclude': lambda f: f is None }})
    r"""A UUID for this item."""  
    callback_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callbackUrl'), 'exclude': lambda f: f is None }})
    r"""An optional POST URL that all events for this batch will be sent to."""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""All payments in the batch must be the same currency - either EUR or GBP"""  
    date_created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateCreated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z"""  
    job_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobNumber'), 'exclude': lambda f: f is None }})
    r"""An optional job number you can give to the batch to help link it to your own system."""  
    last_updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z"""  
    number_of_items_failed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberOfItemsFailed'), 'exclude': lambda f: f is None }})
    r"""Once processed, a count of the number of items that didn’t process successfully."""  
    number_of_items_submitted: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberOfItemsSubmitted'), 'exclude': lambda f: f is None }})
    r"""A count of the number of items in the batch"""  
    number_of_items_succeeded: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberOfItemsSucceeded'), 'exclude': lambda f: f is None }})
    r"""Once processed, a count of the number of items that processed successfully."""  
    source_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceName'), 'exclude': lambda f: f is None }})
    r"""A string describing where the batch originated - for instance the name of the API token that was used, or showing that the batch was automatically created by fire.com (in the case of a new payee batch)."""  
    status: Optional[GetDetailsSingleBatchBatchStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""status of the batch object"""  
    type: Optional[GetDetailsSingleBatchBatchTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the batch - can be one of the listed 3"""  
    value_of_items_failed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueOfItemsFailed'), 'exclude': lambda f: f is None }})
    r"""Once processed, a sum of the value of items that didn’t process successfully. Specified in pence or cent."""  
    value_of_items_submitted: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueOfItemsSubmitted'), 'exclude': lambda f: f is None }})
    r"""A sum of the value of items in the batch. Specified in pence or cent."""  
    value_of_items_succeeded: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueOfItemsSucceeded'), 'exclude': lambda f: f is None }})
    r"""Once processed, a sum of the value of items that processed successfully. Specified in pence or cent."""  
    

@dataclasses.dataclass
class GetDetailsSingleBatchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    batch: Optional[GetDetailsSingleBatchBatch] = dataclasses.field(default=None)
    r"""Returns the details of the batch specified in the API endpoint - {batchUuid}."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    