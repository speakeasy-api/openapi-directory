/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig } from "./googlecloudidentitytoolkitadminv2clientpermissionconfig";
import { GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig } from "./googlecloudidentitytoolkitadminv2emailprivacyconfig";
import { GoogleCloudIdentitytoolkitAdminV2HashConfig } from "./googlecloudidentitytoolkitadminv2hashconfig";
import { GoogleCloudIdentitytoolkitAdminV2Inheritance } from "./googlecloudidentitytoolkitadminv2inheritance";
import { GoogleCloudIdentitytoolkitAdminV2MonitoringConfig } from "./googlecloudidentitytoolkitadminv2monitoringconfig";
import { GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig } from "./googlecloudidentitytoolkitadminv2multifactorauthconfig";
import { GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig } from "./googlecloudidentitytoolkitadminv2smsregionconfig";
import { Expose, Type } from "class-transformer";

/**
 * A Tenant contains configuration for the tenant in a multi-tenant project.
 */
export class GoogleCloudIdentitytoolkitAdminV2Tenant extends SpeakeasyBase {
  /**
   * Whether to allow email/password user authentication.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowPasswordSignup" })
  allowPasswordSignup?: boolean;

  /**
   * Whether anonymous users will be auto-deleted after a period of 30 days.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autodeleteAnonymousUsers" })
  autodeleteAnonymousUsers?: boolean;

  /**
   * Options related to how clients making requests on behalf of a tenant should be configured.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client" })
  @Type(() => GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig)
  client?: GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig;

  /**
   * Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to sign-in. Admins of the disabled tenant are not able to manage its users.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disableAuth" })
  disableAuth?: boolean;

  /**
   * Display name of the tenant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * Configuration for settings related to email privacy and public visibility. Settings in this config protect against email enumeration, but may make some trade-offs in user-friendliness.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emailPrivacyConfig" })
  @Type(() => GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig)
  emailPrivacyConfig?: GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig;

  /**
   * Whether to enable anonymous user authentication.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableAnonymousUser" })
  enableAnonymousUser?: boolean;

  /**
   * Whether to enable email link user authentication.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableEmailLinkSignin" })
  enableEmailLinkSignin?: boolean;

  /**
   * History information of the hash algorithm and key. Different accounts' passwords may be generated by different version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hashConfig" })
  @Type(() => GoogleCloudIdentitytoolkitAdminV2HashConfig)
  hashConfig?: GoogleCloudIdentitytoolkitAdminV2HashConfig;

  /**
   * Settings that the tenants will inherit from project level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inheritance" })
  @Type(() => GoogleCloudIdentitytoolkitAdminV2Inheritance)
  inheritance?: GoogleCloudIdentitytoolkitAdminV2Inheritance;

  /**
   * Options related to MultiFactor Authentication for the project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mfaConfig" })
  @Type(() => GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig)
  mfaConfig?: GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig;

  /**
   * Configuration related to monitoring project activity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "monitoring" })
  @Type(() => GoogleCloudIdentitytoolkitAdminV2MonitoringConfig)
  monitoring?: GoogleCloudIdentitytoolkitAdminV2MonitoringConfig;

  /**
   * Output only. Resource name of a tenant. For example: "projects/{project-id}/tenants/{tenant-id}"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Configures the regions where users are allowed to send verification SMS for the project or tenant. This is based on the calling code of the destination phone number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smsRegionConfig" })
  @Type(() => GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig)
  smsRegionConfig?: GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig;

  /**
   * A map of pairs that can be used for MFA. The phone number should be in E.164 format (https://www.itu.int/rec/T-REC-E.164/) and a maximum of 10 pairs can be added (error will be thrown once exceeded).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "testPhoneNumbers" })
  testPhoneNumbers?: Record<string, string>;
}

/**
 * A Tenant contains configuration for the tenant in a multi-tenant project.
 */
export class GoogleCloudIdentitytoolkitAdminV2TenantInput extends SpeakeasyBase {
  /**
   * Whether to allow email/password user authentication.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowPasswordSignup" })
  allowPasswordSignup?: boolean;

  /**
   * Whether anonymous users will be auto-deleted after a period of 30 days.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autodeleteAnonymousUsers" })
  autodeleteAnonymousUsers?: boolean;

  /**
   * Options related to how clients making requests on behalf of a tenant should be configured.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client" })
  @Type(() => GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig)
  client?: GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig;

  /**
   * Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to sign-in. Admins of the disabled tenant are not able to manage its users.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disableAuth" })
  disableAuth?: boolean;

  /**
   * Display name of the tenant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * Configuration for settings related to email privacy and public visibility. Settings in this config protect against email enumeration, but may make some trade-offs in user-friendliness.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emailPrivacyConfig" })
  @Type(() => GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig)
  emailPrivacyConfig?: GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig;

  /**
   * Whether to enable anonymous user authentication.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableAnonymousUser" })
  enableAnonymousUser?: boolean;

  /**
   * Whether to enable email link user authentication.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableEmailLinkSignin" })
  enableEmailLinkSignin?: boolean;

  /**
   * Settings that the tenants will inherit from project level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inheritance" })
  @Type(() => GoogleCloudIdentitytoolkitAdminV2Inheritance)
  inheritance?: GoogleCloudIdentitytoolkitAdminV2Inheritance;

  /**
   * Options related to MultiFactor Authentication for the project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mfaConfig" })
  @Type(() => GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig)
  mfaConfig?: GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig;

  /**
   * Configuration related to monitoring project activity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "monitoring" })
  @Type(() => GoogleCloudIdentitytoolkitAdminV2MonitoringConfig)
  monitoring?: GoogleCloudIdentitytoolkitAdminV2MonitoringConfig;

  /**
   * Configures the regions where users are allowed to send verification SMS for the project or tenant. This is based on the calling code of the destination phone number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smsRegionConfig" })
  @Type(() => GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig)
  smsRegionConfig?: GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig;

  /**
   * A map of pairs that can be used for MFA. The phone number should be in E.164 format (https://www.itu.int/rec/T-REC-E.164/) and a maximum of 10 pairs can be added (error will be thrown once exceeded).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "testPhoneNumbers" })
  testPhoneNumbers?: Record<string, string>;
}
