"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PUTPublicEmailTemplateRequestCcEmailTypeEnum(str, Enum):
    r"""Email cc type.
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, ccEmailType can be ALL values in enum. 
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
    """
    BILL_TO_CONTACT = 'BillToContact'
    SOLD_TO_CONTACT = 'SoldToContact'
    SPECIFIC_EMAILS = 'SpecificEmails'
    TENANT_ADMIN = 'TenantAdmin'
    BILL_TO_AND_SOLD_TO_CONTACTS = 'BillToAndSoldToContacts'
    RUN_OWNER = 'RunOwner'
    ALL_CONTACTS = 'AllContacts'
    INVOICE_OWNER_BILL_TO_CONTACT = 'InvoiceOwnerBillToContact'
    INVOICE_OWNER_SOLD_TO_CONTACT = 'InvoiceOwnerSoldToContact'
    INVOICE_OWNER_BILL_TO_AND_SOLD_TO_CONTACTS = 'InvoiceOwnerBillToAndSoldToContacts'
    INVOICE_OWNER_ALL_CONTACTS = 'InvoiceOwnerAllContacts'

class PUTPublicEmailTemplateRequestEncodingTypeEnum(str, Enum):
    r"""The endcode type of the email body."""
    UTF8 = 'UTF8'
    SHIFT_JIS = 'Shift_JIS'
    ISO_2022_JP = 'ISO_2022_JP'
    EUC_JP = 'EUC_JP'
    X_SJIS_0213 = 'X_SJIS_0213'

class PUTPublicEmailTemplateRequestFromEmailTypeEnum(str, Enum):
    r"""The type of fromEmail."""
    TENANT_EMAIL = 'TenantEmail'
    SPECIFIC_EMAIL = 'SpecificEmail'

class PUTPublicEmailTemplateRequestReplyToEmailTypeEnum(str, Enum):
    r"""The type of the reply email."""
    TENANT_EMAIL = 'TenantEmail'
    SPECIFIC_EMAIL = 'SpecificEmail'

class PUTPublicEmailTemplateRequestToEmailTypeEnum(str, Enum):
    r"""Email receive type.
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, toEmailType can be ALL values in enum. 
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail. 
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
    """
    BILL_TO_CONTACT = 'BillToContact'
    SOLD_TO_CONTACT = 'SoldToContact'
    SPECIFIC_EMAILS = 'SpecificEmails'
    TENANT_ADMIN = 'TenantAdmin'
    BILL_TO_AND_SOLD_TO_CONTACTS = 'BillToAndSoldToContacts'
    RUN_OWNER = 'RunOwner'
    ALL_CONTACTS = 'AllContacts'
    INVOICE_OWNER_BILL_TO_CONTACT = 'InvoiceOwnerBillToContact'
    INVOICE_OWNER_SOLD_TO_CONTACT = 'InvoiceOwnerSoldToContact'
    INVOICE_OWNER_BILL_TO_AND_SOLD_TO_CONTACTS = 'InvoiceOwnerBillToAndSoldToContacts'
    INVOICE_OWNER_ALL_CONTACTS = 'InvoiceOwnerAllContacts'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PUTPublicEmailTemplateRequest:
    r"""The request body to update an email template."""
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""The status of the email template."""  
    bcc_email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bccEmailAddress'), 'exclude': lambda f: f is None }})
    r"""Email bcc address."""  
    cc_email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ccEmailAddress'), 'exclude': lambda f: f is None }})
    r"""Email cc address."""  
    cc_email_type: Optional[PUTPublicEmailTemplateRequestCcEmailTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ccEmailType'), 'exclude': lambda f: f is None }})
    r"""Email cc type.
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, ccEmailType can be ALL values in enum. 
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
    """  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the email template."""  
    email_body: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailBody'), 'exclude': lambda f: f is None }})
    r"""The email body. You can add merge fields in the email object using angle brackets.
    User can also embed html tags if 'isHtml' is true.
    """  
    email_subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailSubject'), 'exclude': lambda f: f is None }})
    r"""The email subject. You can add merge fields in the email subject using angle brackets."""  
    encoding_type: Optional[PUTPublicEmailTemplateRequestEncodingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encodingType'), 'exclude': lambda f: f is None }})
    r"""The endcode type of the email body."""  
    from_email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromEmailAddress'), 'exclude': lambda f: f is None }})
    r"""If fromEmailType is SpecificEmail, this field is required"""  
    from_email_type: Optional[PUTPublicEmailTemplateRequestFromEmailTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromEmailType'), 'exclude': lambda f: f is None }})
    r"""The type of fromEmail."""  
    from_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromName'), 'exclude': lambda f: f is None }})
    r"""The name of email sender."""  
    is_html: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isHtml'), 'exclude': lambda f: f is None }})
    r"""Specifies whether the style of email body is HTML."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the email template."""  
    reply_to_email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replyToEmailAddress'), 'exclude': lambda f: f is None }})
    r"""If replyToEmailType is SpecificEmail, this field is required."""  
    reply_to_email_type: Optional[PUTPublicEmailTemplateRequestReplyToEmailTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replyToEmailType'), 'exclude': lambda f: f is None }})
    r"""The type of the reply email."""  
    to_email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toEmailAddress'), 'exclude': lambda f: f is None }})
    r"""If toEmailType is SpecificEmail, this field is required."""  
    to_email_type: Optional[PUTPublicEmailTemplateRequestToEmailTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toEmailType'), 'exclude': lambda f: f is None }})
    r"""Email receive type.
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, toEmailType can be ALL values in enum. 
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail. 
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
    """  
    