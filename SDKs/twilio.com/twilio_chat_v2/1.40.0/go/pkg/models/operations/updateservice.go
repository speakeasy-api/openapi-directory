// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

var UpdateServiceServerList = []string{
	"https://chat.twilio.com",
}

type UpdateServiceSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

// UpdateServiceUpdateServiceRequestWebhookMethodEnum - The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
type UpdateServiceUpdateServiceRequestWebhookMethodEnum string

const (
	UpdateServiceUpdateServiceRequestWebhookMethodEnumHead   UpdateServiceUpdateServiceRequestWebhookMethodEnum = "HEAD"
	UpdateServiceUpdateServiceRequestWebhookMethodEnumGet    UpdateServiceUpdateServiceRequestWebhookMethodEnum = "GET"
	UpdateServiceUpdateServiceRequestWebhookMethodEnumPost   UpdateServiceUpdateServiceRequestWebhookMethodEnum = "POST"
	UpdateServiceUpdateServiceRequestWebhookMethodEnumPatch  UpdateServiceUpdateServiceRequestWebhookMethodEnum = "PATCH"
	UpdateServiceUpdateServiceRequestWebhookMethodEnumPut    UpdateServiceUpdateServiceRequestWebhookMethodEnum = "PUT"
	UpdateServiceUpdateServiceRequestWebhookMethodEnumDelete UpdateServiceUpdateServiceRequestWebhookMethodEnum = "DELETE"
)

func (e *UpdateServiceUpdateServiceRequestWebhookMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = UpdateServiceUpdateServiceRequestWebhookMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateServiceUpdateServiceRequestWebhookMethodEnum: %s", s)
	}
}

type UpdateServiceUpdateServiceRequest struct {
	// DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints.
	ConsumptionReportInterval *int64 `form:"name=ConsumptionReportInterval"`
	// The channel role assigned to a channel creator when they join a new channel. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
	DefaultChannelCreatorRoleSid *string `form:"name=DefaultChannelCreatorRoleSid"`
	// The channel role assigned to users when they are added to a channel. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
	DefaultChannelRoleSid *string `form:"name=DefaultChannelRoleSid"`
	// The service role assigned to users when they are added to the service. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
	DefaultServiceRoleSid *string `form:"name=DefaultServiceRoleSid"`
	// A descriptive string that you create to describe the resource.
	FriendlyName *string `form:"name=FriendlyName"`
	// The maximum number of Members that can be added to Channels within this Service. Can be up to 1,000.
	LimitsChannelMembers *int64 `form:"name=Limits.ChannelMembers"`
	// The maximum number of Channels Users can be a Member of within this Service. Can be up to 1,000.
	LimitsUserChannels *int64 `form:"name=Limits.UserChannels"`
	// The message to send when a media message has no text. Can be used as placeholder message.
	MediaCompatibilityMessage *string `form:"name=Media.CompatibilityMessage"`
	// Whether to send a notification when a member is added to a channel. The default is `false`.
	NotificationsAddedToChannelEnabled *bool `form:"name=Notifications.AddedToChannel.Enabled"`
	// The name of the sound to play when a member is added to a channel and `notifications.added_to_channel.enabled` is `true`.
	NotificationsAddedToChannelSound *string `form:"name=Notifications.AddedToChannel.Sound"`
	// The template to use to create the notification text displayed when a member is added to a channel and `notifications.added_to_channel.enabled` is `true`.
	NotificationsAddedToChannelTemplate *string `form:"name=Notifications.AddedToChannel.Template"`
	// Whether to send a notification when a user is invited to a channel. The default is `false`.
	NotificationsInvitedToChannelEnabled *bool `form:"name=Notifications.InvitedToChannel.Enabled"`
	// The name of the sound to play when a user is invited to a channel and `notifications.invited_to_channel.enabled` is `true`.
	NotificationsInvitedToChannelSound *string `form:"name=Notifications.InvitedToChannel.Sound"`
	// The template to use to create the notification text displayed when a user is invited to a channel and `notifications.invited_to_channel.enabled` is `true`.
	NotificationsInvitedToChannelTemplate *string `form:"name=Notifications.InvitedToChannel.Template"`
	// Whether to log notifications. The default is `false`.
	NotificationsLogEnabled *bool `form:"name=Notifications.LogEnabled"`
	// Whether the new message badge is enabled. The default is `false`.
	NotificationsNewMessageBadgeCountEnabled *bool `form:"name=Notifications.NewMessage.BadgeCountEnabled"`
	// Whether to send a notification when a new message is added to a channel. The default is `false`.
	NotificationsNewMessageEnabled *bool `form:"name=Notifications.NewMessage.Enabled"`
	// The name of the sound to play when a new message is added to a channel and `notifications.new_message.enabled` is `true`.
	NotificationsNewMessageSound *string `form:"name=Notifications.NewMessage.Sound"`
	// The template to use to create the notification text displayed when a new message is added to a channel and `notifications.new_message.enabled` is `true`.
	NotificationsNewMessageTemplate *string `form:"name=Notifications.NewMessage.Template"`
	// Whether to send a notification to a user when they are removed from a channel. The default is `false`.
	NotificationsRemovedFromChannelEnabled *bool `form:"name=Notifications.RemovedFromChannel.Enabled"`
	// The name of the sound to play to a user when they are removed from a channel and `notifications.removed_from_channel.enabled` is `true`.
	NotificationsRemovedFromChannelSound *string `form:"name=Notifications.RemovedFromChannel.Sound"`
	// The template to use to create the notification text displayed to a user when they are removed from a channel and `notifications.removed_from_channel.enabled` is `true`.
	NotificationsRemovedFromChannelTemplate *string `form:"name=Notifications.RemovedFromChannel.Template"`
	// The number of times to retry a call to the `post_webhook_url` if the request times out (after 5 seconds) or it receives a 429, 503, or 504 HTTP response. The default is 0, which means the call won't be retried.
	PostWebhookRetryCount *int64 `form:"name=PostWebhookRetryCount"`
	// The URL for post-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
	PostWebhookURL *string `form:"name=PostWebhookUrl"`
	// The number of times to retry a call to the `pre_webhook_url` if the request times out (after 5 seconds) or it receives a 429, 503, or 504 HTTP response. Default retry count is 0 times, which means the call won't be retried.
	PreWebhookRetryCount *int64 `form:"name=PreWebhookRetryCount"`
	// The URL for pre-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
	PreWebhookURL *string `form:"name=PreWebhookUrl"`
	// Whether to enable the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) for this Service instance. The default is `false`.
	ReachabilityEnabled *bool `form:"name=ReachabilityEnabled"`
	// Whether to enable the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature. The default is `true`.
	ReadStatusEnabled *bool `form:"name=ReadStatusEnabled"`
	// How long in seconds after a `started typing` event until clients should assume that user is no longer typing, even if no `ended typing` message was received.  The default is 5 seconds.
	TypingIndicatorTimeout *int64 `form:"name=TypingIndicatorTimeout"`
	// The list of webhook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
	WebhookFilters []string `form:"name=WebhookFilters"`
	// The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
	WebhookMethod *UpdateServiceUpdateServiceRequestWebhookMethodEnum `form:"name=WebhookMethod"`
}

type UpdateServiceRequest struct {
	RequestBody *UpdateServiceUpdateServiceRequest `request:"mediaType=application/x-www-form-urlencoded"`
	// The SID of the Service resource to update.
	Sid string `pathParam:"style=simple,explode=false,name=Sid"`
}

type UpdateServiceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	ChatV2Service *shared.ChatV2Service
}
