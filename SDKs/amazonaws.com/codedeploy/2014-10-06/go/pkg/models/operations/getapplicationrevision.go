// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetApplicationRevisionXAmzTargetEnum
type GetApplicationRevisionXAmzTargetEnum string

const (
	GetApplicationRevisionXAmzTargetEnumCodeDeploy20141006GetApplicationRevision GetApplicationRevisionXAmzTargetEnum = "CodeDeploy_20141006.GetApplicationRevision"
)

func (e *GetApplicationRevisionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.GetApplicationRevision":
		*e = GetApplicationRevisionXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetApplicationRevisionXAmzTargetEnum: %s", s)
	}
}

type GetApplicationRevisionRequest struct {
	GetApplicationRevisionInput shared.GetApplicationRevisionInput   `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  GetApplicationRevisionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetApplicationRevisionResponse struct {
	// ApplicationDoesNotExistException
	ApplicationDoesNotExistException interface{}
	// ApplicationNameRequiredException
	ApplicationNameRequiredException interface{}
	ContentType                      string
	// Success
	GetApplicationRevisionOutput *shared.GetApplicationRevisionOutput
	// InvalidApplicationNameException
	InvalidApplicationNameException interface{}
	// InvalidRevisionException
	InvalidRevisionException interface{}
	// RevisionDoesNotExistException
	RevisionDoesNotExistException interface{}
	// RevisionRequiredException
	RevisionRequiredException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
