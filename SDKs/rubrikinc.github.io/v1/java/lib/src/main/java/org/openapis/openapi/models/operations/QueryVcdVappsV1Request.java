/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class QueryVcdVappsV1Request {
    /**
     * Filter by ID of the effective SLA domain.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=effective_sla_domain_id")
    public String effectiveSlaDomainId;

    public QueryVcdVappsV1Request withEffectiveSlaDomainId(String effectiveSlaDomainId) {
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        return this;
    }
    
    /**
     * Include backup task information in response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include_backup_task_info")
    public Boolean includeBackupTaskInfo;

    public QueryVcdVappsV1Request withIncludeBackupTaskInfo(Boolean includeBackupTaskInfo) {
        this.includeBackupTaskInfo = includeBackupTaskInfo;
        return this;
    }
    
    /**
     * Filter by isRelic field of vCD vApp object. Return both relic and non-relic vApps when this value is not specified.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=is_relic")
    public Boolean isRelic;

    public QueryVcdVappsV1Request withIsRelic(Boolean isRelic) {
        this.isRelic = isRelic;
        return this;
    }
    
    /**
     * Limit the number of matches returned.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Integer limit;

    public QueryVcdVappsV1Request withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Search for a vCD vApp object by name.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=name")
    public String name;

    public QueryVcdVappsV1Request withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Number of matches to ignore from the beginning of the results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    public Integer offset;

    public QueryVcdVappsV1Request withOffset(Integer offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * Filter by primary cluster ID, or **local**.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=primary_cluster_id")
    public String primaryClusterId;

    public QueryVcdVappsV1Request withPrimaryClusterId(String primaryClusterId) {
        this.primaryClusterId = primaryClusterId;
        return this;
    }
    
    /**
     * Filter by SLA assignment type.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sla_assignment")
    public QueryVcdVappsV1SLAAssignmentEnum slaAssignment;

    public QueryVcdVappsV1Request withSlaAssignment(QueryVcdVappsV1SLAAssignmentEnum slaAssignment) {
        this.slaAssignment = slaAssignment;
        return this;
    }
    
    /**
     * Attribute to sort the vCD vApp list on.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_by")
    public QueryVcdVappsV1SortByEnum sortBy;

    public QueryVcdVappsV1Request withSortBy(QueryVcdVappsV1SortByEnum sortBy) {
        this.sortBy = sortBy;
        return this;
    }
    
    /**
     * Order for sorting the results, either ascending or descending.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_order")
    public QueryVcdVappsV1SortOrderEnum sortOrder;

    public QueryVcdVappsV1Request withSortOrder(QueryVcdVappsV1SortOrderEnum sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    public QueryVcdVappsV1Request(){}
}
