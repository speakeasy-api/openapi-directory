/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum RegisterOrganizationDelegatedAdminXAmzTargetEnum {
  ComAmazonawsCloudtrailV20131101CloudTrail20131101RegisterOrganizationDelegatedAdmin = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.RegisterOrganizationDelegatedAdmin",
}

export class RegisterOrganizationDelegatedAdminRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  registerOrganizationDelegatedAdminRequest: shared.RegisterOrganizationDelegatedAdminRequest;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: RegisterOrganizationDelegatedAdminXAmzTargetEnum;
}

export class RegisterOrganizationDelegatedAdminResponse extends SpeakeasyBase {
  /**
   * AccountNotFoundException
   */
  @SpeakeasyMetadata()
  accountNotFoundException?: any;

  /**
   * AccountRegisteredException
   */
  @SpeakeasyMetadata()
  accountRegisteredException?: any;

  /**
   * CannotDelegateManagementAccountException
   */
  @SpeakeasyMetadata()
  cannotDelegateManagementAccountException?: any;

  /**
   * CloudTrailAccessNotEnabledException
   */
  @SpeakeasyMetadata()
  cloudTrailAccessNotEnabledException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * DelegatedAdminAccountLimitExceededException
   */
  @SpeakeasyMetadata()
  delegatedAdminAccountLimitExceededException?: any;

  /**
   * InsufficientDependencyServiceAccessPermissionException
   */
  @SpeakeasyMetadata()
  insufficientDependencyServiceAccessPermissionException?: any;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  /**
   * NotOrganizationManagementAccountException
   */
  @SpeakeasyMetadata()
  notOrganizationManagementAccountException?: any;

  /**
   * OperationNotPermittedException
   */
  @SpeakeasyMetadata()
  operationNotPermittedException?: any;

  /**
   * OrganizationNotInAllFeaturesModeException
   */
  @SpeakeasyMetadata()
  organizationNotInAllFeaturesModeException?: any;

  /**
   * OrganizationsNotInUseException
   */
  @SpeakeasyMetadata()
  organizationsNotInUseException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  registerOrganizationDelegatedAdminResponse?: Record<string, any>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * UnsupportedOperationException
   */
  @SpeakeasyMetadata()
  unsupportedOperationException?: any;
}
