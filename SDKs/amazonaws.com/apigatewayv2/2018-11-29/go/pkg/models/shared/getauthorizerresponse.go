// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GetAuthorizerResponseAuthorizerTypeEnum - The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
type GetAuthorizerResponseAuthorizerTypeEnum string

const (
	GetAuthorizerResponseAuthorizerTypeEnumRequest GetAuthorizerResponseAuthorizerTypeEnum = "REQUEST"
	GetAuthorizerResponseAuthorizerTypeEnumJwt     GetAuthorizerResponseAuthorizerTypeEnum = "JWT"
)

func (e GetAuthorizerResponseAuthorizerTypeEnum) ToPointer() *GetAuthorizerResponseAuthorizerTypeEnum {
	return &e
}

func (e *GetAuthorizerResponseAuthorizerTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REQUEST":
		fallthrough
	case "JWT":
		*e = GetAuthorizerResponseAuthorizerTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAuthorizerResponseAuthorizerTypeEnum: %v", v)
	}
}

// GetAuthorizerResponseJwtConfiguration - Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
type GetAuthorizerResponseJwtConfiguration struct {
	Audience []string `json:"Audience,omitempty"`
	Issuer   *string  `json:"Issuer,omitempty"`
}

// GetAuthorizerResponse - Success
type GetAuthorizerResponse struct {
	AuthorizerCredentialsArn       *string                                  `json:"AuthorizerCredentialsArn,omitempty"`
	AuthorizerID                   *string                                  `json:"AuthorizerId,omitempty"`
	AuthorizerPayloadFormatVersion *string                                  `json:"AuthorizerPayloadFormatVersion,omitempty"`
	AuthorizerResultTTLInSeconds   *int64                                   `json:"AuthorizerResultTtlInSeconds,omitempty"`
	AuthorizerType                 *GetAuthorizerResponseAuthorizerTypeEnum `json:"AuthorizerType,omitempty"`
	AuthorizerURI                  *string                                  `json:"AuthorizerUri,omitempty"`
	EnableSimpleResponses          *bool                                    `json:"EnableSimpleResponses,omitempty"`
	IdentitySource                 []string                                 `json:"IdentitySource,omitempty"`
	IdentityValidationExpression   *string                                  `json:"IdentityValidationExpression,omitempty"`
	JwtConfiguration               *GetAuthorizerResponseJwtConfiguration   `json:"JwtConfiguration,omitempty"`
	Name                           *string                                  `json:"Name,omitempty"`
}
