/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Stats {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets indexed item statistics aggreggated across all data sources. This API only returns statistics for previous dates; it doesn't return statistics for the current day. **Note:** This API requires a standard end user account to execute.
   */
  cloudsearchStatsGetIndex(
    req: operations.CloudsearchStatsGetIndexRequest,
    security: operations.CloudsearchStatsGetIndexSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsearchStatsGetIndexResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsearchStatsGetIndexRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/stats/index";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudsearchStatsGetIndexSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsearchStatsGetIndexResponse =
        new operations.CloudsearchStatsGetIndexResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getCustomerIndexStatsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetCustomerIndexStatsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the query statistics for customer. **Note:** This API requires a standard end user account to execute.
   */
  cloudsearchStatsGetQuery(
    req: operations.CloudsearchStatsGetQueryRequest,
    security: operations.CloudsearchStatsGetQuerySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsearchStatsGetQueryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsearchStatsGetQueryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/stats/query";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudsearchStatsGetQuerySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsearchStatsGetQueryResponse =
        new operations.CloudsearchStatsGetQueryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getCustomerQueryStatsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetCustomerQueryStatsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get search application stats for customer. **Note:** This API requires a standard end user account to execute.
   */
  cloudsearchStatsGetSearchapplication(
    req: operations.CloudsearchStatsGetSearchapplicationRequest,
    security: operations.CloudsearchStatsGetSearchapplicationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsearchStatsGetSearchapplicationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsearchStatsGetSearchapplicationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/stats/searchapplication";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudsearchStatsGetSearchapplicationSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsearchStatsGetSearchapplicationResponse =
        new operations.CloudsearchStatsGetSearchapplicationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getCustomerSearchApplicationStatsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetCustomerSearchApplicationStatsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the # of search sessions, % of successful sessions with a click query statistics for customer. **Note:** This API requires a standard end user account to execute.
   */
  cloudsearchStatsGetSession(
    req: operations.CloudsearchStatsGetSessionRequest,
    security: operations.CloudsearchStatsGetSessionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsearchStatsGetSessionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsearchStatsGetSessionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/stats/session";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudsearchStatsGetSessionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsearchStatsGetSessionResponse =
        new operations.CloudsearchStatsGetSessionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getCustomerSessionStatsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetCustomerSessionStatsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the users statistics for customer. **Note:** This API requires a standard end user account to execute.
   */
  cloudsearchStatsGetUser(
    req: operations.CloudsearchStatsGetUserRequest,
    security: operations.CloudsearchStatsGetUserSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsearchStatsGetUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsearchStatsGetUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/stats/user";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudsearchStatsGetUserSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsearchStatsGetUserResponse =
        new operations.CloudsearchStatsGetUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getCustomerUserStatsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetCustomerUserStatsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets indexed item statistics for a single data source. **Note:** This API requires a standard end user account to execute.
   */
  cloudsearchStatsIndexDatasourcesGet(
    req: operations.CloudsearchStatsIndexDatasourcesGetRequest,
    security: operations.CloudsearchStatsIndexDatasourcesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsearchStatsIndexDatasourcesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsearchStatsIndexDatasourcesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/stats/index/{name}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudsearchStatsIndexDatasourcesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsearchStatsIndexDatasourcesGetResponse =
        new operations.CloudsearchStatsIndexDatasourcesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getDataSourceIndexStatsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetDataSourceIndexStatsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the query statistics for search application. **Note:** This API requires a standard end user account to execute.
   */
  cloudsearchStatsQuerySearchapplicationsGet(
    req: operations.CloudsearchStatsQuerySearchapplicationsGetRequest,
    security: operations.CloudsearchStatsQuerySearchapplicationsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsearchStatsQuerySearchapplicationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsearchStatsQuerySearchapplicationsGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/stats/query/{name}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CloudsearchStatsQuerySearchapplicationsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsearchStatsQuerySearchapplicationsGetResponse =
        new operations.CloudsearchStatsQuerySearchapplicationsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSearchApplicationQueryStatsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetSearchApplicationQueryStatsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the # of search sessions, % of successful sessions with a click query statistics for search application. **Note:** This API requires a standard end user account to execute.
   */
  cloudsearchStatsSessionSearchapplicationsGet(
    req: operations.CloudsearchStatsSessionSearchapplicationsGetRequest,
    security: operations.CloudsearchStatsSessionSearchapplicationsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsearchStatsSessionSearchapplicationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsearchStatsSessionSearchapplicationsGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/stats/session/{name}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CloudsearchStatsSessionSearchapplicationsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsearchStatsSessionSearchapplicationsGetResponse =
        new operations.CloudsearchStatsSessionSearchapplicationsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSearchApplicationSessionStatsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetSearchApplicationSessionStatsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the users statistics for search application. **Note:** This API requires a standard end user account to execute.
   */
  cloudsearchStatsUserSearchapplicationsGet(
    req: operations.CloudsearchStatsUserSearchapplicationsGetRequest,
    security: operations.CloudsearchStatsUserSearchapplicationsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsearchStatsUserSearchapplicationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsearchStatsUserSearchapplicationsGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/stats/user/{name}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CloudsearchStatsUserSearchapplicationsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsearchStatsUserSearchapplicationsGetResponse =
        new operations.CloudsearchStatsUserSearchapplicationsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSearchApplicationUserStatsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetSearchApplicationUserStatsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
