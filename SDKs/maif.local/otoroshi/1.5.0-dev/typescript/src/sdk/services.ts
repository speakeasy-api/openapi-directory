/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Everything about Otoroshi service descriptors
 */
export class Services {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get all services
   *
   * @remarks
   * Get all services
   */
  allServices(
    config?: AxiosRequestConfig
  ): Promise<operations.AllServicesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/services";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AllServicesResponse =
        new operations.AllServicesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.services = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.services = utils.objectToClass(
              httpRes?.data,
              shared.Service,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a new service descriptor
   *
   * @remarks
   * Create a new service descriptor
   */
  createService(
    req: shared.Service,
    security: operations.CreateServiceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateServiceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.Service(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/services";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateServiceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateServiceResponse =
        new operations.CreateServiceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.service = utils.objectToClass(httpRes?.data, shared.Service);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a service descriptor error template
   *
   * @remarks
   * Update a service descriptor targets
   */
  createServiceTemplate(
    req: operations.CreateServiceTemplateRequest,
    security: operations.CreateServiceTemplateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateServiceTemplateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateServiceTemplateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/template",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "errorTemplate",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateServiceTemplateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateServiceTemplateResponse =
        new operations.CreateServiceTemplateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorTemplate = utils.objectToClass(
              httpRes?.data,
              shared.ErrorTemplate
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete a service descriptor
   *
   * @remarks
   * Delete a service descriptor
   */
  deleteService(
    req: operations.DeleteServiceRequest,
    security: operations.DeleteServiceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteServiceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteServiceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteServiceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteServiceResponse =
        new operations.DeleteServiceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleted = utils.objectToClass(httpRes?.data, shared.Deleted);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete a service descriptor error template
   *
   * @remarks
   * Delete a service descriptor error template
   */
  deleteServiceTemplate(
    req: operations.DeleteServiceTemplateRequest,
    security: operations.DeleteServiceTemplateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteServiceTemplateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteServiceTemplateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/template",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteServiceTemplateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteServiceTemplateResponse =
        new operations.DeleteServiceTemplateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleted = utils.objectToClass(httpRes?.data, shared.Deleted);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a service descriptor with a diff
   *
   * @remarks
   * Update a service descriptor with a diff
   */
  patchService(
    req: operations.PatchServiceRequest,
    security: operations.PatchServiceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchServiceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchServiceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PatchServiceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchServiceResponse =
        new operations.PatchServiceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.service = utils.objectToClass(httpRes?.data, shared.Service);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get a service descriptor
   *
   * @remarks
   * Get a service descriptor
   */
  service(
    req: operations.ServiceRequest,
    security: operations.ServiceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServiceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ServiceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ServiceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServiceResponse = new operations.ServiceResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.service = utils.objectToClass(httpRes?.data, shared.Service);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Add a target to a service descriptor
   *
   * @remarks
   * Add a target to a service descriptor
   */
  serviceAddTarget(
    req: operations.ServiceAddTargetRequest,
    security: operations.ServiceAddTargetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServiceAddTargetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ServiceAddTargetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/targets",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "target",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ServiceAddTargetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServiceAddTargetResponse =
        new operations.ServiceAddTargetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.targets = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.targets = utils.objectToClass(
              httpRes?.data,
              shared.Target,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete a service descriptor target
   *
   * @remarks
   * Delete a service descriptor target
   */
  serviceDeleteTarget(
    req: operations.ServiceDeleteTargetRequest,
    security: operations.ServiceDeleteTargetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServiceDeleteTargetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ServiceDeleteTargetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/targets",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ServiceDeleteTargetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServiceDeleteTargetResponse =
        new operations.ServiceDeleteTargetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.targets = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.targets = utils.objectToClass(
              httpRes?.data,
              shared.Target,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get all services descriptor for a group
   *
   * @remarks
   * Get all services descriptor for a group
   */
  serviceGroupServices(
    req: operations.ServiceGroupServicesRequest,
    security: operations.ServiceGroupServicesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServiceGroupServicesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ServiceGroupServicesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/groups/{serviceGroupId}/services",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ServiceGroupServicesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServiceGroupServicesResponse =
        new operations.ServiceGroupServicesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKeys = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.apiKeys = utils.objectToClass(
              httpRes?.data,
              shared.ApiKey,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get a service descriptor targets
   *
   * @remarks
   * Get a service descriptor targets
   */
  serviceTargets(
    req: operations.ServiceTargetsRequest,
    security: operations.ServiceTargetsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServiceTargetsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ServiceTargetsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/targets",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ServiceTargetsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServiceTargetsResponse =
        new operations.ServiceTargetsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.targets = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.targets = utils.objectToClass(
              httpRes?.data,
              shared.Target,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get a service descriptor error template
   *
   * @remarks
   * Get a service descriptor error template
   */
  serviceTemplate(
    req: operations.ServiceTemplateRequest,
    security: operations.ServiceTemplateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ServiceTemplateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ServiceTemplateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/template",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ServiceTemplateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ServiceTemplateResponse =
        new operations.ServiceTemplateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorTemplate = utils.objectToClass(
              httpRes?.data,
              shared.ErrorTemplate
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a service descriptor
   *
   * @remarks
   * Update a service descriptor
   */
  updateService(
    req: operations.UpdateServiceRequest,
    security: operations.UpdateServiceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateServiceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateServiceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "service",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateServiceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateServiceResponse =
        new operations.UpdateServiceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.service = utils.objectToClass(httpRes?.data, shared.Service);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a service descriptor targets
   *
   * @remarks
   * Update a service descriptor targets
   */
  updateServiceTargets(
    req: operations.UpdateServiceTargetsRequest,
    security: operations.UpdateServiceTargetsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateServiceTargetsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateServiceTargetsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/targets",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateServiceTargetsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateServiceTargetsResponse =
        new operations.UpdateServiceTargetsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.targets = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.targets = utils.objectToClass(
              httpRes?.data,
              shared.Target,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update an error template to a service descriptor
   *
   * @remarks
   * Update an error template to a service descriptor
   */
  updateServiceTemplate(
    req: operations.UpdateServiceTemplateRequest,
    security: operations.UpdateServiceTemplateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateServiceTemplateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateServiceTemplateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/template",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "errorTemplate",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateServiceTemplateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateServiceTemplateResponse =
        new operations.UpdateServiceTemplateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorTemplate = utils.objectToClass(
              httpRes?.data,
              shared.ErrorTemplate
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
