// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AutomationEntityAutomationEnum - Automation type
type AutomationEntityAutomationEnum string

const (
	AutomationEntityAutomationEnumCreateFolder   AutomationEntityAutomationEnum = "create_folder"
	AutomationEntityAutomationEnumRequestFile    AutomationEntityAutomationEnum = "request_file"
	AutomationEntityAutomationEnumRequestMove    AutomationEntityAutomationEnum = "request_move"
	AutomationEntityAutomationEnumCopyNewestFile AutomationEntityAutomationEnum = "copy_newest_file"
	AutomationEntityAutomationEnumDeleteFile     AutomationEntityAutomationEnum = "delete_file"
	AutomationEntityAutomationEnumCopyFile       AutomationEntityAutomationEnum = "copy_file"
	AutomationEntityAutomationEnumMoveFile       AutomationEntityAutomationEnum = "move_file"
)

func (e *AutomationEntityAutomationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "create_folder":
		fallthrough
	case "request_file":
		fallthrough
	case "request_move":
		fallthrough
	case "copy_newest_file":
		fallthrough
	case "delete_file":
		fallthrough
	case "copy_file":
		fallthrough
	case "move_file":
		*e = AutomationEntityAutomationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AutomationEntityAutomationEnum: %s", s)
	}
}

// AutomationEntityTriggerEnum - How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`.
type AutomationEntityTriggerEnum string

const (
	AutomationEntityTriggerEnumRealtime       AutomationEntityTriggerEnum = "realtime"
	AutomationEntityTriggerEnumDaily          AutomationEntityTriggerEnum = "daily"
	AutomationEntityTriggerEnumCustomSchedule AutomationEntityTriggerEnum = "custom_schedule"
	AutomationEntityTriggerEnumWebhook        AutomationEntityTriggerEnum = "webhook"
	AutomationEntityTriggerEnumEmail          AutomationEntityTriggerEnum = "email"
	AutomationEntityTriggerEnumAction         AutomationEntityTriggerEnum = "action"
)

func (e *AutomationEntityTriggerEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "realtime":
		fallthrough
	case "daily":
		fallthrough
	case "custom_schedule":
		fallthrough
	case "webhook":
		fallthrough
	case "email":
		fallthrough
	case "action":
		*e = AutomationEntityTriggerEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AutomationEntityTriggerEnum: %s", s)
	}
}

// AutomationEntity - List Automations
type AutomationEntity struct {
	// Automation type
	Automation *AutomationEntityAutomationEnum `json:"automation,omitempty"`
	// If set, this string in the destination path will be replaced with the value in `destination_replace_to`.
	DestinationReplaceFrom *string `json:"destination_replace_from,omitempty"`
	// If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special patterns here.
	DestinationReplaceTo *string `json:"destination_replace_to,omitempty"`
	// Destination Path
	Destinations *string `json:"destinations,omitempty"`
	// IDs of Groups for the Automation (i.e. who to Request File from)
	GroupIds []int `json:"group_ids,omitempty"`
	// Automation ID
	ID *int `json:"id,omitempty"`
	// If trigger is `daily`, this specifies how often to run this automation.  One of: `day`, `week`, `week_end`, `month`, `month_end`, `quarter`, `quarter_end`, `year`, `year_end`
	Interval *string `json:"interval,omitempty"`
	// If trigger is `daily`, date this automation will next run.
	NextProcessOn *string `json:"next_process_on,omitempty"`
	// Path on which this Automation runs.  Supports globs.
	Path *string `json:"path,omitempty"`
	// If trigger is `custom_schedule`, Custom schedule description for when the automation should be run.
	Schedule map[string]interface{} `json:"schedule,omitempty"`
	// Source Path
	Source *string `json:"source,omitempty"`
	// How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`.
	Trigger *AutomationEntityTriggerEnum `json:"trigger,omitempty"`
	// If trigger is `action`, this is the path to watch for the specified trigger actions.
	TriggerActionPath *string `json:"trigger_action_path,omitempty"`
	// If trigger is `action`, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy
	TriggerActions *string `json:"trigger_actions,omitempty"`
	// User ID of the Automation's creator.
	UserID *int `json:"user_id,omitempty"`
	// IDs of Users for the Automation (i.e. who to Request File from)
	UserIds []int `json:"user_ids,omitempty"`
	// A Hash of attributes specific to the automation type.
	Value map[string]interface{} `json:"value,omitempty"`
	// If trigger is `webhook`, this is the URL of the webhook to trigger the Automation.
	WebhookURL *string `json:"webhook_url,omitempty"`
}
