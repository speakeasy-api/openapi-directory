// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RoleGrantPrincipalEnum - Prinicipal/Identity for whom the role need to assigned.
type RoleGrantPrincipalEnum string

const (
	RoleGrantPrincipalEnumPrincipalUnspecified RoleGrantPrincipalEnum = "PRINCIPAL_UNSPECIFIED"
	RoleGrantPrincipalEnumConnectorSa          RoleGrantPrincipalEnum = "CONNECTOR_SA"
)

func (e RoleGrantPrincipalEnum) ToPointer() *RoleGrantPrincipalEnum {
	return &e
}

func (e *RoleGrantPrincipalEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PRINCIPAL_UNSPECIFIED":
		fallthrough
	case "CONNECTOR_SA":
		*e = RoleGrantPrincipalEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RoleGrantPrincipalEnum: %v", v)
	}
}

// RoleGrant - This configuration defines all the Cloud IAM roles that needs to be granted to a particular GCP resource for the selected prinicpal like service account. These configurations will let UI display to customers what IAM roles need to be granted by them. Or these configurations can be used by the UI to render a 'grant' button to do the same on behalf of the user.
type RoleGrant struct {
	// Template that UI can use to provide helper text to customers.
	HelperTextTemplate *string `json:"helperTextTemplate,omitempty"`
	// Prinicipal/Identity for whom the role need to assigned.
	Principal *RoleGrantPrincipalEnum `json:"principal,omitempty"`
	// Resource definition
	Resource *Resource `json:"resource,omitempty"`
	// List of roles that need to be granted.
	Roles []string `json:"roles,omitempty"`
}
