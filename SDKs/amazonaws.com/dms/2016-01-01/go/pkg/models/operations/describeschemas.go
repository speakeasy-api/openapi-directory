// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeSchemasXAmzTargetEnum
type DescribeSchemasXAmzTargetEnum string

const (
	DescribeSchemasXAmzTargetEnumAmazonDmSv20160101DescribeSchemas DescribeSchemasXAmzTargetEnum = "AmazonDMSv20160101.DescribeSchemas"
)

func (e DescribeSchemasXAmzTargetEnum) ToPointer() *DescribeSchemasXAmzTargetEnum {
	return &e
}

func (e *DescribeSchemasXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonDMSv20160101.DescribeSchemas":
		*e = DescribeSchemasXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeSchemasXAmzTargetEnum: %v", v)
	}
}

type DescribeSchemasRequest struct {
	DescribeSchemasMessage shared.DescribeSchemasMessage `request:"mediaType=application/json"`
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// Pagination limit
	MaxRecords        *string                       `queryParam:"style=form,explode=true,name=MaxRecords"`
	XAmzAlgorithm     *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeSchemasXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeSchemasResponse struct {
	ContentType string
	// Success
	DescribeSchemasResponse *shared.DescribeSchemasResponse
	// InvalidResourceStateFault
	InvalidResourceStateFault interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ResourceNotFoundFault
	ResourceNotFoundFault interface{}
}
