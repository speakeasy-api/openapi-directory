<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Hooks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a hook subscription
     * 
     * Creates a hook subscription to notify events in Truora plataform. Subscriptions broadcast data as events occur and additional subscription instances are not required in order to refresh the information. Events are received in an array as a JWT and are decoded using the signing key returned by this endpoint. Their structure is as follows:
     * 
     * ```
     * {
     *     "events": [
     *         {
     *             "event_action": "created",
     *             "event_type": "check",
     *             "id": "HKEdd28c569cf5eb74e45f0f4c092096e62c1c95ba2",
     *             "object": {
     *                 "check_id": "CHK9c39003424c521aec8566ce59e1ddc86",
     *                 "country": "CO",
     *                 "creation_date": "2020-04-01T23:00:30.581232281Z",
     *                 "homonym_score": 0,
     *                 "id_score": 0,
     *                 "national_id": "1151959906",
     *                 "previous_check": "CHK4ec814fecd147eaae41027081d7d5caf",
     *                 "score": -1,
     *                 "status": "not_started",
     *                 "type": "person",
     *                 "update_date": "2020-04-01T23:00:30.680937413Z"
     *             },
     *             "timestamp": "2020-04-01T23:00:30Z",
     *             "version": "1.0"
     *         }
     *     ],
     *     "iat": 1585782031,
     *     "iss": "Truora"
     * }
     * ```
     * 
     * Keep in mind that the object attribute varies depending on the event_type.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateHookInput $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateHookSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateHookResponse
     */
	public function createHook(
        \OpenAPI\OpenAPI\Models\Shared\CreateHookInput $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateHookSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateHookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/hooks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateHookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Hook', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Deletes hook
     * 
     * Deletes hook configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletHookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletHookSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletHookResponse
     */
	public function deletHook(
        \OpenAPI\OpenAPI\Models\Operations\DeletHookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeletHookSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletHookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/hooks/{hook_id}', \OpenAPI\OpenAPI\Models\Operations\DeletHookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletHookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->deletHook200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Lists all hooks
     * 
     * Lists all the configured hooks in your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListHookSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListHookResponse
     */
	public function listHook(
        \OpenAPI\OpenAPI\Models\Operations\ListHookSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListHookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/hooks');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListHookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hookOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HookOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates hook
     * 
     * Updates a hook configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateHookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateHookSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateHookResponse
     */
	public function updateHook(
        \OpenAPI\OpenAPI\Models\Operations\UpdateHookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateHookSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateHookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/hooks/{hook_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateHookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createHookInput", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateHookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/x-www-form-urlencoded')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}