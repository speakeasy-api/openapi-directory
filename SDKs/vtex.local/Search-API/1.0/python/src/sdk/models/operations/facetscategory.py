"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class FacetscategoryRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Describes the type of the content being sent."""  
    map: str = dataclasses.field(metadata={'query_param': { 'field_name': 'map', 'style': 'form', 'explode': True }})
    r"""Mapping of the term. It can be `c` for a category, `b` for a brand, or `specificationFilter_{specificationId}` for a specification. You need to include a map for each term you are searching for in the same term's order."""  
    term: str = dataclasses.field(metadata={'path_param': { 'field_name': 'term', 'style': 'simple', 'explode': False }})
    r"""Term used for the facet's search. You can search for as much term as you want. The term can be: `categoryId`, `brandId`, `specificationId`."""  
    from_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_from', 'style': 'form', 'explode': True }})
    r"""Starter page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page."""  
    to: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_to', 'style': 'form', 'explode': True }})
    r"""Finisher page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Facetscategory200ApplicationJSONBrands:
    
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Link') }})
    r"""Link of the facet."""  
    link_encoded: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LinkEncoded') }})
    r"""Enconded link of the facet."""  
    map: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Map') }})
    r"""Mapping of the facet."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""Brand name."""  
    position: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Position') }})
    r"""Position of the facet."""  
    quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Quantity') }})
    r"""Quantity of facets."""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Value') }})
    r"""Value of the facet."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Facetscategory200ApplicationJSONCategoriesTreesChildren:
    
    children: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Children') }})
    r"""Category children."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id') }})
    r"""Category ID."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Link') }})
    r"""Link of the facet."""  
    link_encoded: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LinkEncoded') }})
    r"""Encoded link of the facet."""  
    map: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Map') }})
    r"""Mapping of the facet."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""Category name."""  
    position: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Position') }})
    r"""Position of the facet."""  
    quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Quantity') }})
    r"""Quantity of the facets."""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Value') }})
    r"""Value of the facet."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Facetscategory200ApplicationJSONCategoriesTrees:
    
    children: list[Facetscategory200ApplicationJSONCategoriesTreesChildren] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Children') }})
    r"""Category children."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id') }})
    r"""Category ID."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Link') }})
    r"""Link of the facet."""  
    link_encoded: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LinkEncoded') }})
    r"""Encoded link of the facet."""  
    map: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Map') }})
    r"""Mapping of the facet."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""Category name."""  
    position: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Position') }})
    r"""Position of the facet."""  
    quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Quantity') }})
    r"""Quantity of the facets."""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Value') }})
    r"""Value of the facet."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Facetscategory200ApplicationJSONDepartments:
    
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Link') }})
    r"""Link of the facet."""  
    link_encoded: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LinkEncoded') }})
    r"""Encoded link of the facet."""  
    map: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Map') }})
    r"""Mapping of the facet."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""Category name."""  
    position: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Position') }})
    r"""Position of the facets."""  
    quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Quantity') }})
    r"""Quantity of facets."""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Value') }})
    r"""Value of the facet."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Facetscategory200ApplicationJSONSummaryBrands:
    r"""Brands' quantity of displayed and total items."""
    
    displayed_items: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DisplayedItems') }})
    r"""Quantity of displayed items."""  
    total_items: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalItems') }})
    r"""Quantity of total items."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Facetscategory200ApplicationJSONSummaryCategoriesTrees:
    r"""Category tree's quantity of displayed and total items."""
    
    displayed_items: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DisplayedItems') }})
    r"""Quantity of displayed items."""  
    total_items: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalItems') }})
    r"""Quantity of total items."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Facetscategory200ApplicationJSONSummaryDepartments:
    r"""Departments' quantity of displayed and total items."""
    
    displayed_items: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DisplayedItems') }})
    r"""Quantity of displayed items."""  
    total_items: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalItems') }})
    r"""Quantity of total items."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Facetscategory200ApplicationJSONSummaryPriceRanges:
    r"""Price ranges' quantity of displayed and total items."""
    
    displayed_items: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DisplayedItems') }})
    r"""Quantity of displayed items."""  
    total_items: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalItems') }})
    r"""Quantity of total items."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Facetscategory200ApplicationJSONSummary:
    r"""Summary of the facets."""
    
    brands: Facetscategory200ApplicationJSONSummaryBrands = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Brands') }})
    r"""Brands' quantity of displayed and total items."""  
    categories_trees: Facetscategory200ApplicationJSONSummaryCategoriesTrees = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CategoriesTrees') }})
    r"""Category tree's quantity of displayed and total items."""  
    departments: Facetscategory200ApplicationJSONSummaryDepartments = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Departments') }})
    r"""Departments' quantity of displayed and total items."""  
    price_ranges: Facetscategory200ApplicationJSONSummaryPriceRanges = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PriceRanges') }})
    r"""Price ranges' quantity of displayed and total items."""  
    specification_filters: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpecificationFilters') }})
    r"""Specification filters' quantity of displayed and total items."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Facetscategory200ApplicationJSON:
    r"""OK"""
    
    brands: list[Facetscategory200ApplicationJSONBrands] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Brands') }})
    r"""Array of general information about the brands."""  
    categories_trees: list[Facetscategory200ApplicationJSONCategoriesTrees] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CategoriesTrees') }})
    r"""Array of the category tree."""  
    departments: list[Facetscategory200ApplicationJSONDepartments] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Departments') }})
    r"""Array of general information about the categories."""  
    price_ranges: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PriceRanges') }})
    r"""Array with general information of the price ranges."""  
    specification_filters: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpecificationFilters') }})
    r"""Object with general information of specifications."""  
    summary: Facetscategory200ApplicationJSONSummary = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Summary') }})
    r"""Summary of the facets."""  
    

@dataclasses.dataclass
class FacetscategoryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    facetscategory_200_application_json_object: Optional[Facetscategory200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    