"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PendingTransaction = exports.PendingTransactionTypeEnum = exports.PendingTransactionStatusEnum = exports.PendingTransactionPendingTransactionSource = exports.PendingTransactionPendingTransactionSourceWireTransferInstruction = exports.PendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction = exports.PendingTransactionPendingTransactionSourceInboundFundsHold = exports.PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum = exports.PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum = exports.PendingTransactionPendingTransactionSourceCheckTransferInstruction = exports.PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum = exports.PendingTransactionPendingTransactionSourceCheckDepositInstruction = exports.PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum = exports.PendingTransactionPendingTransactionSourceCategoryEnum = exports.PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization = exports.PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum = exports.PendingTransactionPendingTransactionSourceCardAuthorization = exports.PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetails = exports.PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa = exports.PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = exports.PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = exports.PendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum = exports.PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum = exports.PendingTransactionPendingTransactionSourceACHTransferInstruction = exports.PendingTransactionPendingTransactionSourceAccountTransferInstruction = exports.PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum = exports.PendingTransactionCurrencyEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Pending Transaction's currency. This will match the currency on the Pending Transcation's Account.
 */
var PendingTransactionCurrencyEnum;
(function (PendingTransactionCurrencyEnum) {
    PendingTransactionCurrencyEnum["Cad"] = "CAD";
    PendingTransactionCurrencyEnum["Chf"] = "CHF";
    PendingTransactionCurrencyEnum["Eur"] = "EUR";
    PendingTransactionCurrencyEnum["Gbp"] = "GBP";
    PendingTransactionCurrencyEnum["Jpy"] = "JPY";
    PendingTransactionCurrencyEnum["Usd"] = "USD";
})(PendingTransactionCurrencyEnum = exports.PendingTransactionCurrencyEnum || (exports.PendingTransactionCurrencyEnum = {}));
/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
 */
var PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum;
(function (PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum) {
    PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum["Cad"] = "CAD";
    PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum["Chf"] = "CHF";
    PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum["Eur"] = "EUR";
    PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum["Gbp"] = "GBP";
    PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum["Jpy"] = "JPY";
    PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum["Usd"] = "USD";
})(PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum = exports.PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum || (exports.PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum = {}));
/**
 * A Account Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_instruction`.
 */
var PendingTransactionPendingTransactionSourceAccountTransferInstruction = /** @class */ (function (_super) {
    __extends(PendingTransactionPendingTransactionSourceAccountTransferInstruction, _super);
    function PendingTransactionPendingTransactionSourceAccountTransferInstruction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "amount" }),
        __metadata("design:type", Number)
    ], PendingTransactionPendingTransactionSourceAccountTransferInstruction.prototype, "amount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "currency" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceAccountTransferInstruction.prototype, "currency", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transfer_id" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceAccountTransferInstruction.prototype, "transferId", void 0);
    return PendingTransactionPendingTransactionSourceAccountTransferInstruction;
}(utils_1.SpeakeasyBase));
exports.PendingTransactionPendingTransactionSourceAccountTransferInstruction = PendingTransactionPendingTransactionSourceAccountTransferInstruction;
/**
 * A ACH Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_instruction`.
 */
var PendingTransactionPendingTransactionSourceACHTransferInstruction = /** @class */ (function (_super) {
    __extends(PendingTransactionPendingTransactionSourceACHTransferInstruction, _super);
    function PendingTransactionPendingTransactionSourceACHTransferInstruction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "amount" }),
        __metadata("design:type", Number)
    ], PendingTransactionPendingTransactionSourceACHTransferInstruction.prototype, "amount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transfer_id" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceACHTransferInstruction.prototype, "transferId", void 0);
    return PendingTransactionPendingTransactionSourceACHTransferInstruction;
}(utils_1.SpeakeasyBase));
exports.PendingTransactionPendingTransactionSourceACHTransferInstruction = PendingTransactionPendingTransactionSourceACHTransferInstruction;
/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
 */
var PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum;
(function (PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum) {
    PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum["Cad"] = "CAD";
    PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum["Chf"] = "CHF";
    PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum["Eur"] = "EUR";
    PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum["Gbp"] = "GBP";
    PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum["Jpy"] = "JPY";
    PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum["Usd"] = "USD";
})(PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum = exports.PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum || (exports.PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum = {}));
/**
 * The payment network used to process this card authorization
 */
var PendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum;
(function (PendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum) {
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum["Visa"] = "visa";
})(PendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum = exports.PendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum || (exports.PendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum = {}));
/**
 * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
 */
var PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum;
(function (PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum) {
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum["MailPhoneOrder"] = "mail_phone_order";
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum["Recurring"] = "recurring";
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum["Installment"] = "installment";
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum["UnknownMailPhoneOrder"] = "unknown_mail_phone_order";
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum["SecureElectronicCommerce"] = "secure_electronic_commerce";
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum["NonAuthenticatedSecurityTransactionAt3dsCapableMerchant"] = "non_authenticated_security_transaction_at_3ds_capable_merchant";
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum["NonAuthenticatedSecurityTransaction"] = "non_authenticated_security_transaction";
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum["NonSecureTransaction"] = "non_secure_transaction";
})(PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = exports.PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum || (exports.PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = {}));
/**
 * The method used to enter the cardholder's primary account number and card expiration date
 */
var PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum;
(function (PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum) {
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum["Manual"] = "manual";
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum["MagneticStripeNoCvv"] = "magnetic_stripe_no_cvv";
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum["OpticalCode"] = "optical_code";
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum["IntegratedCircuitCard"] = "integrated_circuit_card";
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum["Contactless"] = "contactless";
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum["CredentialOnFile"] = "credential_on_file";
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum["MagneticStripe"] = "magnetic_stripe";
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum["ContactlessMagneticStripe"] = "contactless_magnetic_stripe";
    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum["IntegratedCircuitCardNoCvv"] = "integrated_circuit_card_no_cvv";
})(PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = exports.PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum || (exports.PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = {}));
/**
 * Fields specific to the `visa` network
 */
var PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa = /** @class */ (function (_super) {
    __extends(PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa, _super);
    function PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "electronic_commerce_indicator" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa.prototype, "electronicCommerceIndicator", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "point_of_service_entry_mode" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa.prototype, "pointOfServiceEntryMode", void 0);
    return PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa;
}(utils_1.SpeakeasyBase));
exports.PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa = PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa;
/**
 * Fields specific to the `network`
 */
var PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetails = /** @class */ (function (_super) {
    __extends(PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetails, _super);
    function PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetails() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "visa" }),
        (0, class_transformer_1.Type)(function () {
            return PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa;
        }),
        __metadata("design:type", PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa)
    ], PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetails.prototype, "visa", void 0);
    return PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetails;
}(utils_1.SpeakeasyBase));
exports.PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetails = PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetails;
/**
 * A Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_authorization`.
 */
var PendingTransactionPendingTransactionSourceCardAuthorization = /** @class */ (function (_super) {
    __extends(PendingTransactionPendingTransactionSourceCardAuthorization, _super);
    function PendingTransactionPendingTransactionSourceCardAuthorization() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "amount" }),
        __metadata("design:type", Number)
    ], PendingTransactionPendingTransactionSourceCardAuthorization.prototype, "amount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "currency" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCardAuthorization.prototype, "currency", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "digital_wallet_token_id" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCardAuthorization.prototype, "digitalWalletTokenId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "merchant_acceptor_id" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCardAuthorization.prototype, "merchantAcceptorId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "merchant_category_code" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCardAuthorization.prototype, "merchantCategoryCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "merchant_city" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCardAuthorization.prototype, "merchantCity", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "merchant_country" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCardAuthorization.prototype, "merchantCountry", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "merchant_descriptor" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCardAuthorization.prototype, "merchantDescriptor", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCardAuthorization.prototype, "network", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network_details" }),
        (0, class_transformer_1.Type)(function () {
            return PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetails;
        }),
        __metadata("design:type", PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetails)
    ], PendingTransactionPendingTransactionSourceCardAuthorization.prototype, "networkDetails", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "real_time_decision_id" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCardAuthorization.prototype, "realTimeDecisionId", void 0);
    return PendingTransactionPendingTransactionSourceCardAuthorization;
}(utils_1.SpeakeasyBase));
exports.PendingTransactionPendingTransactionSourceCardAuthorization = PendingTransactionPendingTransactionSourceCardAuthorization;
/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
 */
var PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum;
(function (PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum) {
    PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum["Cad"] = "CAD";
    PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum["Chf"] = "CHF";
    PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum["Eur"] = "EUR";
    PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum["Gbp"] = "GBP";
    PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum["Jpy"] = "JPY";
    PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum["Usd"] = "USD";
})(PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum = exports.PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum || (exports.PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum = {}));
/**
 * A Deprecated Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_route_authorization`.
 */
var PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization = /** @class */ (function (_super) {
    __extends(PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization, _super);
    function PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "amount" }),
        __metadata("design:type", Number)
    ], PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization.prototype, "amount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "currency" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization.prototype, "currency", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "merchant_acceptor_id" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization.prototype, "merchantAcceptorId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "merchant_category_code" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization.prototype, "merchantCategoryCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "merchant_city" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization.prototype, "merchantCity", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "merchant_country" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization.prototype, "merchantCountry", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "merchant_descriptor" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization.prototype, "merchantDescriptor", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "merchant_state" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization.prototype, "merchantState", void 0);
    return PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization;
}(utils_1.SpeakeasyBase));
exports.PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization = PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization;
/**
 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
 */
var PendingTransactionPendingTransactionSourceCategoryEnum;
(function (PendingTransactionPendingTransactionSourceCategoryEnum) {
    PendingTransactionPendingTransactionSourceCategoryEnum["AccountTransferInstruction"] = "account_transfer_instruction";
    PendingTransactionPendingTransactionSourceCategoryEnum["AchTransferInstruction"] = "ach_transfer_instruction";
    PendingTransactionPendingTransactionSourceCategoryEnum["CardAuthorization"] = "card_authorization";
    PendingTransactionPendingTransactionSourceCategoryEnum["CheckDepositInstruction"] = "check_deposit_instruction";
    PendingTransactionPendingTransactionSourceCategoryEnum["CheckTransferInstruction"] = "check_transfer_instruction";
    PendingTransactionPendingTransactionSourceCategoryEnum["InboundFundsHold"] = "inbound_funds_hold";
    PendingTransactionPendingTransactionSourceCategoryEnum["CardRouteAuthorization"] = "card_route_authorization";
    PendingTransactionPendingTransactionSourceCategoryEnum["RealTimePaymentsTransferInstruction"] = "real_time_payments_transfer_instruction";
    PendingTransactionPendingTransactionSourceCategoryEnum["WireDrawdownPaymentInstruction"] = "wire_drawdown_payment_instruction";
    PendingTransactionPendingTransactionSourceCategoryEnum["WireTransferInstruction"] = "wire_transfer_instruction";
    PendingTransactionPendingTransactionSourceCategoryEnum["Other"] = "other";
})(PendingTransactionPendingTransactionSourceCategoryEnum = exports.PendingTransactionPendingTransactionSourceCategoryEnum || (exports.PendingTransactionPendingTransactionSourceCategoryEnum = {}));
/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
 */
var PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum;
(function (PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum) {
    PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum["Cad"] = "CAD";
    PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum["Chf"] = "CHF";
    PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum["Eur"] = "EUR";
    PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum["Gbp"] = "GBP";
    PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum["Jpy"] = "JPY";
    PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum["Usd"] = "USD";
})(PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum = exports.PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum || (exports.PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum = {}));
/**
 * A Check Deposit Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_instruction`.
 */
var PendingTransactionPendingTransactionSourceCheckDepositInstruction = /** @class */ (function (_super) {
    __extends(PendingTransactionPendingTransactionSourceCheckDepositInstruction, _super);
    function PendingTransactionPendingTransactionSourceCheckDepositInstruction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "amount" }),
        __metadata("design:type", Number)
    ], PendingTransactionPendingTransactionSourceCheckDepositInstruction.prototype, "amount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "back_image_file_id" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCheckDepositInstruction.prototype, "backImageFileId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "check_deposit_id" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCheckDepositInstruction.prototype, "checkDepositId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "currency" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCheckDepositInstruction.prototype, "currency", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "front_image_file_id" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCheckDepositInstruction.prototype, "frontImageFileId", void 0);
    return PendingTransactionPendingTransactionSourceCheckDepositInstruction;
}(utils_1.SpeakeasyBase));
exports.PendingTransactionPendingTransactionSourceCheckDepositInstruction = PendingTransactionPendingTransactionSourceCheckDepositInstruction;
/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
 */
var PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum;
(function (PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum) {
    PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum["Cad"] = "CAD";
    PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum["Chf"] = "CHF";
    PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum["Eur"] = "EUR";
    PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum["Gbp"] = "GBP";
    PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum["Jpy"] = "JPY";
    PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum["Usd"] = "USD";
})(PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum = exports.PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum || (exports.PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum = {}));
/**
 * A Check Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_instruction`.
 */
var PendingTransactionPendingTransactionSourceCheckTransferInstruction = /** @class */ (function (_super) {
    __extends(PendingTransactionPendingTransactionSourceCheckTransferInstruction, _super);
    function PendingTransactionPendingTransactionSourceCheckTransferInstruction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "amount" }),
        __metadata("design:type", Number)
    ], PendingTransactionPendingTransactionSourceCheckTransferInstruction.prototype, "amount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "currency" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCheckTransferInstruction.prototype, "currency", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transfer_id" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceCheckTransferInstruction.prototype, "transferId", void 0);
    return PendingTransactionPendingTransactionSourceCheckTransferInstruction;
}(utils_1.SpeakeasyBase));
exports.PendingTransactionPendingTransactionSourceCheckTransferInstruction = PendingTransactionPendingTransactionSourceCheckTransferInstruction;
/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.
 */
var PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum;
(function (PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum) {
    PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum["Cad"] = "CAD";
    PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum["Chf"] = "CHF";
    PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum["Eur"] = "EUR";
    PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum["Gbp"] = "GBP";
    PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum["Jpy"] = "JPY";
    PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum["Usd"] = "USD";
})(PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum = exports.PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum || (exports.PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum = {}));
/**
 * The status of the hold.
 */
var PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum;
(function (PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum) {
    PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum["Held"] = "held";
    PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum["Complete"] = "complete";
})(PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum = exports.PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum || (exports.PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum = {}));
/**
 * A Inbound Funds Hold object. This field will be present in the JSON response if and only if `category` is equal to `inbound_funds_hold`.
 */
var PendingTransactionPendingTransactionSourceInboundFundsHold = /** @class */ (function (_super) {
    __extends(PendingTransactionPendingTransactionSourceInboundFundsHold, _super);
    function PendingTransactionPendingTransactionSourceInboundFundsHold() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "amount" }),
        __metadata("design:type", Number)
    ], PendingTransactionPendingTransactionSourceInboundFundsHold.prototype, "amount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "automatically_releases_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], PendingTransactionPendingTransactionSourceInboundFundsHold.prototype, "automaticallyReleasesAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "currency" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceInboundFundsHold.prototype, "currency", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "held_transaction_id" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceInboundFundsHold.prototype, "heldTransactionId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "released_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], PendingTransactionPendingTransactionSourceInboundFundsHold.prototype, "releasedAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceInboundFundsHold.prototype, "status", void 0);
    return PendingTransactionPendingTransactionSourceInboundFundsHold;
}(utils_1.SpeakeasyBase));
exports.PendingTransactionPendingTransactionSourceInboundFundsHold = PendingTransactionPendingTransactionSourceInboundFundsHold;
/**
 * A Wire Drawdown Payment Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_instruction`.
 */
var PendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction = /** @class */ (function (_super) {
    __extends(PendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction, _super);
    function PendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "account_number" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction.prototype, "accountNumber", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "amount" }),
        __metadata("design:type", Number)
    ], PendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction.prototype, "amount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "message_to_recipient" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction.prototype, "messageToRecipient", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "routing_number" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction.prototype, "routingNumber", void 0);
    return PendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction;
}(utils_1.SpeakeasyBase));
exports.PendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction = PendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction;
/**
 * A Wire Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_instruction`.
 */
var PendingTransactionPendingTransactionSourceWireTransferInstruction = /** @class */ (function (_super) {
    __extends(PendingTransactionPendingTransactionSourceWireTransferInstruction, _super);
    function PendingTransactionPendingTransactionSourceWireTransferInstruction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "account_number" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceWireTransferInstruction.prototype, "accountNumber", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "amount" }),
        __metadata("design:type", Number)
    ], PendingTransactionPendingTransactionSourceWireTransferInstruction.prototype, "amount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "message_to_recipient" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceWireTransferInstruction.prototype, "messageToRecipient", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "routing_number" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceWireTransferInstruction.prototype, "routingNumber", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transfer_id" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSourceWireTransferInstruction.prototype, "transferId", void 0);
    return PendingTransactionPendingTransactionSourceWireTransferInstruction;
}(utils_1.SpeakeasyBase));
exports.PendingTransactionPendingTransactionSourceWireTransferInstruction = PendingTransactionPendingTransactionSourceWireTransferInstruction;
/**
 * This is an object giving more details on the network-level event that caused the Pending Transaction. For example, for a card transaction this lists the merchant's industry and location.
 */
var PendingTransactionPendingTransactionSource = /** @class */ (function (_super) {
    __extends(PendingTransactionPendingTransactionSource, _super);
    function PendingTransactionPendingTransactionSource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "account_transfer_instruction" }),
        (0, class_transformer_1.Type)(function () { return PendingTransactionPendingTransactionSourceAccountTransferInstruction; }),
        __metadata("design:type", PendingTransactionPendingTransactionSourceAccountTransferInstruction)
    ], PendingTransactionPendingTransactionSource.prototype, "accountTransferInstruction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ach_transfer_instruction" }),
        (0, class_transformer_1.Type)(function () { return PendingTransactionPendingTransactionSourceACHTransferInstruction; }),
        __metadata("design:type", PendingTransactionPendingTransactionSourceACHTransferInstruction)
    ], PendingTransactionPendingTransactionSource.prototype, "achTransferInstruction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "card_authorization" }),
        (0, class_transformer_1.Type)(function () { return PendingTransactionPendingTransactionSourceCardAuthorization; }),
        __metadata("design:type", PendingTransactionPendingTransactionSourceCardAuthorization)
    ], PendingTransactionPendingTransactionSource.prototype, "cardAuthorization", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "card_route_authorization" }),
        (0, class_transformer_1.Type)(function () { return PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization; }),
        __metadata("design:type", PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization)
    ], PendingTransactionPendingTransactionSource.prototype, "cardRouteAuthorization", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "category" }),
        __metadata("design:type", String)
    ], PendingTransactionPendingTransactionSource.prototype, "category", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "check_deposit_instruction" }),
        (0, class_transformer_1.Type)(function () { return PendingTransactionPendingTransactionSourceCheckDepositInstruction; }),
        __metadata("design:type", PendingTransactionPendingTransactionSourceCheckDepositInstruction)
    ], PendingTransactionPendingTransactionSource.prototype, "checkDepositInstruction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "check_transfer_instruction" }),
        (0, class_transformer_1.Type)(function () { return PendingTransactionPendingTransactionSourceCheckTransferInstruction; }),
        __metadata("design:type", PendingTransactionPendingTransactionSourceCheckTransferInstruction)
    ], PendingTransactionPendingTransactionSource.prototype, "checkTransferInstruction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "inbound_funds_hold" }),
        (0, class_transformer_1.Type)(function () { return PendingTransactionPendingTransactionSourceInboundFundsHold; }),
        __metadata("design:type", PendingTransactionPendingTransactionSourceInboundFundsHold)
    ], PendingTransactionPendingTransactionSource.prototype, "inboundFundsHold", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "wire_drawdown_payment_instruction" }),
        (0, class_transformer_1.Type)(function () {
            return PendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction;
        }),
        __metadata("design:type", PendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction)
    ], PendingTransactionPendingTransactionSource.prototype, "wireDrawdownPaymentInstruction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "wire_transfer_instruction" }),
        (0, class_transformer_1.Type)(function () { return PendingTransactionPendingTransactionSourceWireTransferInstruction; }),
        __metadata("design:type", PendingTransactionPendingTransactionSourceWireTransferInstruction)
    ], PendingTransactionPendingTransactionSource.prototype, "wireTransferInstruction", void 0);
    return PendingTransactionPendingTransactionSource;
}(utils_1.SpeakeasyBase));
exports.PendingTransactionPendingTransactionSource = PendingTransactionPendingTransactionSource;
/**
 * Whether the Pending Transaction has been confirmed and has an associated Transaction.
 */
var PendingTransactionStatusEnum;
(function (PendingTransactionStatusEnum) {
    PendingTransactionStatusEnum["Pending"] = "pending";
    PendingTransactionStatusEnum["Complete"] = "complete";
})(PendingTransactionStatusEnum = exports.PendingTransactionStatusEnum || (exports.PendingTransactionStatusEnum = {}));
/**
 * A constant representing the object's type. For this resource it will always be `pending_transaction`.
 */
var PendingTransactionTypeEnum;
(function (PendingTransactionTypeEnum) {
    PendingTransactionTypeEnum["PendingTransaction"] = "pending_transaction";
})(PendingTransactionTypeEnum = exports.PendingTransactionTypeEnum || (exports.PendingTransactionTypeEnum = {}));
/**
 * Pending Transactions are potential future additions and removals of money from your bank account.
 */
var PendingTransaction = /** @class */ (function (_super) {
    __extends(PendingTransaction, _super);
    function PendingTransaction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "account_id" }),
        __metadata("design:type", String)
    ], PendingTransaction.prototype, "accountId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "amount" }),
        __metadata("design:type", Number)
    ], PendingTransaction.prototype, "amount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "created_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], PendingTransaction.prototype, "createdAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "currency" }),
        __metadata("design:type", String)
    ], PendingTransaction.prototype, "currency", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], PendingTransaction.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], PendingTransaction.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "route_id" }),
        __metadata("design:type", String)
    ], PendingTransaction.prototype, "routeId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "route_type" }),
        __metadata("design:type", String)
    ], PendingTransaction.prototype, "routeType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "source" }),
        (0, class_transformer_1.Type)(function () { return PendingTransactionPendingTransactionSource; }),
        __metadata("design:type", PendingTransactionPendingTransactionSource)
    ], PendingTransaction.prototype, "source", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], PendingTransaction.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], PendingTransaction.prototype, "type", void 0);
    return PendingTransaction;
}(utils_1.SpeakeasyBase));
exports.PendingTransaction = PendingTransaction;
