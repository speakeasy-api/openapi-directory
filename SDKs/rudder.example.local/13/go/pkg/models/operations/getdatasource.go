// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetDataSourcePathParams struct {
	// Id of the data source
	DatasourceID string `pathParam:"style=simple,explode=false,name=datasourceId"`
}

type GetDataSourceRequest struct {
	PathParams GetDataSourcePathParams
}

// GetDataSource200ApplicationJSONActionEnum - The id of the action
type GetDataSource200ApplicationJSONActionEnum string

const (
	GetDataSource200ApplicationJSONActionEnumGetDataSource GetDataSource200ApplicationJSONActionEnum = "getDataSource"
)

func (e *GetDataSource200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "getDataSource":
		*e = GetDataSource200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDataSource200ApplicationJSONActionEnum: %s", s)
	}
}

type GetDataSource200ApplicationJSONData struct {
	Datasources []shared.Datasource `json:"datasources"`
}

// GetDataSource200ApplicationJSONResultEnum - Result of the request
type GetDataSource200ApplicationJSONResultEnum string

const (
	GetDataSource200ApplicationJSONResultEnumSuccess GetDataSource200ApplicationJSONResultEnum = "success"
	GetDataSource200ApplicationJSONResultEnumError   GetDataSource200ApplicationJSONResultEnum = "error"
)

func (e *GetDataSource200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = GetDataSource200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDataSource200ApplicationJSONResultEnum: %s", s)
	}
}

// GetDataSource200ApplicationJSON - Data source information
type GetDataSource200ApplicationJSON struct {
	// The id of the action
	Action GetDataSource200ApplicationJSONActionEnum `json:"action"`
	Data   GetDataSource200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result GetDataSource200ApplicationJSONResultEnum `json:"result"`
}

type GetDataSourceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Data source information
	GetDataSource200ApplicationJSONObject *GetDataSource200ApplicationJSON
}
