// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutRemediationExceptionsXAmzTargetEnum
type PutRemediationExceptionsXAmzTargetEnum string

const (
	PutRemediationExceptionsXAmzTargetEnumStarlingDoveServicePutRemediationExceptions PutRemediationExceptionsXAmzTargetEnum = "StarlingDoveService.PutRemediationExceptions"
)

func (e *PutRemediationExceptionsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "StarlingDoveService.PutRemediationExceptions":
		*e = PutRemediationExceptionsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutRemediationExceptionsXAmzTargetEnum: %s", s)
	}
}

type PutRemediationExceptionsRequest struct {
	PutRemediationExceptionsRequest shared.PutRemediationExceptionsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                   *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256               *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                  *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                        *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken               *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                   *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders               *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                      PutRemediationExceptionsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutRemediationExceptionsResponse struct {
	ContentType string
	// InsufficientPermissionsException
	InsufficientPermissionsException interface{}
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	// Success
	PutRemediationExceptionsResponse *shared.PutRemediationExceptionsResponse
	StatusCode                       int
	RawResponse                      *http.Response
}
