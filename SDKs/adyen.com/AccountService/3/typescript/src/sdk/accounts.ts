/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Accounts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Close an account
   *
   * @remarks
   * Closes an account. If an account is closed, you cannot process transactions, pay out its funds, or reopen it. If payments are made to a closed account, the payments are sent to your liable account.
   */
  postCloseAccount(
    req: shared.CloseAccountRequest,
    security: operations.PostCloseAccountSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostCloseAccountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CloseAccountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/closeAccount";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostCloseAccountSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostCloseAccountResponse =
        new operations.PostCloseAccountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 202].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.closeAccountResponse = utils.objectToClass(
              httpRes?.data,
              shared.CloseAccountResponse
            );
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceError = utils.objectToClass(
              httpRes?.data,
              shared.ServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an account
   *
   * @remarks
   * Creates an account under an account holder. An account holder can have [multiple accounts](https://docs.adyen.com/marketplaces-and-platforms/classic/account-holders-and-accounts#create-additional-accounts).
   */
  postCreateAccount(
    req: shared.CreateAccountRequest,
    security: operations.PostCreateAccountSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostCreateAccountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateAccountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/createAccount";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostCreateAccountSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostCreateAccountResponse =
        new operations.PostCreateAccountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 202].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAccountResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateAccountResponse
            );
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceError = utils.objectToClass(
              httpRes?.data,
              shared.ServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an account
   *
   * @remarks
   * Updates the description or payout schedule of an account.
   */
  postUpdateAccount(
    req: shared.UpdateAccountRequest,
    security: operations.PostUpdateAccountSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostUpdateAccountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.UpdateAccountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/updateAccount";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostUpdateAccountSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostUpdateAccountResponse =
        new operations.PostUpdateAccountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 202].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateAccountResponse = utils.objectToClass(
              httpRes?.data,
              shared.UpdateAccountResponse
            );
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceError = utils.objectToClass(
              httpRes?.data,
              shared.ServiceError
            );
          }
          break;
      }

      return res;
    });
  }
}
