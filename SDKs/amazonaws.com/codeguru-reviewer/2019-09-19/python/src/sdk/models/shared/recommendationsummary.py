"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import recommendationcategory_enum as shared_recommendationcategory_enum
from ..shared import rulemetadata as shared_rulemetadata
from ..shared import severity_enum as shared_severity_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecommendationSummary:
    r"""Information about recommendations."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    end_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndLine'), 'exclude': lambda f: f is None }})  
    file_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FilePath'), 'exclude': lambda f: f is None }})  
    recommendation_category: Optional[shared_recommendationcategory_enum.RecommendationCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecommendationCategory'), 'exclude': lambda f: f is None }})  
    recommendation_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecommendationId'), 'exclude': lambda f: f is None }})  
    rule_metadata: Optional[shared_rulemetadata.RuleMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleMetadata'), 'exclude': lambda f: f is None }})  
    severity: Optional[shared_severity_enum.SeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Severity'), 'exclude': lambda f: f is None }})  
    start_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartLine'), 'exclude': lambda f: f is None }})  
    