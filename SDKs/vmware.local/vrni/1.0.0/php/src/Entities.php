<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Entities 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Show cluster details
     * 
     * Show cluster details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetClusterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetClusterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetClusterResponse
     */
	public function getCluster(
        \OpenAPI\OpenAPI\Models\Operations\GetClusterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetClusterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetClusterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/clusters/{id}', \OpenAPI\OpenAPI\Models\Operations\GetClusterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetClusterRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetClusterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cluster = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Cluster', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show vCenter datacenter details
     * 
     * Show vCenter datacenter details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDatacenterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDatacenterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDatacenterResponse
     */
	public function getDatacenter(
        \OpenAPI\OpenAPI\Models\Operations\GetDatacenterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDatacenterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDatacenterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/vc-datacenters/{id}', \OpenAPI\OpenAPI\Models\Operations\GetDatacenterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDatacenterRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDatacenterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vcDatacenter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VCDatacenter', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show datastore details
     * 
     * Show datastore details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDatastoreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDatastoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDatastoreResponse
     */
	public function getDatastore(
        \OpenAPI\OpenAPI\Models\Operations\GetDatastoreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDatastoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDatastoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/datastores/{id}', \OpenAPI\OpenAPI\Models\Operations\GetDatastoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDatastoreRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDatastoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->datastore = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Datastore', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show distributed virtual portgroup details
     * 
     * Show distributed virtual portgroup details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualPortgroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualPortgroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualPortgroupResponse
     */
	public function getDistributedVirtualPortgroup(
        \OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualPortgroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualPortgroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualPortgroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/distributed-virtual-portgroups/{id}', \OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualPortgroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualPortgroupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualPortgroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributedVirtualPortgroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DistributedVirtualPortgroup', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show distributed virtual switch details
     * 
     * Show distributed virtual switch details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualSwitchResponse
     */
	public function getDistributedVirtualSwitch(
        \OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/distributed-virtual-switches/{id}', \OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualSwitchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistributedVirtualSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributedVirtualSwitch = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DistributedVirtualSwitch', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show firewall details
     * 
     * Show firewall details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFirewallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFirewallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFirewallResponse
     */
	public function getFirewall(
        \OpenAPI\OpenAPI\Models\Operations\GetFirewallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFirewallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFirewallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/firewalls/{id}', \OpenAPI\OpenAPI\Models\Operations\GetFirewallRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFirewallRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFirewallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->baseFirewallRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BaseFirewallRule', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show firewall rule details
     * 
     * Show firewall rule details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFirewallRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFirewallRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFirewallRuleResponse
     */
	public function getFirewallRule(
        \OpenAPI\OpenAPI\Models\Operations\GetFirewallRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFirewallRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFirewallRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/firewall-rules/{id}', \OpenAPI\OpenAPI\Models\Operations\GetFirewallRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFirewallRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFirewallRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->baseFirewallRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BaseFirewallRule', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show flow details
     * 
     * Show flow details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFlowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFlowSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFlowResponse
     */
	public function getFlow(
        \OpenAPI\OpenAPI\Models\Operations\GetFlowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFlowSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFlowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/flows/{id}', \OpenAPI\OpenAPI\Models\Operations\GetFlowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFlowRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFlowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flow = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Flow', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List flows
     * 
     * List flows
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFlowsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFlowsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFlowsResponse
     */
	public function getFlows(
        \OpenAPI\OpenAPI\Models\Operations\GetFlowsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFlowsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFlowsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/flows');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFlowsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFlowsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show folder details
     * 
     * Show folder details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFolderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFolderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFolderResponse
     */
	public function getFolder(
        \OpenAPI\OpenAPI\Models\Operations\GetFolderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFolderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFolderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/folders/{id}', \OpenAPI\OpenAPI\Models\Operations\GetFolderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFolderRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFolderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->folder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Folder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show host details
     * 
     * Show host details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHostRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHostSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHostResponse
     */
	public function getHost(
        \OpenAPI\OpenAPI\Models\Operations\GetHostRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetHostSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/hosts/{id}', \OpenAPI\OpenAPI\Models\Operations\GetHostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetHostRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->host = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Host', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show ip set details
     * 
     * Show ip set details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIPSetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIPSetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIPSetResponse
     */
	public function getIPSet(
        \OpenAPI\OpenAPI\Models\Operations\GetIPSetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetIPSetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIPSetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/ip-sets/{id}', \OpenAPI\OpenAPI\Models\Operations\GetIPSetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetIPSetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIPSetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->baseIPSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BaseIPSet', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show layer2 network details
     * 
     * Show layer2 network details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLayer2NetworkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLayer2NetworkSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLayer2NetworkResponse
     */
	public function getLayer2Network(
        \OpenAPI\OpenAPI\Models\Operations\GetLayer2NetworkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetLayer2NetworkSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLayer2NetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/layer2-networks/{id}', \OpenAPI\OpenAPI\Models\Operations\GetLayer2NetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetLayer2NetworkRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLayer2NetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->baseL2Network = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BaseL2Network', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show nsx manager details
     * 
     * Show nsx manager details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNSXManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNSXManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNSXManagerResponse
     */
	public function getNSXManager(
        \OpenAPI\OpenAPI\Models\Operations\GetNSXManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNSXManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNSXManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/nsx-managers/{id}', \OpenAPI\OpenAPI\Models\Operations\GetNSXManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNSXManagerRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNSXManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->baseEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BaseEntity', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get name of an entity
     * 
     * Get name of an entity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNameResponse
     */
	public function getName(
        \OpenAPI\OpenAPI\Models\Operations\GetNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/names/{id}', \OpenAPI\OpenAPI\Models\Operations\GetNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNameRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityName = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EntityName', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get names for entities
     * 
     * Get names for entities.Limit of 1000 entities in a single request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\NamesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamesResponse
     */
	public function getNames(
        \OpenAPI\OpenAPI\Models\Shared\NamesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNamesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/names');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->namesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NamesResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show problem details
     * 
     * Show problem event details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProblemEventRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProblemEventSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProblemEventResponse
     */
	public function getProblemEvent(
        \OpenAPI\OpenAPI\Models\Operations\GetProblemEventRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetProblemEventSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProblemEventResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/problems/{id}', \OpenAPI\OpenAPI\Models\Operations\GetProblemEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProblemEventRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProblemEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemEvent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemEvent', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show security group details
     * 
     * Show security group details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSecurityGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSecurityGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSecurityGroupResponse
     */
	public function getSecurityGroup(
        \OpenAPI\OpenAPI\Models\Operations\GetSecurityGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSecurityGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSecurityGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/security-groups/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSecurityGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSecurityGroupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSecurityGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->baseSecurityGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BaseSecurityGroup', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show security tag details
     * 
     * Show security tag details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSecurityTagRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSecurityTagSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSecurityTagResponse
     */
	public function getSecurityTag(
        \OpenAPI\OpenAPI\Models\Operations\GetSecurityTagRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSecurityTagSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSecurityTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/security-tags/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSecurityTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSecurityTagRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSecurityTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->securityTag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecurityTag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show service details
     * 
     * Show service details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetServiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetServiceResponse
     */
	public function getService(
        \OpenAPI\OpenAPI\Models\Operations\GetServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetServiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/services/{id}', \OpenAPI\OpenAPI\Models\Operations\GetServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetServiceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->baseService = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BaseService', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show service group details
     * 
     * Show service group details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetServiceGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetServiceGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetServiceGroupResponse
     */
	public function getServiceGroup(
        \OpenAPI\OpenAPI\Models\Operations\GetServiceGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetServiceGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetServiceGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/service-groups/{id}', \OpenAPI\OpenAPI\Models\Operations\GetServiceGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetServiceGroupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetServiceGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->group = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Group', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show vCenter manager details
     * 
     * Show vCenter manager details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVcenterManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVcenterManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVcenterManagerResponse
     */
	public function getVcenterManager(
        \OpenAPI\OpenAPI\Models\Operations\GetVcenterManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVcenterManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVcenterManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/vcenter-managers/{id}', \OpenAPI\OpenAPI\Models\Operations\GetVcenterManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVcenterManagerRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVcenterManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vCenterManager = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VCenterManager', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show vm details
     * 
     * Show vm details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVmRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVmSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVmResponse
     */
	public function getVm(
        \OpenAPI\OpenAPI\Models\Operations\GetVmRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVmSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/vms/{id}', \OpenAPI\OpenAPI\Models\Operations\GetVmRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVmRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->baseVirtualMachine = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BaseVirtualMachine', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show vmknic details
     * 
     * Show vmknic details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVmknicRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVmknicSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVmknicResponse
     */
	public function getVmknic(
        \OpenAPI\OpenAPI\Models\Operations\GetVmknicRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVmknicSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVmknicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/vmknics/{id}', \OpenAPI\OpenAPI\Models\Operations\GetVmknicRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVmknicRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVmknicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vmknic = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Vmknic', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show vnic details
     * 
     * Show vnic details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVnicRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVnicSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVnicResponse
     */
	public function getVnic(
        \OpenAPI\OpenAPI\Models\Operations\GetVnicRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVnicSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVnicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/vnics/{id}', \OpenAPI\OpenAPI\Models\Operations\GetVnicRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVnicRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVnicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->baseVnic = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BaseVnic', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List clusters
     * 
     * List clusters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListClustersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListClustersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListClustersResponse
     */
	public function listClusters(
        \OpenAPI\OpenAPI\Models\Operations\ListClustersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListClustersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListClustersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/clusters');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListClustersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListClustersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List vCenter datacenters
     * 
     * List vCenter datacenters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDatacentersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDatacentersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDatacentersResponse
     */
	public function listDatacenters(
        \OpenAPI\OpenAPI\Models\Operations\ListDatacentersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDatacentersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDatacentersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/vc-datacenters');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDatacentersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDatacentersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List datastores
     * 
     * List datastores
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDatastoresRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDatastoresSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDatastoresResponse
     */
	public function listDatastores(
        \OpenAPI\OpenAPI\Models\Operations\ListDatastoresRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDatastoresSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDatastoresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/datastores');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDatastoresRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDatastoresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List distributed virtual portgroups
     * 
     * List distributed virtual portgroups
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDistributedVirtualPortgroupsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDistributedVirtualPortgroupsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDistributedVirtualPortgroupsResponse
     */
	public function listDistributedVirtualPortgroups(
        \OpenAPI\OpenAPI\Models\Operations\ListDistributedVirtualPortgroupsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDistributedVirtualPortgroupsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDistributedVirtualPortgroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/distributed-virtual-portgroups');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDistributedVirtualPortgroupsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDistributedVirtualPortgroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List distributed virtual switches
     * 
     * List distributed virtual switches
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDistributedVirtualSwitchesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDistributedVirtualSwitchesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDistributedVirtualSwitchesResponse
     */
	public function listDistributedVirtualSwitches(
        \OpenAPI\OpenAPI\Models\Operations\ListDistributedVirtualSwitchesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDistributedVirtualSwitchesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDistributedVirtualSwitchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/distributed-virtual-switches');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDistributedVirtualSwitchesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDistributedVirtualSwitchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List firewall rules
     * 
     * List firewall rules
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFirewallRulesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFirewallRulesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFirewallRulesResponse
     */
	public function listFirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\ListFirewallRulesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListFirewallRulesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/firewall-rules');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFirewallRulesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List firewalls
     * 
     * List firewalls
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFirewallsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFirewallsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFirewallsResponse
     */
	public function listFirewalls(
        \OpenAPI\OpenAPI\Models\Operations\ListFirewallsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListFirewallsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFirewallsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/firewalls');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFirewallsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFirewallsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List folders
     * 
     * List folders
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFoldersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFoldersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFoldersResponse
     */
	public function listFolders(
        \OpenAPI\OpenAPI\Models\Operations\ListFoldersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListFoldersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFoldersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/folders');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFoldersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFoldersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List hosts
     * 
     * List hosts
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListHostsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListHostsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListHostsResponse
     */
	public function listHosts(
        \OpenAPI\OpenAPI\Models\Operations\ListHostsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListHostsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListHostsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/hosts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListHostsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListHostsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List ip sets
     * 
     * List ip sets
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIPSetsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIPSetsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListIPSetsResponse
     */
	public function listIPSets(
        \OpenAPI\OpenAPI\Models\Operations\ListIPSetsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListIPSetsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListIPSetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/ip-sets');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListIPSetsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListIPSetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List layer2 networks
     * 
     * List layer2 networks
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListLayer2NetworksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListLayer2NetworksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListLayer2NetworksResponse
     */
	public function listLayer2Networks(
        \OpenAPI\OpenAPI\Models\Operations\ListLayer2NetworksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListLayer2NetworksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListLayer2NetworksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/layer2-networks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListLayer2NetworksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListLayer2NetworksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List nsx managers
     * 
     * List nsx managers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListNSXManagersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListNSXManagersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListNSXManagersResponse
     */
	public function listNSXManagers(
        \OpenAPI\OpenAPI\Models\Operations\ListNSXManagersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListNSXManagersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListNSXManagersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/nsx-managers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListNSXManagersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListNSXManagersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List problems
     * 
     * List problem events.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListProblemEventsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListProblemEventsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListProblemEventsResponse
     */
	public function listProblemEvents(
        \OpenAPI\OpenAPI\Models\Operations\ListProblemEventsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListProblemEventsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListProblemEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/problems');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListProblemEventsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListProblemEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List security groups
     * 
     * List security groups
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSecurityGroupsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSecurityGroupsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSecurityGroupsResponse
     */
	public function listSecurityGroups(
        \OpenAPI\OpenAPI\Models\Operations\ListSecurityGroupsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSecurityGroupsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSecurityGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/security-groups');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSecurityGroupsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSecurityGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List security tags
     * 
     * List security tags
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSecurityTagsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSecurityTagsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSecurityTagsResponse
     */
	public function listSecurityTags(
        \OpenAPI\OpenAPI\Models\Operations\ListSecurityTagsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSecurityTagsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSecurityTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/security-tags');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSecurityTagsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSecurityTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List service groups
     * 
     * List service groups
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceGroupsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceGroupsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceGroupsResponse
     */
	public function listServiceGroups(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceGroupsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceGroupsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/service-groups');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceGroupsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List services
     * 
     * List services
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServicesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServicesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServicesResponse
     */
	public function listServices(
        \OpenAPI\OpenAPI\Models\Operations\ListServicesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServicesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/services');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServicesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List vCenter managers
     * 
     * List vCenter managers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVcenterManagersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVcenterManagersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListVcenterManagersResponse
     */
	public function listVcenterManagers(
        \OpenAPI\OpenAPI\Models\Operations\ListVcenterManagersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListVcenterManagersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListVcenterManagersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/vcenter-managers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListVcenterManagersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListVcenterManagersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List vmknics
     * 
     * List vmknics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVmknicsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVmknicsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListVmknicsResponse
     */
	public function listVmknics(
        \OpenAPI\OpenAPI\Models\Operations\ListVmknicsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListVmknicsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListVmknicsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/vmknics');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListVmknicsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListVmknicsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List vms
     * 
     * List vms
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVmsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVmsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListVmsResponse
     */
	public function listVms(
        \OpenAPI\OpenAPI\Models\Operations\ListVmsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListVmsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListVmsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/vms');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListVmsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListVmsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List vnics
     * 
     * List vnics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVnicsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVnicsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListVnicsResponse
     */
	public function listVnics(
        \OpenAPI\OpenAPI\Models\Operations\ListVnicsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListVnicsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListVnicsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/entities/vnics');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListVnicsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListVnicsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponseWithTime = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponseWithTime', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}