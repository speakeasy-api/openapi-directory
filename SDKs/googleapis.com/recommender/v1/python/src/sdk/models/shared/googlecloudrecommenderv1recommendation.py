"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudrecommenderv1impact as shared_googlecloudrecommenderv1impact
from ..shared import googlecloudrecommenderv1recommendationcontent as shared_googlecloudrecommenderv1recommendationcontent
from ..shared import googlecloudrecommenderv1recommendationinsightreference as shared_googlecloudrecommenderv1recommendationinsightreference
from ..shared import googlecloudrecommenderv1recommendationstateinfo as shared_googlecloudrecommenderv1recommendationstateinfo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudRecommenderV1RecommendationPriorityEnum(str, Enum):
    r"""Recommendation's priority."""
    PRIORITY_UNSPECIFIED = 'PRIORITY_UNSPECIFIED'
    P4 = 'P4'
    P3 = 'P3'
    P2 = 'P2'
    P1 = 'P1'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudRecommenderV1Recommendation:
    r"""A recommendation along with a suggested action. E.g., a rightsizing recommendation for an underutilized VM, IAM role recommendations, etc"""
    
    additional_impact: Optional[list[shared_googlecloudrecommenderv1impact.GoogleCloudRecommenderV1Impact]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalImpact'), 'exclude': lambda f: f is None }})
    r"""Optional set of additional impact that this recommendation may have when trying to optimize for the primary category. These may be positive or negative."""  
    associated_insights: Optional[list[shared_googlecloudrecommenderv1recommendationinsightreference.GoogleCloudRecommenderV1RecommendationInsightReference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associatedInsights'), 'exclude': lambda f: f is None }})
    r"""Insights that led to this recommendation."""  
    content: Optional[shared_googlecloudrecommenderv1recommendationcontent.GoogleCloudRecommenderV1RecommendationContent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content'), 'exclude': lambda f: f is None }})
    r"""Contains what resources are changing and how they are changing."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Free-form human readable summary in English. The maximum length is 500 characters."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""Fingerprint of the Recommendation. Provides optimistic locking when updating states."""  
    last_refresh_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastRefreshTime'), 'exclude': lambda f: f is None }})
    r"""Last time this recommendation was refreshed by the system that created it in the first place."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of recommendation."""  
    primary_impact: Optional[shared_googlecloudrecommenderv1impact.GoogleCloudRecommenderV1Impact] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryImpact'), 'exclude': lambda f: f is None }})
    r"""Contains the impact a recommendation can have for a given category."""  
    priority: Optional[GoogleCloudRecommenderV1RecommendationPriorityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priority'), 'exclude': lambda f: f is None }})
    r"""Recommendation's priority."""  
    recommender_subtype: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommenderSubtype'), 'exclude': lambda f: f is None }})
    r"""Contains an identifier for a subtype of recommendations produced for the same recommender. Subtype is a function of content and impact, meaning a new subtype might be added when significant changes to `content` or `primary_impact.category` are introduced. See the Recommenders section to see a list of subtypes for a given Recommender. Examples: For recommender = \\"google.iam.policy.Recommender\\", recommender_subtype can be one of \\"REMOVE_ROLE\\"/\\"REPLACE_ROLE\\" """  
    state_info: Optional[shared_googlecloudrecommenderv1recommendationstateinfo.GoogleCloudRecommenderV1RecommendationStateInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateInfo'), 'exclude': lambda f: f is None }})
    r"""Information for state. Contains state and metadata."""  
    xor_group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xorGroupId'), 'exclude': lambda f: f is None }})
    r"""Corresponds to a mutually exclusive group ID within a recommender. A non-empty ID indicates that the recommendation belongs to a mutually exclusive group. This means that only one recommendation within the group is suggested to be applied."""  
    