// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AccountMasterUserMasterUserDataTypeEnum string

const (
	AccountMasterUserMasterUserDataTypeEnumUser AccountMasterUserMasterUserDataTypeEnum = "user"
)

func (e AccountMasterUserMasterUserDataTypeEnum) ToPointer() *AccountMasterUserMasterUserDataTypeEnum {
	return &e
}

func (e *AccountMasterUserMasterUserDataTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = AccountMasterUserMasterUserDataTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountMasterUserMasterUserDataTypeEnum: %v", v)
	}
}

type AccountMasterUserMasterUserData struct {
	// ID of master user for account
	ID   *int64                                   `json:"id,omitempty"`
	Type *AccountMasterUserMasterUserDataTypeEnum `json:"type,omitempty"`
}

type AccountMasterUserMasterUser struct {
	Data *AccountMasterUserMasterUserData `json:"data,omitempty"`
}

type AccountMasterUser struct {
	MasterUser *AccountMasterUserMasterUser `json:"masterUser,omitempty"`
}

// AccountTypeEnum - Type of item. "account"
type AccountTypeEnum string

const (
	AccountTypeEnumAccount AccountTypeEnum = "account"
)

func (e AccountTypeEnum) ToPointer() *AccountTypeEnum {
	return &e
}

func (e *AccountTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "account":
		*e = AccountTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountTypeEnum: %v", v)
	}
}

// Account - Object contains all account properties.
type Account struct {
	Attributes *AccountAttributes `json:"attributes,omitempty"`
	// Account ID
	ID            *int               `json:"id,omitempty"`
	Relationships *AccountMasterUser `json:"relationships,omitempty"`
	// Type of item. "account"
	Type *AccountTypeEnum `json:"type,omitempty"`
}
