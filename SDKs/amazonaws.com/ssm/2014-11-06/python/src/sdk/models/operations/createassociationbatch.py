"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createassociationbatchrequest as shared_createassociationbatchrequest
from ..shared import createassociationbatchresult as shared_createassociationbatchresult
from enum import Enum
from typing import Any, Optional

class CreateAssociationBatchXAmzTargetEnum(str, Enum):
    AMAZON_SSM_CREATE_ASSOCIATION_BATCH = 'AmazonSSM.CreateAssociationBatch'


@dataclasses.dataclass
class CreateAssociationBatchRequest:
    
    create_association_batch_request: shared_createassociationbatchrequest.CreateAssociationBatchRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: CreateAssociationBatchXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateAssociationBatchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    association_limit_exceeded: Optional[Any] = dataclasses.field(default=None)
    r"""AssociationLimitExceeded"""  
    create_association_batch_result: Optional[shared_createassociationbatchresult.CreateAssociationBatchResult] = dataclasses.field(default=None)
    r"""Success"""  
    duplicate_instance_id: Optional[Any] = dataclasses.field(default=None)
    r"""DuplicateInstanceId"""  
    internal_server_error: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerError"""  
    invalid_document: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidDocument"""  
    invalid_document_version: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidDocumentVersion"""  
    invalid_instance_id: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidInstanceId"""  
    invalid_output_location: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidOutputLocation"""  
    invalid_parameters: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameters"""  
    invalid_schedule: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidSchedule"""  
    invalid_target: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidTarget"""  
    invalid_target_maps: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidTargetMaps"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    unsupported_platform_type: Optional[Any] = dataclasses.field(default=None)
    r"""UnsupportedPlatformType"""  
    