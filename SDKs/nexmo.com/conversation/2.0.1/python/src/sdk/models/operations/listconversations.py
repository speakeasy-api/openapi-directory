"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _links_conversations_list as shared__links_conversations_list
from ..shared import order_enum as shared_order_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ListConversationsRequest:
    
    date_end: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'date_end', 'style': 'form', 'explode': True }})
    r"""Return the records that occurred before this point in time."""  
    date_start: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'date_start', 'style': 'form', 'explode': True }})
    r"""Return the records that occurred after this point in time."""  
    order: Optional[shared_order_enum.OrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})
    r"""Return the records in ascending or descending order."""  
    page_size: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""Return this amount of records in the response"""  
    record_index: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'record_index', 'style': 'form', 'explode': True }})
    r"""Return calls from this index in the response"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListConversations200ApplicationJSONEmbeddedConversationsLinksSelf:
    
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})
    r"""A link towards a conversation included in Conversation API"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListConversations200ApplicationJSONEmbeddedConversationsLinks:
    
    self_: Optional[ListConversations200ApplicationJSONEmbeddedConversationsLinksSelf] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListConversations200ApplicationJSONEmbeddedConversations:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Unique name for a conversation"""  
    uuid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid') }})
    r"""The unique identifier for this conversation"""  
    links: Optional[ListConversations200ApplicationJSONEmbeddedConversationsLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListConversations200ApplicationJSONEmbedded:
    r"""A list of conversation objects. See the [get details of a specific conversation](#retrieveConversation) response fields for a description of the nested objects"""
    
    conversations: list[ListConversations200ApplicationJSONEmbeddedConversations] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversations') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListConversations200ApplicationJSON:
    r"""List Conversations Response Payload Object."""
    
    embedded: ListConversations200ApplicationJSONEmbedded = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_embedded') }})
    r"""A list of conversation objects. See the [get details of a specific conversation](#retrieveConversation) response fields for a description of the nested objects"""  
    links: shared__links_conversations_list.LinksConversationsList = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links') }})
    r"""A series of links between resources in this API in the http://stateless.co/hal_specification.html."""  
    count: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count') }})
    r"""The total number of records returned by your request."""  
    page_size: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size') }})
    r"""The amount of records returned in this response"""  
    record_index: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('record_index') }})
    r"""Return `page_size` amount of conversations from this index in the response. That is, if your request returns 300 conversations, set `record_index` to 5 in order to return conversations 50 to 59. The default value is 0. That is, the first `page_size` calls."""  
    

@dataclasses.dataclass
class ListConversationsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_conversations_200_application_json_object: Optional[ListConversations200ApplicationJSON] = dataclasses.field(default=None)
    r"""List Conversations Response Payload Object."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    