// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
)

type ProductRetrieveSecurity struct {
	UserKey string `security:"scheme,type=apiKey,subtype=header,name=user_key"`
}

type ProductRetrieveRequest struct {
	// ID of the ProductOrder as returned from a /product/buy call - 32 character hex value
	OrderID string `pathParam:"style=simple,explode=false,name=orderId"`
}

// ProductRetrieveDefaultApplicationJSON - Detailed information about the error
type ProductRetrieveDefaultApplicationJSON struct {
	Code    int     `json:"code"`
	Fault   *string `json:"fault,omitempty"`
	Message string  `json:"message"`
	Tag     string  `json:"tag"`
}

type ProductRetrieve200ApplicationJSON2 struct {
	Data           map[string]interface{} `json:"data"`
	MimeType       string                 `json:"mimeType"`
	ProductOrderID string                 `json:"productOrderId"`
	URI            string                 `json:"uri"`
}

type ProductRetrieve200ApplicationJSON1 struct {
	ChildOrders    []string `json:"childOrders,omitempty"`
	Data           *string  `json:"data,omitempty"`
	MimeType       string   `json:"mimeType"`
	ProductOrderID string   `json:"productOrderId"`
	URI            string   `json:"uri"`
}

type ProductRetrieve200ApplicationJSONType string

const (
	ProductRetrieve200ApplicationJSONTypeProductRetrieve200ApplicationJSON1 ProductRetrieve200ApplicationJSONType = "ProductRetrieve_200ApplicationJSON_1"
	ProductRetrieve200ApplicationJSONTypeProductRetrieve200ApplicationJSON2 ProductRetrieve200ApplicationJSONType = "ProductRetrieve_200ApplicationJSON_2"
)

type ProductRetrieve200ApplicationJSON struct {
	ProductRetrieve200ApplicationJSON1 *ProductRetrieve200ApplicationJSON1
	ProductRetrieve200ApplicationJSON2 *ProductRetrieve200ApplicationJSON2

	Type ProductRetrieve200ApplicationJSONType
}

func CreateProductRetrieve200ApplicationJSONProductRetrieve200ApplicationJSON1(productRetrieve200ApplicationJSON1 ProductRetrieve200ApplicationJSON1) ProductRetrieve200ApplicationJSON {
	typ := ProductRetrieve200ApplicationJSONTypeProductRetrieve200ApplicationJSON1

	return ProductRetrieve200ApplicationJSON{
		ProductRetrieve200ApplicationJSON1: &productRetrieve200ApplicationJSON1,
		Type:                               typ,
	}
}

func CreateProductRetrieve200ApplicationJSONProductRetrieve200ApplicationJSON2(productRetrieve200ApplicationJSON2 ProductRetrieve200ApplicationJSON2) ProductRetrieve200ApplicationJSON {
	typ := ProductRetrieve200ApplicationJSONTypeProductRetrieve200ApplicationJSON2

	return ProductRetrieve200ApplicationJSON{
		ProductRetrieve200ApplicationJSON2: &productRetrieve200ApplicationJSON2,
		Type:                               typ,
	}
}

func (u *ProductRetrieve200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	productRetrieve200ApplicationJSON1 := new(ProductRetrieve200ApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&productRetrieve200ApplicationJSON1); err == nil {
		u.ProductRetrieve200ApplicationJSON1 = productRetrieve200ApplicationJSON1
		u.Type = ProductRetrieve200ApplicationJSONTypeProductRetrieve200ApplicationJSON1
		return nil
	}

	productRetrieve200ApplicationJSON2 := new(ProductRetrieve200ApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&productRetrieve200ApplicationJSON2); err == nil {
		u.ProductRetrieve200ApplicationJSON2 = productRetrieve200ApplicationJSON2
		u.Type = ProductRetrieve200ApplicationJSONTypeProductRetrieve200ApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ProductRetrieve200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ProductRetrieve200ApplicationJSON1 != nil {
		return json.Marshal(u.ProductRetrieve200ApplicationJSON1)
	}

	if u.ProductRetrieve200ApplicationJSON2 != nil {
		return json.Marshal(u.ProductRetrieve200ApplicationJSON2)
	}

	return nil, nil
}

type ProductRetrieveResponse struct {
	ContentType string
	// Details for retrieval of a delivered product
	ProductRetrieve200ApplicationJSONOneOf *ProductRetrieve200ApplicationJSON
	// Detailed information about the error
	ProductRetrieveDefaultApplicationJSONObject *ProductRetrieveDefaultApplicationJSON
	StatusCode                                  int
	RawResponse                                 *http.Response
}
