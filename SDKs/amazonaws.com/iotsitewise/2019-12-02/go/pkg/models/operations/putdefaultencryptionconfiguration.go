// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutDefaultEncryptionConfigurationRequestBodyEncryptionTypeEnum - The type of encryption used for the encryption configuration.
type PutDefaultEncryptionConfigurationRequestBodyEncryptionTypeEnum string

const (
	PutDefaultEncryptionConfigurationRequestBodyEncryptionTypeEnumSitewiseDefaultEncryption PutDefaultEncryptionConfigurationRequestBodyEncryptionTypeEnum = "SITEWISE_DEFAULT_ENCRYPTION"
	PutDefaultEncryptionConfigurationRequestBodyEncryptionTypeEnumKmsBasedEncryption        PutDefaultEncryptionConfigurationRequestBodyEncryptionTypeEnum = "KMS_BASED_ENCRYPTION"
)

func (e PutDefaultEncryptionConfigurationRequestBodyEncryptionTypeEnum) ToPointer() *PutDefaultEncryptionConfigurationRequestBodyEncryptionTypeEnum {
	return &e
}

func (e *PutDefaultEncryptionConfigurationRequestBodyEncryptionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SITEWISE_DEFAULT_ENCRYPTION":
		fallthrough
	case "KMS_BASED_ENCRYPTION":
		*e = PutDefaultEncryptionConfigurationRequestBodyEncryptionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutDefaultEncryptionConfigurationRequestBodyEncryptionTypeEnum: %v", v)
	}
}

type PutDefaultEncryptionConfigurationRequestBody struct {
	// The type of encryption used for the encryption configuration.
	EncryptionType PutDefaultEncryptionConfigurationRequestBodyEncryptionTypeEnum `json:"encryptionType"`
	// The Key ID of the customer managed key used for KMS encryption. This is required if you use <code>KMS_BASED_ENCRYPTION</code>.
	KmsKeyID *string `json:"kmsKeyId,omitempty"`
}

type PutDefaultEncryptionConfigurationRequest struct {
	RequestBody       PutDefaultEncryptionConfigurationRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type PutDefaultEncryptionConfigurationResponse struct {
	// ConflictingOperationException
	ConflictingOperationException interface{}
	ContentType                   string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// Success
	PutDefaultEncryptionConfigurationResponse *shared.PutDefaultEncryptionConfigurationResponse
	StatusCode                                int
	RawResponse                               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
