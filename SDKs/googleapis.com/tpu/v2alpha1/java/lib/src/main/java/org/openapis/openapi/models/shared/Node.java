/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Node - A TPU instance.
 */
public class Node {
    /**
     * A TPU accelerator configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceleratorConfig")
    public AcceleratorConfig acceleratorConfig;

    public Node withAcceleratorConfig(AcceleratorConfig acceleratorConfig) {
        this.acceleratorConfig = acceleratorConfig;
        return this;
    }
    
    /**
     * The type of hardware accelerators associated with this node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceleratorType")
    public String acceleratorType;

    public Node withAcceleratorType(String acceleratorType) {
        this.acceleratorType = acceleratorType;
        return this;
    }
    
    /**
     * Output only. The API version that created this Node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apiVersion")
    public NodeApiVersionEnum apiVersion;

    public Node withApiVersion(NodeApiVersionEnum apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
    
    /**
     * The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cidrBlock")
    public String cidrBlock;

    public Node withCidrBlock(String cidrBlock) {
        this.cidrBlock = cidrBlock;
        return this;
    }
    
    /**
     * Output only. The time when the node was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public Node withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * The additional data disks for the Node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataDisks")
    public AttachedDisk[] dataDisks;

    public Node withDataDisks(AttachedDisk[] dataDisks) {
        this.dataDisks = dataDisks;
        return this;
    }
    
    /**
     * The user-supplied description of the TPU. Maximum of 512 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Node withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The health status of the TPU node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("health")
    public NodeHealthEnum health;

    public Node withHealth(NodeHealthEnum health) {
        this.health = health;
        return this;
    }
    
    /**
     * Output only. If this field is populated, it contains a description of why the TPU Node is unhealthy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("healthDescription")
    public String healthDescription;

    public Node withHealthDescription(String healthDescription) {
        this.healthDescription = healthDescription;
        return this;
    }
    
    /**
     * Output only. The unique identifier for the TPU Node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Node withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Resource labels to represent user-provided metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public Node withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, String> metadata;

    public Node withMetadata(java.util.Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Output only. Immutable. The name of the TPU.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Node withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Network related configurations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkConfig")
    public NetworkConfig networkConfig;

    public Node withNetworkConfig(NetworkConfig networkConfig) {
        this.networkConfig = networkConfig;
        return this;
    }
    
    /**
     * Output only. The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkEndpoints")
    public NetworkEndpoint[] networkEndpoints;

    public Node withNetworkEndpoints(NetworkEndpoint[] networkEndpoints) {
        this.networkEndpoints = networkEndpoints;
        return this;
    }
    
    /**
     * Output only. The qualified name of the QueuedResource that requested this Node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queuedResource")
    public String queuedResource;

    public Node withQueuedResource(String queuedResource) {
        this.queuedResource = queuedResource;
        return this;
    }
    
    /**
     * Required. The runtime version running in the Node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeVersion")
    public String runtimeVersion;

    public Node withRuntimeVersion(String runtimeVersion) {
        this.runtimeVersion = runtimeVersion;
        return this;
    }
    
    /**
     * Sets the scheduling options for this node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedulingConfig")
    public SchedulingConfig schedulingConfig;

    public Node withSchedulingConfig(SchedulingConfig schedulingConfig) {
        this.schedulingConfig = schedulingConfig;
        return this;
    }
    
    /**
     * A service account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAccount")
    public ServiceAccount serviceAccount;

    public Node withServiceAccount(ServiceAccount serviceAccount) {
        this.serviceAccount = serviceAccount;
        return this;
    }
    
    /**
     * A set of Shielded Instance options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shieldedInstanceConfig")
    public ShieldedInstanceConfig shieldedInstanceConfig;

    public Node withShieldedInstanceConfig(ShieldedInstanceConfig shieldedInstanceConfig) {
        this.shieldedInstanceConfig = shieldedInstanceConfig;
        return this;
    }
    
    /**
     * Output only. The current state for the TPU Node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public NodeStateEnum state;

    public Node withState(NodeStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. The Symptoms that have occurred to the TPU Node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("symptoms")
    public Symptom[] symptoms;

    public Node withSymptoms(Symptom[] symptoms) {
        this.symptoms = symptoms;
        return this;
    }
    
    /**
     * Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public String[] tags;

    public Node withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    public Node(){}
}
