<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class CreateAuthorizerRequestBody
{
    /**
     * Represents an Amazon Resource Name (ARN).
     * 
     * @var ?string $authorizerCredentialsArn
     */
	#[\JMS\Serializer\Annotation\SerializedName('authorizerCredentialsArn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $authorizerCredentialsArn = null;
    
    /**
     * A string with a length between [1-64].
     * 
     * @var ?string $authorizerPayloadFormatVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('authorizerPayloadFormatVersion')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $authorizerPayloadFormatVersion = null;
    
    /**
     * An integer with a value between [0-3600].
     * 
     * @var ?int $authorizerResultTtlInSeconds
     */
	#[\JMS\Serializer\Annotation\SerializedName('authorizerResultTtlInSeconds')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $authorizerResultTtlInSeconds = null;
    
    /**
     * The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\CreateAuthorizerRequestBodyAuthorizerTypeEnum $authorizerType
     */
	#[\JMS\Serializer\Annotation\SerializedName('authorizerType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\CreateAuthorizerRequestBodyAuthorizerTypeEnum>')]
    public CreateAuthorizerRequestBodyAuthorizerTypeEnum $authorizerType;
    
    /**
     * A string representation of a URI with a length between [1-2048].
     * 
     * @var ?string $authorizerUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('authorizerUri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $authorizerUri = null;
    
    /**
     * Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>
     * 
     * @var ?bool $enableSimpleResponses
     */
	#[\JMS\Serializer\Annotation\SerializedName('enableSimpleResponses')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $enableSimpleResponses = null;
    
    /**
     * The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.
     * 
     * @var array<string> $identitySource
     */
	#[\JMS\Serializer\Annotation\SerializedName('identitySource')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    public array $identitySource;
    
    /**
     * A string with a length between [0-1024].
     * 
     * @var ?string $identityValidationExpression
     */
	#[\JMS\Serializer\Annotation\SerializedName('identityValidationExpression')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $identityValidationExpression = null;
    
    /**
     * Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateAuthorizerRequestBodyJwtConfiguration $jwtConfiguration
     */
	#[\JMS\Serializer\Annotation\SerializedName('jwtConfiguration')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\CreateAuthorizerRequestBodyJwtConfiguration')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreateAuthorizerRequestBodyJwtConfiguration $jwtConfiguration = null;
    
    /**
     * A string with a length between [1-128].
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
	public function __construct()
	{
		$this->authorizerCredentialsArn = null;
		$this->authorizerPayloadFormatVersion = null;
		$this->authorizerResultTtlInSeconds = null;
		$this->authorizerType = \OpenAPI\OpenAPI\Models\Operations\CreateAuthorizerRequestBodyAuthorizerTypeEnum::REQUEST;
		$this->authorizerUri = null;
		$this->enableSimpleResponses = null;
		$this->identitySource = [];
		$this->identityValidationExpression = null;
		$this->jwtConfiguration = null;
		$this->name = "";
	}
}
