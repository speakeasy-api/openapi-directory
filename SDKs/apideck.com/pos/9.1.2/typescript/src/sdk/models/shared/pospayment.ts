/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CurrencyEnum } from "./currencyenum";
import { PaymentCard, PaymentCardInput } from "./paymentcard";
import { PosBankAccount } from "./posbankaccount";
import { ServiceCharge, ServiceChargeInput } from "./servicecharge";
import { Expose, Transform, Type } from "class-transformer";

export class PosPaymentCardDetailsInput extends SpeakeasyBase {
  /**
   * A card's non-confidential details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "card" })
  @Type(() => PaymentCardInput)
  card?: PaymentCardInput;
}

/**
 * Cash details for this payment
 */
export class PosPaymentCashDetails extends SpeakeasyBase {
  /**
   * The amount of cash given by the customer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: any;

  /**
   * The amount of change due back to the buyer. For Square: this read-only field is calculated from the amount_money and buyer_supplied_money fields.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "charge_back_amount" })
  chargeBackAmount?: any;
}

/**
 * The type of external payment the seller received. It can be one of the following:
 *
 * @remarks
 * - CHECK - Paid using a physical check.
 * - BANK_TRANSFER - Paid using external bank transfer.
 * - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
 * - CRYPTO - Paid using a crypto currency.
 * - SQUARE_CASH - Paid using Square Cash App.
 * - SOCIAL - Paid using peer-to-peer payment applications.
 * - EXTERNAL - A third-party application gathered this payment outside of Square.
 * - EMONEY - Paid using an E-money provider.
 * - CARD - A credit or debit card that Square does not support.
 * - STORED_BALANCE - Use for house accounts, store credit, and so forth.
 * - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
 * - OTHER - A type not listed here.
 */
export enum PosPaymentExternalDetailsTypeEnum {
  Check = "check",
  BankTransfer = "bank_transfer",
  OtherGiftCard = "other_gift_card",
  Crypto = "crypto",
  SquareCash = "square_cash",
  Social = "social",
  External = "external",
  Emoney = "emoney",
  Card = "card",
  StoredBalance = "stored_balance",
  FoodVoucher = "food_voucher",
  Other = "other",
}

/**
 * Details about an external payment.
 */
export class PosPaymentExternalDetails extends SpeakeasyBase {
  /**
   * A description of the external payment source. For example,
   *
   * @remarks
   * "Food Delivery Service".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  source: string;

  /**
   * The fees paid to the source. The amount minus this field is the net amount seller receives.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source_fee_amount" })
  sourceFeeAmount?: number;

  /**
   * An ID to associate the payment to its originating source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source_id" })
  sourceId?: string;

  /**
   * The type of external payment the seller received. It can be one of the following:
   *
   * @remarks
   * - CHECK - Paid using a physical check.
   * - BANK_TRANSFER - Paid using external bank transfer.
   * - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
   * - CRYPTO - Paid using a crypto currency.
   * - SQUARE_CASH - Paid using Square Cash App.
   * - SOCIAL - Paid using peer-to-peer payment applications.
   * - EXTERNAL - A third-party application gathered this payment outside of Square.
   * - EMONEY - Paid using an E-money provider.
   * - CARD - A credit or debit card that Square does not support.
   * - STORED_BALANCE - Use for house accounts, store credit, and so forth.
   * - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
   * - OTHER - A type not listed here.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PosPaymentExternalDetailsTypeEnum;
}

export enum PosPaymentProcessingFeesTypeEnum {
  Initial = "initial",
  Adjustment = "adjustment",
}

export class PosPaymentProcessingFees extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "effective_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  effectiveAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "processing_type" })
  processingType?: PosPaymentProcessingFeesTypeEnum;
}

/**
 * Source of this payment.
 */
export enum PosPaymentSourceEnum {
  Card = "card",
  BankAccount = "bank_account",
  Wallet = "wallet",
  Bnpl = "bnpl",
  Cash = "cash",
  External = "external",
  Other = "other",
}

/**
 * Status of this payment.
 */
export enum PosPaymentStatusEnum {
  Approved = "approved",
  Pending = "pending",
  Completed = "completed",
  Canceled = "canceled",
  Failed = "failed",
  Other = "other",
}

/**
 * The status of the wallet payment. The status can be AUTHORIZED, CAPTURED, VOIDED, or FAILED.
 */
export enum PosPaymentWalletDetailsStatusEnum {
  Authorized = "authorized",
  Captured = "captured",
  Voided = "voided",
  Failed = "failed",
  Other = "other",
}

/**
 * Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
 */
export class PosPaymentWalletDetails extends SpeakeasyBase {
  /**
   * The status of the wallet payment. The status can be AUTHORIZED, CAPTURED, VOIDED, or FAILED.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: PosPaymentWalletDetailsStatusEnum;
}

export class PosPaymentInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "app_fee" })
  appFee?: number;

  /**
   * The initial amount of money approved for this payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "approved" })
  approved?: number;

  /**
   * Card details for this payment. This field is currently not available. Reach out to our team for more info.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bank_account" })
  @Type(() => PosBankAccount)
  bankAccount?: PosBankAccount;

  @SpeakeasyMetadata()
  @Expose({ name: "card_details" })
  @Type(() => PosPaymentCardDetailsInput)
  cardDetails?: PosPaymentCardDetailsInput;

  /**
   * Cash details for this payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cash" })
  @Type(() => PosPaymentCashDetails)
  cash?: PosPaymentCashDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "change_back_cash_amount" })
  changeBackCashAmount?: number;

  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: CurrencyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "customer_id" })
  customerId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "device_id" })
  deviceId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "employee_id" })
  employeeId?: string;

  /**
   * Details about an external payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "external_details" })
  @Type(() => PosPaymentExternalDetails)
  externalDetails?: PosPaymentExternalDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "external_payment_id" })
  externalPaymentId?: string;

  /**
   * A value you specify that uniquely identifies this request among requests you have sent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idempotency_key" })
  idempotencyKey?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "location_id" })
  locationId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_id" })
  merchantId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "order_id" })
  orderId: string;

  @SpeakeasyMetadata({ elemType: PosPaymentProcessingFees })
  @Expose({ name: "processing_fees" })
  @Type(() => PosPaymentProcessingFees)
  processingFees?: PosPaymentProcessingFees[];

  /**
   * The initial amount of money approved for this payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "refunded" })
  refunded?: number;

  /**
   * Optional service charges or gratuity tip applied to the order.
   */
  @SpeakeasyMetadata({ elemType: ServiceChargeInput })
  @Expose({ name: "service_charges" })
  @Type(() => ServiceChargeInput)
  serviceCharges?: ServiceChargeInput[];

  /**
   * Source of this payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  source?: PosPaymentSourceEnum;

  /**
   * The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source_id" })
  sourceId: string;

  /**
   * Status of this payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: PosPaymentStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "tax" })
  tax?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "tender_id" })
  tenderId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tip" })
  tip?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total?: number;

  /**
   * Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wallet" })
  @Type(() => PosPaymentWalletDetails)
  wallet?: PosPaymentWalletDetails;
}

export class PosPaymentCardDetails extends SpeakeasyBase {
  /**
   * A card's non-confidential details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "card" })
  @Type(() => PaymentCard)
  card?: PaymentCard;
}

export class PosPayment extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "app_fee" })
  appFee?: number;

  /**
   * The initial amount of money approved for this payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "approved" })
  approved?: number;

  /**
   * Card details for this payment. This field is currently not available. Reach out to our team for more info.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bank_account" })
  @Type(() => PosBankAccount)
  bankAccount?: PosBankAccount;

  @SpeakeasyMetadata()
  @Expose({ name: "card_details" })
  @Type(() => PosPaymentCardDetails)
  cardDetails?: PosPaymentCardDetails;

  /**
   * Cash details for this payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cash" })
  @Type(() => PosPaymentCashDetails)
  cash?: PosPaymentCashDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "change_back_cash_amount" })
  changeBackCashAmount?: number;

  /**
   * The date and time when the object was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * The user who created the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_by" })
  createdBy?: string;

  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: CurrencyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "customer_id" })
  customerId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "device_id" })
  deviceId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "employee_id" })
  employeeId?: string;

  /**
   * Details about an external payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "external_details" })
  @Type(() => PosPaymentExternalDetails)
  externalDetails?: PosPaymentExternalDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "external_payment_id" })
  externalPaymentId?: string;

  /**
   * A unique identifier for an object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * A value you specify that uniquely identifies this request among requests you have sent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idempotency_key" })
  idempotencyKey?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "location_id" })
  locationId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_id" })
  merchantId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "order_id" })
  orderId: string;

  @SpeakeasyMetadata({ elemType: PosPaymentProcessingFees })
  @Expose({ name: "processing_fees" })
  @Type(() => PosPaymentProcessingFees)
  processingFees?: PosPaymentProcessingFees[];

  /**
   * The initial amount of money approved for this payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "refunded" })
  refunded?: number;

  /**
   * Optional service charges or gratuity tip applied to the order.
   */
  @SpeakeasyMetadata({ elemType: ServiceCharge })
  @Expose({ name: "service_charges" })
  @Type(() => ServiceCharge)
  serviceCharges?: ServiceCharge[];

  /**
   * Source of this payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  source?: PosPaymentSourceEnum;

  /**
   * The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source_id" })
  sourceId: string;

  /**
   * Status of this payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: PosPaymentStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "tax" })
  tax?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "tender_id" })
  tenderId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tip" })
  tip?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total?: number;

  /**
   * The date and time when the object was last updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * The user who last updated the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_by" })
  updatedBy?: string;

  /**
   * Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wallet" })
  @Type(() => PosPaymentWalletDetails)
  wallet?: PosPaymentWalletDetails;
}
