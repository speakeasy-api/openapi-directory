"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class WebinarPollsSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class WebinarPollsRequest:
    
    webinar_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'webinarId', 'style': 'simple', 'explode': False }})
    r"""The webinar ID in \\"**long**\\" format(represented as int64 data type in JSON)."""  
    
class WebinarPollsPollListPollQuestionsTypeEnum(str, Enum):
    r"""Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice"""
    SINGLE = 'single'
    MULTIPLE = 'multiple'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarPollsPollListPollQuestions:
    
    answers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answers'), 'exclude': lambda f: f is None }})
    r"""Answers to the questions"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Question to be asked to the attendees."""  
    type: Optional[WebinarPollsPollListPollQuestionsTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice"""  
    
class WebinarPollsPollListPollStatusEnum(str, Enum):
    r"""Status of Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results"""
    NOTSTART = 'notstart'
    STARTED = 'started'
    ENDED = 'ended'
    SHARING = 'sharing'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarPollsPollListPoll:
    r"""Poll"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of Poll"""  
    questions: Optional[list[WebinarPollsPollListPollQuestions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questions'), 'exclude': lambda f: f is None }})
    r"""Array of Polls"""  
    status: Optional[WebinarPollsPollListPollStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Title for the poll."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarPollsPollList:
    r"""Poll List"""
    
    polls: Optional[list[WebinarPollsPollListPoll]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('polls'), 'exclude': lambda f: f is None }})
    r"""Array of Polls"""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The number of all records available across pages"""  
    

@dataclasses.dataclass
class WebinarPollsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    poll_list: Optional[WebinarPollsPollList] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    List polls of a Webinar  returned
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    