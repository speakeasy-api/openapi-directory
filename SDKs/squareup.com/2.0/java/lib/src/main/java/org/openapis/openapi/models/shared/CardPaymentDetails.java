/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CardPaymentDetails - Reflects the current status of a card payment. Contains only non-confidential information.
 */
public class CardPaymentDetails {
    /**
     * For EMV payments, the cryptogram generated for the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_cryptogram")
    public String applicationCryptogram;

    public CardPaymentDetails withApplicationCryptogram(String applicationCryptogram) {
        this.applicationCryptogram = applicationCryptogram;
        return this;
    }
    
    /**
     * For EMV payments, the application ID identifies the EMV application used for the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_identifier")
    public String applicationIdentifier;

    public CardPaymentDetails withApplicationIdentifier(String applicationIdentifier) {
        this.applicationIdentifier = applicationIdentifier;
        return this;
    }
    
    /**
     * For EMV payments, the human-readable name of the EMV application used for the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_name")
    public String applicationName;

    public CardPaymentDetails withApplicationName(String applicationName) {
        this.applicationName = applicationName;
        return this;
    }
    
    /**
     * The status code returned by the card issuer that describes the payment's
     * authorization status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_result_code")
    public String authResultCode;

    public CardPaymentDetails withAuthResultCode(String authResultCode) {
        this.authResultCode = authResultCode;
        return this;
    }
    
    /**
     * The status code returned from the Address Verification System (AVS) check. The code can be
     * `AVS_ACCEPTED`, `AVS_REJECTED`, or `AVS_NOT_CHECKED`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avs_status")
    public String avsStatus;

    public CardPaymentDetails withAvsStatus(String avsStatus) {
        this.avsStatus = avsStatus;
        return this;
    }
    
    /**
     * Represents the payment details of a card to be used for payments. These
     * details are determined by the payment token generated by Web Payments SDK.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card")
    public Card card;

    public CardPaymentDetails withCard(Card card) {
        this.card = card;
        return this;
    }
    
    /**
     * The timeline for card payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card_payment_timeline")
    public CardPaymentTimeline cardPaymentTimeline;

    public CardPaymentDetails withCardPaymentTimeline(CardPaymentTimeline cardPaymentTimeline) {
        this.cardPaymentTimeline = cardPaymentTimeline;
        return this;
    }
    
    /**
     * The status code returned from the Card Verification Value (CVV) check. The code can be
     * `CVV_ACCEPTED`, `CVV_REJECTED`, or `CVV_NOT_CHECKED`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cvv_status")
    public String cvvStatus;

    public CardPaymentDetails withCvvStatus(String cvvStatus) {
        this.cvvStatus = cvvStatus;
        return this;
    }
    
    /**
     * Details about the device that took the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device_details")
    public DeviceDetails deviceDetails;

    public CardPaymentDetails withDeviceDetails(DeviceDetails deviceDetails) {
        this.deviceDetails = deviceDetails;
        return this;
    }
    
    /**
     * The method used to enter the card's details for the payment. The method can be
     * `KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entry_method")
    public String entryMethod;

    public CardPaymentDetails withEntryMethod(String entryMethod) {
        this.entryMethod = entryMethod;
        return this;
    }
    
    /**
     * Information about errors encountered during the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    public Error[] errors;

    public CardPaymentDetails withErrors(Error[] errors) {
        this.errors = errors;
        return this;
    }
    
    /**
     * Whether the card must be physically present for the payment to
     * be refunded.  If set to `true`, the card must be present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refund_requires_card_presence")
    public Boolean refundRequiresCardPresence;

    public CardPaymentDetails withRefundRequiresCardPresence(Boolean refundRequiresCardPresence) {
        this.refundRequiresCardPresence = refundRequiresCardPresence;
        return this;
    }
    
    /**
     * The statement description sent to the card networks.
     * 
     * Note: The actual statement description varies and is likely to be truncated and appended with
     * additional information on a per issuer basis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statement_description")
    public String statementDescription;

    public CardPaymentDetails withStatementDescription(String statementDescription) {
        this.statementDescription = statementDescription;
        return this;
    }
    
    /**
     * The card payment's current state. The state can be AUTHORIZED, CAPTURED, VOIDED, or
     * FAILED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public CardPaymentDetails withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * For EMV payments, the method used to verify the cardholder's identity. The method can be
     * `PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verification_method")
    public String verificationMethod;

    public CardPaymentDetails withVerificationMethod(String verificationMethod) {
        this.verificationMethod = verificationMethod;
        return this;
    }
    
    /**
     * For EMV payments, the results of the cardholder verification. The result can be
     * `SUCCESS`, `FAILURE`, or `UNKNOWN`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verification_results")
    public String verificationResults;

    public CardPaymentDetails withVerificationResults(String verificationResults) {
        this.verificationResults = verificationResults;
        return this;
    }
    
    public CardPaymentDetails(){}
}
