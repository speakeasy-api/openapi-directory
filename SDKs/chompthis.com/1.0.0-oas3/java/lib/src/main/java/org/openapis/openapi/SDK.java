/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * ## Important
 * An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.
 * 
 * ### Getting Started
 *   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.
 *   * Scroll down and click the "**Authorize**" button.
 *   * Enter your API key into the "**value**" input, click the "**Authorize**" button, then click the "**Close**" button.
 *   * Scroll down to the section titled "**default**" and click on the API endpoint you wish to use.
 *   * Click the "**Try it out**" button.
 *   * Enter the information the endpoint requires.
 *   * Click the "**Execute**" button.
 * 
 * ### Example 
 *   * Branded food response object: **[View example &amp;raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**
 *   * Ingredient response object: **[View example &amp;raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**
 *   * Error response object: **[View example &amp;raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**
 * 
 * ### How Do I Find My API Key?
 *   * Your API key was sent to the email address you used to create your subscription.
 *   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.
 *   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.
 * 
 * ### Helpful Links
 *   * **Help &amp; Support**
 *     * [Knowledge Base &amp;raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)
 *     * [Support &amp;raquo;](https://chompthis.com/api/ticket-new.php)
 *     * [Client Center &amp;raquo;](https://chompthis.com/api/manage.php)
 *   * **Pricing**
 *     * [Subscription Options &amp;raquo;](https://chompthis.com/api/)
 *     * [Cost Calculator &amp;raquo;](https://chompthis.com/api/cost-calculator.php)
 *   * **Guidelines**
 *     * [Terms &amp; License &amp;raquo;](https://chompthis.com/api/terms.php)
 *     * [Attribution &amp;raquo;](https://chompthis.com/api/docs/attribution.php)
 * 
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        /**
         * Production server (uses live data)
         */
        "https://chompthis.com/api/v2",
	};
	
	
	
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
	}

    /**
     * Get a branded food item using a barcode
     * ## Get data for a branded food using the food's UPC/EAN barcode.
     * 
     * **Example** 
     * &gt; ```https://chompthis.com/api/v2/food/branded/barcode.php?api_key=API_KEY&amp;code=CODE```
     * 
     * **Tips**
     *   * Read our **[Knowledge Base article](https://desk.zoho.com/portal/chompthis/kb/articles/im-having-trouble-getting-matches-for-barcodes-what-can-id-do)** for helpful tips and tricks.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetFoodBrandedBarcodePhpResponse getFoodBrandedBarcodePhp(org.openapis.openapi.models.operations.GetFoodBrandedBarcodePhpRequest request, org.openapis.openapi.models.operations.GetFoodBrandedBarcodePhpSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/food/branded/barcode.php");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetFoodBrandedBarcodePhpRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetFoodBrandedBarcodePhpResponse res = new org.openapis.openapi.models.operations.GetFoodBrandedBarcodePhpResponse(contentType, httpRes.statusCode()) {{
            brandedFoodObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BrandedFoodObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BrandedFoodObject.class);
                res.brandedFoodObject = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Get a branded food item by name
     * ## Search for branded food items by name.
     * 
     * **Example**
     * &gt; ```https://chompthis.com/api/v2/food/branded/name.php?api_key=API_KEY&amp;name=NAME```
     * 
     * **Tips**
     *   * Get started by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.
     * 
     * &gt; This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetFoodBrandedNamePhpResponse getFoodBrandedNamePhp(org.openapis.openapi.models.operations.GetFoodBrandedNamePhpRequest request, org.openapis.openapi.models.operations.GetFoodBrandedNamePhpSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/food/branded/name.php");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetFoodBrandedNamePhpRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetFoodBrandedNamePhpResponse res = new org.openapis.openapi.models.operations.GetFoodBrandedNamePhpResponse(contentType, httpRes.statusCode()) {{
            brandedFoodObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BrandedFoodObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BrandedFoodObject.class);
                res.brandedFoodObject = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Get data for branded food items using various search parameters
     * ## Search for branded food items using various parameters.
     * 
     * **Example**
     * &gt; ```https://chompthis.com/api/v2/food/branded/search.php?api_key=API_KEY&amp;brand=BRAND&amp;country=COUNTRY&amp;page=1```
     * 
     * **Tips** 
     *   * Get started by using the **[Query Builder](https://chompthis.com/api/build.php)**.
     * 
     * &gt; This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetFoodBrandedSearchPhpResponse getFoodBrandedSearchPhp(org.openapis.openapi.models.operations.GetFoodBrandedSearchPhpRequest request, org.openapis.openapi.models.operations.GetFoodBrandedSearchPhpSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/food/branded/search.php");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetFoodBrandedSearchPhpRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetFoodBrandedSearchPhpResponse res = new org.openapis.openapi.models.operations.GetFoodBrandedSearchPhpResponse(contentType, httpRes.statusCode()) {{
            brandedFoodObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BrandedFoodObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BrandedFoodObject.class);
                res.brandedFoodObject = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Get raw/generic food ingredient item(s)
     * ## Get data for a specific ingredient or a specific set of ingredients.
     * 
     * **Example #1: Single Ingredient**
     * &gt; ```https://chompthis.com/api/v2/ingredient/search.php?api_key=API_KEY&amp;find=raw broccoli```
     * 
     * **Example #2: Set of Ingredients**
     * &gt; ```https://chompthis.com/api/v2/ingredient/search.php?api_key=API_KEY&amp;find=raw broccoli,mashed potatoes,chicken drumstick```
     * 
     * **Tips**
     *   * Expose ingredient endpoints by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.
     * 
     * &gt; This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetFoodIngredientSearchPhpResponse getFoodIngredientSearchPhp(org.openapis.openapi.models.operations.GetFoodIngredientSearchPhpRequest request, org.openapis.openapi.models.operations.GetFoodIngredientSearchPhpSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/food/ingredient/search.php");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetFoodIngredientSearchPhpRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetFoodIngredientSearchPhpResponse res = new org.openapis.openapi.models.operations.GetFoodIngredientSearchPhpResponse(contentType, httpRes.statusCode()) {{
            ingredientObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IngredientObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IngredientObject.class);
                res.ingredientObject = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }
}