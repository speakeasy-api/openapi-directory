/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { MinimalRepository } from "./minimalrepository";
import { Expose, Transform, Type } from "class-transformer";

export enum RepoRequiredWorkflowStateEnum {
  Active = "active",
  Deleted = "deleted",
}

/**
 * A GitHub Actions required workflow
 */
export class RepoRequiredWorkflow extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "badge_url" })
  badgeUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path: string;

  /**
   * Minimal Repository
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source_repository" })
  @Type(() => MinimalRepository)
  sourceRepository: MinimalRepository;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: RepoRequiredWorkflowStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}
