"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsRedshiftClusterPendingModifiedValues:
    r"""Changes to the Amazon Redshift cluster that are currently pending."""
    
    automated_snapshot_retention_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutomatedSnapshotRetentionPeriod'), 'exclude': lambda f: f is None }})  
    cluster_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterIdentifier'), 'exclude': lambda f: f is None }})  
    cluster_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterType'), 'exclude': lambda f: f is None }})  
    cluster_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterVersion'), 'exclude': lambda f: f is None }})  
    encryption_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionType'), 'exclude': lambda f: f is None }})  
    enhanced_vpc_routing: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnhancedVpcRouting'), 'exclude': lambda f: f is None }})  
    maintenance_track_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaintenanceTrackName'), 'exclude': lambda f: f is None }})  
    master_user_password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MasterUserPassword'), 'exclude': lambda f: f is None }})  
    node_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NodeType'), 'exclude': lambda f: f is None }})  
    number_of_nodes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfNodes'), 'exclude': lambda f: f is None }})  
    publicly_accessible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PubliclyAccessible'), 'exclude': lambda f: f is None }})  
    