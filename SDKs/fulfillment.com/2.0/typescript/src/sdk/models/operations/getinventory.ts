/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetInventorySecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  fdcAuth: string;
}

export class GetInventoryRequest extends SpeakeasyBase {
  /**
   * A CSV of sku reference names, 'skuName1' or 'skuName1,skuName2,skuName3'
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=externalSkuNames",
  })
  externalSkuNames?: string[];

  /**
   * The numbers of items to return
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * A CSV of merchant id, '123' or '1,2,3'
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=merchantIds",
  })
  merchantIds?: number[];

  /**
   * A multiplier of the number of items (limit parameter) to skip before returning results
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * A CSV of warehouse id, '123' or '1,2,3'
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=warehouseIds",
  })
  warehouseIds?: number[];
}

/**
 * Item this inventory data is based on
 */
export class GetInventoryItemInventoryArrayV2ItemInventoryV2Item extends SpeakeasyBase {
  /**
   * FDC ID for this Item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Sku reference name for this item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "skuReference" })
  skuReference?: string;
}

/**
 * Merchant that owns this item
 */
export class GetInventoryItemInventoryArrayV2ItemInventoryV2Merchant extends SpeakeasyBase {
  /**
   * Merchants name for this item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class GetInventoryItemInventoryArrayV2ItemInventoryV2QuantityTotal extends SpeakeasyBase {
  /**
   * Number of items that are available to be used in an order
   */
  @SpeakeasyMetadata()
  @Expose({ name: "availableToPromise" })
  availableToPromise?: number;
}

export class GetInventoryItemInventoryArrayV2ItemInventoryV2Quantity extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  @Type(() => GetInventoryItemInventoryArrayV2ItemInventoryV2QuantityTotal)
  total?: GetInventoryItemInventoryArrayV2ItemInventoryV2QuantityTotal;
}

export class GetInventoryItemInventoryArrayV2ItemInventoryV2 extends SpeakeasyBase {
  /**
   * Item this inventory data is based on
   */
  @SpeakeasyMetadata()
  @Expose({ name: "item" })
  @Type(() => GetInventoryItemInventoryArrayV2ItemInventoryV2Item)
  item?: GetInventoryItemInventoryArrayV2ItemInventoryV2Item;

  /**
   * Merchant that owns this item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchant" })
  @Type(() => GetInventoryItemInventoryArrayV2ItemInventoryV2Merchant)
  merchant?: GetInventoryItemInventoryArrayV2ItemInventoryV2Merchant;

  @SpeakeasyMetadata()
  @Expose({ name: "quantity" })
  @Type(() => GetInventoryItemInventoryArrayV2ItemInventoryV2Quantity)
  quantity?: GetInventoryItemInventoryArrayV2ItemInventoryV2Quantity;
}

export class GetInventoryItemInventoryArrayV2MetaPaginationV2 extends SpeakeasyBase {
  /**
   * Count of records returned in response, this will be equal to or less then the limit parameter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count?: number;

  /**
   * Current page of the response, this will match the page parameter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentPage" })
  currentPage?: number;

  /**
   * Total number of records available to request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total?: number;

  /**
   * Total number of pages available to request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalPages" })
  totalPages?: number;
}

export class GetInventoryItemInventoryArrayV2Meta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "pagination" })
  @Type(() => GetInventoryItemInventoryArrayV2MetaPaginationV2)
  pagination?: GetInventoryItemInventoryArrayV2MetaPaginationV2;
}

/**
 * Found Inventory
 */
export class GetInventoryItemInventoryArrayV2 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: GetInventoryItemInventoryArrayV2ItemInventoryV2,
  })
  @Expose({ name: "data" })
  @Type(() => GetInventoryItemInventoryArrayV2ItemInventoryV2)
  data?: GetInventoryItemInventoryArrayV2ItemInventoryV2[];

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => GetInventoryItemInventoryArrayV2Meta)
  meta?: GetInventoryItemInventoryArrayV2Meta;
}

export class GetInventoryResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Found Inventory
   */
  @SpeakeasyMetadata()
  itemInventoryArrayV2?: GetInventoryItemInventoryArrayV2;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Bad Request
   */
  @SpeakeasyMetadata()
  oneordersGetResponses404ContentApplication1jsonSchema?: shared.OneordersGetResponses404ContentApplication1jsonSchema;
}
