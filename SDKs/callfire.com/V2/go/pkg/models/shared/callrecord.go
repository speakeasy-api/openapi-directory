// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CallRecordResultEnum - ~
type CallRecordResultEnum string

const (
	CallRecordResultEnumLa               CallRecordResultEnum = "LA"
	CallRecordResultEnumAm               CallRecordResultEnum = "AM"
	CallRecordResultEnumBusy             CallRecordResultEnum = "BUSY"
	CallRecordResultEnumDnc              CallRecordResultEnum = "DNC"
	CallRecordResultEnumXfer             CallRecordResultEnum = "XFER"
	CallRecordResultEnumNoAns            CallRecordResultEnum = "NO_ANS"
	CallRecordResultEnumXferLeg          CallRecordResultEnum = "XFER_LEG"
	CallRecordResultEnumInternalError    CallRecordResultEnum = "INTERNAL_ERROR"
	CallRecordResultEnumCarrierError     CallRecordResultEnum = "CARRIER_ERROR"
	CallRecordResultEnumCarrierTempError CallRecordResultEnum = "CARRIER_TEMP_ERROR"
	CallRecordResultEnumUndialed         CallRecordResultEnum = "UNDIALED"
	CallRecordResultEnumSd               CallRecordResultEnum = "SD"
	CallRecordResultEnumPostponed        CallRecordResultEnum = "POSTPONED"
	CallRecordResultEnumAbandoned        CallRecordResultEnum = "ABANDONED"
	CallRecordResultEnumSkipped          CallRecordResultEnum = "SKIPPED"
)

func (e *CallRecordResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LA":
		fallthrough
	case "AM":
		fallthrough
	case "BUSY":
		fallthrough
	case "DNC":
		fallthrough
	case "XFER":
		fallthrough
	case "NO_ANS":
		fallthrough
	case "XFER_LEG":
		fallthrough
	case "INTERNAL_ERROR":
		fallthrough
	case "CARRIER_ERROR":
		fallthrough
	case "CARRIER_TEMP_ERROR":
		fallthrough
	case "UNDIALED":
		fallthrough
	case "SD":
		fallthrough
	case "POSTPONED":
		fallthrough
	case "ABANDONED":
		fallthrough
	case "SKIPPED":
		*e = CallRecordResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CallRecordResultEnum: %s", s)
	}
}

// CallRecord - Represents a call sent to a contact's number
type CallRecord struct {
	// Timestamp when call was answered, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
	AnswerTime *int64 `json:"answerTime,omitempty"`
	// A cost of the call
	BilledAmount *float32 `json:"billedAmount,omitempty"`
	// ~
	CallerName *string `json:"callerName,omitempty"`
	// Duration of the call in seconds
	Duration *int64 `json:"duration,omitempty"`
	// Timestamp when call was finished, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
	FinishTime *int64 `json:"finishTime,omitempty"`
	// An id of a call record
	ID *int64 `json:"id,omitempty"`
	// Labels associated with a call action
	Labels []string `json:"labels,omitempty"`
	// Notes of call added by agent
	Notes []Note `json:"notes,omitempty"`
	// A date and time (timestamp) when call was originated by CallFire platform and went to downstream provider, formatted in unix time milliseconds (read only). Example: 1473781817000
	OriginateTime *int64 `json:"originateTime,omitempty"`
	// Notes of call added by an agent
	QuestionResponses []QuestionResponse `json:"questionResponses,omitempty"`
	// A list of voice recordings of the call
	Recordings []CallRecording `json:"recordings,omitempty"`
	// ~
	Result *CallRecordResultEnum `json:"result,omitempty"`
	// ~
	SwitchID *string `json:"switchId,omitempty"`
	// A phone number to which a call was addressed. Phone number in E.164 format (11-digit). Example: 12132000384
	ToNumber *string `json:"toNumber,omitempty"`
}
