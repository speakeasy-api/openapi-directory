/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class PostTracksTrackIdCommentsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
  })
  authHeader: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=query;name=client_id",
  })
  clientId: string;
}

export class PostTracksTrackIdCommentsRequestBodyComment extends SpeakeasyBase {
  /**
   * Comment's content
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body: string;

  /**
   * Timestamp of a comment. String or float representation is supported
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  timestamp?: any;
}

/**
 * Body of a comment
 *
 * @remarks
 *
 */
export class PostTracksTrackIdCommentsRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  @Type(() => PostTracksTrackIdCommentsRequestBodyComment)
  comment?: PostTracksTrackIdCommentsRequestBodyComment;
}

export class PostTracksTrackIdCommentsRequest extends SpeakeasyBase {
  /**
   * Body of a comment
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: PostTracksTrackIdCommentsRequestBody;

  /**
   * SoundCloud Track id
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=track_id",
  })
  trackId: number;
}

export class PostTracksTrackIdCommentsResponse extends SpeakeasyBase {
  /**
   * Success
   */
  @SpeakeasyMetadata()
  comment?: shared.Comment;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Unprocessable Entity
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Too Many Requests
   */
  @SpeakeasyMetadata()
  tooManyRequests?: shared.TooManyRequests;
}
