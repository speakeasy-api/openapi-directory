/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CatalogStockConversion - Represents the rule of conversion between a stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
 * and a non-stockable sell-by or receive-by `CatalogItemVariation` that
 * share the same underlying stock.
 */
public class CatalogStockConversion {
    /**
     * The converted equivalent quantity of the non-stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) 
     * in its measurement unit. The `stockable_quantity` value and this `nonstockable_quantity` value together
     * define the conversion ratio between stockable item variation and the non-stockable item variation.
     * It accepts a decimal number in a string format that can take up to 10 digits before the decimal point
     * and up to 5 digits after the decimal point.
     */
    @JsonProperty("nonstockable_quantity")
    public String nonstockableQuantity;

    public CatalogStockConversion withNonstockableQuantity(String nonstockableQuantity) {
        this.nonstockableQuantity = nonstockableQuantity;
        return this;
    }
    
    /**
     * References to the stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
     * for this stock conversion. Selling, receiving or recounting the non-stockable `CatalogItemVariation` 
     * defined with a stock conversion results in adjustments of this stockable `CatalogItemVariation`.
     * This immutable field must reference a stockable `CatalogItemVariation`
     * that shares the parent [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) of the converted `CatalogItemVariation.`
     */
    @JsonProperty("stockable_item_variation_id")
    public String stockableItemVariationId;

    public CatalogStockConversion withStockableItemVariationId(String stockableItemVariationId) {
        this.stockableItemVariationId = stockableItemVariationId;
        return this;
    }
    
    /**
     * The quantity of the stockable item variation (as identified by `stockable_item_variation_id`) 
     * equivalent to the non-stockable item variation quantity (as specified in `nonstockable_quantity`) 
     * as defined by this stock conversion.  It accepts a decimal number in a string format that can take
     * up to 10 digits before the decimal point and up to 5 digits after the decimal point.
     */
    @JsonProperty("stockable_quantity")
    public String stockableQuantity;

    public CatalogStockConversion withStockableQuantity(String stockableQuantity) {
        this.stockableQuantity = stockableQuantity;
        return this;
    }
    
    public CatalogStockConversion(@JsonProperty("nonstockable_quantity") String nonstockableQuantity, @JsonProperty("stockable_item_variation_id") String stockableItemVariationId, @JsonProperty("stockable_quantity") String stockableQuantity) {
        this.nonstockableQuantity = nonstockableQuantity;
        this.stockableItemVariationId = stockableItemVariationId;
        this.stockableQuantity = stockableQuantity;
  }
}
