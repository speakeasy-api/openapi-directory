"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import disapproval as shared_disapproval
from ..shared import servingcontext as shared_servingcontext
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ServingRestrictionStatusEnum(str, Enum):
    r"""The status of the creative in this context (for example, it has been explicitly disapproved or is pending review)."""
    STATUS_UNSPECIFIED = 'STATUS_UNSPECIFIED'
    DISAPPROVAL = 'DISAPPROVAL'
    PENDING_REVIEW = 'PENDING_REVIEW'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServingRestriction:
    r"""Output only. A representation of the status of an ad in a specific context. A context here relates to where something ultimately serves (for example, a user or publisher geo, a platform, an HTTPS versus HTTP request, or the type of auction)."""
    
    contexts: Optional[list[shared_servingcontext.ServingContext]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contexts'), 'exclude': lambda f: f is None }})
    r"""The contexts for the restriction."""  
    disapproval: Optional[shared_disapproval.Disapproval] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disapproval'), 'exclude': lambda f: f is None }})
    r"""Output only. The reason and details for a disapproval."""  
    disapproval_reasons: Optional[list[shared_disapproval.Disapproval]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disapprovalReasons'), 'exclude': lambda f: f is None }})
    r"""Any disapprovals bound to this restriction. Only present if status=DISAPPROVED. Can be used to filter the response of the creatives.list method. Deprecated; use disapproval field instead."""  
    status: Optional[ServingRestrictionStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the creative in this context (for example, it has been explicitly disapproved or is pending review)."""  
    