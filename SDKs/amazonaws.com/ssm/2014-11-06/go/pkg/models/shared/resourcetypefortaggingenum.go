// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ResourceTypeForTaggingEnum string

const (
	ResourceTypeForTaggingEnumDocument          ResourceTypeForTaggingEnum = "Document"
	ResourceTypeForTaggingEnumManagedInstance   ResourceTypeForTaggingEnum = "ManagedInstance"
	ResourceTypeForTaggingEnumMaintenanceWindow ResourceTypeForTaggingEnum = "MaintenanceWindow"
	ResourceTypeForTaggingEnumParameter         ResourceTypeForTaggingEnum = "Parameter"
	ResourceTypeForTaggingEnumPatchBaseline     ResourceTypeForTaggingEnum = "PatchBaseline"
	ResourceTypeForTaggingEnumOpsItem           ResourceTypeForTaggingEnum = "OpsItem"
	ResourceTypeForTaggingEnumOpsMetadata       ResourceTypeForTaggingEnum = "OpsMetadata"
	ResourceTypeForTaggingEnumAutomation        ResourceTypeForTaggingEnum = "Automation"
	ResourceTypeForTaggingEnumAssociation       ResourceTypeForTaggingEnum = "Association"
)

func (e ResourceTypeForTaggingEnum) ToPointer() *ResourceTypeForTaggingEnum {
	return &e
}

func (e *ResourceTypeForTaggingEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Document":
		fallthrough
	case "ManagedInstance":
		fallthrough
	case "MaintenanceWindow":
		fallthrough
	case "Parameter":
		fallthrough
	case "PatchBaseline":
		fallthrough
	case "OpsItem":
		fallthrough
	case "OpsMetadata":
		fallthrough
	case "Automation":
		fallthrough
	case "Association":
		*e = ResourceTypeForTaggingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResourceTypeForTaggingEnum: %v", v)
	}
}
