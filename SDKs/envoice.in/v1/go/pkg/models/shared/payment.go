// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type PaymentTypeEnum string

const (
	PaymentTypeEnumOther        PaymentTypeEnum = "Other"
	PaymentTypeEnumPaypal       PaymentTypeEnum = "Paypal"
	PaymentTypeEnumStripe       PaymentTypeEnum = "Stripe"
	PaymentTypeEnumPayoneer     PaymentTypeEnum = "Payoneer"
	PaymentTypeEnumBank         PaymentTypeEnum = "Bank"
	PaymentTypeEnumCash         PaymentTypeEnum = "Cash"
	PaymentTypeEnumCheque       PaymentTypeEnum = "Cheque"
	PaymentTypeEnumAch          PaymentTypeEnum = "Ach"
	PaymentTypeEnumSepa         PaymentTypeEnum = "Sepa"
	PaymentTypeEnumSquare       PaymentTypeEnum = "Square"
	PaymentTypeEnumKlikAndPay   PaymentTypeEnum = "KlikAndPay"
	PaymentTypeEnumRazorpay     PaymentTypeEnum = "Razorpay"
	PaymentTypeEnumWepay        PaymentTypeEnum = "Wepay"
	PaymentTypeEnumHalkbank     PaymentTypeEnum = "Halkbank"
	PaymentTypeEnumTwoCheckout  PaymentTypeEnum = "TwoCheckout"
	PaymentTypeEnumPaymentWall  PaymentTypeEnum = "PaymentWall"
	PaymentTypeEnumBamboraEu    PaymentTypeEnum = "BamboraEU"
	PaymentTypeEnumBamboraNa    PaymentTypeEnum = "BamboraNA"
	PaymentTypeEnumNlb          PaymentTypeEnum = "Nlb"
	PaymentTypeEnumAuthorizeNet PaymentTypeEnum = "AuthorizeNet"
	PaymentTypeEnumBraintree    PaymentTypeEnum = "Braintree"
)

func (e PaymentTypeEnum) ToPointer() *PaymentTypeEnum {
	return &e
}

func (e *PaymentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Other":
		fallthrough
	case "Paypal":
		fallthrough
	case "Stripe":
		fallthrough
	case "Payoneer":
		fallthrough
	case "Bank":
		fallthrough
	case "Cash":
		fallthrough
	case "Cheque":
		fallthrough
	case "Ach":
		fallthrough
	case "Sepa":
		fallthrough
	case "Square":
		fallthrough
	case "KlikAndPay":
		fallthrough
	case "Razorpay":
		fallthrough
	case "Wepay":
		fallthrough
	case "Halkbank":
		fallthrough
	case "TwoCheckout":
		fallthrough
	case "PaymentWall":
		fallthrough
	case "BamboraEU":
		fallthrough
	case "BamboraNA":
		fallthrough
	case "Nlb":
		fallthrough
	case "AuthorizeNet":
		fallthrough
	case "Braintree":
		*e = PaymentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentTypeEnum: %v", v)
	}
}

type Payment struct {
	Amount      *float64         `json:"Amount,omitempty"`
	ID          *int             `json:"Id,omitempty"`
	Invoice     *Invoice         `json:"Invoice,omitempty"`
	InvoiceID   *int             `json:"InvoiceId,omitempty"`
	IsAutomatic *bool            `json:"IsAutomatic,omitempty"`
	Note        *string          `json:"Note,omitempty"`
	PaidOn      *time.Time       `json:"PaidOn,omitempty"`
	ReferenceID *string          `json:"ReferenceId,omitempty"`
	Type        *PaymentTypeEnum `json:"Type,omitempty"`
}
