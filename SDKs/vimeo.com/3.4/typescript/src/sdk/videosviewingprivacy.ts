/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class VideosViewingPrivacy {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Permit a specific user to view a private video
   */
  addVideoPrivacyUser(
    req: operations.AddVideoPrivacyUserRequest,
    security: operations.AddVideoPrivacyUserSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddVideoPrivacyUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddVideoPrivacyUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/videos/{video_id}/privacy/users/{user_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddVideoPrivacyUserSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddVideoPrivacyUserResponse =
        new operations.AddVideoPrivacyUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.user+json`
            )
          ) {
            res.user = utils.objectToClass(httpRes?.data, shared.User);
          }
          break;
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 403:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.user+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Permit a list of users to view a private video
   *
   * @remarks
   * The body of this request should follow our
   * [batch request format](https://developer.vimeo.com/api/common-formats#batch-requests). Each object must contain
   * a single `URI` field, and the value of this field must be the URI of the user who can view this video.
   */
  addVideoPrivacyUsers(
    req: operations.AddVideoPrivacyUsersRequest,
    security: operations.AddVideoPrivacyUsersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddVideoPrivacyUsersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddVideoPrivacyUsersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/videos/{video_id}/privacy/users",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddVideoPrivacyUsersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddVideoPrivacyUsersResponse =
        new operations.AddVideoPrivacyUsersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.user+json`
            )
          ) {
            res.users = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.users = utils.objectToClass(
              httpRes?.data,
              shared.User,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Permit a list of users to view a private video
   *
   * @remarks
   * The body of this request should follow our
   * [batch request format](https://developer.vimeo.com/api/common-formats#batch-requests). Each object must contain
   * a single `URI` field, and the value of this field must be the URI of the user who can view this video.
   */
  addVideoPrivacyUsersAlt1(
    req: operations.AddVideoPrivacyUsersAlt1Request,
    security: operations.AddVideoPrivacyUsersAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.AddVideoPrivacyUsersAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddVideoPrivacyUsersAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/channels/{channel_id}/videos/{video_id}/privacy/users",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddVideoPrivacyUsersAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddVideoPrivacyUsersAlt1Response =
        new operations.AddVideoPrivacyUsersAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.user+json`
            )
          ) {
            res.users = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.users = utils.objectToClass(
              httpRes?.data,
              shared.User,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Restrict a user from viewing a private video
   */
  deleteVideoPrivacyUser(
    req: operations.DeleteVideoPrivacyUserRequest,
    security: operations.DeleteVideoPrivacyUserSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteVideoPrivacyUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteVideoPrivacyUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/videos/{video_id}/privacy/users/{user_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteVideoPrivacyUserSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteVideoPrivacyUserResponse =
        new operations.DeleteVideoPrivacyUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the users who can view a user's private videos by default
   */
  getVideoPrivacyUsers(
    req: operations.GetVideoPrivacyUsersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVideoPrivacyUsersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVideoPrivacyUsersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/videos/{video_id}/privacy/users",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVideoPrivacyUsersResponse =
        new operations.GetVideoPrivacyUsersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.user+json`
            )
          ) {
            res.users = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.users = utils.objectToClass(
              httpRes?.data,
              shared.User,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.user+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the users who can view a user's private videos by default
   */
  getVideoPrivacyUsersAlt1(
    req: operations.GetVideoPrivacyUsersAlt1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVideoPrivacyUsersAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVideoPrivacyUsersAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/channels/{channel_id}/videos/{video_id}/privacy/users",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVideoPrivacyUsersAlt1Response =
        new operations.GetVideoPrivacyUsersAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.user+json`
            )
          ) {
            res.users = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.users = utils.objectToClass(
              httpRes?.data,
              shared.User,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.user+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }
}
