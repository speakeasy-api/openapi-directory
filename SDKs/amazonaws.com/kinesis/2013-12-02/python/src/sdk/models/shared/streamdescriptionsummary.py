"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import encryptiontype_enum as shared_encryptiontype_enum
from ..shared import enhancedmetrics as shared_enhancedmetrics
from ..shared import streammodedetails as shared_streammodedetails
from ..shared import streamstatus_enum as shared_streamstatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StreamDescriptionSummary:
    r"""Represents the output for <a>DescribeStreamSummary</a>"""
    
    enhanced_monitoring: list[shared_enhancedmetrics.EnhancedMetrics] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnhancedMonitoring') }})  
    open_shard_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenShardCount') }})  
    retention_period_hours: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RetentionPeriodHours') }})  
    stream_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamARN') }})  
    stream_creation_timestamp: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamCreationTimestamp'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    stream_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamName') }})  
    stream_status: shared_streamstatus_enum.StreamStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamStatus') }})  
    consumer_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConsumerCount'), 'exclude': lambda f: f is None }})  
    encryption_type: Optional[shared_encryptiontype_enum.EncryptionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionType'), 'exclude': lambda f: f is None }})  
    key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyId'), 'exclude': lambda f: f is None }})  
    stream_mode_details: Optional[shared_streammodedetails.StreamModeDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamModeDetails'), 'exclude': lambda f: f is None }})  
    