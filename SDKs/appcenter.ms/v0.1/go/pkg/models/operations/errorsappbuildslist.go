// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ErrorsAppBuildsListSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// ErrorsAppBuildsListErrorTypeEnum - Type of error (handled vs unhandled), including All
type ErrorsAppBuildsListErrorTypeEnum string

const (
	ErrorsAppBuildsListErrorTypeEnumAll            ErrorsAppBuildsListErrorTypeEnum = "all"
	ErrorsAppBuildsListErrorTypeEnumUnhandledError ErrorsAppBuildsListErrorTypeEnum = "unhandledError"
	ErrorsAppBuildsListErrorTypeEnumHandledError   ErrorsAppBuildsListErrorTypeEnum = "handledError"
)

func (e ErrorsAppBuildsListErrorTypeEnum) ToPointer() *ErrorsAppBuildsListErrorTypeEnum {
	return &e
}

func (e *ErrorsAppBuildsListErrorTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "unhandledError":
		fallthrough
	case "handledError":
		*e = ErrorsAppBuildsListErrorTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsAppBuildsListErrorTypeEnum: %v", v)
	}
}

type ErrorsAppBuildsListRequest struct {
	// The maximum number of results to return. (0 will fetch all results till the max number.)
	DollarTop *int64 `queryParam:"style=form,explode=true,name=$top"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// Last date time in data in ISO 8601 date time format
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
	// Type of error (handled vs unhandled), including All
	ErrorType *ErrorsAppBuildsListErrorTypeEnum `queryParam:"style=form,explode=true,name=errorType"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// Start date time in data in ISO 8601 date time format
	Start   time.Time `queryParam:"style=form,explode=true,name=start"`
	Version string    `queryParam:"style=form,explode=true,name=version"`
}

type ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnumConflict            ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum) ToPointer() *ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type ErrorsAppBuildsListDefaultApplicationJSONError struct {
	Code    ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                 `json:"message"`
}

// ErrorsAppBuildsListDefaultApplicationJSON - Error code with reason
type ErrorsAppBuildsListDefaultApplicationJSON struct {
	Error ErrorsAppBuildsListDefaultApplicationJSONError `json:"error"`
}

// ErrorsAppBuildsList200ApplicationJSON - List of App builds
type ErrorsAppBuildsList200ApplicationJSON struct {
	AppBuilds []string `json:"appBuilds,omitempty"`
}

type ErrorsAppBuildsListResponse struct {
	ContentType string
	// List of App builds
	ErrorsAppBuildsList200ApplicationJSONObject *ErrorsAppBuildsList200ApplicationJSON
	// Error code with reason
	ErrorsAppBuildsListDefaultApplicationJSONObject *ErrorsAppBuildsListDefaultApplicationJSON
	StatusCode                                      int
	RawResponse                                     *http.Response
}
