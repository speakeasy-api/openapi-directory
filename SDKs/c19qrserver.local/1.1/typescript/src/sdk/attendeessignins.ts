/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Endpoints related to attendees signing in on the premises
 */
export class AttendeesSignins {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a signin record
   *
   * @remarks
   * Delete a signin record
   *
   */
  deleteSigninSigninId(
    req: operations.DeleteSigninSigninIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteSigninSigninIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteSigninSigninIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/signin/{signinId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteSigninSigninIdResponse =
        new operations.DeleteSigninSigninIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidToken = utils.objectToClass(
              httpRes?.data,
              shared.InvalidToken
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve the information associated with a signin record
   *
   * @remarks
   * Retrieve the information associated with a signin record
   *
   */
  getSigninSigninId(
    req: operations.GetSigninSigninIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSigninSigninIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSigninSigninIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/signin/{signinId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSigninSigninIdResponse =
        new operations.GetSigninSigninIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.signin = utils.objectToClass(httpRes?.data, shared.Signin);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidToken = utils.objectToClass(
              httpRes?.data,
              shared.InvalidToken
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get signin info
   *
   * @remarks
   * Returns a list of signin objects sorted by signin ID descending.
   */
  getSignins(
    req: operations.GetSigninsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSigninsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSigninsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/signins";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSigninsResponse =
        new operations.GetSigninsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.signins = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.signins = utils.objectToClass(
              httpRes?.data,
              shared.Signin,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidToken = utils.objectToClass(
              httpRes?.data,
              shared.InvalidToken
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.keyFailure = utils.objectToClass(
              httpRes?.data,
              shared.KeyFailure
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new signin record
   */
  postSignin(
    req: shared.Signin,
    config?: AxiosRequestConfig
  ): Promise<operations.PostSigninResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.Signin(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/signin";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostSigninResponse =
        new operations.PostSigninResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.signinResponse = utils.objectToClass(
              httpRes?.data,
              shared.SigninResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidToken = utils.objectToClass(
              httpRes?.data,
              shared.InvalidToken
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.keyFailure = utils.objectToClass(
              httpRes?.data,
              shared.KeyFailure
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a signin record
   *
   * @remarks
   * Update a signin record
   *
   */
  putSigninSigninId(
    req: operations.PutSigninSigninIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutSigninSigninIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutSigninSigninIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/signin/{signinId}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "signin",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutSigninSigninIdResponse =
        new operations.PutSigninSigninIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userRecord = utils.objectToClass(
              httpRes?.data,
              shared.UserRecord
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidToken = utils.objectToClass(
              httpRes?.data,
              shared.InvalidToken
            );
          }
          break;
      }

      return res;
    });
  }
}
