/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CertificateInput - A Certificate corresponds to a signed X.509 certificate issued by a CertificateAuthority.
 */
public class CertificateInput {
    /**
     * A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateDescription")
    public CertificateDescription certificateDescription;

    public CertificateInput withCertificateDescription(CertificateDescription certificateDescription) {
        this.certificateDescription = certificateDescription;
        return this;
    }
    
    /**
     * Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/* /locations/* /certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateTemplate")
    public String certificateTemplate;

    public CertificateInput withCertificateTemplate(String certificateTemplate) {
        this.certificateTemplate = certificateTemplate;
        return this;
    }
    
    /**
     * A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("config")
    public CertificateConfig config;

    public CertificateInput withConfig(CertificateConfig config) {
        this.config = config;
        return this;
    }
    
    /**
     * Optional. Labels with user-defined metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public CertificateInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Required. Immutable. The desired lifetime of a certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lifetime")
    public String lifetime;

    public CertificateInput withLifetime(String lifetime) {
        this.lifetime = lifetime;
        return this;
    }
    
    /**
     * Immutable. A pem-encoded X.509 certificate signing request (CSR).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pemCsr")
    public String pemCsr;

    public CertificateInput withPemCsr(String pemCsr) {
        this.pemCsr = pemCsr;
        return this;
    }
    
    /**
     * Describes fields that are relavent to the revocation of a Certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revocationDetails")
    public RevocationDetails revocationDetails;

    public CertificateInput withRevocationDetails(RevocationDetails revocationDetails) {
        this.revocationDetails = revocationDetails;
        return this;
    }
    
    /**
     * Immutable. Specifies how the Certificate's identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subjectMode")
    public CertificateSubjectModeEnum subjectMode;

    public CertificateInput withSubjectMode(CertificateSubjectModeEnum subjectMode) {
        this.subjectMode = subjectMode;
        return this;
    }
    
    public CertificateInput(){}
}
