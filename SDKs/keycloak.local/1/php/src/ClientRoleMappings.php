<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ClientRoleMappings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete client-level roles from user role mapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdRoleMappingsClientsClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdRoleMappingsClientsClientResponse
     */
	public function deleteRealmGroupsIdRoleMappingsClientsClient(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdRoleMappingsClientsClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdRoleMappingsClientsClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}/role-mappings/clients/{client}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdRoleMappingsClientsClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdRoleMappingsClientsClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Delete client-level roles from user role mapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmUsersIdRoleMappingsClientsClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmUsersIdRoleMappingsClientsClientResponse
     */
	public function deleteRealmUsersIdRoleMappingsClientsClient(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmUsersIdRoleMappingsClientsClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmUsersIdRoleMappingsClientsClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/users/{id}/role-mappings/clients/{client}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmUsersIdRoleMappingsClientsClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmUsersIdRoleMappingsClientsClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Get client-level role mappings for the user, and the app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientResponse
     */
	public function getRealmGroupsIdRoleMappingsClientsClient(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}/role-mappings/clients/{client}', \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get available client-level roles that can be mapped to the user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientAvailableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientAvailableResponse
     */
	public function getRealmGroupsIdRoleMappingsClientsClientAvailable(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientAvailableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientAvailableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}/role-mappings/clients/{client}/available', \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientAvailableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientAvailableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get effective client-level role mappings   This recurses any composite roles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientCompositeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientCompositeResponse
     */
	public function getRealmGroupsIdRoleMappingsClientsClientComposite(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientCompositeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientCompositeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}/role-mappings/clients/{client}/composite', \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientCompositeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRoleMappingsClientsClientCompositeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get client-level role mappings for the user, and the app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientResponse
     */
	public function getRealmUsersIdRoleMappingsClientsClient(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/users/{id}/role-mappings/clients/{client}', \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get available client-level roles that can be mapped to the user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientAvailableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientAvailableResponse
     */
	public function getRealmUsersIdRoleMappingsClientsClientAvailable(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientAvailableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientAvailableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/users/{id}/role-mappings/clients/{client}/available', \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientAvailableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientAvailableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get effective client-level role mappings   This recurses any composite roles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientCompositeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientCompositeResponse
     */
	public function getRealmUsersIdRoleMappingsClientsClientComposite(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientCompositeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientCompositeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/users/{id}/role-mappings/clients/{client}/composite', \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientCompositeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersIdRoleMappingsClientsClientCompositeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add client-level roles to the user role mapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdRoleMappingsClientsClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdRoleMappingsClientsClientResponse
     */
	public function postRealmGroupsIdRoleMappingsClientsClient(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdRoleMappingsClientsClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdRoleMappingsClientsClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}/role-mappings/clients/{client}', \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdRoleMappingsClientsClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdRoleMappingsClientsClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Add client-level roles to the user role mapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmUsersIdRoleMappingsClientsClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmUsersIdRoleMappingsClientsClientResponse
     */
	public function postRealmUsersIdRoleMappingsClientsClient(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmUsersIdRoleMappingsClientsClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmUsersIdRoleMappingsClientsClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/users/{id}/role-mappings/clients/{client}', \OpenAPI\OpenAPI\Models\Operations\PostRealmUsersIdRoleMappingsClientsClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmUsersIdRoleMappingsClientsClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
}