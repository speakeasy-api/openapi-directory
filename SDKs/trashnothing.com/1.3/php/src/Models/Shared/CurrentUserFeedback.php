<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class CurrentUserFeedback
{
    /**
     * The percent of feedback that this user has received in the last year that was positive. May be null if a user has not received enough feedback to calculate a percentage.
     * 
     * 
     * 
     * @var ?float $percentPositive
     */
	#[\JMS\Serializer\Annotation\SerializedName('percent_positive')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $percentPositive = null;
    
    /**
     * If the current user can leave positive or negative feedback on this user then restriction is null. <br /><br /> Otherwise, restriction is set to a string that explains why feedback is currently restricted and what type of feedback is restricted. The string will be one of the following:  no-recent-messages, negative-score, moderator, [days]-day-wait-for-negative <br /><br /> - **no-recent-messages**: The current user has not received any messages from this user in the last 30 days. <br /> - **negative-score**: The current user has a negative feedback and will not be able to leave feedback until their score is >= 0. <br /> - **moderator**: The user is a moderator and leaving feedback on moderators is not currently supported. <br /> - **[days]-day-wait-for-negative**: Positive feedback is not restricted but the current user must wait
     * 
     *   some number of days before they will be able to leave negative feedback on this user.  This string can 
     *   change depending on the number of days.  For example, when the current user must wait one day, the
     *   string will be '1-day-wait-for-negative'.  A wait is necessary because a lot of negative feedback results
     *   from communication issues that are resolved with more time.
     * 
     * 
     * @var ?string $restriction
     */
	#[\JMS\Serializer\Annotation\SerializedName('restriction')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $restriction = null;
    
    /**
     * The feedback score of this user.  Higher scores are better.   Scores are calculated by substracting the total number of negative feedback from the total number of positive feedback that a user has received.  May be null if a user has not received enough feedback to calculate a score.
     * 
     * 
     * 
     * @var ?int $score
     */
	#[\JMS\Serializer\Annotation\SerializedName('score')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $score = null;
    
	public function __construct()
	{
		$this->percentPositive = null;
		$this->restriction = null;
		$this->score = null;
	}
}
