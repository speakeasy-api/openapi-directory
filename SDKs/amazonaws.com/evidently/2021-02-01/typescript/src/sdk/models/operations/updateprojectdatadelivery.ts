/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A structure containing the CloudWatch Logs log group where the project stores evaluation events.
 */
export class UpdateProjectDataDeliveryRequestBodyCloudWatchLogs extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "logGroup" })
  logGroup?: string;
}

/**
 * If the project stores evaluation events in an Amazon S3 bucket, this structure stores the bucket name and bucket prefix.
 */
export class UpdateProjectDataDeliveryRequestBodyS3Destination extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "bucket" })
  bucket?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "prefix" })
  prefix?: string;
}

export class UpdateProjectDataDeliveryRequestBody extends SpeakeasyBase {
  /**
   * A structure containing the CloudWatch Logs log group where the project stores evaluation events.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cloudWatchLogs" })
  @Type(() => UpdateProjectDataDeliveryRequestBodyCloudWatchLogs)
  cloudWatchLogs?: UpdateProjectDataDeliveryRequestBodyCloudWatchLogs;

  /**
   * If the project stores evaluation events in an Amazon S3 bucket, this structure stores the bucket name and bucket prefix.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "s3Destination" })
  @Type(() => UpdateProjectDataDeliveryRequestBodyS3Destination)
  s3Destination?: UpdateProjectDataDeliveryRequestBodyS3Destination;
}

export class UpdateProjectDataDeliveryRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateProjectDataDeliveryRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The name or ARN of the project that you want to modify the data storage options for.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=project",
  })
  project: string;
}

export class UpdateProjectDataDeliveryResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateProjectDataDeliveryResponse?: shared.UpdateProjectDataDeliveryResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
