// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateExperimentTemplateHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateExperimentTemplateRequestBodyLogConfiguration - Specifies the configuration for experiment logging.
type CreateExperimentTemplateRequestBodyLogConfiguration struct {
	CloudWatchLogsConfiguration *shared.ExperimentTemplateCloudWatchLogsLogConfigurationInput `json:"cloudWatchLogsConfiguration,omitempty"`
	LogSchemaVersion            *int64                                                        `json:"logSchemaVersion,omitempty"`
	S3Configuration             *shared.ExperimentTemplateS3LogConfigurationInput             `json:"s3Configuration,omitempty"`
}

type CreateExperimentTemplateRequestBody struct {
	// The actions for the experiment.
	Actions map[string]shared.CreateExperimentTemplateActionInput `json:"actions"`
	// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
	ClientToken string `json:"clientToken"`
	// A description for the experiment template.
	Description string `json:"description"`
	// Specifies the configuration for experiment logging.
	LogConfiguration *CreateExperimentTemplateRequestBodyLogConfiguration `json:"logConfiguration,omitempty"`
	// The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.
	RoleArn string `json:"roleArn"`
	// The stop conditions.
	StopConditions []shared.CreateExperimentTemplateStopConditionInput `json:"stopConditions"`
	// The tags to apply to the experiment template.
	Tags map[string]string `json:"tags,omitempty"`
	// The targets for the experiment.
	Targets map[string]shared.CreateExperimentTemplateTargetInput `json:"targets,omitempty"`
}

type CreateExperimentTemplateRequest struct {
	Headers CreateExperimentTemplateHeaders
	Request CreateExperimentTemplateRequestBody `request:"mediaType=application/json"`
}

type CreateExperimentTemplateResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateExperimentTemplateResponse *shared.CreateExperimentTemplateResponse
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ValidationException
	ValidationException interface{}
}
