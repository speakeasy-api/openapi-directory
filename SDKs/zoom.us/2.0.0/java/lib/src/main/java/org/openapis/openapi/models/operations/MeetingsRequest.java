/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class MeetingsRequest {
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=next_page_token")
    public String nextPageToken;
    public MeetingsRequest withNextPageToken(String nextPageToken) {
        this.nextPageToken = nextPageToken;
        return this;
    }
    
    /**
     * The page number of the current page in the returned records.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page_number")
    public String pageNumber;
    public MeetingsRequest withPageNumber(String pageNumber) {
        this.pageNumber = pageNumber;
        return this;
    }
    
    /**
     * The number of records returned within a single API call.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page_size")
    public Long pageSize;
    public MeetingsRequest withPageSize(Long pageSize) {
        this.pageSize = pageSize;
        return this;
    }
    
    /**
     * The meeting types: &lt;br&gt;`scheduled` - This includes all valid past meetings (unexpired), live meetings and upcoming scheduled meetings. It is equivalent to the combined list of "Previous Meetings" and "Upcoming Meetings" displayed in the user's [Meetings page](https://zoom.us/meeting) on the Zoom Web Portal.&lt;br&gt;`live` - All the ongoing meetings.&lt;br&gt;`upcoming` - All upcoming meetings including live meetings.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    public MeetingsTypeEnum type;
    public MeetingsRequest withType(MeetingsTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The user ID or email address of the user. For user-level apps, pass `me` as the value for userId.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=userId")
    public String userId;
    public MeetingsRequest withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
}
