/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DestinyDefinitionsDestinyEntitySearchResultItem } from "./destinydefinitionsdestinyentitysearchresultitem";
import { QueriesPagedQuery } from "./queriespagedquery";

/**
 * The items found that are matches/near matches for the searched-for term, sorted by something vaguely resembling "relevance". Hopefully this will get better in the future.
 */
export class DestinyDefinitionsDestinyEntitySearchResultResults extends SpeakeasyBase {
  @SpeakeasyMetadata()
  hasMore?: boolean;

  @SpeakeasyMetadata()
  query?: QueriesPagedQuery;

  @SpeakeasyMetadata()
  replacementContinuationToken?: string;

  @SpeakeasyMetadata({
    elemType: DestinyDefinitionsDestinyEntitySearchResultItem,
  })
  results?: DestinyDefinitionsDestinyEntitySearchResultItem[];

  @SpeakeasyMetadata()
  totalResults?: number;

  /**
   * If useTotalResults is true, then totalResults represents an accurate count.
   *
   * @remarks
   * If False, it does not, and may be estimated/only the size of the current page.
   * Either way, you should probably always only trust hasMore.
   * This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
   */
  @SpeakeasyMetadata()
  useTotalResults?: boolean;
}

/**
 * The results of a search for Destiny content. This will be improved on over time, I've been doing some experimenting to see what might be useful.
 */
export class DestinyDefinitionsDestinyEntitySearchResult extends SpeakeasyBase {
  /**
   * The items found that are matches/near matches for the searched-for term, sorted by something vaguely resembling "relevance". Hopefully this will get better in the future.
   */
  @SpeakeasyMetadata()
  results?: DestinyDefinitionsDestinyEntitySearchResultResults;

  /**
   * A list of suggested words that might make for better search results, based on the text searched for.
   */
  @SpeakeasyMetadata()
  suggestedWords?: string[];
}
