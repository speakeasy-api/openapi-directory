// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CloudtraceProjectsTracesListSecurityOption1 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type CloudtraceProjectsTracesListSecurityOption2 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type CloudtraceProjectsTracesListSecurity struct {
	Option1 *CloudtraceProjectsTracesListSecurityOption1 `security:"option"`
	Option2 *CloudtraceProjectsTracesListSecurityOption2 `security:"option"`
}

type CloudtraceProjectsTracesListPathParams struct {
	// Required. ID of the Cloud project where the trace data is stored.
	ProjectID string `pathParam:"style=simple,explode=false,name=projectId"`
}

// CloudtraceProjectsTracesListViewEnum - Optional. Type of data returned for traces in the list. Default is `MINIMAL`.
type CloudtraceProjectsTracesListViewEnum string

const (
	CloudtraceProjectsTracesListViewEnumViewTypeUnspecified CloudtraceProjectsTracesListViewEnum = "VIEW_TYPE_UNSPECIFIED"
	CloudtraceProjectsTracesListViewEnumMinimal             CloudtraceProjectsTracesListViewEnum = "MINIMAL"
	CloudtraceProjectsTracesListViewEnumRootspan            CloudtraceProjectsTracesListViewEnum = "ROOTSPAN"
	CloudtraceProjectsTracesListViewEnumComplete            CloudtraceProjectsTracesListViewEnum = "COMPLETE"
)

func (e *CloudtraceProjectsTracesListViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "VIEW_TYPE_UNSPECIFIED":
		fallthrough
	case "MINIMAL":
		fallthrough
	case "ROOTSPAN":
		fallthrough
	case "COMPLETE":
		*e = CloudtraceProjectsTracesListViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CloudtraceProjectsTracesListViewEnum: %s", s)
	}
}

type CloudtraceProjectsTracesListQueryParams struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// End of the time interval (inclusive) during which the trace data was collected from the application.
	EndTime *string `queryParam:"style=form,explode=true,name=endTime"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Optional. A filter against labels for the request. By default, searches use prefix matching. To specify exact match, prepend a plus symbol (`+`) to the search term. Multiple terms are ANDed. Syntax: * `root:NAME_PREFIX` or `NAME_PREFIX`: Return traces where any root span starts with `NAME_PREFIX`. * `+root:NAME` or `+NAME`: Return traces where any root span's name is exactly `NAME`. * `span:NAME_PREFIX`: Return traces where any span starts with `NAME_PREFIX`. * `+span:NAME`: Return traces where any span's name is exactly `NAME`. * `latency:DURATION`: Return traces whose overall latency is greater or equal to than `DURATION`. Accepted units are nanoseconds (`ns`), milliseconds (`ms`), and seconds (`s`). Default is `ms`. For example, `latency:24ms` returns traces whose overall latency is greater than or equal to 24 milliseconds. * `label:LABEL_KEY`: Return all traces containing the specified label key (exact match, case-sensitive) regardless of the key:value pair's value (including empty values). * `LABEL_KEY:VALUE_PREFIX`: Return all traces containing the specified label key (exact match, case-sensitive) whose value starts with `VALUE_PREFIX`. Both a key and a value must be specified. * `+LABEL_KEY:VALUE`: Return all traces containing a key:value pair exactly matching the specified text. Both a key and a value must be specified. * `method:VALUE`: Equivalent to `/http/method:VALUE`. * `url:VALUE`: Equivalent to `/http/url:VALUE`.
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Optional. Field used to sort the returned traces. Can be one of the following: * `trace_id` * `name` (`name` field of root span in the trace) * `duration` (difference between `end_time` and `start_time` fields of the root span) * `start` (`start_time` field of the root span) Descending order can be specified by appending `desc` to the sort field (for example, `name desc`). Only one sort field is permitted.
	OrderBy *string `queryParam:"style=form,explode=true,name=orderBy"`
	// Optional. Maximum number of traces to return. If not specified or <= 0, the implementation selects a reasonable value. The implementation may return fewer traces than the requested page size.
	PageSize *int64 `queryParam:"style=form,explode=true,name=pageSize"`
	// Token identifying the page of results to return. If provided, use the value of the `next_page_token` field from a previous request.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Start of the time interval (inclusive) during which the trace data was collected from the application.
	StartTime *string `queryParam:"style=form,explode=true,name=startTime"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// Optional. Type of data returned for traces in the list. Default is `MINIMAL`.
	View *CloudtraceProjectsTracesListViewEnum `queryParam:"style=form,explode=true,name=view"`
}

type CloudtraceProjectsTracesListRequest struct {
	PathParams  CloudtraceProjectsTracesListPathParams
	QueryParams CloudtraceProjectsTracesListQueryParams
	Security    CloudtraceProjectsTracesListSecurity
}

type CloudtraceProjectsTracesListResponse struct {
	ContentType string
	// Successful response
	ListTracesResponse *shared.ListTracesResponse
	StatusCode         int
	RawResponse        *http.Response
}
