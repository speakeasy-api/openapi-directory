<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * OrderLineItemDiscount - Represents a discount that applies to one or more line items in an
 * 
 * order.
 * 
 * Fixed-amount, order-scoped discounts are distributed across all non-zero line item totals.
 * The amount distributed to each line item is relative to the
 * amount contributed by the item to the order subtotal.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class OrderLineItemDiscount
{
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $amountMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $amountMoney = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $appliedMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('applied_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $appliedMoney = null;
    
    /**
     * The catalog object ID referencing [CatalogDiscount](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogDiscount).
     * 
     * @var ?string $catalogObjectId
     */
	#[\JMS\Serializer\Annotation\SerializedName('catalog_object_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $catalogObjectId = null;
    
    /**
     * The version of the catalog object that this discount references.
     * 
     * @var ?int $catalogVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('catalog_version')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $catalogVersion = null;
    
    /**
     * Application-defined data attached to this discount. Metadata fields are intended
     * 
     * to store descriptive references or associations with an entity in another system or store brief
     * information about the object. Square does not process this field; it only stores and returns it
     * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
     * identifiable information or card details).
     * 
     * Keys written by applications must be 60 characters or less and must be in the character set
     * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
     * with a namespace, separated from the key with a ':' character.
     * 
     * Values have a maximum length of 255 characters.
     * 
     * An application can have up to 10 entries per metadata field.
     * 
     * Entries written by applications are private and can only be read or modified by the same
     * application.
     * 
     * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
     * 
     * @var ?array<string, string> $metadata
     */
	#[\JMS\Serializer\Annotation\SerializedName('metadata')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $metadata = null;
    
    /**
     * The discount's name.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * The percentage of the discount, as a string representation of a decimal number.
     * 
     * A value of `7.25` corresponds to a percentage of 7.25%.
     * 
     * `percentage` is not set for amount-based discounts.
     * 
     * @var ?string $percentage
     */
	#[\JMS\Serializer\Annotation\SerializedName('percentage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $percentage = null;
    
    /**
     * The object ID of a [pricing rule](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule) to be applied 
     * 
     * automatically to this discount. The specification and application of the discounts, to 
     * which a `pricing_rule_id` is assigned, are completely controlled by the corresponding 
     * pricing rule.
     * 
     * @var ?string $pricingRuleId
     */
	#[\JMS\Serializer\Annotation\SerializedName('pricing_rule_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $pricingRuleId = null;
    
    /**
     * The reward IDs corresponding to this discount. The application and
     * 
     * specification of discounts that have `reward_ids` are completely controlled by the backing
     * criteria corresponding to the reward tiers of the rewards that are added to the order
     * through the Loyalty API. To manually unapply discounts that are the result of added rewards,
     * the rewards must be removed from the order through the Loyalty API.
     * 
     * @var ?array<string> $rewardIds
     */
	#[\JMS\Serializer\Annotation\SerializedName('reward_ids')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $rewardIds = null;
    
    /**
     * Indicates the level at which the discount applies. For `ORDER` scoped discounts,
     * 
     * Square generates references in `applied_discounts` on all order line items that do
     * not have them. For `LINE_ITEM` scoped discounts, the discount only applies to line items
     * with a discount reference in their `applied_discounts` field.
     * 
     * This field is immutable. To change the scope of a discount, you must delete
     * the discount and re-add it as a new discount.
     * 
     * @var ?string $scope
     */
	#[\JMS\Serializer\Annotation\SerializedName('scope')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $scope = null;
    
    /**
     * The type of the discount.
     * 
     * 
     * Discounts that do not reference a catalog object ID must have a type of
     * `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
     * 
     * @var ?string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $type = null;
    
    /**
     * A unique ID that identifies the discount only within this order.
     * 
     * @var ?string $uid
     */
	#[\JMS\Serializer\Annotation\SerializedName('uid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $uid = null;
    
	public function __construct()
	{
		$this->amountMoney = null;
		$this->appliedMoney = null;
		$this->catalogObjectId = null;
		$this->catalogVersion = null;
		$this->metadata = null;
		$this->name = null;
		$this->percentage = null;
		$this->pricingRuleId = null;
		$this->rewardIds = null;
		$this->scope = null;
		$this->type = null;
		$this->uid = null;
	}
}
