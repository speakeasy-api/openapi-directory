"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accountadwordslink as shared_accountadwordslink
from ..shared import accountbusinessinformation as shared_accountbusinessinformation
from ..shared import accountgooglemybusinesslink as shared_accountgooglemybusinesslink
from ..shared import accountuser as shared_accountuser
from ..shared import accountyoutubechannellink as shared_accountyoutubechannellink
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Account:
    r"""Account data. After the creation of a new account it may take a few minutes before it is fully operational. The methods delete, insert, and update require the admin role."""
    
    adult_content: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adultContent'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the merchant sells adult content."""  
    adwords_links: Optional[list[shared_accountadwordslink.AccountAdwordsLink]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adwordsLinks'), 'exclude': lambda f: f is None }})
    r"""List of linked AdWords accounts that are active or pending approval. To create a new link request, add a new link with status `active` to the list. It will remain in a `pending` state until approved or rejected either in the AdWords interface or through the AdWords API. To delete an active link, or to cancel a link request, remove it from the list."""  
    business_information: Optional[shared_accountbusinessinformation.AccountBusinessInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessInformation'), 'exclude': lambda f: f is None }})  
    google_my_business_link: Optional[shared_accountgooglemybusinesslink.AccountGoogleMyBusinessLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('googleMyBusinessLink'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Required for update. Merchant Center account ID."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"`content#account`\\" """  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Required. Display name for the account."""  
    reviews_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reviewsUrl'), 'exclude': lambda f: f is None }})
    r"""[DEPRECATED] This field is never returned and will be ignored if provided."""  
    seller_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerId'), 'exclude': lambda f: f is None }})
    r"""Client-specific, locally-unique, internal ID for the child account."""  
    users: Optional[list[shared_accountuser.AccountUser]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is None }})
    r"""Users with access to the account. Every account (except for subaccounts) must have at least one admin user."""  
    website_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('websiteUrl'), 'exclude': lambda f: f is None }})
    r"""The merchant's website."""  
    youtube_channel_links: Optional[list[shared_accountyoutubechannellink.AccountYouTubeChannelLink]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('youtubeChannelLinks'), 'exclude': lambda f: f is None }})
    r"""List of linked YouTube channels that are active or pending approval. To create a new link request, add a new link with status `active` to the list. It will remain in a `pending` state until approved or rejected in the YT Creator Studio interface. To delete an active link, or to cancel a link request, remove it from the list."""  
    