/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The pensions' certification
 */
export enum PensionPensionCertificationEnum {
  NotSet = "NotSet",
  Set1 = "Set1",
  Set2 = "Set2",
  Set3 = "Set3",
}

/**
 * The pensions' pensionable pay codes
 */
export class PensionPensionPensionablePayCodes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "PayCode" })
  payCode?: string[];
}

/**
 * The pensions' pro rata method
 */
export enum PensionPensionProRataMethodEnum {
  NotSet = "NotSet",
  Annual260Days = "Annual260Days",
  Annual365Days = "Annual365Days",
  AnnualQualifyingDays = "AnnualQualifyingDays",
  DaysPerCalendarMonth = "DaysPerCalendarMonth",
  DaysPerTaxPeriod = "DaysPerTaxPeriod",
  WorkingDaysPerCalendarMonth = "WorkingDaysPerCalendarMonth",
  WeekDaysPerCalendarMonth = "WeekDaysPerCalendarMonth",
}

/**
 * The pensions' qualifying pay codes
 */
export class PensionPensionQualifyingPayCodes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "PayCode" })
  payCode?: string[];
}

/**
 * The pensions' ras rounding override
 */
export enum PensionPensionRasRoundingOverrideEnum {
  NotSet = "NotSet",
  PennyUp = "PennyUp",
  PennyDown = "PennyDown",
  Bankers = "Bankers",
  FiveUp = "FiveUp",
  FiveDown = "FiveDown",
  Floor = "Floor",
  Ceiling = "Ceiling",
}

/**
 * The pensions' rounding option
 */
export enum PensionPensionRoundingOptionEnum {
  NotSet = "NotSet",
  PennyUp = "PennyUp",
  PennyDown = "PennyDown",
  Bankers = "Bankers",
  FiveUp = "FiveUp",
  FiveDown = "FiveDown",
  Floor = "Floor",
  Ceiling = "Ceiling",
}

/**
 * The pensions' taxation method
 */
export enum PensionPensionTaxationMethodEnum {
  NotSet = "NotSet",
  NetBased = "NetBased",
  ReliefAtSource = "ReliefAtSource",
  TaxReliefExcluded = "TaxReliefExcluded",
}

export class PensionPension extends SpeakeasyBase {
  /**
   * The pensions' a e compatible
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AECompatible" })
  aeCompatible?: boolean;

  /**
   * The pensions' certification
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Certification" })
  certification?: PensionPensionCertificationEnum;

  /**
   * The pensions' code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Code" })
  code?: string;

  /**
   * The pensions' contribution deduction day
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ContributionDeductionDay" })
  contributionDeductionDay?: number;

  /**
   * The pensions' effective date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EffectiveDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  effectiveDate?: Date;

  /**
   * The pensions' employee contribution cash
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EmployeeContributionCash" })
  employeeContributionCash?: number;

  /**
   * The pensions' employee contribution percent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EmployeeContributionPercent" })
  employeeContributionPercent?: number;

  /**
   * The pensions' employer contribution cash
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EmployerContributionCash" })
  employerContributionCash?: number;

  /**
   * The pensions' employer contribution percent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EmployerContributionPercent" })
  employerContributionPercent?: number;

  /**
   * The pensions' employer ni saving
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EmployerNiSaving" })
  employerNiSaving?: boolean;

  /**
   * The pensions' employer ni saving percentage
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EmployerNiSavingPercentage" })
  employerNiSavingPercentage?: number;

  /**
   * The pensions' group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Group" })
  group?: string;

  /**
   * The pensions' lower threshold
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LowerThreshold" })
  lowerThreshold?: number;

  /**
   * The pensions' meta data
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MetaData" })
  metaData?: Record<string, any>;

  /**
   * The pensions' next revision date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NextRevisionDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  nextRevisionDate?: Date;

  /**
   * The pensions' pensionable pay codes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PensionablePayCodes" })
  @Type(() => PensionPensionPensionablePayCodes)
  pensionablePayCodes?: PensionPensionPensionablePayCodes;

  /**
   * The pensions' pro rata method
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProRataMethod" })
  proRataMethod?: PensionPensionProRataMethodEnum;

  /**
   * The pensions' provider employer ref
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProviderEmployerRef" })
  providerEmployerRef?: string;

  /**
   * The pensions' provider name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProviderName" })
  providerName?: string;

  /**
   * The pensions' qualifying pay codes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "QualifyingPayCodes" })
  @Type(() => PensionPensionQualifyingPayCodes)
  qualifyingPayCodes?: PensionPensionQualifyingPayCodes;

  /**
   * The pensions' ras rounding override
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RasRoundingOverride" })
  rasRoundingOverride?: PensionPensionRasRoundingOverrideEnum;

  /**
   * The pensions' revision
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Revision" })
  revision?: number;

  /**
   * The pensions' rounding option
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RoundingOption" })
  roundingOption?: PensionPensionRoundingOptionEnum;

  /**
   * The pensions' salary sacrifice
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SalarySacrifice" })
  salarySacrifice?: boolean;

  /**
   * The pensions' scheme name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SchemeName" })
  schemeName?: string;

  /**
   * The pensions' sub group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SubGroup" })
  subGroup?: string;

  /**
   * The pensions' taxation method
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TaxationMethod" })
  taxationMethod?: PensionPensionTaxationMethodEnum;

  /**
   * The pensions' upper threshold
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpperThreshold" })
  upperThreshold?: number;

  /**
   * The pensions' use a e thresholds
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UseAEThresholds" })
  useAEThresholds?: boolean;
}

/**
 * The pension object.
 */
export class Pension extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Pension" })
  @Type(() => PensionPension)
  pension?: PensionPension;
}
