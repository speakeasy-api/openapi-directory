/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum DeparturesGetForStopAndRouteExpandEnum {
  All = "All",
  Stop = "Stop",
  Route = "Route",
  Run = "Run",
  Direction = "Direction",
  Disruption = "Disruption",
  VehicleDescriptor = "VehicleDescriptor",
  VehiclePosition = "VehiclePosition",
  None = "None",
}

/**
 * Number identifying transport mode; values returned via RouteTypes API
 */
export enum DeparturesGetForStopAndRouteRouteTypeEnum {
  Zero = "0",
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
}

export class DeparturesGetForStopAndRouteRequest extends SpeakeasyBase {
  /**
   * Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=date_utc;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  dateUtc?: Date;

  /**
   * Your developer id
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=devid" })
  devid?: string;

  /**
   * Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=direction_id",
  })
  directionId?: number;

  /**
   * List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.
   *
   * @remarks
   *             Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=expand",
  })
  expand?: DeparturesGetForStopAndRouteExpandEnum[];

  /**
   * Indicates that stop_id parameter will accept "GTFS stop_id" data
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=gtfs" })
  gtfs?: boolean;

  /**
   * Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_cancelled",
  })
  includeCancelled?: boolean;

  /**
   * Indicates if the route geopath should be returned
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_geopath",
  })
  includeGeopath?: boolean;

  /**
   * Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=look_backwards",
  })
  lookBackwards?: boolean;

  /**
   * Maximum number of results returned
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_results",
  })
  maxResults?: number;

  /**
   * Identifier of route; values returned by Routes API - v3/routes
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=route_id",
  })
  routeId: string;

  /**
   * Number identifying transport mode; values returned via RouteTypes API
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=route_type",
  })
  routeType: DeparturesGetForStopAndRouteRouteTypeEnum;

  /**
   * Authentication signature for request
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=signature",
  })
  signature?: string;

  /**
   * Identifier of stop; values returned by Stops API
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=stop_id",
  })
  stopId: number;

  /**
   * Please ignore
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=token" })
  token?: string;
}

export class DeparturesGetForStopAndRouteResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Service departures from the specified stop for the specified route (and route type); departures are timetabled and real-time (if applicable).
   */
  @SpeakeasyMetadata()
  v3DeparturesResponse?: shared.V3DeparturesResponse;

  /**
   * Invalid Request
   */
  @SpeakeasyMetadata()
  v3ErrorResponse?: shared.V3ErrorResponse;
}
