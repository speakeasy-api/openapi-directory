"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GroupMembersSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GroupMembersRequest:
    
    group_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'groupId', 'style': 'simple', 'explode': False }})
    r"""The group ID.<br>
    Can be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups).
    """  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_number: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_number', 'style': 'form', 'explode': True }})
    r"""**Deprecated** - This field has been deprecated and we will stop supporting it completely in a future release. Please use \\"next_page_token\\" for pagination instead of this field.
    
    The page number of the current page in the returned records.
    """  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    

@dataclasses.dataclass
class GroupMembers200ApplicationXMLMembers:
    
    email: Optional[str] = dataclasses.field(default=None)
    r"""User's email address."""  
    first_name: Optional[str] = dataclasses.field(default=None)
    r"""First name of the user."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Unique Identifier of the user."""  
    last_name: Optional[str] = dataclasses.field(default=None)
    r"""Last name of the user."""  
    type: Optional[int] = dataclasses.field(default=None)
    r"""User type: <br> `1` - Basic<br> `2` - Licensed<br> `3` - On-prem"""  
    

@dataclasses.dataclass
class GroupMembers200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br> Only available for paid account,{accountId}."""
    
    members: Optional[list[GroupMembers200ApplicationXMLMembers]] = dataclasses.field(default=None)  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None)
    r"""The number of pages returned from this request."""  
    page_number: Optional[int] = dataclasses.field(default=None)
    r"""The page number of the current results."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned from a single API call."""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The total number of records available across all pages."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GroupMembers200ApplicationJSONMembers:
    
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""User's email address."""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name'), 'exclude': lambda f: f is None }})
    r"""First name of the user."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique Identifier of the user."""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name'), 'exclude': lambda f: f is None }})
    r"""Last name of the user."""  
    type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""User type: <br> `1` - Basic<br> `2` - Licensed<br> `3` - On-prem"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GroupMembers200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br> Only available for paid account,{accountId}."""
    
    members: Optional[list[GroupMembers200ApplicationJSONMembers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members'), 'exclude': lambda f: f is None }})  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_count'), 'exclude': lambda f: f is None }})
    r"""The number of pages returned from this request."""  
    page_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_number'), 'exclude': lambda f: f is None }})
    r"""The page number of the current results."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned from a single API call."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The total number of records available across all pages."""  
    

@dataclasses.dataclass
class GroupMembersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    group_members_200_application_json_object: Optional[GroupMembers200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br> Only available for paid account,{accountId}."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    