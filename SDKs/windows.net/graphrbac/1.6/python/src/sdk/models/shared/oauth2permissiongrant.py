"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OAuth2PermissionGrantConsentTypeEnum(str, Enum):
    r"""Indicates if consent was provided by the administrator (on behalf of the organization) or by an individual."""
    ALL_PRINCIPALS = 'AllPrincipals'
    PRINCIPAL = 'Principal'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OAuth2PermissionGrant:
    r"""The relevant app Service Principal Object Id and the Service Principal Object Id you want to grant."""
    
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})
    r"""The id of the resource's service principal granted consent to impersonate the user when accessing the resource (represented by the resourceId property)."""  
    consent_type: Optional[OAuth2PermissionGrantConsentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consentType'), 'exclude': lambda f: f is None }})
    r"""Indicates if consent was provided by the administrator (on behalf of the organization) or by an individual."""  
    expiry_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiryTime'), 'exclude': lambda f: f is None }})
    r"""Expiry time for TTL"""  
    object_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectId'), 'exclude': lambda f: f is None }})
    r"""The id of the permission grant"""  
    odata_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('odata.type'), 'exclude': lambda f: f is None }})
    r"""Microsoft.DirectoryServices.OAuth2PermissionGrant"""  
    principal_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('principalId'), 'exclude': lambda f: f is None }})
    r"""When consent type is Principal, this property specifies the id of the user that granted consent and applies only for that user."""  
    resource_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceId'), 'exclude': lambda f: f is None }})
    r"""Object Id of the resource you want to grant"""  
    scope: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    r"""Specifies the value of the scope claim that the resource application should expect in the OAuth 2.0 access token. For example, User.Read"""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""Start time for TTL"""  
    