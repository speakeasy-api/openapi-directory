"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import hash as shared_hash
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleDevtoolsArtifactregistryV1File:
    r"""Files store content that is potentially associated with Packages or Versions."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time when the File was created."""  
    fetch_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fetchTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time when the last attempt to refresh the file's data was made. Only set when the repository is remote."""  
    hashes: Optional[list[shared_hash.Hash]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hashes'), 'exclude': lambda f: f is None }})
    r"""The hashes of the file content."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the file, for example: \\"projects/p1/locations/us-central1/repositories/repo1/files/a%2Fb%2Fc.txt\\". If the file ID part contains slashes, they are escaped."""  
    owner: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner'), 'exclude': lambda f: f is None }})
    r"""The name of the Package or Version that owns this file, if any."""  
    size_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sizeBytes'), 'exclude': lambda f: f is None }})
    r"""The size of the File in bytes."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time when the File was last updated."""  
    