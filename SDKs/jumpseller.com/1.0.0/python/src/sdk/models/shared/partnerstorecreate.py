"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PartnerStoreCreatePlanNameEnum(str, Enum):
    r"""New Store plan name."""
    PRO = 'pro'
    PLUS = 'plus'
    PREMIUM = 'premium'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PartnerStoreCreate:
    r"""New partnered Store parameters."""
    
    aff: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aff'), 'exclude': lambda f: f is None }})
    r"""Partner code."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""New Store administrator email."""  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale'), 'exclude': lambda f: f is None }})
    r"""ISO3166-2 code for the store langauge."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""New Store administrator password."""  
    plan_name: Optional[PartnerStoreCreatePlanNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_name'), 'exclude': lambda f: f is None }})
    r"""New Store plan name."""  
    reject_duplicates: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reject_duplicates'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the request should fail if the Store name provided is already in use."""  
    store_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('store_name'), 'exclude': lambda f: f is None }})
    r"""New Store name."""  
    