/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The caching configuration for a resolver that has caching activated.
 */
export class UpdateResolverRequestBodyCachingConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "cachingKeys" })
  cachingKeys?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "ttl" })
  ttl?: number;
}

/**
 * <p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.</p> </li> </ul>
 */
export enum UpdateResolverRequestBodyKindEnum {
  Unit = "UNIT",
  Pipeline = "PIPELINE",
}

/**
 * The pipeline configuration for a resolver of kind <code>PIPELINE</code>.
 */
export class UpdateResolverRequestBodyPipelineConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "functions" })
  functions?: string[];
}

/**
 * Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
 */
export class UpdateResolverRequestBodyRuntime extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: shared.RuntimeNameEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "runtimeVersion" })
  runtimeVersion?: string;
}

/**
 * <p>Describes a Sync configuration for a resolver.</p> <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.</p>
 */
export class UpdateResolverRequestBodySyncConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "conflictDetection" })
  conflictDetection?: shared.ConflictDetectionTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "conflictHandler" })
  conflictHandler?: shared.ConflictHandlerTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "lambdaConflictHandlerConfig" })
  @Type(() => shared.LambdaConflictHandlerConfig)
  lambdaConflictHandlerConfig?: shared.LambdaConflictHandlerConfig;
}

export class UpdateResolverRequestBody extends SpeakeasyBase {
  /**
   * The caching configuration for a resolver that has caching activated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cachingConfig" })
  @Type(() => UpdateResolverRequestBodyCachingConfig)
  cachingConfig?: UpdateResolverRequestBodyCachingConfig;

  /**
   * The <code>resolver</code> code that contains the request and response functions. When code is used, the <code>runtime</code> is required. The <code>runtime</code> value must be <code>APPSYNC_JS</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  /**
   * The new data source name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataSourceName" })
  dataSourceName?: string;

  /**
   * <p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.</p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: UpdateResolverRequestBodyKindEnum;

  /**
   * The maximum batching size for a resolver.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxBatchSize" })
  maxBatchSize?: number;

  /**
   * The pipeline configuration for a resolver of kind <code>PIPELINE</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pipelineConfig" })
  @Type(() => UpdateResolverRequestBodyPipelineConfig)
  pipelineConfig?: UpdateResolverRequestBodyPipelineConfig;

  /**
   * <p>The new request mapping template.</p> <p>A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL).</p> <p>VTL request mapping templates are optional when using an Lambda data source. For all other data sources, VTL request and response mapping templates are required.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestMappingTemplate" })
  requestMappingTemplate?: string;

  /**
   * The new response mapping template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "responseMappingTemplate" })
  responseMappingTemplate?: string;

  /**
   * Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runtime" })
  @Type(() => UpdateResolverRequestBodyRuntime)
  runtime?: UpdateResolverRequestBodyRuntime;

  /**
   * <p>Describes a Sync configuration for a resolver.</p> <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "syncConfig" })
  @Type(() => UpdateResolverRequestBodySyncConfig)
  syncConfig?: UpdateResolverRequestBodySyncConfig;
}

export class UpdateResolverRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateResolverRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The API ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=apiId",
  })
  apiId: string;

  /**
   * The new field name.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=fieldName",
  })
  fieldName: string;

  /**
   * The new type name.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=typeName",
  })
  typeName: string;
}

export class UpdateResolverResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  /**
   * ConcurrentModificationException
   */
  @SpeakeasyMetadata()
  concurrentModificationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * UnauthorizedException
   */
  @SpeakeasyMetadata()
  unauthorizedException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateResolverResponse?: shared.UpdateResolverResponse;
}
