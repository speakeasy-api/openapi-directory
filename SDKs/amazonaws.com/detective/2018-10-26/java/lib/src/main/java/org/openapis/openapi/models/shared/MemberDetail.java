/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * MemberDetail - Details about a member account in a behavior graph.
 */
public class MemberDetail {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountId")
    public String accountId;

    public MemberDetail withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AdministratorId")
    public String administratorId;

    public MemberDetail withAdministratorId(String administratorId) {
        this.administratorId = administratorId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DatasourcePackageIngestStates")
    public java.util.Map<String, DatasourcePackageIngestStateEnum> datasourcePackageIngestStates;

    public MemberDetail withDatasourcePackageIngestStates(java.util.Map<String, DatasourcePackageIngestStateEnum> datasourcePackageIngestStates) {
        this.datasourcePackageIngestStates = datasourcePackageIngestStates;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DisabledReason")
    public MemberDisabledReasonEnum disabledReason;

    public MemberDetail withDisabledReason(MemberDisabledReasonEnum disabledReason) {
        this.disabledReason = disabledReason;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EmailAddress")
    public String emailAddress;

    public MemberDetail withEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GraphArn")
    public String graphArn;

    public MemberDetail withGraphArn(String graphArn) {
        this.graphArn = graphArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InvitationType")
    public InvitationTypeEnum invitationType;

    public MemberDetail withInvitationType(InvitationTypeEnum invitationType) {
        this.invitationType = invitationType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("InvitedTime")
    public OffsetDateTime invitedTime;

    public MemberDetail withInvitedTime(OffsetDateTime invitedTime) {
        this.invitedTime = invitedTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MasterId")
    public String masterId;

    public MemberDetail withMasterId(String masterId) {
        this.masterId = masterId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PercentOfGraphUtilization")
    public Double percentOfGraphUtilization;

    public MemberDetail withPercentOfGraphUtilization(Double percentOfGraphUtilization) {
        this.percentOfGraphUtilization = percentOfGraphUtilization;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("PercentOfGraphUtilizationUpdatedTime")
    public OffsetDateTime percentOfGraphUtilizationUpdatedTime;

    public MemberDetail withPercentOfGraphUtilizationUpdatedTime(OffsetDateTime percentOfGraphUtilizationUpdatedTime) {
        this.percentOfGraphUtilizationUpdatedTime = percentOfGraphUtilizationUpdatedTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public MemberStatusEnum status;

    public MemberDetail withStatus(MemberStatusEnum status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("UpdatedTime")
    public OffsetDateTime updatedTime;

    public MemberDetail withUpdatedTime(OffsetDateTime updatedTime) {
        this.updatedTime = updatedTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VolumeUsageByDatasourcePackage")
    public java.util.Map<String, DatasourcePackageUsageInfo> volumeUsageByDatasourcePackage;

    public MemberDetail withVolumeUsageByDatasourcePackage(java.util.Map<String, DatasourcePackageUsageInfo> volumeUsageByDatasourcePackage) {
        this.volumeUsageByDatasourcePackage = volumeUsageByDatasourcePackage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VolumeUsageInBytes")
    public Long volumeUsageInBytes;

    public MemberDetail withVolumeUsageInBytes(Long volumeUsageInBytes) {
        this.volumeUsageInBytes = volumeUsageInBytes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("VolumeUsageUpdatedTime")
    public OffsetDateTime volumeUsageUpdatedTime;

    public MemberDetail withVolumeUsageUpdatedTime(OffsetDateTime volumeUsageUpdatedTime) {
        this.volumeUsageUpdatedTime = volumeUsageUpdatedTime;
        return this;
    }
    
    public MemberDetail(){}
}
