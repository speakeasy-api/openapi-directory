"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import backfillallstrategy as shared_backfillallstrategy
from ..shared import destinationconfig as shared_destinationconfig
from ..shared import error as shared_error
from ..shared import sourceconfig as shared_sourceconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class StreamStateEnum(str, Enum):
    r"""The state of the stream."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATED = 'CREATED'
    RUNNING = 'RUNNING'
    PAUSED = 'PAUSED'
    MAINTENANCE = 'MAINTENANCE'
    FAILED = 'FAILED'
    FAILED_PERMANENTLY = 'FAILED_PERMANENTLY'
    STARTING = 'STARTING'
    DRAINING = 'DRAINING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StreamInput:
    
    backfill_all: Optional[shared_backfillallstrategy.BackfillAllStrategy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backfillAll'), 'exclude': lambda f: f is None }})
    r"""Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded."""  
    backfill_none: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backfillNone'), 'exclude': lambda f: f is None }})
    r"""Backfill strategy to disable automatic backfill for the Stream's objects."""  
    customer_managed_encryption_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerManagedEncryptionKey'), 'exclude': lambda f: f is None }})
    r"""Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS."""  
    destination_config: Optional[shared_destinationconfig.DestinationConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationConfig'), 'exclude': lambda f: f is None }})
    r"""The configuration of the stream destination."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. Display name."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels."""  
    source_config: Optional[shared_sourceconfig.SourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceConfig'), 'exclude': lambda f: f is None }})
    r"""The configuration of the stream source."""  
    state: Optional[StreamStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The state of the stream."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Stream:
    
    backfill_all: Optional[shared_backfillallstrategy.BackfillAllStrategy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backfillAll'), 'exclude': lambda f: f is None }})
    r"""Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded."""  
    backfill_none: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backfillNone'), 'exclude': lambda f: f is None }})
    r"""Backfill strategy to disable automatic backfill for the Stream's objects."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The creation time of the stream."""  
    customer_managed_encryption_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerManagedEncryptionKey'), 'exclude': lambda f: f is None }})
    r"""Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS."""  
    destination_config: Optional[shared_destinationconfig.DestinationConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationConfig'), 'exclude': lambda f: f is None }})
    r"""The configuration of the stream destination."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. Display name."""  
    errors: Optional[list[shared_error.Error]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""Output only. Errors on the Stream."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The stream's name."""  
    source_config: Optional[shared_sourceconfig.SourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceConfig'), 'exclude': lambda f: f is None }})
    r"""The configuration of the stream source."""  
    state: Optional[StreamStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The state of the stream."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The last update time of the stream."""  
    