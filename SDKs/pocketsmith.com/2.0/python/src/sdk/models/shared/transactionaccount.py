"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import institution as shared_institution
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TransactionAccountTypeEnum(str, Enum):
    r"""The type of the transaction account."""
    BANK = 'bank'
    CREDITS = 'credits'
    CASH = 'cash'
    STOCKS = 'stocks'
    MORTGAGE = 'mortgage'
    LOANS = 'loans'
    VEHICLE = 'vehicle'
    PROPERTY = 'property'
    INSURANCE = 'insurance'
    OTHER_ASSET = 'other_asset'
    OTHER_LIABILITY = 'other_liability'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionAccount:
    r"""Success"""
    
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency_code'), 'exclude': lambda f: f is None }})
    r"""The currency that the account is in. This is determined by the account that the transaction account belongs to."""  
    current_balance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_balance'), 'exclude': lambda f: f is None }})  
    current_balance_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_balance_date'), 'exclude': lambda f: f is None }})  
    current_balance_exchange_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_balance_exchange_rate'), 'exclude': lambda f: f is None }})
    r"""The exchange rate between the transaction account's currency and the user's base currency, when different. If the currencies are the same, null is returned."""  
    current_balance_in_base_currency: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_balance_in_base_currency'), 'exclude': lambda f: f is None }})
    r"""The current balance of the transaction account in the user's base currency."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    institution: Optional[shared_institution.Institution] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('institution'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})  
    safe_balance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('safe_balance'), 'exclude': lambda f: f is None }})
    r"""The current safe balance, if safe balance is activated and available for the transaction account. If safe balance is not available, then null is returned."""  
    safe_balance_in_base_currency: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('safe_balance_in_base_currency'), 'exclude': lambda f: f is None }})
    r"""The current safe balance in the user's base currency, if safe balance is activated and available for the transaction account. If safe balance is not available, then null is returned."""  
    starting_balance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starting_balance'), 'exclude': lambda f: f is None }})  
    starting_balance_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starting_balance_date'), 'exclude': lambda f: f is None }})  
    type: Optional[TransactionAccountTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the transaction account."""  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    