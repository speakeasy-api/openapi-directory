"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import patchoperationtype_enum as shared_patchoperationtype_enum
from ..shared import rebootoption_enum as shared_rebootoption_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InstancePatchState:
    r"""Defines the high-level patch compliance state for a managed node, providing information about the number of installed, missing, not applicable, and failed patches along with metadata about the operation when this information was gathered for the managed node."""
    
    baseline_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BaselineId') }})  
    instance_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceId') }})  
    operation: shared_patchoperationtype_enum.PatchOperationTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Operation') }})  
    operation_end_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OperationEndTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    operation_start_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OperationStartTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    patch_group: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PatchGroup') }})  
    critical_non_compliant_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CriticalNonCompliantCount'), 'exclude': lambda f: f is None }})  
    failed_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailedCount'), 'exclude': lambda f: f is None }})  
    installed_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstalledCount'), 'exclude': lambda f: f is None }})  
    installed_other_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstalledOtherCount'), 'exclude': lambda f: f is None }})  
    installed_pending_reboot_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstalledPendingRebootCount'), 'exclude': lambda f: f is None }})  
    installed_rejected_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstalledRejectedCount'), 'exclude': lambda f: f is None }})  
    install_override_list: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstallOverrideList'), 'exclude': lambda f: f is None }})  
    last_no_reboot_install_operation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastNoRebootInstallOperationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    missing_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MissingCount'), 'exclude': lambda f: f is None }})  
    not_applicable_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotApplicableCount'), 'exclude': lambda f: f is None }})  
    other_non_compliant_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OtherNonCompliantCount'), 'exclude': lambda f: f is None }})  
    owner_information: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OwnerInformation'), 'exclude': lambda f: f is None }})  
    reboot_option: Optional[shared_rebootoption_enum.RebootOptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RebootOption'), 'exclude': lambda f: f is None }})  
    security_non_compliant_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityNonCompliantCount'), 'exclude': lambda f: f is None }})  
    snapshot_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SnapshotId'), 'exclude': lambda f: f is None }})  
    unreported_not_applicable_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnreportedNotApplicableCount'), 'exclude': lambda f: f is None }})  
    