<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class CreateIdentityProviderRequestBody
{
    /**
     * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request.</p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
     * 
     * @var ?string $clientToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $clientToken = null;
    
    /**
     * <p>The identity provider details. The following list describes the provider detail keys for each identity provider type. </p> <ul> <li> <p>For Google and Login with Amazon:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> </ul> </li> <li> <p>For Facebook:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> <li> <p> <code>api_version</code> </p> </li> </ul> </li> <li> <p>For Sign in with Apple:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>team_id</code> </p> </li> <li> <p> <code>key_id</code> </p> </li> <li> <p> <code>private_key</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> </ul> </li> <li> <p>For OIDC providers:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>attributes_request_method</code> </p> </li> <li> <p> <code>oidc_issuer</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> <li> <p> <code>authorize_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>token_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>attributes_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>jwks_uri</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> </ul> </li> <li> <p>For SAML providers:</p> <ul> <li> <p> <code>MetadataFile</code> OR <code>MetadataURL</code> </p> </li> <li> <p> <code>IDPSignout</code> (boolean) <i>optional</i> </p> </li> </ul> </li> </ul>
     * 
     * @var array<string, string> $identityProviderDetails
     */
	#[\JMS\Serializer\Annotation\SerializedName('identityProviderDetails')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    public array $identityProviderDetails;
    
    /**
     * The identity provider name.
     * 
     * @var string $identityProviderName
     */
	#[\JMS\Serializer\Annotation\SerializedName('identityProviderName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $identityProviderName;
    
    /**
     * The identity provider type.
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\CreateIdentityProviderRequestBodyIdentityProviderTypeEnum $identityProviderType
     */
	#[\JMS\Serializer\Annotation\SerializedName('identityProviderType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\CreateIdentityProviderRequestBodyIdentityProviderTypeEnum>')]
    public CreateIdentityProviderRequestBodyIdentityProviderTypeEnum $identityProviderType;
    
    /**
     * The ARN of the web portal.
     * 
     * @var string $portalArn
     */
	#[\JMS\Serializer\Annotation\SerializedName('portalArn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $portalArn;
    
	public function __construct()
	{
		$this->clientToken = null;
		$this->identityProviderDetails = [];
		$this->identityProviderName = "";
		$this->identityProviderType = \OpenAPI\OpenAPI\Models\Operations\CreateIdentityProviderRequestBodyIdentityProviderTypeEnum::SAML;
		$this->portalArn = "";
	}
}
