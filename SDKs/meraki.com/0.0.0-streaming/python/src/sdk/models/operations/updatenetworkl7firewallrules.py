"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateNetworkL7FirewallRulesRequestBodyRulesPolicyEnum(str, Enum):
    r"""'Deny' traffic specified by this rule"""
    DENY = 'deny'

class UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnum(str, Enum):
    r"""Type of the L7 rule. One of: 'application', 'applicationCategory', 'host', 'port', 'ipRange'"""
    APPLICATION = 'application'
    APPLICATION_CATEGORY = 'applicationCategory'
    HOST = 'host'
    IP_RANGE = 'ipRange'
    PORT = 'port'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkL7FirewallRulesRequestBodyRules:
    
    policy: Optional[UpdateNetworkL7FirewallRulesRequestBodyRulesPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy'), 'exclude': lambda f: f is None }})
    r"""'Deny' traffic specified by this rule"""  
    type: Optional[UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the L7 rule. One of: 'application', 'applicationCategory', 'host', 'port', 'ipRange'"""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""The 'value' of what you want to block. Format of 'value' varies depending on type of the rule. The application categories and application ids can be retrieved from the the 'MX L7 application categories' endpoint. The countries follow the two-letter ISO 3166-1 alpha-2 format."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkL7FirewallRulesRequestBody:
    
    rules: Optional[list[UpdateNetworkL7FirewallRulesRequestBodyRules]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules'), 'exclude': lambda f: f is None }})
    r"""An ordered array of the MX L7 firewall rules"""  
    

@dataclasses.dataclass
class UpdateNetworkL7FirewallRulesRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkL7FirewallRulesRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkL7FirewallRulesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_l7_firewall_rules_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    