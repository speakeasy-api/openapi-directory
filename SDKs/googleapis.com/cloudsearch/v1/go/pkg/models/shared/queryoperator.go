// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// QueryOperatorTypeEnum - The type of the operator.
type QueryOperatorTypeEnum string

const (
	QueryOperatorTypeEnumUnknown   QueryOperatorTypeEnum = "UNKNOWN"
	QueryOperatorTypeEnumInteger   QueryOperatorTypeEnum = "INTEGER"
	QueryOperatorTypeEnumDouble    QueryOperatorTypeEnum = "DOUBLE"
	QueryOperatorTypeEnumTimestamp QueryOperatorTypeEnum = "TIMESTAMP"
	QueryOperatorTypeEnumBoolean   QueryOperatorTypeEnum = "BOOLEAN"
	QueryOperatorTypeEnumEnum      QueryOperatorTypeEnum = "ENUM"
	QueryOperatorTypeEnumDate      QueryOperatorTypeEnum = "DATE"
	QueryOperatorTypeEnumText      QueryOperatorTypeEnum = "TEXT"
	QueryOperatorTypeEnumHTML      QueryOperatorTypeEnum = "HTML"
)

func (e *QueryOperatorTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNKNOWN":
		fallthrough
	case "INTEGER":
		fallthrough
	case "DOUBLE":
		fallthrough
	case "TIMESTAMP":
		fallthrough
	case "BOOLEAN":
		fallthrough
	case "ENUM":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "HTML":
		*e = QueryOperatorTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryOperatorTypeEnum: %s", s)
	}
}

// QueryOperator - The definition of a operator that can be used in a Search/Suggest request.
type QueryOperator struct {
	// Display name of the operator
	DisplayName *string `json:"displayName,omitempty"`
	// Potential list of values for the opeatror field. This field is only filled when we can safely enumerate all the possible values of this operator.
	EnumValues []string `json:"enumValues,omitempty"`
	// Indicates the operator name that can be used to isolate the property using the greater-than operator.
	GreaterThanOperatorName *string `json:"greaterThanOperatorName,omitempty"`
	// Can this operator be used to get facets.
	IsFacetable *bool `json:"isFacetable,omitempty"`
	// Indicates if multiple values can be set for this property.
	IsRepeatable *bool `json:"isRepeatable,omitempty"`
	// Will the property associated with this facet be returned as part of search results.
	IsReturnable *bool `json:"isReturnable,omitempty"`
	// Can this operator be used to sort results.
	IsSortable *bool `json:"isSortable,omitempty"`
	// Can get suggestions for this field.
	IsSuggestable *bool `json:"isSuggestable,omitempty"`
	// Indicates the operator name that can be used to isolate the property using the less-than operator.
	LessThanOperatorName *string `json:"lessThanOperatorName,omitempty"`
	// The name of the object corresponding to the operator. This field is only filled for schema-specific operators, and is unset for common operators.
	ObjectType *string `json:"objectType,omitempty"`
	// The name of the operator.
	OperatorName *string `json:"operatorName,omitempty"`
	// The type of the operator.
	Type *QueryOperatorTypeEnum `json:"type,omitempty"`
}
