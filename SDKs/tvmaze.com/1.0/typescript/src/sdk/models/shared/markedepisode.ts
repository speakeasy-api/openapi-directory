/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class MarkedEpisodeEmbedded extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "episode" })
  episode?: Record<string, any>;
}

export class MarkedEpisodeInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "_embedded" })
  @Type(() => MarkedEpisodeEmbedded)
  embedded?: MarkedEpisodeEmbedded;

  /**
   * Epoch timestamp for when the user watched the episode, or 0 for unknown.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marked_at" })
  markedAt?: number;

  /**
   * 0 for watched, 1 for acquired, 2 for skipped
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: any;
}

/**
 * this episode is now marked
 */
export class MarkedEpisode extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "_embedded" })
  @Type(() => MarkedEpisodeEmbedded)
  embedded?: MarkedEpisodeEmbedded;

  @SpeakeasyMetadata()
  @Expose({ name: "episode_id" })
  episodeId?: number;

  /**
   * Epoch timestamp for when the user watched the episode, or 0 for unknown.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marked_at" })
  markedAt?: number;

  /**
   * 0 for watched, 1 for acquired, 2 for skipped
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: any;
}
