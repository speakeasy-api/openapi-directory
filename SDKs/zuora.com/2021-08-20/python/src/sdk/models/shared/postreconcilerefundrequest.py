"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class POSTReconcileRefundRequestActionEnum(str, Enum):
    r"""The action of the refund reconciliation.
      - `settle`: Sets the gatewayState to \"Settled\" and returns the refund object as response.
      - `reject`: Sets the gatewayState to \"FailedToSettle\" and handle the event according to the settings configured in the Gateway Reconciliation Configuration in Payments Settings through Zuora UI. See [Configure how to handle refund rejected events](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/M_Payment_Gateways/Gateway_Reconciliation#Configure_how_to_handle_refund_rejected_events) for details.
    """
    SETTLE = 'settle'
    REJECT = 'reject'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class POSTReconcileRefundRequest:
    
    action: Optional[POSTReconcileRefundRequestActionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""The action of the refund reconciliation.
      - `settle`: Sets the gatewayState to \"Settled\" and returns the refund object as response.
      - `reject`: Sets the gatewayState to \"FailedToSettle\" and handle the event according to the settings configured in the Gateway Reconciliation Configuration in Payments Settings through Zuora UI. See [Configure how to handle refund rejected events](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/M_Payment_Gateways/Gateway_Reconciliation#Configure_how_to_handle_refund_rejected_events) for details.
    """  
    action_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actionDate'), 'exclude': lambda f: f is None }})
    r"""The date and time of the refund reconciliation action, in `yyyy-mm-dd hh:mm:ss` format."""  
    gateway_reconciliation_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gatewayReconciliationReason'), 'exclude': lambda f: f is None }})
    r"""The reason of gateway reconciliation."""  
    gateway_reconciliation_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gatewayReconciliationStatus'), 'exclude': lambda f: f is None }})
    r"""The status of gateway reconciliation."""  
    payout_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payoutId'), 'exclude': lambda f: f is None }})
    r"""The payout ID of the refund from the gateway side."""  
    