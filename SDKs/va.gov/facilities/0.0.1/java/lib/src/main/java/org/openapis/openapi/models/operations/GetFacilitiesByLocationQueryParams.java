/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetFacilitiesByLocationQueryParams {
    /**
     * Bounding box (longitude, latitude, longitude, latitude) within which facilities will be returned. (WGS84 coordinate reference system)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=bbox[]")
    public Float[] bbox;
    public GetFacilitiesByLocationQueryParams withBbox(Float[] bbox) {
        this.bbox = bbox;
        return this;
    }
    
    /**
     * List of comma-separated facility IDs to retrieve in a single request. Can be combined with lat and long parameters to retrieve facilities sorted by distance from a location.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ids")
    public String[] ids;
    public GetFacilitiesByLocationQueryParams withIds(String[] ids) {
        this.ids = ids;
        return this;
    }
    
    /**
     * Latitude of point to search for facilities, in WGS84 coordinate reference system.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=lat")
    public Float lat;
    public GetFacilitiesByLocationQueryParams withLat(Float lat) {
        this.lat = lat;
        return this;
    }
    
    /**
     * Longitude of point to search for facilities, in WGS84 coordinate reference system.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=long")
    public Float long_;
    public GetFacilitiesByLocationQueryParams withLong(Float long_) {
        this.long_ = long_;
        return this;
    }
    
    /**
     * Optional facility mobile search filter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=mobile")
    public Boolean mobile;
    public GetFacilitiesByLocationQueryParams withMobile(Boolean mobile) {
        this.mobile = mobile;
        return this;
    }
    
    /**
     * Page of results to return per paginated response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Long page;
    public GetFacilitiesByLocationQueryParams withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * Number of results to return per paginated response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Long perPage;
    public GetFacilitiesByLocationQueryParams withPerPage(Long perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * Optional facility service search filter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=services[]")
    public String[] services;
    public GetFacilitiesByLocationQueryParams withServices(String[] services) {
        this.services = services;
        return this;
    }
    
    /**
     * State in which to search for facilities. Except in rare cases, this is two characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=state")
    public String state;
    public GetFacilitiesByLocationQueryParams withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * Optional facility type search filter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    public GetFacilitiesByLocationTypeEnum type;
    public GetFacilitiesByLocationQueryParams withType(GetFacilitiesByLocationTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * VISN search of matching facilities.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=visn")
    public Double visn;
    public GetFacilitiesByLocationQueryParams withVisn(Double visn) {
        this.visn = visn;
        return this;
    }
    
    /**
     * Zip code to search for facilities. More detailed zip codes can be passed in, but only the first five digits are used to determine facilities to return.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=zip")
    public String zip;
    public GetFacilitiesByLocationQueryParams withZip(String zip) {
        this.zip = zip;
        return this;
    }
    
}
