"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class FloatingIPs:
    r"""Floating IPs help you to create highly available setups. You can assign a Floating IP to any Server. The Server can then use this IP. You can reassign it to a different Server at any time, or you can choose to unassign the IP from Servers all together.
    
    Floating IPs can be used globally. This means you can assign a Floating IP to a Server in one Location and later reassign it to a Server in a different Location. For optimal routing and latency Floating IPs should be used in the Location they were created in.
    
    For Floating IPs to work with your Server, you must configure them inside your operation system.
    
    Floating IPs of type `ipv4` use a single IPv4 address as their `ip` property. Floating IPs of type `ipv6` use a /64 network such as `fc00::/64` as their `ip` property. Any IP address within that network can be used on your host.
    
    Floating IPs are billed on a monthly basis.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_floating_ips_id_(self, request: operations.DeleteFloatingIpsIDRequest) -> operations.DeleteFloatingIpsIDResponse:
        r"""Delete a Floating IP
        Deletes a Floating IP. If it is currently assigned to a Server it will automatically get unassigned.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteFloatingIpsIDRequest, base_url, '/floating_ips/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFloatingIpsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_floating_ips(self, request: operations.GetFloatingIpsRequest) -> operations.GetFloatingIpsResponse:
        r"""Get all Floating IPs
        Returns all Floating IP objects.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/floating_ips'
        
        query_params = utils.get_query_params(operations.GetFloatingIpsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFloatingIpsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetFloatingIps200ApplicationJSON])
                res.get_floating_ips_200_application_json_object = out

        return res

    def get_floating_ips_id_(self, request: operations.GetFloatingIpsIDRequest) -> operations.GetFloatingIpsIDResponse:
        r"""Get a Floating IP
        Returns a specific Floating IP object.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFloatingIpsIDRequest, base_url, '/floating_ips/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFloatingIpsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetFloatingIpsID200ApplicationJSON])
                res.get_floating_ips_id_200_application_json_object = out

        return res

    def post_floating_ips(self, request: operations.PostFloatingIpsCreateFloatingIPRequest) -> operations.PostFloatingIpsResponse:
        r"""Create a Floating IP
        Creates a new Floating IP assigned to a Server. If you want to create a Floating IP that is not bound to a Server, you need to provide the `home_location` key instead of `server`. This can be either the ID or the name of the Location this IP shall be created in. Note that a Floating IP can be assigned to a Server in any Location later on. For optimal routing it is advised to use the Floating IP in the same Location it was created in.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/floating_ips'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostFloatingIpsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostFloatingIps201ApplicationJSON])
                res.post_floating_ips_201_application_json_object = out

        return res

    def put_floating_ips_id_(self, request: operations.PutFloatingIpsIDRequest) -> operations.PutFloatingIpsIDResponse:
        r"""Update a Floating IP
        Updates the description or labels of a Floating IP.
        Also note that when updating labels, the Floating IPâ€™s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutFloatingIpsIDRequest, base_url, '/floating_ips/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutFloatingIpsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutFloatingIpsID200ApplicationJSON])
                res.put_floating_ips_id_200_application_json_object = out

        return res

    