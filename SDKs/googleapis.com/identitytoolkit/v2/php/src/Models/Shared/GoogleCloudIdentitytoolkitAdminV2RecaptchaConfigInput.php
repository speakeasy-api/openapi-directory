<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigInput - The reCAPTCHA Enterprise integration config.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigInput
{
    /**
     * The reCAPTCHA config for email/password provider, containing the enforcement status. The email/password provider contains all related user flows protected by reCAPTCHA.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum $emailPasswordEnforcementState
     */
	#[\JMS\Serializer\Annotation\SerializedName('emailPasswordEnforcementState')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum $emailPasswordEnforcementState = null;
    
    /**
     * The managed rules for authentication action based on reCAPTCHA scores. The rules are shared across providers for a given tenant project.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule> $managedRules
     */
	#[\JMS\Serializer\Annotation\SerializedName('managedRules')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $managedRules = null;
    
    /**
     * Whether to use the account defender for reCAPTCHA assessment. Defaults to `false`.
     * 
     * @var ?bool $useAccountDefender
     */
	#[\JMS\Serializer\Annotation\SerializedName('useAccountDefender')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $useAccountDefender = null;
    
	public function __construct()
	{
		$this->emailPasswordEnforcementState = null;
		$this->managedRules = null;
		$this->useAccountDefender = null;
	}
}
