"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RoleAssignmentAssigneeTypeEnum(str, Enum):
    r"""Output only. The type of the assignee (`USER` or `GROUP`)."""
    USER = 'user'
    GROUP = 'group'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RoleAssignment:
    r"""Defines an assignment of a role."""
    
    assigned_to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignedTo'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the entity this role is assigned to—either the `user_id` of a user or the `uniqueId` of a service account, as defined in [Identity and Access Management (IAM)](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts)."""  
    assignee_type: Optional[RoleAssignmentAssigneeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assigneeType'), 'exclude': lambda f: f is None }})
    r"""Output only. The type of the assignee (`USER` or `GROUP`)."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""ETag of the resource."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The type of the API resource. This is always `admin#directory#roleAssignment`."""  
    org_unit_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orgUnitId'), 'exclude': lambda f: f is None }})
    r"""If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to."""  
    role_assignment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleAssignmentId'), 'exclude': lambda f: f is None }})
    r"""ID of this roleAssignment."""  
    role_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleId'), 'exclude': lambda f: f is None }})
    r"""The ID of the role that is assigned."""  
    scope_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopeType'), 'exclude': lambda f: f is None }})
    r"""The scope in which this role is assigned."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RoleAssignmentInput:
    r"""Defines an assignment of a role."""
    
    assigned_to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignedTo'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the entity this role is assigned to—either the `user_id` of a user or the `uniqueId` of a service account, as defined in [Identity and Access Management (IAM)](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts)."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""ETag of the resource."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The type of the API resource. This is always `admin#directory#roleAssignment`."""  
    org_unit_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orgUnitId'), 'exclude': lambda f: f is None }})
    r"""If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to."""  
    role_assignment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleAssignmentId'), 'exclude': lambda f: f is None }})
    r"""ID of this roleAssignment."""  
    role_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleId'), 'exclude': lambda f: f is None }})
    r"""The ID of the role that is assigned."""  
    scope_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopeType'), 'exclude': lambda f: f is None }})
    r"""The scope in which this role is assigned."""  
    