/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class CodeScanningAnalysis {
    /**
     * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
     */
    @JsonProperty("analysis_key")
    public String analysisKey;
    public CodeScanningAnalysis withAnalysisKey(String analysisKey) {
        this.analysisKey = analysisKey;
        return this;
    }
    
    /**
     * Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    public String category;
    public CodeScanningAnalysis withCategory(String category) {
        this.category = category;
        return this;
    }
    
    /**
     * The SHA of the commit to which the analysis you are uploading relates.
     */
    @JsonProperty("commit_sha")
    public String commitSha;
    public CodeScanningAnalysis withCommitSha(String commitSha) {
        this.commitSha = commitSha;
        return this;
    }
    
    /**
     * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public CodeScanningAnalysis withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonProperty("deletable")
    public Boolean deletable;
    public CodeScanningAnalysis withDeletable(Boolean deletable) {
        this.deletable = deletable;
        return this;
    }
    
    /**
     * Identifies the variable values associated with the environment in which this analysis was performed.
     */
    @JsonProperty("environment")
    public String environment;
    public CodeScanningAnalysis withEnvironment(String environment) {
        this.environment = environment;
        return this;
    }
    
    @JsonProperty("error")
    public String error;
    public CodeScanningAnalysis withError(String error) {
        this.error = error;
        return this;
    }
    
    /**
     * Unique identifier for this analysis.
     */
    @JsonProperty("id")
    public Long id;
    public CodeScanningAnalysis withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * The full Git reference, formatted as `refs/heads/&lt;branch name&gt;`,
     * `refs/pull/&lt;number&gt;/merge`, or `refs/pull/&lt;number&gt;/head`.
     */
    @JsonProperty("ref")
    public String ref;
    public CodeScanningAnalysis withRef(String ref) {
        this.ref = ref;
        return this;
    }
    
    /**
     * The total number of results in the analysis.
     */
    @JsonProperty("results_count")
    public Long resultsCount;
    public CodeScanningAnalysis withResultsCount(Long resultsCount) {
        this.resultsCount = resultsCount;
        return this;
    }
    
    /**
     * The total number of rules used in the analysis.
     */
    @JsonProperty("rules_count")
    public Long rulesCount;
    public CodeScanningAnalysis withRulesCount(Long rulesCount) {
        this.rulesCount = rulesCount;
        return this;
    }
    
    /**
     * An identifier for the upload.
     */
    @JsonProperty("sarif_id")
    public String sarifId;
    public CodeScanningAnalysis withSarifId(String sarifId) {
        this.sarifId = sarifId;
        return this;
    }
    
    @JsonProperty("tool")
    public CodeScanningAnalysisTool tool;
    public CodeScanningAnalysis withTool(CodeScanningAnalysisTool tool) {
        this.tool = tool;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tool_name")
    public String toolName;
    public CodeScanningAnalysis withToolName(String toolName) {
        this.toolName = toolName;
        return this;
    }
    
    /**
     * The REST API URL of the analysis resource.
     */
    @JsonProperty("url")
    public String url;
    public CodeScanningAnalysis withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Warning generated when processing the analysis
     */
    @JsonProperty("warning")
    public String warning;
    public CodeScanningAnalysis withWarning(String warning) {
        this.warning = warning;
        return this;
    }
    
}
