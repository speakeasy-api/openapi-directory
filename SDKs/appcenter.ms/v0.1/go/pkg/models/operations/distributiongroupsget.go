// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DistributionGroupsGetSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type DistributionGroupsGetPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the distribution group
	DistributionGroupName string `pathParam:"style=simple,explode=false,name=distribution_group_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type DistributionGroupsGetRequest struct {
	PathParams DistributionGroupsGetPathParams
	Security   DistributionGroupsGetSecurity
}

type DistributionGroupsGetDefaultApplicationJSONErrorCodeEnum string

const (
	DistributionGroupsGetDefaultApplicationJSONErrorCodeEnumBadRequest          DistributionGroupsGetDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	DistributionGroupsGetDefaultApplicationJSONErrorCodeEnumConflict            DistributionGroupsGetDefaultApplicationJSONErrorCodeEnum = "Conflict"
	DistributionGroupsGetDefaultApplicationJSONErrorCodeEnumNotAcceptable       DistributionGroupsGetDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	DistributionGroupsGetDefaultApplicationJSONErrorCodeEnumNotFound            DistributionGroupsGetDefaultApplicationJSONErrorCodeEnum = "NotFound"
	DistributionGroupsGetDefaultApplicationJSONErrorCodeEnumInternalServerError DistributionGroupsGetDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	DistributionGroupsGetDefaultApplicationJSONErrorCodeEnumUnauthorized        DistributionGroupsGetDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	DistributionGroupsGetDefaultApplicationJSONErrorCodeEnumTooManyRequests     DistributionGroupsGetDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *DistributionGroupsGetDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DistributionGroupsGetDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsGetDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type DistributionGroupsGetDefaultApplicationJSONError struct {
	Code    DistributionGroupsGetDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                   `json:"message"`
}

// DistributionGroupsGetDefaultApplicationJSON - Error
type DistributionGroupsGetDefaultApplicationJSON struct {
	Error DistributionGroupsGetDefaultApplicationJSONError `json:"error"`
}

// DistributionGroupsGet200ApplicationJSONOriginEnum - The creation origin of this distribution group
type DistributionGroupsGet200ApplicationJSONOriginEnum string

const (
	DistributionGroupsGet200ApplicationJSONOriginEnumAppcenter DistributionGroupsGet200ApplicationJSONOriginEnum = "appcenter"
	DistributionGroupsGet200ApplicationJSONOriginEnumHockeyapp DistributionGroupsGet200ApplicationJSONOriginEnum = "hockeyapp"
)

func (e *DistributionGroupsGet200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		*e = DistributionGroupsGet200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsGet200ApplicationJSONOriginEnum: %s", s)
	}
}

// DistributionGroupsGet200ApplicationJSON - Success
type DistributionGroupsGet200ApplicationJSON struct {
	// The name of the distribution group
	DisplayName *string `json:"display_name,omitempty"`
	// The unique ID of the distribution group
	ID string `json:"id"`
	// Whether the distribution group is public
	IsPublic bool `json:"is_public"`
	// The name of the distribution group used in URLs
	Name string `json:"name"`
	// The creation origin of this distribution group
	Origin DistributionGroupsGet200ApplicationJSONOriginEnum `json:"origin"`
}

type DistributionGroupsGetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	DistributionGroupsGet200ApplicationJSONObject *DistributionGroupsGet200ApplicationJSON
	// Error
	DistributionGroupsGetDefaultApplicationJSONObject *DistributionGroupsGetDefaultApplicationJSON
}
