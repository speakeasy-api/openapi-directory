// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DescribeMergeConflictsQueryParams struct {
	// Pagination limit
	MaxMergeHunks *string `queryParam:"style=form,explode=true,name=maxMergeHunks"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

// DescribeMergeConflictsXAmzTargetEnum
type DescribeMergeConflictsXAmzTargetEnum string

const (
	DescribeMergeConflictsXAmzTargetEnumCodeCommit20150413DescribeMergeConflicts DescribeMergeConflictsXAmzTargetEnum = "CodeCommit_20150413.DescribeMergeConflicts"
)

func (e *DescribeMergeConflictsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.DescribeMergeConflicts":
		*e = DescribeMergeConflictsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeMergeConflictsXAmzTargetEnum: %s", s)
	}
}

type DescribeMergeConflictsHeaders struct {
	XAmzAlgorithm     *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeMergeConflictsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeMergeConflictsRequest struct {
	QueryParams DescribeMergeConflictsQueryParams
	Headers     DescribeMergeConflictsHeaders
	Request     shared.DescribeMergeConflictsInput `request:"mediaType=application/json"`
}

type DescribeMergeConflictsResponse struct {
	// CommitDoesNotExistException
	CommitDoesNotExistException interface{}
	// CommitRequiredException
	CommitRequiredException interface{}
	ContentType             string
	// Success
	DescribeMergeConflictsOutput *shared.DescribeMergeConflictsOutput
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// FileDoesNotExistException
	FileDoesNotExistException interface{}
	// InvalidCommitException
	InvalidCommitException interface{}
	// InvalidConflictDetailLevelException
	InvalidConflictDetailLevelException interface{}
	// InvalidConflictResolutionStrategyException
	InvalidConflictResolutionStrategyException interface{}
	// InvalidContinuationTokenException
	InvalidContinuationTokenException interface{}
	// InvalidMaxMergeHunksException
	InvalidMaxMergeHunksException interface{}
	// InvalidMergeOptionException
	InvalidMergeOptionException interface{}
	// InvalidPathException
	InvalidPathException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// MaximumFileContentToLoadExceededException
	MaximumFileContentToLoadExceededException interface{}
	// MaximumItemsToCompareExceededException
	MaximumItemsToCompareExceededException interface{}
	// MergeOptionRequiredException
	MergeOptionRequiredException interface{}
	// PathRequiredException
	PathRequiredException interface{}
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
	// TipsDivergenceExceededException
	TipsDivergenceExceededException interface{}
}
