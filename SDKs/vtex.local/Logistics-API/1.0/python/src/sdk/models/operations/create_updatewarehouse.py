"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdateWarehouseCreateUpdateWarehouseRequestWarehouseDock:
    
    cost: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cost') }})  
    cost_to_display: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costToDisplay') }})  
    dock_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockId') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time') }})  
    translate_days: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('translateDays') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdateWarehouseCreateUpdateWarehouseRequest:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    warehouse_docks: list[CreateUpdateWarehouseCreateUpdateWarehouseRequestWarehouseDock] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warehouseDocks') }})  
    

@dataclasses.dataclass
class CreateUpdateWarehouseRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand"""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent"""  
    request_body: CreateUpdateWarehouseCreateUpdateWarehouseRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class CreateUpdateWarehouseResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    