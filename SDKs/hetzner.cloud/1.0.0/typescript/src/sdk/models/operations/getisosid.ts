/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetIsosIdRequest extends SpeakeasyBase {
  /**
   * ID of the ISO
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;
}

/**
 * Type of the ISO
 */
export enum GetIsosId200ApplicationJSONIsoTypeEnum {
  Public = "public",
  Private = "private",
}

export class GetIsosId200ApplicationJSONIso extends SpeakeasyBase {
  /**
   * ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deprecated" })
  deprecated: string;

  /**
   * Description of the ISO
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Unique identifier of the ISO. Only set for public ISOs
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Type of the ISO
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: GetIsosId200ApplicationJSONIsoTypeEnum;
}

/**
 * The `iso` key in the reply contains an array of ISO objects with this structure
 */
export class GetIsosId200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "iso" })
  @Type(() => GetIsosId200ApplicationJSONIso)
  iso: GetIsosId200ApplicationJSONIso;
}

export class GetIsosIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The `iso` key in the reply contains an array of ISO objects with this structure
   */
  @SpeakeasyMetadata()
  getIsosId200ApplicationJSONObject?: GetIsosId200ApplicationJSON;
}
