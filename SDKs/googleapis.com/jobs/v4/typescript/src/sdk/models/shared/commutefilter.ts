/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { LatLng } from "./latlng";
import { TimeOfDay } from "./timeofday";
import { Expose, Type } from "class-transformer";

/**
 * Required. The method of transportation to calculate the commute time for.
 */
export enum CommuteFilterCommuteMethodEnum {
  CommuteMethodUnspecified = "COMMUTE_METHOD_UNSPECIFIED",
  Driving = "DRIVING",
  Transit = "TRANSIT",
  Walking = "WALKING",
  Cycling = "CYCLING",
  TransitAccessible = "TRANSIT_ACCESSIBLE",
}

/**
 * Specifies the traffic density to use when calculating commute time.
 */
export enum CommuteFilterRoadTrafficEnum {
  RoadTrafficUnspecified = "ROAD_TRAFFIC_UNSPECIFIED",
  TrafficFree = "TRAFFIC_FREE",
  BusyHour = "BUSY_HOUR",
}

/**
 * Parameters needed for commute search.
 */
export class CommuteFilter extends SpeakeasyBase {
  /**
   * If `true`, jobs without street level addresses may also be returned. For city level addresses, the city center is used. For state and coarser level addresses, text matching is used. If this field is set to `false` or isn't specified, only jobs that include street level addresses will be returned by commute search.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowImpreciseAddresses" })
  allowImpreciseAddresses?: boolean;

  /**
   * Required. The method of transportation to calculate the commute time for.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commuteMethod" })
  commuteMethod?: CommuteFilterCommuteMethodEnum;

  /**
   * Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "departureTime" })
  @Type(() => TimeOfDay)
  departureTime?: TimeOfDay;

  /**
   * Specifies the traffic density to use when calculating commute time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roadTraffic" })
  roadTraffic?: CommuteFilterRoadTrafficEnum;

  /**
   * An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startCoordinates" })
  @Type(() => LatLng)
  startCoordinates?: LatLng;

  /**
   * Required. The maximum travel time in seconds. The maximum allowed value is `3600s` (one hour). Format is `123s`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "travelDuration" })
  travelDuration?: string;
}
