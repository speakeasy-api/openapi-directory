/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

/**
 * Yes if you want to display licensed content
 */
export enum GetDiscoveryV2EventsIncludeLicensedContentEnum {
  Yes = "yes",
  No = " no",
}

/**
 * yes, to include spell check suggestions in the response.
 */
export enum GetDiscoveryV2EventsIncludeSpellcheckEnum {
  Yes = "yes",
  No = " no",
}

/**
 * True, to include events with date to be announce (TBA)
 */
export enum GetDiscoveryV2EventsIncludeTbaEnum {
  Yes = "yes",
  No = " no",
  Only = " only",
}

/**
 * True, to include event with a date to be defined (TBD)
 */
export enum GetDiscoveryV2EventsIncludeTbdEnum {
  Yes = "yes",
  No = " no",
  Only = " only",
}

/**
 * True if you want to have entities flag as test in the response. Only, if you only wanted test entities
 */
export enum GetDiscoveryV2EventsIncludeTestEnum {
  Yes = "yes",
  No = " no",
  Only = " only",
}

/**
 * Filter entities by its source name
 */
export enum GetDiscoveryV2EventsSourceEnum {
  Ticketmaster = "ticketmaster",
  Universe = " universe",
  Frontgate = " frontgate",
  Tmr = " tmr",
}

/**
 * Unit of the radius
 */
export enum GetDiscoveryV2EventsUnitEnum {
  Miles = "miles",
  Km = "km",
}

export class GetDiscoveryV2EventsRequest extends SpeakeasyBase {
  /**
   * Filter events by attraction id
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=attractionId",
  })
  attractionId?: string;

  /**
   * Filter events by city
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=city" })
  city?: string;

  /**
   * Filter events by classification id: id of any segment, genre, sub-genre, type, sub-type
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=classificationId",
  })
  classificationId?: any[];

  /**
   * Filter events by classification name: name of any segment, genre, sub-genre, type, sub-type
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=classificationName",
  })
  classificationName?: any[];

  /**
   * Filter events by clientName
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=clientVisibility",
  })
  clientVisibility?: string;

  /**
   * Filter events by country code
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=countryCode",
  })
  countryCode?: string;

  /**
   * Filter events by dma id
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=dmaId" })
  dmaId?: string;

  /**
   * Filter events with a start date before this date
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=endDateTime",
  })
  endDateTime?: string;

  /**
   * filter events by geoHash
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=geoPoint",
  })
  geoPoint?: string;

  /**
   * Filter entities by its id
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=id" })
  id?: string;

  /**
   * Yes if you want to display licensed content
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includeLicensedContent",
  })
  includeLicensedContent?: GetDiscoveryV2EventsIncludeLicensedContentEnum;

  /**
   * yes, to include spell check suggestions in the response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includeSpellcheck",
  })
  includeSpellcheck?: GetDiscoveryV2EventsIncludeSpellcheckEnum;

  /**
   * True, to include events with date to be announce (TBA)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includeTBA",
  })
  includeTBA?: GetDiscoveryV2EventsIncludeTbaEnum;

  /**
   * True, to include event with a date to be defined (TBD)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includeTBD",
  })
  includeTBD?: GetDiscoveryV2EventsIncludeTbdEnum;

  /**
   * True if you want to have entities flag as test in the response. Only, if you only wanted test entities
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includeTest",
  })
  includeTest?: GetDiscoveryV2EventsIncludeTestEnum;

  /**
   * Keyword to search on
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=keyword",
  })
  keyword?: string;

  /**
   * Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=latlong",
  })
  latlong?: string;

  /**
   * The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*')
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=locale",
  })
  locale?: string;

  /**
   * Filter events by market id
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=marketId",
  })
  marketId?: string;

  /**
   * Filter events with onsale end date before this date
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=onsaleEndDateTime",
  })
  onsaleEndDateTime?: string;

  /**
   * Filter events with onsale range within this date
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=onsaleOnAfterStartDate",
  })
  onsaleOnAfterStartDate?: string;

  /**
   * Filter events with onsale start date on this date
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=onsaleOnStartDate",
  })
  onsaleOnStartDate?: string;

  /**
   * Filter events with onsale start date after this date
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=onsaleStartDateTime",
  })
  onsaleStartDateTime?: string;

  /**
   * Page number
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: string;

  /**
   * Filter events by postal code / zipcode
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=postalCode",
  })
  postalCode?: string;

  /**
   * Filter events by promoter id
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=promoterId",
  })
  promoterId?: string;

  /**
   * Radius of the area in which we want to search for events.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=radius",
  })
  radius?: string;

  /**
   * Filter events by segment id
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=segmentId",
  })
  segmentId?: string;

  /**
   * Filter events by segment name
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=segmentName",
  })
  segmentName?: string;

  /**
   * Page size of the response
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=size" })
  size?: string;

  /**
   * Sorting order of the search result. Allowable values : 'name,asc', 'name,desc', 'date,asc', 'date,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'name,date,asc', 'name,date,desc', 'date,name,asc', 'date,name,desc','onsaleStartDate,asc', 'id,asc'
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * Filter entities by its source name
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=source",
  })
  source?: GetDiscoveryV2EventsSourceEnum;

  /**
   * Filter events with a start date after this date
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=startDateTime",
  })
  startDateTime?: string;

  /**
   * Filter events by state code
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=stateCode",
  })
  stateCode?: string;

  /**
   * Unit of the radius
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=unit" })
  unit?: GetDiscoveryV2EventsUnitEnum;

  /**
   * Filter events by venue id
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=venueId",
  })
  venueId?: string;
}

export class GetDiscoveryV2EventsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
