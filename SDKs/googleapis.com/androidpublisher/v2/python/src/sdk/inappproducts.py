"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Inappproducts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def androidpublisher_inappproducts_delete(self, request: operations.AndroidpublisherInappproductsDeleteRequest, security: operations.AndroidpublisherInappproductsDeleteSecurity) -> operations.AndroidpublisherInappproductsDeleteResponse:
        r"""Delete an in-app product for an app."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherInappproductsDeleteRequest, base_url, '/{packageName}/inappproducts/{sku}', request)
        
        query_params = utils.get_query_params(operations.AndroidpublisherInappproductsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherInappproductsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def androidpublisher_inappproducts_get(self, request: operations.AndroidpublisherInappproductsGetRequest, security: operations.AndroidpublisherInappproductsGetSecurity) -> operations.AndroidpublisherInappproductsGetResponse:
        r"""Returns information about the in-app product specified."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherInappproductsGetRequest, base_url, '/{packageName}/inappproducts/{sku}', request)
        
        query_params = utils.get_query_params(operations.AndroidpublisherInappproductsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherInappproductsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def androidpublisher_inappproducts_insert(self, request: operations.AndroidpublisherInappproductsInsertRequest, security: operations.AndroidpublisherInappproductsInsertSecurity) -> operations.AndroidpublisherInappproductsInsertResponse:
        r"""Creates a new in-app product for an app."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherInappproductsInsertRequest, base_url, '/{packageName}/inappproducts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "in_app_product", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AndroidpublisherInappproductsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherInappproductsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def androidpublisher_inappproducts_list(self, request: operations.AndroidpublisherInappproductsListRequest, security: operations.AndroidpublisherInappproductsListSecurity) -> operations.AndroidpublisherInappproductsListResponse:
        r"""List all the in-app products for an Android app, both subscriptions and managed in-app products.."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherInappproductsListRequest, base_url, '/{packageName}/inappproducts', request)
        
        query_params = utils.get_query_params(operations.AndroidpublisherInappproductsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherInappproductsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def androidpublisher_inappproducts_patch(self, request: operations.AndroidpublisherInappproductsPatchRequest, security: operations.AndroidpublisherInappproductsPatchSecurity) -> operations.AndroidpublisherInappproductsPatchResponse:
        r"""Updates the details of an in-app product. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherInappproductsPatchRequest, base_url, '/{packageName}/inappproducts/{sku}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "in_app_product", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AndroidpublisherInappproductsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherInappproductsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def androidpublisher_inappproducts_update(self, request: operations.AndroidpublisherInappproductsUpdateRequest, security: operations.AndroidpublisherInappproductsUpdateSecurity) -> operations.AndroidpublisherInappproductsUpdateResponse:
        r"""Updates the details of an in-app product."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherInappproductsUpdateRequest, base_url, '/{packageName}/inappproducts/{sku}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "in_app_product", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AndroidpublisherInappproductsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherInappproductsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    