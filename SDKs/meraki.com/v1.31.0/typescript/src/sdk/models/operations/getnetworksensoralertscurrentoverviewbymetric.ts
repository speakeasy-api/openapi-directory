/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetNetworkSensorAlertsCurrentOverviewByMetricRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

/**
 * Object containing the number of sensors that are currently alerting due to noise readings
 */
export class GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONCountsNoise extends SpeakeasyBase {
  /**
   * Number of sensors that are currently alerting due to ambient noise readings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ambient" })
  ambient?: number;
}

/**
 * Counts of currently alerting sensors, aggregated by alerting metric
 */
export class GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONCounts extends SpeakeasyBase {
  /**
   * Number of sensors that are currently alerting due to an open door
   */
  @SpeakeasyMetadata()
  @Expose({ name: "door" })
  door?: number;

  /**
   * Number of sensors that are currently alerting due to humidity readings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "humidity" })
  humidity?: number;

  /**
   * Number of sensors that are currently alerting due to indoor air quality readings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "indoorAirQuality" })
  indoorAirQuality?: number;

  /**
   * Object containing the number of sensors that are currently alerting due to noise readings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "noise" })
  @Type(
    () =>
      GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONCountsNoise
  )
  noise?: GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONCountsNoise;

  /**
   * Number of sensors that are currently alerting due to PM2.5 readings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pm25" })
  pm25?: number;

  /**
   * Number of sensors that are currently alerting due to temperature readings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "temperature" })
  temperature?: number;

  /**
   * Number of sensors that are currently alerting due to TVOC readings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tvoc" })
  tvoc?: number;

  /**
   * Number of sensors that are currently alerting due to the presence of water
   */
  @SpeakeasyMetadata()
  @Expose({ name: "water" })
  water?: number;
}

export enum GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum {
  Door = "door",
  Humidity = "humidity",
  IndoorAirQuality = "indoorAirQuality",
  Noise = "noise",
  Pm25 = "pm25",
  Temperature = "temperature",
  Tvoc = "tvoc",
  Water = "water",
}

/**
 * Successful operation
 */
export class GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSON extends SpeakeasyBase {
  /**
   * Counts of currently alerting sensors, aggregated by alerting metric
   */
  @SpeakeasyMetadata()
  @Expose({ name: "counts" })
  @Type(
    () => GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONCounts
  )
  counts?: GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONCounts;

  /**
   * List of metrics that are supported for alerts, based on available sensor devices in the network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supportedMetrics" })
  supportedMetrics?: GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum[];
}

export class GetNetworkSensorAlertsCurrentOverviewByMetricResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  getNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONObject?: GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSON;
}
