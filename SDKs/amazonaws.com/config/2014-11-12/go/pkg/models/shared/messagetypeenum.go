// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MessageTypeEnum string

const (
	MessageTypeEnumConfigurationItemChangeNotification          MessageTypeEnum = "ConfigurationItemChangeNotification"
	MessageTypeEnumConfigurationSnapshotDeliveryCompleted       MessageTypeEnum = "ConfigurationSnapshotDeliveryCompleted"
	MessageTypeEnumScheduledNotification                        MessageTypeEnum = "ScheduledNotification"
	MessageTypeEnumOversizedConfigurationItemChangeNotification MessageTypeEnum = "OversizedConfigurationItemChangeNotification"
)

func (e MessageTypeEnum) ToPointer() *MessageTypeEnum {
	return &e
}

func (e *MessageTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ConfigurationItemChangeNotification":
		fallthrough
	case "ConfigurationSnapshotDeliveryCompleted":
		fallthrough
	case "ScheduledNotification":
		fallthrough
	case "OversizedConfigurationItemChangeNotification":
		*e = MessageTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageTypeEnum: %v", v)
	}
}
