"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import listingfinance as shared_listingfinance
from ..shared import listinglease as shared_listinglease
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HistoricalListing:
    r"""Represents a car history entry"""
    
    carfax_1_owner: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carfax_1_owner'), 'exclude': lambda f: f is None }})
    r"""Flag to indicate whether listing is carfax_1_owner"""  
    carfax_clean_title: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carfax_clean_title'), 'exclude': lambda f: f is None }})
    r"""Flag to indicate whether listing is carfax_clean_title"""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City of the listing"""  
    data_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data_source'), 'exclude': lambda f: f is None }})
    r"""Data source of the listing"""  
    dealer_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dealer_id'), 'exclude': lambda f: f is None }})
    r"""Unique MC assigned dealers id for the listing"""  
    dom: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dom'), 'exclude': lambda f: f is None }})
    r"""Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car"""  
    dom_180: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dom_180'), 'exclude': lambda f: f is None }})
    r"""Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car"""  
    dom_active: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dom_active'), 'exclude': lambda f: f is None }})
    r"""Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car"""  
    exterior_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exterior_color'), 'exclude': lambda f: f is None }})
    r"""Exterior color of the car"""  
    financing_options: Optional[list[shared_listingfinance.ListingFinance]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('financing_options'), 'exclude': lambda f: f is None }})
    r"""Array of all finance offers for this listing"""  
    first_seen_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_seen_at'), 'exclude': lambda f: f is None }})
    r"""Listing first seen at first scraped timestamp"""  
    first_seen_at_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_seen_at_date'), 'exclude': lambda f: f is None }})
    r"""Listing first seen at first scraped date"""  
    heading: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('heading'), 'exclude': lambda f: f is None }})
    r"""Listing title as displayed on the source website"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier representing a specific listing from the Marketcheck database"""  
    interior_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interior_color'), 'exclude': lambda f: f is None }})
    r"""Interior color of the car"""  
    inventory_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventory_type'), 'exclude': lambda f: f is None }})
    r"""Inventory type of car"""  
    is_certified: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_certified'), 'exclude': lambda f: f is None }})
    r"""Certified car"""  
    is_searchable: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_searchable'), 'exclude': lambda f: f is None }})
    r"""Flag to indicate listing is marked searchable or not"""  
    last_seen_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_seen_at'), 'exclude': lambda f: f is None }})
    r"""Listing last seen at (most recent) timestamp"""  
    last_seen_at_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_seen_at_date'), 'exclude': lambda f: f is None }})
    r"""Listing last seen at (most recent) date"""  
    latitude: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude'), 'exclude': lambda f: f is None }})
    r"""Latitude of the listing"""  
    leasing_options: Optional[list[shared_listinglease.ListingLease]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leasing_options'), 'exclude': lambda f: f is None }})
    r"""Array of all finance offers for this listing"""  
    longitude: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude'), 'exclude': lambda f: f is None }})
    r"""Longitude of the listing"""  
    miles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('miles'), 'exclude': lambda f: f is None }})
    r"""Odometer reading / reported miles usage for the car"""  
    msrp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('msrp'), 'exclude': lambda f: f is None }})
    r"""MSRP for the car"""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Asking price for the car"""  
    ref_miles: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref_miles'), 'exclude': lambda f: f is None }})
    r"""Last Odometer reading / reported miles usage for the car. If the asking miles value is not or is available then the last_miles could perhaps be used. last_miles is the miles for the car listed on the source website as of last_miles_dt date"""  
    ref_miles_dt: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref_miles_dt'), 'exclude': lambda f: f is None }})
    r"""The date at which the last miles was reported online. This is earlier to last_seen_date"""  
    ref_price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref_price'), 'exclude': lambda f: f is None }})
    r"""Last reported price for the car. If the asking price value is not or is available then the last_price could perhaps be used. last_price is the price for the car listed on the source website as of last_price_dt date"""  
    ref_price_dt: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref_price_dt'), 'exclude': lambda f: f is None }})
    r"""The date at which the last price was reported online. This is earlier to last_seen_date"""  
    scraped_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scraped_at'), 'exclude': lambda f: f is None }})
    r"""Listing last seen at date timestamp"""  
    scraped_at_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scraped_at_date'), 'exclude': lambda f: f is None }})
    r"""Listing last seen at date"""  
    seller_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller_name'), 'exclude': lambda f: f is None }})
    r"""Seller name of the listing from the Marketcheck database"""  
    seller_name_o: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller_name_o'), 'exclude': lambda f: f is None }})
    r"""Seller name of the listing from the Marketcheck database"""  
    seller_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller_type'), 'exclude': lambda f: f is None }})
    r"""Seller type for the car"""  
    source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Source domain of the listing"""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the listing"""  
    status_date: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status_date'), 'exclude': lambda f: f is None }})
    r"""Timestamp of status date"""  
    stock_no: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stock_no'), 'exclude': lambda f: f is None }})
    r"""Stock number of car in dealers inventory"""  
    street: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street'), 'exclude': lambda f: f is None }})
    r"""Street of the listing"""  
    trim_r: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trim_r'), 'exclude': lambda f: f is None }})
    r"""Trim of the car"""  
    vdp_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vdp_url'), 'exclude': lambda f: f is None }})
    r"""Vehicle Details Page url of the specific car"""  
    vin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vin'), 'exclude': lambda f: f is None }})
    r"""VIN for the car"""  
    zip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip'), 'exclude': lambda f: f is None }})
    r"""Zip of the listing"""  
    