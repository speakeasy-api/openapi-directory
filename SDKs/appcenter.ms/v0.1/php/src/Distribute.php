<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Distribute 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Fetch all apple test flight groups
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppleMappingTestFlightGroupsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppleMappingTestFlightGroupsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppleMappingTestFlightGroupsResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function appleMappingTestFlightGroups(
        \OpenAPI\OpenAPI\Models\Operations\AppleMappingTestFlightGroupsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppleMappingTestFlightGroupsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppleMappingTestFlightGroupsResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/apple_test_flight_groups', \OpenAPI\OpenAPI\Models\Operations\AppleMappingTestFlightGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppleMappingTestFlightGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appleMappingTestFlightGroups200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\AppleMappingTestFlightGroups200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appleMappingTestFlightGroupsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppleMappingTestFlightGroupsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a mapping for an existing app in apple store for the specified application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppleMappingCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppleMappingCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppleMappingCreateResponse
     */
	public function appleMappingCreate(
        \OpenAPI\OpenAPI\Models\Operations\AppleMappingCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppleMappingCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppleMappingCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/apple_mapping', \OpenAPI\OpenAPI\Models\Operations\AppleMappingCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppleMappingCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appleMappingCreate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppleMappingCreate201ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appleMappingCreateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppleMappingCreateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete mapping of apple app to an existing app in apple store.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppleMappingDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppleMappingDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppleMappingDeleteResponse
     */
	public function appleMappingDelete(
        \OpenAPI\OpenAPI\Models\Operations\AppleMappingDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppleMappingDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppleMappingDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/apple_mapping', \OpenAPI\OpenAPI\Models\Operations\AppleMappingDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "string");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppleMappingDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appleMappingDeleteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppleMappingDeleteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get mapping of apple app to an existing app in apple store.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppleMappingGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppleMappingGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppleMappingGetResponse
     */
	public function appleMappingGet(
        \OpenAPI\OpenAPI\Models\Operations\AppleMappingGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppleMappingGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppleMappingGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/apple_mapping', \OpenAPI\OpenAPI\Models\Operations\AppleMappingGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppleMappingGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appleMappingGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppleMappingGet200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appleMappingGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppleMappingGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the device details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DevicesDeviceDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DevicesDeviceDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DevicesDeviceDetailsResponse
     */
	public function devicesDeviceDetails(
        \OpenAPI\OpenAPI\Models\Operations\DevicesDeviceDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DevicesDeviceDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DevicesDeviceDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/user/devices/{device_udid}', \OpenAPI\OpenAPI\Models\Operations\DevicesDeviceDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DevicesDeviceDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesDeviceDetails200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DevicesDeviceDetails200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesDeviceDetails400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DevicesDeviceDetails400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesDeviceDetails403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DevicesDeviceDetails403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesDeviceDetails404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DevicesDeviceDetails404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the resign status to the caller
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DevicesGetReleaseUpdateDevicesStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DevicesGetReleaseUpdateDevicesStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DevicesGetReleaseUpdateDevicesStatusResponse
     */
	public function devicesGetReleaseUpdateDevicesStatus(
        \OpenAPI\OpenAPI\Models\Operations\DevicesGetReleaseUpdateDevicesStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DevicesGetReleaseUpdateDevicesStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DevicesGetReleaseUpdateDevicesStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/update_devices/{resign_id}', \OpenAPI\OpenAPI\Models\Operations\DevicesGetReleaseUpdateDevicesStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DevicesGetReleaseUpdateDevicesStatusRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DevicesGetReleaseUpdateDevicesStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesGetReleaseUpdateDevicesStatus200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DevicesGetReleaseUpdateDevicesStatus200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesGetReleaseUpdateDevicesStatus400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DevicesGetReleaseUpdateDevicesStatus400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesGetReleaseUpdateDevicesStatus404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DevicesGetReleaseUpdateDevicesStatus404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all devices associated with the given distribution group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DevicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DevicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DevicesListResponse
     */
	public function devicesList(
        \OpenAPI\OpenAPI\Models\Operations\DevicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DevicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DevicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices', \OpenAPI\OpenAPI\Models\Operations\DevicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DevicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DevicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\DevicesList200ApplicationJSON>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesList400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DevicesList400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesList404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DevicesList404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all devices associated with the given distribution group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DevicesListCsvFormatRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DevicesListCsvFormatSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DevicesListCsvFormatResponse
     */
	public function devicesListCsvFormat(
        \OpenAPI\OpenAPI\Models\Operations\DevicesListCsvFormatRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DevicesListCsvFormatSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DevicesListCsvFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices/download_devices_list', \OpenAPI\OpenAPI\Models\Operations\DevicesListCsvFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DevicesListCsvFormatRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DevicesListCsvFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Registers a user for an existing device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DevicesRegisterUserForDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DevicesRegisterUserForDeviceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DevicesRegisterUserForDeviceResponse
     */
	public function devicesRegisterUserForDevice(
        \OpenAPI\OpenAPI\Models\Operations\DevicesRegisterUserForDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DevicesRegisterUserForDeviceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DevicesRegisterUserForDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/users/{user_id}/devices/register', \OpenAPI\OpenAPI\Models\Operations\DevicesRegisterUserForDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DevicesRegisterUserForDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesRegisterUserForDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DevicesRegisterUserForDevice200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesRegisterUserForDevice404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DevicesRegisterUserForDevice404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes an existing device from a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DevicesRemoveUserDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DevicesRemoveUserDeviceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DevicesRemoveUserDeviceResponse
     */
	public function devicesRemoveUserDevice(
        \OpenAPI\OpenAPI\Models\Operations\DevicesRemoveUserDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DevicesRemoveUserDeviceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DevicesRemoveUserDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/user/devices/{device_udid}', \OpenAPI\OpenAPI\Models\Operations\DevicesRemoveUserDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DevicesRemoveUserDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesRemoveUserDevice403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DevicesRemoveUserDevice403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesRemoveUserDevice404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DevicesRemoveUserDevice404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all devices associated with the given user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DevicesUserDevicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DevicesUserDevicesListResponse
     */
	public function devicesUserDevicesList(
        \OpenAPI\OpenAPI\Models\Operations\DevicesUserDevicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DevicesUserDevicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/user/devices');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DevicesUserDevicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesUserDevicesList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\DevicesUserDevicesList200ApplicationJSON>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesUserDevicesList400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DevicesUserDevicesList400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->devicesUserDevicesList403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DevicesUserDevicesList403ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Notify download(s) for the provided distribution release(s).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DistibutionReleasesInstallAnalyticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DistibutionReleasesInstallAnalyticsResponse
     */
	public function distibutionReleasesInstallAnalytics(
        \OpenAPI\OpenAPI\Models\Operations\DistibutionReleasesInstallAnalyticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DistibutionReleasesInstallAnalyticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/public/apps/{owner_name}/{app_name}/install_analytics', \OpenAPI\OpenAPI\Models\Operations\DistibutionReleasesInstallAnalyticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DistibutionReleasesInstallAnalyticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Return information about the provisioning profile. Only available for iOS.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProvisioningProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProvisioningProfileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProvisioningProfileResponse
     */
	public function provisioningProfile(
        \OpenAPI\OpenAPI\Models\Operations\ProvisioningProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProvisioningProfileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProvisioningProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/provisioning_profile', \OpenAPI\OpenAPI\Models\Operations\ProvisioningProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProvisioningProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->provisioningProfileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProvisioningProfileResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->provisioningProfile400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProvisioningProfile400ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Distributes a release to a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesAddDistributionGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesAddDistributionGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesAddDistributionGroupResponse
     */
	public function releasesAddDistributionGroup(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesAddDistributionGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesAddDistributionGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesAddDistributionGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups', \OpenAPI\OpenAPI\Models\Operations\ReleasesAddDistributionGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesAddDistributionGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesAddDistributionGroup201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesAddDistributionGroup201ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesAddDistributionGroup400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesAddDistributionGroup400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesAddDistributionGroup404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesAddDistributionGroup404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Distributes a release to a store
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesAddStoreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesAddStoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesAddStoreResponse
     */
	public function releasesAddStore(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesAddStoreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesAddStoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesAddStoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores', \OpenAPI\OpenAPI\Models\Operations\ReleasesAddStoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesAddStoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesAddStore201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesAddStore201ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesAddStore400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesAddStore400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesAddStore404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesAddStore404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Distributes a release to a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesAddTestersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesAddTestersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesAddTestersResponse
     */
	public function releasesAddTesters(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesAddTestersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesAddTestersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesAddTestersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers', \OpenAPI\OpenAPI\Models\Operations\ReleasesAddTestersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesAddTestersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesAddTesters201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesAddTesters201ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesAddTesters400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesAddTesters400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesAddTesters404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesAddTesters404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return detailed information about releases avaiable to a tester.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesAvailableToTesterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesAvailableToTesterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesAvailableToTesterResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function releasesAvailableToTester(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesAvailableToTesterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesAvailableToTesterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesAvailableToTesterResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/releases/filter_by_tester', \OpenAPI\OpenAPI\Models\Operations\ReleasesAvailableToTesterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReleasesAvailableToTesterRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesAvailableToTesterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesAvailableToTester200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\ReleasesAvailableToTester200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiate a new release upload. This API is part of multi-step upload process.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesCreateReleaseUploadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesCreateReleaseUploadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesCreateReleaseUploadResponse
     */
	public function releasesCreateReleaseUpload(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesCreateReleaseUploadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesCreateReleaseUploadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesCreateReleaseUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/uploads/releases', \OpenAPI\OpenAPI\Models\Operations\ReleasesCreateReleaseUploadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesCreateReleaseUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesCreateReleaseUpload201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesCreateReleaseUpload201ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesCreateReleaseUpload400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesCreateReleaseUpload400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesCreateReleaseUpload404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesCreateReleaseUpload404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a release.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteResponse
     */
	public function releasesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}', \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesDelete404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesDelete404ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesDelete500ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesDelete500ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the given distribution group from the release
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionGroupResponse
     */
	public function releasesDeleteDistributionGroup(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}', \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesDeleteDistributionGroup404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionGroup404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the given distribution store from the release
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionStoreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionStoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionStoreResponse
     */
	public function releasesDeleteDistributionStore(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionStoreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionStoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionStoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores/{store_id}', \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionStoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionStoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesDeleteDistributionStore404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionStore404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the given tester from the release
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionTesterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionTesterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionTesterResponse
     */
	public function releasesDeleteDistributionTester(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionTesterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionTesterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionTesterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}', \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionTesterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionTesterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesDeleteDistributionTester404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteDistributionTester404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the given tester from the all releases
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteTesterFromDestinationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteTesterFromDestinationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteTesterFromDestinationsResponse
     */
	public function releasesDeleteTesterFromDestinations(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteTesterFromDestinationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteTesterFromDestinationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteTesterFromDestinationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/testers/{tester_id}', \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteTesterFromDestinationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteTesterFromDestinationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesDeleteTesterFromDestinations404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteTesterFromDestinations404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a release with id 'release_id' in a given distribution group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteWithDistributionGroupIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteWithDistributionGroupIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteWithDistributionGroupIdResponse
     */
	public function releasesDeleteWithDistributionGroupId(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteWithDistributionGroupIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteWithDistributionGroupIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteWithDistributionGroupIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}', \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteWithDistributionGroupIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesDeleteWithDistributionGroupIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Returns the manifest.plist in XML format for installing the release on a device. Only available for iOS.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesGetIosManifestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesGetIosManifestResponse
     */
	public function releasesGetIosManifest(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesGetIosManifestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesGetIosManifestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/public/apps/{app_id}/releases/{release_id}/ios_manifest', \OpenAPI\OpenAPI\Models\Operations\ReleasesGetIosManifestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReleasesGetIosManifestRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesGetIosManifestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetIosManifest400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetIosManifest400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetIosManifest403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetIosManifest403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetIosManifest404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetIosManifest404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return detailed information about a distributed release in a given distribution group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByDistributionGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByDistributionGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByDistributionGroupResponse
     */
	public function releasesGetLatestByDistributionGroup(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByDistributionGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByDistributionGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByDistributionGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}', \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByDistributionGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByDistributionGroupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByDistributionGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetLatestByDistributionGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByDistributionGroup200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetLatestByDistributionGroup404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByDistributionGroup404ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 501) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetLatestByDistributionGroup501ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByDistributionGroup501ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * If 'latest' is not specified then it will return the specified release if it's enabled. If 'latest' is specified, regardless of whether a release hash is provided, the latest enabled release is returned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByHashRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByHashSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByHashResponse
     */
	public function releasesGetLatestByHash(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByHashRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByHashSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByHashResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/sdk/apps/{app_secret}/releases/{release_hash}', \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByHashRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByHashRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByHashResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetLatestByHash200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByHash200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetLatestByHash404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByHash404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a release with 'latest' for the given public group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByPublicDistributionGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByPublicDistributionGroupResponse
     */
	public function releasesGetLatestByPublicDistributionGroup(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByPublicDistributionGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByPublicDistributionGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/public/sdk/apps/{app_secret}/distribution_groups/{distribution_group_id}/releases/latest', \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByPublicDistributionGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByPublicDistributionGroupRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByPublicDistributionGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetLatestByPublicDistributionGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByPublicDistributionGroup200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetLatestByPublicDistributionGroup403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByPublicDistributionGroup403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetLatestByPublicDistributionGroup404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByPublicDistributionGroup404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a release with id `release_id`. If `release_id` is `latest`, return the latest release that was distributed to the current user (from all the distribution groups).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByUserResponse
     */
	public function releasesGetLatestByUser(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}', \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByUserRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetLatestByUser200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByUser200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetLatestByUser400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByUser400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetLatestByUser404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestByUser404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the latest release distributed to a private group the given user is a member of for the given app.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPrivateReleaseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPrivateReleaseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPrivateReleaseResponse
     */
	public function releasesGetLatestPrivateRelease(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPrivateReleaseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPrivateReleaseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPrivateReleaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/sdk/apps/{app_secret}/releases/private/latest', \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPrivateReleaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPrivateReleaseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPrivateReleaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetLatestPrivateRelease200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPrivateRelease200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetLatestPrivateRelease404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPrivateRelease404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the latest public release for the given app.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPublicReleaseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPublicReleaseResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function releasesGetLatestPublicRelease(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPublicReleaseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPublicReleaseResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/public/sdk/apps/{app_secret}/releases/latest', \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPublicReleaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPublicReleaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetLatestPublicRelease200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPublicRelease200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetLatestPublicRelease404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetLatestPublicRelease404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all public distribution groups that a given release has been distributed to
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesGetPublicGroupsForReleaseByHashRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesGetPublicGroupsForReleaseByHashResponse
     */
	public function releasesGetPublicGroupsForReleaseByHash(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesGetPublicGroupsForReleaseByHashRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesGetPublicGroupsForReleaseByHashResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/public/sdk/apps/{app_secret}/releases/{release_hash}/public_distribution_groups', \OpenAPI\OpenAPI\Models\Operations\ReleasesGetPublicGroupsForReleaseByHashRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesGetPublicGroupsForReleaseByHashResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetPublicGroupsForReleaseByHash200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\ReleasesGetPublicGroupsForReleaseByHash200ApplicationJSON>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetPublicGroupsForReleaseByHash404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the current status of the release upload.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesGetReleaseUploadStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesGetReleaseUploadStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesGetReleaseUploadStatusResponse
     */
	public function releasesGetReleaseUploadStatus(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesGetReleaseUploadStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesGetReleaseUploadStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesGetReleaseUploadStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}', \OpenAPI\OpenAPI\Models\Operations\ReleasesGetReleaseUploadStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesGetReleaseUploadStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetReleaseUploadStatus200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetReleaseUploadStatus200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetReleaseUploadStatus400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetReleaseUploadStatus400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetReleaseUploadStatus404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetReleaseUploadStatus404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the sparkle feed of the releases that are distributed to all the public distribution groups.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesGetSparkleFeedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesGetSparkleFeedResponse
     */
	public function releasesGetSparkleFeed(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesGetSparkleFeedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesGetSparkleFeedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/public/sparkle/apps/{app_secret}', \OpenAPI\OpenAPI\Models\Operations\ReleasesGetSparkleFeedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesGetSparkleFeedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesGetSparkleFeedDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesGetSparkleFeedDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return basic information about releases.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesListResponse
     */
	public function releasesList(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/releases', \OpenAPI\OpenAPI\Models\Operations\ReleasesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReleasesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\ReleasesList200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return basic information about distributed releases in a given distribution group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesListByDistributionGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesListByDistributionGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesListByDistributionGroupResponse
     */
	public function releasesListByDistributionGroup(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesListByDistributionGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesListByDistributionGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesListByDistributionGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases', \OpenAPI\OpenAPI\Models\Operations\ReleasesListByDistributionGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesListByDistributionGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesListByDistributionGroup200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\ReleasesListByDistributionGroup200ApplicationJSON>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesListByDistributionGroup404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesListByDistributionGroup404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the latest release from every distribution group associated with an application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesListLatestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesListLatestSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesListLatestResponse
     */
	public function releasesListLatest(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesListLatestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesListLatestSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesListLatestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/recent_releases', \OpenAPI\OpenAPI\Models\Operations\ReleasesListLatestRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesListLatestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesListLatest200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\ReleasesListLatest200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update details about the specified distribution group associated with the release
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionGroupResponse
     */
	public function releasesPutDistributionGroup(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}', \OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesPutDistributionGroup404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionGroup404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update details about the specified tester associated with the release
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionTesterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionTesterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionTesterResponse
     */
	public function releasesPutDistributionTester(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionTesterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionTesterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionTesterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}', \OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionTesterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionTesterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesPutDistributionTester404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesPutDistributionTester404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a release.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateResponse
     */
	public function releasesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}', \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesUpdate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesUpdate200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesUpdate400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesUpdate400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesUpdate404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesUpdate404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update details of a release.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateDetailsResponse
     */
	public function releasesUpdateDetails(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}', \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesUpdateDetails200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateDetails200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesUpdateDetails400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateDetails400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesUpdateDetails404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateDetails404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the current status of the release upload.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateReleaseUploadStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateReleaseUploadStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateReleaseUploadStatusResponse
     */
	public function releasesUpdateReleaseUploadStatus(
        \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateReleaseUploadStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateReleaseUploadStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateReleaseUploadStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}', \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateReleaseUploadStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateReleaseUploadStatusRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateReleaseUploadStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesUpdateReleaseUploadStatus200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateReleaseUploadStatus200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesUpdateReleaseUploadStatus400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateReleaseUploadStatus400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releasesUpdateReleaseUploadStatus404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReleasesUpdateReleaseUploadStatus404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Application specific store service status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoreNotificationsGetNotificationByAppIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StoreNotificationsGetNotificationByAppIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StoreNotificationsGetNotificationByAppIdResponse
     */
	public function storeNotificationsGetNotificationByAppId(
        \OpenAPI\OpenAPI\Models\Operations\StoreNotificationsGetNotificationByAppIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StoreNotificationsGetNotificationByAppIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StoreNotificationsGetNotificationByAppIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/store_service_status', \OpenAPI\OpenAPI\Models\Operations\StoreNotificationsGetNotificationByAppIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoreNotificationsGetNotificationByAppIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storeNotificationsGetNotificationByAppId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoreNotificationsGetNotificationByAppId200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storeNotificationsGetNotificationByAppIdDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoreNotificationsGetNotificationByAppIdDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns publish logs for a particular release published to a particular store
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoreReleasePublishLogsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StoreReleasePublishLogsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StoreReleasePublishLogsGetResponse
     */
	public function storeReleasePublishLogsGet(
        \OpenAPI\OpenAPI\Models\Operations\StoreReleasePublishLogsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StoreReleasePublishLogsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StoreReleasePublishLogsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_logs', \OpenAPI\OpenAPI\Models\Operations\StoreReleasePublishLogsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoreReleasePublishLogsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storeReleasePublishLogsGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoreReleasePublishLogsGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * delete the release with release Id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoreReleasesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StoreReleasesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StoreReleasesDeleteResponse
     */
	public function storeReleasesDelete(
        \OpenAPI\OpenAPI\Models\Operations\StoreReleasesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StoreReleasesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StoreReleasesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}', \OpenAPI\OpenAPI\Models\Operations\StoreReleasesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "string");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoreReleasesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storeReleasesDeleteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoreReleasesDeleteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return releases published in a store for releaseId and storeId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetResponse
     */
	public function storeReleasesGet(
        \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}', \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storeReleasesGet200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\StoreReleasesGet200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storeReleasesGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the latest release published in a store.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetLatestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetLatestSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetLatestResponse
     */
	public function storeReleasesGetLatest(
        \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetLatestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetLatestSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetLatestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/latest_release', \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetLatestRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetLatestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storeReleasesGetLatest200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetLatest200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storeReleasesGetLatestDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetLatestDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the Error Details of release which failed in publishing.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetPublishErrorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetPublishErrorSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetPublishErrorResponse
     */
	public function storeReleasesGetPublishError(
        \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetPublishErrorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetPublishErrorSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetPublishErrorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_error_details', \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetPublishErrorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetPublishErrorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storeReleasesGetPublishError200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetPublishError200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storeReleasesGetPublishErrorDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetPublishErrorDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the Real time Status publishing of release from store.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetRealTimeStatusByReleaseIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetRealTimeStatusByReleaseIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetRealTimeStatusByReleaseIdResponse
     */
	public function storeReleasesGetRealTimeStatusByReleaseId(
        \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetRealTimeStatusByReleaseIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetRealTimeStatusByReleaseIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetRealTimeStatusByReleaseIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/realtimestatus', \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetRealTimeStatusByReleaseIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetRealTimeStatusByReleaseIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storeReleasesGetRealTimeStatusByReleaseId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetRealTimeStatusByReleaseId200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storeReleasesGetRealTimeStatusByReleaseIdDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoreReleasesGetRealTimeStatusByReleaseIdDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return all releases published  in a store
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoreReleasesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StoreReleasesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StoreReleasesListResponse
     */
	public function storeReleasesList(
        \OpenAPI\OpenAPI\Models\Operations\StoreReleasesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StoreReleasesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StoreReleasesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases', \OpenAPI\OpenAPI\Models\Operations\StoreReleasesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoreReleasesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storeReleasesList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\StoreReleasesList200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storeReleasesListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoreReleasesListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new external store for the specified application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoresCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StoresCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StoresCreateResponse
     */
	public function storesCreate(
        \OpenAPI\OpenAPI\Models\Operations\StoresCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StoresCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StoresCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_stores', \OpenAPI\OpenAPI\Models\Operations\StoresCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoresCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storesCreate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoresCreate201ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storesCreateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoresCreateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * delete the store based on specific store name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoresDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StoresDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StoresDeleteResponse
     */
	public function storesDelete(
        \OpenAPI\OpenAPI\Models\Operations\StoresDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StoresDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StoresDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}', \OpenAPI\OpenAPI\Models\Operations\StoresDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "string");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoresDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storesDeleteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoresDeleteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the store details for specified store name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoresGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StoresGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StoresGetResponse
     */
	public function storesGet(
        \OpenAPI\OpenAPI\Models\Operations\StoresGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StoresGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StoresGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}', \OpenAPI\OpenAPI\Models\Operations\StoresGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoresGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storesGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoresGet200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storesGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoresGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the store details from Storage store table for a particular application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoresListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StoresListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StoresListResponse
     */
	public function storesList(
        \OpenAPI\OpenAPI\Models\Operations\StoresListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StoresListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StoresListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_stores', \OpenAPI\OpenAPI\Models\Operations\StoresListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoresListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storesList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\StoresList200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the store.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoresPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StoresPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StoresPatchResponse
     */
	public function storesPatch(
        \OpenAPI\OpenAPI\Models\Operations\StoresPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StoresPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StoresPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}', \OpenAPI\OpenAPI\Models\Operations\StoresPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoresPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->storesPatchDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\StoresPatchDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
}