// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostAssetsCovarianceMatrixValidationRequestBody struct {
	// The number of assets
	Assets int64 `json:"assets"`
	// assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j
	AssetsCovarianceMatrix [][]float64 `json:"assetsCovarianceMatrix"`
}

// PostAssetsCovarianceMatrixValidation200ApplicationJSONMessageEnum - Indicates whether the matrix is a valid covariance matrix
type PostAssetsCovarianceMatrixValidation200ApplicationJSONMessageEnum string

const (
	PostAssetsCovarianceMatrixValidation200ApplicationJSONMessageEnumValidCovarianceMatrix                                PostAssetsCovarianceMatrixValidation200ApplicationJSONMessageEnum = "valid covariance matrix"
	PostAssetsCovarianceMatrixValidation200ApplicationJSONMessageEnumInvalidCovarianceMatrixNonSymmetricMatrix            PostAssetsCovarianceMatrixValidation200ApplicationJSONMessageEnum = "invalid covariance matrix - non symmetric matrix"
	PostAssetsCovarianceMatrixValidation200ApplicationJSONMessageEnumInvalidCovarianceMatrixNonPositiveDiagonalElements   PostAssetsCovarianceMatrixValidation200ApplicationJSONMessageEnum = "invalid covariance matrix - non positive diagonal elements"
	PostAssetsCovarianceMatrixValidation200ApplicationJSONMessageEnumInvalidCovarianceMatrixNonPositiveSemiDefiniteMatrix PostAssetsCovarianceMatrixValidation200ApplicationJSONMessageEnum = "invalid covariance matrix - non positive semi-definite matrix"
)

func (e PostAssetsCovarianceMatrixValidation200ApplicationJSONMessageEnum) ToPointer() *PostAssetsCovarianceMatrixValidation200ApplicationJSONMessageEnum {
	return &e
}

func (e *PostAssetsCovarianceMatrixValidation200ApplicationJSONMessageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "valid covariance matrix":
		fallthrough
	case "invalid covariance matrix - non symmetric matrix":
		fallthrough
	case "invalid covariance matrix - non positive diagonal elements":
		fallthrough
	case "invalid covariance matrix - non positive semi-definite matrix":
		*e = PostAssetsCovarianceMatrixValidation200ApplicationJSONMessageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAssetsCovarianceMatrixValidation200ApplicationJSONMessageEnum: %v", v)
	}
}

// PostAssetsCovarianceMatrixValidation200ApplicationJSON - OK
type PostAssetsCovarianceMatrixValidation200ApplicationJSON struct {
	// Indicates whether the matrix is a valid covariance matrix
	Message PostAssetsCovarianceMatrixValidation200ApplicationJSONMessageEnum `json:"message"`
}

type PostAssetsCovarianceMatrixValidationResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	PostAssetsCovarianceMatrixValidation200ApplicationJSONObject *PostAssetsCovarianceMatrixValidation200ApplicationJSON
}
