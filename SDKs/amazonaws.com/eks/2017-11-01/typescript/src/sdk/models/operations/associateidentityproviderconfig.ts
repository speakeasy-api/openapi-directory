/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * An object representing an OpenID Connect (OIDC) configuration. Before associating an OIDC identity provider to your cluster, review the considerations in <a href="https://docs.aws.amazon.com/eks/latest/userguide/authenticate-oidc-identity-provider.html">Authenticating users for your cluster from an OpenID Connect identity provider</a> in the <i>Amazon EKS User Guide</i>.
 */
export class AssociateIdentityProviderConfigRequestBodyOidc extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "clientId" })
  clientId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "groupsClaim" })
  groupsClaim?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "groupsPrefix" })
  groupsPrefix?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "identityProviderConfigName" })
  identityProviderConfigName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "issuerUrl" })
  issuerUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "requiredClaims" })
  requiredClaims?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "usernameClaim" })
  usernameClaim?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "usernamePrefix" })
  usernamePrefix?: string;
}

export class AssociateIdentityProviderConfigRequestBody extends SpeakeasyBase {
  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientRequestToken" })
  clientRequestToken?: string;

  /**
   * An object representing an OpenID Connect (OIDC) configuration. Before associating an OIDC identity provider to your cluster, review the considerations in <a href="https://docs.aws.amazon.com/eks/latest/userguide/authenticate-oidc-identity-provider.html">Authenticating users for your cluster from an OpenID Connect identity provider</a> in the <i>Amazon EKS User Guide</i>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "oidc" })
  @Type(() => AssociateIdentityProviderConfigRequestBodyOidc)
  oidc: AssociateIdentityProviderConfigRequestBodyOidc;

  /**
   * The metadata to apply to the configuration to assist with categorization and organization. Each tag consists of a key and an optional value. You define both.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class AssociateIdentityProviderConfigRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: AssociateIdentityProviderConfigRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The name of the cluster to associate the configuration to.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=name",
  })
  name: string;
}

export class AssociateIdentityProviderConfigResponse extends SpeakeasyBase {
  /**
   * Success
   */
  @SpeakeasyMetadata()
  associateIdentityProviderConfigResponse?: shared.AssociateIdentityProviderConfigResponse;

  /**
   * ClientException
   */
  @SpeakeasyMetadata()
  clientException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceInUseException
   */
  @SpeakeasyMetadata()
  resourceInUseException?: any;

  /**
   * ServerException
   */
  @SpeakeasyMetadata()
  serverException?: any;
}
