/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new ApiConfig in a given project and location.
   */
  apigatewayProjectsLocationsApisConfigsCreate(
    req: operations.ApigatewayProjectsLocationsApisConfigsCreateRequest,
    security: operations.ApigatewayProjectsLocationsApisConfigsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApigatewayProjectsLocationsApisConfigsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApigatewayProjectsLocationsApisConfigsCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{parent}/configs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apigatewayApiConfigInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ApigatewayProjectsLocationsApisConfigsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApigatewayProjectsLocationsApisConfigsCreateResponse =
        new operations.ApigatewayProjectsLocationsApisConfigsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apigatewayOperation = utils.objectToClass(
              httpRes?.data,
              shared.ApigatewayOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists ApiConfigs in a given project and location.
   */
  apigatewayProjectsLocationsApisConfigsList(
    req: operations.ApigatewayProjectsLocationsApisConfigsListRequest,
    security: operations.ApigatewayProjectsLocationsApisConfigsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApigatewayProjectsLocationsApisConfigsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApigatewayProjectsLocationsApisConfigsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{parent}/configs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ApigatewayProjectsLocationsApisConfigsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApigatewayProjectsLocationsApisConfigsListResponse =
        new operations.ApigatewayProjectsLocationsApisConfigsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apigatewayListApiConfigsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApigatewayListApiConfigsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Api in a given project and location.
   */
  apigatewayProjectsLocationsApisCreate(
    req: operations.ApigatewayProjectsLocationsApisCreateRequest,
    security: operations.ApigatewayProjectsLocationsApisCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApigatewayProjectsLocationsApisCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApigatewayProjectsLocationsApisCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{parent}/apis",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apigatewayApiInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApigatewayProjectsLocationsApisCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApigatewayProjectsLocationsApisCreateResponse =
        new operations.ApigatewayProjectsLocationsApisCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apigatewayOperation = utils.objectToClass(
              httpRes?.data,
              shared.ApigatewayOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Apis in a given project and location.
   */
  apigatewayProjectsLocationsApisList(
    req: operations.ApigatewayProjectsLocationsApisListRequest,
    security: operations.ApigatewayProjectsLocationsApisListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApigatewayProjectsLocationsApisListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApigatewayProjectsLocationsApisListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{parent}/apis",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApigatewayProjectsLocationsApisListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApigatewayProjectsLocationsApisListResponse =
        new operations.ApigatewayProjectsLocationsApisListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apigatewayListApisResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApigatewayListApisResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Gateway in a given project and location.
   */
  apigatewayProjectsLocationsGatewaysCreate(
    req: operations.ApigatewayProjectsLocationsGatewaysCreateRequest,
    security: operations.ApigatewayProjectsLocationsGatewaysCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApigatewayProjectsLocationsGatewaysCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApigatewayProjectsLocationsGatewaysCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{parent}/gateways",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apigatewayGatewayInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ApigatewayProjectsLocationsGatewaysCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApigatewayProjectsLocationsGatewaysCreateResponse =
        new operations.ApigatewayProjectsLocationsGatewaysCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apigatewayOperation = utils.objectToClass(
              httpRes?.data,
              shared.ApigatewayOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
   */
  apigatewayProjectsLocationsGatewaysGetIamPolicy(
    req: operations.ApigatewayProjectsLocationsGatewaysGetIamPolicyRequest,
    security: operations.ApigatewayProjectsLocationsGatewaysGetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApigatewayProjectsLocationsGatewaysGetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ApigatewayProjectsLocationsGatewaysGetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{resource}:getIamPolicy",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ApigatewayProjectsLocationsGatewaysGetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApigatewayProjectsLocationsGatewaysGetIamPolicyResponse =
        new operations.ApigatewayProjectsLocationsGatewaysGetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apigatewayPolicy = utils.objectToClass(
              httpRes?.data,
              shared.ApigatewayPolicy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Gateways in a given project and location.
   */
  apigatewayProjectsLocationsGatewaysList(
    req: operations.ApigatewayProjectsLocationsGatewaysListRequest,
    security: operations.ApigatewayProjectsLocationsGatewaysListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApigatewayProjectsLocationsGatewaysListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApigatewayProjectsLocationsGatewaysListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{parent}/gateways",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApigatewayProjectsLocationsGatewaysListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApigatewayProjectsLocationsGatewaysListResponse =
        new operations.ApigatewayProjectsLocationsGatewaysListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apigatewayListGatewaysResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApigatewayListGatewaysResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the parameters of a single Gateway.
   */
  apigatewayProjectsLocationsGatewaysPatch(
    req: operations.ApigatewayProjectsLocationsGatewaysPatchRequest,
    security: operations.ApigatewayProjectsLocationsGatewaysPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApigatewayProjectsLocationsGatewaysPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApigatewayProjectsLocationsGatewaysPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apigatewayGatewayInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ApigatewayProjectsLocationsGatewaysPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApigatewayProjectsLocationsGatewaysPatchResponse =
        new operations.ApigatewayProjectsLocationsGatewaysPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apigatewayOperation = utils.objectToClass(
              httpRes?.data,
              shared.ApigatewayOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
   */
  apigatewayProjectsLocationsGatewaysSetIamPolicy(
    req: operations.ApigatewayProjectsLocationsGatewaysSetIamPolicyRequest,
    security: operations.ApigatewayProjectsLocationsGatewaysSetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApigatewayProjectsLocationsGatewaysSetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ApigatewayProjectsLocationsGatewaysSetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{resource}:setIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apigatewaySetIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ApigatewayProjectsLocationsGatewaysSetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApigatewayProjectsLocationsGatewaysSetIamPolicyResponse =
        new operations.ApigatewayProjectsLocationsGatewaysSetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apigatewayPolicy = utils.objectToClass(
              httpRes?.data,
              shared.ApigatewayPolicy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
   */
  apigatewayProjectsLocationsGatewaysTestIamPermissions(
    req: operations.ApigatewayProjectsLocationsGatewaysTestIamPermissionsRequest,
    security: operations.ApigatewayProjectsLocationsGatewaysTestIamPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApigatewayProjectsLocationsGatewaysTestIamPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ApigatewayProjectsLocationsGatewaysTestIamPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{resource}:testIamPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apigatewayTestIamPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ApigatewayProjectsLocationsGatewaysTestIamPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApigatewayProjectsLocationsGatewaysTestIamPermissionsResponse =
        new operations.ApigatewayProjectsLocationsGatewaysTestIamPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apigatewayTestIamPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApigatewayTestIamPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists information about the supported locations for this service.
   */
  apigatewayProjectsLocationsList(
    req: operations.ApigatewayProjectsLocationsListRequest,
    security: operations.ApigatewayProjectsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApigatewayProjectsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApigatewayProjectsLocationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{name}/locations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApigatewayProjectsLocationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApigatewayProjectsLocationsListResponse =
        new operations.ApigatewayProjectsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apigatewayListLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApigatewayListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
   */
  apigatewayProjectsLocationsOperationsCancel(
    req: operations.ApigatewayProjectsLocationsOperationsCancelRequest,
    security: operations.ApigatewayProjectsLocationsOperationsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApigatewayProjectsLocationsOperationsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApigatewayProjectsLocationsOperationsCancelRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{name}:cancel",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ApigatewayProjectsLocationsOperationsCancelSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApigatewayProjectsLocationsOperationsCancelResponse =
        new operations.ApigatewayProjectsLocationsOperationsCancelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
   */
  apigatewayProjectsLocationsOperationsDelete(
    req: operations.ApigatewayProjectsLocationsOperationsDeleteRequest,
    security: operations.ApigatewayProjectsLocationsOperationsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApigatewayProjectsLocationsOperationsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApigatewayProjectsLocationsOperationsDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ApigatewayProjectsLocationsOperationsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApigatewayProjectsLocationsOperationsDeleteResponse =
        new operations.ApigatewayProjectsLocationsOperationsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
   */
  apigatewayProjectsLocationsOperationsGet(
    req: operations.ApigatewayProjectsLocationsOperationsGetRequest,
    security: operations.ApigatewayProjectsLocationsOperationsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApigatewayProjectsLocationsOperationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApigatewayProjectsLocationsOperationsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ApigatewayProjectsLocationsOperationsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApigatewayProjectsLocationsOperationsGetResponse =
        new operations.ApigatewayProjectsLocationsOperationsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apigatewayOperation = utils.objectToClass(
              httpRes?.data,
              shared.ApigatewayOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
   */
  apigatewayProjectsLocationsOperationsList(
    req: operations.ApigatewayProjectsLocationsOperationsListRequest,
    security: operations.ApigatewayProjectsLocationsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApigatewayProjectsLocationsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApigatewayProjectsLocationsOperationsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{name}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ApigatewayProjectsLocationsOperationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApigatewayProjectsLocationsOperationsListResponse =
        new operations.ApigatewayProjectsLocationsOperationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apigatewayListOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApigatewayListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
