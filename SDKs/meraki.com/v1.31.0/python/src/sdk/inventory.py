"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Inventory:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def claim_into_organization_inventory(self, request: operations.ClaimIntoOrganizationInventoryRequest) -> operations.ClaimIntoOrganizationInventoryResponse:
        r"""Claim a list of devices, licenses, and/or orders into an organization inventory
        Claim a list of devices, licenses, and/or orders into an organization inventory. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization's inventory. Use /organizations/{organizationId}/inventory/release to release devices from an organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClaimIntoOrganizationInventoryRequest, base_url, '/organizations/{organizationId}/inventory/claim', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClaimIntoOrganizationInventoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.claim_into_organization_inventory_200_application_json_object = out

        return res

    def create_organization_inventory_onboarding_cloud_monitoring_export_event(self, request: operations.CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest) -> operations.CreateOrganizationInventoryOnboardingCloudMonitoringExportEventResponse:
        r"""Imports event logs related to the onboarding app into elastisearch
        Imports event logs related to the onboarding app into elastisearch
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest, base_url, '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/exportEvents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateOrganizationInventoryOnboardingCloudMonitoringExportEventResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_organization_inventory_onboarding_cloud_monitoring_export_event_202_application_json_object = out

        return res

    def create_organization_inventory_onboarding_cloud_monitoring_import(self, request: operations.CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest) -> operations.CreateOrganizationInventoryOnboardingCloudMonitoringImportResponse:
        r"""Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
        Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest, base_url, '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateOrganizationInventoryOnboardingCloudMonitoringImportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CreateOrganizationInventoryOnboardingCloudMonitoringImport201ApplicationJSON]])
                res.create_organization_inventory_onboarding_cloud_monitoring_import_201_application_json_objects = out

        return res

    def get_organization_inventory_device(self, request: operations.GetOrganizationInventoryDeviceRequest) -> operations.GetOrganizationInventoryDeviceResponse:
        r"""Return a single device from the inventory of an organization
        Return a single device from the inventory of an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationInventoryDeviceRequest, base_url, '/organizations/{organizationId}/inventory/devices/{serial}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationInventoryDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOrganizationInventoryDevice200ApplicationJSON])
                res.get_organization_inventory_device_200_application_json_object = out

        return res

    def get_organization_inventory_devices(self, request: operations.GetOrganizationInventoryDevicesRequest) -> operations.GetOrganizationInventoryDevicesResponse:
        r"""Return the device inventory for an organization
        Return the device inventory for an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationInventoryDevicesRequest, base_url, '/organizations/{organizationId}/inventory/devices', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationInventoryDevicesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationInventoryDevicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationInventoryDevices200ApplicationJSON]])
                res.get_organization_inventory_devices_200_application_json_objects = out

        return res

    def get_organization_inventory_onboarding_cloud_monitoring_imports(self, request: operations.GetOrganizationInventoryOnboardingCloudMonitoringImportsRequest) -> operations.GetOrganizationInventoryOnboardingCloudMonitoringImportsResponse:
        r"""Check the status of a committed Import operation
        Check the status of a committed Import operation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationInventoryOnboardingCloudMonitoringImportsRequest, base_url, '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationInventoryOnboardingCloudMonitoringImportsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationInventoryOnboardingCloudMonitoringImportsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationInventoryOnboardingCloudMonitoringImports200ApplicationJSON]])
                res.get_organization_inventory_onboarding_cloud_monitoring_imports_200_application_json_objects = out

        return res

    def get_organization_inventory_onboarding_cloud_monitoring_networks(self, request: operations.GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest) -> operations.GetOrganizationInventoryOnboardingCloudMonitoringNetworksResponse:
        r"""Returns list of networks eligible for adding cloud monitored device
        Returns list of networks eligible for adding cloud monitored device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest, base_url, '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/networks', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationInventoryOnboardingCloudMonitoringNetworksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationInventoryOnboardingCloudMonitoringNetworks202ApplicationJSON]])
                res.get_organization_inventory_onboarding_cloud_monitoring_networks_202_application_json_objects = out

        return res

    def release_from_organization_inventory(self, request: operations.ReleaseFromOrganizationInventoryRequest) -> operations.ReleaseFromOrganizationInventoryResponse:
        r"""Release a list of claimed devices from an organization.
        Release a list of claimed devices from an organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReleaseFromOrganizationInventoryRequest, base_url, '/organizations/{organizationId}/inventory/release', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReleaseFromOrganizationInventoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.release_from_organization_inventory_200_application_json_object = out

        return res

    