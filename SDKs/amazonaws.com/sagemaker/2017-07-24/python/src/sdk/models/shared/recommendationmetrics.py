"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecommendationMetrics:
    r"""The metrics of recommendations."""
    
    cost_per_hour: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CostPerHour') }})  
    cost_per_inference: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CostPerInference') }})  
    max_invocations: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxInvocations') }})  
    model_latency: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelLatency') }})  
    cpu_utilization: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CpuUtilization'), 'exclude': lambda f: f is None }})  
    memory_utilization: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MemoryUtilization'), 'exclude': lambda f: f is None }})  
    