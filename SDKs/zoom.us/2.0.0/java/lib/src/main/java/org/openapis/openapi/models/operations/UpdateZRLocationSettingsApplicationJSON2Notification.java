/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UpdateZRLocationSettingsApplicationJSON2Notification - [Notifications Settings](https://support.zoom.us/hc/en-us/articles/205394099-Zoom-Room-Alerts#h_b430b5f2-5150-4522-9c96-c77f22ab70bc) includes the circumstances in which the room sends an email alert to the support team to notify them of a potentially urgent issue. These issues can affect the operation of the room, but do not display on the TV screen. The email alert is sent to the email address specified in the Notification Email Recipients section. 
 */
public class UpdateZRLocationSettingsApplicationJSON2Notification {
    /**
     * Send an alert when the audio echo test result meets usability threshold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio_meet_usability_threshold")
    public Boolean audioMeetUsabilityThreshold;
    public UpdateZRLocationSettingsApplicationJSON2Notification withAudioMeetUsabilityThreshold(Boolean audioMeetUsabilityThreshold) {
        this.audioMeetUsabilityThreshold = audioMeetUsabilityThreshold;
        return this;
    }
    
    /**
     * Send an alert when the audio echo test result does not meet usability threshold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio_not_meet_usability_threshold")
    public Boolean audioNotMeetUsabilityThreshold;
    public UpdateZRLocationSettingsApplicationJSON2Notification withAudioNotMeetUsabilityThreshold(Boolean audioNotMeetUsabilityThreshold) {
        this.audioNotMeetUsabilityThreshold = audioNotMeetUsabilityThreshold;
        return this;
    }
    
    /**
     * Send an alert when the battery starts charging.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("battery_is_charging")
    public Boolean batteryIsCharging;
    public UpdateZRLocationSettingsApplicationJSON2Notification withBatteryIsCharging(Boolean batteryIsCharging) {
        this.batteryIsCharging = batteryIsCharging;
        return this;
    }
    
    /**
     * Send an alert when the battery of the controller or the scheduling display is low (at 20%) and is not being charged.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("battery_low_and_not_charging")
    public Boolean batteryLowAndNotCharging;
    public UpdateZRLocationSettingsApplicationJSON2Notification withBatteryLowAndNotCharging(Boolean batteryLowAndNotCharging) {
        this.batteryLowAndNotCharging = batteryLowAndNotCharging;
        return this;
    }
    
    /**
     * Specify a percentage so that an alert is sent when the battery is less than the {battery_percentage} that you specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("battery_percentage")
    public String batteryPercentage;
    public UpdateZRLocationSettingsApplicationJSON2Notification withBatteryPercentage(String batteryPercentage) {
        this.batteryPercentage = batteryPercentage;
        return this;
    }
    
    /**
     * Send an alert when the connection to the Controller or Scheduling Display cannot be detected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("controller_scheduling_disconnected")
    public Boolean controllerSchedulingDisconnected;
    public UpdateZRLocationSettingsApplicationJSON2Notification withControllerSchedulingDisconnected(Boolean controllerSchedulingDisconnected) {
        this.controllerSchedulingDisconnected = controllerSchedulingDisconnected;
        return this;
    }
    
    /**
     * Send an alert when the Controller or Scheduling Display can be detected again.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("controller_scheduling_reconnected")
    public Boolean controllerSchedulingReconnected;
    public UpdateZRLocationSettingsApplicationJSON2Notification withControllerSchedulingReconnected(Boolean controllerSchedulingReconnected) {
        this.controllerSchedulingReconnected = controllerSchedulingReconnected;
        return this;
    }
    
    /**
     * Send an alert when CPU usage is above 90%.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpu_usage_high_detected")
    public Boolean cpuUsageHighDetected;
    public UpdateZRLocationSettingsApplicationJSON2Notification withCpuUsageHighDetected(Boolean cpuUsageHighDetected) {
        this.cpuUsageHighDetected = cpuUsageHighDetected;
        return this;
    }
    
    /**
     * Send an alert when the mic, speaker or camera is disconnected in the Zoom Room.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mic_speaker_camera_disconnected")
    public Boolean micSpeakerCameraDisconnected;
    public UpdateZRLocationSettingsApplicationJSON2Notification withMicSpeakerCameraDisconnected(Boolean micSpeakerCameraDisconnected) {
        this.micSpeakerCameraDisconnected = micSpeakerCameraDisconnected;
        return this;
    }
    
    /**
     * Send an alert when the mic, speaker or camera is reconnected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mic_speaker_camera_reconnected")
    public Boolean micSpeakerCameraReconnected;
    public UpdateZRLocationSettingsApplicationJSON2Notification withMicSpeakerCameraReconnected(Boolean micSpeakerCameraReconnected) {
        this.micSpeakerCameraReconnected = micSpeakerCameraReconnected;
        return this;
    }
    
    /**
     * Send an alert when low bandwidth network is detected
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network_unstable_detected")
    public Boolean networkUnstableDetected;
    public UpdateZRLocationSettingsApplicationJSON2Notification withNetworkUnstableDetected(Boolean networkUnstableDetected) {
        this.networkUnstableDetected = networkUnstableDetected;
        return this;
    }
    
    /**
     * Send an alert when SIP registration stops working. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sip_registration_failed")
    public Boolean sipRegistrationFailed;
    public UpdateZRLocationSettingsApplicationJSON2Notification withSipRegistrationFailed(Boolean sipRegistrationFailed) {
        this.sipRegistrationFailed = sipRegistrationFailed;
        return this;
    }
    
    /**
     * Send an alert after the SIP registration is re-enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sip_registration_re_enabled")
    public Boolean sipRegistrationReEnabled;
    public UpdateZRLocationSettingsApplicationJSON2Notification withSipRegistrationReEnabled(Boolean sipRegistrationReEnabled) {
        this.sipRegistrationReEnabled = sipRegistrationReEnabled;
        return this;
    }
    
    /**
     * Send an alert when the Zoom Room is online after previously being offline.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zoom_room_come_back_online")
    public Boolean zoomRoomComeBackOnline;
    public UpdateZRLocationSettingsApplicationJSON2Notification withZoomRoomComeBackOnline(Boolean zoomRoomComeBackOnline) {
        this.zoomRoomComeBackOnline = zoomRoomComeBackOnline;
        return this;
    }
    
    /**
     * Send an alert when the TV display is disconnected
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zoom_room_display_disconnected")
    public Boolean zoomRoomDisplayDisconnected;
    public UpdateZRLocationSettingsApplicationJSON2Notification withZoomRoomDisplayDisconnected(Boolean zoomRoomDisplayDisconnected) {
        this.zoomRoomDisplayDisconnected = zoomRoomDisplayDisconnected;
        return this;
    }
    
    /**
     * Send an alert when the machine hosting the Zoom Room application has a network issue or cannot connect with the Controller.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zoom_room_offline")
    public Boolean zoomRoomOffline;
    public UpdateZRLocationSettingsApplicationJSON2Notification withZoomRoomOffline(Boolean zoomRoomOffline) {
        this.zoomRoomOffline = zoomRoomOffline;
        return this;
    }
    
}
