/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Fraud Management
 */
export class FraudManagement {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Request a network unblock
   *
   * @remarks
   * Request to unblock a network that has been blocked due to potential fraud detection
   * <div class="Vlt-callout Vlt-callout--critical">
   *   <div class="Vlt-callout__content">
   *     <h4>Network Unblock is switched off by default.</h4>
   *     Please contact Sales to enable the Network Unblock API for your account.
   *   </div>
   * </div>
   */
  networkUnblock(
    req: shared.NetworkUnblock,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworkUnblockResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.NetworkUnblock(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/network-unblock";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworkUnblockResponse =
        new operations.NetworkUnblockResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.networkUnblockResponseOk = utils.objectToClass(
              httpRes?.data,
              shared.NetworkUnblockResponseOk
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.networkUnblockResponseForbidden = utils.objectToClass(
              httpRes?.data,
              shared.NetworkUnblockResponseForbidden
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.networkUnblockResponseNotFound = utils.objectToClass(
              httpRes?.data,
              shared.NetworkUnblockResponseNotFound
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.networkUnblock422ApplicationJSONOneOf = httpRes?.data;
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorThrottled = utils.objectToClass(
              httpRes?.data,
              shared.ErrorThrottled
            );
          }
          break;
      }

      return res;
    });
  }
}
