/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Protocol buffer representing a handle to a tensorflow resource. Handles are
 *
 * @remarks
 * not valid across executions, but can be serialized back and forth from within
 * a single run.
 */
export class TensorflowResourceHandleProto extends SpeakeasyBase {
  /**
   * Container in which this resource is placed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "container" })
  container?: string;

  /**
   * Unique name for the device containing the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "device" })
  device?: string;

  /**
   * Hash code for the type of the resource. Is only valid in the same device
   *
   * @remarks
   * and in the same execution.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hash_code" })
  hashCode?: string;

  /**
   * For debug-only, the name of the type pointed to by this handle, if
   *
   * @remarks
   * available.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maybe_type_name" })
  maybeTypeName?: string;

  /**
   * Unique name of this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}
