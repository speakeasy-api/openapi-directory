"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Queues:
    r"""Queue management, send, get and ack."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def ack_message(self, request: operations.AckMessageRequest) -> operations.AckMessageResponse:
        r"""Acknowledge that Queue Message has been processed."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AckMessageRequest, base_url, '/queues/{queueName}/messages/{queueMessageId}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AckMessageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out
        elif http_res.status_code == 400:
            pass

        return res

    def create_queue(self) -> operations.CreateQueueResponse:
        r"""Create new queue."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/queues'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateQueueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out
        elif http_res.status_code == 400:
            pass

        return res

    def delete_queue(self, request: operations.DeleteQueueRequest) -> operations.DeleteQueueResponse:
        r"""Delete Queue."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteQueueRequest, base_url, '/queues/{queueName}', request)
        
        query_params = utils.get_query_params(operations.DeleteQueueRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteQueueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_list_of_queues(self) -> operations.GetListOfQueuesResponse:
        r"""Get list of all Queues."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/queues'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetListOfQueuesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out

        return res

    def get_message_data(self, request: operations.GetMessageDataRequest) -> operations.GetMessageDataResponse:
        r"""Get data associated with a Queue Message."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMessageDataRequest, base_url, '/queues/{queueName}/data/{queueMessageId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMessageDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [400, 404]:
            pass

        return res

    def get_next_messages(self, request: operations.GetNextMessagesRequest) -> operations.GetNextMessagesResponse:
        r"""Get next Queue Messages from a Queue"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNextMessagesRequest, base_url, '/queues/{queueName}/messages', request)
        
        query_params = utils.get_query_params(operations.GetNextMessagesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNextMessagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_queue_config(self, request: operations.GetQueueConfigRequest) -> operations.GetQueueConfigResponse:
        r"""Get Queue config."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetQueueConfigRequest, base_url, '/queues/{queueName}/config', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetQueueConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out
        elif http_res.status_code == 400:
            pass

        return res

    def send_message_binary(self, request: operations.SendMessageBinaryRequest) -> operations.SendMessageBinaryResponse:
        r"""Send Queue Message with a binary data (blob) payload."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SendMessageBinaryRequest, base_url, '/queues/{queueName}/messages', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.SendMessageBinaryRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendMessageBinaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out

        return res

    def update_queue_config(self, request: operations.UpdateQueueConfigRequest) -> operations.UpdateQueueConfigResponse:
        r"""Update Queue configuration."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateQueueConfigRequest, base_url, '/queues/{queueName}/config', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateQueueConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIResponse])
                res.api_response = out
        elif http_res.status_code == 400:
            pass

        return res

    