// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CommitRequestModeEnum - The type of commit to perform. Defaults to `TRANSACTIONAL`.
type CommitRequestModeEnum string

const (
	CommitRequestModeEnumModeUnspecified  CommitRequestModeEnum = "MODE_UNSPECIFIED"
	CommitRequestModeEnumTransactional    CommitRequestModeEnum = "TRANSACTIONAL"
	CommitRequestModeEnumNonTransactional CommitRequestModeEnum = "NON_TRANSACTIONAL"
)

func (e *CommitRequestModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MODE_UNSPECIFIED":
		fallthrough
	case "TRANSACTIONAL":
		fallthrough
	case "NON_TRANSACTIONAL":
		*e = CommitRequestModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CommitRequestModeEnum: %s", s)
	}
}

// CommitRequest - The request for Datastore.Commit.
type CommitRequest struct {
	// The type of commit to perform. Defaults to `TRANSACTIONAL`.
	Mode *CommitRequestModeEnum `json:"mode,omitempty"`
	// The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity.
	Mutations []Mutation `json:"mutations,omitempty"`
	// The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction.
	Transaction *string `json:"transaction,omitempty"`
}
