/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Snapshot - Represents a Persistent Disk Snapshot resource. You can use snapshots to back up data on a regular interval. For more information, read Creating persistent disk snapshots.
 */
public class Snapshot {
    /**
     * [Output Only] The architecture of the snapshot. Valid values are ARM64 or X86_64.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("architecture")
    public SnapshotArchitectureEnum architecture;

    public Snapshot withArchitecture(SnapshotArchitectureEnum architecture) {
        this.architecture = architecture;
        return this;
    }
    
    /**
     * [Output Only] Set to true if snapshots are automatically created by applying resource policy on the target disk.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoCreated")
    public Boolean autoCreated;

    public Snapshot withAutoCreated(Boolean autoCreated) {
        this.autoCreated = autoCreated;
        return this;
    }
    
    /**
     * Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters long and comply with RFC1035. This is an uncommon option only for advanced service owners who needs to create separate snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible only if it has a non-empty value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chainName")
    public String chainName;

    public Snapshot withChainName(String chainName) {
        this.chainName = chainName;
        return this;
    }
    
    /**
     * [Output Only] Size in bytes of the snapshot at creation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationSizeBytes")
    public String creationSizeBytes;

    public Snapshot withCreationSizeBytes(String creationSizeBytes) {
        this.creationSizeBytes = creationSizeBytes;
        return this;
    }
    
    /**
     * [Output Only] Creation timestamp in RFC3339 text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTimestamp")
    public String creationTimestamp;

    public Snapshot withCreationTimestamp(String creationTimestamp) {
        this.creationTimestamp = creationTimestamp;
        return this;
    }
    
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Snapshot withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * [Output Only] Size of the source disk, specified in GB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskSizeGb")
    public String diskSizeGb;

    public Snapshot withDiskSizeGb(String diskSizeGb) {
        this.diskSizeGb = diskSizeGb;
        return this;
    }
    
    /**
     * [Output Only] Number of bytes downloaded to restore a snapshot to a disk.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downloadBytes")
    public String downloadBytes;

    public Snapshot withDownloadBytes(String downloadBytes) {
        this.downloadBytes = downloadBytes;
        return this;
    }
    
    /**
     * [Input Only] Whether to attempt an application consistent snapshot by informing the OS to prepare for the snapshot process.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guestFlush")
    public Boolean guestFlush;

    public Snapshot withGuestFlush(Boolean guestFlush) {
        this.guestFlush = guestFlush;
        return this;
    }
    
    /**
     * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Snapshot withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * [Output Only] Type of the resource. Always compute#snapshot for Snapshot resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Snapshot withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a snapshot.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labelFingerprint")
    public String labelFingerprint;

    public Snapshot withLabelFingerprint(String labelFingerprint) {
        this.labelFingerprint = labelFingerprint;
        return this;
    }
    
    /**
     * Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public Snapshot withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * [Output Only] Integer license codes indicating which licenses are attached to this snapshot.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("licenseCodes")
    public String[] licenseCodes;

    public Snapshot withLicenseCodes(String[] licenseCodes) {
        this.licenseCodes = licenseCodes;
        return this;
    }
    
    /**
     * [Output Only] A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("licenses")
    public String[] licenses;

    public Snapshot withLicenses(String[] licenses) {
        this.licenses = licenses;
        return this;
    }
    
    /**
     * An opaque location hint used to place the snapshot close to other resources. This field is for use by internal tools that use the public API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationHint")
    public String locationHint;

    public Snapshot withLocationHint(String locationHint) {
        this.locationHint = locationHint;
        return this;
    }
    
    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Snapshot withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * [Output Only] Reserved for future use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("satisfiesPzs")
    public Boolean satisfiesPzs;

    public Snapshot withSatisfiesPzs(Boolean satisfiesPzs) {
        this.satisfiesPzs = satisfiesPzs;
        return this;
    }
    
    /**
     * [Output Only] Server-defined URL for the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;

    public Snapshot withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotEncryptionKey")
    public CustomerEncryptionKey snapshotEncryptionKey;

    public Snapshot withSnapshotEncryptionKey(CustomerEncryptionKey snapshotEncryptionKey) {
        this.snapshotEncryptionKey = snapshotEncryptionKey;
        return this;
    }
    
    /**
     * Indicates the type of the snapshot.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotType")
    public SnapshotSnapshotTypeEnum snapshotType;

    public Snapshot withSnapshotType(SnapshotSnapshotTypeEnum snapshotType) {
        this.snapshotType = snapshotType;
        return this;
    }
    
    /**
     * The source disk used to create this snapshot.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceDisk")
    public String sourceDisk;

    public Snapshot withSourceDisk(String sourceDisk) {
        this.sourceDisk = sourceDisk;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceDiskEncryptionKey")
    public CustomerEncryptionKey sourceDiskEncryptionKey;

    public Snapshot withSourceDiskEncryptionKey(CustomerEncryptionKey sourceDiskEncryptionKey) {
        this.sourceDiskEncryptionKey = sourceDiskEncryptionKey;
        return this;
    }
    
    /**
     * [Output Only] The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceDiskId")
    public String sourceDiskId;

    public Snapshot withSourceDiskId(String sourceDiskId) {
        this.sourceDiskId = sourceDiskId;
        return this;
    }
    
    /**
     * [Output Only] URL of the resource policy which created this scheduled snapshot.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceSnapshotSchedulePolicy")
    public String sourceSnapshotSchedulePolicy;

    public Snapshot withSourceSnapshotSchedulePolicy(String sourceSnapshotSchedulePolicy) {
        this.sourceSnapshotSchedulePolicy = sourceSnapshotSchedulePolicy;
        return this;
    }
    
    /**
     * [Output Only] ID of the resource policy which created this scheduled snapshot.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceSnapshotSchedulePolicyId")
    public String sourceSnapshotSchedulePolicyId;

    public Snapshot withSourceSnapshotSchedulePolicyId(String sourceSnapshotSchedulePolicyId) {
        this.sourceSnapshotSchedulePolicyId = sourceSnapshotSchedulePolicyId;
        return this;
    }
    
    /**
     * [Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public SnapshotStatusEnum status;

    public Snapshot withStatus(SnapshotStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * [Output Only] A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageBytes")
    public String storageBytes;

    public Snapshot withStorageBytes(String storageBytes) {
        this.storageBytes = storageBytes;
        return this;
    }
    
    /**
     * [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageBytesStatus")
    public SnapshotStorageBytesStatusEnum storageBytesStatus;

    public Snapshot withStorageBytesStatus(SnapshotStorageBytesStatusEnum storageBytesStatus) {
        this.storageBytesStatus = storageBytesStatus;
        return this;
    }
    
    /**
     * Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageLocations")
    public String[] storageLocations;

    public Snapshot withStorageLocations(String[] storageLocations) {
        this.storageLocations = storageLocations;
        return this;
    }
    
    /**
     * [Output Only] A list of user provided licenses represented by a list of URLs to the license resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userLicenses")
    public String[] userLicenses;

    public Snapshot withUserLicenses(String[] userLicenses) {
        this.userLicenses = userLicenses;
        return this;
    }
    
    public Snapshot(){}
}
