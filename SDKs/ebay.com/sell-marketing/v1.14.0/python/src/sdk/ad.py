"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Ad:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def bulk_create_ads_by_inventory_reference(self, request: operations.BulkCreateAdsByInventoryReferenceRequest, security: operations.BulkCreateAdsByInventoryReferenceSecurity) -> operations.BulkCreateAdsByInventoryReferenceResponse:
        r"""This method adds multiple listings that are managed with the <a href=\\"/api-docs/sell/inventory/resources/methods\\" title=\\"Inventory API Reference\\">Inventory API</a> to an existing Promoted Listings campaign.<br /><br />For Promoted Listings Standard (PLS) campaigns using the Cost Per Sale (CPS) model, bulk ads may be directly created for the listing.<br /><br />For each listing specified in the request, this method:<br /><ul><li>Creates an ad for the listing.</li> <li>Sets the bid percentage (also known as the <i>ad rate</i>) for the ads created.</li> <li>Associates the ads created with the specified campaign.</li></ul><br />To create ads for a listing, specify their <b>inventoryReferenceId</b> and <b>inventoryReferenceType</b>, plus the <b>bidPercentage</b> for the ad in the payload of the request. Specify the campaign to which you want to associate the ads using the <b>campaign_id</b> path parameter.<br /><br /><span class=\\"tablenote\\"><b>Note:</b> This method only applies to the Cost Per Sale (CPS) funding model; it does not apply to the Cost Per Click (CPC) funding model. See <a href=\\"/api-docs/sell/static/marketing/pl-overview.html#funding-model\\">Funding Models</a> in the <i>Promoted Listings Playbook</i> for more information.</span><br /><br />Use <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/createCampaign\\">createCampaign</a> to create a new campaign and use <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> to get a list of existing campaigns."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BulkCreateAdsByInventoryReferenceRequest, base_url, '/ad_campaign/{campaign_id}/bulk_create_ads_by_inventory_reference', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bulk_create_ads_by_inventory_reference_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BulkCreateAdsByInventoryReferenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkCreateAdsByInventoryReferenceResponse])
                res.bulk_create_ads_by_inventory_reference_response = out
        elif http_res.status_code in [207, 400, 404, 409, 500]:
            pass

        return res

    def bulk_create_ads_by_listing_id(self, request: operations.BulkCreateAdsByListingIDRequest, security: operations.BulkCreateAdsByListingIDSecurity) -> operations.BulkCreateAdsByListingIDResponse:
        r"""This method adds multiple listings to an existing Promoted Listings campaign using <b>listingId</b> values generated by the <a href=\\"/Devzone/XML/docs/Reference/eBay/index.html\\" title=\\"Trading API Reference\\">Trading API</a> or <a href=\\"/api-docs/sell/inventory/resources/methods\\" title=\\"Inventory API Reference\\">Inventory API</a>, or using values generated by an ad group ID.<p>For Promoted Listings Standard (PLS) campaigns using the Cost Per Sale (CPS) funding model, bulk ads may be directly created for the listing.</p><p>For each listing ID specified in the request, this method:</p>  <ul><li>Creates an ad for the listing.</li> <li>Sets the bid percentage (also known as the <i>ad rate</i>) for the ad.</li> <li>Associates the ad with the specified campaign.</li></ul><p>To create an ad for a listing, specify its <b>listingId</b>, plus the <b>bidPercentage</b> for the ad in the payload of the request. Specify the campaign to associate the ads with using the <b>campaign_id</b> path parameter. Listing IDs are generated by eBay when a seller creates listings with the Trading API.</p><p>You can specify a maximum of <b>500 listings per call</b> and each campaign can have ads for a maximum of 50,000 items. Be aware when using this call that each variation in a multiple-variation listing creates an individual ad.</p><p>For Promoted Listings Advanced (PLA) campaigns using the Cost Per Click (CPC) funding model, an ad group must be created first. If no ad group has been created for the campaign, ads cannot be created.</p><p>For the ad group specified in the request, this method associates the ad with the specified ad group.</p><p>To create an ad for an ad group, specify the name of the ad group plus the <b>defaultBid</b> for the ad in the payload of the request. Specify the campaign to associate the ads with using the <b>campaign_id</b> path parameter. Ad groups are generated using the <a href=\\"/api-docs/sell/marketing/resources/adgroup/methods/createAdGroup\\">createAdGroup</a>  method.</p> <p>You can specify one or more ad groups per campaign.</p><p>Use <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/createCampaign\\">createCampaign</a> to create a new campaign and use <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> to get a list of existing campaigns.</p>"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BulkCreateAdsByListingIDRequest, base_url, '/ad_campaign/{campaign_id}/bulk_create_ads_by_listing_id', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bulk_create_ad_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BulkCreateAdsByListingIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkAdResponse])
                res.bulk_ad_response = out
        elif http_res.status_code in [207, 400, 404, 409, 500]:
            pass

        return res

    def bulk_delete_ads_by_inventory_reference(self, request: operations.BulkDeleteAdsByInventoryReferenceRequest, security: operations.BulkDeleteAdsByInventoryReferenceSecurity) -> operations.BulkDeleteAdsByInventoryReferenceResponse:
        r"""This method works with listings created with the <a href=\\"/api-docs/sell/inventory/resources/methods\\" title=\\"Inventory API Reference\\">Inventory API</a>.<br /><br />The method deletes a set of ads, as specified by a list of inventory reference IDs, from the specified campaign. <i>Inventory reference IDs</i> are seller-defined IDs that are used with the Inventory API</a>.<br /><br />Pass the <b>campaign_id</b> as a path parameter and populate the payload with a list of <b>inventoryReferenceId</b> and <b>inventoryReferenceType</b> pairs that you want to delete.<br /><br />Get the campaign IDs for a seller by calling <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> and call <a href=\\"/api-docs/sell/marketing/resources/ad/methods/getAds\\">getAds</a> to get a list of the seller's inventory reference IDs.<br /><br /><span class=\\"tablenote\\"><b>Note:</b> This method only applies to the Cost Per Sale (CPS) funding model; it does not apply to the Cost Per Click (CPC) funding model. See <a href=\\"/api-docs/sell/static/marketing/pl-overview.html#funding-model\\">Funding Models</a> in the <i>Promoted Listings Playbook</i> for more information.</span>"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BulkDeleteAdsByInventoryReferenceRequest, base_url, '/ad_campaign/{campaign_id}/bulk_delete_ads_by_inventory_reference', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bulk_delete_ads_by_inventory_reference_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BulkDeleteAdsByInventoryReferenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkDeleteAdsByInventoryReferenceResponse])
                res.bulk_delete_ads_by_inventory_reference_response = out
        elif http_res.status_code in [207, 400, 404, 409, 500]:
            pass

        return res

    def bulk_delete_ads_by_listing_id(self, request: operations.BulkDeleteAdsByListingIDRequest, security: operations.BulkDeleteAdsByListingIDSecurity) -> operations.BulkDeleteAdsByListingIDResponse:
        r"""This method works with listing IDs created with either the <a href=\\"/Devzone/XML/docs/Reference/eBay/index.html\\" title=\\"Trading API Reference\\">Trading API</a> or the <a href=\\"/api-docs/sell/inventory/resources/methods\\" title=\\"Inventory API Reference\\">Inventory API</a>.<br /><br />The method deletes a set of ads, as specified by a list of <b>listingID</b> values from a Promoted Listings campaign. A listing ID value is generated by eBay when a seller creates a listing with either the Trading API and Inventory API.<br /><br />Pass the <b>campaign_id</b> as a path parameter and populate the payload with the set of listing IDs that you want to delete.<br /><br />Get the campaign IDs for a seller by calling <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> and call <a href=\\"/api-docs/sell/marketing/resources/ad/methods/getAds\\">getAds</a> to get a list of the seller's inventory reference IDs.<br /><br /><span class=\\"tablenote\\"><b>Note:</b> This method only applies to the Cost Per Sale (CPS) funding model; it does not apply to the Cost Per Click (CPC) funding model. See <a href=\\"/api-docs/sell/static/marketing/pl-overview.html#funding-model\\">Funding Models</a> in the <i>Promoted Listings Playbook</i> for more information.</span><br /><br />When using the CPC funding model, use the <a href=\\"/api-docs/sell/marketing/resources/ad/methods/bulkUpdateAdsStatusByListingId\\">bulkUpdateAdsStatusByListingId</a> method to change the status of ads to ARCHIVED."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BulkDeleteAdsByListingIDRequest, base_url, '/ad_campaign/{campaign_id}/bulk_delete_ads_by_listing_id', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bulk_delete_ad_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BulkDeleteAdsByListingIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkDeleteAdResponse])
                res.bulk_delete_ad_response = out
        elif http_res.status_code in [207, 400, 404, 409, 500]:
            pass

        return res

    def bulk_update_ads_bid_by_inventory_reference(self, request: operations.BulkUpdateAdsBidByInventoryReferenceRequest, security: operations.BulkUpdateAdsBidByInventoryReferenceSecurity) -> operations.BulkUpdateAdsBidByInventoryReferenceResponse:
        r"""This method works with listings created with either the <a href=\\"/Devzone/XML/docs/Reference/eBay/index.html\\" title=\\"Trading API Reference\\">Trading API</a> or the <a href=\\"/api-docs/sell/inventory/resources/methods\\" title=\\"Inventory API Reference\\">Inventory API</a>.  <p>The method updates the <b>bidPercentage</b> values for a set of ads associated with the specified campaign.</p>  <p>Specify the <b>campaign_id</b> as a path parameter and supply a set of listing IDs with their associated updated <b>bidPercentage</b> values in the request body. An eBay listing ID is generated when a listing is created with the Trading API.</p>  <p>Get the campaign IDs for a seller by calling <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> and call <a href=\\"/api-docs/sell/marketing/resources/ad/methods/getAds\\">getAds</a> to get a list of the seller's inventory reference IDs.</p><span class=\\"tablenote\\"><b>Note:</b> This method only applies to the Cost Per Sale (CPS) funding model; it does not apply to the Cost Per Click (CPC) funding model. See <a href=\\"/api-docs/sell/static/marketing/pl-overview.html#funding-model\\">Funding Models</a> in the <i>Promoted Listings Playbook</i> for more information.</span>"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BulkUpdateAdsBidByInventoryReferenceRequest, base_url, '/ad_campaign/{campaign_id}/bulk_update_ads_bid_by_inventory_reference', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bulk_create_ads_by_inventory_reference_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BulkUpdateAdsBidByInventoryReferenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkUpdateAdsByInventoryReferenceResponse])
                res.bulk_update_ads_by_inventory_reference_response = out
        elif http_res.status_code in [207, 400, 404, 409, 500]:
            pass

        return res

    def bulk_update_ads_bid_by_listing_id(self, request: operations.BulkUpdateAdsBidByListingIDRequest, security: operations.BulkUpdateAdsBidByListingIDSecurity) -> operations.BulkUpdateAdsBidByListingIDResponse:
        r"""This method works with listings created with either the <a href=\\"/Devzone/XML/docs/Reference/eBay/index.html\\" title=\\"Trading API Reference\\">Trading API</a> or the <a href=\\"/api-docs/sell/inventory/resources/methods\\" title=\\"Inventory API Reference\\">Inventory API</a>.  <p>The method updates the <b>bidPercentage</b> values for a set of ads associated with the specified campaign.</p>  <p>Specify the <b>campaign_id</b> as a path parameter and supply a set of listing IDs with their associated updated <b>bidPercentage</b> values in the request body. An eBay listing ID is generated when a listing is created with the Trading API.</p>  <p>Get the campaign IDs for a seller by calling <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> and call <a href=\\"/api-docs/sell/marketing/resources/ad/methods/getAds\\">getAds</a> to get a list of the seller's inventory reference IDs.</p><span class=\\"tablenote\\"><b>Note:</b> This method only applies to the Cost Per Sale (CPS) funding model; it does not apply to the Cost Per Click (CPC) funding model. See <a href=\\"/api-docs/sell/static/marketing/pl-overview.html#funding-model\\">Funding Models</a> in the <i>Promoted Listings Playbook</i> for more information.</span>"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BulkUpdateAdsBidByListingIDRequest, base_url, '/ad_campaign/{campaign_id}/bulk_update_ads_bid_by_listing_id', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bulk_create_ad_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BulkUpdateAdsBidByListingIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkAdUpdateResponse])
                res.bulk_ad_update_response = out
        elif http_res.status_code in [207, 400, 404, 409, 500]:
            pass

        return res

    def bulk_update_ads_status(self, request: operations.BulkUpdateAdsStatusRequest, security: operations.BulkUpdateAdsStatusSecurity) -> operations.BulkUpdateAdsStatusResponse:
        r"""<span class=\\"tablenote\\"><b>Note:</b> This method is only available for select partners who have been approved for the eBay Promoted Listings Advanced (PLA) program. For information about how to request access to this program, refer to <a href=\\"/api-docs/sell/static/marketing/pl-verify-eligibility.html#access-requests \\" target=\\"_blank \\"> Promoted Listings Advanced Access Requests</a> in the Promoted Listings Playbook. To determine if a seller qualifies for PLA, use the <a href=\\"/api-docs/sell/account/resources/advertising_eligibility/methods/getAdvertisingEligibility \\" target=\\"_blank \\">getAdvertisingEligibility</a> method in Account API.</span><br />This method works with listings created with either the <a href= \\"/Devzone/XML/docs/Reference/eBay/index.html\\">Trading API</a> or the <a href=\\"/api-docs/sell/inventory/resources/methods\\">Inventory API</a>.<br /><br />This method updates the status of ads in bulk.<br /><br />Specify the <b>campaign_id</b> you want to update as a URI parameter, and configure the <b>adGroupStatus</b> in the request payload."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BulkUpdateAdsStatusRequest, base_url, '/ad_campaign/{campaign_id}/bulk_update_ads_status', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bulk_update_ad_status_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BulkUpdateAdsStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkAdUpdateStatusResponse])
                res.bulk_ad_update_status_response = out
        elif http_res.status_code in [207, 400, 404, 409, 500]:
            pass

        return res

    def bulk_update_ads_status_by_listing_id(self, request: operations.BulkUpdateAdsStatusByListingIDRequest, security: operations.BulkUpdateAdsStatusByListingIDSecurity) -> operations.BulkUpdateAdsStatusByListingIDResponse:
        r"""<span class=\\"tablenote\\"><b>Note:</b> This method is only available for select partners who have been approved for the eBay Promoted Listings Advanced (PLA) program. For information about how to request access to this program, refer to <a href=\\"/api-docs/sell/static/marketing/pl-verify-eligibility.html#access-requests \\" target=\\"_blank \\"> Promoted Listings Advanced Access Requests</a> in the Promoted Listings Playbook. To determine if a seller qualifies for PLA, use the <a href=\\"/api-docs/sell/account/resources/advertising_eligibility/methods/getAdvertisingEligibility \\" target=\\"_blank \\">getAdvertisingEligibility</a> method in Account API.</span><br />This method works with listings created with either the <a href=\\"/Devzone/XML/docs/Reference/eBay/index.html\\">Trading API</a> or the <a href=\\"/api-docs/sell/inventory/resources/methods\\">Inventory API</a>.<br /><br />The method updates the status of ads in bulk, based on listing ID values.<br /><br />Specify the <b>campaign_id</b> as a path parameter and supply a set of listing IDs with their updated <b>adStatus</b> values in the request body. An eBay listing ID is generated when a listing is created with the Trading API.<br /><br />Get the campaign IDs for a seller by calling <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> and call <a href=\\"/api-docs/sell/marketing/resources/ad/methods/getAds\\">getAds</a> to retrieve a list of seller inventory reference IDs."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BulkUpdateAdsStatusByListingIDRequest, base_url, '/ad_campaign/{campaign_id}/bulk_update_ads_status_by_listing_id', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bulk_update_ad_status_by_listing_id_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BulkUpdateAdsStatusByListingIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkAdUpdateStatusByListingIDResponse])
                res.bulk_ad_update_status_by_listing_id_response = out
        elif http_res.status_code in [207, 400, 404, 409, 500]:
            pass

        return res

    def create_ad_by_listing_id(self, request: operations.CreateAdByListingIDRequest, security: operations.CreateAdByListingIDSecurity) -> operations.CreateAdByListingIDResponse:
        r"""This method adds a listing to an existing Promoted Listings campaign using a <b>listingId</b> value generated by the <a href=\\"/Devzone/XML/docs/Reference/eBay/index.html\\" title=\\"Trading API Reference\\">Trading API</a> or <a href=\\"/api-docs/sell/inventory/resources/methods\\" title=\\"Inventory API Reference\\">Inventory API</a>, or using a value generated by an ad group ID. <p>For Promoted Listings Standard (PLS) campaigns using the Cost Per Sale (CPS) funding model, an ad may be directly created for the listing.</p><p>For the listing ID specified in the request, this method:</p>  <ul><li>Creates an ad for the listing.</li> <li>Sets the bid percentage (also known as the <i>ad rate</i>) for the ad.</li> <li>Associates the ad with the specified campaign.</li></ul>  <p>To create an ad for a listing, specify its <b>listingId</b>, plus the <b>bidPercentage</b> for the ad in the payload of the request. Specify the campaign to associate the ad with using the <b>campaign_id</b> path parameter. Listing IDs are generated by eBay when a seller creates listings with the Trading API.</p><p>For Promoted Listings Advanced (PLA) campaigns using the Cost Per Click (CPC) funding model, an ad group must be created first. If no ad group has been created for the campaign, an ad cannot be created.</p><p>For the ad group specified in the request, this method associates the ad with the specified ad group.</p><p>To create an ad for an ad group, specify the name of the ad group in the payload of the request. Specify the campaign to associate the ads with using the <b>campaign_id</b> path parameter. Ad groups are generated using the <a href=\\"/api-docs/sell/marketing/resources/adgroup/methods/createAdGroup\\">createAdGroup</a> method.</p> <p>You can specify one or more ad groups per campaign.</p><p>Use <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/createCampaign\\">createCampaign</a> to create a new campaign and use <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> to get a list of existing campaigns.</p><p>This call has no response payload. If the ad is successfully created, a <code>201 Created</code> HTTP status code and the <a href=\\"/api-docs/sell/marketing/resources/ad/methods/getAd\\">getAd</a> URI of the ad are returned in the location header.</p>"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateAdByListingIDRequest, base_url, '/ad_campaign/{campaign_id}/ad', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_ad_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAdByListingIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_ad_by_listing_id_201_application_json_object = out
        elif http_res.status_code in [400, 404, 409, 500]:
            pass

        return res

    def create_ads_by_inventory_reference(self, request: operations.CreateAdsByInventoryReferenceRequest, security: operations.CreateAdsByInventoryReferenceSecurity) -> operations.CreateAdsByInventoryReferenceResponse:
        r"""This method adds a listing that is managed with the <a href=\\"/api-docs/sell/inventory/resources/methods\\" title=\\"Inventory API Reference\\">Inventory API</a> to an existing Promoted Listings campaign.<br /><br />For Promoted Listings Standard (PLS) campaigns using the Cost Per Sale (CPS) funding model, an ad may be directly created for the listing.<br /><br />For each listing specified in the request, this method:<br /><ul><li>Creates an ad for the listing.</li> <li>Sets the bid percentage (also known as the <i>ad rate</i>) for the ads created.</li> <li>Associates the created ad with the specified campaign.</li></ul><br />To create an ad for a listing, specify its <b>inventoryReferenceId</b> and <b>inventoryReferenceType</b>, plus the <b>bidPercentage</b> for the ad in the payload of the request. Specify the campaign to associate the ad with using the <b>campaign_id</b> path parameter.<br /><br /><span class=\\"tablenote\\"><b>Note:</b> This method only applies to the Cost Per Sale (CPS) funding model; it does not apply to the Cost Per Click (CPC) funding model. See <a href=\\"/api-docs/sell/static/marketing/pl-overview.html#funding-model\\">Funding Models</a> in the <i>Promoted Listings Playbook</i> for more information.</span><br /><br />Use <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/createCampaign\\">createCampaign</a> to create a new campaign and use <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> to get a list of existing campaigns."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateAdsByInventoryReferenceRequest, base_url, '/ad_campaign/{campaign_id}/create_ads_by_inventory_reference', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_ads_by_inventory_reference_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAdsByInventoryReferenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdReferences])
                res.ad_references = out
        elif http_res.status_code in [400, 404, 409, 500]:
            pass

        return res

    def delete_ad(self, request: operations.DeleteAdRequest, security: operations.DeleteAdSecurity) -> operations.DeleteAdResponse:
        r"""This method removes the specified ad from the specified campaign.<br /><br />Pass the ID of the ad to delete with the ID of the campaign associated with the ad as path parameters to the call.<br /><br />Call <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> to get the current list of the seller's campaign IDs.<br /><br /><span class=\\"tablenote\\"><b>Note:</b> This method only applies to the Cost Per Sale (CPS) funding model; it does not apply to the Cost Per Click (CPC) funding model. See <a href=\\"/api-docs/sell/static/marketing/pl-overview.html#funding-model\\">Funding Models</a> in the <i>Promoted Listings Playbook</i> for more information.</span><br /><br />When using the CPC funding model, use the <b>bulkUpdateAdsStatusByListingId</b> method to change the status of ads to ARCHIVED."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAdRequest, base_url, '/ad_campaign/{campaign_id}/ad/{ad_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAdResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_ads_by_inventory_reference(self, request: operations.DeleteAdsByInventoryReferenceRequest, security: operations.DeleteAdsByInventoryReferenceSecurity) -> operations.DeleteAdsByInventoryReferenceResponse:
        r"""This method works with listings that are managed with the <a href=\\"/api-docs/sell/inventory/resources/methods\\" title=\\"Inventory API Reference\\">Inventory API</a>.  <p>The method deletes ads using a list of seller-defined inventory reference IDs, used with the Inventory API, that are associated with the specified campaign ID.</p> <p>Specify the campaign ID (as a path parameter) and a list of <b>inventoryReferenceId</b> and <b>inventoryReferenceType</b> pairs to be deleted.</p>  <p>Call <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> to get a list of the seller's current campaign IDs.</p><span class=\\"tablenote\\"><b>Note:</b> This method only applies to the Cost Per Sale (CPS) funding model; it does not apply to the Cost Per Click (CPC) funding model. See <a href=\\"/api-docs/sell/static/marketing/pl-overview.html#funding-model\\">Funding Models</a> in the <i>Promoted Listings Playbook</i> for more information.</span><br /><br />When using the CPC funding model, use the bulkUpdateAdsStatusByInventoryReference method to change the status of ads to ARCHIVED."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAdsByInventoryReferenceRequest, base_url, '/ad_campaign/{campaign_id}/delete_ads_by_inventory_reference', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "delete_ads_by_inventory_reference_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAdsByInventoryReferenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdIds])
                res.ad_ids = out
        elif http_res.status_code in [400, 404, 409, 500]:
            pass

        return res

    def get_ad(self, request: operations.GetAdRequest, security: operations.GetAdSecurity) -> operations.GetAdResponse:
        r"""This method retrieves the specified ad from the specified campaign.  <p>In the request, supply the <b>campaign_id</b> and <b>ad_id</b> as path parameters.</p> <p>Call <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> to retrieve a list of the seller's current campaign IDs and call <a href=\\"/api-docs/sell/marketing/resources/ad/methods/getAds\\">getAds</a> to retrieve their current ad IDs.</p>"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAdRequest, base_url, '/ad_campaign/{campaign_id}/ad/{ad_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAdResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Ad])
                res.ad = out
        elif http_res.status_code in [400, 404, 409, 500]:
            pass

        return res

    def get_ads(self, request: operations.GetAdsRequest, security: operations.GetAdsSecurity) -> operations.GetAdsResponse:
        r"""This method retrieves Promoted Listings ads that are associated with listings created with either the <a href=\\"/Devzone/XML/docs/Reference/eBay/index.html\\" title=\\"Trading API Reference\\">Trading API</a> or the <a href=\\"/api-docs/sell/inventory/resources/methods\\" title=\\"Inventory API Reference\\">Inventory API</a>. <p>The method retrieves ads related to the specified campaign. Specify the Promoted Listings campaign to target with the <b>campaign_id</b> path parameter.</p>  <p>Because of the large number of possible results, you can use query parameters to paginate the result set by specifying a <b>limit</b>, which dictates how many ads to return on each page of the response. You can also specify how many ads to skip in the result set before returning the first result using the <b>offset</b> path parameter.</p>  <p>Call <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> to retrieve the current campaign IDs for the seller.</p>"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAdsRequest, base_url, '/ad_campaign/{campaign_id}/ad', request)
        
        query_params = utils.get_query_params(operations.GetAdsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdPagedCollectionResponse])
                res.ad_paged_collection_response = out
        elif http_res.status_code in [400, 404, 409, 500]:
            pass

        return res

    def get_ads_by_inventory_reference(self, request: operations.GetAdsByInventoryReferenceRequest, security: operations.GetAdsByInventoryReferenceSecurity) -> operations.GetAdsByInventoryReferenceResponse:
        r"""This method retrieves Promoted Listings ads associated with listings that are managed with the <a href=\\"/api-docs/sell/inventory/resources/methods\\" title=\\"Inventory API Reference\\">Inventory API</a> from the specified campaign.<br /><br />Supply the <b>campaign_id</b> as a path parameter and use query parameters to specify the <b>inventory_reference_id</b> and <b>inventory_reference_type</b> pairs.<br /><br />In the Inventory API, an <i>inventory reference ID</i> is either a seller-defined <b>SKU</b> value or an <b>inventoryItemGroupKey</b> (a seller-defined ID for an inventory item group, which is an entity that's used in the Inventory API to create a multiple-variation listing). To indicate a listing managed by the Inventory API, you must always specify both an <b>inventory_reference_id</b> and the associated <b>inventory_reference_type</b>.<br /><br />Call <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> to retrieve all of the seller's the current campaign IDs.<br /><br /><span class=\\"tablenote\\"><b>Note:</b> This method only applies to the Cost Per Sale (CPS) funding model; it does not apply to the Cost Per Click (CPC) funding model. See <a href=\\"/api-docs/sell/static/marketing/pl-overview.html#funding-model\\">Funding Models</a> in the <i>Promoted Listings Playbook</i> for more information.</span>"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAdsByInventoryReferenceRequest, base_url, '/ad_campaign/{campaign_id}/get_ads_by_inventory_reference', request)
        
        query_params = utils.get_query_params(operations.GetAdsByInventoryReferenceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAdsByInventoryReferenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Ads])
                res.ads = out
        elif http_res.status_code in [400, 404, 409, 500]:
            pass

        return res

    def update_bid(self, request: operations.UpdateBidRequest, security: operations.UpdateBidSecurity) -> operations.UpdateBidResponse:
        r"""This method updates the bid percentage (also known as the \\"ad rate\\") for the specified ad in the specified campaign. <p>In the request, supply the <b>campaign_id</b> and <b>ad_id</b> as path parameters, and supply the new <b>bidPercentage</b> value in the payload of the call.</p>  <p>Call <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> to retrieve a seller's current campaign IDs and call <a href=\\"/api-docs/sell/marketing/resources/ad/methods/getAds\\">getAds</a> to get their ad IDs.</p><span class=\\"tablenote\\"><b>Note:</b> This method only applies to the Cost Per Sale (CPS) funding model; it does not apply to the Cost Per Click (CPC) funding model. See <a href=\\"/api-docs/sell/static/marketing/pl-overview.html#funding-model\\">Funding Models</a> in the <i>Promoted Listings Playbook</i> for more information.</span>"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateBidRequest, base_url, '/ad_campaign/{campaign_id}/ad/{ad_id}/update_bid', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_bid_percentage_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateBidResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    