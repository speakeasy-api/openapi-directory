// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PolicyControllerHubConfigInstallSpecEnum - The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
type PolicyControllerHubConfigInstallSpecEnum string

const (
	PolicyControllerHubConfigInstallSpecEnumInstallSpecUnspecified  PolicyControllerHubConfigInstallSpecEnum = "INSTALL_SPEC_UNSPECIFIED"
	PolicyControllerHubConfigInstallSpecEnumInstallSpecNotInstalled PolicyControllerHubConfigInstallSpecEnum = "INSTALL_SPEC_NOT_INSTALLED"
	PolicyControllerHubConfigInstallSpecEnumInstallSpecEnabled      PolicyControllerHubConfigInstallSpecEnum = "INSTALL_SPEC_ENABLED"
	PolicyControllerHubConfigInstallSpecEnumInstallSpecSuspended    PolicyControllerHubConfigInstallSpecEnum = "INSTALL_SPEC_SUSPENDED"
)

func (e PolicyControllerHubConfigInstallSpecEnum) ToPointer() *PolicyControllerHubConfigInstallSpecEnum {
	return &e
}

func (e *PolicyControllerHubConfigInstallSpecEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INSTALL_SPEC_UNSPECIFIED":
		fallthrough
	case "INSTALL_SPEC_NOT_INSTALLED":
		fallthrough
	case "INSTALL_SPEC_ENABLED":
		fallthrough
	case "INSTALL_SPEC_SUSPENDED":
		*e = PolicyControllerHubConfigInstallSpecEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyControllerHubConfigInstallSpecEnum: %v", v)
	}
}

// PolicyControllerHubConfig - Configuration for Policy Controller
type PolicyControllerHubConfig struct {
	// Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
	AuditIntervalSeconds *string `json:"auditIntervalSeconds,omitempty"`
	// The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.
	ConstraintViolationLimit *string `json:"constraintViolationLimit,omitempty"`
	// Map of deployment configs to deployments ("admission", "audit", "mutation').
	DeploymentConfigs map[string]PolicyControllerPolicyControllerDeploymentConfig `json:"deploymentConfigs,omitempty"`
	// The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
	ExemptableNamespaces []string `json:"exemptableNamespaces,omitempty"`
	// The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
	InstallSpec *PolicyControllerHubConfigInstallSpecEnum `json:"installSpec,omitempty"`
	// Logs all denies and dry run failures.
	LogDeniesEnabled *bool `json:"logDeniesEnabled,omitempty"`
	// MonitoringConfig specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
	Monitoring *PolicyControllerMonitoringConfig `json:"monitoring,omitempty"`
	// Enables the ability to mutate resources using Policy Controller.
	MutationEnabled *bool `json:"mutationEnabled,omitempty"`
	// PolicyContentSpec defines the user's desired content configuration on the cluster.
	PolicyContent *PolicyControllerPolicyContentSpec `json:"policyContent,omitempty"`
	// Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
	ReferentialRulesEnabled *bool `json:"referentialRulesEnabled,omitempty"`
	// The config specifying which default library templates to install.
	TemplateLibraryConfig *PolicyControllerTemplateLibraryConfig `json:"templateLibraryConfig,omitempty"`
}
