"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import messagetype_enum as shared_messagetype_enum
from ..shared import signingalgorithmspec_enum as shared_signingalgorithmspec_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SignRequest:
    
    key_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyId') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Message') }})  
    signing_algorithm: shared_signingalgorithmspec_enum.SigningAlgorithmSpecEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SigningAlgorithm') }})  
    grant_tokens: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GrantTokens'), 'exclude': lambda f: f is None }})  
    message_type: Optional[shared_messagetype_enum.MessageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MessageType'), 'exclude': lambda f: f is None }})  
    