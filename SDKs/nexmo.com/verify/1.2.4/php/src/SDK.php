<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:
 * 
 * 
 * * Protecting against spam, by preventing spammers from creating multiple accounts
 * * Monitoring suspicious activity, by forcing an account user to verify ownership of a number
 * * Ensuring that you can reach your users at any time because you have their correct phone number
 * More information is available at <https://developer.nexmo.com/verify>
 * https://developer.nexmo.com/verify - More information on the Verify product on our Developer Portal
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see https://developer.nexmo.com/verify
 */
class SDK
{
	public const SERVERS = [
		'https://api.nexmo.com/verify',
	];
  	
    /**
     * Fraud Management
     * 
     * @var FraudManagement $$fraudManagement
     */
	public FraudManagement $fraudManagement;
	
    /**
     * Verify Requests
     * 
     * @var Requests $$requests
     */
	public Requests $requests;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->fraudManagement = new FraudManagement(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->requests = new Requests(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
	
    /**
     * Verify Check
     * 
     * Use Verify check to confirm that the PIN you received from your user matches the one sent by Vonage in your Verify request.
     * 
     * 1. Send the verification `code` that your user supplied, with the corresponding `request_id` from the Verify request.
     * 2. Check the `status` of the response to determine if the code the user supplied matches the one sent by Vonage.
     * 
     * *Note that this endpoint is available by `GET` request as well as `POST`.*
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VerifyCheckRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VerifyCheckResponse
     */
	public function verifyCheck(
        \OpenAPI\OpenAPI\Models\Operations\VerifyCheckRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VerifyCheckResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/check/{format}', \OpenAPI\OpenAPI\Models\Operations\VerifyCheckRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "checkRequest", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VerifyCheckResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyCheck200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Verify Control
     * 
     * Control the progress of your Verify requests. To cancel an existing Verify request, or to trigger the next verification event:
     * 
     * 
     * 1. Send a Verify control request with the appropriate command (`cmd`) for what you want to achieve.
     * 
     * 2. Check the `status` in the response.
     * 
     * 
     * *Note that this endpoint is available by `GET` request as well as `POST`.*
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VerifyControlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VerifyControlResponse
     */
	public function verifyControl(
        \OpenAPI\OpenAPI\Models\Operations\VerifyControlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VerifyControlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/control/{format}', \OpenAPI\OpenAPI\Models\Operations\VerifyControlRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "controlRequest", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VerifyControlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyControl200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * PSD2 (Payment Services Directive 2) Request
     * 
     * Use Verify request to generate and send a PIN to your user to authorize a payment:
     * 1. Create a request to send a verification code to your user.
     * 2. Check the `status` field in the response to ensure that your request was successful (zero is success).
     * 3. Use the `request_id` field in the response for the Verify check.
     * (Please note that XML format is not supported for the Payment Services Directive endpoint at this time.)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VerifyRequestWithPsd2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VerifyRequestWithPsd2Response
     */
	public function verifyRequestWithPsd2(
        \OpenAPI\OpenAPI\Models\Operations\VerifyRequestWithPsd2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VerifyRequestWithPsd2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/psd2/{format}', \OpenAPI\OpenAPI\Models\Operations\VerifyRequestWithPsd2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "psd2Request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VerifyRequestWithPsd2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyRequestWithPsd2200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Verify Search
     * 
     * Use Verify search to check the status of past or current verification requests:
     * 
     * 1. Send a Verify search request containing the `request_id`s of the verification requests you are interested in.
     * 2. Use the `status` of each verification request in the `checks` array of the response object to determine the outcome.
     * 
     * *Note that this endpoint is available by `POST` request as well as `GET`.*
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VerifySearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VerifySearchResponse
     */
	public function verifySearch(
        \OpenAPI\OpenAPI\Models\Operations\VerifySearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VerifySearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/search/{format}', \OpenAPI\OpenAPI\Models\Operations\VerifySearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VerifySearchRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VerifySearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifySearch200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}