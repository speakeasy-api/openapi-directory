/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Action } from "./action";
import { Bundle } from "./bundle";
import { CalendarEvent } from "./calendarevent";
import { CalendarEventResponse } from "./calendareventresponse";
import { Coach } from "./coach";
import { EmailHistory } from "./emailhistory";
import { Group } from "./group";
import { HealthProfile } from "./healthprofile";
import { HealthProfileAnswer } from "./healthprofileanswer";
import { HealthProfileQuestion } from "./healthprofilequestion";
import { HealthQuestionDefinition } from "./healthquestiondefinition";
import { Metric } from "./metric";
import { Oauth } from "./oauth";
import { Organization } from "./organization";
import { Patient } from "./patient";
import { Plan } from "./plan";
import { Result } from "./result";
import { Reward } from "./reward";
import { RewardEarning } from "./rewardearning";
import { RewardEarningFulfillment } from "./rewardearningfulfillment";
import { RewardProgram } from "./rewardprogram";
import { RewardProgramActivation } from "./rewardprogramactivation";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.twinehealth.com/pub"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * # Overview
 *
 * @remarks
 * The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the
 * [JSON API](http://jsonapi.org/format/1.0/) specification.
 *
 * In addition to this documentation, we also provide an
 * [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) "yaml" file describing the API:
 * [Fitbit Plus API Specification](swagger.yaml).
 *
 * # Authentication
 * Authentication for the Fitbit Plus API is based on the
 * [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant
 * types of **client_credentials** and **refresh_token**.
 *
 * See [POST /oauth/token](#operation/createToken) for details on the request and response formats.
 * <!-- ReDoc-Inject: <security-definitions> -->
 *
 * ## Building Integrations
 * We will provide customers with unique client credentials for each application/integration they build, allowing us
 * to enforce appropriate access controls and monitor API usage.
 * The client credentials will be scoped to the organization, and allow full access to all patients and related data
 * within that organization.
 *
 * These credentials are appropriate for creating an integration that does one of the following:
 *  - background reporting/analysis
 *  - synchronizing data with another system (such as an EMR)
 *
 * The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing
 * application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to
 * that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a
 * federated identity provider. You would need to have a separate means of verifying a user's identity. We do not
 * currently support the required password-based oauth flow to make this possible.
 *
 * # Paging
 * The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.
 *
 * #### Skip-based paging
 *
 * Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.
 *
 * If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.
 *
 * #### Cursor-based paging
 * Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.
 *
 * Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[limit]=50&page[after]=<cursor>`.
 *
 * We encourage the use of cursor-based paging for performance reasons.
 *
 * In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.
 *
 * It is not valid to mix the two strategies.
 *
 */
export class SDK {
  /**
   * An action is an actionable item in a patient's plan.
   */
  public action: Action;
  /**
   * A bundle is a collection of actions (an action plan) in a patient's plan summary.
   */
  public bundle: Bundle;
  /**
   * A calendar event represents an event involving or relevant to a patient which will or has occurred on a specific date or during a specific period of time.
   */
  public calendarEvent: CalendarEvent;
  /**
   * A calendar event response indicates the attendee's response to a calendar event.  Only `POST` for creation is allowed as the responses are updated into the corresponding calendar events.
   */
  public calendarEventResponse: CalendarEventResponse;
  /**
   * A coach is a person that supports a patient
   */
  public coach: Coach;
  /**
   * Email history represents a single email that was sent using Fitbit Plus.
   */
  public emailHistory: EmailHistory;
  /**
   * A group is a cohort of patients within an organization. The creation of groups allows for the segmentation of dashboards and analytics. For example, a group might correspond to the patients in a particular practice or the employees of a particular employer.
   */
  public group: Group;
  /**
   * A health profile contains a set of health questions and answers for a patient.
   */
  public healthProfile: HealthProfile;
  /**
   * A health profile answer is the answer to a question for a patient.
   */
  public healthProfileAnswer: HealthProfileAnswer;
  /**
   * A health profile question contains a health question and the corresponding answer for a patient.
   */
  public healthProfileQuestion: HealthProfileQuestion;
  /**
   * A health question definition specifies a health question and the corresponding answer choices.
   */
  public healthQuestionDefinition: HealthQuestionDefinition;
  /**
   * A metric is a quantitative result for a patient. For example, vital signs, lab results, etc. are all metrics.
   */
  public metric: Metric;
  /**
   * Authentication operations
   */
  public oauth: Oauth;
  /**
   * An organization is a Fitbit Plus customer. No data is accessible across organizations.
   */
  public organization: Organization;
  /**
   * A patient is the core user of Fitbit Plus.
   */
  public patient: Patient;
  /**
   * A plan is the set of actions and associated goals for a patient.
   */
  public plan: Plan;
  /**
   * A patient health result is a quantitative result for a patient.
   */
  public result: Result;
  /**
   * A reward allocates a portion of the budget from the reward program activation for achieving a particular goal and sets a target date.
   */
  public reward: Reward;
  /**
   * A reward earning specifies the portion of a reward that was earned and at what date.
   */
  public rewardEarning: RewardEarning;
  /**
   * A reward earning fulfillment specifies the portion of a reward earning that was fulfilled and at what date.
   */
  public rewardEarningFulfillment: RewardEarningFulfillment;
  /**
   * A reward program provides the details for a rewards program for a group. Different rewards programs can be created for different periods of time specified by the start_at and end_at dates. A reward program can activated for a patient any time between these dates. An activated reward program for a patient is called a reward program activation.
   */
  public rewardProgram: RewardProgram;
  /**
   * A reward program activation is the activation of a reward program for a specific patient.
   */
  public rewardProgramActivation: RewardProgramActivation;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.action = new Action(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.bundle = new Bundle(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.calendarEvent = new CalendarEvent(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.calendarEventResponse = new CalendarEventResponse(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.coach = new Coach(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.emailHistory = new EmailHistory(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.group = new Group(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.healthProfile = new HealthProfile(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.healthProfileAnswer = new HealthProfileAnswer(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.healthProfileQuestion = new HealthProfileQuestion(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.healthQuestionDefinition = new HealthQuestionDefinition(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.metric = new Metric(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.oauth = new Oauth(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.organization = new Organization(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.patient = new Patient(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.plan = new Plan(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.result = new Result(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.reward = new Reward(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.rewardEarning = new RewardEarning(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.rewardEarningFulfillment = new RewardEarningFulfillment(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.rewardProgram = new RewardProgram(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.rewardProgramActivation = new RewardProgramActivation(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
