<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Organizations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsOperationsListResponse
     */
	public function assuredworkloadsOrganizationsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates Assured Workload.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsCreateResponse
     */
	public function assuredworkloadsOrganizationsLocationsWorkloadsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/workloads', \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudAssuredworkloadsV1WorkloadInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the workload. Make sure that workload's direct children are already in a deleted state, otherwise the request will fail with a FAILED_PRECONDITION error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsDeleteResponse
     */
	public function assuredworkloadsOrganizationsLocationsWorkloadsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Assured Workloads under a CRM Node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsListResponse
     */
	public function assuredworkloadsOrganizationsLocationsWorkloadsList(
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/workloads', \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudAssuredworkloadsV1ListWorkloadsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudAssuredworkloadsV1ListWorkloadsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the permissions settings for an existing partner workload. For force updates don't set etag field in the Workload. Only one update operation per workload can be in progress.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsResponse
     */
	public function assuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissions(
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:mutatePartnerPermissions', \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudAssuredworkloadsV1MutatePartnerPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudAssuredworkloadsV1Workload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudAssuredworkloadsV1Workload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing workload. Currently allows updating of workload display_name and labels. For force updates don't set etag field in the Workload. Only one update operation per workload can be in progress.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsPatchResponse
     */
	public function assuredworkloadsOrganizationsLocationsWorkloadsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudAssuredworkloadsV1WorkloadInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudAssuredworkloadsV1Workload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudAssuredworkloadsV1Workload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restrict the list of resources allowed in the Workload environment. The current list of allowed products can be found at https://cloud.google.com/assured-workloads/docs/supported-products In addition to assuredworkloads.workload.update permission, the user should also have orgpolicy.policy.set permission on the folder resource to use this functionality.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesResponse
     */
	public function assuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResources(
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:restrictAllowedResources', \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudAssuredworkloadsV1RestrictAllowedResourcesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudAssuredworkloadsV1RestrictAllowedResourcesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Acknowledges an existing violation. By acknowledging a violation, users acknowledge the existence of a compliance violation in their workload and decide to ignore it due to a valid business justification. Acknowledgement is a permanent operation and it cannot be reverted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeResponse
     */
	public function assuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledge(
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:acknowledge', \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudAssuredworkloadsV1AcknowledgeViolationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudAssuredworkloadsV1AcknowledgeViolationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves Assured Workload Violation based on ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetResponse
     */
	public function assuredworkloadsOrganizationsLocationsWorkloadsViolationsGet(
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudAssuredworkloadsV1Violation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudAssuredworkloadsV1Violation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the Violations in the AssuredWorkload Environment. Callers may also choose to read across multiple Workloads as per [AIP-159](https://google.aip.dev/159) by using '-' (the hyphen or dash character) as a wildcard character instead of workload-id in the parent. Format `organizations/{org_id}/locations/{location}/workloads/-`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListResponse
     */
	public function assuredworkloadsOrganizationsLocationsWorkloadsViolationsList(
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/violations', \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudAssuredworkloadsV1ListViolationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudAssuredworkloadsV1ListViolationsResponse', 'json');
            }
        }

        return $response;
    }
}