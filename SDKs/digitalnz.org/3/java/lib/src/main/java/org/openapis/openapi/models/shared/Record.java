/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Record - *NOTE:* There are a lot of fields that are very rarely used in DigitalNZ. For instance there are custom built fields that are only relevant, and only found on specific collections. The schema below focuses on the most common / well populated fields and does not show every possible field available for a single record. 
 * 
 */
public class Record {
    /**
     * There will always be at least 1 human-readable category label in this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    public RecordCategoryEnum[] category;
    public Record withCategory(RecordCategoryEnum[] category) {
        this.category = category;
        return this;
    }
    
    /**
     * In addition to the top level *"display_collection"* above, this field can also contain sub-collections or groupings within the main collection. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collection")
    public String[] collection;
    public Record withCollection(String[] collection) {
        this.collection = collection;
        return this;
    }
    
    /**
     * For historic reasons this is a duplicate of the previous field ("collection").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collection_title")
    public String[] collectionTitle;
    public Record withCollectionTitle(String[] collectionTitle) {
        this.collectionTitle = collectionTitle;
        return this;
    }
    
    /**
     * Name of the organisation(s), institution(s), or individual(s) making content available through DigitalNZ. This metadata will be present on all records and is usually the name of the organisation that has agreed to the DigitalNZ Metadata Contribution Terms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content_partner")
    public String[] contentPartner;
    public Record withContentPartner(String[] contentPartner) {
        this.contentPartner = contentPartner;
        return this;
    }
    
    /**
     * A copyright statement applying to the object referenced by this record. This field may be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("copyright")
    public RecordCopyrightEnum[] copyright;
    public Record withCopyright(RecordCopyrightEnum[] copyright) {
        this.copyright = copyright;
        return this;
    }
    
    /**
     * The date the record was initially harvested into DigitalNZ.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public Record withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The name's of the people, organisations, institutions, services etc. who created the content (eg. the photographer, artist, writer or author).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creator")
    public String[] creator;
    public Record withCreator(String[] creator) {
        this.creator = creator;
        return this;
    }
    
    /**
     * Date information associated with this record (e.g. 1996-01-01T00:00:00.000Z). This field may be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    public String[] date;
    public Record withDate(String[] date) {
        this.date = date;
        return this;
    }
    
    /**
     * Identifiers relating to the content from the content partner's system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dc_identifier")
    public String[] dcIdentifier;
    public Record withDcIdentifier(String[] dcIdentifier) {
        this.dcIdentifier = dcIdentifier;
        return this;
    }
    
    /**
     * Description of the record. Most records have a description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Record withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The single main collection or website that the item belongs to. This metadata will be present on all records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_collection")
    public String displayCollection;
    public Record withDisplayCollection(String displayCollection) {
        this.displayCollection = displayCollection;
        return this;
    }
    
    /**
     * The main Content Partner, for cases when there are more than one. This metadata will be present on all records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_content_partner")
    public String displayContentPartner;
    public Record withDisplayContentPartner(String displayContentPartner) {
        this.displayContentPartner = displayContentPartner;
        return this;
    }
    
    /**
     * Where provided, this field contains a human readable version of the date information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_date")
    public String displayDate;
    public Record withDisplayDate(String displayDate) {
        this.displayDate = displayDate;
        return this;
    }
    
    /**
     * All records have a unique identifier used within the DigitalNZ system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public Record withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * This field will always contain a URL of the item on the content partner's website.  
     * *Note:* Please use the source_url when providing HTML links.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("landing_url")
    public String landingUrl;
    public Record withLandingUrl(String landingUrl) {
        this.landingUrl = landingUrl;
        return this;
    }
    
    /**
     * URL for a larger thumbnail image with a width of up to 800px. NOTE - the API Terms do not extend rights to the use of images accessable throught the *large_thumbnail_url* field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("large_thumbnail_url")
    public String largeThumbnailUrl;
    public Record withLargeThumbnailUrl(String largeThumbnailUrl) {
        this.largeThumbnailUrl = largeThumbnailUrl;
        return this;
    }
    
    /**
     * Geographical location information including latitude and longitude co-ordinates, text based location information, and details about where the location information comes from (eg. "Location provided by Museum of New Zealand Te Papa Tongarewa")
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locations")
    public RecordLocations[] locations;
    public Record withLocations(RecordLocations[] locations) {
        this.locations = locations;
        return this;
    }
    
    /**
     * In most cases this is the same as *display_collection*, but will occasionally a second value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_collection")
    public String[] primaryCollection;
    public Record withPrimaryCollection(String[] primaryCollection) {
        this.primaryCollection = primaryCollection;
        return this;
    }
    
    /**
     * Rights information. Can be a rights statement explaining the rights of the record or a link to a webpage with more detailed rights information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rights")
    public String rights;
    public Record withRights(String rights) {
        this.rights = rights;
        return this;
    }
    
    /**
     * An array of HTTP URLs resolving to a rights statement or terms of use information for the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rights_url")
    public String[] rightsUrl;
    public Record withRightsUrl(String[] rightsUrl) {
        this.rightsUrl = rightsUrl;
        return this;
    }
    
    /**
     * This URL will always be present and provides a redirect to the landing_url. This link should be used as the main click-through to the content. Passing users through this link allows DNZ to count the number of click-throughs, as well as trigger link-checking activities that help clean up stale links in DigitalNZ.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_url")
    public String sourceUrl;
    public Record withSourceUrl(String sourceUrl) {
        this.sourceUrl = sourceUrl;
        return this;
    }
    
    /**
     * Keywords about the content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    public String[] subject;
    public Record withSubject(String[] subject) {
        this.subject = subject;
        return this;
    }
    
    /**
     * URL for a thumbnail image of the content. The size varies depending on what is available but we aim for a width of 250px. This field is mostly populated on records with a 'category' of 'Images', but is also sometimes found on others (eg. "Videos").
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnail_url")
    public String thumbnailUrl;
    public Record withThumbnailUrl(String thumbnailUrl) {
        this.thumbnailUrl = thumbnailUrl;
        return this;
    }
    
    /**
     * Title of the record. All records should have a title.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public Record withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The date the record was last updated/re-harvested into DigitalNZ.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public Record withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * This field is always present and contains human-understandable information about how the item may be used based on its copyright/license.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usage")
    public RecordUsageEnum[] usage;
    public Record withUsage(RecordUsageEnum[] usage) {
        this.usage = usage;
        return this;
    }
    
}
