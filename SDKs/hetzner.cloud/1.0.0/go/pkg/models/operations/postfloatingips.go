// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostFloatingIpsCreateFloatingIPRequestTypeEnum - Floating IP type
type PostFloatingIpsCreateFloatingIPRequestTypeEnum string

const (
	PostFloatingIpsCreateFloatingIPRequestTypeEnumIpv4 PostFloatingIpsCreateFloatingIPRequestTypeEnum = "ipv4"
	PostFloatingIpsCreateFloatingIPRequestTypeEnumIpv6 PostFloatingIpsCreateFloatingIPRequestTypeEnum = "ipv6"
)

func (e *PostFloatingIpsCreateFloatingIPRequestTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = PostFloatingIpsCreateFloatingIPRequestTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFloatingIpsCreateFloatingIPRequestTypeEnum: %s", s)
	}
}

// PostFloatingIpsCreateFloatingIPRequest - The `type` argument is required while `home_location` and `server` are mutually exclusive.
type PostFloatingIpsCreateFloatingIPRequest struct {
	Description *string `json:"description,omitempty"`
	// Home Location (routing is optimized for that Location). Only optional if Server argument is passed.
	HomeLocation *string `json:"home_location,omitempty"`
	// User-defined labels (key-value pairs)
	Labels map[string]interface{} `json:"labels,omitempty"`
	Name   *string                `json:"name,omitempty"`
	// Server to assign the Floating IP to
	Server *int64 `json:"server,omitempty"`
	// Floating IP type
	Type PostFloatingIpsCreateFloatingIPRequestTypeEnum `json:"type"`
}

type PostFloatingIpsRequest struct {
	// The `type` argument is required while `home_location` and `server` are mutually exclusive.
	Request *PostFloatingIpsCreateFloatingIPRequest `request:"mediaType=application/json"`
}

// PostFloatingIps201ApplicationJSONActionError - Error message for the Action if error occurred, otherwise null
type PostFloatingIps201ApplicationJSONActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostFloatingIps201ApplicationJSONActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostFloatingIps201ApplicationJSONActionStatusEnum - Status of the Action
type PostFloatingIps201ApplicationJSONActionStatusEnum string

const (
	PostFloatingIps201ApplicationJSONActionStatusEnumSuccess PostFloatingIps201ApplicationJSONActionStatusEnum = "success"
	PostFloatingIps201ApplicationJSONActionStatusEnumRunning PostFloatingIps201ApplicationJSONActionStatusEnum = "running"
	PostFloatingIps201ApplicationJSONActionStatusEnumError   PostFloatingIps201ApplicationJSONActionStatusEnum = "error"
)

func (e *PostFloatingIps201ApplicationJSONActionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostFloatingIps201ApplicationJSONActionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFloatingIps201ApplicationJSONActionStatusEnum: %s", s)
	}
}

type PostFloatingIps201ApplicationJSONAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostFloatingIps201ApplicationJSONActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostFloatingIps201ApplicationJSONActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostFloatingIps201ApplicationJSONActionStatusEnum `json:"status"`
}

type PostFloatingIps201ApplicationJSONFloatingIPDNSPtr struct {
	// DNS pointer for the specific IP address
	DNSPtr string `json:"dns_ptr"`
	// Single IPv4 or IPv6 address
	IP string `json:"ip"`
}

// PostFloatingIps201ApplicationJSONFloatingIPHomeLocation - Location the Floating IP was created in. Routing is optimized for this Location.
type PostFloatingIps201ApplicationJSONFloatingIPHomeLocation struct {
	// City the Location is closest to
	City string `json:"city"`
	// ISO 3166-1 alpha-2 code of the country the Location resides in
	Country string `json:"country"`
	// Description of the Location
	Description string `json:"description"`
	// ID of the Location
	ID float64 `json:"id"`
	// Latitude of the city closest to the Location
	Latitude float64 `json:"latitude"`
	// Longitude of the city closest to the Location
	Longitude float64 `json:"longitude"`
	// Unique identifier of the Location
	Name string `json:"name"`
	// Name of network zone this Location resides in
	NetworkZone string `json:"network_zone"`
}

// PostFloatingIps201ApplicationJSONFloatingIPProtection - Protection configuration for the Resource
type PostFloatingIps201ApplicationJSONFloatingIPProtection struct {
	// If true, prevents the Resource from being deleted
	Delete bool `json:"delete"`
}

// PostFloatingIps201ApplicationJSONFloatingIPTypeEnum - Type of the Floating IP
type PostFloatingIps201ApplicationJSONFloatingIPTypeEnum string

const (
	PostFloatingIps201ApplicationJSONFloatingIPTypeEnumIpv4 PostFloatingIps201ApplicationJSONFloatingIPTypeEnum = "ipv4"
	PostFloatingIps201ApplicationJSONFloatingIPTypeEnumIpv6 PostFloatingIps201ApplicationJSONFloatingIPTypeEnum = "ipv6"
)

func (e *PostFloatingIps201ApplicationJSONFloatingIPTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = PostFloatingIps201ApplicationJSONFloatingIPTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFloatingIps201ApplicationJSONFloatingIPTypeEnum: %s", s)
	}
}

type PostFloatingIps201ApplicationJSONFloatingIP struct {
	// Whether the IP is blocked
	Blocked bool `json:"blocked"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Description of the Resource
	Description string `json:"description"`
	// Array of reverse DNS entries
	DNSPtr []PostFloatingIps201ApplicationJSONFloatingIPDNSPtr `json:"dns_ptr"`
	// Location the Floating IP was created in. Routing is optimized for this Location.
	HomeLocation PostFloatingIps201ApplicationJSONFloatingIPHomeLocation `json:"home_location"`
	// ID of the Resource
	ID int64 `json:"id"`
	// IP address
	IP string `json:"ip"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Protection configuration for the Resource
	Protection PostFloatingIps201ApplicationJSONFloatingIPProtection `json:"protection"`
	// ID of the Server the Floating IP is assigned to, null if it is not assigned at all
	Server int64 `json:"server"`
	// Type of the Floating IP
	Type PostFloatingIps201ApplicationJSONFloatingIPTypeEnum `json:"type"`
}

// PostFloatingIps201ApplicationJSON - The `floating_ip` key in the reply contains the object that was just created
type PostFloatingIps201ApplicationJSON struct {
	Action     *PostFloatingIps201ApplicationJSONAction    `json:"action,omitempty"`
	FloatingIP PostFloatingIps201ApplicationJSONFloatingIP `json:"floating_ip"`
}

type PostFloatingIpsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `floating_ip` key in the reply contains the object that was just created
	PostFloatingIps201ApplicationJSONObject *PostFloatingIps201ApplicationJSON
}
