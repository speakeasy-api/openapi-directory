"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NHInteriorAvailability:
    
    from_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'exclude': lambda f: f is None }})  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NHInteriorBuy:
    
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})  
    
class NHInteriorCategoryEnum(str, Enum):
    r"""The category of item as shown in the player's inventory."""
    FLOORS = 'Floors'
    WALLPAPER = 'Wallpaper'
    RUGS = 'Rugs'

class NHInteriorColorsEnum(str, Enum):
    r"""(WIP)"""
    AQUA = 'Aqua'
    BEIGE = 'Beige'
    BLACK = 'Black'
    BLUE = 'Blue'
    BROWN = 'Brown'
    COLORFUL = 'Colorful'
    GRAY = 'Gray'
    GREEN = 'Green'
    ORANGE = 'Orange'
    PINK = 'Pink'
    PURPLE = 'Purple'
    RED = 'Red'
    WHITE = 'White'
    YELLOW = 'Yellow'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NHInterior:
    r"""A JSON object describing the interior item."""
    
    availability: Optional[list[NHInteriorAvailability]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availability'), 'exclude': lambda f: f is None }})
    r"""Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details."""  
    buy: Optional[list[NHInteriorBuy]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buy'), 'exclude': lambda f: f is None }})
    r"""An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc.."""  
    category: Optional[NHInteriorCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The category of item as shown in the player's inventory."""  
    colors: Optional[NHInteriorColorsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('colors'), 'exclude': lambda f: f is None }})
    r"""(WIP)"""  
    grid_length: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grid_length'), 'exclude': lambda f: f is None }})
    r"""The number of lengthwise grid spaces this item takes up."""  
    grid_width: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grid_width'), 'exclude': lambda f: f is None }})
    r"""The number of widthwise grid spaces this item takes up."""  
    hha_base: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hha_base'), 'exclude': lambda f: f is None }})
    r"""The base value that the item provides to a player's Happy Home Academy score when placed in their home."""  
    hha_category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hha_category'), 'exclude': lambda f: f is None }})
    r"""The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string."""  
    image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_url'), 'exclude': lambda f: f is None }})
    r"""Image of the interior. dodo.ac is Nookipedia's CDN server."""  
    item_series: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item_series'), 'exclude': lambda f: f is None }})
    r"""The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string."""  
    item_set: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item_set'), 'exclude': lambda f: f is None }})
    r"""The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the interior."""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Any additional miscellaneous information about the item, such as a name change from a past update."""  
    sell: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sell'), 'exclude': lambda f: f is None }})
    r"""The number of Bells the interior can be sold to Nook's store for."""  
    tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag'), 'exclude': lambda f: f is None }})
    r"""The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include \\"Chair\\", \\"Musical Instrument\\", and \\"Mario\\". If the item does not have a tag, this will be an empty string."""  
    themes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('themes'), 'exclude': lambda f: f is None }})
    r"""A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to."""  
    unlocked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unlocked'), 'exclude': lambda f: f is None }})
    r"""Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Link to the respective Nookipedia article."""  
    version_added: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version_added'), 'exclude': lambda f: f is None }})
    r"""The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \\"1.0.0\\"."""  
    