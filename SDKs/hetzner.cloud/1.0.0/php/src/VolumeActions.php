<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class VolumeActions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get all Actions for a Volume
     * 
     * Returns all Action objects for a Volume. You can `sort` the results by using the sort URI parameter, and filter them with the `status` parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVolumesIdActionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVolumesIdActionsResponse
     */
	public function getVolumesIdActions(
        \OpenAPI\OpenAPI\Models\Operations\GetVolumesIdActionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVolumesIdActionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volumes/{id}/actions', \OpenAPI\OpenAPI\Models\Operations\GetVolumesIdActionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVolumesIdActionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVolumesIdActionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetVolumesIdActionsActionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an Action for a Volume
     * 
     * Returns a specific Action for a Volume.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVolumesIdActionsActionIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVolumesIdActionsActionIdResponse
     */
	public function getVolumesIdActionsActionId(
        \OpenAPI\OpenAPI\Models\Operations\GetVolumesIdActionsActionIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVolumesIdActionsActionIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volumes/{id}/actions/{action_id}', \OpenAPI\OpenAPI\Models\Operations\GetVolumesIdActionsActionIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVolumesIdActionsActionIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetVolumesIdActionsActionIdActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Attach Volume to a Server
     * 
     * Attaches a Volume to a Server. Works only if the Server is in the same Location as the Volume.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsAttachRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsAttachResponse
     */
	public function postVolumesIdActionsAttach(
        \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsAttachRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsAttachResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volumes/{id}/actions/attach', \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsAttachRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsAttachResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsAttachActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change Volume Protection
     * 
     * Changes the protection configuration of a Volume.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsChangeProtectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsChangeProtectionResponse
     */
	public function postVolumesIdActionsChangeProtection(
        \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsChangeProtectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsChangeProtectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volumes/{id}/actions/change_protection', \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsChangeProtectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsChangeProtectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsChangeProtectionActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Detach Volume
     * 
     * Detaches a Volume from the Server itâ€™s attached to. You may attach it to a Server again at a later time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsDetachRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsDetachResponse
     */
	public function postVolumesIdActionsDetach(
        \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsDetachRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsDetachResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volumes/{id}/actions/detach', \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsDetachRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsDetachResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsDetachActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resize Volume
     * 
     * Changes the size of a Volume. Note that downsizing a Volume is not possible.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsResizeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsResizeResponse
     */
	public function postVolumesIdActionsResize(
        \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsResizeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsResizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volumes/{id}/actions/resize', \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsResizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsResizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostVolumesIdActionsResizeActionResponse', 'json');
            }
        }

        return $response;
    }
}