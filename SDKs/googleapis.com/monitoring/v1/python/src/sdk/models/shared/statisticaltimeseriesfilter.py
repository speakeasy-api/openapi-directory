"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class StatisticalTimeSeriesFilterRankingMethodEnum(str, Enum):
    r"""rankingMethod is applied to a set of time series, and then the produced value for each individual time series is used to compare a given time series to others. These are methods that cannot be applied stream-by-stream, but rather require the full context of a request to evaluate time series."""
    METHOD_UNSPECIFIED = 'METHOD_UNSPECIFIED'
    METHOD_CLUSTER_OUTLIER = 'METHOD_CLUSTER_OUTLIER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StatisticalTimeSeriesFilter:
    r"""A filter that ranks streams based on their statistical relation to other streams in a request. Note: This field is deprecated and completely ignored by the API."""
    
    num_time_series: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numTimeSeries'), 'exclude': lambda f: f is None }})
    r"""How many time series to output."""  
    ranking_method: Optional[StatisticalTimeSeriesFilterRankingMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rankingMethod'), 'exclude': lambda f: f is None }})
    r"""rankingMethod is applied to a set of time series, and then the produced value for each individual time series is used to compare a given time series to others. These are methods that cannot be applied stream-by-stream, but rather require the full context of a request to evaluate time series."""  
    