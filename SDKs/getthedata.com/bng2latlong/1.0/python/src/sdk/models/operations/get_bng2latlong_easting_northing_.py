"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetBng2latlongEastingNorthingRequest:
    
    easting: int = dataclasses.field(metadata={'path_param': { 'field_name': 'easting', 'style': 'simple', 'explode': False }})
    r"""An OSGB36 (British National Grid) easting."""  
    northing: int = dataclasses.field(metadata={'path_param': { 'field_name': 'northing', 'style': 'simple', 'explode': False }})
    r"""An OSGB36 (British National Grid) northing."""  
    
class GetBng2latlongEastingNorthing200ApplicationJSONStatusEnum(str, Enum):
    OK = 'ok'
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBng2latlongEastingNorthing200ApplicationJSON:
    r"""A JSON object containing the original easting and northing, and the converted latitude and longitude."""
    
    easting: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('easting'), 'exclude': lambda f: f is None }})  
    error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})  
    latitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude'), 'exclude': lambda f: f is None }})  
    longitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude'), 'exclude': lambda f: f is None }})  
    northing: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('northing'), 'exclude': lambda f: f is None }})  
    status: Optional[GetBng2latlongEastingNorthing200ApplicationJSONStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetBng2latlongEastingNorthingResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_bng2latlong_easting_northing_200_application_json_object: Optional[GetBng2latlongEastingNorthing200ApplicationJSON] = dataclasses.field(default=None)
    r"""A JSON object containing the original easting and northing, and the converted latitude and longitude."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    