// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDPayslipsJSONSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnum = "permanent"
)

func (e *PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2Accounting struct {
	AccountedOn *string                                                                   `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                   `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2File struct {
	Content64Encoded *string `json:"Content64Encoded,omitempty"`
	Name             *string `json:"Name,omitempty"`
}

type PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2 struct {
	Accounting            *PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2Accounting `json:"Accounting,omitempty"`
	Author                *string                                                       `json:"Author,omitempty"`
	Begin                 *string                                                       `json:"Begin,omitempty"`
	Code                  *string                                                       `json:"Code,omitempty"`
	Comment               *string                                                       `json:"Comment,omitempty"`
	Date                  *string                                                       `json:"Date,omitempty"`
	EmployeeContributions *float32                                                      `json:"EmployeeContributions,omitempty"`
	EmployerContributions *float32                                                      `json:"EmployerContributions,omitempty"`
	End                   *string                                                       `json:"End,omitempty"`
	File                  PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2File        `json:"File"`
	FixedGrossAmount      *float32                                                      `json:"FixedGrossAmount,omitempty"`
	NetAmount             *float32                                                      `json:"NetAmount,omitempty"`
	Title                 string                                                        `json:"Title"`
	TotalGrossAmount      *float32                                                      `json:"TotalGrossAmount,omitempty"`
	Vacation              *float32                                                      `json:"Vacation,omitempty"`
	VariableGrossAmount   *float32                                                      `json:"VariableGrossAmount,omitempty"`
}

type PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON1 struct {
	Begin                 *string  `json:"Begin,omitempty"`
	DocumentID            string   `json:"DocumentId"`
	EmployeeContributions *float32 `json:"EmployeeContributions,omitempty"`
	EmployerContributions *float32 `json:"EmployerContributions,omitempty"`
	End                   *string  `json:"End,omitempty"`
	FixedGrossAmount      *float32 `json:"FixedGrossAmount,omitempty"`
	NetAmount             *float32 `json:"NetAmount,omitempty"`
	TotalGrossAmount      *float32 `json:"TotalGrossAmount,omitempty"`
	Vacation              *float32 `json:"Vacation,omitempty"`
	VariableGrossAmount   *float32 `json:"VariableGrossAmount,omitempty"`
}

type PostSpacesSpaceIDFoldersIDPayslipsApplicationJSONType string

const (
	PostSpacesSpaceIDFoldersIDPayslipsApplicationJSONTypePostSpacesSpaceIDFoldersIDPayslipsApplicationJSON1 PostSpacesSpaceIDFoldersIDPayslipsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/payslips_ApplicationJSON_1"
	PostSpacesSpaceIDFoldersIDPayslipsApplicationJSONTypePostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2 PostSpacesSpaceIDFoldersIDPayslipsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/payslips_ApplicationJSON_2"
)

type PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON struct {
	PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON1 *PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON1
	PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2 *PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2

	Type PostSpacesSpaceIDFoldersIDPayslipsApplicationJSONType
}

func CreatePostSpacesSpaceIDFoldersIDPayslipsApplicationJSONPostSpacesSpaceIDFoldersIDPayslipsApplicationJSON1(postSpacesSpaceIDFoldersIDPayslipsApplicationJSON1 PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON1) PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDPayslipsApplicationJSONTypePostSpacesSpaceIDFoldersIDPayslipsApplicationJSON1

	return PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON{
		PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON1: &postSpacesSpaceIDFoldersIDPayslipsApplicationJSON1,
		Type: typ,
	}
}

func CreatePostSpacesSpaceIDFoldersIDPayslipsApplicationJSONPostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2(postSpacesSpaceIDFoldersIDPayslipsApplicationJSON2 PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2) PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDPayslipsApplicationJSONTypePostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2

	return PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON{
		PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2: &postSpacesSpaceIDFoldersIDPayslipsApplicationJSON2,
		Type: typ,
	}
}

func (u *PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postSpacesSpaceIDFoldersIDPayslipsApplicationJSON1 := new(PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDPayslipsApplicationJSON1); err == nil {
		u.PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON1 = postSpacesSpaceIDFoldersIDPayslipsApplicationJSON1
		u.Type = PostSpacesSpaceIDFoldersIDPayslipsApplicationJSONTypePostSpacesSpaceIDFoldersIDPayslipsApplicationJSON1
		return nil
	}

	postSpacesSpaceIDFoldersIDPayslipsApplicationJSON2 := new(PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDPayslipsApplicationJSON2); err == nil {
		u.PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2 = postSpacesSpaceIDFoldersIDPayslipsApplicationJSON2
		u.Type = PostSpacesSpaceIDFoldersIDPayslipsApplicationJSONTypePostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON1 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON1)
	}

	if u.PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2)
	}

	return nil, nil
}

type PostSpacesSpaceIDFoldersIDPayslipsJSONRequest struct {
	// Payslip to add (either DocumentId either (File,Name,Content64Encoded,Title) is mandatory)
	RequestBody PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON `request:"mediaType=application/json"`
	// Id of the folder employee
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDPayslipsJSON201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDPayslipsJSON201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDPayslipsJSONResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDPayslipsJSON201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDPayslipsJSON201ApplicationJSON
}
