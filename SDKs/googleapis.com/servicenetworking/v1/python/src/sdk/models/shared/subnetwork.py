"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import secondaryiprange as shared_secondaryiprange
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Subnetwork:
    r"""Represents a subnet that was created or discovered by a private access management service."""
    
    ip_cidr_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipCidrRange'), 'exclude': lambda f: f is None }})
    r"""Subnetwork CIDR range in `10.x.x.x/y` format."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Subnetwork name. See https://cloud.google.com/compute/docs/vpc/"""  
    network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""In the Shared VPC host project, the VPC network that's peered with the consumer network. For example: `projects/1234321/global/networks/host-network`"""  
    outside_allocation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outsideAllocation'), 'exclude': lambda f: f is None }})
    r"""This is a discovered subnet that is not within the current consumer allocated ranges."""  
    region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region'), 'exclude': lambda f: f is None }})
    r"""GCP region where the subnetwork is located."""  
    secondary_ip_ranges: Optional[list[shared_secondaryiprange.SecondaryIPRange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondaryIpRanges'), 'exclude': lambda f: f is None }})
    r"""List of secondary IP ranges in this subnetwork."""  
    