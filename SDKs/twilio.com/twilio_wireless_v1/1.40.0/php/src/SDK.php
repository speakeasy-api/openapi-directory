<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://wireless.twilio.com',
	];
	
	public const CREATE_COMMAND_SERVERS = [
		'https://wireless.twilio.com',
	];
	
	public const CREATE_RATE_PLAN_SERVERS = [
		'https://wireless.twilio.com',
	];
	
	public const DELETE_COMMAND_SERVERS = [
		'https://wireless.twilio.com',
	];
	
	public const DELETE_RATE_PLAN_SERVERS = [
		'https://wireless.twilio.com',
	];
	
	public const DELETE_SIM_SERVERS = [
		'https://wireless.twilio.com',
	];
	
	public const FETCH_COMMAND_SERVERS = [
		'https://wireless.twilio.com',
	];
	
	public const FETCH_RATE_PLAN_SERVERS = [
		'https://wireless.twilio.com',
	];
	
	public const FETCH_SIM_SERVERS = [
		'https://wireless.twilio.com',
	];
	
	public const LIST_ACCOUNT_USAGE_RECORD_SERVERS = [
		'https://wireless.twilio.com',
	];
	
	public const LIST_COMMAND_SERVERS = [
		'https://wireless.twilio.com',
	];
	
	public const LIST_DATA_SESSION_SERVERS = [
		'https://wireless.twilio.com',
	];
	
	public const LIST_RATE_PLAN_SERVERS = [
		'https://wireless.twilio.com',
	];
	
	public const LIST_SIM_SERVERS = [
		'https://wireless.twilio.com',
	];
	
	public const LIST_USAGE_RECORD_SERVERS = [
		'https://wireless.twilio.com',
	];
	
	public const UPDATE_RATE_PLAN_SERVERS = [
		'https://wireless.twilio.com',
	];
	
	public const UPDATE_SIM_SERVERS = [
		'https://wireless.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Send a Command to a Sim.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCommandCreateCommandRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCommandSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCommandResponse
     */
	public function createCommand(
        \OpenAPI\OpenAPI\Models\Operations\CreateCommandCreateCommandRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCommandSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCommandResponse
    {
        $baseUrl = SDK::CREATE_COMMAND_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Commands');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCommandResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wirelessV1Command = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WirelessV1Command', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createRatePlan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateRatePlanCreateRatePlanRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateRatePlanSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateRatePlanResponse
     */
	public function createRatePlan(
        \OpenAPI\OpenAPI\Models\Operations\CreateRatePlanCreateRatePlanRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateRatePlanSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateRatePlanResponse
    {
        $baseUrl = SDK::CREATE_RATE_PLAN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/RatePlans');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateRatePlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wirelessV1RatePlan = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WirelessV1RatePlan', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a Command instance from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCommandRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCommandSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCommandResponse
     */
	public function deleteCommand(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCommandRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCommandSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCommandResponse
    {
        $baseUrl = SDK::DELETE_COMMAND_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Commands/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteCommandRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCommandResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteRatePlan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRatePlanRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRatePlanSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRatePlanResponse
     */
	public function deleteRatePlan(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRatePlanRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteRatePlanSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRatePlanResponse
    {
        $baseUrl = SDK::DELETE_RATE_PLAN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/RatePlans/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteRatePlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRatePlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a Sim resource on your Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSimRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSimSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSimResponse
     */
	public function deleteSim(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSimRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSimSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSimResponse
    {
        $baseUrl = SDK::DELETE_SIM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Sims/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteSimRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Fetch a Command instance from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCommandRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCommandSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCommandResponse
     */
	public function fetchCommand(
        \OpenAPI\OpenAPI\Models\Operations\FetchCommandRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCommandSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCommandResponse
    {
        $baseUrl = SDK::FETCH_COMMAND_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Commands/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchCommandRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCommandResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wirelessV1Command = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WirelessV1Command', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchRatePlan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRatePlanRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRatePlanSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRatePlanResponse
     */
	public function fetchRatePlan(
        \OpenAPI\OpenAPI\Models\Operations\FetchRatePlanRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRatePlanSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRatePlanResponse
    {
        $baseUrl = SDK::FETCH_RATE_PLAN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/RatePlans/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchRatePlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRatePlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wirelessV1RatePlan = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WirelessV1RatePlan', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a Sim resource on your Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSimRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSimSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSimResponse
     */
	public function fetchSim(
        \OpenAPI\OpenAPI\Models\Operations\FetchSimRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSimSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSimResponse
    {
        $baseUrl = SDK::FETCH_SIM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Sims/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSimRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wirelessV1Sim = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WirelessV1Sim', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listAccountUsageRecord
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAccountUsageRecordRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAccountUsageRecordSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAccountUsageRecordResponse
     */
	public function listAccountUsageRecord(
        \OpenAPI\OpenAPI\Models\Operations\ListAccountUsageRecordRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAccountUsageRecordSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAccountUsageRecordResponse
    {
        $baseUrl = SDK::LIST_ACCOUNT_USAGE_RECORD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/UsageRecords');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAccountUsageRecordRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAccountUsageRecordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccountUsageRecordResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAccountUsageRecordListAccountUsageRecordResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Commands from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCommandRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCommandSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCommandResponse
     */
	public function listCommand(
        \OpenAPI\OpenAPI\Models\Operations\ListCommandRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCommandSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCommandResponse
    {
        $baseUrl = SDK::LIST_COMMAND_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Commands');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCommandRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCommandResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCommandResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCommandListCommandResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listDataSession
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDataSessionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDataSessionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDataSessionResponse
     */
	public function listDataSession(
        \OpenAPI\OpenAPI\Models\Operations\ListDataSessionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDataSessionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDataSessionResponse
    {
        $baseUrl = SDK::LIST_DATA_SESSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Sims/{SimSid}/DataSessions', \OpenAPI\OpenAPI\Models\Operations\ListDataSessionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDataSessionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDataSessionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDataSessionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListDataSessionListDataSessionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listRatePlan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRatePlanRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRatePlanSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListRatePlanResponse
     */
	public function listRatePlan(
        \OpenAPI\OpenAPI\Models\Operations\ListRatePlanRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListRatePlanSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListRatePlanResponse
    {
        $baseUrl = SDK::LIST_RATE_PLAN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/RatePlans');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListRatePlanRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListRatePlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRatePlanResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListRatePlanListRatePlanResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Sim resources on your Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSimRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSimSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSimResponse
     */
	public function listSim(
        \OpenAPI\OpenAPI\Models\Operations\ListSimRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSimSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSimResponse
    {
        $baseUrl = SDK::LIST_SIM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Sims');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSimRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSimResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSimListSimResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUsageRecord
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordResponse
     */
	public function listUsageRecord(
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordResponse
    {
        $baseUrl = SDK::LIST_USAGE_RECORD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Sims/{SimSid}/UsageRecords', \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUsageRecordRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsageRecordResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUsageRecordListUsageRecordResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateRatePlan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRatePlanRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRatePlanSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateRatePlanResponse
     */
	public function updateRatePlan(
        \OpenAPI\OpenAPI\Models\Operations\UpdateRatePlanRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateRatePlanSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateRatePlanResponse
    {
        $baseUrl = SDK::UPDATE_RATE_PLAN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/RatePlans/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateRatePlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateRatePlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wirelessV1RatePlan = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WirelessV1RatePlan', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the given properties of a Sim resource on your Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSimRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSimSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSimResponse
     */
	public function updateSim(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSimRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSimSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSimResponse
    {
        $baseUrl = SDK::UPDATE_SIM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Sims/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateSimRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wirelessV1Sim = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WirelessV1Sim', 'json');
            }
        }

        return $response;
    }
}