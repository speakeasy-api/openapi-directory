"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var addresstypes_1 = require("./addresstypes");
var businessnamelifecyclestates_1 = require("./businessnamelifecyclestates");
var businessnames_1 = require("./businessnames");
var electronicaddresstypes_1 = require("./electronicaddresstypes");
var genders_1 = require("./genders");
var individuals_1 = require("./individuals");
var individualsaddresses_1 = require("./individualsaddresses");
var individualsbusinessnames_1 = require("./individualsbusinessnames");
var individualselectronicaddresses_1 = require("./individualselectronicaddresses");
var individualslicenses_1 = require("./individualslicenses");
var individualsroles_1 = require("./individualsroles");
var legalentitytypes_1 = require("./legalentitytypes");
var licenselifecyclestates_1 = require("./licenselifecyclestates");
var licenses_1 = require("./licenses");
var licensetypes_1 = require("./licensetypes");
var namedirections_1 = require("./namedirections");
var nameprefixes_1 = require("./nameprefixes");
var nametypes_1 = require("./nametypes");
var organisations_1 = require("./organisations");
var organisationsaddresses_1 = require("./organisationsaddresses");
var organisationsbusinessnames_1 = require("./organisationsbusinessnames");
var organisationselectronicaddresses_1 = require("./organisationselectronicaddresses");
var organisationslicenses_1 = require("./organisationslicenses");
var organisationsroles_1 = require("./organisationsroles");
var registeredidentifiertypes_1 = require("./registeredidentifiertypes");
var roles_1 = require("./roles");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    /**
     * Production API Server
     */
    "//api.abr.ato.gov.au/",
    /**
     * Sandbox API Server
     */
    "//api.sandbox.abr.ato.gov.au/",
];
/**
 * # Introduction
 *
 * @remarks
 * The Business Registries API is built on HTTP. The API is RESTful. It has predictable resource URIs.
 *
 *   The API is documented in <a target="_blank" href="https://github.com/OAI/OpenAPI-Specification">OpenAPI</a> format.
 *   In addition to the standard OpenAPI syntax we use a few
 *   <a target="_blank" href="https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md">vendor extensions</a>.
 *
 * # Overview
 * The following sections describe the resources that make up the Business Registries REST API.
 * ## Current Version
 * By default, all requests to https://api.abr.ato.gov.au receive the `v1` version of the REST API. We encourage you to explicitly request this version via the `Accept` header.
 *
 *     Accept: application/vnd.abr-ato.v1+json
 *
 * ## Schema
 * All API access is over HTTPS, and accessed from https://api.abr.ato.gov.au. All data is sent and received as JSON. Blank fields are included.
 *
 *   All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
 *
 *     YYYY-MM-DD
 *
 *   For example: `2017-07-01` (the 1st of July 2017)
 *
 *   All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
 *
 *     YYYY-MM-DDTHH:MM:SSZ
 *
 *   For example: `2017-07-01T11:05:06+10:00`
 *
 * ## Timezones
 * Some requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls.
 * ### Explicitly provide an ISO 8601 timestamp with timezone information
 * For API calls that allow for a timestamp to be specified, we use that exact timestamp.
 *
 *   For example: `2017-07-01T11:05:06+10:00`
 *
 * ## Pagination
 * Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.
 *
 *   For example:
 *
 *     Link: <https://api.abr.ato.gov.au/individuals?page=2>; rel="next",
 *           <https://api.abr.ato.gov.au/individuals?page=34>; rel="last"
 *
 * `rel="next"` states that the next page is `page=2`. This makes sense, since by default, all paginated queries start at page `1`. `rel="last"` provides some more information, stating that the last page of results is on `page 34`. Accordingly, we have 33 more pages of information that we can consume.
 * ## Parameters
 * Many API methods take optional parameters:
 *
 *     GET /individuals/1234/addresses/?addressType='Mailing'
 *
 * In this example, the '1234' value is provided for the `:partyId` parameter in the path while `:addressType` is passed in the query string.
 * For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of 'application/json'.
 * ## Metadata
 * The API provides **metadata services** that you can use to discover information about the classifcation schemes and values used by the Registry.
 *
 *   For example:
 *
 *     GET /classifications/roles
 *
 *   Sample response:
 *
 *     [
 *       {
 *         "id": "123e4567-e89b-12d3-a456-426655440001",
 *         "role": "Director",
 *         "roleDescription": "An individual responsible for managing a company's ...",
 *         "relationship": "Directorship",
 *         "reciprocalRole": "Company",
 *         "reciprocalRoleDescription": "An incorporated legal entity."
 *       },
 *       {
 *         ...
 *       }
 *     ]
 *
 * ## Root Endpoint
 * You can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:
 *
 *     curl https://api.abr.ato.gov.au
 *
 * ## Authentication
 * The Business Registries API supports API Key authentication.
 *
 *   When you sign up for an account, you are given your first API key. You can generate additional API keys, and delete
 *   API keys (as you may need to rotate your keys in the future). You authenticate to the Business Registries API by
 *   providing your secret key in the request header.
 *
 *   **Note:** Some requests will return `404 Not Found`, instead of `403 Permission Denied`. This is to prevent the
 *   accidental leakage of information to unauthorised users.
 *
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.addressTypes = new addresstypes_1.AddressTypes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.businessNameLifecycleStates = new businessnamelifecyclestates_1.BusinessNameLifecycleStates(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.businessNames = new businessnames_1.BusinessNames(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.electronicAddressTypes = new electronicaddresstypes_1.ElectronicAddressTypes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.genders = new genders_1.Genders(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.individuals = new individuals_1.Individuals(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.individualsAddresses = new individualsaddresses_1.IndividualsAddresses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.individualsBusinessNames = new individualsbusinessnames_1.IndividualsBusinessNames(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.individualsElectronicAddresses = new individualselectronicaddresses_1.IndividualsElectronicAddresses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.individualsLicenses = new individualslicenses_1.IndividualsLicenses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.individualsRoles = new individualsroles_1.IndividualsRoles(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.legalEntityTypes = new legalentitytypes_1.LegalEntityTypes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.licenseLifecycleStates = new licenselifecyclestates_1.LicenseLifecycleStates(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.licenseTypes = new licensetypes_1.LicenseTypes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.licenses = new licenses_1.Licenses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.nameDirections = new namedirections_1.NameDirections(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.namePrefixes = new nameprefixes_1.NamePrefixes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.nameTypes = new nametypes_1.NameTypes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.organisations = new organisations_1.Organisations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.organisationsAddresses = new organisationsaddresses_1.OrganisationsAddresses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.organisationsBusinessNames = new organisationsbusinessnames_1.OrganisationsBusinessNames(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.organisationsElectronicAddresses =
            new organisationselectronicaddresses_1.OrganisationsElectronicAddresses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.organisationsLicenses = new organisationslicenses_1.OrganisationsLicenses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.organisationsRoles = new organisationsroles_1.OrganisationsRoles(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.registeredIdentifierTypes = new registeredidentifiertypes_1.RegisteredIdentifierTypes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.roles = new roles_1.Roles(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
