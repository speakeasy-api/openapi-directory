// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetPotTransactionsSecurity struct {
	APISecretKey string `security:"scheme,type=apiKey,subtype=header,name=x-api-key"`
}

// GetPotTransactionsSortEnum - Sorting order; results are sorted by creation time.
type GetPotTransactionsSortEnum string

const (
	GetPotTransactionsSortEnumAsc  GetPotTransactionsSortEnum = "asc"
	GetPotTransactionsSortEnumDesc GetPotTransactionsSortEnum = "desc"
)

func (e *GetPotTransactionsSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asc":
		fallthrough
	case "desc":
		*e = GetPotTransactionsSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPotTransactionsSortEnum: %s", s)
	}
}

type GetPotTransactionsRequest struct {
	// From timestamp for the query. This must be in ISO format. Eg. 2021-08-12T07:54:47.011Z. If not present the from is set to 2000-01-01T00:00:00.000Z
	From *string `queryParam:"style=form,explode=true,name=from"`
	// Page number for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time.
	PageNumber *string `queryParam:"style=form,explode=true,name=page_number"`
	// Page size for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time.
	PageSize *string `queryParam:"style=form,explode=true,name=page_size"`
	// Pot Id
	PotID string `pathParam:"style=simple,explode=false,name=pot_id"`
	// Sorting order; results are sorted by creation time.
	Sort *GetPotTransactionsSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Sub transaction type of the transactions to be retrieved from the API
	SubTransactionType *string `queryParam:"style=form,explode=true,name=sub_transaction_type"`
	// To timestamp for the query. This must be in ISO format. Eg. 2021-08-12T07:54:47.011Z. If not present the to is set to current time.
	To *string `queryParam:"style=form,explode=true,name=to"`
	// ApiSecretKey
	XAPIKey string `header:"style=simple,explode=false,name=x-api-key"`
}

// GetPotTransactions500ApplicationJSON - System error. Retry later. If the error persist, contact WOS support
type GetPotTransactions500ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetPotTransactions429ApplicationJSON - You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
type GetPotTransactions429ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetPotTransactions404ApplicationJSON - The specified resource was not found
type GetPotTransactions404ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetPotTransactions403ApplicationJSON - Your authentication information is missing or invalid. Please check the keys are properly set and its correct
type GetPotTransactions403ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetPotTransactions401ApplicationJSON - You do not have permissions to access this resource.
type GetPotTransactions401ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetPotTransactions200ApplicationJSONTransactionsDirectionEnum - in = cash payment or pending buy transaction, out= cash out or pending sell transaction.
type GetPotTransactions200ApplicationJSONTransactionsDirectionEnum string

const (
	GetPotTransactions200ApplicationJSONTransactionsDirectionEnumIn  GetPotTransactions200ApplicationJSONTransactionsDirectionEnum = "in"
	GetPotTransactions200ApplicationJSONTransactionsDirectionEnumOut GetPotTransactions200ApplicationJSONTransactionsDirectionEnum = "out"
)

func (e *GetPotTransactions200ApplicationJSONTransactionsDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "in":
		fallthrough
	case "out":
		*e = GetPotTransactions200ApplicationJSONTransactionsDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPotTransactions200ApplicationJSONTransactionsDirectionEnum: %s", s)
	}
}

// GetPotTransactions200ApplicationJSONTransactionsOriginEnum - Origin of the transaction
type GetPotTransactions200ApplicationJSONTransactionsOriginEnum string

const (
	GetPotTransactions200ApplicationJSONTransactionsOriginEnumAPI        GetPotTransactions200ApplicationJSONTransactionsOriginEnum = "api"
	GetPotTransactions200ApplicationJSONTransactionsOriginEnumAdminUI    GetPotTransactions200ApplicationJSONTransactionsOriginEnum = "admin_ui"
	GetPotTransactions200ApplicationJSONTransactionsOriginEnumFileUpload GetPotTransactions200ApplicationJSONTransactionsOriginEnum = "file_upload"
	GetPotTransactions200ApplicationJSONTransactionsOriginEnumSystem     GetPotTransactions200ApplicationJSONTransactionsOriginEnum = "system"
)

func (e *GetPotTransactions200ApplicationJSONTransactionsOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "api":
		fallthrough
	case "admin_ui":
		fallthrough
	case "file_upload":
		fallthrough
	case "system":
		*e = GetPotTransactions200ApplicationJSONTransactionsOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPotTransactions200ApplicationJSONTransactionsOriginEnum: %s", s)
	}
}

// GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum - Primary transaction type
type GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum string

const (
	GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnumFees             GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Fees"
	GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnumBuy              GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Buy"
	GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnumSell             GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Sell"
	GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnumTransfers        GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Transfers"
	GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnumIncome           GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Income"
	GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnumTax              GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Tax"
	GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnumContribution     GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Contribution"
	GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnumWithdrawal       GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Withdrawal"
	GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnumCorporateActions GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Corporate actions"
)

func (e *GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Fees":
		fallthrough
	case "Buy":
		fallthrough
	case "Sell":
		fallthrough
	case "Transfers":
		fallthrough
	case "Income":
		fallthrough
	case "Tax":
		fallthrough
	case "Contribution":
		fallthrough
	case "Withdrawal":
		fallthrough
	case "Corporate actions":
		*e = GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum: %s", s)
	}
}

// GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum - Sub transaction type
type GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum string

const (
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumDividendReinvestment                     GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Dividend Reinvestment"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumInterestReinvestment                     GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Interest Reinvestment"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumReinvestment                             GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Reinvestment"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumBuy                                      GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Buy"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumSellCancel                               GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Sell Cancel"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumSwitchBuy                                GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Switch Buy"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumSell                                     GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Sell"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumBuyCancel                                GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Buy Cancel"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumSwitchSell                               GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Switch Sell"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumLumpSum                                  GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Lump sum"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumEmployerContribution                     GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Employer contribution"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumEmployeeContribution                     GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Employee contribution"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumRegularContribution                      GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Regular contribution"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumPaymentInForFees                         GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Payment in for fees"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumInternalTransferCashIn                   GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Internal Transfer - Cash In"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumInternalTransferStockIn                  GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Internal Transfer - Stock In"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumInternalTransferCashOut                  GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Internal Transfer - Cash Out"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumInternalTransferStockOut                 GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Internal Transfer - Stock Out"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumStockTransferIn                          GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Stock Transfer In"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumCashTransferIn                           GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Cash Transfer In"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumStockTransferOut                         GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Stock Transfer Out"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumCashTransferOut                          GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Cash Transfer Out"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumCommission                               GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Commission"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumAncillaryFee                             GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Ancillary fee"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumManagementFee                            GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Management fee"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumFeeCredit                                GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fee credit"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumFeeRebate                                GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fee rebate"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumAdvisorOngoingFee                        GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Advisor ongoing fee"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumOneOffAdvisorFee                         GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "One-off advisor fee"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumCommissionRebate                         GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Commission rebate"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumCustodyFees                              GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Custody fees"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumServiceFees                              GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Service fees"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumProductAdministrationFees                GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Product administration fees"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumPortfolioManagementFees                  GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Portfolio management fees"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumPlatformFees                             GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Platform fees"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumDividends                                GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Dividends"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumDistributions                            GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Distributions"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumInterest                                 GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Interest"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumOtherIncome                              GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Other income"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumTakeoversMergersAndNameChangesCreate     GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Takeovers, Mergers & Name Changes - Create"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumTakeoversMergersAndNameChangesExtinguish GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Takeovers, Mergers & Name Changes - Extinguish"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumRightsExpiry                             GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Rights Expiry"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumRightsExercise                           GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Rights Exercise"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumWarrantExercise                          GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Warrant Exercise"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumFixedIncomeMaturityReceiveCapital        GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fixed Income Maturity - Receive Capital"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumFixedIncomeMaturityExtinguishBondUnits   GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fixed Income Maturity - Extinguish Bond Units"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumFundMergerCreateNewFundUnits             GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fund Merger - Create New Fund Units"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumFundMergerExtinguishOldFundUnits         GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fund Merger - Extinguish Old Fund Units"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumRightsIssue                              GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Rights Issue"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumStockDividend                            GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Stock Dividend"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumSpinOff                                  GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Spin-Off"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumWarrantIssue                             GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Warrant Issue"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumStockSplit                               GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Stock Split"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumFeeTax                                   GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fee Tax"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumTaxRelief                                GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Tax Relief"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumGst                                      GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "GST"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumHst                                      GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "HST"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumPst                                      GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "PST"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumQst                                      GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "QST"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumWithholdingTax                           GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Withholding Tax"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumNonResidentTax                           GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Non-resident Tax"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumPenalty                                  GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Penalty"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumContributionRefund                       GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Contribution Refund"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumIncomeWithdrawal                         GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Income Withdrawal"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumReversal                                 GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Reversal"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumWithdrawal                               GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Withdrawal"
	GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnumMiscellaneousCorporateActionExercise     GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum = "Miscellaneous Corporate Action Exercise"
)

func (e *GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Dividend Reinvestment":
		fallthrough
	case "Interest Reinvestment":
		fallthrough
	case "Reinvestment":
		fallthrough
	case "Buy":
		fallthrough
	case "Sell Cancel":
		fallthrough
	case "Switch Buy":
		fallthrough
	case "Sell":
		fallthrough
	case "Buy Cancel":
		fallthrough
	case "Switch Sell":
		fallthrough
	case "Lump sum":
		fallthrough
	case "Employer contribution":
		fallthrough
	case "Employee contribution":
		fallthrough
	case "Regular contribution":
		fallthrough
	case "Payment in for fees":
		fallthrough
	case "Internal Transfer - Cash In":
		fallthrough
	case "Internal Transfer - Stock In":
		fallthrough
	case "Internal Transfer - Cash Out":
		fallthrough
	case "Internal Transfer - Stock Out":
		fallthrough
	case "Stock Transfer In":
		fallthrough
	case "Cash Transfer In":
		fallthrough
	case "Stock Transfer Out":
		fallthrough
	case "Cash Transfer Out":
		fallthrough
	case "Commission":
		fallthrough
	case "Ancillary fee":
		fallthrough
	case "Management fee":
		fallthrough
	case "Fee credit":
		fallthrough
	case "Fee rebate":
		fallthrough
	case "Advisor ongoing fee":
		fallthrough
	case "One-off advisor fee":
		fallthrough
	case "Commission rebate":
		fallthrough
	case "Custody fees":
		fallthrough
	case "Service fees":
		fallthrough
	case "Product administration fees":
		fallthrough
	case "Portfolio management fees":
		fallthrough
	case "Platform fees":
		fallthrough
	case "Dividends":
		fallthrough
	case "Distributions":
		fallthrough
	case "Interest":
		fallthrough
	case "Other income":
		fallthrough
	case "Takeovers, Mergers & Name Changes - Create":
		fallthrough
	case "Takeovers, Mergers & Name Changes - Extinguish":
		fallthrough
	case "Rights Expiry":
		fallthrough
	case "Rights Exercise":
		fallthrough
	case "Warrant Exercise":
		fallthrough
	case "Fixed Income Maturity - Receive Capital":
		fallthrough
	case "Fixed Income Maturity - Extinguish Bond Units":
		fallthrough
	case "Fund Merger - Create New Fund Units":
		fallthrough
	case "Fund Merger - Extinguish Old Fund Units":
		fallthrough
	case "Rights Issue":
		fallthrough
	case "Stock Dividend":
		fallthrough
	case "Spin-Off":
		fallthrough
	case "Warrant Issue":
		fallthrough
	case "Stock Split":
		fallthrough
	case "Fee Tax":
		fallthrough
	case "Tax Relief":
		fallthrough
	case "GST":
		fallthrough
	case "HST":
		fallthrough
	case "PST":
		fallthrough
	case "QST":
		fallthrough
	case "Withholding Tax":
		fallthrough
	case "Non-resident Tax":
		fallthrough
	case "Penalty":
		fallthrough
	case "Contribution Refund":
		fallthrough
	case "Income Withdrawal":
		fallthrough
	case "Reversal":
		fallthrough
	case "Withdrawal":
		fallthrough
	case "Miscellaneous Corporate Action Exercise":
		*e = GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum: %s", s)
	}
}

// GetPotTransactions200ApplicationJSONTransactionsSubTypeEnum - Sub state of the transaction. instructed, confirmed, priced sub_types applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state
type GetPotTransactions200ApplicationJSONTransactionsSubTypeEnum string

const (
	GetPotTransactions200ApplicationJSONTransactionsSubTypeEnumInstructed GetPotTransactions200ApplicationJSONTransactionsSubTypeEnum = "instructed"
	GetPotTransactions200ApplicationJSONTransactionsSubTypeEnumConfirmed  GetPotTransactions200ApplicationJSONTransactionsSubTypeEnum = "confirmed"
	GetPotTransactions200ApplicationJSONTransactionsSubTypeEnumPriced     GetPotTransactions200ApplicationJSONTransactionsSubTypeEnum = "priced"
	GetPotTransactions200ApplicationJSONTransactionsSubTypeEnumRejected   GetPotTransactions200ApplicationJSONTransactionsSubTypeEnum = "rejected"
	GetPotTransactions200ApplicationJSONTransactionsSubTypeEnumSettled    GetPotTransactions200ApplicationJSONTransactionsSubTypeEnum = "settled"
	GetPotTransactions200ApplicationJSONTransactionsSubTypeEnumCancelled  GetPotTransactions200ApplicationJSONTransactionsSubTypeEnum = "cancelled"
	GetPotTransactions200ApplicationJSONTransactionsSubTypeEnumScheduled  GetPotTransactions200ApplicationJSONTransactionsSubTypeEnum = "scheduled"
)

func (e *GetPotTransactions200ApplicationJSONTransactionsSubTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "instructed":
		fallthrough
	case "confirmed":
		fallthrough
	case "priced":
		fallthrough
	case "rejected":
		fallthrough
	case "settled":
		fallthrough
	case "cancelled":
		fallthrough
	case "scheduled":
		*e = GetPotTransactions200ApplicationJSONTransactionsSubTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPotTransactions200ApplicationJSONTransactionsSubTypeEnum: %s", s)
	}
}

// GetPotTransactions200ApplicationJSONTransactionsTypeEnum - State of the transaction
type GetPotTransactions200ApplicationJSONTransactionsTypeEnum string

const (
	GetPotTransactions200ApplicationJSONTransactionsTypeEnumPending  GetPotTransactions200ApplicationJSONTransactionsTypeEnum = "pending"
	GetPotTransactions200ApplicationJSONTransactionsTypeEnumArchived GetPotTransactions200ApplicationJSONTransactionsTypeEnum = "archived"
)

func (e *GetPotTransactions200ApplicationJSONTransactionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "archived":
		*e = GetPotTransactions200ApplicationJSONTransactionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPotTransactions200ApplicationJSONTransactionsTypeEnum: %s", s)
	}
}

type GetPotTransactions200ApplicationJSONTransactions struct {
	// Additional external details of the transaction, This may be populated in reconciliation process
	AdditionalExternalDetails map[string]interface{} `json:"additional_external_details,omitempty"`
	// (optional) Order identifier assigned by the wealth manager
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// Will indicate the date where this record was created
	CreatedAt string `json:"created_at"`
	// Currency of the transaction
	Currency string `json:"currency"`
	// in = cash payment or pending buy transaction, out= cash out or pending sell transaction.
	Direction GetPotTransactions200ApplicationJSONTransactionsDirectionEnum `json:"direction"`
	// Executed price of the buy, sell transaction
	ExecutionPrice *string `json:"execution_price,omitempty"`
	// External Transaction Reference
	ExternalTransactionReference *string `json:"external_transaction_reference,omitempty"`
	// Investment product id of the transaction. Will be 'cash' for cash transaction
	InvestmentProductID string `json:"investment_product_id"`
	// Origin of the transaction
	Origin GetPotTransactions200ApplicationJSONTransactionsOriginEnum `json:"origin"`
	// Parent Transaction ID
	ParentTransactionID *string `json:"parent_transaction_id,omitempty"`
	// Primary transaction type
	PrimaryTransactionType GetPotTransactions200ApplicationJSONTransactionsPrimaryTransactionTypeEnum `json:"primary_transaction_type"`
	// Intended settlement date of the pending transaction or actual the settled day of the transaction
	SettlementDate *string `json:"settlement_date,omitempty"`
	// Sub transaction type
	SubTransactionType GetPotTransactions200ApplicationJSONTransactionsSubTransactionTypeEnum `json:"sub_transaction_type"`
	// Sub state of the transaction. instructed, confirmed, priced sub_types applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state
	SubType GetPotTransactions200ApplicationJSONTransactionsSubTypeEnum `json:"sub_type"`
	// Date the transaction was effected
	TradeDate *string `json:"trade_date,omitempty"`
	// Unique ID of the transaction
	TransactionID string `json:"transaction_id"`
	// Quantity of the investment product transaction. Will be empty for the cash transactions.
	TransactionQuantity *string `json:"transaction_quantity,omitempty"`
	// Value of the transaction
	TransactionValue *string `json:"transaction_value,omitempty"`
	// State of the transaction
	Type GetPotTransactions200ApplicationJSONTransactionsTypeEnum `json:"type"`
	// Will indicate the date where this record was last changed
	UpdatedAt string `json:"updated_at"`
}

// GetPotTransactions200ApplicationJSON - success
type GetPotTransactions200ApplicationJSON struct {
	// This indicates the availability of the next page
	NextPageAvailable bool                                               `json:"next_page_available"`
	PotID             string                                             `json:"pot_id"`
	Transactions      []GetPotTransactions200ApplicationJSONTransactions `json:"transactions"`
}

type GetPotTransactionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// success
	GetPotTransactions200ApplicationJSONObject *GetPotTransactions200ApplicationJSON
	// You do not have permissions to access this resource.
	GetPotTransactions401ApplicationJSONObject *GetPotTransactions401ApplicationJSON
	// Your authentication information is missing or invalid. Please check the keys are properly set and its correct
	GetPotTransactions403ApplicationJSONObject *GetPotTransactions403ApplicationJSON
	// The specified resource was not found
	GetPotTransactions404ApplicationJSONObject *GetPotTransactions404ApplicationJSON
	// You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
	GetPotTransactions429ApplicationJSONObject *GetPotTransactions429ApplicationJSON
	// System error. Retry later. If the error persist, contact WOS support
	GetPotTransactions500ApplicationJSONObject *GetPotTransactions500ApplicationJSON
}
