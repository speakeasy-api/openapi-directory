/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TemplateDefinitionLayout - Defines template layout (e.g page format, margins).
 */
public class TemplateDefinitionLayout {
    /**
     * Defines how many pages or labels should be empty
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emptyLabels")
    public Long emptyLabels;

    public TemplateDefinitionLayout withEmptyLabels(Long emptyLabels) {
        this.emptyLabels = emptyLabels;
        return this;
    }
    
    /**
     * Defines template page size
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    public TemplateDefinitionLayoutFormatEnum format;

    public TemplateDefinitionLayout withFormat(TemplateDefinitionLayoutFormatEnum format) {
        this.format = format;
        return this;
    }
    
    /**
     * Page height in units
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    public Double height;

    public TemplateDefinitionLayout withHeight(Double height) {
        this.height = height;
        return this;
    }
    
    /**
     * Page margins in units
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("margins")
    public TemplateDefinitionLayoutMargins margins;

    public TemplateDefinitionLayout withMargins(TemplateDefinitionLayoutMargins margins) {
        this.margins = margins;
        return this;
    }
    
    /**
     * Page orientation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orientation")
    public TemplateDefinitionLayoutOrientationEnum orientation;

    public TemplateDefinitionLayout withOrientation(TemplateDefinitionLayoutOrientationEnum orientation) {
        this.orientation = orientation;
        return this;
    }
    
    /**
     * Defines page size if layout is repeated on the page e.g sheet labels
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repeatLayout")
    public TemplateDefinitionLayoutRepeatLayout repeatLayout;

    public TemplateDefinitionLayout withRepeatLayout(TemplateDefinitionLayoutRepeatLayout repeatLayout) {
        this.repeatLayout = repeatLayout;
        return this;
    }
    
    /**
     * Page rotation in degrees
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rotation")
    public TemplateDefinitionLayoutRotationEnum rotation;

    public TemplateDefinitionLayout withRotation(TemplateDefinitionLayoutRotationEnum rotation) {
        this.rotation = rotation;
        return this;
    }
    
    /**
     * Measure unit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit")
    public TemplateDefinitionLayoutUnitEnum unit;

    public TemplateDefinitionLayout withUnit(TemplateDefinitionLayoutUnitEnum unit) {
        this.unit = unit;
        return this;
    }
    
    /**
     * Page width in units
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    public Double width;

    public TemplateDefinitionLayout withWidth(Double width) {
        this.width = width;
        return this;
    }
    
    public TemplateDefinitionLayout(){}
}
