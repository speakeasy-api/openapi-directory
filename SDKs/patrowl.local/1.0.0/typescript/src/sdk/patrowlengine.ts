/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * SSLScan API documentation
 *
 * @see {@link https://github.com/Patrowl/PatrowlDocs} - Find out more
 */
export class PatrowlEngine {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Clean scan
   *
   * @remarks
   * Clean scan identified by id.
   */
  cleanScanPage(
    req: operations.CleanScanPageRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CleanScanPageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CleanScanPageRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/clean/{scanId}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CleanScanPageResponse =
        new operations.CleanScanPageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Clean all scans
   *
   * @remarks
   * Clean all current scans.
   */
  cleanScansPage(
    config?: AxiosRequestConfig
  ): Promise<operations.CleanScansPageResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/clean";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CleanScansPageResponse =
        new operations.CleanScansPageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get findings on finished scans
   *
   * @remarks
   * Get findings on finished scans.
   */
  getFindingPage(
    req: operations.GetFindingPageRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFindingPageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFindingPageRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/getfindings/{scanId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFindingPageResponse =
        new operations.GetFindingPageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.findings = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.findings = utils.objectToClass(
              httpRes?.data,
              shared.Findings,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Start a new scan
   *
   * @remarks
   * Start a new scan.
   */
  startScanPage(
    req: shared.ScanDefinition,
    config?: AxiosRequestConfig
  ): Promise<operations.StartScanPageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ScanDefinition(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/startscan";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StartScanPageResponse =
        new operations.StartScanPageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Status of a scan
   *
   * @remarks
   * Status of a scan identified by id.
   */
  statusScanPage(
    req: operations.StatusScanPageRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StatusScanPageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StatusScanPageRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/status/{scanId}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StatusScanPageResponse =
        new operations.StatusScanPageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Status on all scans
   *
   * @remarks
   * Status all current scans.
   */
  statusScansPage(
    config?: AxiosRequestConfig
  ): Promise<operations.StatusScansPageResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/status";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StatusScansPageResponse =
        new operations.StatusScansPageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Stop a scan
   *
   * @remarks
   * Stop a scan identified by id.
   */
  stopScanPage(
    req: operations.StopScanPageRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopScanPageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopScanPageRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/stop/{scanId}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopScanPageResponse =
        new operations.StopScanPageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Stop all scans
   *
   * @remarks
   * Stop all current scans.
   */
  stopScansPage(
    config?: AxiosRequestConfig
  ): Promise<operations.StopScansPageResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/stopscans";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopScansPageResponse =
        new operations.StopScansPageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Index page
   *
   * @remarks
   * Return index page
   */
  getDefaultPage(
    config?: AxiosRequestConfig
  ): Promise<operations.GetDefaultPageResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDefaultPageResponse =
        new operations.GetDefaultPageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Engine info page
   *
   * @remarks
   * Return information on engine.
   */
  getInfoPage(
    config?: AxiosRequestConfig
  ): Promise<operations.GetInfoPageResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/info";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetInfoPageResponse =
        new operations.GetInfoPageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Liveness page
   *
   * @remarks
   * Return liveness page
   */
  getLivenessPage(
    config?: AxiosRequestConfig
  ): Promise<operations.GetLivenessPageResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/liveness";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetLivenessPageResponse =
        new operations.GetLivenessPageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Readiness page
   *
   * @remarks
   * Return liveness page
   */
  getReadinessPage(
    config?: AxiosRequestConfig
  ): Promise<operations.GetReadinessPageResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/readiness";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetReadinessPageResponse =
        new operations.GetReadinessPageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Test page
   *
   * @remarks
   * Return test page
   */
  getTestPage(
    config?: AxiosRequestConfig
  ): Promise<operations.GetTestPageResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/test";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTestPageResponse =
        new operations.GetTestPageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Configuration reloading page
   *
   * @remarks
   * Reload the configuration file.
   */
  reloadConfigurationPage(
    config?: AxiosRequestConfig
  ): Promise<operations.ReloadConfigurationPageResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reloadconfig";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReloadConfigurationPageResponse =
        new operations.ReloadConfigurationPageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
