// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/types"
)

// OpenSearchSortKeysEnum - Sort the results by most relevant (default), smallest or largest spatial area, shortest or longest temporal duration, or most recently updated; partial implementation of OpenSearch SRU 1.0
type OpenSearchSortKeysEnum string

const (
	OpenSearchSortKeysEnumScoreDesc            OpenSearchSortKeysEnum = "score,,desc"
	OpenSearchSortKeysEnumSpatialAreaAsc       OpenSearchSortKeysEnum = "spatial_area,,asc"
	OpenSearchSortKeysEnumSpatialAreaDesc      OpenSearchSortKeysEnum = "spatial_area,,desc"
	OpenSearchSortKeysEnumTemporalDurationAsc  OpenSearchSortKeysEnum = "temporal_duration,,asc"
	OpenSearchSortKeysEnumTemporalDurationDesc OpenSearchSortKeysEnum = "temporal_duration,,desc"
	OpenSearchSortKeysEnumUpdatedDesc          OpenSearchSortKeysEnum = "updated,,desc"
)

func (e *OpenSearchSortKeysEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "score,,desc":
		fallthrough
	case "spatial_area,,asc":
		fallthrough
	case "spatial_area,,desc":
		fallthrough
	case "temporal_duration,,asc":
		fallthrough
	case "temporal_duration,,desc":
		fallthrough
	case "updated,,desc":
		*e = OpenSearchSortKeysEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenSearchSortKeysEnum: %s", s)
	}
}

// OpenSearchSourceEnum - Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC
type OpenSearchSourceEnum string

const (
	OpenSearchSourceEnumNsidc OpenSearchSourceEnum = "NSIDC"
	OpenSearchSourceEnumAde   OpenSearchSourceEnum = "ADE"
)

func (e *OpenSearchSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NSIDC":
		fallthrough
	case "ADE":
		*e = OpenSearchSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenSearchSourceEnum: %s", s)
	}
}

type OpenSearchQueryParams struct {
	// The number of search results per page desired by the client; OpenSearch 1.1
	Count *int64 `queryParam:"style=form,explode=true,name=count"`
	// The end date in yyyy-mm-dd format
	EndDate *types.Date `queryParam:"style=form,explode=true,name=endDate"`
	// Describes faceted restrictions on the search. A URL-encoded JSON object where the keys are the names of the facet, and the values are arrays of the selected facet values
	FacetFilters *string `queryParam:"style=form,explode=true,name=facetFilters"`
	// URL-encoded keyword or keywords desired by the client; OpenSearch 1.1
	SearchTerms *string `queryParam:"style=form,explode=true,name=searchTerms"`
	// Sort the results by most relevant (default), smallest or largest spatial area, shortest or longest temporal duration, or most recently updated; partial implementation of OpenSearch SRU 1.0
	SortKeys *OpenSearchSortKeysEnum `queryParam:"style=form,explode=true,name=sortKeys"`
	// Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC
	Source *OpenSearchSourceEnum `queryParam:"style=form,explode=true,name=source"`
	// 4 comma separated values - W, S, E, N; OpenSearch-Geo 1.0, "box" parameter
	Spatial *string `queryParam:"style=form,explode=true,name=spatial"`
	// The start date in yyyy-mm-dd format
	StartDate *types.Date `queryParam:"style=form,explode=true,name=startDate"`
	// First search result desired by the search client; OpenSearch 1.1
	StartIndex *int64 `queryParam:"style=form,explode=true,name=startIndex"`
}

type OpenSearchRequest struct {
	QueryParams OpenSearchQueryParams
}

type OpenSearchResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	OpenSearch200ApplicationAtomPlusXMLString *string
}
