/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TaskSpec - Spec of a task
 */
public class TaskSpec {
    /**
     * Compute resource requirements
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("computeResource")
    public ComputeResource computeResource;

    public TaskSpec withComputeResource(ComputeResource computeResource) {
        this.computeResource = computeResource;
        return this;
    }
    
    /**
     * An Environment describes a collection of environment variables to set when executing Tasks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environment")
    public Environment environment;

    public TaskSpec withEnvironment(Environment environment) {
        this.environment = environment;
        return this;
    }
    
    /**
     * Deprecated: please use environment(non-plural) instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environments")
    public java.util.Map<String, String> environments;

    public TaskSpec withEnvironments(java.util.Map<String, String> environments) {
        this.environments = environments;
        return this;
    }
    
    /**
     * Lifecycle management schema when any task in a task group is failed. Currently we only support one lifecycle policy. When the lifecycle policy condition is met, the action in the policy will execute. If task execution result does not meet with the defined lifecycle policy, we consider it as the default policy. Default policy means if the exit code is 0, exit task. If task ends with non-zero exit code, retry the task with max_retry_count.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lifecyclePolicies")
    public LifecyclePolicy[] lifecyclePolicies;

    public TaskSpec withLifecyclePolicies(LifecyclePolicy[] lifecyclePolicies) {
        this.lifecyclePolicies = lifecyclePolicies;
        return this;
    }
    
    /**
     * Maximum number of retries on failures. The default, 0, which means never retry. The valid value range is [0, 10].
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxRetryCount")
    public Integer maxRetryCount;

    public TaskSpec withMaxRetryCount(Integer maxRetryCount) {
        this.maxRetryCount = maxRetryCount;
        return this;
    }
    
    /**
     * Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxRunDuration")
    public String maxRunDuration;

    public TaskSpec withMaxRunDuration(String maxRunDuration) {
        this.maxRunDuration = maxRunDuration;
        return this;
    }
    
    /**
     * The sequence of scripts or containers to run for this Task. Each Task using this TaskSpec executes its list of runnables in order. The Task succeeds if all of its runnables either exit with a zero status or any that exit with a non-zero status have the ignore_exit_status flag. Background runnables are killed automatically (if they have not already exited) a short time after all foreground runnables have completed. Even though this is likely to result in a non-zero exit status for the background runnable, these automatic kills are not treated as Task failures.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runnables")
    public Runnable[] runnables;

    public TaskSpec withRunnables(Runnable[] runnables) {
        this.runnables = runnables;
        return this;
    }
    
    /**
     * Volumes to mount before running Tasks using this TaskSpec.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumes")
    public Volume[] volumes;

    public TaskSpec withVolumes(Volume[] volumes) {
        this.volumes = volumes;
        return this;
    }
    
    public TaskSpec(){}
}
