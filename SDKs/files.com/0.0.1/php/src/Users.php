<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Users 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete User
     * 
     * Delete User
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdResponse
     */
	public function deleteUsersId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * List Users
     * 
     * List Users
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersResponse
     */
	public function getUsers(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userEntities = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\UserEntity>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Show User
     * 
     * Show User
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersIdResponse
     */
	public function getUsersId(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id}', \OpenAPI\OpenAPI\Models\Operations\GetUsersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserEntity', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * List Api Keys
     * 
     * List Api Keys
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdApiKeysRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdApiKeysResponse
     */
	public function getUsersUserIdApiKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdApiKeysRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdApiKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/api_keys', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdApiKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdApiKeysRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdApiKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKeyEntities = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ApiKeyEntity>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * List User Cipher Uses
     * 
     * List User Cipher Uses
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdCipherUsesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdCipherUsesResponse
     */
	public function getUsersUserIdCipherUses(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdCipherUsesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdCipherUsesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/cipher_uses', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdCipherUsesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdCipherUsesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdCipherUsesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userCipherUseEntities = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\UserCipherUseEntity>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * List Group Users
     * 
     * List Group Users
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdGroupsResponse
     */
	public function getUsersUserIdGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/groups', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdGroupsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupUserEntities = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GroupUserEntity>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * List Permissions
     * 
     * List Permissions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPermissionsResponse
     */
	public function getUsersUserIdPermissions(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/permissions', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPermissionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->permissionEntities = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PermissionEntity>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * List Public Keys
     * 
     * List Public Keys
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPublicKeysRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPublicKeysResponse
     */
	public function getUsersUserIdPublicKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPublicKeysRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPublicKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/public_keys', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPublicKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPublicKeysRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPublicKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publicKeyEntities = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PublicKeyEntity>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Update User
     * 
     * Update User
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchUsersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchUsersIdResponse
     */
	public function patchUsersId(
        \OpenAPI\OpenAPI\Models\Operations\PatchUsersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchUsersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchUsersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchUsersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserEntity', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Create User
     * 
     * Create User
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostUsersRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUsersResponse
     */
	public function postUsers(
        \OpenAPI\OpenAPI\Models\Operations\PostUsersRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserEntity', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Trigger 2FA Reset process for user who has lost access to their existing 2FA methods.
     * 
     * Trigger 2FA Reset process for user who has lost access to their existing 2FA methods.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostUsersId2faResetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUsersId2faResetResponse
     */
	public function postUsersId2faReset(
        \OpenAPI\OpenAPI\Models\Operations\PostUsersId2faResetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostUsersId2faResetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id}/2fa/reset', \OpenAPI\OpenAPI\Models\Operations\PostUsersId2faResetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUsersId2faResetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Resend user welcome email
     * 
     * Resend user welcome email
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostUsersIdResendWelcomeEmailRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUsersIdResendWelcomeEmailResponse
     */
	public function postUsersIdResendWelcomeEmail(
        \OpenAPI\OpenAPI\Models\Operations\PostUsersIdResendWelcomeEmailRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostUsersIdResendWelcomeEmailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id}/resend_welcome_email', \OpenAPI\OpenAPI\Models\Operations\PostUsersIdResendWelcomeEmailRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUsersIdResendWelcomeEmailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Unlock user who has been locked out due to failed logins.
     * 
     * Unlock user who has been locked out due to failed logins.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUnlockRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUnlockResponse
     */
	public function postUsersIdUnlock(
        \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUnlockRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUnlockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id}/unlock', \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUnlockRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUnlockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Create Api Key
     * 
     * Create Api Key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostUsersUserIdApiKeysRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUsersUserIdApiKeysResponse
     */
	public function postUsersUserIdApiKeys(
        \OpenAPI\OpenAPI\Models\Operations\PostUsersUserIdApiKeysRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostUsersUserIdApiKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/api_keys', \OpenAPI\OpenAPI\Models\Operations\PostUsersUserIdApiKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUsersUserIdApiKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKeyEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiKeyEntity', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Create Public Key
     * 
     * Create Public Key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostUsersUserIdPublicKeysRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUsersUserIdPublicKeysResponse
     */
	public function postUsersUserIdPublicKeys(
        \OpenAPI\OpenAPI\Models\Operations\PostUsersUserIdPublicKeysRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostUsersUserIdPublicKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/public_keys', \OpenAPI\OpenAPI\Models\Operations\PostUsersUserIdPublicKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUsersUserIdPublicKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publicKeyEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PublicKeyEntity', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
}