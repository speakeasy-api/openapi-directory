// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CompleteFileUploadXSdsDateFormatEnum - Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
type CompleteFileUploadXSdsDateFormatEnum string

const (
	CompleteFileUploadXSdsDateFormatEnumUtc    CompleteFileUploadXSdsDateFormatEnum = "UTC"
	CompleteFileUploadXSdsDateFormatEnumLocal  CompleteFileUploadXSdsDateFormatEnum = "LOCAL"
	CompleteFileUploadXSdsDateFormatEnumOffset CompleteFileUploadXSdsDateFormatEnum = "OFFSET"
	CompleteFileUploadXSdsDateFormatEnumEpoch  CompleteFileUploadXSdsDateFormatEnum = "EPOCH"
	CompleteFileUploadXSdsDateFormatEnumLeet   CompleteFileUploadXSdsDateFormatEnum = "LEET"
)

func (e CompleteFileUploadXSdsDateFormatEnum) ToPointer() *CompleteFileUploadXSdsDateFormatEnum {
	return &e
}

func (e *CompleteFileUploadXSdsDateFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UTC":
		fallthrough
	case "LOCAL":
		fallthrough
	case "OFFSET":
		fallthrough
	case "EPOCH":
		fallthrough
	case "LEET":
		*e = CompleteFileUploadXSdsDateFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteFileUploadXSdsDateFormatEnum: %v", v)
	}
}

type CompleteFileUploadRequest struct {
	CompleteUploadRequest *shared.CompleteUploadRequest `request:"mediaType=application/json"`
	// Authentication token
	XSdsAuthToken *string `header:"style=simple,explode=false,name=X-Sds-Auth-Token"`
	// Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
	XSdsDateFormat *CompleteFileUploadXSdsDateFormatEnum `header:"style=simple,explode=false,name=X-Sds-Date-Format"`
	// Upload channel ID
	UploadID string `pathParam:"style=simple,explode=false,name=upload_id"`
}

type CompleteFileUploadResponse struct {
	ContentType string
	// Bad Request
	ErrorResponse *shared.ErrorResponse
	// Created
	Node        *shared.Node
	StatusCode  int
	RawResponse *http.Response
}
