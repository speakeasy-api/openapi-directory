"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import multiplevaluessetting as shared_multiplevaluessetting
from ..shared import obfuscationsetting as shared_obfuscationsetting
from ..shared import slotvalueelicitationsetting as shared_slotvalueelicitationsetting
from ..shared import subslotsetting as shared_subslotsetting
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSlotResponse:
    r"""Success"""
    
    bot_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('botId'), 'exclude': lambda f: f is None }})  
    bot_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('botVersion'), 'exclude': lambda f: f is None }})  
    creation_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    intent_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intentId'), 'exclude': lambda f: f is None }})  
    locale_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localeId'), 'exclude': lambda f: f is None }})  
    multiple_values_setting: Optional[shared_multiplevaluessetting.MultipleValuesSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multipleValuesSetting'), 'exclude': lambda f: f is None }})  
    obfuscation_setting: Optional[shared_obfuscationsetting.ObfuscationSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('obfuscationSetting'), 'exclude': lambda f: f is None }})  
    slot_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slotId'), 'exclude': lambda f: f is None }})  
    slot_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slotName'), 'exclude': lambda f: f is None }})  
    slot_type_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slotTypeId'), 'exclude': lambda f: f is None }})  
    sub_slot_setting: Optional[shared_subslotsetting.SubSlotSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subSlotSetting'), 'exclude': lambda f: f is None }})  
    value_elicitation_setting: Optional[shared_slotvalueelicitationsetting.SlotValueElicitationSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueElicitationSetting'), 'exclude': lambda f: f is None }})  
    