/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A structure that identifies filter criteria for <code>GetCoverageStatistics</code>.
 */
export class ListCoverageStatisticsRequestBodyFilterCriteria extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.CoverageStringFilter })
  @Expose({ name: "accountId" })
  @Type(() => shared.CoverageStringFilter)
  accountId?: shared.CoverageStringFilter[];

  @SpeakeasyMetadata({ elemType: shared.CoverageMapFilter })
  @Expose({ name: "ec2InstanceTags" })
  @Type(() => shared.CoverageMapFilter)
  ec2InstanceTags?: shared.CoverageMapFilter[];

  @SpeakeasyMetadata({ elemType: shared.CoverageStringFilter })
  @Expose({ name: "ecrImageTags" })
  @Type(() => shared.CoverageStringFilter)
  ecrImageTags?: shared.CoverageStringFilter[];

  @SpeakeasyMetadata({ elemType: shared.CoverageStringFilter })
  @Expose({ name: "ecrRepositoryName" })
  @Type(() => shared.CoverageStringFilter)
  ecrRepositoryName?: shared.CoverageStringFilter[];

  @SpeakeasyMetadata({ elemType: shared.CoverageStringFilter })
  @Expose({ name: "lambdaFunctionName" })
  @Type(() => shared.CoverageStringFilter)
  lambdaFunctionName?: shared.CoverageStringFilter[];

  @SpeakeasyMetadata({ elemType: shared.CoverageStringFilter })
  @Expose({ name: "lambdaFunctionRuntime" })
  @Type(() => shared.CoverageStringFilter)
  lambdaFunctionRuntime?: shared.CoverageStringFilter[];

  @SpeakeasyMetadata({ elemType: shared.CoverageMapFilter })
  @Expose({ name: "lambdaFunctionTags" })
  @Type(() => shared.CoverageMapFilter)
  lambdaFunctionTags?: shared.CoverageMapFilter[];

  @SpeakeasyMetadata({ elemType: shared.CoverageStringFilter })
  @Expose({ name: "resourceId" })
  @Type(() => shared.CoverageStringFilter)
  resourceId?: shared.CoverageStringFilter[];

  @SpeakeasyMetadata({ elemType: shared.CoverageStringFilter })
  @Expose({ name: "resourceType" })
  @Type(() => shared.CoverageStringFilter)
  resourceType?: shared.CoverageStringFilter[];

  @SpeakeasyMetadata({ elemType: shared.CoverageStringFilter })
  @Expose({ name: "scanStatusCode" })
  @Type(() => shared.CoverageStringFilter)
  scanStatusCode?: shared.CoverageStringFilter[];

  @SpeakeasyMetadata({ elemType: shared.CoverageStringFilter })
  @Expose({ name: "scanStatusReason" })
  @Type(() => shared.CoverageStringFilter)
  scanStatusReason?: shared.CoverageStringFilter[];

  @SpeakeasyMetadata({ elemType: shared.CoverageStringFilter })
  @Expose({ name: "scanType" })
  @Type(() => shared.CoverageStringFilter)
  scanType?: shared.CoverageStringFilter[];
}

/**
 * The value to group the results by.
 */
export enum ListCoverageStatisticsRequestBodyGroupByEnum {
  ScanStatusCode = "SCAN_STATUS_CODE",
  ScanStatusReason = "SCAN_STATUS_REASON",
  AccountId = "ACCOUNT_ID",
  ResourceType = "RESOURCE_TYPE",
  EcrRepositoryName = "ECR_REPOSITORY_NAME",
}

export class ListCoverageStatisticsRequestBody extends SpeakeasyBase {
  /**
   * A structure that identifies filter criteria for <code>GetCoverageStatistics</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filterCriteria" })
  @Type(() => ListCoverageStatisticsRequestBodyFilterCriteria)
  filterCriteria?: ListCoverageStatisticsRequestBodyFilterCriteria;

  /**
   * The value to group the results by.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groupBy" })
  groupBy?: ListCoverageStatisticsRequestBodyGroupByEnum;

  /**
   * A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;
}

export class ListCoverageStatisticsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ListCoverageStatisticsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;
}

export class ListCoverageStatisticsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  listCoverageStatisticsResponse?: shared.ListCoverageStatisticsResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
