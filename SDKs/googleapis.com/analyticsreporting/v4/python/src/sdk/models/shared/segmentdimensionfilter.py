"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SegmentDimensionFilterOperatorEnum(str, Enum):
    r"""The operator to use to match the dimension with the expressions."""
    OPERATOR_UNSPECIFIED = 'OPERATOR_UNSPECIFIED'
    REGEXP = 'REGEXP'
    BEGINS_WITH = 'BEGINS_WITH'
    ENDS_WITH = 'ENDS_WITH'
    PARTIAL = 'PARTIAL'
    EXACT = 'EXACT'
    IN_LIST = 'IN_LIST'
    NUMERIC_LESS_THAN = 'NUMERIC_LESS_THAN'
    NUMERIC_GREATER_THAN = 'NUMERIC_GREATER_THAN'
    NUMERIC_BETWEEN = 'NUMERIC_BETWEEN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SegmentDimensionFilter:
    r"""Dimension filter specifies the filtering options on a dimension."""
    
    case_sensitive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caseSensitive'), 'exclude': lambda f: f is None }})
    r"""Should the match be case sensitive, ignored for `IN_LIST` operator."""  
    dimension_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimensionName'), 'exclude': lambda f: f is None }})
    r"""Name of the dimension for which the filter is being applied."""  
    expressions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expressions'), 'exclude': lambda f: f is None }})
    r"""The list of expressions, only the first element is used for all operators"""  
    max_comparison_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxComparisonValue'), 'exclude': lambda f: f is None }})
    r"""Maximum comparison values for `BETWEEN` match type."""  
    min_comparison_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minComparisonValue'), 'exclude': lambda f: f is None }})
    r"""Minimum comparison values for `BETWEEN` match type."""  
    operator: Optional[SegmentDimensionFilterOperatorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operator'), 'exclude': lambda f: f is None }})
    r"""The operator to use to match the dimension with the expressions."""  
    