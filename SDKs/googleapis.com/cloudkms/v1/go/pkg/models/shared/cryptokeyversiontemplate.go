// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CryptoKeyVersionTemplateAlgorithmEnum - Required. Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.
type CryptoKeyVersionTemplateAlgorithmEnum string

const (
	CryptoKeyVersionTemplateAlgorithmEnumCryptoKeyVersionAlgorithmUnspecified CryptoKeyVersionTemplateAlgorithmEnum = "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED"
	CryptoKeyVersionTemplateAlgorithmEnumGoogleSymmetricEncryption            CryptoKeyVersionTemplateAlgorithmEnum = "GOOGLE_SYMMETRIC_ENCRYPTION"
	CryptoKeyVersionTemplateAlgorithmEnumRsaSignPss2048Sha256                 CryptoKeyVersionTemplateAlgorithmEnum = "RSA_SIGN_PSS_2048_SHA256"
	CryptoKeyVersionTemplateAlgorithmEnumRsaSignPss3072Sha256                 CryptoKeyVersionTemplateAlgorithmEnum = "RSA_SIGN_PSS_3072_SHA256"
	CryptoKeyVersionTemplateAlgorithmEnumRsaSignPss4096Sha256                 CryptoKeyVersionTemplateAlgorithmEnum = "RSA_SIGN_PSS_4096_SHA256"
	CryptoKeyVersionTemplateAlgorithmEnumRsaSignPss4096Sha512                 CryptoKeyVersionTemplateAlgorithmEnum = "RSA_SIGN_PSS_4096_SHA512"
	CryptoKeyVersionTemplateAlgorithmEnumRsaSignPkcs12048Sha256               CryptoKeyVersionTemplateAlgorithmEnum = "RSA_SIGN_PKCS1_2048_SHA256"
	CryptoKeyVersionTemplateAlgorithmEnumRsaSignPkcs13072Sha256               CryptoKeyVersionTemplateAlgorithmEnum = "RSA_SIGN_PKCS1_3072_SHA256"
	CryptoKeyVersionTemplateAlgorithmEnumRsaSignPkcs14096Sha256               CryptoKeyVersionTemplateAlgorithmEnum = "RSA_SIGN_PKCS1_4096_SHA256"
	CryptoKeyVersionTemplateAlgorithmEnumRsaSignPkcs14096Sha512               CryptoKeyVersionTemplateAlgorithmEnum = "RSA_SIGN_PKCS1_4096_SHA512"
	CryptoKeyVersionTemplateAlgorithmEnumRsaSignRawPkcs12048                  CryptoKeyVersionTemplateAlgorithmEnum = "RSA_SIGN_RAW_PKCS1_2048"
	CryptoKeyVersionTemplateAlgorithmEnumRsaSignRawPkcs13072                  CryptoKeyVersionTemplateAlgorithmEnum = "RSA_SIGN_RAW_PKCS1_3072"
	CryptoKeyVersionTemplateAlgorithmEnumRsaSignRawPkcs14096                  CryptoKeyVersionTemplateAlgorithmEnum = "RSA_SIGN_RAW_PKCS1_4096"
	CryptoKeyVersionTemplateAlgorithmEnumRsaDecryptOaep2048Sha256             CryptoKeyVersionTemplateAlgorithmEnum = "RSA_DECRYPT_OAEP_2048_SHA256"
	CryptoKeyVersionTemplateAlgorithmEnumRsaDecryptOaep3072Sha256             CryptoKeyVersionTemplateAlgorithmEnum = "RSA_DECRYPT_OAEP_3072_SHA256"
	CryptoKeyVersionTemplateAlgorithmEnumRsaDecryptOaep4096Sha256             CryptoKeyVersionTemplateAlgorithmEnum = "RSA_DECRYPT_OAEP_4096_SHA256"
	CryptoKeyVersionTemplateAlgorithmEnumRsaDecryptOaep4096Sha512             CryptoKeyVersionTemplateAlgorithmEnum = "RSA_DECRYPT_OAEP_4096_SHA512"
	CryptoKeyVersionTemplateAlgorithmEnumRsaDecryptOaep2048Sha1               CryptoKeyVersionTemplateAlgorithmEnum = "RSA_DECRYPT_OAEP_2048_SHA1"
	CryptoKeyVersionTemplateAlgorithmEnumRsaDecryptOaep3072Sha1               CryptoKeyVersionTemplateAlgorithmEnum = "RSA_DECRYPT_OAEP_3072_SHA1"
	CryptoKeyVersionTemplateAlgorithmEnumRsaDecryptOaep4096Sha1               CryptoKeyVersionTemplateAlgorithmEnum = "RSA_DECRYPT_OAEP_4096_SHA1"
	CryptoKeyVersionTemplateAlgorithmEnumEcSignP256Sha256                     CryptoKeyVersionTemplateAlgorithmEnum = "EC_SIGN_P256_SHA256"
	CryptoKeyVersionTemplateAlgorithmEnumEcSignP384Sha384                     CryptoKeyVersionTemplateAlgorithmEnum = "EC_SIGN_P384_SHA384"
	CryptoKeyVersionTemplateAlgorithmEnumEcSignSecp256K1Sha256                CryptoKeyVersionTemplateAlgorithmEnum = "EC_SIGN_SECP256K1_SHA256"
	CryptoKeyVersionTemplateAlgorithmEnumHmacSha256                           CryptoKeyVersionTemplateAlgorithmEnum = "HMAC_SHA256"
	CryptoKeyVersionTemplateAlgorithmEnumHmacSha1                             CryptoKeyVersionTemplateAlgorithmEnum = "HMAC_SHA1"
	CryptoKeyVersionTemplateAlgorithmEnumHmacSha384                           CryptoKeyVersionTemplateAlgorithmEnum = "HMAC_SHA384"
	CryptoKeyVersionTemplateAlgorithmEnumHmacSha512                           CryptoKeyVersionTemplateAlgorithmEnum = "HMAC_SHA512"
	CryptoKeyVersionTemplateAlgorithmEnumHmacSha224                           CryptoKeyVersionTemplateAlgorithmEnum = "HMAC_SHA224"
	CryptoKeyVersionTemplateAlgorithmEnumExternalSymmetricEncryption          CryptoKeyVersionTemplateAlgorithmEnum = "EXTERNAL_SYMMETRIC_ENCRYPTION"
)

func (e *CryptoKeyVersionTemplateAlgorithmEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED":
		fallthrough
	case "GOOGLE_SYMMETRIC_ENCRYPTION":
		fallthrough
	case "RSA_SIGN_PSS_2048_SHA256":
		fallthrough
	case "RSA_SIGN_PSS_3072_SHA256":
		fallthrough
	case "RSA_SIGN_PSS_4096_SHA256":
		fallthrough
	case "RSA_SIGN_PSS_4096_SHA512":
		fallthrough
	case "RSA_SIGN_PKCS1_2048_SHA256":
		fallthrough
	case "RSA_SIGN_PKCS1_3072_SHA256":
		fallthrough
	case "RSA_SIGN_PKCS1_4096_SHA256":
		fallthrough
	case "RSA_SIGN_PKCS1_4096_SHA512":
		fallthrough
	case "RSA_SIGN_RAW_PKCS1_2048":
		fallthrough
	case "RSA_SIGN_RAW_PKCS1_3072":
		fallthrough
	case "RSA_SIGN_RAW_PKCS1_4096":
		fallthrough
	case "RSA_DECRYPT_OAEP_2048_SHA256":
		fallthrough
	case "RSA_DECRYPT_OAEP_3072_SHA256":
		fallthrough
	case "RSA_DECRYPT_OAEP_4096_SHA256":
		fallthrough
	case "RSA_DECRYPT_OAEP_4096_SHA512":
		fallthrough
	case "RSA_DECRYPT_OAEP_2048_SHA1":
		fallthrough
	case "RSA_DECRYPT_OAEP_3072_SHA1":
		fallthrough
	case "RSA_DECRYPT_OAEP_4096_SHA1":
		fallthrough
	case "EC_SIGN_P256_SHA256":
		fallthrough
	case "EC_SIGN_P384_SHA384":
		fallthrough
	case "EC_SIGN_SECP256K1_SHA256":
		fallthrough
	case "HMAC_SHA256":
		fallthrough
	case "HMAC_SHA1":
		fallthrough
	case "HMAC_SHA384":
		fallthrough
	case "HMAC_SHA512":
		fallthrough
	case "HMAC_SHA224":
		fallthrough
	case "EXTERNAL_SYMMETRIC_ENCRYPTION":
		*e = CryptoKeyVersionTemplateAlgorithmEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CryptoKeyVersionTemplateAlgorithmEnum: %s", s)
	}
}

// CryptoKeyVersionTemplateProtectionLevelEnum - ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE.
type CryptoKeyVersionTemplateProtectionLevelEnum string

const (
	CryptoKeyVersionTemplateProtectionLevelEnumProtectionLevelUnspecified CryptoKeyVersionTemplateProtectionLevelEnum = "PROTECTION_LEVEL_UNSPECIFIED"
	CryptoKeyVersionTemplateProtectionLevelEnumSoftware                   CryptoKeyVersionTemplateProtectionLevelEnum = "SOFTWARE"
	CryptoKeyVersionTemplateProtectionLevelEnumHsm                        CryptoKeyVersionTemplateProtectionLevelEnum = "HSM"
	CryptoKeyVersionTemplateProtectionLevelEnumExternal                   CryptoKeyVersionTemplateProtectionLevelEnum = "EXTERNAL"
	CryptoKeyVersionTemplateProtectionLevelEnumExternalVpc                CryptoKeyVersionTemplateProtectionLevelEnum = "EXTERNAL_VPC"
)

func (e *CryptoKeyVersionTemplateProtectionLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROTECTION_LEVEL_UNSPECIFIED":
		fallthrough
	case "SOFTWARE":
		fallthrough
	case "HSM":
		fallthrough
	case "EXTERNAL":
		fallthrough
	case "EXTERNAL_VPC":
		*e = CryptoKeyVersionTemplateProtectionLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CryptoKeyVersionTemplateProtectionLevelEnum: %s", s)
	}
}

// CryptoKeyVersionTemplate - A CryptoKeyVersionTemplate specifies the properties to use when creating a new CryptoKeyVersion, either manually with CreateCryptoKeyVersion or automatically as a result of auto-rotation.
type CryptoKeyVersionTemplate struct {
	// Required. Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.
	Algorithm *CryptoKeyVersionTemplateAlgorithmEnum `json:"algorithm,omitempty"`
	// ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE.
	ProtectionLevel *CryptoKeyVersionTemplateProtectionLevelEnum `json:"protectionLevel,omitempty"`
}
