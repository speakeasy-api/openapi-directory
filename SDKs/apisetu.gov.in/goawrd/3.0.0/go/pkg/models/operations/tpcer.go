// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TpcerSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type TpcerRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Registration No
	Registration string `json:"Registration"`
}

// TpcerRequestBodyFormatEnum - The format of the certificate in response.
type TpcerRequestBodyFormatEnum string

const (
	TpcerRequestBodyFormatEnumPdf TpcerRequestBodyFormatEnum = "pdf"
)

func (e *TpcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = TpcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TpcerRequestBodyFormatEnum: %s", s)
	}
}

// TpcerRequestBody - Request format
type TpcerRequestBody struct {
	CertificateParameters *TpcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format TpcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type TpcerRequest struct {
	// Request format
	Request  *TpcerRequestBody `request:"mediaType=application/json"`
	Security TpcerSecurity
}

type Tpcer504ApplicationJSONErrorEnum string

const (
	Tpcer504ApplicationJSONErrorEnumGatewayTimeout Tpcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Tpcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Tpcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tpcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Tpcer504ApplicationJSONErrorDescriptionEnum string

const (
	Tpcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Tpcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Tpcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Tpcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tpcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tpcer504ApplicationJSON - Gateway timeout
type Tpcer504ApplicationJSON struct {
	Error            *Tpcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tpcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tpcer503ApplicationJSONErrorEnum string

const (
	Tpcer503ApplicationJSONErrorEnumServiceUnavailable Tpcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Tpcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Tpcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tpcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Tpcer503ApplicationJSONErrorDescriptionEnum string

const (
	Tpcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Tpcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Tpcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Tpcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tpcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tpcer503ApplicationJSON - Service unavailable
type Tpcer503ApplicationJSON struct {
	Error            *Tpcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tpcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tpcer502ApplicationJSONErrorEnum string

const (
	Tpcer502ApplicationJSONErrorEnumBadGatewy Tpcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Tpcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Tpcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tpcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Tpcer502ApplicationJSONErrorDescriptionEnum string

const (
	Tpcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Tpcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Tpcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Tpcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tpcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tpcer502ApplicationJSON - Bad gateway
type Tpcer502ApplicationJSON struct {
	Error            *Tpcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tpcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tpcer500ApplicationJSONErrorEnum string

const (
	Tpcer500ApplicationJSONErrorEnumInternalServerError Tpcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Tpcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Tpcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tpcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Tpcer500ApplicationJSONErrorDescriptionEnum string

const (
	Tpcer500ApplicationJSONErrorDescriptionEnumInternalServerError Tpcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Tpcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Tpcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tpcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tpcer500ApplicationJSON - Internal server error
type Tpcer500ApplicationJSON struct {
	Error            *Tpcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tpcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tpcer404ApplicationJSONErrorEnum string

const (
	Tpcer404ApplicationJSONErrorEnumRecordNotFound Tpcer404ApplicationJSONErrorEnum = "record_not_found"
	Tpcer404ApplicationJSONErrorEnumURLNotFound    Tpcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Tpcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Tpcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tpcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Tpcer404ApplicationJSONErrorDescriptionEnum string

const (
	Tpcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Tpcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Tpcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Tpcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Tpcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Tpcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tpcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tpcer404ApplicationJSON - No record found
type Tpcer404ApplicationJSON struct {
	Error            *Tpcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tpcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tpcer401ApplicationJSONErrorEnum string

const (
	Tpcer401ApplicationJSONErrorEnumInvalidAuthentication Tpcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Tpcer401ApplicationJSONErrorEnumInvalidAuthorization  Tpcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Tpcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Tpcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tpcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Tpcer401ApplicationJSONErrorDescriptionEnum string

const (
	Tpcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Tpcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Tpcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Tpcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Tpcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Tpcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tpcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tpcer401ApplicationJSON - Unauthorized access
type Tpcer401ApplicationJSON struct {
	Error            *Tpcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tpcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tpcer400ApplicationJSONErrorEnum string

const (
	Tpcer400ApplicationJSONErrorEnumMissingParameter Tpcer400ApplicationJSONErrorEnum = "missing_parameter"
	Tpcer400ApplicationJSONErrorEnumInvalidParameter Tpcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Tpcer400ApplicationJSONErrorEnumInvalidFormat    Tpcer400ApplicationJSONErrorEnum = "invalid_format"
	Tpcer400ApplicationJSONErrorEnumInvalidTxnid     Tpcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Tpcer400ApplicationJSONErrorEnumInvalidConsentid Tpcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Tpcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Tpcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tpcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Tpcer400ApplicationJSONErrorDescriptionEnum string

const (
	Tpcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Tpcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Tpcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Tpcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Tpcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Tpcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Tpcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Tpcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Tpcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Tpcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Tpcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Tpcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tpcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tpcer400ApplicationJSON - Bad request
type Tpcer400ApplicationJSON struct {
	Error            *Tpcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tpcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type TpcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Tpcer400ApplicationJSONObject *Tpcer400ApplicationJSON
	// Unauthorized access
	Tpcer401ApplicationJSONObject *Tpcer401ApplicationJSON
	// No record found
	Tpcer404ApplicationJSONObject *Tpcer404ApplicationJSON
	// Internal server error
	Tpcer500ApplicationJSONObject *Tpcer500ApplicationJSON
	// Bad gateway
	Tpcer502ApplicationJSONObject *Tpcer502ApplicationJSON
	// Service unavailable
	Tpcer503ApplicationJSONObject *Tpcer503ApplicationJSON
	// Gateway timeout
	Tpcer504ApplicationJSONObject *Tpcer504ApplicationJSON
}
