/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Contributors {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get details about a single contributor
   *
   * @remarks
   * This endpoint shows information about a single contributor, including contributor type, equipment they use, and other attributes.
   */
  getContributor(
    req: operations.GetContributorRequest,
    security: operations.GetContributorSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetContributorResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetContributorRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/contributors/{contributor_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetContributorSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetContributorResponse =
        new operations.GetContributorResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.contributorProfile = utils.objectToClass(
              httpRes?.data,
              shared.ContributorProfile
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get the items in contributors' collections
   *
   * @remarks
   * This endpoint lists the IDs of items in a contributor's collection and the date that each was added.
   */
  getContributorCollectionItems(
    req: operations.GetContributorCollectionItemsRequest,
    security: operations.GetContributorCollectionItemsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetContributorCollectionItemsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetContributorCollectionItemsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/contributors/{contributor_id}/collections/{id}/items",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetContributorCollectionItemsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetContributorCollectionItemsResponse =
        new operations.GetContributorCollectionItemsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.collectionItemDataList = utils.objectToClass(
              httpRes?.data,
              shared.CollectionItemDataList
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get details about contributors' collections
   *
   * @remarks
   * This endpoint gets more detailed information about a contributor's collection, including its cover image, timestamps for its creation, and most recent update. To get the items in collections, use GET /v2/contributors/{contributor_id}/collections/{id}/items.
   */
  getContributorCollections(
    req: operations.GetContributorCollectionsRequest,
    security: operations.GetContributorCollectionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetContributorCollectionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetContributorCollectionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/contributors/{contributor_id}/collections/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetContributorCollectionsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetContributorCollectionsResponse =
        new operations.GetContributorCollectionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.collection = utils.objectToClass(
              httpRes?.data,
              shared.Collection
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List contributors' collections
   *
   * @remarks
   * This endpoint lists collections based on contributor ID.
   */
  getContributorCollectionsList(
    req: operations.GetContributorCollectionsListRequest,
    security: operations.GetContributorCollectionsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetContributorCollectionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetContributorCollectionsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/contributors/{contributor_id}/collections",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetContributorCollectionsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetContributorCollectionsListResponse =
        new operations.GetContributorCollectionsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.collectionDataList = utils.objectToClass(
              httpRes?.data,
              shared.CollectionDataList
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get details about multiple contributors
   *
   * @remarks
   * This endpoint lists information about one or more contributors, including contributor type, equipment they use and other attributes.
   */
  getContributorList(
    req: operations.GetContributorListRequest,
    security: operations.GetContributorListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetContributorListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetContributorListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/contributors";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetContributorListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetContributorListResponse =
        new operations.GetContributorListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.contributorProfileDataList = utils.objectToClass(
              httpRes?.data,
              shared.ContributorProfileDataList
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
