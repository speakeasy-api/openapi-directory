"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import activity as shared_activity
from ..shared import closeddays as shared_closeddays
from ..shared import createjourneyresponse as shared_createjourneyresponse
from ..shared import journeychannelsettings as shared_journeychannelsettings
from ..shared import journeylimits as shared_journeylimits
from ..shared import journeyschedule as shared_journeyschedule
from ..shared import openhours as shared_openhours
from ..shared import quiettime as shared_quiettime
from ..shared import startcondition as shared_startcondition
from ..shared import state_enum as shared_state_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJourneyRequestBodyWriteJourneyRequest:
    r"""Specifies the configuration and other settings for a journey."""
    
    activities: Optional[dict[str, shared_activity.Activity]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Activities'), 'exclude': lambda f: f is None }})  
    closed_days: Optional[shared_closeddays.ClosedDays] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClosedDays'), 'exclude': lambda f: f is None }})  
    creation_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationDate'), 'exclude': lambda f: f is None }})  
    journey_channel_settings: Optional[shared_journeychannelsettings.JourneyChannelSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JourneyChannelSettings'), 'exclude': lambda f: f is None }})  
    last_modified_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedDate'), 'exclude': lambda f: f is None }})  
    limits: Optional[shared_journeylimits.JourneyLimits] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Limits'), 'exclude': lambda f: f is None }})  
    local_time: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LocalTime'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    open_hours: Optional[shared_openhours.OpenHours] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenHours'), 'exclude': lambda f: f is None }})  
    quiet_time: Optional[shared_quiettime.QuietTime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuietTime'), 'exclude': lambda f: f is None }})  
    refresh_frequency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RefreshFrequency'), 'exclude': lambda f: f is None }})  
    refresh_on_segment_update: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RefreshOnSegmentUpdate'), 'exclude': lambda f: f is None }})  
    schedule: Optional[shared_journeyschedule.JourneySchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Schedule'), 'exclude': lambda f: f is None }})  
    sending_schedule: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SendingSchedule'), 'exclude': lambda f: f is None }})  
    start_activity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartActivity'), 'exclude': lambda f: f is None }})  
    start_condition: Optional[shared_startcondition.StartCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartCondition'), 'exclude': lambda f: f is None }})  
    state: Optional[shared_state_enum.StateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }})  
    wait_for_quiet_time: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WaitForQuietTime'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJourneyRequestBody:
    
    write_journey_request: CreateJourneyRequestBodyWriteJourneyRequest = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WriteJourneyRequest') }})
    r"""Specifies the configuration and other settings for a journey."""  
    

@dataclasses.dataclass
class CreateJourneyRequest:
    
    application_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'application-id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console."""  
    request_body: CreateJourneyRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateJourneyResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    create_journey_response: Optional[shared_createjourneyresponse.CreateJourneyResponse] = dataclasses.field(default=None)
    r"""Success"""  
    forbidden_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ForbiddenException"""  
    internal_server_error_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerErrorException"""  
    method_not_allowed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MethodNotAllowedException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    payload_too_large_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PayloadTooLargeException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    