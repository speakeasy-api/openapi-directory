// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateTrailXAmzTargetEnum
type UpdateTrailXAmzTargetEnum string

const (
	UpdateTrailXAmzTargetEnumComAmazonawsCloudtrailV20131101CloudTrail20131101UpdateTrail UpdateTrailXAmzTargetEnum = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.UpdateTrail"
)

func (e UpdateTrailXAmzTargetEnum) ToPointer() *UpdateTrailXAmzTargetEnum {
	return &e
}

func (e *UpdateTrailXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.UpdateTrail":
		*e = UpdateTrailXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTrailXAmzTargetEnum: %v", v)
	}
}

type UpdateTrailRequest struct {
	UpdateTrailRequest shared.UpdateTrailRequest `request:"mediaType=application/json"`
	XAmzAlgorithm      *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget         UpdateTrailXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateTrailResponse struct {
	// CloudTrailARNInvalidException
	CloudTrailARNInvalidException interface{}
	// CloudTrailAccessNotEnabledException
	CloudTrailAccessNotEnabledException interface{}
	// CloudTrailInvalidClientTokenIdException
	CloudTrailInvalidClientTokenIDException interface{}
	// CloudWatchLogsDeliveryUnavailableException
	CloudWatchLogsDeliveryUnavailableException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InsufficientDependencyServiceAccessPermissionException
	InsufficientDependencyServiceAccessPermissionException interface{}
	// InsufficientEncryptionPolicyException
	InsufficientEncryptionPolicyException interface{}
	// InsufficientS3BucketPolicyException
	InsufficientS3BucketPolicyException interface{}
	// InsufficientSnsTopicPolicyException
	InsufficientSnsTopicPolicyException interface{}
	// InvalidCloudWatchLogsLogGroupArnException
	InvalidCloudWatchLogsLogGroupArnException interface{}
	// InvalidCloudWatchLogsRoleArnException
	InvalidCloudWatchLogsRoleArnException interface{}
	// InvalidEventSelectorsException
	InvalidEventSelectorsException interface{}
	// InvalidHomeRegionException
	InvalidHomeRegionException interface{}
	// InvalidKmsKeyIdException
	InvalidKmsKeyIDException interface{}
	// InvalidParameterCombinationException
	InvalidParameterCombinationException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidS3BucketNameException
	InvalidS3BucketNameException interface{}
	// InvalidS3PrefixException
	InvalidS3PrefixException interface{}
	// InvalidSnsTopicNameException
	InvalidSnsTopicNameException interface{}
	// InvalidTrailNameException
	InvalidTrailNameException interface{}
	// KmsException
	KmsException interface{}
	// KmsKeyDisabledException
	KmsKeyDisabledException interface{}
	// KmsKeyNotFoundException
	KmsKeyNotFoundException interface{}
	// NoManagementAccountSLRExistsException
	NoManagementAccountSLRExistsException interface{}
	// NotOrganizationMasterAccountException
	NotOrganizationMasterAccountException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	// OrganizationNotInAllFeaturesModeException
	OrganizationNotInAllFeaturesModeException interface{}
	// OrganizationsNotInUseException
	OrganizationsNotInUseException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// S3BucketDoesNotExistException
	S3BucketDoesNotExistException interface{}
	// TrailNotFoundException
	TrailNotFoundException interface{}
	// TrailNotProvidedException
	TrailNotProvidedException interface{}
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
	// Success
	UpdateTrailResponse *shared.UpdateTrailResponse
}
