"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DependencyEdgeLabelEnum(str, Enum):
    r"""The parse label for the token."""
    UNKNOWN = 'UNKNOWN'
    ABBREV = 'ABBREV'
    ACOMP = 'ACOMP'
    ADVCL = 'ADVCL'
    ADVMOD = 'ADVMOD'
    AMOD = 'AMOD'
    APPOS = 'APPOS'
    ATTR = 'ATTR'
    AUX = 'AUX'
    AUXPASS = 'AUXPASS'
    CC = 'CC'
    CCOMP = 'CCOMP'
    CONJ = 'CONJ'
    CSUBJ = 'CSUBJ'
    CSUBJPASS = 'CSUBJPASS'
    DEP = 'DEP'
    DET = 'DET'
    DISCOURSE = 'DISCOURSE'
    DOBJ = 'DOBJ'
    EXPL = 'EXPL'
    GOESWITH = 'GOESWITH'
    IOBJ = 'IOBJ'
    MARK = 'MARK'
    MWE = 'MWE'
    MWV = 'MWV'
    NEG = 'NEG'
    NN = 'NN'
    NPADVMOD = 'NPADVMOD'
    NSUBJ = 'NSUBJ'
    NSUBJPASS = 'NSUBJPASS'
    NUM = 'NUM'
    NUMBER = 'NUMBER'
    P = 'P'
    PARATAXIS = 'PARATAXIS'
    PARTMOD = 'PARTMOD'
    PCOMP = 'PCOMP'
    POBJ = 'POBJ'
    POSS = 'POSS'
    POSTNEG = 'POSTNEG'
    PRECOMP = 'PRECOMP'
    PRECONJ = 'PRECONJ'
    PREDET = 'PREDET'
    PREF = 'PREF'
    PREP = 'PREP'
    PRONL = 'PRONL'
    PRT = 'PRT'
    PS = 'PS'
    QUANTMOD = 'QUANTMOD'
    RCMOD = 'RCMOD'
    RCMODREL = 'RCMODREL'
    RDROP = 'RDROP'
    REF = 'REF'
    REMNANT = 'REMNANT'
    REPARANDUM = 'REPARANDUM'
    ROOT = 'ROOT'
    SNUM = 'SNUM'
    SUFF = 'SUFF'
    TMOD = 'TMOD'
    TOPIC = 'TOPIC'
    VMOD = 'VMOD'
    VOCATIVE = 'VOCATIVE'
    XCOMP = 'XCOMP'
    SUFFIX = 'SUFFIX'
    TITLE = 'TITLE'
    ADVPHMOD = 'ADVPHMOD'
    AUXCAUS = 'AUXCAUS'
    AUXVV = 'AUXVV'
    DTMOD = 'DTMOD'
    FOREIGN = 'FOREIGN'
    KW = 'KW'
    LIST = 'LIST'
    NOMC = 'NOMC'
    NOMCSUBJ = 'NOMCSUBJ'
    NOMCSUBJPASS = 'NOMCSUBJPASS'
    NUMC = 'NUMC'
    COP = 'COP'
    DISLOCATED = 'DISLOCATED'
    ASP = 'ASP'
    GMOD = 'GMOD'
    GOBJ = 'GOBJ'
    INFMOD = 'INFMOD'
    MES = 'MES'
    NCOMP = 'NCOMP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DependencyEdge:
    r"""Represents dependency parse tree information for a token."""
    
    head_token_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headTokenIndex'), 'exclude': lambda f: f is None }})
    r"""Represents the head of this token in the dependency tree. This is the index of the token which has an arc going to this token. The index is the position of the token in the array of tokens returned by the API method. If this token is a root token, then the `head_token_index` is its own index."""  
    label: Optional[DependencyEdgeLabelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""The parse label for the token."""  
    