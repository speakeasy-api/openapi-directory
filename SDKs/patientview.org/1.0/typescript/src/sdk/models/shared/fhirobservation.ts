/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Group } from "./group";
import { Expose, Transform, Type } from "class-transformer";

export class FhirObservation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "applies" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  applies?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "bodySite" })
  bodySite?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "comparator" })
  comparator?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "diagram" })
  diagram?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "group" })
  @Type(() => Group)
  group?: Group;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "identifier" })
  identifier?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "temporaryUuid" })
  temporaryUuid?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "units" })
  units?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}
