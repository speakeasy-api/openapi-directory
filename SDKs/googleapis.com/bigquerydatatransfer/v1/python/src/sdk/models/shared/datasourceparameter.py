"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DataSourceParameterTypeEnum(str, Enum):
    r"""Parameter type."""
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    DOUBLE = 'DOUBLE'
    BOOLEAN = 'BOOLEAN'
    RECORD = 'RECORD'
    PLUS_PAGE = 'PLUS_PAGE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DataSourceParameter:
    r"""A parameter used to define custom fields in a data source definition."""
    
    allowed_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedValues'), 'exclude': lambda f: f is None }})
    r"""All possible values for the parameter."""  
    deprecated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deprecated'), 'exclude': lambda f: f is None }})
    r"""If true, it should not be used in new transfers, and it should not be visible to users."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Parameter description."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Parameter display name in the user interface."""  
    fields_: Optional[list[DataSourceParameter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fields'), 'exclude': lambda f: f is None }})
    r"""Deprecated. This field has no effect."""  
    immutable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('immutable'), 'exclude': lambda f: f is None }})
    r"""Cannot be changed after initial creation."""  
    max_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxValue'), 'exclude': lambda f: f is None }})
    r"""For integer and double values specifies maximum allowed value."""  
    min_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minValue'), 'exclude': lambda f: f is None }})
    r"""For integer and double values specifies minimum allowed value."""  
    param_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paramId'), 'exclude': lambda f: f is None }})
    r"""Parameter identifier."""  
    recurse: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurse'), 'exclude': lambda f: f is None }})
    r"""Deprecated. This field has no effect."""  
    repeated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repeated'), 'exclude': lambda f: f is None }})
    r"""Deprecated. This field has no effect."""  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""Is parameter required."""  
    type: Optional[DataSourceParameterTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Parameter type."""  
    validation_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validationDescription'), 'exclude': lambda f: f is None }})
    r"""Description of the requirements for this field, in case the user input does not fulfill the regex pattern or min/max values."""  
    validation_help_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validationHelpUrl'), 'exclude': lambda f: f is None }})
    r"""URL to a help document to further explain the naming requirements."""  
    validation_regex: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validationRegex'), 'exclude': lambda f: f is None }})
    r"""Regular expression which can be used for parameter validation."""  
    