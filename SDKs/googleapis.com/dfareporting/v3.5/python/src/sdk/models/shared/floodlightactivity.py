"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dimensionvalue as shared_dimensionvalue
from ..shared import floodlightactivitydynamictag as shared_floodlightactivitydynamictag
from ..shared import floodlightactivitypublisherdynamictag as shared_floodlightactivitypublisherdynamictag
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FloodlightActivityCacheBustingTypeEnum(str, Enum):
    r"""Code type used for cache busting in the generated tag. Applicable only when floodlightActivityGroupType is COUNTER and countingMethod is STANDARD_COUNTING or UNIQUE_COUNTING."""
    JAVASCRIPT = 'JAVASCRIPT'
    ACTIVE_SERVER_PAGE = 'ACTIVE_SERVER_PAGE'
    JSP = 'JSP'
    PHP = 'PHP'
    COLD_FUSION = 'COLD_FUSION'

class FloodlightActivityCountingMethodEnum(str, Enum):
    r"""Counting method for conversions for this floodlight activity. This is a required field."""
    STANDARD_COUNTING = 'STANDARD_COUNTING'
    UNIQUE_COUNTING = 'UNIQUE_COUNTING'
    SESSION_COUNTING = 'SESSION_COUNTING'
    TRANSACTIONS_COUNTING = 'TRANSACTIONS_COUNTING'
    ITEMS_SOLD_COUNTING = 'ITEMS_SOLD_COUNTING'

class FloodlightActivityFloodlightActivityGroupTypeEnum(str, Enum):
    r"""Type of the associated floodlight activity group. This is a read-only field."""
    COUNTER = 'COUNTER'
    SALE = 'SALE'

class FloodlightActivityFloodlightTagTypeEnum(str, Enum):
    r"""The type of Floodlight tag this activity will generate. This is a required field."""
    IFRAME = 'IFRAME'
    IMAGE = 'IMAGE'
    GLOBAL_SITE_TAG = 'GLOBAL_SITE_TAG'

class FloodlightActivityStatusEnum(str, Enum):
    r"""The status of the activity. This can only be set to ACTIVE or ARCHIVED_AND_DISABLED. The ARCHIVED status is no longer supported and cannot be set for Floodlight activities. The DISABLED_POLICY status indicates that a Floodlight activity is violating Google policy. Contact your account manager for more information."""
    ACTIVE = 'ACTIVE'
    ARCHIVED_AND_DISABLED = 'ARCHIVED_AND_DISABLED'
    ARCHIVED = 'ARCHIVED'
    DISABLED_POLICY = 'DISABLED_POLICY'

class FloodlightActivityTagFormatEnum(str, Enum):
    r"""Tag format type for the floodlight activity. If left blank, the tag format will default to HTML."""
    HTML = 'HTML'
    XHTML = 'XHTML'

class FloodlightActivityUserDefinedVariableTypesEnum(str, Enum):
    U1 = 'U1'
    U2 = 'U2'
    U3 = 'U3'
    U4 = 'U4'
    U5 = 'U5'
    U6 = 'U6'
    U7 = 'U7'
    U8 = 'U8'
    U9 = 'U9'
    U10 = 'U10'
    U11 = 'U11'
    U12 = 'U12'
    U13 = 'U13'
    U14 = 'U14'
    U15 = 'U15'
    U16 = 'U16'
    U17 = 'U17'
    U18 = 'U18'
    U19 = 'U19'
    U20 = 'U20'
    U21 = 'U21'
    U22 = 'U22'
    U23 = 'U23'
    U24 = 'U24'
    U25 = 'U25'
    U26 = 'U26'
    U27 = 'U27'
    U28 = 'U28'
    U29 = 'U29'
    U30 = 'U30'
    U31 = 'U31'
    U32 = 'U32'
    U33 = 'U33'
    U34 = 'U34'
    U35 = 'U35'
    U36 = 'U36'
    U37 = 'U37'
    U38 = 'U38'
    U39 = 'U39'
    U40 = 'U40'
    U41 = 'U41'
    U42 = 'U42'
    U43 = 'U43'
    U44 = 'U44'
    U45 = 'U45'
    U46 = 'U46'
    U47 = 'U47'
    U48 = 'U48'
    U49 = 'U49'
    U50 = 'U50'
    U51 = 'U51'
    U52 = 'U52'
    U53 = 'U53'
    U54 = 'U54'
    U55 = 'U55'
    U56 = 'U56'
    U57 = 'U57'
    U58 = 'U58'
    U59 = 'U59'
    U60 = 'U60'
    U61 = 'U61'
    U62 = 'U62'
    U63 = 'U63'
    U64 = 'U64'
    U65 = 'U65'
    U66 = 'U66'
    U67 = 'U67'
    U68 = 'U68'
    U69 = 'U69'
    U70 = 'U70'
    U71 = 'U71'
    U72 = 'U72'
    U73 = 'U73'
    U74 = 'U74'
    U75 = 'U75'
    U76 = 'U76'
    U77 = 'U77'
    U78 = 'U78'
    U79 = 'U79'
    U80 = 'U80'
    U81 = 'U81'
    U82 = 'U82'
    U83 = 'U83'
    U84 = 'U84'
    U85 = 'U85'
    U86 = 'U86'
    U87 = 'U87'
    U88 = 'U88'
    U89 = 'U89'
    U90 = 'U90'
    U91 = 'U91'
    U92 = 'U92'
    U93 = 'U93'
    U94 = 'U94'
    U95 = 'U95'
    U96 = 'U96'
    U97 = 'U97'
    U98 = 'U98'
    U99 = 'U99'
    U100 = 'U100'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FloodlightActivity:
    r"""Contains properties of a Floodlight activity."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Account ID of this floodlight activity. This is a read-only field that can be left blank."""  
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""Advertiser ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's advertiser or the existing activity's advertiser."""  
    advertiser_id_dimension_value: Optional[shared_dimensionvalue.DimensionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserIdDimensionValue'), 'exclude': lambda f: f is None }})
    r"""Represents a DimensionValue resource."""  
    attribution_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributionEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether the activity is enabled for attribution."""  
    cache_busting_type: Optional[FloodlightActivityCacheBustingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cacheBustingType'), 'exclude': lambda f: f is None }})
    r"""Code type used for cache busting in the generated tag. Applicable only when floodlightActivityGroupType is COUNTER and countingMethod is STANDARD_COUNTING or UNIQUE_COUNTING."""  
    counting_method: Optional[FloodlightActivityCountingMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countingMethod'), 'exclude': lambda f: f is None }})
    r"""Counting method for conversions for this floodlight activity. This is a required field."""  
    default_tags: Optional[list[shared_floodlightactivitydynamictag.FloodlightActivityDynamicTag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultTags'), 'exclude': lambda f: f is None }})
    r"""Dynamic floodlight tags."""  
    expected_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expectedUrl'), 'exclude': lambda f: f is None }})
    r"""URL where this tag will be deployed. If specified, must be less than 256 characters long."""  
    floodlight_activity_group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floodlightActivityGroupId'), 'exclude': lambda f: f is None }})
    r"""Floodlight activity group ID of this floodlight activity. This is a required field."""  
    floodlight_activity_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floodlightActivityGroupName'), 'exclude': lambda f: f is None }})
    r"""Name of the associated floodlight activity group. This is a read-only field."""  
    floodlight_activity_group_tag_string: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floodlightActivityGroupTagString'), 'exclude': lambda f: f is None }})
    r"""Tag string of the associated floodlight activity group. This is a read-only field."""  
    floodlight_activity_group_type: Optional[FloodlightActivityFloodlightActivityGroupTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floodlightActivityGroupType'), 'exclude': lambda f: f is None }})
    r"""Type of the associated floodlight activity group. This is a read-only field."""  
    floodlight_configuration_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floodlightConfigurationId'), 'exclude': lambda f: f is None }})
    r"""Floodlight configuration ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's floodlight configuration or from the existing activity's floodlight configuration."""  
    floodlight_configuration_id_dimension_value: Optional[shared_dimensionvalue.DimensionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floodlightConfigurationIdDimensionValue'), 'exclude': lambda f: f is None }})
    r"""Represents a DimensionValue resource."""  
    floodlight_tag_type: Optional[FloodlightActivityFloodlightTagTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floodlightTagType'), 'exclude': lambda f: f is None }})
    r"""The type of Floodlight tag this activity will generate. This is a required field."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of this floodlight activity. This is a read-only, auto-generated field."""  
    id_dimension_value: Optional[shared_dimensionvalue.DimensionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idDimensionValue'), 'exclude': lambda f: f is None }})
    r"""Represents a DimensionValue resource."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"dfareporting#floodlightActivity\\"."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of this floodlight activity. This is a required field. Must be less than 129 characters long and cannot contain quotes."""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""General notes or implementation instructions for the tag."""  
    publisher_tags: Optional[list[shared_floodlightactivitypublisherdynamictag.FloodlightActivityPublisherDynamicTag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisherTags'), 'exclude': lambda f: f is None }})
    r"""Publisher dynamic floodlight tags."""  
    secure: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secure'), 'exclude': lambda f: f is None }})
    r"""Whether this tag should use SSL."""  
    ssl_compliant: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sslCompliant'), 'exclude': lambda f: f is None }})
    r"""Whether the floodlight activity is SSL-compliant. This is a read-only field, its value detected by the system from the floodlight tags."""  
    ssl_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sslRequired'), 'exclude': lambda f: f is None }})
    r"""Whether this floodlight activity must be SSL-compliant."""  
    status: Optional[FloodlightActivityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the activity. This can only be set to ACTIVE or ARCHIVED_AND_DISABLED. The ARCHIVED status is no longer supported and cannot be set for Floodlight activities. The DISABLED_POLICY status indicates that a Floodlight activity is violating Google policy. Contact your account manager for more information."""  
    subaccount_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subaccountId'), 'exclude': lambda f: f is None }})
    r"""Subaccount ID of this floodlight activity. This is a read-only field that can be left blank."""  
    tag_format: Optional[FloodlightActivityTagFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagFormat'), 'exclude': lambda f: f is None }})
    r"""Tag format type for the floodlight activity. If left blank, the tag format will default to HTML."""  
    tag_string: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagString'), 'exclude': lambda f: f is None }})
    r"""Value of the cat= parameter in the floodlight tag, which the ad servers use to identify the activity. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being a-z0-9[ _ ]. This tag string must also be unique among activities of the same activity group. This field is read-only after insertion."""  
    user_defined_variable_types: Optional[list[FloodlightActivityUserDefinedVariableTypesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userDefinedVariableTypes'), 'exclude': lambda f: f is None }})
    r"""List of the user-defined variables used by this conversion tag. These map to the \\"u[1-100]=\\" in the tags. Each of these can have a user defined type. Acceptable values are U1 to U100, inclusive."""  
    