"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Devices:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_device_code(self, request: shared.CreateDeviceCodeRequest, security: operations.CreateDeviceCodeSecurity) -> operations.CreateDeviceCodeResponse:
        r"""CreateDeviceCode
        Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected
        terminal mode.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/devices/codes'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateDeviceCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateDeviceCodeResponse])
                res.create_device_code_response = out

        return res

    def get_device_code(self, request: operations.GetDeviceCodeRequest, security: operations.GetDeviceCodeSecurity) -> operations.GetDeviceCodeResponse:
        r"""GetDeviceCode
        Retrieves DeviceCode with the associated ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceCodeRequest, base_url, '/v2/devices/codes/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetDeviceCodeResponse])
                res.get_device_code_response = out

        return res

    def list_device_codes(self, request: operations.ListDeviceCodesRequest, security: operations.ListDeviceCodesSecurity) -> operations.ListDeviceCodesResponse:
        r"""ListDeviceCodes
        Lists all DeviceCodes associated with the merchant.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/devices/codes'
        
        query_params = utils.get_query_params(operations.ListDeviceCodesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListDeviceCodesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListDeviceCodesResponse])
                res.list_device_codes_response = out

        return res

    