// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeregisterInstanceEventNotificationAttributesActionEnum
type GETDeregisterInstanceEventNotificationAttributesActionEnum string

const (
	GETDeregisterInstanceEventNotificationAttributesActionEnumDeregisterInstanceEventNotificationAttributes GETDeregisterInstanceEventNotificationAttributesActionEnum = "DeregisterInstanceEventNotificationAttributes"
)

func (e GETDeregisterInstanceEventNotificationAttributesActionEnum) ToPointer() *GETDeregisterInstanceEventNotificationAttributesActionEnum {
	return &e
}

func (e *GETDeregisterInstanceEventNotificationAttributesActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DeregisterInstanceEventNotificationAttributes":
		*e = GETDeregisterInstanceEventNotificationAttributesActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeregisterInstanceEventNotificationAttributesActionEnum: %v", v)
	}
}

// GETDeregisterInstanceEventNotificationAttributesInstanceTagAttribute - Information about the tag keys to deregister for the current Region. You can either specify individual tag keys or deregister all tag keys in the current Region. You must specify either <code>IncludeAllTagsOfInstance</code> or <code>InstanceTagKeys</code> in the request
type GETDeregisterInstanceEventNotificationAttributesInstanceTagAttribute struct {
	IncludeAllTagsOfInstance *bool    `queryParam:"name=IncludeAllTagsOfInstance"`
	InstanceTagKeys          []string `queryParam:"name=InstanceTagKeys"`
}

// GETDeregisterInstanceEventNotificationAttributesVersionEnum
type GETDeregisterInstanceEventNotificationAttributesVersionEnum string

const (
	GETDeregisterInstanceEventNotificationAttributesVersionEnumTwoThousandAndSixteen1115 GETDeregisterInstanceEventNotificationAttributesVersionEnum = "2016-11-15"
)

func (e GETDeregisterInstanceEventNotificationAttributesVersionEnum) ToPointer() *GETDeregisterInstanceEventNotificationAttributesVersionEnum {
	return &e
}

func (e *GETDeregisterInstanceEventNotificationAttributesVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETDeregisterInstanceEventNotificationAttributesVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeregisterInstanceEventNotificationAttributesVersionEnum: %v", v)
	}
}

type GETDeregisterInstanceEventNotificationAttributesRequest struct {
	Action GETDeregisterInstanceEventNotificationAttributesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// Information about the tag keys to deregister.
	InstanceTagAttribute *GETDeregisterInstanceEventNotificationAttributesInstanceTagAttribute `queryParam:"style=form,explode=true,name=InstanceTagAttribute"`
	Version              GETDeregisterInstanceEventNotificationAttributesVersionEnum           `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm        *string                                                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                                                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                                                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                                                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                                                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                                                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                                                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeregisterInstanceEventNotificationAttributesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
