"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class InputMappingLocationEnum(str, Enum):
    r"""The location where this mapping applies."""
    UNKNOWN = 'UNKNOWN'
    PATH = 'PATH'
    QUERY = 'QUERY'
    BODY = 'BODY'
    HEADER = 'HEADER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InputMapping:
    r"""InputMapping creates a 'virtual' property that will be injected into the properties before sending the request to the underlying API."""
    
    field_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldName'), 'exclude': lambda f: f is None }})
    r"""The name of the field that is going to be injected."""  
    location: Optional[InputMappingLocationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""The location where this mapping applies."""  
    method_match: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('methodMatch'), 'exclude': lambda f: f is None }})
    r"""Regex to evaluate on method to decide if input applies."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""A jsonPath expression to select an element."""  
    