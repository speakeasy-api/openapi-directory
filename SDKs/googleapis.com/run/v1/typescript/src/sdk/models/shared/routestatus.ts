/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Addressable } from "./addressable";
import { GoogleCloudRunV1Condition } from "./googlecloudrunv1condition";
import { TrafficTarget } from "./traffictarget";
import { Expose, Type } from "class-transformer";

/**
 * RouteStatus communicates the observed state of the Route (from the controller).
 */
export class RouteStatus extends SpeakeasyBase {
  /**
   * Information for connecting over HTTP(s).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => Addressable)
  address?: Addressable;

  /**
   * Conditions communicates information about ongoing/complete reconciliation processes that bring the "spec" inline with the observed state of the world.
   */
  @SpeakeasyMetadata({ elemType: GoogleCloudRunV1Condition })
  @Expose({ name: "conditions" })
  @Type(() => GoogleCloudRunV1Condition)
  conditions?: GoogleCloudRunV1Condition[];

  /**
   * ObservedGeneration is the 'Generation' of the Route that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False. Note that providing a TrafficTarget that has latest_revision=True will result in a Route that does not increment either its metadata.generation or its observedGeneration, as new "latest ready" revisions from the Configuration are processed without an update to the Route's spec.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "observedGeneration" })
  observedGeneration?: number;

  /**
   * Traffic holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that was last observed.
   */
  @SpeakeasyMetadata({ elemType: TrafficTarget })
  @Expose({ name: "traffic" })
  @Type(() => TrafficTarget)
  traffic?: TrafficTarget[];

  /**
   * URL holds the url that will distribute traffic over the provided traffic targets. It generally has the form: https://{route-hash}-{project-hash}-{cluster-level-suffix}.a.run.app
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}
