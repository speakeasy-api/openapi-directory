// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type PermissionAccessModeEnum string

const (
	PermissionAccessModeEnumView   PermissionAccessModeEnum = "VIEW"
	PermissionAccessModeEnumStore  PermissionAccessModeEnum = "STORE"
	PermissionAccessModeEnumQuery  PermissionAccessModeEnum = "QUERY"
	PermissionAccessModeEnumStream PermissionAccessModeEnum = "STREAM"
)

func (e PermissionAccessModeEnum) ToPointer() *PermissionAccessModeEnum {
	return &e
}

func (e *PermissionAccessModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VIEW":
		fallthrough
	case "STORE":
		fallthrough
	case "QUERY":
		fallthrough
	case "STREAM":
		*e = PermissionAccessModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PermissionAccessModeEnum: %v", v)
	}
}

type PermissionDateRange struct {
	From *time.Time `json:"from,omitempty"`
	To   *time.Time `json:"to,omitempty"`
}

type PermissionFrequencyUnitEnum string

const (
	PermissionFrequencyUnitEnumHour  PermissionFrequencyUnitEnum = "HOUR"
	PermissionFrequencyUnitEnumWeek  PermissionFrequencyUnitEnum = "WEEK"
	PermissionFrequencyUnitEnumDay   PermissionFrequencyUnitEnum = "DAY"
	PermissionFrequencyUnitEnumMonth PermissionFrequencyUnitEnum = "MONTH"
	PermissionFrequencyUnitEnumYear  PermissionFrequencyUnitEnum = "YEAR"
)

func (e PermissionFrequencyUnitEnum) ToPointer() *PermissionFrequencyUnitEnum {
	return &e
}

func (e *PermissionFrequencyUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HOUR":
		fallthrough
	case "WEEK":
		fallthrough
	case "DAY":
		fallthrough
	case "MONTH":
		fallthrough
	case "YEAR":
		*e = PermissionFrequencyUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PermissionFrequencyUnitEnum: %v", v)
	}
}

type PermissionFrequency struct {
	Repeats *int64                       `json:"repeats,omitempty"`
	Unit    *PermissionFrequencyUnitEnum `json:"unit,omitempty"`
	Value   *int64                       `json:"value,omitempty"`
}

type Permission struct {
	AccessMode  PermissionAccessModeEnum `json:"accessMode"`
	DataEraseAt time.Time                `json:"dataEraseAt"`
	DateRange   PermissionDateRange      `json:"dateRange"`
	Frequency   PermissionFrequency      `json:"frequency"`
}
