"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioConstructionInvestableRequestBody:
    
    assets: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assets') }})
    r"""The number of assets"""  
    assets_prices: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsPrices') }})
    r"""assetsPrices[i] is the price of the asset i"""  
    portfolio_value: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolioValue') }})
    r"""The monetary value of the portfolio"""  
    assets_groups: Optional[list[list[int]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsGroups'), 'exclude': lambda f: f is None }})  
    assets_groups_weights: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsGroupsWeights'), 'exclude': lambda f: f is None }})
    r"""assetsGroupsWeights[i] is the desired weight of the assets group k in the portfolio, in percentage (can be null to indicate no specific desire); requires assetsGroups to be present"""  
    assets_minimum_notional_values: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsMinimumNotionalValues'), 'exclude': lambda f: f is None }})
    r"""assetsMinimumNotionalValues[i] is the minimum monetary value that the position in the asset i is required to represent when the asset i is included in the portfolio"""  
    assets_minimum_positions: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsMinimumPositions'), 'exclude': lambda f: f is None }})
    r"""assetsMinimumPositions[i] is the minimum number of shares of the asset i that is required to purchase when the asset i is included in the portfolio (usual values are the same as for assetsSizeLots)"""  
    assets_size_lots: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsSizeLots'), 'exclude': lambda f: f is None }})
    r"""assetsSizeLots[i] is the number of shares by which it is required to purchase the asset i (usual values are 1 if the asset needs to be purchased share by share, 100 if the asset needs to be purchased by an integer multiple of 100 shares, and 1/1000000 - e.g. for Robinhood broker - if the asset can be purchased by fractional shares)"""  
    assets_weights: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsWeights'), 'exclude': lambda f: f is None }})
    r"""assetsWeights[i] is the desired weight of the asset i in the portfolio, in percentage (can be null to indicate no specific desire)"""  
    maximum_assets_groups_weights: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumAssetsGroupsWeights'), 'exclude': lambda f: f is None }})
    r"""maximumAssetsGroupsWeights[k] is the maximum desired weight of the assets group k in the portfolio, in percentage (can be null to indicate no specific desire); requires assetsGroups to be present"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioConstructionInvestable200ApplicationJSON:
    r"""OK"""
    
    assets_positions: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsPositions') }})
    r"""assetsPositions[i] is the number of shares of the asset i in the portfolio"""  
    assets_weights: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsWeights') }})
    r"""assetsWeights[i] is the weight of the asset i in the portfolio, in percentage"""  
    

@dataclasses.dataclass
class PostPortfolioConstructionInvestableResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_portfolio_construction_investable_200_application_json_object: Optional[PostPortfolioConstructionInvestable200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    