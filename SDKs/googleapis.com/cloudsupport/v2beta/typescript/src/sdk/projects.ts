/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve all attachments associated with a support case.
   */
  cloudsupportProjectsCasesAttachmentsList(
    req: operations.CloudsupportProjectsCasesAttachmentsListRequest,
    security: operations.CloudsupportProjectsCasesAttachmentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsupportProjectsCasesAttachmentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsupportProjectsCasesAttachmentsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta/{parent}/attachments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CloudsupportProjectsCasesAttachmentsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsupportProjectsCasesAttachmentsListResponse =
        new operations.CloudsupportProjectsCasesAttachmentsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAttachmentsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAttachmentsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Close the specified case.
   */
  cloudsupportProjectsCasesClose(
    req: operations.CloudsupportProjectsCasesCloseRequest,
    security: operations.CloudsupportProjectsCasesCloseSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsupportProjectsCasesCloseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsupportProjectsCasesCloseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2beta/{name}:close", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudsupportProjectsCasesCloseSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsupportProjectsCasesCloseResponse =
        new operations.CloudsupportProjectsCasesCloseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.case = utils.objectToClass(httpRes?.data, shared.Case);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add a new comment to the specified Case. The comment object must have the following fields set: body.
   */
  cloudsupportProjectsCasesCommentsCreate(
    req: operations.CloudsupportProjectsCasesCommentsCreateRequest,
    security: operations.CloudsupportProjectsCasesCommentsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsupportProjectsCasesCommentsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsupportProjectsCasesCommentsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta/{parent}/comments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "commentInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudsupportProjectsCasesCommentsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsupportProjectsCasesCommentsCreateResponse =
        new operations.CloudsupportProjectsCasesCommentsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.comment = utils.objectToClass(httpRes?.data, shared.Comment);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve all Comments associated with the Case object.
   */
  cloudsupportProjectsCasesCommentsList(
    req: operations.CloudsupportProjectsCasesCommentsListRequest,
    security: operations.CloudsupportProjectsCasesCommentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsupportProjectsCasesCommentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsupportProjectsCasesCommentsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta/{parent}/comments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudsupportProjectsCasesCommentsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsupportProjectsCasesCommentsListResponse =
        new operations.CloudsupportProjectsCasesCommentsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCommentsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListCommentsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new case and associate it with the given Cloud resource. The case object must have the following fields set: display_name, description, classification, and severity.
   */
  cloudsupportProjectsCasesCreate(
    req: operations.CloudsupportProjectsCasesCreateRequest,
    security: operations.CloudsupportProjectsCasesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsupportProjectsCasesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsupportProjectsCasesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta/{parent}/cases",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "caseInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudsupportProjectsCasesCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsupportProjectsCasesCreateResponse =
        new operations.CloudsupportProjectsCasesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.case = utils.objectToClass(httpRes?.data, shared.Case);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Escalate a case. Escalating a case will initiate the Cloud Support escalation management process. This operation is only available to certain Customer Care tiers. Go to https://cloud.google.com/support and look for 'Technical support escalations' in the feature list to find out which tiers are able to perform escalations.
   */
  cloudsupportProjectsCasesEscalate(
    req: operations.CloudsupportProjectsCasesEscalateRequest,
    security: operations.CloudsupportProjectsCasesEscalateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsupportProjectsCasesEscalateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsupportProjectsCasesEscalateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta/{name}:escalate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "escalateCaseRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudsupportProjectsCasesEscalateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsupportProjectsCasesEscalateResponse =
        new operations.CloudsupportProjectsCasesEscalateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.case = utils.objectToClass(httpRes?.data, shared.Case);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve the specified case.
   */
  cloudsupportProjectsCasesGet(
    req: operations.CloudsupportProjectsCasesGetRequest,
    security: operations.CloudsupportProjectsCasesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsupportProjectsCasesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsupportProjectsCasesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2beta/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudsupportProjectsCasesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsupportProjectsCasesGetResponse =
        new operations.CloudsupportProjectsCasesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.case = utils.objectToClass(httpRes?.data, shared.Case);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve all cases under the specified parent. Note: Listing cases under an Organization returns only the cases directly parented by that organization. To retrieve all cases under an organization, including cases parented by projects under that organization, use `cases.search`.
   */
  cloudsupportProjectsCasesList(
    req: operations.CloudsupportProjectsCasesListRequest,
    security: operations.CloudsupportProjectsCasesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsupportProjectsCasesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsupportProjectsCasesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta/{parent}/cases",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudsupportProjectsCasesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsupportProjectsCasesListResponse =
        new operations.CloudsupportProjectsCasesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCasesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListCasesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update the specified case. Only a subset of fields can be updated.
   */
  cloudsupportProjectsUpdateCases(
    req: operations.CloudsupportProjectsUpdateCasesRequest,
    security: operations.CloudsupportProjectsUpdateCasesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudsupportProjectsUpdateCasesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudsupportProjectsUpdateCasesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2beta/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "caseInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudsupportProjectsUpdateCasesSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudsupportProjectsUpdateCasesResponse =
        new operations.CloudsupportProjectsUpdateCasesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.case = utils.objectToClass(httpRes?.data, shared.Case);
          }
          break;
      }

      return res;
    });
  }
}
