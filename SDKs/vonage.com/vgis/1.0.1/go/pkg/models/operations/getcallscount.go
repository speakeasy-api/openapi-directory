// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetCallsCountDirectionEnum - Filter by call direction. For multiple criteria, seperate values by a comma.
type GetCallsCountDirectionEnum string

const (
	GetCallsCountDirectionEnumInbound  GetCallsCountDirectionEnum = "INBOUND"
	GetCallsCountDirectionEnumOutbound GetCallsCountDirectionEnum = "OUTBOUND"
)

func (e GetCallsCountDirectionEnum) ToPointer() *GetCallsCountDirectionEnum {
	return &e
}

func (e *GetCallsCountDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INBOUND":
		fallthrough
	case "OUTBOUND":
		*e = GetCallsCountDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCallsCountDirectionEnum: %v", v)
	}
}

// GetCallsCountStatesEnum - Filter calls by state. For multiple criteria, seperate values by a comma.
type GetCallsCountStatesEnum string

const (
	GetCallsCountStatesEnumInitializing GetCallsCountStatesEnum = "INITIALIZING"
	GetCallsCountStatesEnumRinging      GetCallsCountStatesEnum = "RINGING"
	GetCallsCountStatesEnumActive       GetCallsCountStatesEnum = "ACTIVE"
	GetCallsCountStatesEnumHeld         GetCallsCountStatesEnum = "HELD"
	GetCallsCountStatesEnumRemoteHeld   GetCallsCountStatesEnum = "REMOTE_HELD"
)

func (e GetCallsCountStatesEnum) ToPointer() *GetCallsCountStatesEnum {
	return &e
}

func (e *GetCallsCountStatesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALIZING":
		fallthrough
	case "RINGING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "HELD":
		fallthrough
	case "REMOTE_HELD":
		*e = GetCallsCountStatesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCallsCountStatesEnum: %v", v)
	}
}

type GetCallsCountRequest struct {
	// Filter by call direction. For multiple criteria, seperate values by a comma.
	Direction *GetCallsCountDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// Return calls that occurred after this point in time
	FromDate *int64 `queryParam:"style=form,explode=true,name=fromDate"`
	// Filter calls by state. For multiple criteria, seperate values by a comma.
	States *GetCallsCountStatesEnum `queryParam:"style=form,explode=true,name=states"`
	// Return calls that occurred before this point in time
	ToDate *int64 `queryParam:"style=form,explode=true,name=toDate"`
}

type GetCallsCountResponse struct {
	ContentType string
	// Bad Request: The client should not repeat the request without modifications
	ErrorResponse *shared.ErrorResponse
	// Successful
	EventsCount *shared.EventsCount
	StatusCode  int
	RawResponse *http.Response
}
