// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DiscoveryOccurrenceAnalysisStatusEnum - The status of discovery for the resource.
type DiscoveryOccurrenceAnalysisStatusEnum string

const (
	DiscoveryOccurrenceAnalysisStatusEnumAnalysisStatusUnspecified DiscoveryOccurrenceAnalysisStatusEnum = "ANALYSIS_STATUS_UNSPECIFIED"
	DiscoveryOccurrenceAnalysisStatusEnumPending                   DiscoveryOccurrenceAnalysisStatusEnum = "PENDING"
	DiscoveryOccurrenceAnalysisStatusEnumScanning                  DiscoveryOccurrenceAnalysisStatusEnum = "SCANNING"
	DiscoveryOccurrenceAnalysisStatusEnumFinishedSuccess           DiscoveryOccurrenceAnalysisStatusEnum = "FINISHED_SUCCESS"
	DiscoveryOccurrenceAnalysisStatusEnumComplete                  DiscoveryOccurrenceAnalysisStatusEnum = "COMPLETE"
	DiscoveryOccurrenceAnalysisStatusEnumFinishedFailed            DiscoveryOccurrenceAnalysisStatusEnum = "FINISHED_FAILED"
	DiscoveryOccurrenceAnalysisStatusEnumFinishedUnsupported       DiscoveryOccurrenceAnalysisStatusEnum = "FINISHED_UNSUPPORTED"
)

func (e DiscoveryOccurrenceAnalysisStatusEnum) ToPointer() *DiscoveryOccurrenceAnalysisStatusEnum {
	return &e
}

func (e *DiscoveryOccurrenceAnalysisStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ANALYSIS_STATUS_UNSPECIFIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "SCANNING":
		fallthrough
	case "FINISHED_SUCCESS":
		fallthrough
	case "COMPLETE":
		fallthrough
	case "FINISHED_FAILED":
		fallthrough
	case "FINISHED_UNSUPPORTED":
		*e = DiscoveryOccurrenceAnalysisStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DiscoveryOccurrenceAnalysisStatusEnum: %v", v)
	}
}

// DiscoveryOccurrenceContinuousAnalysisEnum - Whether the resource is continuously analyzed.
type DiscoveryOccurrenceContinuousAnalysisEnum string

const (
	DiscoveryOccurrenceContinuousAnalysisEnumContinuousAnalysisUnspecified DiscoveryOccurrenceContinuousAnalysisEnum = "CONTINUOUS_ANALYSIS_UNSPECIFIED"
	DiscoveryOccurrenceContinuousAnalysisEnumActive                        DiscoveryOccurrenceContinuousAnalysisEnum = "ACTIVE"
	DiscoveryOccurrenceContinuousAnalysisEnumInactive                      DiscoveryOccurrenceContinuousAnalysisEnum = "INACTIVE"
)

func (e DiscoveryOccurrenceContinuousAnalysisEnum) ToPointer() *DiscoveryOccurrenceContinuousAnalysisEnum {
	return &e
}

func (e *DiscoveryOccurrenceContinuousAnalysisEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CONTINUOUS_ANALYSIS_UNSPECIFIED":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		*e = DiscoveryOccurrenceContinuousAnalysisEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DiscoveryOccurrenceContinuousAnalysisEnum: %v", v)
	}
}

// DiscoveryOccurrence - Provides information about the analysis status of a discovered resource.
type DiscoveryOccurrence struct {
	// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
	AnalysisCompleted *AnalysisCompleted `json:"analysisCompleted,omitempty"`
	// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
	AnalysisError []Status `json:"analysisError,omitempty"`
	// The status of discovery for the resource.
	AnalysisStatus *DiscoveryOccurrenceAnalysisStatusEnum `json:"analysisStatus,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	AnalysisStatusError *Status `json:"analysisStatusError,omitempty"`
	// Output only. The time occurrences related to this discovery occurrence were archived.
	ArchiveTime *string `json:"archiveTime,omitempty"`
	// Whether the resource is continuously analyzed.
	ContinuousAnalysis *DiscoveryOccurrenceContinuousAnalysisEnum `json:"continuousAnalysis,omitempty"`
	// The CPE of the resource being scanned.
	Cpe *string `json:"cpe,omitempty"`
	// The last time this resource was scanned.
	LastScanTime *string `json:"lastScanTime,omitempty"`
}
