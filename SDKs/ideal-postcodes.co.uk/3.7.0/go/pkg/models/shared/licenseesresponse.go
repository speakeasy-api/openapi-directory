// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LicenseesResponseCodeEnum string

const (
	LicenseesResponseCodeEnumTwoThousand LicenseesResponseCodeEnum = "2000"
)

func (e *LicenseesResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = LicenseesResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LicenseesResponseCodeEnum: %s", s)
	}
}

type LicenseesResponseMessageEnum string

const (
	LicenseesResponseMessageEnumSuccess LicenseesResponseMessageEnum = "Success"
)

func (e *LicenseesResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = LicenseesResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LicenseesResponseMessageEnum: %s", s)
	}
}

// LicenseesResponseResult - List of licensees
type LicenseesResponseResult struct {
	// Returns true if there are more licensees listed after the maximum number of results as implied by `limit`
	HasMore   *bool      `json:"hasMore,omitempty"`
	Licensees []Licensee `json:"licensees,omitempty"`
}

// LicenseesResponse - Success
type LicenseesResponse struct {
	Code    LicenseesResponseCodeEnum    `json:"code"`
	Message LicenseesResponseMessageEnum `json:"message"`
	// List of licensees
	Result LicenseesResponseResult `json:"result"`
}
