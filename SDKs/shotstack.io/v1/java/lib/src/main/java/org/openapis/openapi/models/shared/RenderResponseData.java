/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RenderResponseData - The response data returned with the [RenderResponse](#tocs_renderresponse) including status and URL.
 */
public class RenderResponseData {
    /**
     * The time the render task was initially queued.
     */
    @JsonProperty("created")
    public String created;
    public RenderResponseData withCreated(String created) {
        this.created = created;
        return this;
    }
    
    /**
     * An edit defines the arrangement of a video on a timeline, an audio edit or an image design and the output format.
     */
    @JsonProperty("data")
    public Edit data;
    public RenderResponseData withData(Edit data) {
        this.data = data;
        return this;
    }
    
    /**
     * The output video or audio length in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Double duration;
    public RenderResponseData withDuration(Double duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * An error message, only displayed if an error occurred.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    public String error;
    public RenderResponseData withError(String error) {
        this.error = error;
        return this;
    }
    
    /**
     * The id of the render task in UUID format.
     */
    @JsonProperty("id")
    public String id;
    public RenderResponseData withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The owner id of the render task.
     */
    @JsonProperty("owner")
    public String owner;
    public RenderResponseData withOwner(String owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * The customer subscription plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plan")
    public String plan;
    public RenderResponseData withPlan(String plan) {
        this.plan = plan;
        return this;
    }
    
    /**
     * The URL of the poster image if requested. This will only be available if status is done.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("poster")
    public String poster;
    public RenderResponseData withPoster(String poster) {
        this.poster = poster;
        return this;
    }
    
    /**
     * The time taken to render the asset in milliseconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("renderTime")
    public Double renderTime;
    public RenderResponseData withRenderTime(Double renderTime) {
        this.renderTime = renderTime;
        return this;
    }
    
    /**
     * The status of the render task. &lt;ul&gt;
     *   &lt;li&gt;`queued` - render is queued waiting to be rendered&lt;/li&gt;
     *   &lt;li&gt;`fetching` - assets are being fetched&lt;/li&gt;
     *   &lt;li&gt;`rendering` - the asset is being rendered&lt;/li&gt;
     *   &lt;li&gt;`saving` - the final asset is being saved to storage&lt;/li&gt;
     *   &lt;li&gt;`done` - the asset is ready to be downloaded&lt;/li&gt;
     *   &lt;li&gt;`failed` - there was an error rendering the asset&lt;/li&gt;
     * &lt;/ul&gt;
     */
    @JsonProperty("status")
    public RenderResponseDataStatusEnum status;
    public RenderResponseData withStatus(RenderResponseDataStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The URL of the thumbnail image if requested. This will only be available if status is done.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnail")
    public String thumbnail;
    public RenderResponseData withThumbnail(String thumbnail) {
        this.thumbnail = thumbnail;
        return this;
    }
    
    /**
     * The time the render status was last updated.
     */
    @JsonProperty("updated")
    public String updated;
    public RenderResponseData withUpdated(String updated) {
        this.updated = updated;
        return this;
    }
    
    /**
     * The URL of the final asset. This will only be available if status is done. This is a temporary URL and will be deleted after 24 hours. By default all assets are copied to the Shotstack hosting and CDN destination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public RenderResponseData withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
