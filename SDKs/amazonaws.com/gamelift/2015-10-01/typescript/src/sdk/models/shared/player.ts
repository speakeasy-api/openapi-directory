/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AttributeValue } from "./attributevalue";
import { Expose, Transform } from "class-transformer";

/**
 * Represents a player in matchmaking. When starting a matchmaking request, a player has a player ID, attributes, and may have latency data. Team information is added after a match has been successfully completed.
 */
export class Player extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "LatencyInMs" })
  latencyInMs?: Record<string, number>;

  @SpeakeasyMetadata({ elemType: AttributeValue })
  @Expose({ name: "PlayerAttributes" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AttributeValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AttributeValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  playerAttributes?: Record<string, AttributeValue>;

  @SpeakeasyMetadata()
  @Expose({ name: "PlayerId" })
  playerId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Team" })
  team?: string;
}
