"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import simple_user as shared_simple_user
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SimpleRepository:
    r"""A GitHub repository."""
    
    archive_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archive_url') }})
    r"""A template for the API URL to download the repository as an archive."""  
    assignees_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignees_url') }})
    r"""A template for the API URL to list the available assignees for issues in the repository."""  
    blobs_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blobs_url') }})
    r"""A template for the API URL to create or retrieve a raw Git blob in the repository."""  
    branches_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branches_url') }})
    r"""A template for the API URL to get information about branches in the repository."""  
    collaborators_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collaborators_url') }})
    r"""A template for the API URL to get information about collaborators of the repository."""  
    comments_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments_url') }})
    r"""A template for the API URL to get information about comments on the repository."""  
    commits_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commits_url') }})
    r"""A template for the API URL to get information about commits on the repository."""  
    compare_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compare_url') }})
    r"""A template for the API URL to compare two commits or refs."""  
    contents_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contents_url') }})
    r"""A template for the API URL to get the contents of the repository."""  
    contributors_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributors_url') }})
    r"""A template for the API URL to list the contributors to the repository."""  
    deployments_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deployments_url') }})
    r"""The API URL to list the deployments of the repository."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""The repository description."""  
    downloads_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('downloads_url') }})
    r"""The API URL to list the downloads on the repository."""  
    events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events_url') }})
    r"""The API URL to list the events of the repository."""  
    fork: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fork') }})
    r"""Whether the repository is a fork."""  
    forks_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forks_url') }})
    r"""The API URL to list the forks of the repository."""  
    full_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('full_name') }})
    r"""The full, globally unique, name of the repository."""  
    git_commits_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git_commits_url') }})
    r"""A template for the API URL to get information about Git commits of the repository."""  
    git_refs_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git_refs_url') }})
    r"""A template for the API URL to get information about Git refs of the repository."""  
    git_tags_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git_tags_url') }})
    r"""A template for the API URL to get information about Git tags of the repository."""  
    hooks_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hooks_url') }})
    r"""The API URL to list the hooks on the repository."""  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})
    r"""The URL to view the repository on GitHub.com."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""A unique identifier of the repository."""  
    issue_comment_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue_comment_url') }})
    r"""A template for the API URL to get information about issue comments on the repository."""  
    issue_events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue_events_url') }})
    r"""A template for the API URL to get information about issue events on the repository."""  
    issues_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issues_url') }})
    r"""A template for the API URL to get information about issues on the repository."""  
    keys_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keys_url') }})
    r"""A template for the API URL to get information about deploy keys on the repository."""  
    labels_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels_url') }})
    r"""A template for the API URL to get information about labels of the repository."""  
    languages_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languages_url') }})
    r"""The API URL to get information about the languages of the repository."""  
    merges_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merges_url') }})
    r"""The API URL to merge branches in the repository."""  
    milestones_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('milestones_url') }})
    r"""A template for the API URL to get information about milestones of the repository."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the repository."""  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})
    r"""The GraphQL identifier of the repository."""  
    notifications_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifications_url') }})
    r"""A template for the API URL to get information about notifications on the repository."""  
    owner: shared_simple_user.SimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner') }})
    r"""A GitHub user."""  
    private: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('private') }})
    r"""Whether the repository is private."""  
    pulls_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pulls_url') }})
    r"""A template for the API URL to get information about pull requests on the repository."""  
    releases_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releases_url') }})
    r"""A template for the API URL to get information about releases on the repository."""  
    stargazers_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stargazers_url') }})
    r"""The API URL to list the stargazers on the repository."""  
    statuses_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statuses_url') }})
    r"""A template for the API URL to get information about statuses of a commit."""  
    subscribers_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscribers_url') }})
    r"""The API URL to list the subscribers on the repository."""  
    subscription_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscription_url') }})
    r"""The API URL to subscribe to notifications for this repository."""  
    tags_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags_url') }})
    r"""The API URL to get information about tags on the repository."""  
    teams_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teams_url') }})
    r"""The API URL to list the teams on the repository."""  
    trees_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trees_url') }})
    r"""A template for the API URL to create or retrieve a raw Git tree of the repository."""  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The URL to get more information about the repository from the GitHub API."""  
    