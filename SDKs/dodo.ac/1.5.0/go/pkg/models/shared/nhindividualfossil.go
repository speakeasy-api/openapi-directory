// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type NHIndividualFossilColorsEnum string

const (
	NHIndividualFossilColorsEnumAqua     NHIndividualFossilColorsEnum = "Aqua"
	NHIndividualFossilColorsEnumBeige    NHIndividualFossilColorsEnum = "Beige"
	NHIndividualFossilColorsEnumBlack    NHIndividualFossilColorsEnum = "Black"
	NHIndividualFossilColorsEnumBlue     NHIndividualFossilColorsEnum = "Blue"
	NHIndividualFossilColorsEnumBrown    NHIndividualFossilColorsEnum = "Brown"
	NHIndividualFossilColorsEnumColorful NHIndividualFossilColorsEnum = "Colorful"
	NHIndividualFossilColorsEnumGray     NHIndividualFossilColorsEnum = "Gray"
	NHIndividualFossilColorsEnumGreen    NHIndividualFossilColorsEnum = "Green"
	NHIndividualFossilColorsEnumOrange   NHIndividualFossilColorsEnum = "Orange"
	NHIndividualFossilColorsEnumPink     NHIndividualFossilColorsEnum = "Pink"
	NHIndividualFossilColorsEnumPurple   NHIndividualFossilColorsEnum = "Purple"
	NHIndividualFossilColorsEnumRed      NHIndividualFossilColorsEnum = "Red"
	NHIndividualFossilColorsEnumWhite    NHIndividualFossilColorsEnum = "White"
	NHIndividualFossilColorsEnumYellow   NHIndividualFossilColorsEnum = "Yellow"
)

func (e *NHIndividualFossilColorsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Aqua":
		fallthrough
	case "Beige":
		fallthrough
	case "Black":
		fallthrough
	case "Blue":
		fallthrough
	case "Brown":
		fallthrough
	case "Colorful":
		fallthrough
	case "Gray":
		fallthrough
	case "Green":
		fallthrough
	case "Orange":
		fallthrough
	case "Pink":
		fallthrough
	case "Purple":
		fallthrough
	case "Red":
		fallthrough
	case "White":
		fallthrough
	case "Yellow":
		*e = NHIndividualFossilColorsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NHIndividualFossilColorsEnum: %s", s)
	}
}

// NHIndividualFossil - A JSON object describing the individual fossil.
type NHIndividualFossil struct {
	Colors []NHIndividualFossilColorsEnum `json:"colors,omitempty"`
	// The name of the group that the fossil belongs to.
	FossilGroup *string `json:"fossil_group,omitempty"`
	// The base value that the item provides to a player's Happy Home Academy score when placed in their home.
	HhaBase *int64 `json:"hha_base,omitempty"`
	// Image of the fossil's icon. dodo.ac is Nookipedia's CDN server.
	ImageURL *string `json:"image_url,omitempty"`
	// Whether or not the item can be interacted with.
	Interactable *bool `json:"interactable,omitempty"`
	// The length of the fossil.
	Length *int64 `json:"length,omitempty"`
	// The name of the fossil.
	Name *string `json:"name,omitempty"`
	// The number of bells the item can be sold to Nook's store for.
	Sell *int64 `json:"sell,omitempty"`
	// Link to the respective Nookipedia article.
	URL *string `json:"url,omitempty"`
	// The width of the fossil.
	Width *int64 `json:"width,omitempty"`
}
