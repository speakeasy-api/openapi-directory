/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class ErrorsAppBuildsListSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

/**
 * Type of error (handled vs unhandled), including All
 */
export enum ErrorsAppBuildsListErrorTypeEnum {
  All = "all",
  UnhandledError = "unhandledError",
  HandledError = "handledError",
}

export class ErrorsAppBuildsListRequest extends SpeakeasyBase {
  /**
   * The maximum number of results to return. (0 will fetch all results till the max number.)
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=$top" })
  dollarTop?: number;

  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * Last date time in data in ISO 8601 date time format
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=end;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  end?: Date;

  /**
   * Type of error (handled vs unhandled), including All
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=errorType",
  })
  errorType?: ErrorsAppBuildsListErrorTypeEnum;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;

  /**
   * Start date time in data in ISO 8601 date time format
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=start;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  start: Date;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=version",
  })
  version: string;
}

export enum ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

export class ErrorsAppBuildsListDefaultApplicationJSONError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Error code with reason
 */
export class ErrorsAppBuildsListDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => ErrorsAppBuildsListDefaultApplicationJSONError)
  error: ErrorsAppBuildsListDefaultApplicationJSONError;
}

/**
 * List of App builds
 */
export class ErrorsAppBuildsList200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "appBuilds" })
  appBuilds?: string[];
}

export class ErrorsAppBuildsListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * List of App builds
   */
  @SpeakeasyMetadata()
  errorsAppBuildsList200ApplicationJSONObject?: ErrorsAppBuildsList200ApplicationJSON;

  /**
   * Error code with reason
   */
  @SpeakeasyMetadata()
  errorsAppBuildsListDefaultApplicationJSONObject?: ErrorsAppBuildsListDefaultApplicationJSON;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
