// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateNetworkApplianceFirewallL3FirewallRulesPathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesPolicyEnum - 'allow' or 'deny' traffic specified by this rule
type UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesPolicyEnum string

const (
	UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesPolicyEnumAllow UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesPolicyEnum = "allow"
	UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesPolicyEnumDeny  UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesPolicyEnum = "deny"
)

func (e *UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesPolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "allow":
		fallthrough
	case "deny":
		*e = UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesPolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesPolicyEnum: %s", s)
	}
}

// UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesProtocolEnum - The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')
type UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesProtocolEnum string

const (
	UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesProtocolEnumAny   UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesProtocolEnum = "any"
	UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesProtocolEnumIcmp  UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesProtocolEnum = "icmp"
	UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesProtocolEnumIcmp6 UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesProtocolEnum = "icmp6"
	UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesProtocolEnumTCP   UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesProtocolEnum = "tcp"
	UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesProtocolEnumUDP   UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesProtocolEnum = "udp"
)

func (e *UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "any":
		fallthrough
	case "icmp":
		fallthrough
	case "icmp6":
		fallthrough
	case "tcp":
		fallthrough
	case "udp":
		*e = UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesProtocolEnum: %s", s)
	}
}

type UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRules struct {
	// Description of the rule (optional)
	Comment *string `json:"comment,omitempty"`
	// Comma-separated list of destination IP address(es) (in IP or CIDR notation), fully-qualified domain names (FQDN) or 'any'
	DestCidr string `json:"destCidr"`
	// Comma-separated list of destination port(s) (integer in the range 1-65535), or 'any'
	DestPort *string `json:"destPort,omitempty"`
	// 'allow' or 'deny' traffic specified by this rule
	Policy UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesPolicyEnum `json:"policy"`
	// The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')
	Protocol UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRulesProtocolEnum `json:"protocol"`
	// Comma-separated list of source IP address(es) (in IP or CIDR notation), or 'any' (note: FQDN not supported for source addresses)
	SrcCidr string `json:"srcCidr"`
	// Comma-separated list of source port(s) (integer in the range 1-65535), or 'any'
	SrcPort *string `json:"srcPort,omitempty"`
	// Log this rule to syslog (true or false, boolean value) - only applicable if a syslog has been configured (optional)
	SyslogEnabled *bool `json:"syslogEnabled,omitempty"`
}

type UpdateNetworkApplianceFirewallL3FirewallRulesRequestBody struct {
	// An ordered array of the firewall rules (not including the default rule)
	Rules []UpdateNetworkApplianceFirewallL3FirewallRulesRequestBodyRules `json:"rules,omitempty"`
	// Log the special default rule (boolean value - enable only if you've configured a syslog server) (optional)
	SyslogDefaultRule *bool `json:"syslogDefaultRule,omitempty"`
}

type UpdateNetworkApplianceFirewallL3FirewallRulesRequest struct {
	PathParams UpdateNetworkApplianceFirewallL3FirewallRulesPathParams
	Request    *UpdateNetworkApplianceFirewallL3FirewallRulesRequestBody `request:"mediaType=application/json"`
}

type UpdateNetworkApplianceFirewallL3FirewallRulesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkApplianceFirewallL3FirewallRules200ApplicationJSONObject map[string]interface{}
}
