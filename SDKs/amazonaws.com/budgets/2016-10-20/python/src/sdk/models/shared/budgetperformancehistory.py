"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import budgetedandactualamounts as shared_budgetedandactualamounts
from ..shared import budgettype_enum as shared_budgettype_enum
from ..shared import costtypes as shared_costtypes
from ..shared import timeunit_enum as shared_timeunit_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BudgetPerformanceHistory:
    r"""A history of the state of a budget at the end of the budget's specified time period."""
    
    budgeted_and_actual_amounts_list: Optional[list[shared_budgetedandactualamounts.BudgetedAndActualAmounts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BudgetedAndActualAmountsList'), 'exclude': lambda f: f is None }})  
    budget_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BudgetName'), 'exclude': lambda f: f is None }})
    r"""A string that represents the budget name. The \\":\\" and \\"\\\" characters aren't allowed."""  
    budget_type: Optional[shared_budgettype_enum.BudgetTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BudgetType'), 'exclude': lambda f: f is None }})
    r"""<p> The type of a budget. It must be one of the following types: </p> <p> <code>COST</code>, <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>, <code>SAVINGS_PLANS_UTILIZATION</code>, or <code>SAVINGS_PLANS_COVERAGE</code>.</p>"""  
    cost_filters: Optional[dict[str, list[str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CostFilters'), 'exclude': lambda f: f is None }})  
    cost_types: Optional[shared_costtypes.CostTypes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CostTypes'), 'exclude': lambda f: f is None }})  
    time_unit: Optional[shared_timeunit_enum.TimeUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeUnit'), 'exclude': lambda f: f is None }})
    r"""The time unit of the budget, such as MONTHLY or QUARTERLY."""  
    