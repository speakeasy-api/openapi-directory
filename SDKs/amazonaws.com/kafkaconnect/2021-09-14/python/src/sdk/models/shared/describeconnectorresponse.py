"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import capacitydescription as shared_capacitydescription
from ..shared import connectorstate_enum as shared_connectorstate_enum
from ..shared import kafkaclusterclientauthenticationdescription as shared_kafkaclusterclientauthenticationdescription
from ..shared import kafkaclusterdescription as shared_kafkaclusterdescription
from ..shared import kafkaclusterencryptionintransitdescription as shared_kafkaclusterencryptionintransitdescription
from ..shared import logdeliverydescription as shared_logdeliverydescription
from ..shared import plugindescription as shared_plugindescription
from ..shared import statedescription as shared_statedescription
from ..shared import workerconfigurationdescription as shared_workerconfigurationdescription
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeConnectorResponse:
    r"""Success"""
    
    capacity: Optional[shared_capacitydescription.CapacityDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capacity'), 'exclude': lambda f: f is None }})  
    connector_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorArn'), 'exclude': lambda f: f is None }})  
    connector_configuration: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorConfiguration'), 'exclude': lambda f: f is None }})  
    connector_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorDescription'), 'exclude': lambda f: f is None }})  
    connector_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorName'), 'exclude': lambda f: f is None }})  
    connector_state: Optional[shared_connectorstate_enum.ConnectorStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorState'), 'exclude': lambda f: f is None }})  
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    current_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentVersion'), 'exclude': lambda f: f is None }})  
    kafka_cluster: Optional[shared_kafkaclusterdescription.KafkaClusterDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kafkaCluster'), 'exclude': lambda f: f is None }})  
    kafka_cluster_client_authentication: Optional[shared_kafkaclusterclientauthenticationdescription.KafkaClusterClientAuthenticationDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kafkaClusterClientAuthentication'), 'exclude': lambda f: f is None }})  
    kafka_cluster_encryption_in_transit: Optional[shared_kafkaclusterencryptionintransitdescription.KafkaClusterEncryptionInTransitDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kafkaClusterEncryptionInTransit'), 'exclude': lambda f: f is None }})  
    kafka_connect_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kafkaConnectVersion'), 'exclude': lambda f: f is None }})  
    log_delivery: Optional[shared_logdeliverydescription.LogDeliveryDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logDelivery'), 'exclude': lambda f: f is None }})  
    plugins: Optional[list[shared_plugindescription.PluginDescription]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plugins'), 'exclude': lambda f: f is None }})  
    service_execution_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceExecutionRoleArn'), 'exclude': lambda f: f is None }})  
    state_description: Optional[shared_statedescription.StateDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateDescription'), 'exclude': lambda f: f is None }})  
    worker_configuration: Optional[shared_workerconfigurationdescription.WorkerConfigurationDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerConfiguration'), 'exclude': lambda f: f is None }})  
    