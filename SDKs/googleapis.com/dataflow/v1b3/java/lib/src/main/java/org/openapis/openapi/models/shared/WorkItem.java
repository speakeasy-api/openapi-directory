/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * WorkItem - WorkItem represents basic information about a WorkItem to be executed in the cloud.
 */
public class WorkItem {
    /**
     * Work item-specific configuration as an opaque blob.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuration")
    public String configuration;
    public WorkItem withConfiguration(String configuration) {
        this.configuration = configuration;
        return this;
    }
    
    /**
     * Identifies this WorkItem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public WorkItem withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The initial index to use when reporting the status of the WorkItem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initialReportIndex")
    public String initialReportIndex;
    public WorkItem withInitialReportIndex(String initialReportIndex) {
        this.initialReportIndex = initialReportIndex;
        return this;
    }
    
    /**
     * Identifies the workflow job this WorkItem belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobId")
    public String jobId;
    public WorkItem withJobId(String jobId) {
        this.jobId = jobId;
        return this;
    }
    
    /**
     * Time when the lease on this Work will expire.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leaseExpireTime")
    public String leaseExpireTime;
    public WorkItem withLeaseExpireTime(String leaseExpireTime) {
        this.leaseExpireTime = leaseExpireTime;
        return this;
    }
    
    /**
     * MapTask consists of an ordered set of instructions, each of which describes one particular low-level operation for the worker to perform in order to accomplish the MapTask's WorkItem. Each instruction must appear in the list before any instructions which depends on its output.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mapTask")
    public MapTask mapTask;
    public WorkItem withMapTask(MapTask mapTask) {
        this.mapTask = mapTask;
        return this;
    }
    
    /**
     * Any required packages that need to be fetched in order to execute this WorkItem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("packages")
    public Package[] packages;
    public WorkItem withPackages(Package[] packages) {
        this.packages = packages;
        return this;
    }
    
    /**
     * Identifies the cloud project this WorkItem belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projectId")
    public String projectId;
    public WorkItem withProjectId(String projectId) {
        this.projectId = projectId;
        return this;
    }
    
    /**
     * Recommended reporting interval.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportStatusInterval")
    public String reportStatusInterval;
    public WorkItem withReportStatusInterval(String reportStatusInterval) {
        this.reportStatusInterval = reportStatusInterval;
        return this;
    }
    
    /**
     * Describes a particular function to invoke.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seqMapTask")
    public SeqMapTask seqMapTask;
    public WorkItem withSeqMapTask(SeqMapTask seqMapTask) {
        this.seqMapTask = seqMapTask;
        return this;
    }
    
    /**
     * A task which consists of a shell command for the worker to execute.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shellTask")
    public ShellTask shellTask;
    public WorkItem withShellTask(ShellTask shellTask) {
        this.shellTask = shellTask;
        return this;
    }
    
    /**
     * A work item that represents the different operations that can be performed on a user-defined Source specification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceOperationTask")
    public SourceOperationRequest sourceOperationTask;
    public WorkItem withSourceOperationTask(SourceOperationRequest sourceOperationTask) {
        this.sourceOperationTask = sourceOperationTask;
        return this;
    }
    
    /**
     * A task which describes what action should be performed for the specified streaming computation ranges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamingComputationTask")
    public StreamingComputationTask streamingComputationTask;
    public WorkItem withStreamingComputationTask(StreamingComputationTask streamingComputationTask) {
        this.streamingComputationTask = streamingComputationTask;
        return this;
    }
    
    /**
     * A task that carries configuration information for streaming computations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamingConfigTask")
    public StreamingConfigTask streamingConfigTask;
    public WorkItem withStreamingConfigTask(StreamingConfigTask streamingConfigTask) {
        this.streamingConfigTask = streamingConfigTask;
        return this;
    }
    
    /**
     * A task which initializes part of a streaming Dataflow job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamingSetupTask")
    public StreamingSetupTask streamingSetupTask;
    public WorkItem withStreamingSetupTask(StreamingSetupTask streamingSetupTask) {
        this.streamingSetupTask = streamingSetupTask;
        return this;
    }
    
}
