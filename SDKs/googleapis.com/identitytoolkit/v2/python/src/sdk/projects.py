"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def identitytoolkit_projects_identity_platform_initialize_auth(self, request: operations.IdentitytoolkitProjectsIdentityPlatformInitializeAuthRequest, security: operations.IdentitytoolkitProjectsIdentityPlatformInitializeAuthSecurity) -> operations.IdentitytoolkitProjectsIdentityPlatformInitializeAuthResponse:
        r"""Initialize Identity Platform for a Cloud project. Identity Platform is an end-to-end authentication system for third-party users to access your apps and services. These could include mobile/web apps, games, APIs and beyond. This is the publicly available variant of EnableIdentityPlatform that is only available to billing-enabled projects."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdentitytoolkitProjectsIdentityPlatformInitializeAuthRequest, base_url, '/v2/{project}/identityPlatform:initializeAuth', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitProjectsIdentityPlatformInitializeAuthRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitProjectsIdentityPlatformInitializeAuthResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_cloud_identitytoolkit_admin_v2_initialize_identity_platform_response = out

        return res

    def identitytoolkit_projects_tenants_create(self, request: operations.IdentitytoolkitProjectsTenantsCreateRequest, security: operations.IdentitytoolkitProjectsTenantsCreateSecurity) -> operations.IdentitytoolkitProjectsTenantsCreateResponse:
        r"""Create a tenant. Requires write permission on the Agent project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdentitytoolkitProjectsTenantsCreateRequest, base_url, '/v2/{parent}/tenants', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_identitytoolkit_admin_v2_tenant_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitProjectsTenantsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitProjectsTenantsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudIdentitytoolkitAdminV2Tenant])
                res.google_cloud_identitytoolkit_admin_v2_tenant = out

        return res

    def identitytoolkit_projects_tenants_default_supported_idp_configs_create(self, request: operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateRequest, security: operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateSecurity) -> operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateResponse:
        r"""Create a default supported Idp configuration for an Identity Toolkit project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateRequest, base_url, '/v2/{parent}/defaultSupportedIdpConfigs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_identitytoolkit_admin_v2_default_supported_idp_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig])
                res.google_cloud_identitytoolkit_admin_v2_default_supported_idp_config = out

        return res

    def identitytoolkit_projects_tenants_default_supported_idp_configs_list(self, request: operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListRequest, security: operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListSecurity) -> operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListResponse:
        r"""List all default supported Idp configurations for an Identity Toolkit project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListRequest, base_url, '/v2/{parent}/defaultSupportedIdpConfigs', request)
        
        query_params = utils.get_query_params(operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpConfigsResponse])
                res.google_cloud_identitytoolkit_admin_v2_list_default_supported_idp_configs_response = out

        return res

    def identitytoolkit_projects_tenants_get_iam_policy(self, request: operations.IdentitytoolkitProjectsTenantsGetIamPolicyRequest, security: operations.IdentitytoolkitProjectsTenantsGetIamPolicySecurity) -> operations.IdentitytoolkitProjectsTenantsGetIamPolicyResponse:
        r"""Gets the access control policy for a resource. An error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a policy set on it. Caller must have the right Google IAM permission on the resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdentitytoolkitProjectsTenantsGetIamPolicyRequest, base_url, '/v2/{resource}:getIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_iam_v1_get_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitProjectsTenantsGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitProjectsTenantsGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleIamV1Policy])
                res.google_iam_v1_policy = out

        return res

    def identitytoolkit_projects_tenants_inbound_saml_configs_create(self, request: operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateRequest, security: operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateSecurity) -> operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateResponse:
        r"""Create an inbound SAML configuration for an Identity Toolkit project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateRequest, base_url, '/v2/{parent}/inboundSamlConfigs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_identitytoolkit_admin_v2_inbound_saml_config_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig])
                res.google_cloud_identitytoolkit_admin_v2_inbound_saml_config = out

        return res

    def identitytoolkit_projects_tenants_inbound_saml_configs_list(self, request: operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsListRequest, security: operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsListSecurity) -> operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsListResponse:
        r"""List all inbound SAML configurations for an Identity Toolkit project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsListRequest, base_url, '/v2/{parent}/inboundSamlConfigs', request)
        
        query_params = utils.get_query_params(operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudIdentitytoolkitAdminV2ListInboundSamlConfigsResponse])
                res.google_cloud_identitytoolkit_admin_v2_list_inbound_saml_configs_response = out

        return res

    def identitytoolkit_projects_tenants_list(self, request: operations.IdentitytoolkitProjectsTenantsListRequest, security: operations.IdentitytoolkitProjectsTenantsListSecurity) -> operations.IdentitytoolkitProjectsTenantsListResponse:
        r"""List tenants under the given agent project. Requires read permission on the Agent project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdentitytoolkitProjectsTenantsListRequest, base_url, '/v2/{parent}/tenants', request)
        
        query_params = utils.get_query_params(operations.IdentitytoolkitProjectsTenantsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitProjectsTenantsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudIdentitytoolkitAdminV2ListTenantsResponse])
                res.google_cloud_identitytoolkit_admin_v2_list_tenants_response = out

        return res

    def identitytoolkit_projects_tenants_oauth_idp_configs_create(self, request: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateRequest, security: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateSecurity) -> operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateResponse:
        r"""Create an Oidc Idp configuration for an Identity Toolkit project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateRequest, base_url, '/v2/{parent}/oauthIdpConfigs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_identitytoolkit_admin_v2_o_auth_idp_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig])
                res.google_cloud_identitytoolkit_admin_v2_o_auth_idp_config = out

        return res

    def identitytoolkit_projects_tenants_oauth_idp_configs_delete(self, request: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteRequest, security: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteSecurity) -> operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteResponse:
        r"""Delete an Oidc Idp configuration for an Identity Toolkit project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteRequest, base_url, '/v2/{name}', request)
        
        query_params = utils.get_query_params(operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def identitytoolkit_projects_tenants_oauth_idp_configs_get(self, request: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsGetRequest, security: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsGetSecurity) -> operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsGetResponse:
        r"""Retrieve an Oidc Idp configuration for an Identity Toolkit project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsGetRequest, base_url, '/v2/{name}', request)
        
        query_params = utils.get_query_params(operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig])
                res.google_cloud_identitytoolkit_admin_v2_o_auth_idp_config = out

        return res

    def identitytoolkit_projects_tenants_oauth_idp_configs_list(self, request: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsListRequest, security: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsListSecurity) -> operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsListResponse:
        r"""List all Oidc Idp configurations for an Identity Toolkit project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsListRequest, base_url, '/v2/{parent}/oauthIdpConfigs', request)
        
        query_params = utils.get_query_params(operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudIdentitytoolkitAdminV2ListOAuthIdpConfigsResponse])
                res.google_cloud_identitytoolkit_admin_v2_list_o_auth_idp_configs_response = out

        return res

    def identitytoolkit_projects_tenants_oauth_idp_configs_patch(self, request: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchRequest, security: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchSecurity) -> operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchResponse:
        r"""Update an Oidc Idp configuration for an Identity Toolkit project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchRequest, base_url, '/v2/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_identitytoolkit_admin_v2_o_auth_idp_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig])
                res.google_cloud_identitytoolkit_admin_v2_o_auth_idp_config = out

        return res

    def identitytoolkit_projects_tenants_set_iam_policy(self, request: operations.IdentitytoolkitProjectsTenantsSetIamPolicyRequest, security: operations.IdentitytoolkitProjectsTenantsSetIamPolicySecurity) -> operations.IdentitytoolkitProjectsTenantsSetIamPolicyResponse:
        r"""Sets the access control policy for a resource. If the policy exists, it is replaced. Caller must have the right Google IAM permission on the resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdentitytoolkitProjectsTenantsSetIamPolicyRequest, base_url, '/v2/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_iam_v1_set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitProjectsTenantsSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitProjectsTenantsSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleIamV1Policy])
                res.google_iam_v1_policy = out

        return res

    def identitytoolkit_projects_tenants_test_iam_permissions(self, request: operations.IdentitytoolkitProjectsTenantsTestIamPermissionsRequest, security: operations.IdentitytoolkitProjectsTenantsTestIamPermissionsSecurity) -> operations.IdentitytoolkitProjectsTenantsTestIamPermissionsResponse:
        r"""Returns the caller's permissions on a resource. An error is returned if the resource does not exist. A caller is not required to have Google IAM permission to make this request."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IdentitytoolkitProjectsTenantsTestIamPermissionsRequest, base_url, '/v2/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_iam_v1_test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitProjectsTenantsTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitProjectsTenantsTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleIamV1TestIamPermissionsResponse])
                res.google_iam_v1_test_iam_permissions_response = out

        return res

    