/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class BillingAggregatedInformationGetAllSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

/**
 * Type of period that should be included in the Billing Information
 */
export enum BillingAggregatedInformationGetAllPeriodEnum {
  Previous = "Previous",
  Current = "Current",
  Next = "Next",
}

/**
 * Type of service that should be included in the Billing Information
 */
export enum BillingAggregatedInformationGetAllServiceEnum {
  Test = "Test",
  Build = "Build",
}

export class BillingAggregatedInformationGetAllRequest extends SpeakeasyBase {
  /**
   * Type of period that should be included in the Billing Information
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=period",
  })
  period?: BillingAggregatedInformationGetAllPeriodEnum;

  /**
   * Type of service that should be included in the Billing Information
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=service",
  })
  service?: BillingAggregatedInformationGetAllServiceEnum;

  /**
   * Controls whether the API should show the original plan when Azure Subscription is not enabled
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=showOriginalPlans",
  })
  showOriginalPlans?: boolean;
}

/**
 * The status code return by the API. It can be 400 or 403 or 500.
 */
export enum BillingAggregatedInformationGetAllDefaultApplicationJSONErrorCodeEnum {
  FourHundred = "400",
  FourHundredAndThree = "403",
  FiveHundred = "500",
}

export class BillingAggregatedInformationGetAllDefaultApplicationJSONError extends SpeakeasyBase {
  /**
   * The status code return by the API. It can be 400 or 403 or 500.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: BillingAggregatedInformationGetAllDefaultApplicationJSONErrorCodeEnum;

  /**
   * The reason for the request failed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;
}

/**
 * Error
 */
export class BillingAggregatedInformationGetAllDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => BillingAggregatedInformationGetAllDefaultApplicationJSONError)
  error?: BillingAggregatedInformationGetAllDefaultApplicationJSONError;
}

/**
 * State of the Azure subscription used for billing
 */
export enum BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsAzureSubscriptionStateEnum {
  Enabled = "Enabled",
  Disabled = "Disabled",
  NotSet = "NotSet",
}

/**
 * Service that receives payments for this billing plan.
 */
export enum BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum {
  None = "None",
  AppCenter = "AppCenter",
  GitHub = "GitHub",
  Xtc = "Xtc",
}

/**
 * Name of the service that the plan applies to.
 */
export enum BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum {
  Build = "Build",
  Test = "Test",
}

/**
 * Billing Plan
 */
export class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan extends SpeakeasyBase {
  /**
   * Collection of attribute values.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  attributes?: Record<string, Record<string, any>>;

  /**
   * The Billing Plan ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * A collection of named numeric values
   */
  @SpeakeasyMetadata()
  @Expose({ name: "limits" })
  limits?: Record<string, number>;

  @SpeakeasyMetadata()
  @Expose({ name: "parentId" })
  parentId?: string;

  /**
   * Service that receives payments for this billing plan.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentSource" })
  paymentSource?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum;

  /**
   * Price of the Billing Plan
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price?: number;

  /**
   * Name of the service that the plan applies to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "service" })
  service?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum;

  /**
   * Version of the Billing Plan schema
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: string;
}

/**
 * Selection of a billing plan
 */
export class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccount extends SpeakeasyBase {
  /**
   * Number of instances of the billing plan.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count?: number;

  /**
   * Billing Plan
   */
  @SpeakeasyMetadata()
  @Expose({ name: "plan" })
  @Type(
    () =>
      BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan
  )
  plan?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan;
}

/**
 * Billing plans for a given period
 */
export class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriod extends SpeakeasyBase {
  /**
   * Selection of a billing plan
   */
  @SpeakeasyMetadata()
  @Expose({ name: "byAccount" })
  @Type(
    () =>
      BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccount
  )
  byAccount?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccount;

  /**
   * Exclusive end of the period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  endTime?: string;

  /**
   * Inclusive start of the period
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  startTime?: string;
}

/**
 * Billing Plans for a single service
 */
export class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildService extends SpeakeasyBase {
  /**
   * Can customer select trial plan for that service (if it exists)?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "canSelectTrialPlan" })
  canSelectTrialPlan?: boolean;

  /**
   * Billing plans for a given period
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentBillingPeriod" })
  @Type(
    () =>
      BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriod
  )
  currentBillingPeriod?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriod;

  /**
   * Expiration time of the last selected trial plan. Will be null if trial plan was not used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastTrialPlanExpirationTime" })
  lastTrialPlanExpirationTime?: string;
}

/**
 * Service that receives payments for this billing plan.
 */
export enum BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum {
  None = "None",
  AppCenter = "AppCenter",
  GitHub = "GitHub",
  Xtc = "Xtc",
}

/**
 * Name of the service that the plan applies to.
 */
export enum BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum {
  Build = "Build",
  Test = "Test",
}

/**
 * Billing Plan
 */
export class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlan extends SpeakeasyBase {
  /**
   * Collection of attribute values.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  attributes?: Record<string, Record<string, any>>;

  /**
   * The Billing Plan ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * A collection of named numeric values
   */
  @SpeakeasyMetadata()
  @Expose({ name: "limits" })
  limits?: Record<string, number>;

  @SpeakeasyMetadata()
  @Expose({ name: "parentId" })
  parentId?: string;

  /**
   * Service that receives payments for this billing plan.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentSource" })
  paymentSource?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum;

  /**
   * Price of the Billing Plan
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price?: number;

  /**
   * Name of the service that the plan applies to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "service" })
  service?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum;

  /**
   * Version of the Billing Plan schema
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: string;
}

/**
 * Selection of a billing plan
 */
export class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccount extends SpeakeasyBase {
  /**
   * Number of instances of the billing plan.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count?: number;

  /**
   * Billing Plan
   */
  @SpeakeasyMetadata()
  @Expose({ name: "plan" })
  @Type(
    () =>
      BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlan
  )
  plan?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlan;
}

/**
 * Billing plans for a given period
 */
export class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriod extends SpeakeasyBase {
  /**
   * Selection of a billing plan
   */
  @SpeakeasyMetadata()
  @Expose({ name: "byAccount" })
  @Type(
    () =>
      BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccount
  )
  byAccount?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccount;

  /**
   * Exclusive end of the period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  endTime?: string;

  /**
   * Inclusive start of the period
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  startTime?: string;
}

/**
 * Billing Plans for a single service
 */
export class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestService extends SpeakeasyBase {
  /**
   * Can customer select trial plan for that service (if it exists)?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "canSelectTrialPlan" })
  canSelectTrialPlan?: boolean;

  /**
   * Billing plans for a given period
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentBillingPeriod" })
  @Type(
    () =>
      BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriod
  )
  currentBillingPeriod?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriod;

  /**
   * Expiration time of the last selected trial plan. Will be null if trial plan was not used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastTrialPlanExpirationTime" })
  lastTrialPlanExpirationTime?: string;
}

/**
 * Billing Plans section in the Billing Information
 */
export class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlans extends SpeakeasyBase {
  /**
   * Billing Plans for a single service
   */
  @SpeakeasyMetadata()
  @Expose({ name: "buildService" })
  @Type(
    () =>
      BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildService
  )
  buildService?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildService;

  /**
   * Billing Plans for a single service
   */
  @SpeakeasyMetadata()
  @Expose({ name: "testService" })
  @Type(
    () =>
      BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestService
  )
  testService?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestService;
}

/**
 * Usage for a single period
 */
export class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageBuildServiceCurrentUsagePeriod extends SpeakeasyBase {
  /**
   * A collection of named numeric values
   */
  @SpeakeasyMetadata()
  @Expose({ name: "byAccount" })
  byAccount?: Record<string, number>;

  /**
   * A collection of  named numeric values grouped by app
   */
  @SpeakeasyMetadata()
  @Expose({ name: "byApp" })
  byApp?: Record<string, Record<string, number>>;

  /**
   * Exclusive end time of the usage period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  endTime?: string;

  /**
   * Inclusive start time of the usage period
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  startTime?: string;
}

/**
 * Resource usage for a single Mobile Center service
 */
export class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageBuildService extends SpeakeasyBase {
  /**
   * Usage for a single period
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentUsagePeriod" })
  @Type(
    () =>
      BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageBuildServiceCurrentUsagePeriod
  )
  currentUsagePeriod?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageBuildServiceCurrentUsagePeriod;
}

/**
 * Usage for a single period
 */
export class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageTestServiceCurrentUsagePeriod extends SpeakeasyBase {
  /**
   * A collection of named numeric values
   */
  @SpeakeasyMetadata()
  @Expose({ name: "byAccount" })
  byAccount?: Record<string, number>;

  /**
   * A collection of  named numeric values grouped by app
   */
  @SpeakeasyMetadata()
  @Expose({ name: "byApp" })
  byApp?: Record<string, Record<string, number>>;

  /**
   * Exclusive end time of the usage period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  endTime?: string;

  /**
   * Inclusive start time of the usage period
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  startTime?: string;
}

/**
 * Resource usage for a single Mobile Center service
 */
export class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageTestService extends SpeakeasyBase {
  /**
   * Usage for a single period
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentUsagePeriod" })
  @Type(
    () =>
      BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageTestServiceCurrentUsagePeriod
  )
  currentUsagePeriod?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageTestServiceCurrentUsagePeriod;
}

/**
 * Usage section in the Billing Information
 */
export class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsage extends SpeakeasyBase {
  /**
   * Resource usage for a single Mobile Center service
   */
  @SpeakeasyMetadata()
  @Expose({ name: "buildService" })
  @Type(
    () =>
      BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageBuildService
  )
  buildService?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageBuildService;

  /**
   * Resource usage for a single Mobile Center service
   */
  @SpeakeasyMetadata()
  @Expose({ name: "testService" })
  @Type(
    () =>
      BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageTestService
  )
  testService?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageTestService;
}

/**
 * Aggregated Billing Information for a user or an organization
 */
export class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillings extends SpeakeasyBase {
  /**
   * Unique identifier for the Azure subscription used for billing
   */
  @SpeakeasyMetadata()
  @Expose({ name: "azureSubscriptionId" })
  azureSubscriptionId?: string;

  /**
   * State of the Azure subscription used for billing
   */
  @SpeakeasyMetadata()
  @Expose({ name: "azureSubscriptionState" })
  azureSubscriptionState?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsAzureSubscriptionStateEnum;

  /**
   * Billing Plans section in the Billing Information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "billingPlans" })
  @Type(
    () =>
      BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlans
  )
  billingPlans?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlans;

  /**
   * ID of the user or organization
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The ISO 8601 datetime of last modification
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  timestamp?: string;

  /**
   * Usage section in the Billing Information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "usage" })
  @Type(
    () =>
      BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsage
  )
  usage?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsage;

  /**
   * Version of the Billing Information schema
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: string;
}

/**
 * Aggregated Billing Information for a user an the organizations in which the user is an admin.
 */
export class BillingAggregatedInformationGetAll200ApplicationJSON extends SpeakeasyBase {
  /**
   * Aggregated Billing Information for a user or an organization
   */
  @SpeakeasyMetadata()
  @Expose({ name: "aggregatedBillings" })
  @Type(
    () => BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillings
  )
  aggregatedBillings?: BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillings;
}

export class BillingAggregatedInformationGetAllResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.
   */
  @SpeakeasyMetadata()
  billingAggregatedInformationGetAll200ApplicationJSONObject?: BillingAggregatedInformationGetAll200ApplicationJSON;

  /**
   * Error code with reason
   */
  @SpeakeasyMetadata()
  billingAggregatedInformationGetAllDefaultApplicationJSONObject?: BillingAggregatedInformationGetAllDefaultApplicationJSON;
}
