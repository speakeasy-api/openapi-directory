"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TargetingTemplates:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dfareporting_targeting_templates_get(self, request: operations.DfareportingTargetingTemplatesGetRequest, security: operations.DfareportingTargetingTemplatesGetSecurity) -> operations.DfareportingTargetingTemplatesGetResponse:
        r"""Gets one targeting template by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingTargetingTemplatesGetRequest, base_url, '/userprofiles/{profileId}/targetingTemplates/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingTargetingTemplatesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingTargetingTemplatesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TargetingTemplate])
                res.targeting_template = out

        return res

    def dfareporting_targeting_templates_insert(self, request: operations.DfareportingTargetingTemplatesInsertRequest, security: operations.DfareportingTargetingTemplatesInsertSecurity) -> operations.DfareportingTargetingTemplatesInsertResponse:
        r"""Inserts a new targeting template."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingTargetingTemplatesInsertRequest, base_url, '/userprofiles/{profileId}/targetingTemplates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "targeting_template", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingTargetingTemplatesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingTargetingTemplatesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TargetingTemplate])
                res.targeting_template = out

        return res

    def dfareporting_targeting_templates_list(self, request: operations.DfareportingTargetingTemplatesListRequest, security: operations.DfareportingTargetingTemplatesListSecurity) -> operations.DfareportingTargetingTemplatesListResponse:
        r"""Retrieves a list of targeting templates, optionally filtered. This method supports paging."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingTargetingTemplatesListRequest, base_url, '/userprofiles/{profileId}/targetingTemplates', request)
        
        query_params = utils.get_query_params(operations.DfareportingTargetingTemplatesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingTargetingTemplatesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TargetingTemplatesListResponse])
                res.targeting_templates_list_response = out

        return res

    def dfareporting_targeting_templates_patch(self, request: operations.DfareportingTargetingTemplatesPatchRequest, security: operations.DfareportingTargetingTemplatesPatchSecurity) -> operations.DfareportingTargetingTemplatesPatchResponse:
        r"""Updates an existing targeting template. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingTargetingTemplatesPatchRequest, base_url, '/userprofiles/{profileId}/targetingTemplates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "targeting_template", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingTargetingTemplatesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingTargetingTemplatesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TargetingTemplate])
                res.targeting_template = out

        return res

    def dfareporting_targeting_templates_update(self, request: operations.DfareportingTargetingTemplatesUpdateRequest, security: operations.DfareportingTargetingTemplatesUpdateSecurity) -> operations.DfareportingTargetingTemplatesUpdateResponse:
        r"""Updates an existing targeting template."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingTargetingTemplatesUpdateRequest, base_url, '/userprofiles/{profileId}/targetingTemplates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "targeting_template", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingTargetingTemplatesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingTargetingTemplatesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TargetingTemplate])
                res.targeting_template = out

        return res

    