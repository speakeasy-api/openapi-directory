/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * EnvironmentInput - Definition of a software environment that is used to start a notebook instance.
 */
public class EnvironmentInput {
    /**
     * Definition of a container image for starting a notebook instance with the environment installed in a container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerImage")
    public ContainerImage containerImage;
    public EnvironmentInput withContainerImage(ContainerImage containerImage) {
        this.containerImage = containerImage;
        return this;
    }
    
    /**
     * A brief description of this environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public EnvironmentInput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Display name of this environment for the UI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public EnvironmentInput withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path. Example: `"gs://path-to-file/file-name"`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postStartupScript")
    public String postStartupScript;
    public EnvironmentInput withPostStartupScript(String postStartupScript) {
        this.postStartupScript = postStartupScript;
        return this;
    }
    
    /**
     * Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vmImage")
    public VmImage vmImage;
    public EnvironmentInput withVmImage(VmImage vmImage) {
        this.vmImage = vmImage;
        return this;
    }
    
}
