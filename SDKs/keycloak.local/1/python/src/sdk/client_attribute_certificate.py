"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ClientAttributeCertificate:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_realm_clients_id_certificates_attr_(self, request: operations.GetRealmClientsIDCertificatesAttrRequest) -> operations.GetRealmClientsIDCertificatesAttrResponse:
        r"""Get key info"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDCertificatesAttrRequest, base_url, '/{realm}/clients/{id}/certificates/{attr}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDCertificatesAttrResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CertificateRepresentation])
                res.certificate_representation = out

        return res

    def post_realm_clients_id_certificates_attr_download(self, request: operations.PostRealmClientsIDCertificatesAttrDownloadRequest) -> operations.PostRealmClientsIDCertificatesAttrDownloadResponse:
        r"""Get a keystore file for the client, containing private key and public certificate"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientsIDCertificatesAttrDownloadRequest, base_url, '/{realm}/clients/{id}/certificates/{attr}/download', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "key_store_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientsIDCertificatesAttrDownloadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.post_realm_clients_id_certificates_attr_download_2_xx_application_octet_stream_byte_string = http_res.content

        return res

    def post_realm_clients_id_certificates_attr_generate(self, request: operations.PostRealmClientsIDCertificatesAttrGenerateRequest) -> operations.PostRealmClientsIDCertificatesAttrGenerateResponse:
        r"""Generate a new certificate with new key pair"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientsIDCertificatesAttrGenerateRequest, base_url, '/{realm}/clients/{id}/certificates/{attr}/generate', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientsIDCertificatesAttrGenerateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CertificateRepresentation])
                res.certificate_representation = out

        return res

    def post_realm_clients_id_certificates_attr_generate_and_download(self, request: operations.PostRealmClientsIDCertificatesAttrGenerateAndDownloadRequest) -> operations.PostRealmClientsIDCertificatesAttrGenerateAndDownloadResponse:
        r"""Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientsIDCertificatesAttrGenerateAndDownloadRequest, base_url, '/{realm}/clients/{id}/certificates/{attr}/generate-and-download', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "key_store_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientsIDCertificatesAttrGenerateAndDownloadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.post_realm_clients_id_certificates_attr_generate_and_download_2_xx_application_octet_stream_byte_string = http_res.content

        return res

    def post_realm_clients_id_certificates_attr_upload(self, request: operations.PostRealmClientsIDCertificatesAttrUploadRequest) -> operations.PostRealmClientsIDCertificatesAttrUploadResponse:
        r"""Upload certificate and eventually private key"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientsIDCertificatesAttrUploadRequest, base_url, '/{realm}/clients/{id}/certificates/{attr}/upload', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientsIDCertificatesAttrUploadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CertificateRepresentation])
                res.certificate_representation = out

        return res

    def post_realm_clients_id_certificates_attr_upload_certificate(self, request: operations.PostRealmClientsIDCertificatesAttrUploadCertificateRequest) -> operations.PostRealmClientsIDCertificatesAttrUploadCertificateResponse:
        r"""Upload only certificate, not private key"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientsIDCertificatesAttrUploadCertificateRequest, base_url, '/{realm}/clients/{id}/certificates/{attr}/upload-certificate', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientsIDCertificatesAttrUploadCertificateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CertificateRepresentation])
                res.certificate_representation = out

        return res

    