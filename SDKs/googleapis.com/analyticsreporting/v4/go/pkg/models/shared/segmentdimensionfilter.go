// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SegmentDimensionFilterOperatorEnum - The operator to use to match the dimension with the expressions.
type SegmentDimensionFilterOperatorEnum string

const (
	SegmentDimensionFilterOperatorEnumOperatorUnspecified SegmentDimensionFilterOperatorEnum = "OPERATOR_UNSPECIFIED"
	SegmentDimensionFilterOperatorEnumRegexp              SegmentDimensionFilterOperatorEnum = "REGEXP"
	SegmentDimensionFilterOperatorEnumBeginsWith          SegmentDimensionFilterOperatorEnum = "BEGINS_WITH"
	SegmentDimensionFilterOperatorEnumEndsWith            SegmentDimensionFilterOperatorEnum = "ENDS_WITH"
	SegmentDimensionFilterOperatorEnumPartial             SegmentDimensionFilterOperatorEnum = "PARTIAL"
	SegmentDimensionFilterOperatorEnumExact               SegmentDimensionFilterOperatorEnum = "EXACT"
	SegmentDimensionFilterOperatorEnumInList              SegmentDimensionFilterOperatorEnum = "IN_LIST"
	SegmentDimensionFilterOperatorEnumNumericLessThan     SegmentDimensionFilterOperatorEnum = "NUMERIC_LESS_THAN"
	SegmentDimensionFilterOperatorEnumNumericGreaterThan  SegmentDimensionFilterOperatorEnum = "NUMERIC_GREATER_THAN"
	SegmentDimensionFilterOperatorEnumNumericBetween      SegmentDimensionFilterOperatorEnum = "NUMERIC_BETWEEN"
)

func (e SegmentDimensionFilterOperatorEnum) ToPointer() *SegmentDimensionFilterOperatorEnum {
	return &e
}

func (e *SegmentDimensionFilterOperatorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPERATOR_UNSPECIFIED":
		fallthrough
	case "REGEXP":
		fallthrough
	case "BEGINS_WITH":
		fallthrough
	case "ENDS_WITH":
		fallthrough
	case "PARTIAL":
		fallthrough
	case "EXACT":
		fallthrough
	case "IN_LIST":
		fallthrough
	case "NUMERIC_LESS_THAN":
		fallthrough
	case "NUMERIC_GREATER_THAN":
		fallthrough
	case "NUMERIC_BETWEEN":
		*e = SegmentDimensionFilterOperatorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SegmentDimensionFilterOperatorEnum: %v", v)
	}
}

// SegmentDimensionFilter - Dimension filter specifies the filtering options on a dimension.
type SegmentDimensionFilter struct {
	// Should the match be case sensitive, ignored for `IN_LIST` operator.
	CaseSensitive *bool `json:"caseSensitive,omitempty"`
	// Name of the dimension for which the filter is being applied.
	DimensionName *string `json:"dimensionName,omitempty"`
	// The list of expressions, only the first element is used for all operators
	Expressions []string `json:"expressions,omitempty"`
	// Maximum comparison values for `BETWEEN` match type.
	MaxComparisonValue *string `json:"maxComparisonValue,omitempty"`
	// Minimum comparison values for `BETWEEN` match type.
	MinComparisonValue *string `json:"minComparisonValue,omitempty"`
	// The operator to use to match the dimension with the expressions.
	Operator *SegmentDimensionFilterOperatorEnum `json:"operator,omitempty"`
}
