<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CacheKeyPolicy - Message containing what to include in the cache key for a request for Cloud CDN.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CacheKeyPolicy
{
    /**
     * If true, requests to different hosts will be cached separately.
     * 
     * @var ?bool $includeHost
     */
	#[\JMS\Serializer\Annotation\SerializedName('includeHost')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $includeHost = null;
    
    /**
     * Allows HTTP request headers (by name) to be used in the cache key.
     * 
     * @var ?array<string> $includeHttpHeaders
     */
	#[\JMS\Serializer\Annotation\SerializedName('includeHttpHeaders')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $includeHttpHeaders = null;
    
    /**
     * Allows HTTP cookies (by name) to be used in the cache key. The name=value pair will be used in the cache key Cloud CDN generates.
     * 
     * @var ?array<string> $includeNamedCookies
     */
	#[\JMS\Serializer\Annotation\SerializedName('includeNamedCookies')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $includeNamedCookies = null;
    
    /**
     * If true, http and https requests will be cached separately.
     * 
     * @var ?bool $includeProtocol
     */
	#[\JMS\Serializer\Annotation\SerializedName('includeProtocol')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $includeProtocol = null;
    
    /**
     * If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
     * 
     * @var ?bool $includeQueryString
     */
	#[\JMS\Serializer\Annotation\SerializedName('includeQueryString')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $includeQueryString = null;
    
    /**
     * Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
     * 
     * @var ?array<string> $queryStringBlacklist
     */
	#[\JMS\Serializer\Annotation\SerializedName('queryStringBlacklist')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $queryStringBlacklist = null;
    
    /**
     * Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
     * 
     * @var ?array<string> $queryStringWhitelist
     */
	#[\JMS\Serializer\Annotation\SerializedName('queryStringWhitelist')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $queryStringWhitelist = null;
    
	public function __construct()
	{
		$this->includeHost = null;
		$this->includeHttpHeaders = null;
		$this->includeNamedCookies = null;
		$this->includeProtocol = null;
		$this->includeQueryString = null;
		$this->queryStringBlacklist = null;
		$this->queryStringWhitelist = null;
	}
}
