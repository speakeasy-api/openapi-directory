/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

/**
 * The reason why a question is not applicable to your workload.
 */
export enum UpdateAnswerRequestBodyReasonEnum {
  OutOfScope = "OUT_OF_SCOPE",
  BusinessPriorities = "BUSINESS_PRIORITIES",
  ArchitectureConstraints = "ARCHITECTURE_CONSTRAINTS",
  Other = "OTHER",
  None = "NONE",
}

export class UpdateAnswerRequestBody extends SpeakeasyBase {
  /**
   * A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.
   */
  @SpeakeasyMetadata({ elemType: shared.ChoiceUpdate })
  @Expose({ name: "ChoiceUpdates" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.ChoiceUpdate> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.ChoiceUpdate);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  choiceUpdates?: Record<string, shared.ChoiceUpdate>;

  /**
   * Defines whether this question is applicable to a lens review.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IsApplicable" })
  isApplicable?: boolean;

  /**
   * The notes associated with the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Notes" })
  notes?: string;

  /**
   * The reason why a question is not applicable to your workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Reason" })
  reason?: UpdateAnswerRequestBodyReasonEnum;

  /**
   * <p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SelectedChoices" })
  selectedChoices?: string[];
}

export class UpdateAnswerRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=LensAlias",
  })
  lensAlias: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=QuestionId",
  })
  questionId: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateAnswerRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=WorkloadId",
  })
  workloadId: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateAnswerResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateAnswerOutput?: shared.UpdateAnswerOutput;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
