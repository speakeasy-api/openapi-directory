/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Node - Identifies a specific Envoy instance. The node identifier is presented to the management server, which may use this identifier to distinguish per Envoy configuration for serving. [#next-free-field: 12]
 */
public class Node {
    /**
     * This is motivated by informing a management server during canary which version of Envoy is being tested in a heterogeneous fleet. This will be set by Envoy in management server RPCs. This field is deprecated in favor of the user_agent_name and user_agent_version values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buildVersion")
    public String buildVersion;

    public Node withBuildVersion(String buildVersion) {
        this.buildVersion = buildVersion;
        return this;
    }
    
    /**
     * Client feature support list. These are well known features described in the Envoy API repository for a given major version of an API. Client features use reverse DNS naming scheme, for example `com.acme.feature`. See :ref:`the list of features ` that xDS client may support.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientFeatures")
    public String[] clientFeatures;

    public Node withClientFeatures(String[] clientFeatures) {
        this.clientFeatures = clientFeatures;
        return this;
    }
    
    /**
     * Defines the local service cluster name where Envoy is running. Though optional, it should be set if any of the following features are used: :ref:`statsd `, :ref:`health check cluster verification `, :ref:`runtime override directory `, :ref:`user agent addition `, :ref:`HTTP global rate limiting `, :ref:`CDS `, and :ref:`HTTP tracing `, either in this message or via :option:`--service-cluster`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cluster")
    public String cluster;

    public Node withCluster(String cluster) {
        this.cluster = cluster;
        return this;
    }
    
    /**
     * List of extensions and their versions supported by the node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extensions")
    public Extension[] extensions;

    public Node withExtensions(Extension[] extensions) {
        this.extensions = extensions;
        return this;
    }
    
    /**
     * An opaque node identifier for the Envoy node. This also provides the local service node name. It should be set if any of the following features are used: :ref:`statsd `, :ref:`CDS `, and :ref:`HTTP tracing `, either in this message or via :option:`--service-node`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Node withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Known listening ports on the node as a generic hint to the management server for filtering :ref:`listeners ` to be returned. For example, if there is a listener bound to port 80, the list can optionally contain the SocketAddress `(0.0.0.0,80)`. The field is optional and just a hint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listeningAddresses")
    public Address[] listeningAddresses;

    public Node withListeningAddresses(Address[] listeningAddresses) {
        this.listeningAddresses = listeningAddresses;
        return this;
    }
    
    /**
     * Identifies location of where either Envoy runs or where upstream hosts run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locality")
    public Locality locality;

    public Node withLocality(Locality locality) {
        this.locality = locality;
        return this;
    }
    
    /**
     * Opaque metadata extending the node identifier. Envoy will pass this directly to the management server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, Object> metadata;

    public Node withMetadata(java.util.Map<String, Object> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * BuildVersion combines SemVer version of extension with free-form build information (i.e. 'alpha', 'private-build') as a set of strings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userAgentBuildVersion")
    public BuildVersion userAgentBuildVersion;

    public Node withUserAgentBuildVersion(BuildVersion userAgentBuildVersion) {
        this.userAgentBuildVersion = userAgentBuildVersion;
        return this;
    }
    
    /**
     * Free-form string that identifies the entity requesting config. E.g. "envoy" or "grpc"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userAgentName")
    public String userAgentName;

    public Node withUserAgentName(String userAgentName) {
        this.userAgentName = userAgentName;
        return this;
    }
    
    /**
     * Free-form string that identifies the version of the entity requesting config. E.g. "1.12.2" or "abcd1234", or "SpecialEnvoyBuild"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userAgentVersion")
    public String userAgentVersion;

    public Node withUserAgentVersion(String userAgentVersion) {
        this.userAgentVersion = userAgentVersion;
        return this;
    }
    
    public Node(){}
}
