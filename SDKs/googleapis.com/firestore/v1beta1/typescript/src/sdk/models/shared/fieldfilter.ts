/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FieldReference } from "./fieldreference";
import { Value } from "./value";
import { Expose, Type } from "class-transformer";

/**
 * The operator to filter by.
 */
export enum FieldFilterOpEnum {
  OperatorUnspecified = "OPERATOR_UNSPECIFIED",
  LessThan = "LESS_THAN",
  LessThanOrEqual = "LESS_THAN_OR_EQUAL",
  GreaterThan = "GREATER_THAN",
  GreaterThanOrEqual = "GREATER_THAN_OR_EQUAL",
  Equal = "EQUAL",
  NotEqual = "NOT_EQUAL",
  ArrayContains = "ARRAY_CONTAINS",
  In = "IN",
  ArrayContainsAny = "ARRAY_CONTAINS_ANY",
  NotIn = "NOT_IN",
}

/**
 * A filter on a specific field.
 */
export class FieldFilter extends SpeakeasyBase {
  /**
   * A reference to a field in a document, ex: `stats.operations`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field" })
  @Type(() => FieldReference)
  field?: FieldReference;

  /**
   * The operator to filter by.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "op" })
  op?: FieldFilterOpEnum;

  /**
   * A message that can hold any of the supported value types.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  @Type(() => Value)
  value?: Value;
}
