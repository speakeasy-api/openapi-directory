"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackendServiceConnectionTrackingPolicy = exports.BackendServiceConnectionTrackingPolicyTrackingModeEnum = exports.BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Specifies connection persistence when backends are unhealthy. The default value is DEFAULT_FOR_PROTOCOL. If set to DEFAULT_FOR_PROTOCOL, the existing connections persist on unhealthy backends only for connection-oriented protocols (TCP and SCTP) and only if the Tracking Mode is PER_CONNECTION (default tracking mode) or the Session Affinity is configured for 5-tuple. They do not persist for UDP. If set to NEVER_PERSIST, after a backend becomes unhealthy, the existing connections on the unhealthy backend are never persisted on the unhealthy backend. They are always diverted to newly selected healthy backends (unless all backends are unhealthy). If set to ALWAYS_PERSIST, existing connections always persist on unhealthy backends regardless of protocol and session affinity. It is generally not recommended to use this mode overriding the default. For more details, see [Connection Persistence for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#connection-persistence) and [Connection Persistence for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#connection-persistence).
 */
var BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum;
(function (BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum) {
    BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum["AlwaysPersist"] = "ALWAYS_PERSIST";
    BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum["DefaultForProtocol"] = "DEFAULT_FOR_PROTOCOL";
    BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum["NeverPersist"] = "NEVER_PERSIST";
})(BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum = exports.BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum || (exports.BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackendsEnum = {}));
/**
 * Specifies the key used for connection tracking. There are two options: - PER_CONNECTION: This is the default mode. The Connection Tracking is performed as per the Connection Key (default Hash Method) for the specific protocol. - PER_SESSION: The Connection Tracking is performed as per the configured Session Affinity. It matches the configured Session Affinity. For more details, see [Tracking Mode for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#tracking-mode) and [Tracking Mode for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#tracking-mode).
 */
var BackendServiceConnectionTrackingPolicyTrackingModeEnum;
(function (BackendServiceConnectionTrackingPolicyTrackingModeEnum) {
    BackendServiceConnectionTrackingPolicyTrackingModeEnum["InvalidTrackingMode"] = "INVALID_TRACKING_MODE";
    BackendServiceConnectionTrackingPolicyTrackingModeEnum["PerConnection"] = "PER_CONNECTION";
    BackendServiceConnectionTrackingPolicyTrackingModeEnum["PerSession"] = "PER_SESSION";
})(BackendServiceConnectionTrackingPolicyTrackingModeEnum = exports.BackendServiceConnectionTrackingPolicyTrackingModeEnum || (exports.BackendServiceConnectionTrackingPolicyTrackingModeEnum = {}));
/**
 * Connection Tracking configuration for this BackendService.
 */
var BackendServiceConnectionTrackingPolicy = /** @class */ (function (_super) {
    __extends(BackendServiceConnectionTrackingPolicy, _super);
    function BackendServiceConnectionTrackingPolicy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "connectionPersistenceOnUnhealthyBackends" }),
        __metadata("design:type", String)
    ], BackendServiceConnectionTrackingPolicy.prototype, "connectionPersistenceOnUnhealthyBackends", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enableStrongAffinity" }),
        __metadata("design:type", Boolean)
    ], BackendServiceConnectionTrackingPolicy.prototype, "enableStrongAffinity", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "idleTimeoutSec" }),
        __metadata("design:type", Number)
    ], BackendServiceConnectionTrackingPolicy.prototype, "idleTimeoutSec", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "trackingMode" }),
        __metadata("design:type", String)
    ], BackendServiceConnectionTrackingPolicy.prototype, "trackingMode", void 0);
    return BackendServiceConnectionTrackingPolicy;
}(utils_1.SpeakeasyBase));
exports.BackendServiceConnectionTrackingPolicy = BackendServiceConnectionTrackingPolicy;
