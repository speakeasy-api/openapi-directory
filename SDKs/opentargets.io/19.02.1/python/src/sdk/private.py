"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Private:
    r"""Unstable API methods. Subject to change without prior notice. Use at your own risk."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_api_docs(self) -> operations.GetAPIDocsResponse:
        r"""Browse API documentation
        Access api docs as served by Redoc
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/platform/docs'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIDocsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_api_swagger_ui(self) -> operations.GetAPISwaggerUIResponse:
        r"""Browse interactive API documentation
        Interactive API docs using swagger-ui
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/platform/docs/swagger-ui'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPISwaggerUIResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_autocomplete(self, request: operations.GetAutocompleteRequest) -> operations.GetAutocompleteResponse:
        r"""Get `autocomplete` objects.
        Search for the closest term to autocomplete in the search box.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/platform/private/autocomplete'
        
        query_params = utils.get_query_params(operations.GetAutocompleteRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAutocompleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_disease_by_id(self, request: operations.GetDiseaseByIDRequest) -> operations.GetDiseaseByIDResponse:
        r"""Find information about a disease
        Get `disease` objects.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDiseaseByIDRequest, base_url, '/platform/private/disease/{disease}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDiseaseByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_drug_by_id(self, request: operations.GetDrugByIDRequest) -> operations.GetDrugByIDResponse:
        r"""Get drug by ID
        Get `drug` objects.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDrugByIDRequest, base_url, '/platform/private/drug/{DRUG_ID}', request)
        
        query_params = utils.get_query_params(operations.GetDrugByIDRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDrugByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_ec_oby_id(self, request: operations.GetECObyIDRequest) -> operations.GetECObyIDResponse:
        r"""Get evidence code by ID
        Get `ECO` objects.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetECObyIDRequest, base_url, '/platform/private/eco/{ECO_ID}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetECObyIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_quick_search(self, request: operations.GetQuickSearchRequest) -> operations.GetQuickSearchResponse:
        r"""Search most relevant results
        Get `search-result` objects. Enables search bar functionality.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/platform/private/quicksearch'
        
        query_params = utils.get_query_params(operations.GetQuickSearchRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetQuickSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_relation_by_efoid(self, request: operations.GetRelationByEFOIDRequest) -> operations.GetRelationByEFOIDResponse:
        r"""Find related entities by disease
        Get `relation` objects starting from diseases.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRelationByEFOIDRequest, base_url, '/platform/private/relation/disease/{disease}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRelationByEFOIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_relation_by_ensgid(self, request: operations.GetRelationByENSGIDRequest) -> operations.GetRelationByENSGIDResponse:
        r"""Find related entities by target
        Get `relation` objects starting from diseases.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRelationByENSGIDRequest, base_url, '/platform/private/relation/target/{target}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRelationByENSGIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_swagger(self) -> operations.GetSwaggerResponse:
        r"""Get OpenAPI schema
        Get swagger.yaml specs for the API
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/platform/swagger'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSwaggerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_target_by_ensgid(self, request: operations.GetTargetByENSGIDRequest) -> operations.GetTargetByENSGIDResponse:
        r"""Find information about a target
        Get `target` objects.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTargetByENSGIDRequest, base_url, '/platform/private/target/{target}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTargetByENSGIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_target_expression_by_ensgid(self, request: operations.GetTargetExpressionByENSGIDRequest) -> operations.GetTargetExpressionByENSGIDResponse:
        r"""Query expression levels
        Get `gene-expression` objects.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/platform/private/target/expression'
        
        query_params = utils.get_query_params(operations.GetTargetExpressionByENSGIDRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTargetExpressionByENSGIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_best_hit_search(self, request: str) -> operations.PostBestHitSearchResponse:
        r"""Find the best hit
        Fire the search method for multiple strings
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/platform/private/besthitsearch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostBestHitSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_disease_by_id(self, request: str) -> operations.PostDiseaseByIDResponse:
        r"""Find information about a list of diseases
        Get `disease` objects.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/platform/private/disease'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostDiseaseByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_enrichment_target(self, request: str) -> operations.PostEnrichmentTargetResponse:
        r"""Enrichment analysis
        Returns an enrichment analysis for a list of targets passed in the body
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/platform/private/enrichment/targets'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostEnrichmentTargetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_relation(self, request: str) -> operations.PostRelationResponse:
        r"""Find related entities
        Get `relation` objects.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/platform/private/relation'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRelationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_target_by_ensgid(self, request: str) -> operations.PostTargetByENSGIDResponse:
        r"""Find information about a list of targets
        Get `target` objects. Used for the target profile page.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/platform/private/target'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTargetByENSGIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_target_expression_by_ensgid(self, request: str) -> operations.PostTargetExpressionByENSGIDResponse:
        r"""Batch query expression levels
        Get `gene-expression` objects.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/platform/private/target/expression'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTargetExpressionByENSGIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    