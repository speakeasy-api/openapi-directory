/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateNetworkSwitchStackRoutingStaticRouteRequestBody {
    /**
     * Option to advertise static route via OSPF
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advertiseViaOspfEnabled")
    public Boolean advertiseViaOspfEnabled;
    public CreateNetworkSwitchStackRoutingStaticRouteRequestBody withAdvertiseViaOspfEnabled(Boolean advertiseViaOspfEnabled) {
        this.advertiseViaOspfEnabled = advertiseViaOspfEnabled;
        return this;
    }
    
    /**
     * Name or description for layer 3 static route
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public CreateNetworkSwitchStackRoutingStaticRouteRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * IP address of the next hop device to which the device sends its traffic for the subnet
     */
    @JsonProperty("nextHopIp")
    public String nextHopIp;
    public CreateNetworkSwitchStackRoutingStaticRouteRequestBody withNextHopIp(String nextHopIp) {
        this.nextHopIp = nextHopIp;
        return this;
    }
    
    /**
     * Option to prefer static route over OSPF routes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferOverOspfRoutesEnabled")
    public Boolean preferOverOspfRoutesEnabled;
    public CreateNetworkSwitchStackRoutingStaticRouteRequestBody withPreferOverOspfRoutesEnabled(Boolean preferOverOspfRoutesEnabled) {
        this.preferOverOspfRoutesEnabled = preferOverOspfRoutesEnabled;
        return this;
    }
    
    /**
     * The subnet which is routed via this static route and should be specified in CIDR notation (ex. 1.2.3.0/24)
     */
    @JsonProperty("subnet")
    public String subnet;
    public CreateNetworkSwitchStackRoutingStaticRouteRequestBody withSubnet(String subnet) {
        this.subnet = subnet;
        return this;
    }
    
}
