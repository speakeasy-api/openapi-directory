<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://accounts.twilio.com',
	];
	
	public const CREATE_CREDENTIAL_AWS_SERVERS = [
		'https://accounts.twilio.com',
	];
	
	public const CREATE_CREDENTIAL_PUBLIC_KEY_SERVERS = [
		'https://accounts.twilio.com',
	];
	
	public const CREATE_SECONDARY_AUTH_TOKEN_SERVERS = [
		'https://accounts.twilio.com',
	];
	
	public const DELETE_CREDENTIAL_AWS_SERVERS = [
		'https://accounts.twilio.com',
	];
	
	public const DELETE_CREDENTIAL_PUBLIC_KEY_SERVERS = [
		'https://accounts.twilio.com',
	];
	
	public const DELETE_SECONDARY_AUTH_TOKEN_SERVERS = [
		'https://accounts.twilio.com',
	];
	
	public const FETCH_CREDENTIAL_AWS_SERVERS = [
		'https://accounts.twilio.com',
	];
	
	public const FETCH_CREDENTIAL_PUBLIC_KEY_SERVERS = [
		'https://accounts.twilio.com',
	];
	
	public const LIST_CREDENTIAL_AWS_SERVERS = [
		'https://accounts.twilio.com',
	];
	
	public const LIST_CREDENTIAL_PUBLIC_KEY_SERVERS = [
		'https://accounts.twilio.com',
	];
	
	public const UPDATE_AUTH_TOKEN_PROMOTION_SERVERS = [
		'https://accounts.twilio.com',
	];
	
	public const UPDATE_CREDENTIAL_AWS_SERVERS = [
		'https://accounts.twilio.com',
	];
	
	public const UPDATE_CREDENTIAL_PUBLIC_KEY_SERVERS = [
		'https://accounts.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Create a new AWS Credential
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCredentialAwsCreateCredentialAwsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCredentialAwsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCredentialAwsResponse
     */
	public function createCredentialAws(
        \OpenAPI\OpenAPI\Models\Operations\CreateCredentialAwsCreateCredentialAwsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCredentialAwsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCredentialAwsResponse
    {
        $baseUrl = SDK::CREATE_CREDENTIAL_AWS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/AWS');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCredentialAwsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsV1CredentialCredentialAws = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsV1CredentialCredentialAws', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Public Key Credential
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCredentialPublicKeyCreateCredentialPublicKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCredentialPublicKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCredentialPublicKeyResponse
     */
	public function createCredentialPublicKey(
        \OpenAPI\OpenAPI\Models\Operations\CreateCredentialPublicKeyCreateCredentialPublicKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCredentialPublicKeySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCredentialPublicKeyResponse
    {
        $baseUrl = SDK::CREATE_CREDENTIAL_PUBLIC_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/PublicKeys');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCredentialPublicKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsV1CredentialCredentialPublicKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsV1CredentialCredentialPublicKey', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new secondary Auth Token
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSecondaryAuthTokenResponse
     */
	public function createSecondaryAuthToken(
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSecondaryAuthTokenResponse
    {
        $baseUrl = SDK::CREATE_SECONDARY_AUTH_TOKEN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/AuthTokens/Secondary');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSecondaryAuthTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsV1SecondaryAuthToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsV1SecondaryAuthToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a Credential from your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialAwsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialAwsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialAwsResponse
     */
	public function deleteCredentialAws(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialAwsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialAwsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialAwsResponse
    {
        $baseUrl = SDK::DELETE_CREDENTIAL_AWS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/AWS/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialAwsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialAwsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a Credential from your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialPublicKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialPublicKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialPublicKeyResponse
     */
	public function deleteCredentialPublicKey(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialPublicKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialPublicKeySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialPublicKeyResponse
    {
        $baseUrl = SDK::DELETE_CREDENTIAL_PUBLIC_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/PublicKeys/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialPublicKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialPublicKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete the secondary Auth Token from your account
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSecondaryAuthTokenResponse
     */
	public function deleteSecondaryAuthToken(
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSecondaryAuthTokenResponse
    {
        $baseUrl = SDK::DELETE_SECONDARY_AUTH_TOKEN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/AuthTokens/Secondary');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSecondaryAuthTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Fetch the AWS credentials specified by the provided Credential Sid
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCredentialAwsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCredentialAwsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCredentialAwsResponse
     */
	public function fetchCredentialAws(
        \OpenAPI\OpenAPI\Models\Operations\FetchCredentialAwsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCredentialAwsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCredentialAwsResponse
    {
        $baseUrl = SDK::FETCH_CREDENTIAL_AWS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/AWS/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchCredentialAwsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCredentialAwsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsV1CredentialCredentialAws = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsV1CredentialCredentialAws', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch the public key specified by the provided Credential Sid
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCredentialPublicKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCredentialPublicKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCredentialPublicKeyResponse
     */
	public function fetchCredentialPublicKey(
        \OpenAPI\OpenAPI\Models\Operations\FetchCredentialPublicKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCredentialPublicKeySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCredentialPublicKeyResponse
    {
        $baseUrl = SDK::FETCH_CREDENTIAL_PUBLIC_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/PublicKeys/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchCredentialPublicKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCredentialPublicKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsV1CredentialCredentialPublicKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsV1CredentialCredentialPublicKey', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a collection of AWS Credentials belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCredentialAwsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCredentialAwsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCredentialAwsResponse
     */
	public function listCredentialAws(
        \OpenAPI\OpenAPI\Models\Operations\ListCredentialAwsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCredentialAwsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCredentialAwsResponse
    {
        $baseUrl = SDK::LIST_CREDENTIAL_AWS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/AWS');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCredentialAwsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCredentialAwsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCredentialAwsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCredentialAwsListCredentialAwsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a collection of Public Key Credentials belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCredentialPublicKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCredentialPublicKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCredentialPublicKeyResponse
     */
	public function listCredentialPublicKey(
        \OpenAPI\OpenAPI\Models\Operations\ListCredentialPublicKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCredentialPublicKeySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCredentialPublicKeyResponse
    {
        $baseUrl = SDK::LIST_CREDENTIAL_PUBLIC_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/PublicKeys');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCredentialPublicKeyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCredentialPublicKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCredentialPublicKeyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCredentialPublicKeyListCredentialPublicKeyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Promote the secondary Auth Token to primary. After promoting the new token, all requests to Twilio using your old primary Auth Token will result in an error.
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAuthTokenPromotionResponse
     */
	public function updateAuthTokenPromotion(
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAuthTokenPromotionResponse
    {
        $baseUrl = SDK::UPDATE_AUTH_TOKEN_PROMOTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/AuthTokens/Promote');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAuthTokenPromotionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsV1AuthTokenPromotion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsV1AuthTokenPromotion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify the properties of a given Account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialAwsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialAwsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialAwsResponse
     */
	public function updateCredentialAws(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialAwsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialAwsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialAwsResponse
    {
        $baseUrl = SDK::UPDATE_CREDENTIAL_AWS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/AWS/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialAwsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialAwsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsV1CredentialCredentialAws = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsV1CredentialCredentialAws', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify the properties of a given Account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialPublicKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialPublicKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialPublicKeyResponse
     */
	public function updateCredentialPublicKey(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialPublicKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialPublicKeySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialPublicKeyResponse
    {
        $baseUrl = SDK::UPDATE_CREDENTIAL_PUBLIC_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/PublicKeys/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialPublicKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialPublicKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsV1CredentialCredentialPublicKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsV1CredentialCredentialPublicKey', 'json');
            }
        }

        return $response;
    }
}