// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type PostAdminRecordingsSnapshotRequestBodyCaptureHeaders struct {
	CaseInsensitive *bool `json:"caseInsensitive,omitempty"`
}

// PostAdminRecordingsSnapshotRequestBodyExtractBodyCriteria - Criteria for extracting response bodies to a separate file instead of including it in the stub mapping
type PostAdminRecordingsSnapshotRequestBodyExtractBodyCriteria struct {
	// Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. "56 Mb". Default unit is bytes.
	BinarySizeThreshold *string `json:"binarySizeThreshold,omitempty"`
	// Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. "56 Mb". Default unit is bytes.
	TextSizeThreshold *string `json:"textSizeThreshold,omitempty"`
}

// PostAdminRecordingsSnapshotRequestBodyFiltersBasicAuthCredentials - Pre-emptive basic auth credentials to match against
type PostAdminRecordingsSnapshotRequestBodyFiltersBasicAuthCredentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PostAdminRecordingsSnapshotRequestBodyFilters - Filter requests for which to create stub mapping
type PostAdminRecordingsSnapshotRequestBodyFilters struct {
	// Pre-emptive basic auth credentials to match against
	BasicAuthCredentials *PostAdminRecordingsSnapshotRequestBodyFiltersBasicAuthCredentials `json:"basicAuthCredentials,omitempty"`
	// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
	BodyPatterns []map[string]interface{} `json:"bodyPatterns,omitempty"`
	// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Cookies map[string]interface{} `json:"cookies,omitempty"`
	// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Headers map[string]interface{} `json:"headers,omitempty"`
	Ids     []string               `json:"ids,omitempty"`
	// The HTTP request method e.g. GET
	Method *string `json:"method,omitempty"`
	// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
	QueryParameters map[string]interface{} `json:"queryParameters,omitempty"`
	// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URL *string `json:"url,omitempty"`
	// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPath *string `json:"urlPath,omitempty"`
	// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPathPattern *string `json:"urlPathPattern,omitempty"`
	// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPattern *string `json:"urlPattern,omitempty"`
}

type PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4MatcherEnum string

const (
	PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4MatcherEnumEqualToXML PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4MatcherEnum = "equalToXml"
)

func (e *PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4MatcherEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "equalToXml":
		*e = PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4MatcherEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4MatcherEnum: %s", s)
	}
}

// PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4 - Always match request bodies using equalToXml
type PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4 struct {
	Matcher *PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4MatcherEnum `json:"matcher,omitempty"`
}

type PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3MatcherEnum string

const (
	PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3MatcherEnumEqualToJSON PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3MatcherEnum = "equalToJson"
)

func (e *PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3MatcherEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "equalToJson":
		*e = PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3MatcherEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3MatcherEnum: %s", s)
	}
}

// PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3 - Always match request bodies using equalToJson
type PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3 struct {
	// Ignore order of array elements
	IgnoreArrayOrder *bool `json:"ignoreArrayOrder,omitempty"`
	// Ignore extra elements in objects
	IgnoreExtraElements *bool                                                                 `json:"ignoreExtraElements,omitempty"`
	Matcher             *PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3MatcherEnum `json:"matcher,omitempty"`
}

type PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2MatcherEnum string

const (
	PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2MatcherEnumEqualTo PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2MatcherEnum = "equalTo"
)

func (e *PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2MatcherEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "equalTo":
		*e = PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2MatcherEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2MatcherEnum: %s", s)
	}
}

// PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2 - Always match request bodies using equalTo
type PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2 struct {
	// Match body using case-insensitive string comparison
	CaseInsensitive *bool                                                                 `json:"caseInsensitive,omitempty"`
	Matcher         *PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2MatcherEnum `json:"matcher,omitempty"`
}

type PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1MatcherEnum string

const (
	PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1MatcherEnumAuto PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1MatcherEnum = "auto"
)

func (e *PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1MatcherEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "auto":
		*e = PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1MatcherEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1MatcherEnum: %s", s)
	}
}

// PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1 - Automatically determine matcher based on content type (the default)
type PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1 struct {
	// If equalTo is used, match body use case-insensitive string comparison
	CaseInsensitive *bool `json:"caseInsensitive,omitempty"`
	// If equalToJson is used, ignore order of array elements
	IgnoreArrayOrder *bool `json:"ignoreArrayOrder,omitempty"`
	// If equalToJson is used, matcher ignores extra elements in objects
	IgnoreExtraElements *bool                                                                 `json:"ignoreExtraElements,omitempty"`
	Matcher             *PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1MatcherEnum `json:"matcher,omitempty"`
}

type PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternType string

const (
	PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternTypePostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1 PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternType = "post_/__admin/recordings/snapshot_requestBody_requestBodyPattern_1"
	PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternTypePostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2 PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternType = "post_/__admin/recordings/snapshot_requestBody_requestBodyPattern_2"
	PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternTypePostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3 PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternType = "post_/__admin/recordings/snapshot_requestBody_requestBodyPattern_3"
	PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternTypePostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4 PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternType = "post_/__admin/recordings/snapshot_requestBody_requestBodyPattern_4"
)

type PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern struct {
	PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1 *PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1
	PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2 *PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2
	PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3 *PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3
	PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4 *PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4

	Type PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternType
}

func CreatePostAdminRecordingsSnapshotRequestBodyRequestBodyPatternPostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1(postAdminRecordingsSnapshotRequestBodyRequestBodyPattern1 PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1) PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern {
	typ := PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternTypePostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1

	return PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern{
		PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1: &postAdminRecordingsSnapshotRequestBodyRequestBodyPattern1,
		Type: typ,
	}
}

func CreatePostAdminRecordingsSnapshotRequestBodyRequestBodyPatternPostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2(postAdminRecordingsSnapshotRequestBodyRequestBodyPattern2 PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2) PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern {
	typ := PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternTypePostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2

	return PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern{
		PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2: &postAdminRecordingsSnapshotRequestBodyRequestBodyPattern2,
		Type: typ,
	}
}

func CreatePostAdminRecordingsSnapshotRequestBodyRequestBodyPatternPostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3(postAdminRecordingsSnapshotRequestBodyRequestBodyPattern3 PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3) PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern {
	typ := PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternTypePostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3

	return PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern{
		PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3: &postAdminRecordingsSnapshotRequestBodyRequestBodyPattern3,
		Type: typ,
	}
}

func CreatePostAdminRecordingsSnapshotRequestBodyRequestBodyPatternPostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4(postAdminRecordingsSnapshotRequestBodyRequestBodyPattern4 PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4) PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern {
	typ := PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternTypePostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4

	return PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern{
		PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4: &postAdminRecordingsSnapshotRequestBodyRequestBodyPattern4,
		Type: typ,
	}
}

func (u *PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postAdminRecordingsSnapshotRequestBodyRequestBodyPattern1 := new(PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminRecordingsSnapshotRequestBodyRequestBodyPattern1); err == nil {
		u.PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1 = postAdminRecordingsSnapshotRequestBodyRequestBodyPattern1
		u.Type = PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternTypePostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1
		return nil
	}

	postAdminRecordingsSnapshotRequestBodyRequestBodyPattern2 := new(PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminRecordingsSnapshotRequestBodyRequestBodyPattern2); err == nil {
		u.PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2 = postAdminRecordingsSnapshotRequestBodyRequestBodyPattern2
		u.Type = PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternTypePostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2
		return nil
	}

	postAdminRecordingsSnapshotRequestBodyRequestBodyPattern3 := new(PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminRecordingsSnapshotRequestBodyRequestBodyPattern3); err == nil {
		u.PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3 = postAdminRecordingsSnapshotRequestBodyRequestBodyPattern3
		u.Type = PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternTypePostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3
		return nil
	}

	postAdminRecordingsSnapshotRequestBodyRequestBodyPattern4 := new(PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminRecordingsSnapshotRequestBodyRequestBodyPattern4); err == nil {
		u.PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4 = postAdminRecordingsSnapshotRequestBodyRequestBodyPattern4
		u.Type = PostAdminRecordingsSnapshotRequestBodyRequestBodyPatternTypePostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern) MarshalJSON() ([]byte, error) {
	if u.PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1 != nil {
		return json.Marshal(u.PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern1)
	}

	if u.PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2 != nil {
		return json.Marshal(u.PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern2)
	}

	if u.PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3 != nil {
		return json.Marshal(u.PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern3)
	}

	if u.PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4 != nil {
		return json.Marshal(u.PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern4)
	}

	return nil, nil
}

type PostAdminRecordingsSnapshotRequestBody struct {
	// Headers from the request to include in the generated stub mappings, mapped to parameter objects. The only parameter available is "caseInsensitive", which defaults to false
	CaptureHeaders map[string]PostAdminRecordingsSnapshotRequestBodyCaptureHeaders `json:"captureHeaders,omitempty"`
	// Criteria for extracting response bodies to a separate file instead of including it in the stub mapping
	ExtractBodyCriteria *PostAdminRecordingsSnapshotRequestBodyExtractBodyCriteria `json:"extractBodyCriteria,omitempty"`
	Filters             *PostAdminRecordingsSnapshotRequestBodyFilters             `json:"filters,omitempty"`
	// Whether to save stub mappings to the file system or just return them
	Persist *bool `json:"persist,omitempty"`
	// When true, duplicate requests will be added to a Scenario. When false, duplicates are discarded
	RepeatsAsScenarios *bool `json:"repeatsAsScenarios,omitempty"`
	// Control the request body matcher used in generated stub mappings
	RequestBodyPattern *PostAdminRecordingsSnapshotRequestBodyRequestBodyPattern `json:"requestBodyPattern,omitempty"`
	// List of names of stub mappings transformers to apply to generated stubs
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// Parameters to pass to stub mapping transformers
	Transformers []string `json:"transformers,omitempty"`
}

type PostAdminRecordingsSnapshotRequest struct {
	Request PostAdminRecordingsSnapshotRequestBody `request:"mediaType=application/json"`
}

// PostAdminRecordingsSnapshot200ApplicationJSONMappingsRequestBasicAuthCredentials - Pre-emptive basic auth credentials to match against
type PostAdminRecordingsSnapshot200ApplicationJSONMappingsRequestBasicAuthCredentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type PostAdminRecordingsSnapshot200ApplicationJSONMappingsRequest struct {
	// Pre-emptive basic auth credentials to match against
	BasicAuthCredentials *PostAdminRecordingsSnapshot200ApplicationJSONMappingsRequestBasicAuthCredentials `json:"basicAuthCredentials,omitempty"`
	// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
	BodyPatterns []map[string]interface{} `json:"bodyPatterns,omitempty"`
	// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Cookies map[string]interface{} `json:"cookies,omitempty"`
	// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The HTTP request method e.g. GET
	Method *string `json:"method,omitempty"`
	// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
	QueryParameters map[string]interface{} `json:"queryParameters,omitempty"`
	// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URL *string `json:"url,omitempty"`
	// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPath *string `json:"urlPath,omitempty"`
	// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPathPattern *string `json:"urlPathPattern,omitempty"`
	// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPattern *string `json:"urlPattern,omitempty"`
}

// PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformFaultEnum - The fault to apply (instead of a full, valid response).
type PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformFaultEnum string

const (
	PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformFaultEnumConnectionResetByPeer  PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformFaultEnum = "CONNECTION_RESET_BY_PEER"
	PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformFaultEnumEmptyResponse          PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformFaultEnum = "EMPTY_RESPONSE"
	PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformFaultEnumMalformedResponseChunk PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformFaultEnumRandomDataThenClose    PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformFaultEnum: %s", s)
	}
}

type PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformTypeEnum string

const (
	PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformTypeEnumUniform PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformTypeEnum = "uniform"
)

func (e *PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uniform":
		*e = PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformTypeEnum: %s", s)
	}
}

// PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform - Uniformly distributed random response delay.
type PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	Lower    *int64                 `json:"lower,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string `json:"proxyBaseUrl,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string                                                                      `json:"transformers,omitempty"`
	Type         *PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniformTypeEnum `json:"type,omitempty"`
	Upper        *int64                                                                        `json:"upper,omitempty"`
}

// PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalFaultEnum - The fault to apply (instead of a full, valid response).
type PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalFaultEnum string

const (
	PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalFaultEnumConnectionResetByPeer  PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalFaultEnum = "CONNECTION_RESET_BY_PEER"
	PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalFaultEnumEmptyResponse          PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalFaultEnum = "EMPTY_RESPONSE"
	PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalFaultEnumMalformedResponseChunk PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalFaultEnumRandomDataThenClose    PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalFaultEnum: %s", s)
	}
}

type PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalTypeEnum string

const (
	PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalTypeEnumLognormal PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalTypeEnum = "lognormal"
)

func (e *PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lognormal":
		*e = PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalTypeEnum: %s", s)
	}
}

// PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal - Log normal randomly distributed response delay.
type PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	Median   *int64                 `json:"median,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string  `json:"proxyBaseUrl,omitempty"`
	Sigma        *float64 `json:"sigma,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string                                                                        `json:"transformers,omitempty"`
	Type         *PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormalTypeEnum `json:"type,omitempty"`
}

type PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseType string

const (
	PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseTypePostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseType = "post_/__admin/recordings/snapshot_200ApplicationJSON_mappings_response_Log normal"
	PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseTypePostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform   PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseType = "post_/__admin/recordings/snapshot_200ApplicationJSON_mappings_response_Uniform"
)

type PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponse struct {
	PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal *PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal
	PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform   *PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform

	Type PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseType
}

func CreatePostAdminRecordingsSnapshot200ApplicationJSONMappingsResponsePostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal(postAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal) PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponse {
	typ := PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseTypePostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal

	return PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponse{
		PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal: &postAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal,
		Type: typ,
	}
}

func CreatePostAdminRecordingsSnapshot200ApplicationJSONMappingsResponsePostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform(postAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform) PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponse {
	typ := PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseTypePostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform

	return PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponse{
		PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform: &postAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform,
		Type: typ,
	}
}

func (u *PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponse) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal := new(PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal); err == nil {
		u.PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal = postAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal
		u.Type = PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseTypePostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal
		return nil
	}

	postAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform := new(PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform); err == nil {
		u.PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform = postAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform
		u.Type = PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseTypePostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponse) MarshalJSON() ([]byte, error) {
	if u.PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal != nil {
		return json.Marshal(u.PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseLogNormal)
	}

	if u.PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform != nil {
		return json.Marshal(u.PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponseUniform)
	}

	return nil, nil
}

type PostAdminRecordingsSnapshot200ApplicationJSONMappings struct {
	// This stub mapping's unique identifier
	ID *string `json:"id,omitempty"`
	// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The stub mapping's name
	Name *string `json:"name,omitempty"`
	// The new state for the scenario to be updated to after this stub is served.
	NewScenarioState *string `json:"newScenarioState,omitempty"`
	// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
	Persistent *bool `json:"persistent,omitempty"`
	// A map of the names of post serve action extensions to trigger and their parameters.
	PostServeActions map[string]interface{} `json:"postServeActions,omitempty"`
	// This stub mapping's priority relative to others. 1 is highest.
	Priority *int64                                                        `json:"priority,omitempty"`
	Request  *PostAdminRecordingsSnapshot200ApplicationJSONMappingsRequest `json:"request,omitempty"`
	// The required state of the scenario in order for this stub to be matched.
	RequiredScenarioState *string                                                        `json:"requiredScenarioState,omitempty"`
	Response              *PostAdminRecordingsSnapshot200ApplicationJSONMappingsResponse `json:"response,omitempty"`
	// The name of the scenario that this stub mapping is part of
	ScenarioName *string `json:"scenarioName,omitempty"`
	// Alias for the id
	UUID *string `json:"uuid,omitempty"`
}

type PostAdminRecordingsSnapshot200ApplicationJSONMeta struct {
	Total int64 `json:"total"`
}

// PostAdminRecordingsSnapshot200ApplicationJSON - Successfully took a snapshot recording
type PostAdminRecordingsSnapshot200ApplicationJSON struct {
	Mappings []PostAdminRecordingsSnapshot200ApplicationJSONMappings `json:"mappings,omitempty"`
	Meta     *PostAdminRecordingsSnapshot200ApplicationJSONMeta      `json:"meta,omitempty"`
}

type PostAdminRecordingsSnapshotResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successfully took a snapshot recording
	PostAdminRecordingsSnapshot200ApplicationJSONObject *PostAdminRecordingsSnapshot200ApplicationJSON
}
