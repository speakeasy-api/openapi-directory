/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RunPivotReportResponse - The response pivot report table corresponding to a pivot request.
 */
public class RunPivotReportResponse {
    /**
     * Aggregation of metric values. Can be totals, minimums, or maximums. The returned aggregations are controlled by the metric_aggregations in the pivot. The type of aggregation returned in each row is shown by the dimension_values which are set to "RESERVED_".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aggregates")
    public Row[] aggregates;

    public RunPivotReportResponse withAggregates(Row[] aggregates) {
        this.aggregates = aggregates;
        return this;
    }
    
    /**
     * Describes dimension columns. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimensionHeaders")
    public DimensionHeader[] dimensionHeaders;

    public RunPivotReportResponse withDimensionHeaders(DimensionHeader[] dimensionHeaders) {
        this.dimensionHeaders = dimensionHeaders;
        return this;
    }
    
    /**
     * Identifies what kind of resource this message is. This `kind` is always the fixed string "analyticsData#runPivotReport". Useful to distinguish between response types in JSON.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public RunPivotReportResponse withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Response's metadata carrying additional information about the report content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public ResponseMetaData metadata;

    public RunPivotReportResponse withMetadata(ResponseMetaData metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Describes metric columns. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metricHeaders")
    public MetricHeader[] metricHeaders;

    public RunPivotReportResponse withMetricHeaders(MetricHeader[] metricHeaders) {
        this.metricHeaders = metricHeaders;
        return this;
    }
    
    /**
     * Summarizes the columns and rows created by a pivot. Each pivot in the request produces one header in the response. If we have a request like this: "pivots": [{ "fieldNames": ["country", "city"] }, { "fieldNames": "eventName" }] We will have the following `pivotHeaders` in the response: "pivotHeaders" : [{ "dimensionHeaders": [{ "dimensionValues": [ { "value": "United Kingdom" }, { "value": "London" } ] }, { "dimensionValues": [ { "value": "Japan" }, { "value": "Osaka" } ] }] }, { "dimensionHeaders": [{ "dimensionValues": [{ "value": "session_start" }] }, { "dimensionValues": [{ "value": "scroll" }] }] }]
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pivotHeaders")
    public PivotHeader[] pivotHeaders;

    public RunPivotReportResponse withPivotHeaders(PivotHeader[] pivotHeaders) {
        this.pivotHeaders = pivotHeaders;
        return this;
    }
    
    /**
     * Current state of all quotas for this Analytics Property. If any quota for a property is exhausted, all requests to that property will return Resource Exhausted errors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("propertyQuota")
    public PropertyQuota propertyQuota;

    public RunPivotReportResponse withPropertyQuota(PropertyQuota propertyQuota) {
        this.propertyQuota = propertyQuota;
        return this;
    }
    
    /**
     * Rows of dimension value combinations and metric values in the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rows")
    public Row[] rows;

    public RunPivotReportResponse withRows(Row[] rows) {
        this.rows = rows;
        return this;
    }
    
    public RunPivotReportResponse(){}
}
