"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Incidents:
    r"""Incidents matching parameters"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_version_incidents_format_(self, request: operations.GETVersionIncidentsFormatRequest) -> operations.GETVersionIncidentsFormatResponse:
        r"""Paginated incidents matching parameters
        <p>If youâ€™d like more detailed information about bike incidents, use this endpoint. For mapping, <code>locations</code> is probably a better bet.</p>
        
        <p><strong>Notes on location searching</strong>: <br />
        - <code>proximity</code> accepts an ip address, an address, zipcode, city, or latitude,longitude - i.e. <code>70.210.133.87</code>, <code>210 NW 11th Ave, Portland, OR</code>, <code>60647</code>, <code>Chicago, IL</code>, and <code>45.521728,-122.67326</code> are all acceptable<br />
        - <code>proximity_square</code> sets the length of the sides of the square to find matches inside of. The square is centered on the location specified by <code>proximity</code>. It defaults to 100.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/incidents'
        
        query_params = utils.get_query_params(operations.GETVersionIncidentsFormatRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETVersionIncidentsFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_version_incidents_id_format_(self, request: operations.GETVersionIncidentsIDFormatRequest) -> operations.GETVersionIncidentsIDFormatResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETVersionIncidentsIDFormatRequest, base_url, '/v2/incidents/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETVersionIncidentsIDFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    