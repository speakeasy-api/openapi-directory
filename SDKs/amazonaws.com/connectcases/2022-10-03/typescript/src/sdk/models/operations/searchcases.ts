/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A filter for cases. Only one value can be provided.
 */
export class SearchCasesRequestBodyFilter extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.CaseFilter })
  @Expose({ name: "andAll" })
  @Type(() => shared.CaseFilter)
  andAll?: shared.CaseFilter[];

  @SpeakeasyMetadata()
  @Expose({ name: "field" })
  @Type(() => shared.FieldFilter)
  field?: shared.FieldFilter;

  /**
   * A filter for cases. Only one value can be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "not" })
  @Type(() => shared.CaseFilter)
  not?: shared.CaseFilter;
}

export class SearchCasesRequestBody extends SpeakeasyBase {
  /**
   * The list of field identifiers to be returned as part of the response.
   */
  @SpeakeasyMetadata({ elemType: shared.FieldIdentifier })
  @Expose({ name: "fields" })
  @Type(() => shared.FieldIdentifier)
  fields?: shared.FieldIdentifier[];

  /**
   * A filter for cases. Only one value can be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filter" })
  @Type(() => SearchCasesRequestBodyFilter)
  filter?: SearchCasesRequestBodyFilter;

  /**
   * The maximum number of cases to return. The current maximum supported value is 25. This is also the default value when no other value is provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   * The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;

  /**
   * A word or phrase used to perform a quick search.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "searchTerm" })
  searchTerm?: string;

  /**
   * A list of sorts where each sort specifies a field and their sort order to be applied to the results.
   */
  @SpeakeasyMetadata({ elemType: shared.Sort })
  @Expose({ name: "sorts" })
  @Type(() => shared.Sort)
  sorts?: shared.Sort[];
}

export class SearchCasesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: SearchCasesRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The unique identifier of the Cases domain.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=domainId",
  })
  domainId: string;

  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;
}

export class SearchCasesResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  searchCasesResponse?: shared.SearchCasesResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
