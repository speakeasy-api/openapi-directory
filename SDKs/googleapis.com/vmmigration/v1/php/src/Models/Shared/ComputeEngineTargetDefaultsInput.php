<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ComputeEngineTargetDefaultsInput - ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ComputeEngineTargetDefaultsInput
{
    /**
     * Additional licenses to assign to the VM.
     * 
     * @var ?array<string> $additionalLicenses
     */
	#[\JMS\Serializer\Annotation\SerializedName('additionalLicenses')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $additionalLicenses = null;
    
    /**
     * AppliedLicense holds the license data returned by adaptation module report.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\AppliedLicense $appliedLicense
     */
	#[\JMS\Serializer\Annotation\SerializedName('appliedLicense')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AppliedLicense')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AppliedLicense $appliedLicense = null;
    
    /**
     * Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ComputeScheduling $computeScheduling
     */
	#[\JMS\Serializer\Annotation\SerializedName('computeScheduling')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ComputeScheduling')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ComputeScheduling $computeScheduling = null;
    
    /**
     * The disk type to use in the VM.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ComputeEngineTargetDefaultsDiskTypeEnum $diskType
     */
	#[\JMS\Serializer\Annotation\SerializedName('diskType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ComputeEngineTargetDefaultsDiskTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ComputeEngineTargetDefaultsDiskTypeEnum $diskType = null;
    
    /**
     * The hostname to assign to the VM.
     * 
     * @var ?string $hostname
     */
	#[\JMS\Serializer\Annotation\SerializedName('hostname')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $hostname = null;
    
    /**
     * A map of labels to associate with the VM.
     * 
     * @var ?array<string, string> $labels
     */
	#[\JMS\Serializer\Annotation\SerializedName('labels')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $labels = null;
    
    /**
     * The license type to use in OS adaptation.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ComputeEngineTargetDefaultsLicenseTypeEnum $licenseType
     */
	#[\JMS\Serializer\Annotation\SerializedName('licenseType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ComputeEngineTargetDefaultsLicenseTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ComputeEngineTargetDefaultsLicenseTypeEnum $licenseType = null;
    
    /**
     * The machine type to create the VM with.
     * 
     * @var ?string $machineType
     */
	#[\JMS\Serializer\Annotation\SerializedName('machineType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $machineType = null;
    
    /**
     * The machine type series to create the VM with.
     * 
     * @var ?string $machineTypeSeries
     */
	#[\JMS\Serializer\Annotation\SerializedName('machineTypeSeries')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $machineTypeSeries = null;
    
    /**
     * The metadata key/value pairs to assign to the VM.
     * 
     * @var ?array<string, string> $metadata
     */
	#[\JMS\Serializer\Annotation\SerializedName('metadata')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $metadata = null;
    
    /**
     * List of NICs connected to this VM.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\NetworkInterface> $networkInterfaces
     */
	#[\JMS\Serializer\Annotation\SerializedName('networkInterfaces')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\NetworkInterface>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $networkInterfaces = null;
    
    /**
     * A map of network tags to associate with the VM.
     * 
     * @var ?array<string> $networkTags
     */
	#[\JMS\Serializer\Annotation\SerializedName('networkTags')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $networkTags = null;
    
    /**
     * Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
     * 
     * @var ?bool $secureBoot
     */
	#[\JMS\Serializer\Annotation\SerializedName('secureBoot')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $secureBoot = null;
    
    /**
     * The service account to associate the VM with.
     * 
     * @var ?string $serviceAccount
     */
	#[\JMS\Serializer\Annotation\SerializedName('serviceAccount')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $serviceAccount = null;
    
    /**
     * The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
     * 
     * @var ?string $targetProject
     */
	#[\JMS\Serializer\Annotation\SerializedName('targetProject')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $targetProject = null;
    
    /**
     * The name of the VM to create.
     * 
     * @var ?string $vmName
     */
	#[\JMS\Serializer\Annotation\SerializedName('vmName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $vmName = null;
    
    /**
     * The zone in which to create the VM.
     * 
     * @var ?string $zone
     */
	#[\JMS\Serializer\Annotation\SerializedName('zone')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $zone = null;
    
	public function __construct()
	{
		$this->additionalLicenses = null;
		$this->appliedLicense = null;
		$this->computeScheduling = null;
		$this->diskType = null;
		$this->hostname = null;
		$this->labels = null;
		$this->licenseType = null;
		$this->machineType = null;
		$this->machineTypeSeries = null;
		$this->metadata = null;
		$this->networkInterfaces = null;
		$this->networkTags = null;
		$this->secureBoot = null;
		$this->serviceAccount = null;
		$this->targetProject = null;
		$this->vmName = null;
		$this->zone = null;
	}
}
