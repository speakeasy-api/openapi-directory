"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class CustomGatewayProcessPaymentsAndRefunds:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_custom_gateway_payment_ownership_id_(self, request: operations.PostCustomGatewayPaymentOwnershipIDRequest) -> operations.PostCustomGatewayPaymentOwnershipIDResponse:
        r"""Adds a payment for an app on behalf of a user
        - Results are returned for the market provided within the basic authentication credentials 
        - Payments must be enabled and 'Custom' must be selected as the gateway in order to use this API endpoint
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostCustomGatewayPaymentOwnershipIDRequest, base_url, '/custom-gateway/payment/{ownershipId}', request)
        
        query_params = utils.get_query_params(operations.PostCustomGatewayPaymentOwnershipIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCustomGatewayPaymentOwnershipIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 412]:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_custom_gateway_refund_ownership_id_(self, request: operations.PostCustomGatewayRefundOwnershipIDRequest) -> operations.PostCustomGatewayRefundOwnershipIDResponse:
        r"""Fully or partially refund payment for an app on behalf of a user
        - Results are returned for the market provided within the basic authentication credentials
        - Payments must be enabled and 'Custom' must be selected as the gateway in order to use this API endpoint
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostCustomGatewayRefundOwnershipIDRequest, base_url, '/custom-gateway/refund/{ownershipId}', request)
        
        query_params = utils.get_query_params(operations.PostCustomGatewayRefundOwnershipIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCustomGatewayRefundOwnershipIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 412]:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    