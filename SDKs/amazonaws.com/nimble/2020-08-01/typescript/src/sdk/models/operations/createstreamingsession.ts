/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The EC2 Instance type used for the streaming session.
 */
export enum CreateStreamingSessionRequestBodyEc2InstanceTypeEnum {
  G4dnXlarge = "g4dn.xlarge",
  G4dn2xlarge = "g4dn.2xlarge",
  G4dn4xlarge = "g4dn.4xlarge",
  G4dn8xlarge = "g4dn.8xlarge",
  G4dn12xlarge = "g4dn.12xlarge",
  G4dn16xlarge = "g4dn.16xlarge",
  G34xlarge = "g3.4xlarge",
  G3sXlarge = "g3s.xlarge",
  G5Xlarge = "g5.xlarge",
  G52xlarge = "g5.2xlarge",
  G54xlarge = "g5.4xlarge",
  G58xlarge = "g5.8xlarge",
  G516xlarge = "g5.16xlarge",
}

export class CreateStreamingSessionRequestBody extends SpeakeasyBase {
  /**
   * The EC2 Instance type used for the streaming session.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ec2InstanceType" })
  ec2InstanceType?: CreateStreamingSessionRequestBodyEc2InstanceTypeEnum;

  /**
   * The ID of the launch profile used to control access from the streaming session.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "launchProfileId" })
  launchProfileId: string;

  /**
   * The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ownedBy" })
  ownedBy?: string;

  /**
   * The ID of the streaming image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "streamingImageId" })
  streamingImageId?: string;

  /**
   * A collection of labels, in the form of key-value pairs, that apply to this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateStreamingSessionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateStreamingSessionRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Client-Token",
  })
  xAmzClientToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The studio ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=studioId",
  })
  studioId: string;
}

export class CreateStreamingSessionResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createStreamingSessionResponse?: shared.CreateStreamingSessionResponse;

  /**
   * InternalServerErrorException
   */
  @SpeakeasyMetadata()
  internalServerErrorException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
