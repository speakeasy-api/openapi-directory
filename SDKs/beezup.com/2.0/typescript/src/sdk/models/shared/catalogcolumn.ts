/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CatalogColumnLinks } from "./catalogcolumnlinks";
import { ColumnConfiguration } from "./columnconfiguration";
import { DuplicateProductValueConfiguration } from "./duplicateproductvalueconfiguration";
import { Expose, Type } from "class-transformer";

/**
 * The catalog column configuration
 */
export class CatalogColumn extends SpeakeasyBase {
  /**
   * The catalog column name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "catalogColumnName" })
  catalogColumnName: string;

  /**
   * Indicates the configuration applied on the column (catalog or custom) during the importation process.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "configuration" })
  @Type(() => ColumnConfiguration)
  configuration: ColumnConfiguration;

  /**
   * Describe how you want to manage the duplication of the product value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duplicateProductValueConfiguration" })
  @Type(() => DuplicateProductValueConfiguration)
  duplicateProductValueConfiguration?: DuplicateProductValueConfiguration;

  /**
   * The catalog column identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * IF true, the product values of this column will be not taken in account during the importation process
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ignored" })
  ignored?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => CatalogColumnLinks)
  links: CatalogColumnLinks;

  /**
   * Column named by the user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userColumName" })
  userColumName: string;
}
