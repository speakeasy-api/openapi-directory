/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class ListResourcesQueryParams {
    /**
     * Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerAccount**.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include")
    public String include;
    public ListResourcesQueryParams withInclude(String include) {
        this.include = include;
        return this;
    }
    
    /**
     * The number of files to limit the result. If you have more files in your directory than this limit, make multiple calls, incrementing the `offset` parameter, above.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Integer limit;
    public ListResourcesQueryParams withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Text to match resource names. This allows you to filter the results returned. For example, to locate only zip archive files, you can enter `*zip` and only resources ending in "zip" will be included in the list of results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=name")
    public String name;
    public ListResourcesQueryParams withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. e.g, setting `offset=200` would trigger the server to skip the first 200 matching entries when returning the results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    public Integer offset;
    public ListResourcesQueryParams withOffset(Integer offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * Resource identifier to get resources for. Can be path/id/name.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=resource")
    public String resource;
    public ListResourcesQueryParams withResource(String resource) {
        this.resource = resource;
        return this;
    }
    
    /**
     * Endpoint support multiple sort fields by allowing array of sort params. Sort fields should be applied in the order specified. The sort order for each sort field is ascending unless it is prefixed with a minus (\u201c-\u201c), in which case it will be descending.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String sort;
    public ListResourcesQueryParams withSort(String sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Limit types of resources returned to "file" or "dir" only. This is ignored if you are using the `name` parameter to trigger a search.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    public String type;
    public ListResourcesQueryParams withType(String type) {
        this.type = type;
        return this;
    }
    
}
