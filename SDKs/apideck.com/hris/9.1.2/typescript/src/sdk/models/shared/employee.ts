/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Address } from "./address";
import { CurrencyEnum } from "./currencyenum";
import { CustomField } from "./customfield";
import { Email } from "./email";
import { EmploymentStatusEnum } from "./employmentstatusenum";
import { GenderEnum } from "./genderenum";
import { PaymentUnitEnum } from "./paymentunitenum";
import { PhoneNumber } from "./phonenumber";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The FLSA status for this compensation.
 */
export enum EmployeeCompensationsFlsaStatusEnum {
  Exempt = "exempt",
  SalariedNonexempt = "salaried-nonexempt",
  Nonexempt = "nonexempt",
  Owner = "owner",
}

export class EmployeeCompensations extends SpeakeasyBase {
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: CurrencyEnum;

  /**
   * The date on which a change to an employee's compensation takes effect.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "effective_date" })
  effectiveDate?: string;

  /**
   * The FLSA status for this compensation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "flsa_status" })
  flsaStatus?: EmployeeCompensationsFlsaStatusEnum;

  /**
   * A unique identifier for an object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The ID of the job to which the compensation belongs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "job_id" })
  jobId?: string;

  /**
   * Unit of measurement for employee compensation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payment_unit" })
  paymentUnit?: PaymentUnitEnum;

  /**
   * The amount paid per payment unit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rate" })
  rate?: number;
}

/**
 * The work schedule of the employee.
 */
export enum EmployeeEmploymentRoleEmploymentSubTypeEnum {
  FullTime = "full_time",
  PartTime = "part_time",
  Hourly = "hourly",
}

/**
 * The type of employment relationship the employee has with the organization.
 */
export enum EmployeeEmploymentRoleEmploymentTypeEnum {
  Contractor = "contractor",
  Employee = "employee",
  Freelance = "freelance",
  Temp = "temp",
  Internship = "internship",
  Other = "other",
}

export class EmployeeEmploymentRole extends SpeakeasyBase {
  /**
   * The work schedule of the employee.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sub_type" })
  subType?: EmployeeEmploymentRoleEmploymentSubTypeEnum;

  /**
   * The type of employment relationship the employee has with the organization.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: EmployeeEmploymentRoleEmploymentTypeEnum;
}

export class EmployeeJobs extends SpeakeasyBase {
  /**
   * The rate of pay for the employee in their current job role.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "compensation_rate" })
  compensationRate?: number;

  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: CurrencyEnum;

  /**
   * A unique identifier for an object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "employee_id" })
  employeeId?: string;

  /**
   * The date on which the employee leaves or is expected to leave their current job role.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endDate?: Date;

  /**
   * The date on which the employee was hired by the organization
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hired_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  hiredAt?: Date;

  /**
   * A unique identifier for an object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Indicates whether this the employee's primary job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_primary" })
  isPrimary?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  @Type(() => Address)
  location?: Address;

  /**
   * Unit of measurement for employee compensation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payment_unit" })
  paymentUnit?: PaymentUnitEnum;

  /**
   * The position and responsibilities of the person within the organization.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "role" })
  role?: string;

  /**
   * The date on which the employee starts working in their current job role.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startDate?: Date;

  /**
   * The job title of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

/**
 * The reason because the employment ended.
 */
export enum EmployeeLeavingReasonEnum {
  Dismissed = "dismissed",
  Resigned = "resigned",
  Redundancy = "redundancy",
  Other = "other",
}

export class EmployeeManager extends SpeakeasyBase {
  /**
   * The email address of the manager.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "employment_status" })
  employmentStatus?: EmploymentStatusEnum;

  /**
   * The first name of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName?: string;

  /**
   * A unique identifier for an object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The last name of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName?: string;

  /**
   * The name of the manager, often a combination of their first and last names.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class EmployeePerson extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "birthday" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  birthday?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "deceased_on" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  deceasedOn?: Date;

  /**
   * The first name of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName?: string;

  /**
   * The gender represents the gender identity of a person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gender" })
  gender?: GenderEnum;

  /**
   * A unique identifier for an object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "initials" })
  initials?: string;

  /**
   * The last name of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName?: string;

  /**
   * Middle name of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "middle_name" })
  middleName?: string;
}

export class EmployeeSocialLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

/**
 * The team the person is currently in.
 */
export class EmployeeTeam extends SpeakeasyBase {
  /**
   * The unique identifier of the team.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The name of the team.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class Employee extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Address })
  @Expose({ name: "addresses" })
  @Type(() => Address)
  addresses?: Address[];

  /**
   * The date of birth of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "birthday" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  birthday?: Date;

  /**
   * The unique identifier of the company.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "company_id" })
  companyId?: string;

  /**
   * The name of the company.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "company_name" })
  companyName?: string;

  @SpeakeasyMetadata({ elemType: EmployeeCompensations })
  @Expose({ name: "compensations" })
  @Type(() => EmployeeCompensations)
  compensations?: EmployeeCompensations[];

  /**
   * Country code according to ISO 3166-1 alpha-2.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country_of_birth" })
  countryOfBirth?: string;

  /**
   * The date and time when the object was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * The user who created the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_by" })
  createdBy?: string;

  @SpeakeasyMetadata({ elemType: CustomField })
  @Expose({ name: "custom_fields" })
  @Type(() => CustomField)
  customFields?: CustomField[];

  /**
   * The date the person deceased.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deceased_on" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  deceasedOn?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "deleted" })
  deleted?: boolean;

  /**
   * The department the person is currently in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "department" })
  department?: string;

  /**
   * Unique identifier of the department ID this employee belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "department_id" })
  departmentId?: string;

  /**
   * A description of the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Indicate the employee's dietary preference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dietary_preference" })
  dietaryPreference?: string;

  /**
   * The direct reports refer to the individuals who report directly to a person in the organizational hierarchy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "direct_reports" })
  directReports?: string[];

  /**
   * The name used to display the employee, often a combination of their first and last names.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_name" })
  displayName?: string;

  /**
   * The division the person is currently in. Usually a collection of departments or teams or regions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "division" })
  division?: string;

  /**
   * Unique identifier of the division this employee belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "division_id" })
  divisionId?: string;

  @SpeakeasyMetadata({ elemType: Email })
  @Expose({ name: "emails" })
  @Type(() => Email)
  emails?: Email[];

  /**
   * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "employee_number" })
  employeeNumber?: string;

  /**
   * An End Date is the date that the employee ended working at the company
   */
  @SpeakeasyMetadata()
  @Expose({ name: "employment_end_date" })
  employmentEndDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "employment_role" })
  @Type(() => EmployeeEmploymentRole)
  employmentRole?: EmployeeEmploymentRole;

  /**
   * A Start Date is the date that the employee started working at the company
   */
  @SpeakeasyMetadata()
  @Expose({ name: "employment_start_date" })
  employmentStartDate?: string;

  /**
   * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "employment_status" })
  employmentStatus?: EmploymentStatusEnum;

  /**
   * The first name of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName?: string;

  /**
   * Indicate the employee's food allergies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "food_allergies" })
  foodAllergies?: string[];

  /**
   * The gender represents the gender identity of a person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gender" })
  gender?: GenderEnum;

  /**
   * A unique identifier for an object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * The initials of the person, usually derived from their first, middle, and last names.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "initials" })
  initials?: string;

  @SpeakeasyMetadata({ elemType: EmployeeJobs })
  @Expose({ name: "jobs" })
  @Type(() => EmployeeJobs)
  jobs?: EmployeeJobs[];

  @SpeakeasyMetadata()
  @Expose({ name: "languages" })
  languages?: string[];

  /**
   * The last name of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName?: string;

  /**
   * The reason because the employment ended.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "leaving_reason" })
  leavingReason?: EmployeeLeavingReasonEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "manager" })
  @Type(() => EmployeeManager)
  manager?: EmployeeManager;

  /**
   * The marital status of the employee.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marital_status" })
  maritalStatus?: string;

  /**
   * Middle name of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "middle_name" })
  middleName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "nationalities" })
  nationalities?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "partner" })
  @Type(() => EmployeePerson)
  partner?: EmployeePerson;

  @SpeakeasyMetadata({ elemType: PhoneNumber })
  @Expose({ name: "phone_numbers" })
  @Type(() => PhoneNumber)
  phoneNumbers?: PhoneNumber[];

  /**
   * The URL of the photo of a person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "photo_url" })
  photoUrl?: string;

  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preferred_language" })
  preferredLanguage?: string;

  /**
   * The name the employee prefers to be addressed by, which may be different from their legal name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preferred_name" })
  preferredName?: string;

  /**
   * The preferred pronouns of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pronouns" })
  pronouns?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "record_url" })
  recordUrl?: string;

  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "row_version" })
  rowVersion?: string;

  /**
   * A formal salutation for the person. For example, 'Mr', 'Mrs'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "salutation" })
  salutation?: string;

  @SpeakeasyMetadata({ elemType: EmployeeSocialLinks })
  @Expose({ name: "social_links" })
  @Type(() => EmployeeSocialLinks)
  socialLinks?: EmployeeSocialLinks[];

  /**
   * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "social_security_number" })
  socialSecurityNumber?: string;

  /**
   * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  source?: string;

  /**
   * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source_id" })
  sourceId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "tax_code" })
  taxCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tax_id" })
  taxId?: string;

  /**
   * The team the person is currently in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "team" })
  @Type(() => EmployeeTeam)
  team?: EmployeeTeam;

  /**
   * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timezone" })
  timezone?: string;

  /**
   * The job title of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * The date and time when the object was last updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * The user who last updated the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_by" })
  updatedBy?: string;

  /**
   * Indicates if the employee works from a remote location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "works_remote" })
  worksRemote?: boolean;
}

export class EmployeeCompensationsInput extends SpeakeasyBase {
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: CurrencyEnum;

  /**
   * The date on which a change to an employee's compensation takes effect.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "effective_date" })
  effectiveDate?: string;

  /**
   * The FLSA status for this compensation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "flsa_status" })
  flsaStatus?: EmployeeCompensationsFlsaStatusEnum;

  /**
   * Unit of measurement for employee compensation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payment_unit" })
  paymentUnit?: PaymentUnitEnum;

  /**
   * The amount paid per payment unit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rate" })
  rate?: number;
}

export class EmployeeJobsInput extends SpeakeasyBase {
  /**
   * The rate of pay for the employee in their current job role.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "compensation_rate" })
  compensationRate?: number;

  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: CurrencyEnum;

  /**
   * The date on which the employee leaves or is expected to leave their current job role.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endDate?: Date;

  /**
   * The date on which the employee was hired by the organization
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hired_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  hiredAt?: Date;

  /**
   * Indicates whether this the employee's primary job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_primary" })
  isPrimary?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  @Type(() => Address)
  location?: Address;

  /**
   * Unit of measurement for employee compensation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payment_unit" })
  paymentUnit?: PaymentUnitEnum;

  /**
   * The position and responsibilities of the person within the organization.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "role" })
  role?: string;

  /**
   * The date on which the employee starts working in their current job role.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startDate?: Date;

  /**
   * The job title of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

export class EmployeeManagerInput extends SpeakeasyBase {
  /**
   * The email address of the manager.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "employment_status" })
  employmentStatus?: EmploymentStatusEnum;

  /**
   * The first name of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName?: string;

  /**
   * The last name of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName?: string;

  /**
   * The name of the manager, often a combination of their first and last names.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class EmployeePersonInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "birthday" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  birthday?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "deceased_on" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  deceasedOn?: Date;

  /**
   * The first name of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName?: string;

  /**
   * The gender represents the gender identity of a person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gender" })
  gender?: GenderEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "initials" })
  initials?: string;

  /**
   * The last name of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName?: string;

  /**
   * Middle name of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "middle_name" })
  middleName?: string;
}

export class EmployeeInput extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Address })
  @Expose({ name: "addresses" })
  @Type(() => Address)
  addresses?: Address[];

  /**
   * The date of birth of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "birthday" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  birthday?: Date;

  /**
   * The unique identifier of the company.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "company_id" })
  companyId?: string;

  /**
   * The name of the company.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "company_name" })
  companyName?: string;

  @SpeakeasyMetadata({ elemType: EmployeeCompensationsInput })
  @Expose({ name: "compensations" })
  @Type(() => EmployeeCompensationsInput)
  compensations?: EmployeeCompensationsInput[];

  /**
   * Country code according to ISO 3166-1 alpha-2.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country_of_birth" })
  countryOfBirth?: string;

  @SpeakeasyMetadata({ elemType: CustomField })
  @Expose({ name: "custom_fields" })
  @Type(() => CustomField)
  customFields?: CustomField[];

  /**
   * The date the person deceased.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deceased_on" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  deceasedOn?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "deleted" })
  deleted?: boolean;

  /**
   * The department the person is currently in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "department" })
  department?: string;

  /**
   * Unique identifier of the department ID this employee belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "department_id" })
  departmentId?: string;

  /**
   * A description of the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Indicate the employee's dietary preference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dietary_preference" })
  dietaryPreference?: string;

  /**
   * The direct reports refer to the individuals who report directly to a person in the organizational hierarchy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "direct_reports" })
  directReports?: string[];

  /**
   * The name used to display the employee, often a combination of their first and last names.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_name" })
  displayName?: string;

  /**
   * The division the person is currently in. Usually a collection of departments or teams or regions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "division" })
  division?: string;

  /**
   * Unique identifier of the division this employee belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "division_id" })
  divisionId?: string;

  @SpeakeasyMetadata({ elemType: Email })
  @Expose({ name: "emails" })
  @Type(() => Email)
  emails?: Email[];

  /**
   * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "employee_number" })
  employeeNumber?: string;

  /**
   * An End Date is the date that the employee ended working at the company
   */
  @SpeakeasyMetadata()
  @Expose({ name: "employment_end_date" })
  employmentEndDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "employment_role" })
  @Type(() => EmployeeEmploymentRole)
  employmentRole?: EmployeeEmploymentRole;

  /**
   * A Start Date is the date that the employee started working at the company
   */
  @SpeakeasyMetadata()
  @Expose({ name: "employment_start_date" })
  employmentStartDate?: string;

  /**
   * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "employment_status" })
  employmentStatus?: EmploymentStatusEnum;

  /**
   * The first name of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName?: string;

  /**
   * Indicate the employee's food allergies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "food_allergies" })
  foodAllergies?: string[];

  /**
   * The gender represents the gender identity of a person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gender" })
  gender?: GenderEnum;

  /**
   * The initials of the person, usually derived from their first, middle, and last names.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "initials" })
  initials?: string;

  @SpeakeasyMetadata({ elemType: EmployeeJobsInput })
  @Expose({ name: "jobs" })
  @Type(() => EmployeeJobsInput)
  jobs?: EmployeeJobsInput[];

  @SpeakeasyMetadata()
  @Expose({ name: "languages" })
  languages?: string[];

  /**
   * The last name of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName?: string;

  /**
   * The reason because the employment ended.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "leaving_reason" })
  leavingReason?: EmployeeLeavingReasonEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "manager" })
  @Type(() => EmployeeManagerInput)
  manager?: EmployeeManagerInput;

  /**
   * The marital status of the employee.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marital_status" })
  maritalStatus?: string;

  /**
   * Middle name of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "middle_name" })
  middleName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "nationalities" })
  nationalities?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "partner" })
  @Type(() => EmployeePersonInput)
  partner?: EmployeePersonInput;

  @SpeakeasyMetadata({ elemType: PhoneNumber })
  @Expose({ name: "phone_numbers" })
  @Type(() => PhoneNumber)
  phoneNumbers?: PhoneNumber[];

  /**
   * The URL of the photo of a person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "photo_url" })
  photoUrl?: string;

  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preferred_language" })
  preferredLanguage?: string;

  /**
   * The name the employee prefers to be addressed by, which may be different from their legal name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preferred_name" })
  preferredName?: string;

  /**
   * The preferred pronouns of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pronouns" })
  pronouns?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "record_url" })
  recordUrl?: string;

  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "row_version" })
  rowVersion?: string;

  /**
   * A formal salutation for the person. For example, 'Mr', 'Mrs'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "salutation" })
  salutation?: string;

  @SpeakeasyMetadata({ elemType: EmployeeSocialLinks })
  @Expose({ name: "social_links" })
  @Type(() => EmployeeSocialLinks)
  socialLinks?: EmployeeSocialLinks[];

  /**
   * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "social_security_number" })
  socialSecurityNumber?: string;

  /**
   * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  source?: string;

  /**
   * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source_id" })
  sourceId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "tax_code" })
  taxCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tax_id" })
  taxId?: string;

  /**
   * The team the person is currently in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "team" })
  @Type(() => EmployeeTeam)
  team?: EmployeeTeam;

  /**
   * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timezone" })
  timezone?: string;

  /**
   * The job title of the person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * Indicates if the employee works from a remote location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "works_remote" })
  worksRemote?: boolean;
}
