<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get instance provisioning settings for a given project. This is hidden method used by UI only.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchResponse
     */
	public function baremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetch(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{location}/instanceProvisioningSettings:fetch', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchInstanceProvisioningSettingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchInstanceProvisioningSettingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesCreateResponse
     */
	public function baremetalsolutionProjectsLocationsInstancesCreate(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/instances', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Detach LUN from Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDetachLunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDetachLunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDetachLunResponse
     */
	public function baremetalsolutionProjectsLocationsInstancesDetachLun(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDetachLunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDetachLunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDetachLunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{instance}:detachLun', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDetachLunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "detachLunRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDetachLunRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDetachLunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disable the interactive serial console feature on an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleResponse
     */
	public function baremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsole(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:disableInteractiveSerialConsole', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enable the interactive serial console feature on an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleResponse
     */
	public function baremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsole(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:enableInteractiveSerialConsole', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List servers in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesListResponse
     */
	public function baremetalsolutionProjectsLocationsInstancesList(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/instances', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInstancesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInstancesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Perform an ungraceful, hard reset on a server. Equivalent to shutting the power off and then turning it back on.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesResetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesResetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesResetResponse
     */
	public function baremetalsolutionProjectsLocationsInstancesReset(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesResetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesResetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesResetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:reset', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesResetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesResetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesResetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts a server that was shutdown.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStartResponse
     */
	public function baremetalsolutionProjectsLocationsInstancesStart(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:start', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStartRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stop a running server.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStopRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStopResponse
     */
	public function baremetalsolutionProjectsLocationsInstancesStop(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStopRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:stop', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStopRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStopRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsInstancesStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsListResponse
     */
	public function baremetalsolutionProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List network in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListResponse
     */
	public function baremetalsolutionProjectsLocationsNetworksList(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/networks', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNetworksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListNetworksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all Networks (and used IPs for each Network) in the vendor account associated with the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListNetworkUsageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListNetworkUsageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListNetworkUsageResponse
     */
	public function baremetalsolutionProjectsLocationsNetworksListNetworkUsage(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListNetworkUsageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListNetworkUsageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListNetworkUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{location}/networks:listNetworkUsage', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListNetworkUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListNetworkUsageRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNetworksListNetworkUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNetworkUsageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListNetworkUsageResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an NFS share.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesCreateResponse
     */
	public function baremetalsolutionProjectsLocationsNfsSharesCreate(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/nfsShares', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nfsShareInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List NFS shares.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesListResponse
     */
	public function baremetalsolutionProjectsLocationsNfsSharesList(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/nfsShares', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsNfsSharesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNfsSharesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListNfsSharesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create new ProvisioningConfig.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsCreateResponse
     */
	public function baremetalsolutionProjectsLocationsProvisioningConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/provisioningConfigs', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "provisioningConfigInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->provisioningConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProvisioningConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Submit a provisiong configuration for a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitResponse
     */
	public function baremetalsolutionProjectsLocationsProvisioningConfigsSubmit(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/provisioningConfigs:submit', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "submitProvisioningConfigRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->submitProvisioningConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubmitProvisioningConfigResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the budget details to provision resources on a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningQuotasListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningQuotasListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningQuotasListResponse
     */
	public function baremetalsolutionProjectsLocationsProvisioningQuotasList(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningQuotasListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningQuotasListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningQuotasListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/provisioningQuotas', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningQuotasListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningQuotasListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsProvisioningQuotasListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listProvisioningQuotasResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListProvisioningQuotasResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Register a public SSH key in the specified project for use with the interactive serial console feature.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysCreateResponse
     */
	public function baremetalsolutionProjectsLocationsSshKeysCreate(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/sshKeys', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sshKeyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sshKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SSHKey', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the public SSH keys registered for the specified project. These SSH keys are used only for the interactive serial console feature.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysListResponse
     */
	public function baremetalsolutionProjectsLocationsSshKeysList(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/sshKeys', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsSshKeysListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSSHKeysResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSSHKeysResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List storage volumes in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesListResponse
     */
	public function baremetalsolutionProjectsLocationsVolumesList(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/volumes', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVolumesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVolumesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Skips lun's cooloff and deletes it now. Lun must be in cooloff state.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsEvictRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsEvictSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsEvictResponse
     */
	public function baremetalsolutionProjectsLocationsVolumesLunsEvict(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsEvictRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsEvictSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsEvictResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:evict', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsEvictRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsEvictRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsEvictResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List storage volume luns for given storage volume.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsListResponse
     */
	public function baremetalsolutionProjectsLocationsVolumesLunsList(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/luns', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesLunsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLunsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLunsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update details of a single storage volume.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesPatchResponse
     */
	public function baremetalsolutionProjectsLocationsVolumesPatch(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "volumeInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RenameVolume sets a new name for a volume. Use with caution, previous names become immediately invalidated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesRenameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesRenameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesRenameResponse
     */
	public function baremetalsolutionProjectsLocationsVolumesRename(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesRenameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesRenameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesRenameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:rename', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesRenameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "renameVolumeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesRenameRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesRenameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volume = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Volume', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Emergency Volume resize.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesResizeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesResizeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesResizeResponse
     */
	public function baremetalsolutionProjectsLocationsVolumesResize(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesResizeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesResizeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesResizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{volume}:resize', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesResizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resizeVolumeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesResizeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesResizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Takes a snapshot of a boot volume. Returns INVALID_ARGUMENT if called for a non-boot volume.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateResponse
     */
	public function baremetalsolutionProjectsLocationsVolumesSnapshotsCreate(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/snapshots', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "volumeSnapshotInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumeSnapshot = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VolumeSnapshot', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a volume snapshot. Returns INVALID_ARGUMENT if called for a non-boot volume.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteResponse
     */
	public function baremetalsolutionProjectsLocationsVolumesSnapshotsDelete(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified snapshot resource. Returns INVALID_ARGUMENT if called for a non-boot volume.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsGetResponse
     */
	public function baremetalsolutionProjectsLocationsVolumesSnapshotsGet(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumeSnapshot = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VolumeSnapshot', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of snapshots for the specified volume. Returns a response with an empty list of snapshots if called for a non-boot volume.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsListResponse
     */
	public function baremetalsolutionProjectsLocationsVolumesSnapshotsList(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/snapshots', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVolumeSnapshotsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVolumeSnapshotsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Uses the specified snapshot to restore its parent volume. Returns INVALID_ARGUMENT if called for a non-boot volume.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotResponse
     */
	public function baremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{volumeSnapshot}:restoreVolumeSnapshot', \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}