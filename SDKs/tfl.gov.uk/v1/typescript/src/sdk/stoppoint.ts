/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class StopPoint {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets the list of arrival and departure predictions for the given stop point id (overground, Elizabeth line and thameslink only)
   */
  stopPointArrivalDepartures(
    req: operations.StopPointArrivalDeparturesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointArrivalDeparturesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointArrivalDeparturesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/StopPoint/{id}/ArrivalDepartures",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointArrivalDeparturesResponse =
        new operations.StopPointArrivalDeparturesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesArrivalDepartures = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesArrivalDepartures =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesArrivalDeparture,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesArrivalDepartures = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesArrivalDepartures =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesArrivalDeparture,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the list of arrival predictions for the given stop point id
   */
  stopPointArrivals(
    req: operations.StopPointArrivalsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointArrivalsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointArrivalsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/StopPoint/{id}/Arrivals",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointArrivalsResponse =
        new operations.StopPointArrivalsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesPredictions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPredictions = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPrediction,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesPredictions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPredictions = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPrediction,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.
   */
  stopPointCrowding(
    req: operations.StopPointCrowdingRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointCrowdingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointCrowdingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/StopPoint/{id}/Crowding/{line}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointCrowdingResponse =
        new operations.StopPointCrowdingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesStopPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStopPoints = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesStopPoint,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesStopPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStopPoints = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesStopPoint,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the canonical direction, "inbound" or "outbound", for a given pair of stop point Ids in the direction from -&gt; to.
   */
  stopPointDirection(
    req: operations.StopPointDirectionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointDirectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointDirectionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/StopPoint/{id}/DirectionTo/{toStopPointId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointDirectionResponse =
        new operations.StopPointDirectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.stopPointDirection200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.stopPointDirection200ApplicationXMLString = httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.stopPointDirection200TextJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.stopPointDirection200TextXMLString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.
   */
  stopPointDisruption(
    req: operations.StopPointDisruptionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointDisruptionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointDisruptionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/StopPoint/{ids}/Disruption",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointDisruptionResponse =
        new operations.StopPointDisruptionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesDisruptedPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesDisruptedPoints = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesDisruptedPoint,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesDisruptedPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesDisruptedPoints = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesDisruptedPoint,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a distinct list of disrupted stop points for the given modes
   */
  stopPointDisruptionByMode(
    req: operations.StopPointDisruptionByModeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointDisruptionByModeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointDisruptionByModeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/StopPoint/Mode/{modes}/Disruption",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointDisruptionByModeResponse =
        new operations.StopPointDisruptionByModeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesDisruptedPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesDisruptedPoints = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesDisruptedPoint,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesDisruptedPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesDisruptedPoints = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesDisruptedPoint,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of StopPoints corresponding to the given list of stop ids.
   */
  stopPointGet(
    req: operations.StopPointGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/StopPoint/{ids}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointGetResponse =
        new operations.StopPointGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesStopPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStopPoints = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesStopPoint,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesStopPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStopPoints = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesStopPoint,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of StopPoints within {radius} by the specified criteria
   */
  stopPointGetByGeoPoint(
    req: operations.StopPointGetByGeoPointRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointGetByGeoPointResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointGetByGeoPointRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/StopPoint";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointGetByGeoPointResponse =
        new operations.StopPointGetByGeoPointResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesStopPointsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesStopPointsResponse
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesStopPointsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesStopPointsResponse
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of StopPoints filtered by the modes available at that StopPoint.
   */
  stopPointGetByMode(
    req: operations.StopPointGetByModeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointGetByModeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointGetByModeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/StopPoint/Mode/{modes}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointGetByModeResponse =
        new operations.StopPointGetByModeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesStopPointsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesStopPointsResponse
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesStopPointsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesStopPointsResponse
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a StopPoint for a given sms code.
   */
  stopPointGetBySms(
    req: operations.StopPointGetBySmsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointGetBySmsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointGetBySmsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/StopPoint/Sms/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointGetBySmsResponse =
        new operations.StopPointGetBySmsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.systemObject = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.systemObject = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets all stop points of a given type
   */
  stopPointGetByType(
    req: operations.StopPointGetByTypeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointGetByTypeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointGetByTypeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/StopPoint/Type/{types}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointGetByTypeResponse =
        new operations.StopPointGetByTypeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesStopPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStopPoints = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesStopPoint,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesStopPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStopPoints = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesStopPoint,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets all the stop points of given type(s) with a page number
   */
  stopPointGetByTypeWithPagination(
    req: operations.StopPointGetByTypeWithPaginationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointGetByTypeWithPaginationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointGetByTypeWithPaginationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/StopPoint/Type/{types}/page/{page}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointGetByTypeWithPaginationResponse =
        new operations.StopPointGetByTypeWithPaginationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesStopPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStopPoints = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesStopPoint,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesStopPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStopPoints = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesStopPoint,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get car parks corresponding to the given stop point id.
   */
  stopPointGetCarParksById(
    req: operations.StopPointGetCarParksByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointGetCarParksByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointGetCarParksByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/StopPoint/{stopPointId}/CarParks",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointGetCarParksByIdResponse =
        new operations.StopPointGetCarParksByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesPlaces = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPlaces = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPlace,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesPlaces = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPlaces = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPlace,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the service types for a given stoppoint
   */
  stopPointGetServiceTypes(
    req: operations.StopPointGetServiceTypesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointGetServiceTypesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointGetServiceTypesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/StopPoint/ServiceTypes";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointGetServiceTypesResponse =
        new operations.StopPointGetServiceTypesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesLineServiceTypes = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesLineServiceTypes =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesLineServiceType,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesLineServiceTypes = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesLineServiceTypes =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesLineServiceType,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of taxi ranks corresponding to the given stop point id.
   */
  stopPointGetTaxiRanksByIds(
    req: operations.StopPointGetTaxiRanksByIdsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointGetTaxiRanksByIdsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointGetTaxiRanksByIdsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/StopPoint/{stopPointId}/TaxiRanks",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointGetTaxiRanksByIdsResponse =
        new operations.StopPointGetTaxiRanksByIdsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesPlaces = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPlaces = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPlace,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesPlaces = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPlaces = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPlace,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the list of available StopPoint additional information categories
   */
  stopPointMetaCategories(
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointMetaCategoriesResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/StopPoint/Meta/Categories";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointMetaCategoriesResponse =
        new operations.StopPointMetaCategoriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesStopPointCategories = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStopPointCategories =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesStopPointCategory,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesStopPointCategories = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStopPointCategories =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesStopPointCategory,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the list of available StopPoint modes
   */
  stopPointMetaModes(
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointMetaModesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/StopPoint/Meta/Modes";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointMetaModesResponse =
        new operations.StopPointMetaModesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesModes = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesModes = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesMode,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesModes = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesModes = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesMode,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the list of available StopPoint types
   */
  stopPointMetaStopTypes(
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointMetaStopTypesResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/StopPoint/Meta/StopTypes";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointMetaStopTypesResponse =
        new operations.StopPointMetaStopTypesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.stopPointMetaStopTypes200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.stopPointMetaStopTypes200TextJSONStrings = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets Stopoints that are reachable from a station/line combination.
   */
  stopPointReachableFrom(
    req: operations.StopPointReachableFromRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointReachableFromResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointReachableFromRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/StopPoint/{id}/CanReachOnLine/{lineId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointReachableFromResponse =
        new operations.StopPointReachableFromResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesStopPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStopPoints = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesStopPoint,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesStopPoints = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStopPoints = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesStopPoint,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the route sections for all the lines that service the given stop point ids
   */
  stopPointRoute(
    req: operations.StopPointRouteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointRouteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointRouteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/StopPoint/{id}/Route",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointRouteResponse =
        new operations.StopPointRouteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesStopPointRouteSections = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStopPointRouteSections =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesStopPointRouteSection,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesStopPointRouteSections = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStopPointRouteSections =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesStopPointRouteSection,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
   */
  stopPointSearch(
    req: operations.StopPointSearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StopPointSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StopPointSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/StopPoint/Search/{query}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StopPointSearchResponse =
        new operations.StopPointSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesSearchResponse = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesSearchResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesSearchResponse = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesSearchResponse
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
   */
  getStopPointSearch(
    req: operations.GetStopPointSearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetStopPointSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetStopPointSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/StopPoint/Search";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetStopPointSearchResponse =
        new operations.GetStopPointSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesSearchResponse = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesSearchResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesSearchResponse = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesSearchResponse
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of places corresponding to a given id and place types.
   */
  getStopPointIdPlaceTypes(
    req: operations.GetStopPointIdPlaceTypesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetStopPointIdPlaceTypesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetStopPointIdPlaceTypesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/StopPoint/{id}/placeTypes",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetStopPointIdPlaceTypesResponse =
        new operations.GetStopPointIdPlaceTypesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesPlaces = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPlaces = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPlace,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesPlaces = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesPlaces = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesPlace,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
