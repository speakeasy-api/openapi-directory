/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ContinuousProject - Newly created continuous project
 */
public class ContinuousProject {
    /**
     * Should we collect analytics data from Active for this continuous project?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("analytics_enabled")
    public Boolean analyticsEnabled;
    public ContinuousProject withAnalyticsEnabled(Boolean analyticsEnabled) {
        this.analyticsEnabled = analyticsEnabled;
        return this;
    }
    
    /**
     * Immediately start post-editing project for translation requests that are applied MT.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_start_postedit")
    public Boolean autoStartPostedit;
    public ContinuousProject withAutoStartPostedit(Boolean autoStartPostedit) {
        this.autoStartPostedit = autoStartPostedit;
        return this;
    }
    
    /**
     * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public ContinuousProject withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public ContinuousProject withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_enabled")
    public Boolean isEnabled;
    public ContinuousProject withIsEnabled(Boolean isEnabled) {
        this.isEnabled = isEnabled;
        return this;
    }
    
    /**
     * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_activity_at")
    public OffsetDateTime lastActivityAt;
    public ContinuousProject withLastActivityAt(OffsetDateTime lastActivityAt) {
        this.lastActivityAt = lastActivityAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    public ContinuousProjectLinks links;
    public ContinuousProject withLinks(ContinuousProjectLinks links) {
        this.links = links;
        return this;
    }
    
    /**
     * Immediately apply MT on translation requests if they are missing from TM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mt_enabled")
    public Boolean mtEnabled;
    public ContinuousProject withMtEnabled(Boolean mtEnabled) {
        this.mtEnabled = mtEnabled;
        return this;
    }
    
    /**
     * One of "MOTAWORD", "GOOGLE", "AMAZON", "MS". Default is "MOTAWORD".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mt_engine")
    public String mtEngine;
    public ContinuousProject withMtEngine(String mtEngine) {
        this.mtEngine = mtEngine;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public ContinuousProject withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Get an instant quote for translation requests that are applied MT.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postedit_enabled")
    public Boolean posteditEnabled;
    public ContinuousProject withPosteditEnabled(Boolean posteditEnabled) {
        this.posteditEnabled = posteditEnabled;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_language")
    public String sourceLanguage;
    public ContinuousProject withSourceLanguage(String sourceLanguage) {
        this.sourceLanguage = sourceLanguage;
        return this;
    }
    
    /**
     * One of "a =&gt; ACTIVE", "i =&gt; INACTIVE", "d =&gt; DELETED", "c =&gt; SCHEDULED CANCELLATION", "p =&gt; SCHEDULED CHANGE"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public ContinuousProject withStatus(String status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscription")
    public Subscription subscription;
    public ContinuousProject withSubscription(Subscription subscription) {
        this.subscription = subscription;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_languages")
    public String[] targetLanguages;
    public ContinuousProject withTargetLanguages(String[] targetLanguages) {
        this.targetLanguages = targetLanguages;
        return this;
    }
    
    /**
     * Continuous project type. We currently have only 2 types, NULL and "active".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public ContinuousProject withType(String type) {
        this.type = type;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("word_count")
    public Long wordCount;
    public ContinuousProject withWordCount(Long wordCount) {
        this.wordCount = wordCount;
        return this;
    }
    
}
