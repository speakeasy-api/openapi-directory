"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetInstanceHealthResponseHealthStateEnum(str, Enum):
    r"""Output only. Runtime health_state."""
    HEALTH_STATE_UNSPECIFIED = 'HEALTH_STATE_UNSPECIFIED'
    HEALTHY = 'HEALTHY'
    UNHEALTHY = 'UNHEALTHY'
    AGENT_NOT_INSTALLED = 'AGENT_NOT_INSTALLED'
    AGENT_NOT_RUNNING = 'AGENT_NOT_RUNNING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInstanceHealthResponse:
    r"""Response for checking if a notebook instance is healthy."""
    
    health_info: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('healthInfo'), 'exclude': lambda f: f is None }})
    r"""Output only. Additional information about instance health. Example: healthInfo\\": { \\"docker_proxy_agent_status\\": \\"1\\", \\"docker_status\\": \\"1\\", \\"jupyterlab_api_status\\": \\"-1\\", \\"jupyterlab_status\\": \\"-1\\", \\"updated\\": \\"2020-10-18 09:40:03.573409\\" }"""  
    health_state: Optional[GetInstanceHealthResponseHealthStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('healthState'), 'exclude': lambda f: f is None }})
    r"""Output only. Runtime health_state."""  
    