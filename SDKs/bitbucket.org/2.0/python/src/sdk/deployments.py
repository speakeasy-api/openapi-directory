"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Deployments:
    r"""Teams are deploying code faster than ever, thanks to continuous
    delivery practices and tools like Bitbucket Pipelines. Bitbucket
    Deployments gives teams visibility into their deployment
    environments and helps teams to track how far changes have
    progressed in their deployment pipeline.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_environment(self, request: operations.CreateEnvironmentRequest) -> operations.CreateEnvironmentResponse:
        r"""Create an environment
        Create an environment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateEnvironmentRequest, base_url, '/repositories/{workspace}/{repo_slug}/environments/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateEnvironmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.deployment_environment = out
        elif http_res.status_code in [404, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def delete_environment_for_repository(self, request: operations.DeleteEnvironmentForRepositoryRequest) -> operations.DeleteEnvironmentForRepositoryResponse:
        r"""Delete an environment
        Delete an environment
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteEnvironmentForRepositoryRequest, base_url, '/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteEnvironmentForRepositoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def delete_repositories_workspace_repo_slug_deploy_keys_key_id_(self, request: operations.DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIDRequest, security: operations.DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIDSecurity) -> operations.DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIDResponse:
        r"""Delete a repository deploy key
        This deletes a deploy key from a repository.
        
        Example:
        ```
        $ curl -XDELETE \
        -H \"Authorization <auth header>\" \
        https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys/1234
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIDRequest, base_url, '/repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 403]:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def delete_workspaces_workspace_projects_project_key_deploy_keys_key_id_(self, request: operations.DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIDRequest, security: operations.DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIDSecurity) -> operations.DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIDResponse:
        r"""Delete a deploy key from a project
        This deletes a deploy key from a project.
        
        Example:
        ```
        $ curl -XDELETE \
        -H \"Authorization <auth header>\" \
        https://api.bitbucket.org/2.0/workspaces/jzeng/projects/JZ/deploy-keys/1234
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIDRequest, base_url, '/workspaces/{workspace}/projects/{project_key}/deploy-keys/{key_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_deployment_for_repository(self, request: operations.GetDeploymentForRepositoryRequest) -> operations.GetDeploymentForRepositoryResponse:
        r"""Get a deployment
        Retrieve a deployment
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeploymentForRepositoryRequest, base_url, '/repositories/{workspace}/{repo_slug}/deployments/{deployment_uuid}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeploymentForRepositoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.deployment = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_deployments_for_repository(self, request: operations.GetDeploymentsForRepositoryRequest) -> operations.GetDeploymentsForRepositoryResponse:
        r"""List deployments
        Find deployments
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeploymentsForRepositoryRequest, base_url, '/repositories/{workspace}/{repo_slug}/deployments/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeploymentsForRepositoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedDeployments])
                res.paginated_deployments = out

        return res

    def get_environment_for_repository(self, request: operations.GetEnvironmentForRepositoryRequest) -> operations.GetEnvironmentForRepositoryResponse:
        r"""Get an environment
        Retrieve an environment
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEnvironmentForRepositoryRequest, base_url, '/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEnvironmentForRepositoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.deployment_environment = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_environments_for_repository(self, request: operations.GetEnvironmentsForRepositoryRequest) -> operations.GetEnvironmentsForRepositoryResponse:
        r"""List environments
        Find environments
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEnvironmentsForRepositoryRequest, base_url, '/repositories/{workspace}/{repo_slug}/environments/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEnvironmentsForRepositoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedEnvironments])
                res.paginated_environments = out

        return res

    def get_repositories_workspace_repo_slug_deploy_keys(self, request: operations.GetRepositoriesWorkspaceRepoSlugDeployKeysRequest, security: operations.GetRepositoriesWorkspaceRepoSlugDeployKeysSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugDeployKeysResponse:
        r"""List repository deploy keys
        Returns all deploy-keys belonging to a repository.
        
        Example:
        ```
        $ curl -H \"Authorization <auth header>\" \
        https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys
        
        Output:
        {
            \"pagelen\": 10,
            \"values\": [
                {
                    \"id\": 123,
                    \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5\",
                    \"label\": \"mykey\",
                    \"type\": \"deploy_key\",
                    \"created_on\": \"2018-08-15T23:50:59.993890+00:00\",
                    \"repository\": {
                        \"full_name\": \"mleu/test\",
                        \"name\": \"test\",
                        \"type\": \"repository\",
                        \"uuid\": \"{85d08b4e-571d-44e9-a507-fa476535aa98}\"
                    },
                    \"links\":{
                        \"self\":{
                            \"href\": \"https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys/123\"
                        }
                    }
                    \"last_used\": null,
                    \"comment\": \"mleu@C02W454JHTD8\"
                }
            ],
            \"page\": 1,
            \"size\": 1
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugDeployKeysRequest, base_url, '/repositories/{workspace}/{repo_slug}/deploy-keys', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugDeployKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedDeployKeys])
                res.paginated_deploy_keys = out
        elif http_res.status_code == 403:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_deploy_keys_key_id_(self, request: operations.GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDRequest, security: operations.GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDResponse:
        r"""Get a repository deploy key
        Returns the deploy key belonging to a specific key.
        
        Example:
        ```
        $ curl -H \"Authorization <auth header>\" \
        https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-key/1234
        
        Output:
        {
            \"comment\": \"mleu@C02W454JHTD8\",
            \"last_used\": null,
            \"links\": {
                \"self\": {
                    \"href\": https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-key/1234\"
                }
            },
            \"repository\": {
                \"full_name\": \"mleu/test\",
                \"name\": \"test\",
                \"type\": \"repository\",
                \"uuid\": \"{85d08b4e-571d-44e9-a507-fa476535aa98}\"
            },
            \"label\": \"mykey\",
            \"created_on\": \"2018-08-15T23:50:59.993890+00:00\",
            \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5\",
            \"id\": 1234,
            \"type\": \"deploy_key\"
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDRequest, base_url, '/repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.deploy_key = out
        elif http_res.status_code == 403:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_workspaces_workspace_projects_project_key_deploy_keys(self, request: operations.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysRequest, security: operations.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysSecurity) -> operations.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse:
        r"""List project deploy keys
        Returns all deploy keys belonging to a project.
        
        Example:
        ```
        $ curl -H \"Authorization <auth header>\" \
        https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT/deploy-keys
        
        Output:
        {
            \"pagelen\":10,
            \"values\":[
                {
                    \"comment\":\"thakseth@C02W454JHTD8\",
                    \"last_used\":null,
                    \"links\":{
                        \"self\":{
                            \"href\":\"https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT/deploy-keys/1234\"
                        }
                    },
                    \"label\":\"test\",
                    \"project\":{
                        \"links\":{
                            \"self\":{
                                \"href\":\"https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT\"
                            }
                        },
                        \"type\":\"project\",
                        \"name\":\"cooperative standard\",
                        \"key\":\"TEST_PROJECT\",
                        \"uuid\":\"{3b3e510b-7f2b-414d-a2b7-76c4e405c1c0}\"
                    },
                    \"created_on\":\"2021-07-28T21:20:19.491721+00:00\",
                    \"key\":\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDX5yfMOEw6HG9jKTYTisbmDTJ4MCUTSVGr5e4OWvY3UuI2A6F8SdzQqa2f5BABA/4g5Sk5awJrYHlNu3EzV1V2I44tR3A4fnZAG71ZKyDPi1wvdO7UYmFgxV/Vd18H9QZFFjICGDM7W0PT2mI0kON/jN3qNWi+GiB/xgaeQKSqynysdysDp8lnnI/8Sh3ikURP9UP83ShRCpAXszOUNaa+UUlcYQYBDLIGowsg51c4PCkC3DNhAMxppkNRKoSOWwyl+oRVXHSDylkiJSBHW3HH4Q6WHieD54kGrjbhWBKdnnxKX7QAAZBDseY+t01N36m6/ljvXSUEcBWtHxBYye0r\",
                    \"type\":\"project_deploy_key\",
                    \"id\":1234
                }
            ],
            \"page\":1,
            \"size\":1
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysRequest, base_url, '/workspaces/{workspace}/projects/{project_key}/deploy-keys', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedProjectDeployKeys])
                res.paginated_project_deploy_keys = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_workspaces_workspace_projects_project_key_deploy_keys_key_id_(self, request: operations.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIDRequest, security: operations.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIDSecurity) -> operations.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIDResponse:
        r"""Get a project deploy key
        Returns the deploy key belonging to a specific key ID.
        
        Example:
        ```
        $ curl -H \"Authorization <auth header>\" \
        https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT/deploy-keys/1234
        
        Output:
        {
            \"pagelen\":10,
            \"values\":[
                {
                    \"comment\":\"thakseth@C02W454JHTD8\",
                    \"last_used\":null,
                    \"links\":{
                        \"self\":{
                            \"href\":\"https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT/deploy-keys/1234\"
                        }
                    },
                    \"label\":\"test\",
                    \"project\":{
                        \"links\":{
                            \"self\":{
                                \"href\":\"https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT\"
                            }
                        },
                        \"type\":\"project\",
                        \"name\":\"cooperative standard\",
                        \"key\":\"TEST_PROJECT\",
                        \"uuid\":\"{3b3e510b-7f2b-414d-a2b7-76c4e405c1c0}\"
                    },
                    \"created_on\":\"2021-07-28T21:20:19.491721+00:00\",
                    \"key\":\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDX5yfMOEw6HG9jKTYTisbmDTJ4MCUTSVGr5e4OWvY3UuI2A6F8SdzQqa2f5BABA/4g5Sk5awJrYHlNu3EzV1V2I44tR3A4fnZAG71ZKyDPi1wvdO7UYmFgxV/Vd18H9QZFFjICGDM7W0PT2mI0kON/jN3qNWi+GiB/xgaeQKSqynysdysDp8lnnI/8Sh3ikURP9UP83ShRCpAXszOUNaa+UUlcYQYBDLIGowsg51c4PCkC3DNhAMxppkNRKoSOWwyl+oRVXHSDylkiJSBHW3HH4Q6WHieD54kGrjbhWBKdnnxKX7QAAZBDseY+t01N36m6/ljvXSUEcBWtHxBYye0r\",
                    \"type\":\"project_deploy_key\",
                    \"id\":1234
                }
            ],
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIDRequest, base_url, '/workspaces/{workspace}/projects/{project_key}/deploy-keys/{key_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.project_deploy_key = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def post_repositories_workspace_repo_slug_deploy_keys(self, request: operations.PostRepositoriesWorkspaceRepoSlugDeployKeysRequest, security: operations.PostRepositoriesWorkspaceRepoSlugDeployKeysSecurity) -> operations.PostRepositoriesWorkspaceRepoSlugDeployKeysResponse:
        r"""Add a repository deploy key
        Create a new deploy key in a repository. Note: If authenticating a deploy key
        with an OAuth consumer, any changes to the OAuth consumer will subsequently
        invalidate the deploy key.
        
        
        Example:
        ```
        $ curl -XPOST \
        -H \"Authorization <auth header>\" \
        -H \"Content-type: application/json\" \
        https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys -d \
        '{
            \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5 mleu@C02W454JHTD8\",
            \"label\": \"mydeploykey\"
        }'
        
        Output:
        {
            \"id\": 123,
            \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5\",
            \"label\": \"mydeploykey\",
            \"type\": \"deploy_key\",
            \"created_on\": \"2018-08-15T23:50:59.993890+00:00\",
            \"repository\": {
                \"full_name\": \"mleu/test\",
                \"name\": \"test\",
                \"type\": \"repository\",
                \"uuid\": \"{85d08b4e-571d-44e9-a507-fa476535aa98}\"
            },
            \"links\":{
                \"self\":{
                    \"href\": \"https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys/123\"
                }
            }
            \"last_used\": null,
            \"comment\": \"mleu@C02W454JHTD8\"
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRepositoriesWorkspaceRepoSlugDeployKeysRequest, base_url, '/repositories/{workspace}/{repo_slug}/deploy-keys', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRepositoriesWorkspaceRepoSlugDeployKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.deploy_key = out
        elif http_res.status_code in [400, 403]:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def post_workspaces_workspace_projects_project_key_deploy_keys(self, request: operations.PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysRequest, security: operations.PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysSecurity) -> operations.PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse:
        r"""Create a project deploy key
        Create a new deploy key in a project.
        
        Example:
        ```
        $ curl -XPOST \
        -H \"Authorization <auth header>\" \
        -H \"Content-type: application/json\" \
        https://api.bitbucket.org/2.0/workspaces/jzeng/projects/JZ/deploy-keys/ -d \
        '{
            \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5 mleu@C02W454JHTD8\",
            \"label\": \"mydeploykey\"
        }'
        
        Output:
        {
            \"comment\": \"mleu@C02W454JHTD8\",
            \"last_used\": null,
            \"links\": {
                \"self\": {
                    \"href\": \"https://api.bitbucket.org/2.0/workspaces/testadfsa/projects/ASDF/deploy-keys/5/\"
                }
            },
            \"label\": \"myprojectkey\",
            \"project\": {
                ...
            },
            \"created_on\": \"2021-08-10T05:28:00.570859+00:00\",
            \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5\",
            \"type\": \"project_deploy_key\",
            \"id\": 5
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysRequest, base_url, '/workspaces/{workspace}/projects/{project_key}/deploy-keys', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.project_deploy_key = out
        elif http_res.status_code in [400, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def put_repositories_workspace_repo_slug_deploy_keys_key_id_(self, request: operations.PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDRequest, security: operations.PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDSecurity) -> operations.PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDResponse:
        r"""Update a repository deploy key
        Create a new deploy key in a repository.
        
        The same key needs to be passed in but the comment and label can change.
        
        Example:
        ```
        $ curl -XPUT \
        -H \"Authorization <auth header>\" \
        -H \"Content-type: application/json\" \
        https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys/1234 -d \
        '{
            \"label\": \"newlabel\",
            \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5 newcomment\",
        }'
        
        Output:
        {
            \"comment\": \"newcomment\",
            \"last_used\": null,
            \"links\": {
                \"self\": {
                    \"href\": \"https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys/1234\"
                }
            },
            \"repository\": {
                \"full_name\": \"mleu/test\",
                \"name\": \"test\",
                \"type\": \"repository\",
                \"uuid\": \"{85d08b4e-571d-44e9-a507-fa476535aa98}\"
            },
            \"label\": \"newlabel\",
            \"created_on\": \"2018-08-15T23:50:59.993890+00:00\",
            \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5\",
            \"id\": 1234,
            \"type\": \"deploy_key\"
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDRequest, base_url, '/repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.deploy_key = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out
        elif http_res.status_code == 403:
            pass

        return res

    def update_environment_for_repository(self, request: operations.UpdateEnvironmentForRepositoryRequest) -> operations.UpdateEnvironmentForRepositoryResponse:
        r"""Update an environment
        Update an environment
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateEnvironmentForRepositoryRequest, base_url, '/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}/changes/', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateEnvironmentForRepositoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    