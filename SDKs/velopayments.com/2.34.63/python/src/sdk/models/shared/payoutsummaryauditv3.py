"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import fxsummaryv3 as shared_fxsummaryv3
from ..shared import sourceaccountsummaryv3 as shared_sourceaccountsummaryv3
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PayoutSummaryAuditV3:
    
    payout_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payoutId') }})  
    status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Current status of the payout. One of the following values: ACCEPTED, REJECTED, SUBMITTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, CONFIRMED, WITHDRAWN"""  
    submitted_date_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submittedDateTime') }})  
    fx_summaries: Optional[list[shared_fxsummaryv3.FxSummaryV3]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fxSummaries'), 'exclude': lambda f: f is None }})  
    instructed_date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructedDateTime'), 'exclude': lambda f: f is None }})  
    payor_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payorId'), 'exclude': lambda f: f is None }})  
    payout_memo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payoutMemo'), 'exclude': lambda f: f is None }})  
    source_account_summary: Optional[list[shared_sourceaccountsummaryv3.SourceAccountSummaryV3]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceAccountSummary'), 'exclude': lambda f: f is None }})  
    total_failed_payments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalFailedPayments'), 'exclude': lambda f: f is None }})  
    total_incomplete_payments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalIncompletePayments'), 'exclude': lambda f: f is None }})  
    total_payments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalPayments'), 'exclude': lambda f: f is None }})  
    withdrawn_date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('withdrawnDateTime'), 'exclude': lambda f: f is None }})  
    