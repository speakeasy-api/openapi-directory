<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * IdentitytoolkitRelyingpartyVerifyAssertionRequest - Request to verify the IDP assertion.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class IdentitytoolkitRelyingpartyVerifyAssertionRequest
{
    /**
     * When it's true, automatically creates a new account if the user doesn't exist. When it's false, allows existing user to sign in normally and throws exception if the user doesn't exist.
     * 
     * @var ?bool $autoCreate
     */
	#[\JMS\Serializer\Annotation\SerializedName('autoCreate')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $autoCreate = null;
    
    /**
     * GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
     * 
     * @var ?string $delegatedProjectNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('delegatedProjectNumber')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $delegatedProjectNumber = null;
    
    /**
     * The GITKit token of the authenticated user.
     * 
     * @var ?string $idToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('idToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $idToken = null;
    
    /**
     * Instance id token of the app.
     * 
     * @var ?string $instanceId
     */
	#[\JMS\Serializer\Annotation\SerializedName('instanceId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $instanceId = null;
    
    /**
     * The GITKit token for the non-trusted IDP pending to be confirmed by the user.
     * 
     * @var ?string $pendingIdToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('pendingIdToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $pendingIdToken = null;
    
    /**
     * The post body if the request is a HTTP POST.
     * 
     * @var ?string $postBody
     */
	#[\JMS\Serializer\Annotation\SerializedName('postBody')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $postBody = null;
    
    /**
     * The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP.
     * 
     * @var ?string $requestUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('requestUri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $requestUri = null;
    
    /**
     * Whether return 200 and IDP credential rather than throw exception when federated id is already linked.
     * 
     * @var ?bool $returnIdpCredential
     */
	#[\JMS\Serializer\Annotation\SerializedName('returnIdpCredential')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $returnIdpCredential = null;
    
    /**
     * Whether to return refresh tokens.
     * 
     * @var ?bool $returnRefreshToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('returnRefreshToken')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $returnRefreshToken = null;
    
    /**
     * Whether return sts id token and refresh token instead of gitkit token.
     * 
     * @var ?bool $returnSecureToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('returnSecureToken')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $returnSecureToken = null;
    
    /**
     * Session ID, which should match the one in previous createAuthUri request.
     * 
     * @var ?string $sessionId
     */
	#[\JMS\Serializer\Annotation\SerializedName('sessionId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sessionId = null;
    
    /**
     * For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
     * 
     * @var ?string $tenantId
     */
	#[\JMS\Serializer\Annotation\SerializedName('tenantId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $tenantId = null;
    
    /**
     * Tenant project number to be used for idp discovery.
     * 
     * @var ?string $tenantProjectNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('tenantProjectNumber')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $tenantProjectNumber = null;
    
	public function __construct()
	{
		$this->autoCreate = null;
		$this->delegatedProjectNumber = null;
		$this->idToken = null;
		$this->instanceId = null;
		$this->pendingIdToken = null;
		$this->postBody = null;
		$this->requestUri = null;
		$this->returnIdpCredential = null;
		$this->returnRefreshToken = null;
		$this->returnSecureToken = null;
		$this->sessionId = null;
		$this->tenantId = null;
		$this->tenantProjectNumber = null;
	}
}
