"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkerHealthReport:
    r"""WorkerHealthReport contains information about the health of a worker. The VM should be identified by the labels attached to the WorkerMessage that this health ping belongs to."""
    
    msg: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('msg'), 'exclude': lambda f: f is None }})
    r"""Message describing any unusual health reports."""  
    pods: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pods'), 'exclude': lambda f: f is None }})
    r"""The pods running on the worker. See: http://kubernetes.io/v1.1/docs/api-reference/v1/definitions.html#_v1_pod This field is used by the worker to send the status of the indvidual containers running on each worker."""  
    report_interval: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportInterval'), 'exclude': lambda f: f is None }})
    r"""The interval at which the worker is sending health reports. The default value of 0 should be interpreted as the field is not being explicitly set by the worker."""  
    vm_broken_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmBrokenCode'), 'exclude': lambda f: f is None }})
    r"""Code to describe a specific reason, if known, that a VM has reported broken state."""  
    vm_is_broken: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmIsBroken'), 'exclude': lambda f: f is None }})
    r"""Whether the VM is in a permanently broken state. Broken VMs should be abandoned or deleted ASAP to avoid assigning or completing any work."""  
    vm_is_healthy: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmIsHealthy'), 'exclude': lambda f: f is None }})
    r"""Whether the VM is currently healthy."""  
    vm_startup_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmStartupTime'), 'exclude': lambda f: f is None }})
    r"""The time the VM was booted."""  
    