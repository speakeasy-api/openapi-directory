"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class DefaultObjectAccessControls:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def storage_default_object_access_controls_delete(self, request: operations.StorageDefaultObjectAccessControlsDeleteRequest, security: operations.StorageDefaultObjectAccessControlsDeleteSecurity) -> operations.StorageDefaultObjectAccessControlsDeleteResponse:
        r"""Permanently deletes the default object ACL entry for the specified entity on the specified bucket."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageDefaultObjectAccessControlsDeleteRequest, base_url, '/b/{bucket}/defaultObjectAcl/{entity}', request)
        
        query_params = utils.get_query_params(operations.StorageDefaultObjectAccessControlsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageDefaultObjectAccessControlsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def storage_default_object_access_controls_get(self, request: operations.StorageDefaultObjectAccessControlsGetRequest, security: operations.StorageDefaultObjectAccessControlsGetSecurity) -> operations.StorageDefaultObjectAccessControlsGetResponse:
        r"""Returns the default object ACL entry for the specified entity on the specified bucket."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageDefaultObjectAccessControlsGetRequest, base_url, '/b/{bucket}/defaultObjectAcl/{entity}', request)
        
        query_params = utils.get_query_params(operations.StorageDefaultObjectAccessControlsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageDefaultObjectAccessControlsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ObjectAccessControl])
                res.object_access_control = out

        return res

    def storage_default_object_access_controls_insert(self, request: operations.StorageDefaultObjectAccessControlsInsertRequest, security: operations.StorageDefaultObjectAccessControlsInsertSecurity) -> operations.StorageDefaultObjectAccessControlsInsertResponse:
        r"""Creates a new default object ACL entry on the specified bucket."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageDefaultObjectAccessControlsInsertRequest, base_url, '/b/{bucket}/defaultObjectAcl', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "object_access_control", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageDefaultObjectAccessControlsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageDefaultObjectAccessControlsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ObjectAccessControl])
                res.object_access_control = out

        return res

    def storage_default_object_access_controls_list(self, request: operations.StorageDefaultObjectAccessControlsListRequest, security: operations.StorageDefaultObjectAccessControlsListSecurity) -> operations.StorageDefaultObjectAccessControlsListResponse:
        r"""Retrieves default object ACL entries on the specified bucket."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageDefaultObjectAccessControlsListRequest, base_url, '/b/{bucket}/defaultObjectAcl', request)
        
        query_params = utils.get_query_params(operations.StorageDefaultObjectAccessControlsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageDefaultObjectAccessControlsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ObjectAccessControls])
                res.object_access_controls = out

        return res

    def storage_default_object_access_controls_patch(self, request: operations.StorageDefaultObjectAccessControlsPatchRequest, security: operations.StorageDefaultObjectAccessControlsPatchSecurity) -> operations.StorageDefaultObjectAccessControlsPatchResponse:
        r"""Updates a default object ACL entry on the specified bucket. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageDefaultObjectAccessControlsPatchRequest, base_url, '/b/{bucket}/defaultObjectAcl/{entity}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "object_access_control", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageDefaultObjectAccessControlsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageDefaultObjectAccessControlsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ObjectAccessControl])
                res.object_access_control = out

        return res

    def storage_default_object_access_controls_update(self, request: operations.StorageDefaultObjectAccessControlsUpdateRequest, security: operations.StorageDefaultObjectAccessControlsUpdateSecurity) -> operations.StorageDefaultObjectAccessControlsUpdateResponse:
        r"""Updates a default object ACL entry on the specified bucket."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageDefaultObjectAccessControlsUpdateRequest, base_url, '/b/{bucket}/defaultObjectAcl/{entity}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "object_access_control", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageDefaultObjectAccessControlsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageDefaultObjectAccessControlsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ObjectAccessControl])
                res.object_access_control = out

        return res

    