// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type TestUploadHashSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// TestUploadHashTestCloudFileHashFileTypeEnum - Type of the file
type TestUploadHashTestCloudFileHashFileTypeEnum string

const (
	TestUploadHashTestCloudFileHashFileTypeEnumDsymFile TestUploadHashTestCloudFileHashFileTypeEnum = "dsym-file"
	TestUploadHashTestCloudFileHashFileTypeEnumAppFile  TestUploadHashTestCloudFileHashFileTypeEnum = "app-file"
	TestUploadHashTestCloudFileHashFileTypeEnumTestFile TestUploadHashTestCloudFileHashFileTypeEnum = "test-file"
)

func (e TestUploadHashTestCloudFileHashFileTypeEnum) ToPointer() *TestUploadHashTestCloudFileHashFileTypeEnum {
	return &e
}

func (e *TestUploadHashTestCloudFileHashFileTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dsym-file":
		fallthrough
	case "app-file":
		fallthrough
	case "test-file":
		*e = TestUploadHashTestCloudFileHashFileTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TestUploadHashTestCloudFileHashFileTypeEnum: %v", v)
	}
}

// TestUploadHashTestCloudFileHash - Hash, type, path and byte range of a file that is required in test run
type TestUploadHashTestCloudFileHash struct {
	// Range of bytes required to verify ownership of the file
	ByteRange *string `json:"byte_range,omitempty"`
	// SHA256 hash of the file
	Checksum string `json:"checksum"`
	// Type of the file
	FileType TestUploadHashTestCloudFileHashFileTypeEnum `json:"file_type"`
	// Relative path of the file
	RelativePath string `json:"relative_path"`
}

type TestUploadHashRequest struct {
	// File hash information
	RequestBody TestUploadHashTestCloudFileHash `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The ID of the test run
	TestRunID string `pathParam:"style=simple,explode=false,name=test_run_id"`
}

type TestUploadHashResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
}
