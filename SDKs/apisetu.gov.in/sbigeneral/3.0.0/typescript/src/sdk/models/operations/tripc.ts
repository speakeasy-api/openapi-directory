/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class TripcSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-APISETU-APIKEY",
  })
  apiKey: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-APISETU-CLIENTID",
  })
  clientId: string;
}

export class TripcRequestBodyCertificateParameters extends SpeakeasyBase {
  /**
   * Policy No
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UDF1" })
  udf1: string;

  /**
   * Verification Value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UDF2" })
  udf2: string;
}

/**
 * The format of the certificate in response.
 */
export enum TripcRequestBodyFormatEnum {
  Pdf = "pdf",
}

/**
 * Request format
 */
export class TripcRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "certificateParameters" })
  @Type(() => TripcRequestBodyCertificateParameters)
  certificateParameters?: TripcRequestBodyCertificateParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "consentArtifact" })
  @Type(() => shared.ConsentArtifactSchema)
  consentArtifact?: shared.ConsentArtifactSchema;

  /**
   * The format of the certificate in response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format: TripcRequestBodyFormatEnum;

  /**
   * A unique transaction id for this request in UUID format. It is used for tracking the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "txnId" })
  txnId: string;
}

export enum Tripc504ApplicationJSONErrorEnum {
  GatewayTimeout = "gateway_timeout",
}

export enum Tripc504ApplicationJSONErrorDescriptionEnum {
  PublisherServiceDidNotRespondInTime = "Publisher service did not respond in time",
}

/**
 * Gateway timeout
 */
export class Tripc504ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Tripc504ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Tripc504ApplicationJSONErrorDescriptionEnum;
}

export enum Tripc503ApplicationJSONErrorEnum {
  ServiceUnavailable = "service_unavailable",
}

export enum Tripc503ApplicationJSONErrorDescriptionEnum {
  PublisherServiceIsTemporarilyUnavailable = "Publisher service is temporarily unavailable",
}

/**
 * Service unavailable
 */
export class Tripc503ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Tripc503ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Tripc503ApplicationJSONErrorDescriptionEnum;
}

export enum Tripc502ApplicationJSONErrorEnum {
  BadGatewy = "bad_gatewy",
}

export enum Tripc502ApplicationJSONErrorDescriptionEnum {
  PublisherServiceReturnedAnInvalidResponse = "Publisher service returned an invalid response",
}

/**
 * Bad gateway
 */
export class Tripc502ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Tripc502ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Tripc502ApplicationJSONErrorDescriptionEnum;
}

export enum Tripc500ApplicationJSONErrorEnum {
  InternalServerError = "internal_server_error",
}

export enum Tripc500ApplicationJSONErrorDescriptionEnum {
  InternalServerError = "Internal server error",
}

/**
 * Internal server error
 */
export class Tripc500ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Tripc500ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Tripc500ApplicationJSONErrorDescriptionEnum;
}

export enum Tripc404ApplicationJSONErrorEnum {
  RecordNotFound = "record_not_found",
  UrlNotFound = "url_not_found",
}

export enum Tripc404ApplicationJSONErrorDescriptionEnum {
  NoRecordFound = "No record found",
  YourAPIUrlOrPathIsIncorrect = "Your API url or path is incorrect",
}

/**
 * No record found
 */
export class Tripc404ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Tripc404ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Tripc404ApplicationJSONErrorDescriptionEnum;
}

export enum Tripc401ApplicationJSONErrorEnum {
  InvalidAuthentication = "invalid_authentication",
  InvalidAuthorization = "invalid_authorization",
}

export enum Tripc401ApplicationJSONErrorDescriptionEnum {
  AuthenticationFailed = "Authentication failed",
  YouAreNotAuthorizedToUseThisAPI = "You are not authorized to use this API",
}

/**
 * Unauthorized access
 */
export class Tripc401ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Tripc401ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Tripc401ApplicationJSONErrorDescriptionEnum;
}

export enum Tripc400ApplicationJSONErrorEnum {
  MissingParameter = "missing_parameter",
  InvalidParameter = "invalid_parameter",
  InvalidFormat = "invalid_format",
  InvalidTxnid = "invalid_txnid",
  InvalidConsentid = "invalid_consentid",
}

export enum Tripc400ApplicationJSONErrorDescriptionEnum {
  PleaseProvideAllMandatoryParameters = "Please provide all mandatory parameters",
  BadRequest = "Bad request",
  TheFormatParameterIsInvalid = "The format parameter is invalid",
  TheTxnIdParameterMustBeInUUIDFormat = "The txnId parameter must be in UUID format",
  TheConsentIdParameterMustBeInUUIDFormat = "The consentId parameter must be in UUID format",
}

/**
 * Bad request
 */
export class Tripc400ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Tripc400ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Tripc400ApplicationJSONErrorDescriptionEnum;
}

export class TripcResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Bad request
   */
  @SpeakeasyMetadata()
  tripc400ApplicationJSONObject?: Tripc400ApplicationJSON;

  /**
   * Unauthorized access
   */
  @SpeakeasyMetadata()
  tripc401ApplicationJSONObject?: Tripc401ApplicationJSON;

  /**
   * No record found
   */
  @SpeakeasyMetadata()
  tripc404ApplicationJSONObject?: Tripc404ApplicationJSON;

  /**
   * Internal server error
   */
  @SpeakeasyMetadata()
  tripc500ApplicationJSONObject?: Tripc500ApplicationJSON;

  /**
   * Bad gateway
   */
  @SpeakeasyMetadata()
  tripc502ApplicationJSONObject?: Tripc502ApplicationJSON;

  /**
   * Service unavailable
   */
  @SpeakeasyMetadata()
  tripc503ApplicationJSONObject?: Tripc503ApplicationJSON;

  /**
   * Gateway timeout
   */
  @SpeakeasyMetadata()
  tripc504ApplicationJSONObject?: Tripc504ApplicationJSON;
}
