"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import adminuser as shared_adminuser
from ..shared import instanceconfig as shared_instanceconfig
from ..shared import samlparams as shared_samlparams
from ..shared import uris as shared_uris
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContactCenterInput:
    r"""Message describing ContactCenter object Next ID: 14"""
    
    admin_user: Optional[shared_adminuser.AdminUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adminUser'), 'exclude': lambda f: f is None }})
    r"""Message storing info about the first admin user. Next ID: 3"""  
    ccaip_managed_users: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ccaipManagedUsers'), 'exclude': lambda f: f is None }})
    r"""Optional. Whether to enable users to be created in the CCAIP-instance concurrently to having users in Cloud identity"""  
    customer_domain_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerDomainPrefix'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. At least 2 and max 16 char long, must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt)."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. A user friendly name for the ContactCenter."""  
    instance_config: Optional[shared_instanceconfig.InstanceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceConfig'), 'exclude': lambda f: f is None }})
    r"""Message storing the instance configuration."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels as key value pairs"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""name of resource"""  
    saml_params: Optional[shared_samlparams.SAMLParams] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('samlParams'), 'exclude': lambda f: f is None }})
    r"""Message storing SAML params to enable Google as IDP."""  
    uris: Optional[shared_uris.URIs] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uris'), 'exclude': lambda f: f is None }})
    r"""Message storing the URIs of the ContactCenter."""  
    user_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userEmail'), 'exclude': lambda f: f is None }})
    r"""Optional. Email address of the first admin user."""  
    
class ContactCenterStateEnum(str, Enum):
    r"""Output only. The state of this contact center."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    STATE_DEPLOYING = 'STATE_DEPLOYING'
    STATE_DEPLOYED = 'STATE_DEPLOYED'
    STATE_TERMINATING = 'STATE_TERMINATING'
    STATE_FAILED = 'STATE_FAILED'
    STATE_TERMINATING_FAILED = 'STATE_TERMINATING_FAILED'
    STATE_TERMINATED = 'STATE_TERMINATED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContactCenter:
    r"""Message describing ContactCenter object Next ID: 14"""
    
    admin_user: Optional[shared_adminuser.AdminUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adminUser'), 'exclude': lambda f: f is None }})
    r"""Message storing info about the first admin user. Next ID: 3"""  
    ccaip_managed_users: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ccaipManagedUsers'), 'exclude': lambda f: f is None }})
    r"""Optional. Whether to enable users to be created in the CCAIP-instance concurrently to having users in Cloud identity"""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. [Output only] Create time stamp"""  
    customer_domain_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerDomainPrefix'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. At least 2 and max 16 char long, must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt)."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. A user friendly name for the ContactCenter."""  
    instance_config: Optional[shared_instanceconfig.InstanceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceConfig'), 'exclude': lambda f: f is None }})
    r"""Message storing the instance configuration."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels as key value pairs"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""name of resource"""  
    saml_params: Optional[shared_samlparams.SAMLParams] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('samlParams'), 'exclude': lambda f: f is None }})
    r"""Message storing SAML params to enable Google as IDP."""  
    state: Optional[ContactCenterStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The state of this contact center."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. [Output only] Update time stamp"""  
    uris: Optional[shared_uris.URIs] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uris'), 'exclude': lambda f: f is None }})
    r"""Message storing the URIs of the ContactCenter."""  
    user_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userEmail'), 'exclude': lambda f: f is None }})
    r"""Optional. Email address of the first admin user."""  
    