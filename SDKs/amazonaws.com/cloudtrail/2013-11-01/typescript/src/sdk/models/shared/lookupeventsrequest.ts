/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EventCategoryEnum } from "./eventcategoryenum";
import { LookupAttribute } from "./lookupattribute";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Contains a request for LookupEvents.
 */
export class LookupEventsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "EndTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "EventCategory" })
  eventCategory?: EventCategoryEnum;

  @SpeakeasyMetadata({ elemType: LookupAttribute })
  @Expose({ name: "LookupAttributes" })
  @Type(() => LookupAttribute)
  lookupAttributes?: LookupAttribute[];

  @SpeakeasyMetadata()
  @Expose({ name: "MaxResults" })
  maxResults?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "NextToken" })
  nextToken?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;
}
