"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class APIUsageAggregatedOut:
    r"""Print historical API usage."""
    
    col_headers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('colHeaders'), 'exclude': lambda f: f is None }})
    r"""apiServices as column headers"""  
    data: Optional[list[list[int]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""Data points : usage per DAY, WEEK or MONTH and per apiService"""  
    history_truncated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('historyTruncated'), 'exclude': lambda f: f is None }})
    r"""If the history was truncaded due to data limit"""  
    period_end: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periodEnd'), 'exclude': lambda f: f is None }})
    r"""End datetime of the reporting period"""  
    period_start: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periodStart'), 'exclude': lambda f: f is None }})
    r"""Start datetime of the reporting period"""  
    row_headers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rowHeaders'), 'exclude': lambda f: f is None }})
    r"""dates as row headers"""  
    time_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeUnit'), 'exclude': lambda f: f is None }})
    r"""Time unit is DAY, WEEK or MONTH depending on prior usage"""  
    total_usage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalUsage'), 'exclude': lambda f: f is None }})
    r"""Total usage in the current period"""  
    