/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Locations {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Associates a location to a place ID. Any previous association is overwritten. This operation is only valid if the location is unverified. The association must be valid, that is, it appears in the list of `SearchGoogleLocations`.
   */
  mybusinessbusinessinformationLocationsAssociate(
    req: operations.MybusinessbusinessinformationLocationsAssociateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MybusinessbusinessinformationLocationsAssociateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.MybusinessbusinessinformationLocationsAssociateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:associate", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "associateLocationRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MybusinessbusinessinformationLocationsAssociateResponse =
        new operations.MybusinessbusinessinformationLocationsAssociateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the Google-updated version of the specified location.
   */
  mybusinessbusinessinformationLocationsAttributesGetGoogleUpdated(
    req: operations.MybusinessbusinessinformationLocationsAttributesGetGoogleUpdatedRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MybusinessbusinessinformationLocationsAttributesGetGoogleUpdatedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.MybusinessbusinessinformationLocationsAttributesGetGoogleUpdatedRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:getGoogleUpdated",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MybusinessbusinessinformationLocationsAttributesGetGoogleUpdatedResponse =
        new operations.MybusinessbusinessinformationLocationsAttributesGetGoogleUpdatedResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.attributes = utils.objectToClass(
              httpRes?.data,
              shared.Attributes
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Clears an association between a location and its place ID. This operation is only valid if the location is unverified.
   */
  mybusinessbusinessinformationLocationsClearLocationAssociation(
    req: operations.MybusinessbusinessinformationLocationsClearLocationAssociationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MybusinessbusinessinformationLocationsClearLocationAssociationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.MybusinessbusinessinformationLocationsClearLocationAssociationRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:clearLocationAssociation",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MybusinessbusinessinformationLocationsClearLocationAssociationResponse =
        new operations.MybusinessbusinessinformationLocationsClearLocationAssociationResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a location. If this location cannot be deleted using the API and it is marked so in the `google.mybusiness.businessinformation.v1.LocationState`, use the [Google Business Profile](https://business.google.com/manage/) website.
   */
  mybusinessbusinessinformationLocationsDelete(
    req: operations.MybusinessbusinessinformationLocationsDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MybusinessbusinessinformationLocationsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MybusinessbusinessinformationLocationsDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MybusinessbusinessinformationLocationsDeleteResponse =
        new operations.MybusinessbusinessinformationLocationsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Looks up all the attributes set for a given location.
   */
  mybusinessbusinessinformationLocationsGetAttributes(
    req: operations.MybusinessbusinessinformationLocationsGetAttributesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MybusinessbusinessinformationLocationsGetAttributesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.MybusinessbusinessinformationLocationsGetAttributesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MybusinessbusinessinformationLocationsGetAttributesResponse =
        new operations.MybusinessbusinessinformationLocationsGetAttributesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.attributes = utils.objectToClass(
              httpRes?.data,
              shared.Attributes
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update attributes for a given location.
   */
  mybusinessbusinessinformationLocationsUpdateAttributes(
    req: operations.MybusinessbusinessinformationLocationsUpdateAttributesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MybusinessbusinessinformationLocationsUpdateAttributesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.MybusinessbusinessinformationLocationsUpdateAttributesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "attributesInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MybusinessbusinessinformationLocationsUpdateAttributesResponse =
        new operations.MybusinessbusinessinformationLocationsUpdateAttributesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.attributes = utils.objectToClass(
              httpRes?.data,
              shared.Attributes
            );
          }
          break;
      }

      return res;
    });
  }
}
