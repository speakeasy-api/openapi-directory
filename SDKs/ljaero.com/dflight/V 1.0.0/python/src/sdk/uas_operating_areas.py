"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class UASOperatingAreas:
    r"""#### Areas where drone activity is scheduled to take place.
    UAS Operating Areas (UOAs) are published via [NOTAM](https://www.faa.gov/regulations_policies/orders_notices/index.cfm/go/document.information/documentID/1035053) to alert airspace users of unmanned aircraft activity in a given area and at a given time (singular or recurring).
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def uoa_by_distance_us_v1_uoa_distance_query_post(self, request: operations.UoaByDistanceUsV1UoaDistanceQueryPostRequest) -> operations.UoaByDistanceUsV1UoaDistanceQueryPostResponse:
        r"""Retrieve UAS Operating Areas (UOAs) found within given distance of location.
        Retrieve UAS Operating Areas (UOAs) found within given distance of a point. Request body parameters are:
        * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
        * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
        * distance:  distance in meters (max allowed value is 25000)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/us/v1/uoa/distance-query'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "uo_as_by_distance", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UoaByDistanceUsV1UoaDistanceQueryPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UOAsDistanceResponse])
                res.uo_as_distance_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def uoa_by_poly_us_v1_uoa_polygon_query_post(self, request: operations.UoaByPolyUsV1UoaPolygonQueryPostRequest) -> operations.UoaByPolyUsV1UoaPolygonQueryPostResponse:
        r"""Retrieve UAS Operating Areas (UOAs) found within given area.
        Retrieve UAS Operating Areas (UOAs) found within given area. Request body parameters are:
        * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/us/v1/uoa/polygon-query'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "uo_as_by_polygon", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UoaByPolyUsV1UoaPolygonQueryPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UOAsPolyResponse])
                res.uo_as_poly_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def uoa_by_route_us_v1_uoa_route_query_post(self, request: operations.UoaByRouteUsV1UoaRouteQueryPostRequest) -> operations.UoaByRouteUsV1UoaRouteQueryPostResponse:
        r"""Retrieve UAS Operating Areas (UOAs) found along route.
        Retrieve UAS Operating Areas (UOAs) found along your route. Request body parameters are:
        * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/us/v1/uoa/route-query'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "uo_as_by_route", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UoaByRouteUsV1UoaRouteQueryPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UOAsRouteResponse])
                res.uo_as_route_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    