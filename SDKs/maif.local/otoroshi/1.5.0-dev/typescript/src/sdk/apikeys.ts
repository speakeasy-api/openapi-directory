/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Everything about Otoroshi api keys
 */
export class Apikeys {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get all api keys
   *
   * @remarks
   * Get all api keys
   */
  allApiKeys(
    config?: AxiosRequestConfig
  ): Promise<operations.AllApiKeysResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/apikeys";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AllApiKeysResponse =
        new operations.AllApiKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKeys = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.apiKeys = utils.objectToClass(
              httpRes?.data,
              shared.ApiKey,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get an api key
   *
   * @remarks
   * Get an api key for a specified service descriptor
   */
  apiKey(
    req: operations.ApiKeyRequest,
    security: operations.ApiKeySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApiKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApiKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/apikeys/{clientId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApiKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApiKeyResponse = new operations.ApiKeyResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKey = utils.objectToClass(httpRes?.data, shared.ApiKey);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get an api key
   *
   * @remarks
   * Get an api key for a specified service group
   */
  apiKeyFromGroup(
    req: operations.ApiKeyFromGroupRequest,
    security: operations.ApiKeyFromGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApiKeyFromGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApiKeyFromGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/groups/{groupId}/apikeys/{clientId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApiKeyFromGroupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApiKeyFromGroupResponse =
        new operations.ApiKeyFromGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKey = utils.objectToClass(httpRes?.data, shared.ApiKey);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get the quota state of an api key
   *
   * @remarks
   * Get the quota state of an api key
   */
  apiKeyFromGroupQuotas(
    req: operations.ApiKeyFromGroupQuotasRequest,
    security: operations.ApiKeyFromGroupQuotasSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApiKeyFromGroupQuotasResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApiKeyFromGroupQuotasRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/groups/{groupId}/apikeys/{clientId}/quotas",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApiKeyFromGroupQuotasSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApiKeyFromGroupQuotasResponse =
        new operations.ApiKeyFromGroupQuotasResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.quotas = utils.objectToClass(httpRes?.data, shared.Quotas);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get the group of an api key
   *
   * @remarks
   * Get the group of an api key
   */
  apiKeyGroup(
    req: operations.ApiKeyGroupRequest,
    security: operations.ApiKeyGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApiKeyGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApiKeyGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/apikeys/{clientId}/group",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApiKeyGroupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApiKeyGroupResponse =
        new operations.ApiKeyGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.group = utils.objectToClass(httpRes?.data, shared.Group);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get the quota state of an api key
   *
   * @remarks
   * Get the quota state of an api key
   */
  apiKeyQuotas(
    req: operations.ApiKeyQuotasRequest,
    security: operations.ApiKeyQuotasSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApiKeyQuotasResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApiKeyQuotasRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/apikeys/{clientId}/quotas",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApiKeyQuotasSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApiKeyQuotasResponse =
        new operations.ApiKeyQuotasResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.quotas = utils.objectToClass(httpRes?.data, shared.Quotas);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get all api keys for the group of a service
   *
   * @remarks
   * Get all api keys for the group of a service
   */
  apiKeys(
    req: operations.ApiKeysRequest,
    security: operations.ApiKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApiKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApiKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/apikeys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApiKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApiKeysResponse = new operations.ApiKeysResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKeys = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.apiKeys = utils.objectToClass(
              httpRes?.data,
              shared.ApiKey,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get all api keys for the group of a service
   *
   * @remarks
   * Get all api keys for the group of a service
   */
  apiKeysFromGroup(
    req: operations.ApiKeysFromGroupRequest,
    security: operations.ApiKeysFromGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApiKeysFromGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApiKeysFromGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/groups/{groupId}/apikeys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApiKeysFromGroupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApiKeysFromGroupResponse =
        new operations.ApiKeysFromGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKeys = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.apiKeys = utils.objectToClass(
              httpRes?.data,
              shared.ApiKey,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a new api key for a service
   */
  createApiKey(
    req: operations.CreateApiKeyRequest,
    security: operations.CreateApiKeySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateApiKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateApiKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/apikeys",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apiKey",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateApiKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateApiKeyResponse =
        new operations.CreateApiKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKey = utils.objectToClass(httpRes?.data, shared.ApiKey);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a new api key for a group
   *
   * @remarks
   * Create a new api key for a group
   */
  createApiKeyFromGroup(
    req: operations.CreateApiKeyFromGroupRequest,
    security: operations.CreateApiKeyFromGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateApiKeyFromGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateApiKeyFromGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/groups/{groupId}/apikeys",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apiKey",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateApiKeyFromGroupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateApiKeyFromGroupResponse =
        new operations.CreateApiKeyFromGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKey = utils.objectToClass(httpRes?.data, shared.ApiKey);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete an api key
   *
   * @remarks
   * Delete an api key for a specified service descriptor
   */
  deleteApiKey(
    req: operations.DeleteApiKeyRequest,
    security: operations.DeleteApiKeySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteApiKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteApiKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/apikeys/{clientId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteApiKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteApiKeyResponse =
        new operations.DeleteApiKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleted = utils.objectToClass(httpRes?.data, shared.Deleted);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete an api key
   *
   * @remarks
   * Delete an api key for a specified service group
   */
  deleteApiKeyFromGroup(
    req: operations.DeleteApiKeyFromGroupRequest,
    security: operations.DeleteApiKeyFromGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteApiKeyFromGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteApiKeyFromGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/groups/{groupId}/apikeys/{clientId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteApiKeyFromGroupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteApiKeyFromGroupResponse =
        new operations.DeleteApiKeyFromGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleted = utils.objectToClass(httpRes?.data, shared.Deleted);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update an api key with a diff
   *
   * @remarks
   * Update an api key for a specified service descriptor with a diff
   */
  patchApiKey(
    req: operations.PatchApiKeyRequest,
    security: operations.PatchApiKeySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchApiKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchApiKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/apikeys/{clientId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PatchApiKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchApiKeyResponse =
        new operations.PatchApiKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKey = utils.objectToClass(httpRes?.data, shared.ApiKey);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update an api key with a diff
   *
   * @remarks
   * Update an api key for a specified service descriptor with a diff
   */
  patchApiKeyFromGroup(
    req: operations.PatchApiKeyFromGroupRequest,
    security: operations.PatchApiKeyFromGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchApiKeyFromGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchApiKeyFromGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/groups/{groupId}/apikeys/{clientId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PatchApiKeyFromGroupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchApiKeyFromGroupResponse =
        new operations.PatchApiKeyFromGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKey = utils.objectToClass(httpRes?.data, shared.ApiKey);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Reset the quota state of an api key
   *
   * @remarks
   * Reset the quota state of an api key
   */
  resetApiKeyFromGroupQuotas(
    req: operations.ResetApiKeyFromGroupQuotasRequest,
    security: operations.ResetApiKeyFromGroupQuotasSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ResetApiKeyFromGroupQuotasResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ResetApiKeyFromGroupQuotasRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/groups/{groupId}/apikeys/{clientId}/quotas",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ResetApiKeyFromGroupQuotasSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ResetApiKeyFromGroupQuotasResponse =
        new operations.ResetApiKeyFromGroupQuotasResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.quotas = utils.objectToClass(httpRes?.data, shared.Quotas);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Reset the quota state of an api key
   *
   * @remarks
   * Reset the quota state of an api key
   */
  resetApiKeyQuotas(
    req: operations.ResetApiKeyQuotasRequest,
    security: operations.ResetApiKeyQuotasSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ResetApiKeyQuotasResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ResetApiKeyQuotasRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/apikeys/{clientId}/quotas",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ResetApiKeyQuotasSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ResetApiKeyQuotasResponse =
        new operations.ResetApiKeyQuotasResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.quotas = utils.objectToClass(httpRes?.data, shared.Quotas);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update an api key
   *
   * @remarks
   * Update an api key for a specified service descriptor
   */
  updateApiKey(
    req: operations.UpdateApiKeyRequest,
    security: operations.UpdateApiKeySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateApiKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateApiKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/services/{serviceId}/apikeys/{clientId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apiKey",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateApiKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateApiKeyResponse =
        new operations.UpdateApiKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKey = utils.objectToClass(httpRes?.data, shared.ApiKey);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update an api key
   *
   * @remarks
   * Update an api key for a specified service group
   */
  updateApiKeyFromGroup(
    req: operations.UpdateApiKeyFromGroupRequest,
    security: operations.UpdateApiKeyFromGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateApiKeyFromGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateApiKeyFromGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/groups/{groupId}/apikeys/{clientId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apiKey",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateApiKeyFromGroupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateApiKeyFromGroupResponse =
        new operations.UpdateApiKeyFromGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKey = utils.objectToClass(httpRes?.data, shared.ApiKey);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
