"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import flaterrorresponse as shared_flaterrorresponse
from ..shared import scoredetails as shared_scoredetails
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class ListCollectionScoresSecurity:
    
    o_auth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class ListCollectionScoresDirectionEnum(str, Enum):
    r"""Sort direction"""
    ASC = 'asc'
    DESC = 'desc'

class ListCollectionScoresSortEnum(str, Enum):
    r"""Sort"""
    CREATION_DATE = 'creationDate'
    MODIFICATION_DATE = 'modificationDate'
    TITLE = 'title'


@dataclasses.dataclass
class ListCollectionScoresRequest:
    
    collection: str = dataclasses.field(metadata={'path_param': { 'field_name': 'collection', 'style': 'simple', 'explode': False }})
    r"""Unique identifier of the collection.
    The following aliases are supported:
    - `root`: The root collection of the account
    - `sharedWithMe`: Automatically contains new resources that have been shared individually
    - `trash`: Automatically contains resources that have been deleted
    """  
    direction: Optional[ListCollectionScoresDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""Sort direction"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""This is the maximum number of objects that may be returned"""  
    next: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next', 'style': 'form', 'explode': True }})
    r"""An opaque string cursor to fetch the next page of data.
    The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
    """  
    previous: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'previous', 'style': 'form', 'explode': True }})
    r"""An opaque string cursor to fetch the previous page of data.
    The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
    """  
    sharing_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sharingKey', 'style': 'form', 'explode': True }})
    r"""This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document."""  
    sort: Optional[ListCollectionScoresSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sort"""  
    

@dataclasses.dataclass
class ListCollectionScoresResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    flat_error_response: Optional[shared_flaterrorresponse.FlatErrorResponse] = dataclasses.field(default=None)
    r"""Error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    score_details: Optional[list[shared_scoredetails.ScoreDetails]] = dataclasses.field(default=None)
    r"""List of scores"""  
    