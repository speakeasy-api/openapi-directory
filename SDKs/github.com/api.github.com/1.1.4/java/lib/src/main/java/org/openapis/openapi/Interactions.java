/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Owner or admin management of users interactions.
 */
public class Interactions {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Interactions(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Get interaction restrictions for your public repositories
     * Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
     * https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-your-public-repositories - API method documentation
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.InteractionsGetRestrictionsForAuthenticatedUserResponse interactionsGetRestrictionsForAuthenticatedUser() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/user/interaction-limits");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.InteractionsGetRestrictionsForAuthenticatedUserResponse res = new org.openapis.openapi.models.operations.InteractionsGetRestrictionsForAuthenticatedUserResponse() {{
            interactionsGetRestrictionsForAuthenticatedUser200ApplicationJSONAnyOf = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.interactionsGetRestrictionsForAuthenticatedUser200ApplicationJSONAnyOf = out;
            }
        }
        else if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Get interaction restrictions for an organization
     * Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
     * https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.InteractionsGetRestrictionsForOrgResponse interactionsGetRestrictionsForOrg(org.openapis.openapi.models.operations.InteractionsGetRestrictionsForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.InteractionsGetRestrictionsForOrgPathParams.class, baseUrl, "/orgs/{org}/interaction-limits", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.InteractionsGetRestrictionsForOrgResponse res = new org.openapis.openapi.models.operations.InteractionsGetRestrictionsForOrgResponse() {{
            interactionsGetRestrictionsForOrg200ApplicationJSONAnyOf = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.interactionsGetRestrictionsForOrg200ApplicationJSONAnyOf = out;
            }
        }

        return res;
    }

    /**
     * Get interaction restrictions for a repository
     * Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
     * https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.InteractionsGetRestrictionsForRepoResponse interactionsGetRestrictionsForRepo(org.openapis.openapi.models.operations.InteractionsGetRestrictionsForRepoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.InteractionsGetRestrictionsForRepoPathParams.class, baseUrl, "/repos/{owner}/{repo}/interaction-limits", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.InteractionsGetRestrictionsForRepoResponse res = new org.openapis.openapi.models.operations.InteractionsGetRestrictionsForRepoResponse() {{
            interactionsGetRestrictionsForRepo200ApplicationJSONAnyOf = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.interactionsGetRestrictionsForRepo200ApplicationJSONAnyOf = out;
            }
        }

        return res;
    }

    /**
     * Remove interaction restrictions from your public repositories
     * Removes any interaction restrictions from your public repositories.
     * https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-from-your-public-repositories - API method documentation
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.InteractionsRemoveRestrictionsForAuthenticatedUserResponse interactionsRemoveRestrictionsForAuthenticatedUser() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/user/interaction-limits");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.InteractionsRemoveRestrictionsForAuthenticatedUserResponse res = new org.openapis.openapi.models.operations.InteractionsRemoveRestrictionsForAuthenticatedUserResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove interaction restrictions for an organization
     * Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
     * https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.InteractionsRemoveRestrictionsForOrgResponse interactionsRemoveRestrictionsForOrg(org.openapis.openapi.models.operations.InteractionsRemoveRestrictionsForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.InteractionsRemoveRestrictionsForOrgPathParams.class, baseUrl, "/orgs/{org}/interaction-limits", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.InteractionsRemoveRestrictionsForOrgResponse res = new org.openapis.openapi.models.operations.InteractionsRemoveRestrictionsForOrgResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove interaction restrictions for a repository
     * Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
     * https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.InteractionsRemoveRestrictionsForRepoResponse interactionsRemoveRestrictionsForRepo(org.openapis.openapi.models.operations.InteractionsRemoveRestrictionsForRepoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.InteractionsRemoveRestrictionsForRepoPathParams.class, baseUrl, "/repos/{owner}/{repo}/interaction-limits", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.InteractionsRemoveRestrictionsForRepoResponse res = new org.openapis.openapi.models.operations.InteractionsRemoveRestrictionsForRepoResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 409) {
        }

        return res;
    }

    /**
     * Set interaction restrictions for your public repositories
     * Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
     * https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-your-public-repositories - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.InteractionsSetRestrictionsForAuthenticatedUserResponse interactionsSetRestrictionsForAuthenticatedUser(org.openapis.openapi.models.operations.InteractionsSetRestrictionsForAuthenticatedUserRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/user/interaction-limits");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.InteractionsSetRestrictionsForAuthenticatedUserResponse res = new org.openapis.openapi.models.operations.InteractionsSetRestrictionsForAuthenticatedUserResponse() {{
            interactionLimitResponse = null;
            validationError = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.InteractionLimitResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.InteractionLimitResponse.class);
                res.interactionLimitResponse = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ValidationError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ValidationError.class);
                res.validationError = out;
            }
        }

        return res;
    }

    /**
     * Set interaction restrictions for an organization
     * Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
     * https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.InteractionsSetRestrictionsForOrgResponse interactionsSetRestrictionsForOrg(org.openapis.openapi.models.operations.InteractionsSetRestrictionsForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.InteractionsSetRestrictionsForOrgPathParams.class, baseUrl, "/orgs/{org}/interaction-limits", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.InteractionsSetRestrictionsForOrgResponse res = new org.openapis.openapi.models.operations.InteractionsSetRestrictionsForOrgResponse() {{
            interactionLimitResponse = null;
            validationError = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.InteractionLimitResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.InteractionLimitResponse.class);
                res.interactionLimitResponse = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ValidationError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ValidationError.class);
                res.validationError = out;
            }
        }

        return res;
    }

    /**
     * Set interaction restrictions for a repository
     * Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
     * https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.InteractionsSetRestrictionsForRepoResponse interactionsSetRestrictionsForRepo(org.openapis.openapi.models.operations.InteractionsSetRestrictionsForRepoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.InteractionsSetRestrictionsForRepoPathParams.class, baseUrl, "/repos/{owner}/{repo}/interaction-limits", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.InteractionsSetRestrictionsForRepoResponse res = new org.openapis.openapi.models.operations.InteractionsSetRestrictionsForRepoResponse() {{
            interactionLimitResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.InteractionLimitResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.InteractionLimitResponse.class);
                res.interactionLimitResponse = out;
            }
        }
        else if (httpRes.statusCode() == 409) {
        }

        return res;
    }
}