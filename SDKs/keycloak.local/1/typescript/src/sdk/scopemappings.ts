/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class ScopeMappings {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Remove client-level roles from the client’s scope.
   */
  deleteRealmClientScopesIdScopeMappingsClientsClient(
    req: operations.DeleteRealmClientScopesIdScopeMappingsClientsClientRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmClientScopesIdScopeMappingsClientsClientResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteRealmClientScopesIdScopeMappingsClientsClientRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmClientScopesIdScopeMappingsClientsClientResponse =
        new operations.DeleteRealmClientScopesIdScopeMappingsClientsClientResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Remove a set of realm-level roles from the client’s scope
   */
  deleteRealmClientScopesIdScopeMappingsRealm(
    req: operations.DeleteRealmClientScopesIdScopeMappingsRealmRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmClientScopesIdScopeMappingsRealmResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRealmClientScopesIdScopeMappingsRealmRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id}/scope-mappings/realm",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmClientScopesIdScopeMappingsRealmResponse =
        new operations.DeleteRealmClientScopesIdScopeMappingsRealmResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Remove client-level roles from the client’s scope.
   */
  deleteRealmClientsIdScopeMappingsClientsClient(
    req: operations.DeleteRealmClientsIdScopeMappingsClientsClientRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmClientsIdScopeMappingsClientsClientResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteRealmClientsIdScopeMappingsClientsClientRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/scope-mappings/clients/{client}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmClientsIdScopeMappingsClientsClientResponse =
        new operations.DeleteRealmClientsIdScopeMappingsClientsClientResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Remove a set of realm-level roles from the client’s scope
   */
  deleteRealmClientsIdScopeMappingsRealm(
    req: operations.DeleteRealmClientsIdScopeMappingsRealmRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmClientsIdScopeMappingsRealmResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRealmClientsIdScopeMappingsRealmRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/scope-mappings/realm",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmClientsIdScopeMappingsRealmResponse =
        new operations.DeleteRealmClientsIdScopeMappingsRealmResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Get all scope mappings for the client
   */
  getRealmClientScopesIdScopeMappings(
    req: operations.GetRealmClientScopesIdScopeMappingsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientScopesIdScopeMappingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientScopesIdScopeMappingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id}/scope-mappings",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientScopesIdScopeMappingsResponse =
        new operations.GetRealmClientScopesIdScopeMappingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mappingsRepresentation = utils.objectToClass(
              httpRes?.data,
              shared.MappingsRepresentation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the roles associated with a client’s scope   Returns roles for the client.
   */
  getRealmClientScopesIdScopeMappingsClientsClient(
    req: operations.GetRealmClientScopesIdScopeMappingsClientsClientRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientScopesIdScopeMappingsClientsClientResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmClientScopesIdScopeMappingsClientsClientRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientScopesIdScopeMappingsClientsClientResponse =
        new operations.GetRealmClientScopesIdScopeMappingsClientsClientResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
   */
  getRealmClientScopesIdScopeMappingsClientsClientAvailable(
    req: operations.GetRealmClientScopesIdScopeMappingsClientsClientAvailableRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmClientScopesIdScopeMappingsClientsClientAvailableRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse =
        new operations.GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
   */
  getRealmClientScopesIdScopeMappingsClientsClientComposite(
    req: operations.GetRealmClientScopesIdScopeMappingsClientsClientCompositeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmClientScopesIdScopeMappingsClientsClientCompositeRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse =
        new operations.GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get realm-level roles associated with the client’s scope
   */
  getRealmClientScopesIdScopeMappingsRealm(
    req: operations.GetRealmClientScopesIdScopeMappingsRealmRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientScopesIdScopeMappingsRealmResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientScopesIdScopeMappingsRealmRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id}/scope-mappings/realm",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientScopesIdScopeMappingsRealmResponse =
        new operations.GetRealmClientScopesIdScopeMappingsRealmResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get realm-level roles that are available to attach to this client’s scope
   */
  getRealmClientScopesIdScopeMappingsRealmAvailable(
    req: operations.GetRealmClientScopesIdScopeMappingsRealmAvailableRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientScopesIdScopeMappingsRealmAvailableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmClientScopesIdScopeMappingsRealmAvailableRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id}/scope-mappings/realm/available",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientScopesIdScopeMappingsRealmAvailableResponse =
        new operations.GetRealmClientScopesIdScopeMappingsRealmAvailableResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
   */
  getRealmClientScopesIdScopeMappingsRealmComposite(
    req: operations.GetRealmClientScopesIdScopeMappingsRealmCompositeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientScopesIdScopeMappingsRealmCompositeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmClientScopesIdScopeMappingsRealmCompositeRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id}/scope-mappings/realm/composite",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientScopesIdScopeMappingsRealmCompositeResponse =
        new operations.GetRealmClientScopesIdScopeMappingsRealmCompositeResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all scope mappings for the client
   */
  getRealmClientsIdScopeMappings(
    req: operations.GetRealmClientsIdScopeMappingsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdScopeMappingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdScopeMappingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/scope-mappings",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdScopeMappingsResponse =
        new operations.GetRealmClientsIdScopeMappingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mappingsRepresentation = utils.objectToClass(
              httpRes?.data,
              shared.MappingsRepresentation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the roles associated with a client’s scope   Returns roles for the client.
   */
  getRealmClientsIdScopeMappingsClientsClient(
    req: operations.GetRealmClientsIdScopeMappingsClientsClientRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdScopeMappingsClientsClientResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdScopeMappingsClientsClientRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/scope-mappings/clients/{client}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdScopeMappingsClientsClientResponse =
        new operations.GetRealmClientsIdScopeMappingsClientsClientResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
   */
  getRealmClientsIdScopeMappingsClientsClientAvailable(
    req: operations.GetRealmClientsIdScopeMappingsClientsClientAvailableRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdScopeMappingsClientsClientAvailableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmClientsIdScopeMappingsClientsClientAvailableRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/scope-mappings/clients/{client}/available",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdScopeMappingsClientsClientAvailableResponse =
        new operations.GetRealmClientsIdScopeMappingsClientsClientAvailableResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
   */
  getRealmClientsIdScopeMappingsClientsClientComposite(
    req: operations.GetRealmClientsIdScopeMappingsClientsClientCompositeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdScopeMappingsClientsClientCompositeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmClientsIdScopeMappingsClientsClientCompositeRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/scope-mappings/clients/{client}/composite",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdScopeMappingsClientsClientCompositeResponse =
        new operations.GetRealmClientsIdScopeMappingsClientsClientCompositeResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get realm-level roles associated with the client’s scope
   */
  getRealmClientsIdScopeMappingsRealm(
    req: operations.GetRealmClientsIdScopeMappingsRealmRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdScopeMappingsRealmResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdScopeMappingsRealmRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/scope-mappings/realm",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdScopeMappingsRealmResponse =
        new operations.GetRealmClientsIdScopeMappingsRealmResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get realm-level roles that are available to attach to this client’s scope
   */
  getRealmClientsIdScopeMappingsRealmAvailable(
    req: operations.GetRealmClientsIdScopeMappingsRealmAvailableRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdScopeMappingsRealmAvailableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdScopeMappingsRealmAvailableRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/scope-mappings/realm/available",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdScopeMappingsRealmAvailableResponse =
        new operations.GetRealmClientsIdScopeMappingsRealmAvailableResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
   */
  getRealmClientsIdScopeMappingsRealmComposite(
    req: operations.GetRealmClientsIdScopeMappingsRealmCompositeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdScopeMappingsRealmCompositeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdScopeMappingsRealmCompositeRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/scope-mappings/realm/composite",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdScopeMappingsRealmCompositeResponse =
        new operations.GetRealmClientsIdScopeMappingsRealmCompositeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add client-level roles to the client’s scope
   */
  postRealmClientScopesIdScopeMappingsClientsClient(
    req: operations.PostRealmClientScopesIdScopeMappingsClientsClientRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmClientScopesIdScopeMappingsClientsClientResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostRealmClientScopesIdScopeMappingsClientsClientRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmClientScopesIdScopeMappingsClientsClientResponse =
        new operations.PostRealmClientScopesIdScopeMappingsClientsClientResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Add a set of realm-level roles to the client’s scope
   */
  postRealmClientScopesIdScopeMappingsRealm(
    req: operations.PostRealmClientScopesIdScopeMappingsRealmRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmClientScopesIdScopeMappingsRealmResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmClientScopesIdScopeMappingsRealmRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id}/scope-mappings/realm",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmClientScopesIdScopeMappingsRealmResponse =
        new operations.PostRealmClientScopesIdScopeMappingsRealmResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Add client-level roles to the client’s scope
   */
  postRealmClientsIdScopeMappingsClientsClient(
    req: operations.PostRealmClientsIdScopeMappingsClientsClientRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmClientsIdScopeMappingsClientsClientResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmClientsIdScopeMappingsClientsClientRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/scope-mappings/clients/{client}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmClientsIdScopeMappingsClientsClientResponse =
        new operations.PostRealmClientsIdScopeMappingsClientsClientResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Add a set of realm-level roles to the client’s scope
   */
  postRealmClientsIdScopeMappingsRealm(
    req: operations.PostRealmClientsIdScopeMappingsRealmRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmClientsIdScopeMappingsRealmResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmClientsIdScopeMappingsRealmRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/scope-mappings/realm",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmClientsIdScopeMappingsRealmResponse =
        new operations.PostRealmClientsIdScopeMappingsRealmResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }
}
