// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateAuthorizerRequestBodyStatusEnum - The status of the update authorizer request.
type UpdateAuthorizerRequestBodyStatusEnum string

const (
	UpdateAuthorizerRequestBodyStatusEnumActive   UpdateAuthorizerRequestBodyStatusEnum = "ACTIVE"
	UpdateAuthorizerRequestBodyStatusEnumInactive UpdateAuthorizerRequestBodyStatusEnum = "INACTIVE"
)

func (e UpdateAuthorizerRequestBodyStatusEnum) ToPointer() *UpdateAuthorizerRequestBodyStatusEnum {
	return &e
}

func (e *UpdateAuthorizerRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		*e = UpdateAuthorizerRequestBodyStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAuthorizerRequestBodyStatusEnum: %v", v)
	}
}

type UpdateAuthorizerRequestBody struct {
	// The ARN of the authorizer's Lambda function.
	AuthorizerFunctionArn *string `json:"authorizerFunctionArn,omitempty"`
	// When <code>true</code>, the result from the authorizerâ€™s Lambda function is cached for the time specified in <code>refreshAfterInSeconds</code>. The cached result is used while the device reuses the same HTTP connection.
	EnableCachingForHTTP *bool `json:"enableCachingForHttp,omitempty"`
	// The status of the update authorizer request.
	Status *UpdateAuthorizerRequestBodyStatusEnum `json:"status,omitempty"`
	// The key used to extract the token from the HTTP headers.
	TokenKeyName *string `json:"tokenKeyName,omitempty"`
	// The public keys used to verify the token signature.
	TokenSigningPublicKeys map[string]string `json:"tokenSigningPublicKeys,omitempty"`
}

type UpdateAuthorizerRequest struct {
	RequestBody       UpdateAuthorizerRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The authorizer name.
	AuthorizerName string `pathParam:"style=simple,explode=false,name=authorizerName"`
}

type UpdateAuthorizerResponse struct {
	ContentType string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// UnauthorizedException
	UnauthorizedException interface{}
	// Success
	UpdateAuthorizerResponse *shared.UpdateAuthorizerResponse
}
