// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// UpdateShipmentResponseBodyDeliveryConfirmationEnum - The possible delivery confirmation values
type UpdateShipmentResponseBodyDeliveryConfirmationEnum string

const (
	UpdateShipmentResponseBodyDeliveryConfirmationEnumNone            UpdateShipmentResponseBodyDeliveryConfirmationEnum = "none"
	UpdateShipmentResponseBodyDeliveryConfirmationEnumDelivery        UpdateShipmentResponseBodyDeliveryConfirmationEnum = "delivery"
	UpdateShipmentResponseBodyDeliveryConfirmationEnumSignature       UpdateShipmentResponseBodyDeliveryConfirmationEnum = "signature"
	UpdateShipmentResponseBodyDeliveryConfirmationEnumAdultSignature  UpdateShipmentResponseBodyDeliveryConfirmationEnum = "adult_signature"
	UpdateShipmentResponseBodyDeliveryConfirmationEnumDirectSignature UpdateShipmentResponseBodyDeliveryConfirmationEnum = "direct_signature"
	UpdateShipmentResponseBodyDeliveryConfirmationEnumDeliveryMailed  UpdateShipmentResponseBodyDeliveryConfirmationEnum = "delivery_mailed"
)

func (e *UpdateShipmentResponseBodyDeliveryConfirmationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "none":
		fallthrough
	case "delivery":
		fallthrough
	case "signature":
		fallthrough
	case "adult_signature":
		fallthrough
	case "direct_signature":
		fallthrough
	case "delivery_mailed":
		*e = UpdateShipmentResponseBodyDeliveryConfirmationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateShipmentResponseBodyDeliveryConfirmationEnum: %s", s)
	}
}

// UpdateShipmentResponseBodyInternationalShipmentOptionsPackageContentsEnum - The possible package contents values
type UpdateShipmentResponseBodyInternationalShipmentOptionsPackageContentsEnum string

const (
	UpdateShipmentResponseBodyInternationalShipmentOptionsPackageContentsEnumMerchandise   UpdateShipmentResponseBodyInternationalShipmentOptionsPackageContentsEnum = "merchandise"
	UpdateShipmentResponseBodyInternationalShipmentOptionsPackageContentsEnumDocuments     UpdateShipmentResponseBodyInternationalShipmentOptionsPackageContentsEnum = "documents"
	UpdateShipmentResponseBodyInternationalShipmentOptionsPackageContentsEnumGift          UpdateShipmentResponseBodyInternationalShipmentOptionsPackageContentsEnum = "gift"
	UpdateShipmentResponseBodyInternationalShipmentOptionsPackageContentsEnumReturnedGoods UpdateShipmentResponseBodyInternationalShipmentOptionsPackageContentsEnum = "returned_goods"
	UpdateShipmentResponseBodyInternationalShipmentOptionsPackageContentsEnumSample        UpdateShipmentResponseBodyInternationalShipmentOptionsPackageContentsEnum = "sample"
)

func (e *UpdateShipmentResponseBodyInternationalShipmentOptionsPackageContentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "merchandise":
		fallthrough
	case "documents":
		fallthrough
	case "gift":
		fallthrough
	case "returned_goods":
		fallthrough
	case "sample":
		*e = UpdateShipmentResponseBodyInternationalShipmentOptionsPackageContentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateShipmentResponseBodyInternationalShipmentOptionsPackageContentsEnum: %s", s)
	}
}

// UpdateShipmentResponseBodyInternationalShipmentOptionsNonDeliveryEnum - The possible non delivery values
type UpdateShipmentResponseBodyInternationalShipmentOptionsNonDeliveryEnum string

const (
	UpdateShipmentResponseBodyInternationalShipmentOptionsNonDeliveryEnumReturnToSender   UpdateShipmentResponseBodyInternationalShipmentOptionsNonDeliveryEnum = "return_to_sender"
	UpdateShipmentResponseBodyInternationalShipmentOptionsNonDeliveryEnumTreatAsAbandoned UpdateShipmentResponseBodyInternationalShipmentOptionsNonDeliveryEnum = "treat_as_abandoned"
)

func (e *UpdateShipmentResponseBodyInternationalShipmentOptionsNonDeliveryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "return_to_sender":
		fallthrough
	case "treat_as_abandoned":
		*e = UpdateShipmentResponseBodyInternationalShipmentOptionsNonDeliveryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateShipmentResponseBodyInternationalShipmentOptionsNonDeliveryEnum: %s", s)
	}
}

// UpdateShipmentResponseBodyInternationalShipmentOptions - Options for international shipments, such as customs declarations.
type UpdateShipmentResponseBodyInternationalShipmentOptions struct {
	// The type of contents in this shipment.  This may impact import duties or customs treatment.
	Contents UpdateShipmentResponseBodyInternationalShipmentOptionsPackageContentsEnum `json:"contents"`
	// Customs declarations for each item in the shipment.
	CustomsItems []CustomsItem `json:"customs_items,omitempty"`
	// Indicates what to do if a package is unable to be delivered.
	NonDelivery UpdateShipmentResponseBodyInternationalShipmentOptionsNonDeliveryEnum `json:"non_delivery"`
}

// UpdateShipmentResponseBodyInsuranceProviderEnum - The possible insurance provider values
type UpdateShipmentResponseBodyInsuranceProviderEnum string

const (
	UpdateShipmentResponseBodyInsuranceProviderEnumNone        UpdateShipmentResponseBodyInsuranceProviderEnum = "none"
	UpdateShipmentResponseBodyInsuranceProviderEnumShipsurance UpdateShipmentResponseBodyInsuranceProviderEnum = "shipsurance"
	UpdateShipmentResponseBodyInsuranceProviderEnumCarrier     UpdateShipmentResponseBodyInsuranceProviderEnum = "carrier"
	UpdateShipmentResponseBodyInsuranceProviderEnumThirdParty  UpdateShipmentResponseBodyInsuranceProviderEnum = "third_party"
)

func (e *UpdateShipmentResponseBodyInsuranceProviderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "none":
		fallthrough
	case "shipsurance":
		fallthrough
	case "carrier":
		fallthrough
	case "third_party":
		*e = UpdateShipmentResponseBodyInsuranceProviderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateShipmentResponseBodyInsuranceProviderEnum: %s", s)
	}
}

// UpdateShipmentResponseBodyShipmentStatusEnum - The possible shipment status values
type UpdateShipmentResponseBodyShipmentStatusEnum string

const (
	UpdateShipmentResponseBodyShipmentStatusEnumPending        UpdateShipmentResponseBodyShipmentStatusEnum = "pending"
	UpdateShipmentResponseBodyShipmentStatusEnumProcessing     UpdateShipmentResponseBodyShipmentStatusEnum = "processing"
	UpdateShipmentResponseBodyShipmentStatusEnumLabelPurchased UpdateShipmentResponseBodyShipmentStatusEnum = "label_purchased"
	UpdateShipmentResponseBodyShipmentStatusEnumCancelled      UpdateShipmentResponseBodyShipmentStatusEnum = "cancelled"
)

func (e *UpdateShipmentResponseBodyShipmentStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "processing":
		fallthrough
	case "label_purchased":
		fallthrough
	case "cancelled":
		*e = UpdateShipmentResponseBodyShipmentStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateShipmentResponseBodyShipmentStatusEnum: %s", s)
	}
}

// UpdateShipmentResponseBodyWeight - The weight of a package
type UpdateShipmentResponseBodyWeight struct {
	Unit WeightUnitEnum `json:"unit"`
	// The weight, in the specified unit
	Value float64 `json:"value"`
}

// UpdateShipmentResponseBody - The information necessary to ship a package, such as the origin, the destination, the carrier service, and the package dimensions and weight.
type UpdateShipmentResponseBody struct {
	// The address validation
	AddressValidation AddressValidationResult `json:"address_validation"`
	// Advanced shipment options.  These are entirely optional.
	AdvancedOptions AdvancedShipmentOptions `json:"advanced_options"`
	// The carrier account that is billed for the shipping charges
	CarrierID string `json:"carrier_id"`
	// The type of delivery confirmation that is required for this shipment.
	Confirmation UpdateShipmentResponseBodyDeliveryConfirmationEnum `json:"confirmation"`
	// The date and time that the shipment was created in ShipEngine.
	CreatedAt time.Time `json:"created_at"`
	// Customs information.  This is usually only needed for international shipments.
	//
	Customs UpdateShipmentResponseBodyInternationalShipmentOptions `json:"customs"`
	// An array of errors that occurred while creating shipment.
	Errors []string `json:"errors"`
	// ID that the Order Source assigned
	ExternalOrderID *string `json:"external_order_id,omitempty"`
	// You can optionally use this field to store your own identifier for this shipment.
	//
	// > **Warning:** The `external_shipment_id` is limited to 50 characters. Any additional characters will be truncated.
	//
	ExternalShipmentID *string `json:"external_shipment_id,omitempty"`
	// The insurance provider to use for any insured packages in the shipment.
	//
	InsuranceProvider UpdateShipmentResponseBodyInsuranceProviderEnum `json:"insurance_provider"`
	// Describe the packages included in this shipment as related to potential metadata that was imported from
	// external order sources
	//
	Items []ShipmentItem `json:"items,omitempty"`
	// The date and time that the shipment was created or last modified.
	ModifiedAt      *time.Time           `json:"modified_at,omitempty"`
	OrderSourceCode *OrderSourceNameEnum `json:"order_source_code,omitempty"`
	// The packages in the shipment.
	//
	// > **Note:** Some carriers only allow one package per shipment.  If you attempt to create a multi-package shipment for a carrier that doesn't allow it, an error will be returned.
	//
	Packages []Package `json:"packages"`
	// The return address for this shipment.  Defaults to the `ship_from` address.
	//
	ReturnTo Address `json:"return_to"`
	// The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc.
	//
	ServiceCode string `json:"service_code"`
	// The date that the shipment was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead.
	//
	ShipDate time.Time `json:"ship_date"`
	// The shipment's origin address. If you frequently ship from the same location, consider [creating a warehouse](https://www.shipengine.com/docs/reference/create-warehouse/). Then you can simply specify the `warehouse_id` rather than the complete address each time.
	//
	ShipFrom Address `json:"ship_from"`
	// The recipient's mailing address
	ShipTo Address `json:"ship_to"`
	// A string that uniquely identifies the shipment
	ShipmentID string `json:"shipment_id"`
	// The current status of the shipment
	ShipmentStatus UpdateShipmentResponseBodyShipmentStatusEnum `json:"shipment_status"`
	// Arbitrary tags associated with this shipment.  Tags can be used to categorize shipments, and shipments can be queried by their tags.
	//
	Tags []Tag `json:"tags"`
	// The combined weight of all packages in the shipment
	TotalWeight UpdateShipmentResponseBodyWeight `json:"total_weight"`
	// The [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) that the shipment is being shipped from.  Either `warehouse_id` or `ship_from` must be specified.
	//
	WarehouseID *string `json:"warehouse_id,omitempty"`
}
