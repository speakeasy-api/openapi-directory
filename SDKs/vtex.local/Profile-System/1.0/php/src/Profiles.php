<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Profiles 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create client profile
     * 
     * Creates new client profile.
     * 
     * 
     * > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
     * 
     * 
     * > The `id` field returned by this request is the `profileId` used to retrieve information on a specific profile later.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateClientProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateClientProfileResponse
     */
	public function createClientProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateClientProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateClientProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "profile", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateClientProfileRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateClientProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createClientProfile201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete client profile
     * 
     * Deletes a client profile by `profileId`.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteClientProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteClientProfileResponse
     */
	public function deleteClientProfile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteClientProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteClientProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}', \OpenAPI\OpenAPI\Models\Operations\DeleteClientProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteClientProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get profile
     * 
     * Retrieves the information of a specific client, by its `profileId`.
     * 
     * 
     * > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
     * 
     * 
     * > For security and privacy reasons, this request returns masked profile data. For unmasked information, see Get unmasked profile.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProfileResponse
     */
	public function getProfile(
        \OpenAPI\OpenAPI\Models\Operations\GetProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}', \OpenAPI\OpenAPI\Models\Operations\GetProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProfileRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getProfile200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get profile by version
     * 
     * Retrieves the information of a specific version of a client profile.
     * 
     * 
     * > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
     * 
     * 
     * > For security and privacy reasons, this request returns masked profile data. For unmasked information, see Get unmasked profile by version.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProfileByVersionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProfileByVersionResponse
     */
	public function getProfileByVersion(
        \OpenAPI\OpenAPI\Models\Operations\GetProfileByVersionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProfileByVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/versions/{profileVersionId}', \OpenAPI\OpenAPI\Models\Operations\GetProfileByVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProfileByVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getProfileByVersion200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get unmasked profile
     * 
     * Retrieves unmasked information of a specific client, by its `profileId`.
     * 
     * 
     * > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedProfileResponse
     */
	public function getUnmaskedProfile(
        \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/unmask', \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUnmaskedProfileRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUnmaskedProfile200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get unmasked profile by version
     * 
     * Retrieves unmasked information of a specific version of a client profile.
     * 
     * 
     * > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedProfileByVersionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedProfileByVersionResponse
     */
	public function getUnmaskedProfileByVersion(
        \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedProfileByVersionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedProfileByVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/versions/{profileVersionId}/unmask', \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedProfileByVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUnmaskedProfileByVersionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedProfileByVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUnmaskedProfileByVersion200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates client profile
     * 
     * Updates one or more fields of an existing client profile.
     * 
     * 
     * > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateClientProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateClientProfileResponse
     */
	public function updateClientProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateClientProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateClientProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}', \OpenAPI\OpenAPI\Models\Operations\UpdateClientProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdateClientProfileRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateClientProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateClientProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}