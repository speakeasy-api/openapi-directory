"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BreakType:
    r"""A defined break template that sets an expectation for possible `Break`
    instances on a `Shift`.
    """
    
    break_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('break_name') }})
    r"""A human-readable name for this type of break. The name is displayed to
    employees in Square products.
    """  
    expected_duration: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expected_duration') }})
    r"""Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
    this break. Precision less than minutes is truncated.
    """  
    is_paid: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_paid') }})
    r"""Whether this break counts towards time worked for compensation
    purposes.
    """  
    location_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_id') }})
    r"""The ID of the business location this type of break applies to."""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""A read-only timestamp in RFC 3339 format."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The UUID for this object."""  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})
    r"""A read-only timestamp in RFC 3339 format."""  
    version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Used for resolving concurrency issues. The request fails if the version
    provided does not match the server version at the time of the request. If a value is not
    provided, Square's servers execute a \"blind\" write; potentially
    overwriting another writer's data.
    """  
    