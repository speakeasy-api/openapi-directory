/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Operations {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Flight Status at Arrival Airport
   *
   * @remarks
   * Status of all arrivals at a given airport up to 4 hours from the provided date time.
   */
  operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet(
    req: operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetRequest,
    security: operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/operations/flightstatus/arrivals/{airportCode}/{fromDateTime}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetResponse =
        new operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Flight Status
   *
   * @remarks
   * Status of a particular flight (boarding, delayed, etc.).
   */
  operationsFlightstatusByFlightNumberAndDateGet(
    req: operations.OperationsFlightstatusByFlightNumberAndDateGetRequest,
    security: operations.OperationsFlightstatusByFlightNumberAndDateGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OperationsFlightstatusByFlightNumberAndDateGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OperationsFlightstatusByFlightNumberAndDateGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/operations/flightstatus/{flightNumber}/{date}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OperationsFlightstatusByFlightNumberAndDateGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OperationsFlightstatusByFlightNumberAndDateGetResponse =
        new operations.OperationsFlightstatusByFlightNumberAndDateGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operationsFlightstatusByFlightNumberAndDateGet200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Flight Status at Departure Airport
   *
   * @remarks
   * Status of all departures from a given airport up to 4 hours from the provided date time.
   */
  operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet(
    req: operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetRequest,
    security: operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/operations/flightstatus/departures/{airportCode}/{fromDateTime}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetResponse =
        new operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Flight Status by Route
   *
   * @remarks
   * Status of flights between a given origin and destination on a given date.
   */
  operationsFlightstatusRouteDateByOriginAndDestinationGet(
    req: operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetRequest,
    security: operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/operations/flightstatus/route/{origin}/{destination}/{date}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetResponse =
        new operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operationsFlightstatusRouteDateByOriginAndDestinationGet200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Flight Schedules
   *
   * @remarks
   * Scheduled flights between given airports on a given date.
   */
  operationsSchedulesFromDateTimeByOriginAndDestinationGet(
    req: operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetRequest,
    security: operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/operations/schedules/{origin}/{destination}/{fromDateTime}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetResponse =
        new operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operationsSchedulesFromDateTimeByOriginAndDestinationGet200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }
}
