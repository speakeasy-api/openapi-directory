// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchGetBuildBatchesXAmzTargetEnum
type BatchGetBuildBatchesXAmzTargetEnum string

const (
	BatchGetBuildBatchesXAmzTargetEnumCodeBuild20161006BatchGetBuildBatches BatchGetBuildBatchesXAmzTargetEnum = "CodeBuild_20161006.BatchGetBuildBatches"
)

func (e *BatchGetBuildBatchesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeBuild_20161006.BatchGetBuildBatches":
		*e = BatchGetBuildBatchesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchGetBuildBatchesXAmzTargetEnum: %s", s)
	}
}

type BatchGetBuildBatchesRequest struct {
	BatchGetBuildBatchesInput shared.BatchGetBuildBatchesInput   `request:"mediaType=application/json"`
	XAmzAlgorithm             *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                BatchGetBuildBatchesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchGetBuildBatchesResponse struct {
	// Success
	BatchGetBuildBatchesOutput *shared.BatchGetBuildBatchesOutput
	ContentType                string
	// InvalidInputException
	InvalidInputException interface{}
	StatusCode            int
	RawResponse           *http.Response
}
