"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Drives:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def drive_drives_delete(self, request: operations.DriveDrivesDeleteRequest, security: operations.DriveDrivesDeleteSecurity) -> operations.DriveDrivesDeleteResponse:
        r"""Permanently deletes a shared drive for which the user is an organizer. The shared drive cannot contain any untrashed items."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveDrivesDeleteRequest, base_url, '/drives/{driveId}', request)
        
        query_params = utils.get_query_params(operations.DriveDrivesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveDrivesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def drive_drives_get(self, request: operations.DriveDrivesGetRequest, security: operations.DriveDrivesGetSecurity) -> operations.DriveDrivesGetResponse:
        r"""Gets a shared drive's metadata by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveDrivesGetRequest, base_url, '/drives/{driveId}', request)
        
        query_params = utils.get_query_params(operations.DriveDrivesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveDrivesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Drive])
                res.drive = out

        return res

    def drive_drives_hide(self, request: operations.DriveDrivesHideRequest, security: operations.DriveDrivesHideSecurity) -> operations.DriveDrivesHideResponse:
        r"""Hides a shared drive from the default view."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveDrivesHideRequest, base_url, '/drives/{driveId}/hide', request)
        
        query_params = utils.get_query_params(operations.DriveDrivesHideRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveDrivesHideResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Drive])
                res.drive = out

        return res

    def drive_drives_insert(self, request: operations.DriveDrivesInsertRequest, security: operations.DriveDrivesInsertSecurity) -> operations.DriveDrivesInsertResponse:
        r"""Creates a new shared drive."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/drives'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "drive", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DriveDrivesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveDrivesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Drive])
                res.drive = out

        return res

    def drive_drives_list(self, request: operations.DriveDrivesListRequest, security: operations.DriveDrivesListSecurity) -> operations.DriveDrivesListResponse:
        r"""Lists the user's shared drives."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/drives'
        
        query_params = utils.get_query_params(operations.DriveDrivesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveDrivesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DriveList])
                res.drive_list = out

        return res

    def drive_drives_unhide(self, request: operations.DriveDrivesUnhideRequest, security: operations.DriveDrivesUnhideSecurity) -> operations.DriveDrivesUnhideResponse:
        r"""Restores a shared drive to the default view."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveDrivesUnhideRequest, base_url, '/drives/{driveId}/unhide', request)
        
        query_params = utils.get_query_params(operations.DriveDrivesUnhideRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveDrivesUnhideResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Drive])
                res.drive = out

        return res

    def drive_drives_update(self, request: operations.DriveDrivesUpdateRequest, security: operations.DriveDrivesUpdateSecurity) -> operations.DriveDrivesUpdateResponse:
        r"""Updates the metadata for a shared drive."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveDrivesUpdateRequest, base_url, '/drives/{driveId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "drive", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DriveDrivesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveDrivesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Drive])
                res.drive = out

        return res

    