/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ClusterConfig - The cluster config.
 */
public class ClusterConfig {
    /**
     * Autoscaling Policy config associated with the cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoscalingConfig")
    public AutoscalingConfig autoscalingConfig;
    public ClusterConfig withAutoscalingConfig(AutoscalingConfig autoscalingConfig) {
        this.autoscalingConfig = autoscalingConfig;
        return this;
    }
    
    /**
     * Optional. The node group settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auxiliaryNodeGroups")
    public AuxiliaryNodeGroup[] auxiliaryNodeGroups;
    public ClusterConfig withAuxiliaryNodeGroups(AuxiliaryNodeGroup[] auxiliaryNodeGroups) {
        this.auxiliaryNodeGroups = auxiliaryNodeGroups;
        return this;
    }
    
    /**
     * Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configBucket")
    public String configBucket;
    public ClusterConfig withConfigBucket(String configBucket) {
        this.configBucket = configBucket;
        return this;
    }
    
    /**
     * Dataproc metric config.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataprocMetricConfig")
    public DataprocMetricConfig dataprocMetricConfig;
    public ClusterConfig withDataprocMetricConfig(DataprocMetricConfig dataprocMetricConfig) {
        this.dataprocMetricConfig = dataprocMetricConfig;
        return this;
    }
    
    /**
     * Encryption settings for the cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptionConfig")
    public EncryptionConfig encryptionConfig;
    public ClusterConfig withEncryptionConfig(EncryptionConfig encryptionConfig) {
        this.encryptionConfig = encryptionConfig;
        return this;
    }
    
    /**
     * Endpoint config for this cluster
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endpointConfig")
    public EndpointConfig endpointConfig;
    public ClusterConfig withEndpointConfig(EndpointConfig endpointConfig) {
        this.endpointConfig = endpointConfig;
        return this;
    }
    
    /**
     * Common config settings for resources of Compute Engine cluster instances, applicable to all instances in the cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gceClusterConfig")
    public GceClusterConfig gceClusterConfig;
    public ClusterConfig withGceClusterConfig(GceClusterConfig gceClusterConfig) {
        this.gceClusterConfig = gceClusterConfig;
        return this;
    }
    
    /**
     * The cluster's GKE config.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gkeClusterConfig")
    public GkeClusterConfig gkeClusterConfig;
    public ClusterConfig withGkeClusterConfig(GkeClusterConfig gkeClusterConfig) {
        this.gkeClusterConfig = gkeClusterConfig;
        return this;
    }
    
    /**
     * Optional. Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if [[ "${ROLE}" == 'Master' ]]; then ... master specific actions ... else ... worker specific actions ... fi 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initializationActions")
    public NodeInitializationAction[] initializationActions;
    public ClusterConfig withInitializationActions(NodeInitializationAction[] initializationActions) {
        this.initializationActions = initializationActions;
        return this;
    }
    
    /**
     * Specifies the cluster auto-delete schedule configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lifecycleConfig")
    public LifecycleConfig lifecycleConfig;
    public ClusterConfig withLifecycleConfig(LifecycleConfig lifecycleConfig) {
        this.lifecycleConfig = lifecycleConfig;
        return this;
    }
    
    /**
     * The config settings for Compute Engine resources in an instance group, such as a master or worker group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("masterConfig")
    public InstanceGroupConfig masterConfig;
    public ClusterConfig withMasterConfig(InstanceGroupConfig masterConfig) {
        this.masterConfig = masterConfig;
        return this;
    }
    
    /**
     * Specifies a Metastore configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metastoreConfig")
    public MetastoreConfig metastoreConfig;
    public ClusterConfig withMetastoreConfig(MetastoreConfig metastoreConfig) {
        this.metastoreConfig = metastoreConfig;
        return this;
    }
    
    /**
     * The config settings for Compute Engine resources in an instance group, such as a master or worker group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondaryWorkerConfig")
    public InstanceGroupConfig secondaryWorkerConfig;
    public ClusterConfig withSecondaryWorkerConfig(InstanceGroupConfig secondaryWorkerConfig) {
        this.secondaryWorkerConfig = secondaryWorkerConfig;
        return this;
    }
    
    /**
     * Security related configuration, including encryption, Kerberos, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("securityConfig")
    public SecurityConfig securityConfig;
    public ClusterConfig withSecurityConfig(SecurityConfig securityConfig) {
        this.securityConfig = securityConfig;
        return this;
    }
    
    /**
     * Specifies the selection and config of software inside the cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softwareConfig")
    public SoftwareConfig softwareConfig;
    public ClusterConfig withSoftwareConfig(SoftwareConfig softwareConfig) {
        this.softwareConfig = softwareConfig;
        return this;
    }
    
    /**
     * Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tempBucket")
    public String tempBucket;
    public ClusterConfig withTempBucket(String tempBucket) {
        this.tempBucket = tempBucket;
        return this;
    }
    
    /**
     * The config settings for Compute Engine resources in an instance group, such as a master or worker group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workerConfig")
    public InstanceGroupConfig workerConfig;
    public ClusterConfig withWorkerConfig(InstanceGroupConfig workerConfig) {
        this.workerConfig = workerConfig;
        return this;
    }
    
}
