/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CertificateContact } from "./certificatecontact";
import { CertificateOrganization } from "./certificateorganization";
import { SubjectAlternativeNameDetails } from "./subjectalternativenamedetails";
import { Expose, Type } from "class-transformer";

/**
 * Certificate product type
 */
export enum CertificateProductTypeEnum {
  DvSsl = "DV_SSL",
  DvWildcardSsl = "DV_WILDCARD_SSL",
  EvSsl = "EV_SSL",
  OvCs = "OV_CS",
  OvDs = "OV_DS",
  OvSsl = "OV_SSL",
  OvWildcardSsl = "OV_WILDCARD_SSL",
  UccDvSsl = "UCC_DV_SSL",
  UccEvSsl = "UCC_EV_SSL",
  UccOvSsl = "UCC_OV_SSL",
}

/**
 * Root Type
 */
export enum CertificateRootTypeEnum {
  GodaddySha1 = "GODADDY_SHA_1",
  GodaddySha2 = "GODADDY_SHA_2",
  StarfieldSha1 = "STARFIELD_SHA_1",
  StarfieldSha2 = "STARFIELD_SHA_2",
}

/**
 * Number of subject alternative names(SAN) to be included in certificate
 */
export enum CertificateSlotSizeEnum {
  Five = "FIVE",
  Ten = "TEN",
  Fifteen = "FIFTEEN",
  Twenty = "TWENTY",
  Thirty = "THIRTY",
  Fourty = "FOURTY",
  Fifty = "FIFTY",
  OneHundred = "ONE_HUNDRED",
}

/**
 * Status of certificate
 */
export enum CertificateStatusEnum {
  PendingIssuance = "PENDING_ISSUANCE",
  Issued = "ISSUED",
  Revoked = "REVOKED",
  Canceled = "CANCELED",
  Denied = "DENIED",
  PendingRevocation = "PENDING_REVOCATION",
  PendingRekey = "PENDING_REKEY",
  Unused = "UNUSED",
  Expired = "EXPIRED",
}

/**
 * Certificate details retrieved
 */
export class Certificate extends SpeakeasyBase {
  /**
   * The unique identifier of the certificate request. Only present if no errors returned
   */
  @SpeakeasyMetadata()
  @Expose({ name: "certificateId" })
  certificateId: string;

  /**
   * Common name of certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commonName" })
  commonName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "contact" })
  @Type(() => CertificateContact)
  contact: CertificateContact;

  /**
   * The date the certificate was ordered.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  createdAt: string;

  /**
   * Only present if certificate order has been denied
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deniedReason" })
  deniedReason?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "organization" })
  @Type(() => CertificateOrganization)
  organization?: CertificateOrganization;

  /**
   * Validity period of order. Specified in years
   */
  @SpeakeasyMetadata()
  @Expose({ name: "period" })
  period: number;

  /**
   * Certificate product type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productType" })
  productType: CertificateProductTypeEnum;

  /**
   * Percentage of completion for certificate vetting
   */
  @SpeakeasyMetadata()
  @Expose({ name: "progress" })
  progress?: number;

  /**
   * The revocation date of certificate (if revoked).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "revokedAt" })
  revokedAt?: string;

  /**
   * Root Type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rootType" })
  rootType?: CertificateRootTypeEnum;

  /**
   * Serial number of certificate (if issued or revoked)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serialNumber" })
  serialNumber?: string;

  /**
   * Hexadecmial format for Serial number of certificate(if issued or revoked)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serialNumberHex" })
  serialNumberHex?: string;

  /**
   * Number of subject alternative names(SAN) to be included in certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "slotSize" })
  slotSize?: CertificateSlotSizeEnum;

  /**
   * Status of certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: CertificateStatusEnum;

  /**
   * Contains subject alternative names set
   */
  @SpeakeasyMetadata({ elemType: SubjectAlternativeNameDetails })
  @Expose({ name: "subjectAlternativeNames" })
  @Type(() => SubjectAlternativeNameDetails)
  subjectAlternativeNames?: SubjectAlternativeNameDetails[];

  /**
   * The end date of the certificate's validity (if issued or revoked).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "validEnd" })
  validEnd?: string;

  /**
   * The start date of the certificate's validity (if issued or revoked).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "validStart" })
  validStart?: string;
}
