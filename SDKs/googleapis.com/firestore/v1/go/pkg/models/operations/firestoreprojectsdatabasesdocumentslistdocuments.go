// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type FirestoreProjectsDatabasesDocumentsListDocumentsSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type FirestoreProjectsDatabasesDocumentsListDocumentsSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type FirestoreProjectsDatabasesDocumentsListDocumentsSecurity struct {
	Option1 *FirestoreProjectsDatabasesDocumentsListDocumentsSecurityOption1 `security:"option"`
	Option2 *FirestoreProjectsDatabasesDocumentsListDocumentsSecurityOption2 `security:"option"`
}

type FirestoreProjectsDatabasesDocumentsListDocumentsRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or `messages`. This is optional, and when not provided, Firestore will list documents from all collections under the provided `parent`.
	CollectionID string `pathParam:"style=simple,explode=false,name=collectionId"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// The list of field paths in the mask. See Document.fields for a field path syntax reference.
	MaskFieldPaths []string `queryParam:"style=form,explode=true,name=mask.fieldPaths"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Optional. The optional ordering of the documents to return. For example: `priority desc, __name__ desc`. This mirrors the `ORDER BY` used in Firestore queries but in a string representation. When absent, documents are ordered based on `__name__ ASC`.
	OrderBy *string `queryParam:"style=form,explode=true,name=orderBy"`
	// Optional. The maximum number of documents to return in a single response. Firestore may return fewer than this value.
	PageSize *int64 `queryParam:"style=form,explode=true,name=pageSize"`
	// Optional. A page token, received from a previous `ListDocuments` response. Provide this to retrieve the subsequent page. When paginating, all other parameters (with the exception of `page_size`) must match the values set in the request that generated the page token.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
	Parent string `pathParam:"style=simple,explode=false,name=parent"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Perform the read at the provided time. This may not be older than 270 seconds.
	ReadTime *string `queryParam:"style=form,explode=true,name=readTime"`
	// If the list should show missing documents. A document is missing if it does not exist, but there are sub-documents nested underneath it. When true, such missing documents will be returned with a key but will not have fields, `create_time`, or `update_time` set. Requests with `show_missing` may not specify `where` or `order_by`.
	ShowMissing *bool `queryParam:"style=form,explode=true,name=showMissing"`
	// Perform the read as part of an already active transaction.
	Transaction *string `queryParam:"style=form,explode=true,name=transaction"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type FirestoreProjectsDatabasesDocumentsListDocumentsResponse struct {
	ContentType string
	// Successful response
	ListDocumentsResponse *shared.ListDocumentsResponse
	StatusCode            int
	RawResponse           *http.Response
}
