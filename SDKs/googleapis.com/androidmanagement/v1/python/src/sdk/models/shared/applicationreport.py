"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import applicationevent as shared_applicationevent
from ..shared import keyedappstate as shared_keyedappstate
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ApplicationReportApplicationSourceEnum(str, Enum):
    r"""The source of the package."""
    APPLICATION_SOURCE_UNSPECIFIED = 'APPLICATION_SOURCE_UNSPECIFIED'
    SYSTEM_APP_FACTORY_VERSION = 'SYSTEM_APP_FACTORY_VERSION'
    SYSTEM_APP_UPDATED_VERSION = 'SYSTEM_APP_UPDATED_VERSION'
    INSTALLED_FROM_PLAY_STORE = 'INSTALLED_FROM_PLAY_STORE'

class ApplicationReportStateEnum(str, Enum):
    r"""Application state."""
    APPLICATION_STATE_UNSPECIFIED = 'APPLICATION_STATE_UNSPECIFIED'
    REMOVED = 'REMOVED'
    INSTALLED = 'INSTALLED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ApplicationReport:
    r"""Information reported about an installed app."""
    
    application_source: Optional[ApplicationReportApplicationSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationSource'), 'exclude': lambda f: f is None }})
    r"""The source of the package."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The display name of the app."""  
    events: Optional[list[shared_applicationevent.ApplicationEvent]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events'), 'exclude': lambda f: f is None }})
    r"""The list of app events which have occurred in the last 30 hours."""  
    installer_package_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installerPackageName'), 'exclude': lambda f: f is None }})
    r"""The package name of the app that installed this app."""  
    keyed_app_states: Optional[list[shared_keyedappstate.KeyedAppState]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyedAppStates'), 'exclude': lambda f: f is None }})
    r"""List of keyed app states reported by the app."""  
    package_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageName'), 'exclude': lambda f: f is None }})
    r"""Package name of the app."""  
    package_sha256_hash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageSha256Hash'), 'exclude': lambda f: f is None }})
    r"""The SHA-256 hash of the app's APK file, which can be used to verify the app hasn't been modified. Each byte of the hash value is represented as a two-digit hexadecimal number."""  
    signing_key_cert_fingerprints: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signingKeyCertFingerprints'), 'exclude': lambda f: f is None }})
    r"""The SHA-1 hash of each android.content.pm.Signature (https://developer.android.com/reference/android/content/pm/Signature.html) associated with the app package. Each byte of each hash value is represented as a two-digit hexadecimal number."""  
    state: Optional[ApplicationReportStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Application state."""  
    version_code: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('versionCode'), 'exclude': lambda f: f is None }})
    r"""The app version code, which can be used to determine whether one version is more recent than another."""  
    version_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('versionName'), 'exclude': lambda f: f is None }})
    r"""The app version as displayed to the user."""  
    