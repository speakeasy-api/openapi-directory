// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type PackagePackageTypeEnum string

const (
	PackagePackageTypeEnumNpm       PackagePackageTypeEnum = "npm"
	PackagePackageTypeEnumMaven     PackagePackageTypeEnum = "maven"
	PackagePackageTypeEnumRubygems  PackagePackageTypeEnum = "rubygems"
	PackagePackageTypeEnumDocker    PackagePackageTypeEnum = "docker"
	PackagePackageTypeEnumNuget     PackagePackageTypeEnum = "nuget"
	PackagePackageTypeEnumContainer PackagePackageTypeEnum = "container"
)

func (e PackagePackageTypeEnum) ToPointer() *PackagePackageTypeEnum {
	return &e
}

func (e *PackagePackageTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "npm":
		fallthrough
	case "maven":
		fallthrough
	case "rubygems":
		fallthrough
	case "docker":
		fallthrough
	case "nuget":
		fallthrough
	case "container":
		*e = PackagePackageTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PackagePackageTypeEnum: %v", v)
	}
}

type PackageVisibilityEnum1 string

const (
	PackageVisibilityEnum1Private PackageVisibilityEnum1 = "private"
	PackageVisibilityEnum1Public  PackageVisibilityEnum1 = "public"
)

func (e PackageVisibilityEnum1) ToPointer() *PackageVisibilityEnum1 {
	return &e
}

func (e *PackageVisibilityEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private":
		fallthrough
	case "public":
		*e = PackageVisibilityEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PackageVisibilityEnum1: %v", v)
	}
}

// Package - A software package
type Package struct {
	CreatedAt time.Time `json:"created_at"`
	HTMLURL   string    `json:"html_url"`
	// Unique identifier of the package.
	ID int64 `json:"id"`
	// The name of the package.
	Name string `json:"name"`
	// A GitHub user.
	Owner       *NullableSimpleUser    `json:"owner,omitempty"`
	PackageType PackagePackageTypeEnum `json:"package_type"`
	// Minimal Repository
	Repository *NullableMinimalRepository `json:"repository,omitempty"`
	UpdatedAt  time.Time                  `json:"updated_at"`
	URL        string                     `json:"url"`
	// The number of versions of the package.
	VersionCount int64                  `json:"version_count"`
	Visibility   PackageVisibilityEnum1 `json:"visibility"`
}
