<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Health 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get HTTP
     * 
     * Check the Appwrite HTTP server is up and responsive.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\HealthGetResponse
     */
	public function healthGet(
    ): \OpenAPI\OpenAPI\Models\Operations\HealthGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/health');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HealthGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get Anti virus
     * 
     * Check the Appwrite Anti Virus server is up and connection is successful.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\HealthGetAntiVirusResponse
     */
	public function healthGetAntiVirus(
    ): \OpenAPI\OpenAPI\Models\Operations\HealthGetAntiVirusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/health/anti-virus');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HealthGetAntiVirusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get Cache
     * 
     * Check the Appwrite in-memory cache server is up and connection is successful.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\HealthGetCacheResponse
     */
	public function healthGetCache(
    ): \OpenAPI\OpenAPI\Models\Operations\HealthGetCacheResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/health/cache');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HealthGetCacheResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get DB
     * 
     * Check the Appwrite database server is up and connection is successful.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\HealthGetDBResponse
     */
	public function healthGetDB(
    ): \OpenAPI\OpenAPI\Models\Operations\HealthGetDBResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/health/db');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HealthGetDBResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get Certificate Queue
     * 
     * Get the number of certificates that are waiting to be issued against [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue server.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueCertificatesResponse
     */
	public function healthGetQueueCertificates(
    ): \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueCertificatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/health/queue/certificates');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueCertificatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get Functions Queue
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueFunctionsResponse
     */
	public function healthGetQueueFunctions(
    ): \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueFunctionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/health/queue/functions');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueFunctionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get Logs Queue
     * 
     * Get the number of logs that are waiting to be processed in the Appwrite internal queue server.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueLogsResponse
     */
	public function healthGetQueueLogs(
    ): \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/health/queue/logs');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get Tasks Queue
     * 
     * Get the number of tasks that are waiting to be processed in the Appwrite internal queue server.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueTasksResponse
     */
	public function healthGetQueueTasks(
    ): \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueTasksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/health/queue/tasks');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueTasksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get Usage Queue
     * 
     * Get the number of usage stats that are waiting to be processed in the Appwrite internal queue server.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueUsageResponse
     */
	public function healthGetQueueUsage(
    ): \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/health/queue/usage');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get Webhooks Queue
     * 
     * Get the number of webhooks that are waiting to be processed in the Appwrite internal queue server.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueWebhooksResponse
     */
	public function healthGetQueueWebhooks(
    ): \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueWebhooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/health/queue/webhooks');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HealthGetQueueWebhooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get Local Storage
     * 
     * Check the Appwrite local storage device is up and connection is successful.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\HealthGetStorageLocalResponse
     */
	public function healthGetStorageLocal(
    ): \OpenAPI\OpenAPI\Models\Operations\HealthGetStorageLocalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/health/storage/local');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HealthGetStorageLocalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get Time
     * 
     * Check the Appwrite server time is synced with Google remote NTP server. We use this technology to smoothly handle leap seconds with no disruptive events. The [Network Time Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) (NTP) is used by hundreds of millions of computers and devices to synchronize their clocks over the Internet. If your computer sets its own clock, it likely uses NTP.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\HealthGetTimeResponse
     */
	public function healthGetTime(
    ): \OpenAPI\OpenAPI\Models\Operations\HealthGetTimeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/health/time');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HealthGetTimeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}