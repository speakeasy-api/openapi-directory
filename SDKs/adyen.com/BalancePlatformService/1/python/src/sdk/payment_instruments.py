"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PaymentInstruments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_payment_instruments_id(self, request: operations.GetPaymentInstrumentsIDRequest, security: operations.GetPaymentInstrumentsIDSecurity) -> operations.GetPaymentInstrumentsIDResponse:
        r"""Get a payment instrument
        Returns the details of a payment instrument.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPaymentInstrumentsIDRequest, base_url, '/paymentInstruments/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaymentInstrumentsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentInstrument])
                res.payment_instrument = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_payment_instruments_id_reveal(self, request: operations.GetPaymentInstrumentsIDRevealRequest, security: operations.GetPaymentInstrumentsIDRevealSecurity) -> operations.GetPaymentInstrumentsIDRevealResponse:
        r"""Get the reveal information of a payment instrument
        Returns the reveal information of a payment instrument.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPaymentInstrumentsIDRevealRequest, base_url, '/paymentInstruments/{id}/reveal', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaymentInstrumentsIDRevealResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentInstrumentRevealInfo])
                res.payment_instrument_reveal_info = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_payment_instruments_id_transaction_rules(self, request: operations.GetPaymentInstrumentsIDTransactionRulesRequest, security: operations.GetPaymentInstrumentsIDTransactionRulesSecurity) -> operations.GetPaymentInstrumentsIDTransactionRulesResponse:
        r"""Get all transaction rules for a payment instrument
        Returns a list of transaction rules associated with a payment instrument.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPaymentInstrumentsIDTransactionRulesRequest, base_url, '/paymentInstruments/{id}/transactionRules', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaymentInstrumentsIDTransactionRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TransactionRulesResponse])
                res.transaction_rules_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def patch_payment_instruments_id(self, request: operations.PatchPaymentInstrumentsIDRequest, security: operations.PatchPaymentInstrumentsIDSecurity) -> operations.PatchPaymentInstrumentsIDResponse:
        r"""Update a payment instrument
        Updates a payment instrument. Once a payment instrument is already active, you can only update its status. However, for cards created with **inactive** status, you can still update the balance account associated with the card.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchPaymentInstrumentsIDRequest, base_url, '/paymentInstruments/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payment_instrument_update_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchPaymentInstrumentsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdatePaymentInstrument])
                res.update_payment_instrument = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_payment_instruments(self, request: shared.PaymentInstrumentInfo, security: operations.PostPaymentInstrumentsSecurity) -> operations.PostPaymentInstrumentsResponse:
        r"""Create a payment instrument
        Creates a payment instrument to issue a physical card, a virtual card, or a business account to your user.
        
         For more information, refer to [Issue cards](https://docs.adyen.com/issuing/create-cards) or [Issue business accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/paymentInstruments'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPaymentInstrumentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentInstrument])
                res.payment_instrument = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    