<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ScoreComment - Comment added on a sheet music
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ScoreComment
{
    /**
     * The comment text that can includes mentions using the following
     * 
     * format: `@[id:username]`.
     * 
     * 
     * @var ?string $comment
     */
	#[\JMS\Serializer\Annotation\SerializedName('comment')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $comment = null;
    
    /**
     * The context of the comment (for inline/contextualized comments). A context will include all the information related to the location of the comment (i.e. score parts, range of measure, time position).
     * 
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ScoreCommentContext $context
     */
	#[\JMS\Serializer\Annotation\SerializedName('context')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ScoreCommentContext')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ScoreCommentContext $context = null;
    
    /**
     * The date when the comment was posted
     * 
     * @var ?\DateTime $date
     */
	#[\JMS\Serializer\Annotation\SerializedName('date')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $date = null;
    
    /**
     * The comment unique identifier
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The list of user identifier mentioned on the score
     * 
     * @var ?array<string> $mentions
     */
	#[\JMS\Serializer\Annotation\SerializedName('mentions')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $mentions = null;
    
    /**
     * The date of the last comment modification
     * 
     * @var ?\DateTime $modificationDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('modificationDate')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $modificationDate = null;
    
    /**
     * A raw version of the comment, that can be displayed without parsing
     * 
     * the mentions.
     * 
     * 
     * @var ?string $rawComment
     */
	#[\JMS\Serializer\Annotation\SerializedName('rawComment')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $rawComment = null;
    
    /**
     * When the comment is a reply to another comment, the unique identifier of the parent comment
     * 
     * 
     * 
     * @var ?string $replyTo
     */
	#[\JMS\Serializer\Annotation\SerializedName('replyTo')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $replyTo = null;
    
    /**
     * For inline comments, the comment can be marked as resolved and will be hidden in the future responses
     * 
     * 
     * 
     * @var ?bool $resolved
     */
	#[\JMS\Serializer\Annotation\SerializedName('resolved')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $resolved = null;
    
    /**
     * If the user is marked as resolved, this will contain the unique identifier of the User who marked this comment as resolved
     * 
     * 
     * 
     * @var ?string $resolvedBy
     */
	#[\JMS\Serializer\Annotation\SerializedName('resolvedBy')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $resolvedBy = null;
    
    /**
     * The unique identifier of revision the comment was posted
     * 
     * @var ?string $revision
     */
	#[\JMS\Serializer\Annotation\SerializedName('revision')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $revision = null;
    
    /**
     * The unique identifier of the score where the comment was posted
     * 
     * @var ?string $score
     */
	#[\JMS\Serializer\Annotation\SerializedName('score')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $score = null;
    
    /**
     * `true  if the message has been detected as spam and hidden from other users
     * 
     * 
     * 
     * @var ?bool $spam
     */
	#[\JMS\Serializer\Annotation\SerializedName('spam')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $spam = null;
    
    /**
     * The type of the comment
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ScoreCommentTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ScoreCommentTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ScoreCommentTypeEnum $type = null;
    
    /**
     * The author unique identifier
     * 
     * @var ?string $user
     */
	#[\JMS\Serializer\Annotation\SerializedName('user')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $user = null;
    
	public function __construct()
	{
		$this->comment = null;
		$this->context = null;
		$this->date = null;
		$this->id = null;
		$this->mentions = null;
		$this->modificationDate = null;
		$this->rawComment = null;
		$this->replyTo = null;
		$this->resolved = null;
		$this->resolvedBy = null;
		$this->revision = null;
		$this->score = null;
		$this->spam = null;
		$this->type = null;
		$this->user = null;
	}
}
