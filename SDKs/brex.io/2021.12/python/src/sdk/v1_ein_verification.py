"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class V1EinVerification:
    r"""US EIN tax number methods"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def ein_verification_basic(self, request: operations.EinVerificationBasicRequest, security: operations.EinVerificationBasicSecurity) -> operations.EinVerificationBasicResponse:
        r"""Verifies an EIN number
        Performs a basic verification check of a given EIN tax number.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/ein-verification/basic-check'
        
        query_params = utils.get_query_params(operations.EinVerificationBasicRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EinVerificationBasicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EinVerificationBasic200ApplicationJSON])
                res.ein_verification_basic_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EinVerificationBasicDefaultApplicationJSON])
                res.ein_verification_basic_default_application_json_object = out

        return res

    def ein_verification_comprehensive(self, request: operations.EinVerificationComprehensiveRequest, security: operations.EinVerificationComprehensiveSecurity) -> operations.EinVerificationComprehensiveResponse:
        r"""Verifies EIN number and retrieves company data
        Comprehensive verification of a given EIN number. Additionally to the basic verification it will lookup company details
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/ein-verification/comprehensive-check'
        
        query_params = utils.get_query_params(operations.EinVerificationComprehensiveRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EinVerificationComprehensiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EinVerificationComprehensive200ApplicationJSON])
                res.ein_verification_comprehensive_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EinVerificationComprehensiveDefaultApplicationJSON])
                res.ein_verification_comprehensive_default_application_json_object = out

        return res

    def ein_verification_lookup(self, request: operations.EinVerificationLookupRequest, security: operations.EinVerificationLookupSecurity) -> operations.EinVerificationLookupResponse:
        r"""Retrieves a list of EIN numbers
        Lookup EIN number for a company by its company name
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/ein-verification/lookup'
        
        query_params = utils.get_query_params(operations.EinVerificationLookupRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EinVerificationLookupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EinVerificationLookup200ApplicationJSON])
                res.ein_verification_lookup_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EinVerificationLookupDefaultApplicationJSON])
                res.ein_verification_lookup_default_application_json_object = out

        return res

    