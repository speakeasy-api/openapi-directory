"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var accesstoken_1 = require("./accesstoken");
var account_1 = require("./account");
var actions_1 = require("./actions");
var additionaldeviceinformation_1 = require("./additionaldeviceinformation");
var customdevice_1 = require("./customdevice");
var devicebyserial_1 = require("./devicebyserial");
var devices_1 = require("./devices");
var devicesbyenergy_1 = require("./devicesbyenergy");
var devicesbysubtype_1 = require("./devicesbysubtype");
var fastsenddevicevalues_1 = require("./fastsenddevicevalues");
var folder_1 = require("./folder");
var folderassign_1 = require("./folderassign");
var foldermenu_1 = require("./foldermenu");
var foldersettings_1 = require("./foldersettings");
var health_1 = require("./health");
var mbus_1 = require("./mbus");
var meterfolderinformation_1 = require("./meterfolderinformation");
var metervalues_1 = require("./metervalues");
var oauth_1 = require("./oauth");
var pico_1 = require("./pico");
var picocharging_1 = require("./picocharging");
var picocharginghistory_1 = require("./picocharginghistory");
var picoenablefixcablelock_1 = require("./picoenablefixcablelock");
var picoloadmanagementgroup_1 = require("./picoloadmanagementgroup");
var picoloadmanagementsetdynamiccurrent_1 = require("./picoloadmanagementsetdynamiccurrent");
var picosettings_1 = require("./picosettings");
var registerforrealtimeapi_1 = require("./registerforrealtimeapi");
var smartmedeviceconfiguration_1 = require("./smartmedeviceconfiguration");
var subuser_1 = require("./subuser");
var user_1 = require("./user");
var usertofolderassign_1 = require("./usertofolderassign");
var values_1 = require("./values");
var valuesinpast_1 = require("./valuesinpast");
var valuesinpastmultiple_1 = require("./valuesinpastmultiple");
var virtualbillingmeteractive_1 = require("./virtualbillingmeteractive");
var virtualbillingmeterdeactivate_1 = require("./virtualbillingmeterdeactivate");
var virtualbillingmeters_1 = require("./virtualbillingmeters");
var virtualmetercalculateformula_1 = require("./virtualmetercalculateformula");
var virtualtariff_1 = require("./virtualtariff");
var virtualtariffconsumption_1 = require("./virtualtariffconsumption");
var virtualtariffsforproperty_1 = require("./virtualtariffsforproperty");
var virtualtariffsstatusforproperty_1 = require("./virtualtariffsstatusforproperty");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://smart-me.com:443"];
/**
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.accessToken = new accesstoken_1.AccessToken(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.account = new account_1.Account(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.actions = new actions_1.Actions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.additionalDeviceInformation = new additionaldeviceinformation_1.AdditionalDeviceInformation(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customDevice = new customdevice_1.CustomDevice(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.deviceBySerial = new devicebyserial_1.DeviceBySerial(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.devices = new devices_1.Devices(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.devicesByEnergy = new devicesbyenergy_1.DevicesByEnergy(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.devicesBySubType = new devicesbysubtype_1.DevicesBySubType(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.fastSendDeviceValues = new fastsenddevicevalues_1.FastSendDeviceValues(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.folder = new folder_1.Folder(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.folderAssign = new folderassign_1.FolderAssign(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.folderMenu = new foldermenu_1.FolderMenu(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.folderSettings = new foldersettings_1.FolderSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.health = new health_1.Health(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mBus = new mbus_1.MBus(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.meterFolderInformation = new meterfolderinformation_1.MeterFolderInformation(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.meterValues = new metervalues_1.MeterValues(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.oAuth = new oauth_1.OAuth(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.pico = new pico_1.Pico(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.picoCharging = new picocharging_1.PicoCharging(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.picoChargingHistory = new picocharginghistory_1.PicoChargingHistory(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.picoEnableFixCableLock = new picoenablefixcablelock_1.PicoEnableFixCableLock(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.picoLoadmanagementGroup = new picoloadmanagementgroup_1.PicoLoadmanagementGroup(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.picoLoadmanagementSetDynamicCurrent =
            new picoloadmanagementsetdynamiccurrent_1.PicoLoadmanagementSetDynamicCurrent(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.picoSettings = new picosettings_1.PicoSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.registerForRealtimeApi = new registerforrealtimeapi_1.RegisterForRealtimeApi(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.smartMeDeviceConfiguration = new smartmedeviceconfiguration_1.SmartMeDeviceConfiguration(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.subUser = new subuser_1.SubUser(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.user = new user_1.User(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.userToFolderAssign = new usertofolderassign_1.UserToFolderAssign(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.values = new values_1.Values(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.valuesInPast = new valuesinpast_1.ValuesInPast(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.valuesInPastMultiple = new valuesinpastmultiple_1.ValuesInPastMultiple(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.virtualBillingMeterActive = new virtualbillingmeteractive_1.VirtualBillingMeterActive(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.virtualBillingMeterDeactivate = new virtualbillingmeterdeactivate_1.VirtualBillingMeterDeactivate(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.virtualBillingMeters = new virtualbillingmeters_1.VirtualBillingMeters(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.virtualMeterCalculateFormula = new virtualmetercalculateformula_1.VirtualMeterCalculateFormula(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.virtualTariff = new virtualtariff_1.VirtualTariff(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.virtualTariffConsumption = new virtualtariffconsumption_1.VirtualTariffConsumption(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.virtualTariffsForProperty = new virtualtariffsforproperty_1.VirtualTariffsForProperty(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.virtualTariffsStatusForProperty = new virtualtariffsstatusforproperty_1.VirtualTariffsStatusForProperty(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
