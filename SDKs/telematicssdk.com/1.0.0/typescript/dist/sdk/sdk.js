"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var consolidatedsafescoring_1 = require("./consolidatedsafescoring");
var consolidatedstatistics_1 = require("./consolidatedstatistics");
var threeforbackendoptional_1 = require("./threeforbackendoptional");
var two1userstatisticsoptional_1 = require("./two1userstatisticsoptional");
var two2usertripsoptional_1 = require("./two2usertripsoptional");
var two4usersafescoringoptional_1 = require("./two4usersafescoringoptional");
var twoformobileappoptional_1 = require("./twoformobileappoptional");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    "https://api.telematicssdk.com",
    "https://mobilesdk.telematicssdk.com",
];
/**
 * # Introduction
 *
 * @remarks
 * We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.
 *
 * * [CONTACT US](https://telematicssdk.com)
 * * [SANDBOX](https://userdatahub.com)
 * * [DEV.PORTAL](https://docs.telematicssdk.com)
 * * [DEMO APP](https://raxeltelematics.com/telematics-app)
 *
 *
 * # Overview
 * Datamotion provides telematics infrastructure for mobile applications.
 *
 * Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application
 *
 * There are 3 groups of methods:
 * * 1 - user management
 * * 2 - statistics for mobile app
 * * 3 - statistics for back-end(s)
 *
 * in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns)
 * # Possible architecture
 *
 * There are three common schemes that are used by our clients. These schemes can be combined
 * * Collect, Process, Store (required: 1&2)
 * * Collect, Process (required: 1& sns)
 * * Collect (required 1&sns)
 *
 *
 * ## Collect, Process, Store
 * ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)
 *
 * ## Collect, Process
 * ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)
 *
 * ## Collect
 * ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)
 *
 * ***
 * ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)
 *
 * # Common use-cases:
 * * Safe and efficient driving
 * * Usage-based insurance
 * * Safe driving assessment
 * * Driver assessment
 * * Trip log
 * * Geo-analysis
 * * Accident monitoring
 * * Driving engagements
 * * Location based services
 * * Realtime Tracking
 * and beyond
 *
 * # How to start
 * * Register a [SANDBOX ACCOUNT](https://userdatahub.com)
 * * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)
 * * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)
 *
 * # Authentication
 * To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials
 *
 * Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.twoForMobileAppOptional = new twoformobileappoptional_1.TwoForMobileAppOptional(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.two1UserStatisticsOptional = new two1userstatisticsoptional_1.Two1UserStatisticsOptional(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.two2UserTripsOptional = new two2usertripsoptional_1.Two2UserTripsOptional(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.two4UserSafeScoringOptional = new two4usersafescoringoptional_1.Two4UserSafeScoringOptional(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.threeForBackEndOptional = new threeforbackendoptional_1.ThreeForBackEndOptional(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.consolidatedSafeScoring = new consolidatedsafescoring_1.ConsolidatedSafeScoring(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.consolidatedStatistics = new consolidatedstatistics_1.ConsolidatedStatistics(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
