"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import batchgetlinkattributes as shared_batchgetlinkattributes
from ..shared import batchgetobjectattributes as shared_batchgetobjectattributes
from ..shared import batchgetobjectinformation as shared_batchgetobjectinformation
from ..shared import batchlistattachedindices as shared_batchlistattachedindices
from ..shared import batchlistincomingtypedlinks as shared_batchlistincomingtypedlinks
from ..shared import batchlistindex as shared_batchlistindex
from ..shared import batchlistobjectattributes as shared_batchlistobjectattributes
from ..shared import batchlistobjectchildren as shared_batchlistobjectchildren
from ..shared import batchlistobjectparentpaths as shared_batchlistobjectparentpaths
from ..shared import batchlistobjectparents as shared_batchlistobjectparents
from ..shared import batchlistobjectpolicies as shared_batchlistobjectpolicies
from ..shared import batchlistoutgoingtypedlinks as shared_batchlistoutgoingtypedlinks
from ..shared import batchlistpolicyattachments as shared_batchlistpolicyattachments
from ..shared import batchlookuppolicy as shared_batchlookuppolicy
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchReadOperation:
    r"""Represents the output of a <code>BatchRead</code> operation."""
    
    get_link_attributes: Optional[shared_batchgetlinkattributes.BatchGetLinkAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GetLinkAttributes'), 'exclude': lambda f: f is None }})  
    get_object_attributes: Optional[shared_batchgetobjectattributes.BatchGetObjectAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GetObjectAttributes'), 'exclude': lambda f: f is None }})  
    get_object_information: Optional[shared_batchgetobjectinformation.BatchGetObjectInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GetObjectInformation'), 'exclude': lambda f: f is None }})  
    list_attached_indices: Optional[shared_batchlistattachedindices.BatchListAttachedIndices] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListAttachedIndices'), 'exclude': lambda f: f is None }})  
    list_incoming_typed_links: Optional[shared_batchlistincomingtypedlinks.BatchListIncomingTypedLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListIncomingTypedLinks'), 'exclude': lambda f: f is None }})  
    list_index: Optional[shared_batchlistindex.BatchListIndex] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListIndex'), 'exclude': lambda f: f is None }})  
    list_object_attributes: Optional[shared_batchlistobjectattributes.BatchListObjectAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListObjectAttributes'), 'exclude': lambda f: f is None }})  
    list_object_children: Optional[shared_batchlistobjectchildren.BatchListObjectChildren] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListObjectChildren'), 'exclude': lambda f: f is None }})  
    list_object_parent_paths: Optional[shared_batchlistobjectparentpaths.BatchListObjectParentPaths] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListObjectParentPaths'), 'exclude': lambda f: f is None }})  
    list_object_parents: Optional[shared_batchlistobjectparents.BatchListObjectParents] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListObjectParents'), 'exclude': lambda f: f is None }})  
    list_object_policies: Optional[shared_batchlistobjectpolicies.BatchListObjectPolicies] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListObjectPolicies'), 'exclude': lambda f: f is None }})  
    list_outgoing_typed_links: Optional[shared_batchlistoutgoingtypedlinks.BatchListOutgoingTypedLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListOutgoingTypedLinks'), 'exclude': lambda f: f is None }})  
    list_policy_attachments: Optional[shared_batchlistpolicyattachments.BatchListPolicyAttachments] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListPolicyAttachments'), 'exclude': lambda f: f is None }})  
    lookup_policy: Optional[shared_batchlookuppolicy.BatchLookupPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookupPolicy'), 'exclude': lambda f: f is None }})  
    