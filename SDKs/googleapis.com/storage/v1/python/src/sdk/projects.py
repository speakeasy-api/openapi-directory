"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def storage_projects_hmac_keys_create(self, request: operations.StorageProjectsHmacKeysCreateRequest, security: operations.StorageProjectsHmacKeysCreateSecurity) -> operations.StorageProjectsHmacKeysCreateResponse:
        r"""Creates a new HMAC key for the specified service account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageProjectsHmacKeysCreateRequest, base_url, '/projects/{projectId}/hmacKeys', request)
        
        query_params = utils.get_query_params(operations.StorageProjectsHmacKeysCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageProjectsHmacKeysCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HmacKey])
                res.hmac_key = out

        return res

    def storage_projects_hmac_keys_delete(self, request: operations.StorageProjectsHmacKeysDeleteRequest, security: operations.StorageProjectsHmacKeysDeleteSecurity) -> operations.StorageProjectsHmacKeysDeleteResponse:
        r"""Deletes an HMAC key."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageProjectsHmacKeysDeleteRequest, base_url, '/projects/{projectId}/hmacKeys/{accessId}', request)
        
        query_params = utils.get_query_params(operations.StorageProjectsHmacKeysDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageProjectsHmacKeysDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def storage_projects_hmac_keys_get(self, request: operations.StorageProjectsHmacKeysGetRequest, security: operations.StorageProjectsHmacKeysGetSecurity) -> operations.StorageProjectsHmacKeysGetResponse:
        r"""Retrieves an HMAC key's metadata"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageProjectsHmacKeysGetRequest, base_url, '/projects/{projectId}/hmacKeys/{accessId}', request)
        
        query_params = utils.get_query_params(operations.StorageProjectsHmacKeysGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageProjectsHmacKeysGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HmacKeyMetadata])
                res.hmac_key_metadata = out

        return res

    def storage_projects_hmac_keys_list(self, request: operations.StorageProjectsHmacKeysListRequest, security: operations.StorageProjectsHmacKeysListSecurity) -> operations.StorageProjectsHmacKeysListResponse:
        r"""Retrieves a list of HMAC keys matching the criteria."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageProjectsHmacKeysListRequest, base_url, '/projects/{projectId}/hmacKeys', request)
        
        query_params = utils.get_query_params(operations.StorageProjectsHmacKeysListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageProjectsHmacKeysListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HmacKeysMetadata])
                res.hmac_keys_metadata = out

        return res

    def storage_projects_hmac_keys_update(self, request: operations.StorageProjectsHmacKeysUpdateRequest, security: operations.StorageProjectsHmacKeysUpdateSecurity) -> operations.StorageProjectsHmacKeysUpdateResponse:
        r"""Updates the state of an HMAC key. See the HMAC Key resource descriptor for valid states."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageProjectsHmacKeysUpdateRequest, base_url, '/projects/{projectId}/hmacKeys/{accessId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "hmac_key_metadata", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageProjectsHmacKeysUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageProjectsHmacKeysUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HmacKeyMetadata])
                res.hmac_key_metadata = out

        return res

    def storage_projects_service_account_get(self, request: operations.StorageProjectsServiceAccountGetRequest, security: operations.StorageProjectsServiceAccountGetSecurity) -> operations.StorageProjectsServiceAccountGetResponse:
        r"""Get the email address of this project's Google Cloud Storage service account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageProjectsServiceAccountGetRequest, base_url, '/projects/{projectId}/serviceAccount', request)
        
        query_params = utils.get_query_params(operations.StorageProjectsServiceAccountGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageProjectsServiceAccountGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceAccount])
                res.service_account = out

        return res

    