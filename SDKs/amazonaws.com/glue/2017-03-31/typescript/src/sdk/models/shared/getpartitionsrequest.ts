/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Segment } from "./segment";
import { Expose, Transform, Type } from "class-transformer";

export class GetPartitionsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CatalogId" })
  catalogId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DatabaseName" })
  databaseName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ExcludeColumnSchema" })
  excludeColumnSchema?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "Expression" })
  expression?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "MaxResults" })
  maxResults?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "NextToken" })
  nextToken?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "QueryAsOfTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  queryAsOfTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Segment" })
  @Type(() => Segment)
  segment?: Segment;

  @SpeakeasyMetadata()
  @Expose({ name: "TableName" })
  tableName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TransactionId" })
  transactionId?: string;
}
