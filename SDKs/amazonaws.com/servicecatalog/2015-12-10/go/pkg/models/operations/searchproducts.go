// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SearchProductsXAmzTargetEnum
type SearchProductsXAmzTargetEnum string

const (
	SearchProductsXAmzTargetEnumAws242ServiceCatalogServiceSearchProducts SearchProductsXAmzTargetEnum = "AWS242ServiceCatalogService.SearchProducts"
)

func (e SearchProductsXAmzTargetEnum) ToPointer() *SearchProductsXAmzTargetEnum {
	return &e
}

func (e *SearchProductsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWS242ServiceCatalogService.SearchProducts":
		*e = SearchProductsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchProductsXAmzTargetEnum: %v", v)
	}
}

type SearchProductsRequest struct {
	// Pagination limit
	PageSize *string `queryParam:"style=form,explode=true,name=PageSize"`
	// Pagination token
	PageToken           *string                      `queryParam:"style=form,explode=true,name=PageToken"`
	SearchProductsInput shared.SearchProductsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          SearchProductsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type SearchProductsResponse struct {
	ContentType string
	// InvalidParametersException
	InvalidParametersException interface{}
	// Success
	SearchProductsOutput *shared.SearchProductsOutput
	StatusCode           int
	RawResponse          *http.Response
}
