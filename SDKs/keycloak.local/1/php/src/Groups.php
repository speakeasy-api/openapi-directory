<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Groups 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * deleteRealmGroupsId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdResponse
     */
	public function deleteRealmGroupsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmGroupsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Get group hierarchy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsResponse
     */
	public function getRealmGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups', \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GroupRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the groups counts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsCountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsCountResponse
     */
	public function getRealmGroupsCount(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsCountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsCountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/count', \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsCountRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsCountRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsCountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRealmGroupsCount2XXApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getRealmGroupsId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdResponse
     */
	public function getRealmGroupsId(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}', \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GroupRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdManagementPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdManagementPermissionsResponse
     */
	public function getRealmGroupsIdManagementPermissions(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdManagementPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdManagementPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}/management/permissions', \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdManagementPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdManagementPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managementPermissionReference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagementPermissionReference', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get users   Returns a list of users, filtered according to query parameters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdMembersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdMembersResponse
     */
	public function getRealmGroupsIdMembers(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdMembersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}/members', \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdMembersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdMembersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupsIdMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\UserRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * create or add a top level realm groupSet or create child.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsResponse
     */
	public function postRealmGroups(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups', \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "groupRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Set or create child.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdChildrenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdChildrenResponse
     */
	public function postRealmGroupsIdChildren(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdChildrenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdChildrenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}/children', \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdChildrenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "groupRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmGroupsIdChildrenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Update group, ignores subgroups.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmGroupsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmGroupsIdResponse
     */
	public function putRealmGroupsId(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmGroupsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmGroupsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}', \OpenAPI\OpenAPI\Models\Operations\PutRealmGroupsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "groupRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmGroupsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmGroupsIdManagementPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmGroupsIdManagementPermissionsResponse
     */
	public function putRealmGroupsIdManagementPermissions(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmGroupsIdManagementPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmGroupsIdManagementPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/groups/{id}/management/permissions', \OpenAPI\OpenAPI\Models\Operations\PutRealmGroupsIdManagementPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "managementPermissionReference", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmGroupsIdManagementPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managementPermissionReference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagementPermissionReference', 'json');
            }
        }

        return $response;
    }
}