// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateBatchPredictionXAmzTargetEnum
type UpdateBatchPredictionXAmzTargetEnum string

const (
	UpdateBatchPredictionXAmzTargetEnumAmazonMl20141212UpdateBatchPrediction UpdateBatchPredictionXAmzTargetEnum = "AmazonML_20141212.UpdateBatchPrediction"
)

func (e *UpdateBatchPredictionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonML_20141212.UpdateBatchPrediction":
		*e = UpdateBatchPredictionXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateBatchPredictionXAmzTargetEnum: %s", s)
	}
}

type UpdateBatchPredictionRequest struct {
	UpdateBatchPredictionInput shared.UpdateBatchPredictionInput   `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 UpdateBatchPredictionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateBatchPredictionResponse struct {
	ContentType string
	// InternalServerException
	InternalServerException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// Success
	UpdateBatchPredictionOutput *shared.UpdateBatchPredictionOutput
}
