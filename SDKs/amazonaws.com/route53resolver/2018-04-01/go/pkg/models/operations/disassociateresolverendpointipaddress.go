// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DisassociateResolverEndpointIPAddressXAmzTargetEnum
type DisassociateResolverEndpointIPAddressXAmzTargetEnum string

const (
	DisassociateResolverEndpointIPAddressXAmzTargetEnumRoute53ResolverDisassociateResolverEndpointIPAddress DisassociateResolverEndpointIPAddressXAmzTargetEnum = "Route53Resolver.DisassociateResolverEndpointIpAddress"
)

func (e *DisassociateResolverEndpointIPAddressXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Route53Resolver.DisassociateResolverEndpointIpAddress":
		*e = DisassociateResolverEndpointIPAddressXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DisassociateResolverEndpointIPAddressXAmzTargetEnum: %s", s)
	}
}

type DisassociateResolverEndpointIPAddressHeaders struct {
	XAmzAlgorithm     *string                                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DisassociateResolverEndpointIPAddressXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DisassociateResolverEndpointIPAddressRequest struct {
	Headers DisassociateResolverEndpointIPAddressHeaders
	Request shared.DisassociateResolverEndpointIPAddressRequest `request:"mediaType=application/json"`
}

type DisassociateResolverEndpointIPAddressResponse struct {
	ContentType string
	// Success
	DisassociateResolverEndpointIPAddressResponse *shared.DisassociateResolverEndpointIPAddressResponse
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceExistsException
	ResourceExistsException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
