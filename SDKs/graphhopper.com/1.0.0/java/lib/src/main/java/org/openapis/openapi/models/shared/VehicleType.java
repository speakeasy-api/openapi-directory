/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class VehicleType {
    /**
     * Specifies an array of capacity dimension values which need to be int values. For example, if there are two dimensions such as volume and weight then it needs to be defined as [ 1000, 300 ] assuming a maximum volume of 1000 and a maximum weight of 300.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capacity")
    public Integer[] capacity;

    public VehicleType withCapacity(Integer[] capacity) {
        this.capacity = capacity;
        return this;
    }
    
    /**
     * Specifies whether traffic should be considered. if "tomtom" is used and this is false, free flow travel times from "tomtom" are calculated. If this is true, historical traffic info are used. We do not yet have traffic data for "openstreetmap", thus, setting this true has no effect at all.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consider_traffic")
    public Boolean considerTraffic;

    public VehicleType withConsiderTraffic(Boolean considerTraffic) {
        this.considerTraffic = considerTraffic;
        return this;
    }
    
    /**
     * **_BETA feature_**! Cost parameter vehicle activation, i.e. fixed costs per vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cost_per_activation")
    public Double costPerActivation;

    public VehicleType withCostPerActivation(Double costPerActivation) {
        this.costPerActivation = costPerActivation;
        return this;
    }
    
    /**
     * **_BETA feature_**! Cost parameter per distance unit, here meter is used
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cost_per_meter")
    public Double costPerMeter;

    public VehicleType withCostPerMeter(Double costPerMeter) {
        this.costPerMeter = costPerMeter;
        return this;
    }
    
    /**
     * **_BETA feature_**! Cost parameter per time unit, here second is used
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cost_per_second")
    public Double costPerSecond;

    public VehicleType withCostPerSecond(Double costPerSecond) {
        this.costPerSecond = costPerSecond;
        return this;
    }
    
    /**
     * Specifies the network data provider. Either use [`openstreetmap`](#section/Map-Data-and-Routing-Profiles/OpenStreetMap) (default) or [`tomtom`](#section/Map-Data-and-Routing-Profiles/TomTom) (add-on required).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network_data_provider")
    public VehicleTypeNetworkDataProviderEnum networkDataProvider;

    public VehicleType withNetworkDataProvider(VehicleTypeNetworkDataProviderEnum networkDataProvider) {
        this.networkDataProvider = networkDataProvider;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile")
    public VehicleTypeProfileEnum profile;

    public VehicleType withProfile(VehicleTypeProfileEnum profile) {
        this.profile = profile;
        return this;
    }
    
    /**
     * Specifies a service time factor for this vehicle type. If the vehicle/driver that uses this type is able to conduct the service as double as fast as it is determined in the corresponding service or shipment then set it to 0.5.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_time_factor")
    public Double serviceTimeFactor;

    public VehicleType withServiceTimeFactor(Double serviceTimeFactor) {
        this.serviceTimeFactor = serviceTimeFactor;
        return this;
    }
    
    /**
     * Specifies a speed factor for this vehicle type. If the vehicle that uses this type needs to be only half as fast as what is actually calculated with our routing engine then set the speed factor to 0.5.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("speed_factor")
    public Double speedFactor;

    public VehicleType withSpeedFactor(Double speedFactor) {
        this.speedFactor = speedFactor;
        return this;
    }
    
    /**
     * Specifies the id of the vehicle type. If a vehicle needs to be of this type, it should refer to this with its type_id attribute.
     */
    @JsonProperty("type_id")
    public String typeId;

    public VehicleType withTypeId(String typeId) {
        this.typeId = typeId;
        return this;
    }
    
    public VehicleType(@JsonProperty("type_id") String typeId) {
        this.typeId = typeId;
  }
}
