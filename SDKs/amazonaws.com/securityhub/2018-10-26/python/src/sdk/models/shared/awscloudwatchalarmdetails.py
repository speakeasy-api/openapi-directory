"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awscloudwatchalarmdimensionsdetails as shared_awscloudwatchalarmdimensionsdetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsCloudWatchAlarmDetails:
    r"""Specifies an alarm and associates it with the specified metric or metric math expression."""
    
    actions_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActionsEnabled'), 'exclude': lambda f: f is None }})  
    alarm_actions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlarmActions'), 'exclude': lambda f: f is None }})  
    alarm_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlarmArn'), 'exclude': lambda f: f is None }})  
    alarm_configuration_updated_timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlarmConfigurationUpdatedTimestamp'), 'exclude': lambda f: f is None }})  
    alarm_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlarmDescription'), 'exclude': lambda f: f is None }})  
    alarm_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlarmName'), 'exclude': lambda f: f is None }})  
    comparison_operator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ComparisonOperator'), 'exclude': lambda f: f is None }})  
    datapoints_to_alarm: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatapointsToAlarm'), 'exclude': lambda f: f is None }})  
    dimensions: Optional[list[shared_awscloudwatchalarmdimensionsdetails.AwsCloudWatchAlarmDimensionsDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Dimensions'), 'exclude': lambda f: f is None }})  
    evaluate_low_sample_count_percentile: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EvaluateLowSampleCountPercentile'), 'exclude': lambda f: f is None }})  
    evaluation_periods: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EvaluationPeriods'), 'exclude': lambda f: f is None }})  
    extended_statistic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtendedStatistic'), 'exclude': lambda f: f is None }})  
    insufficient_data_actions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InsufficientDataActions'), 'exclude': lambda f: f is None }})  
    metric_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetricName'), 'exclude': lambda f: f is None }})  
    namespace: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Namespace'), 'exclude': lambda f: f is None }})  
    ok_actions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OkActions'), 'exclude': lambda f: f is None }})  
    period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Period'), 'exclude': lambda f: f is None }})  
    statistic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Statistic'), 'exclude': lambda f: f is None }})  
    threshold: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Threshold'), 'exclude': lambda f: f is None }})  
    threshold_metric_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThresholdMetricId'), 'exclude': lambda f: f is None }})  
    treat_missing_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TreatMissingData'), 'exclude': lambda f: f is None }})  
    unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unit'), 'exclude': lambda f: f is None }})  
    