// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetTrackingSnippetQueryParams struct {
	// The domain you want to receive a snippet for
	Domain string `queryParam:"style=form,explode=true,name=domain"`
}

type GetTrackingSnippetRequest struct {
	QueryParams GetTrackingSnippetQueryParams
}

type GetTrackingSnippet500ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// GetTrackingSnippet500ApplicationJSON - The message specifies what is done
type GetTrackingSnippet500ApplicationJSON struct {
	Message string                                   `json:"message"`
	Meta    GetTrackingSnippet500ApplicationJSONMeta `json:"meta"`
}

type GetTrackingSnippet429ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// GetTrackingSnippet429ApplicationJSON - The message specifies what is done
type GetTrackingSnippet429ApplicationJSON struct {
	Message string                                   `json:"message"`
	Meta    GetTrackingSnippet429ApplicationJSONMeta `json:"meta"`
}

type GetTrackingSnippet404ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// GetTrackingSnippet404ApplicationJSON - The message specifies what is done
type GetTrackingSnippet404ApplicationJSON struct {
	Message string                                   `json:"message"`
	Meta    GetTrackingSnippet404ApplicationJSONMeta `json:"meta"`
}

type GetTrackingSnippet403ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// GetTrackingSnippet403ApplicationJSON - The message specifies what is done
type GetTrackingSnippet403ApplicationJSON struct {
	Message string                                   `json:"message"`
	Meta    GetTrackingSnippet403ApplicationJSONMeta `json:"meta"`
}

type GetTrackingSnippet401ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// GetTrackingSnippet401ApplicationJSON - The message specifies what is done
type GetTrackingSnippet401ApplicationJSON struct {
	Message string                                   `json:"message"`
	Meta    GetTrackingSnippet401ApplicationJSONMeta `json:"meta"`
}

// GetTrackingSnippet400ApplicationJSONErrorsParameters - All query-, header- and path- parameters that seemed incorrect
type GetTrackingSnippet400ApplicationJSONErrorsParameters struct {
	Header map[string]string `json:"header,omitempty"`
	Path   map[string]string `json:"path,omitempty"`
	Query  map[string]string `json:"query,omitempty"`
}

// GetTrackingSnippet400ApplicationJSONErrors - Map that sums up all received values that seemed incorrect
type GetTrackingSnippet400ApplicationJSONErrors struct {
	// All input fields that seemed incorrect
	Fields map[string]string `json:"fields,omitempty"`
	// All query-, header- and path- parameters that seemed incorrect
	Parameters *GetTrackingSnippet400ApplicationJSONErrorsParameters `json:"parameters,omitempty"`
}

type GetTrackingSnippet400ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// GetTrackingSnippet400ApplicationJSON - The message specifies what is done
type GetTrackingSnippet400ApplicationJSON struct {
	// Map that sums up all received values that seemed incorrect
	Errors  GetTrackingSnippet400ApplicationJSONErrors `json:"errors"`
	Message string                                     `json:"message"`
	Meta    GetTrackingSnippet400ApplicationJSONMeta   `json:"meta"`
}

// GetTrackingSnippet200ApplicationJSONData - A snippet
type GetTrackingSnippet200ApplicationJSONData struct {
	Domain  string `json:"domain"`
	Snippet string `json:"snippet"`
}

type GetTrackingSnippet200ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// GetTrackingSnippet200ApplicationJSON - The basic response containing the unique ID of the request and the response status
type GetTrackingSnippet200ApplicationJSON struct {
	// A snippet
	Data GetTrackingSnippet200ApplicationJSONData `json:"data"`
	Meta GetTrackingSnippet200ApplicationJSONMeta `json:"meta"`
}

type GetTrackingSnippetResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Snippet
	GetTrackingSnippet200ApplicationJSONObject *GetTrackingSnippet200ApplicationJSON
	// Bad request, some fields or parameters are incorrect
	GetTrackingSnippet400ApplicationJSONObject *GetTrackingSnippet400ApplicationJSON
	// No API Key was provided or the key is not authorised to perform the action
	GetTrackingSnippet401ApplicationJSONObject *GetTrackingSnippet401ApplicationJSON
	// The API Key provided is currently not enabled
	GetTrackingSnippet403ApplicationJSONObject *GetTrackingSnippet403ApplicationJSON
	// Not found
	GetTrackingSnippet404ApplicationJSONObject *GetTrackingSnippet404ApplicationJSON
	// Too many API requests were send
	GetTrackingSnippet429ApplicationJSONObject *GetTrackingSnippet429ApplicationJSON
	// An unexpected error occurred
	GetTrackingSnippet500ApplicationJSONObject *GetTrackingSnippet500ApplicationJSON
}
