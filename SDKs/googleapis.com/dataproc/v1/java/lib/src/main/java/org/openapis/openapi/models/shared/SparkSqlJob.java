/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SparkSqlJob - A Dataproc job for running Apache Spark SQL (https://spark.apache.org/sql/) queries.
 */
public class SparkSqlJob {
    /**
     * Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jarFileUris")
    public String[] jarFileUris;

    public SparkSqlJob withJarFileUris(String[] jarFileUris) {
        this.jarFileUris = jarFileUris;
        return this;
    }
    
    /**
     * The runtime logging config of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loggingConfig")
    public LoggingConfig loggingConfig;

    public SparkSqlJob withLoggingConfig(LoggingConfig loggingConfig) {
        this.loggingConfig = loggingConfig;
        return this;
    }
    
    /**
     * Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    public java.util.Map<String, String> properties;

    public SparkSqlJob withProperties(java.util.Map<String, String> properties) {
        this.properties = properties;
        return this;
    }
    
    /**
     * The HCFS URI of the script that contains SQL queries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queryFileUri")
    public String queryFileUri;

    public SparkSqlJob withQueryFileUri(String queryFileUri) {
        this.queryFileUri = queryFileUri;
        return this;
    }
    
    /**
     * A list of queries to run on a cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queryList")
    public QueryList queryList;

    public SparkSqlJob withQueryList(QueryList queryList) {
        this.queryList = queryList;
        return this;
    }
    
    /**
     * Optional. Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scriptVariables")
    public java.util.Map<String, String> scriptVariables;

    public SparkSqlJob withScriptVariables(java.util.Map<String, String> scriptVariables) {
        this.scriptVariables = scriptVariables;
        return this;
    }
    
    public SparkSqlJob(){}
}
