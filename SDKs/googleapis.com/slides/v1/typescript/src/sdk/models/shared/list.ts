/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { NestingLevel } from "./nestinglevel";
import { Expose, Transform } from "class-transformer";

/**
 * A List describes the look and feel of bullets belonging to paragraphs associated with a list. A paragraph that is part of a list has an implicit reference to that list's ID.
 */
export class List extends SpeakeasyBase {
  /**
   * The ID of the list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "listId" })
  listId?: string;

  /**
   * A map of nesting levels to the properties of bullets at the associated level. A list has at most nine levels of nesting, so the possible values for the keys of this map are 0 through 8, inclusive.
   */
  @SpeakeasyMetadata({ elemType: NestingLevel })
  @Expose({ name: "nestingLevel" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, NestingLevel> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], NestingLevel);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  nestingLevel?: Record<string, NestingLevel>;
}
