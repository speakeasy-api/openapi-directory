"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RewardProgramResourceAttributesBudgetUnitEnum(str, Enum):
    r"""Unit of the budget for the reard program."""
    DOLLAR = 'dollar'
    POINT = 'point'
    CREDIT = 'credit'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardProgramResourceAttributes:
    
    budget_value: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('budget_value') }})
    r"""Value of the budget for the reward program. (Must be greater than 0)"""  
    end_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_at') }})
    r"""Date at which the reward program ends. (Must be after the start_at)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the reward program"""  
    start_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_at') }})
    r"""Date at which the reward program starts."""  
    budget_unit: Optional[RewardProgramResourceAttributesBudgetUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('budget_unit'), 'exclude': lambda f: f is None }})
    r"""Unit of the budget for the reard program."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the reward program - designed to be a comprehensive text description"""  
    duration_active: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_active'), 'exclude': lambda f: f is None }})
    r"""Number of days that a program can be active after it has been activated for a patient. (Must be greater than 0)"""  
    frozen: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frozen'), 'exclude': lambda f: f is None }})
    r"""If true, the reward program cannot be activated for a patient and new rewards cannot be created for the program."""  
    fulfill_as_earned: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fulfill_as_earned'), 'exclude': lambda f: f is None }})
    r"""If true, the rewards created for a patient for the program can be fulfulled as they are earned. If false, the rewards should only be fulfilled when the program is deactivated."""  
    tagline: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagline'), 'exclude': lambda f: f is None }})
    r"""Tagline of the reward program - designed to be one line"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardProgramResourceRelationshipsGroupData:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardProgramResourceRelationshipsGroup:
    
    data: RewardProgramResourceRelationshipsGroupData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardProgramResourceRelationships:
    
    group: RewardProgramResourceRelationshipsGroup = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardProgramResource:
    
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    attributes: Optional[RewardProgramResourceAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    relationships: Optional[RewardProgramResourceRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    