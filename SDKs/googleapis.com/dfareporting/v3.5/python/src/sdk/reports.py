"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Reports:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dfareporting_reports_compatible_fields_query(self, request: operations.DfareportingReportsCompatibleFieldsQueryRequest, security: operations.DfareportingReportsCompatibleFieldsQuerySecurity) -> operations.DfareportingReportsCompatibleFieldsQueryResponse:
        r"""Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingReportsCompatibleFieldsQueryRequest, base_url, '/userprofiles/{profileId}/reports/compatiblefields/query', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "report", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingReportsCompatibleFieldsQueryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingReportsCompatibleFieldsQueryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompatibleFields])
                res.compatible_fields = out

        return res

    def dfareporting_reports_delete(self, request: operations.DfareportingReportsDeleteRequest, security: operations.DfareportingReportsDeleteSecurity) -> operations.DfareportingReportsDeleteResponse:
        r"""Deletes a report by its ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingReportsDeleteRequest, base_url, '/userprofiles/{profileId}/reports/{reportId}', request)
        
        query_params = utils.get_query_params(operations.DfareportingReportsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingReportsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dfareporting_reports_files_get(self, request: operations.DfareportingReportsFilesGetRequest, security: operations.DfareportingReportsFilesGetSecurity) -> operations.DfareportingReportsFilesGetResponse:
        r"""Retrieves a report file by its report ID and file ID. This method supports media download."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingReportsFilesGetRequest, base_url, '/userprofiles/{profileId}/reports/{reportId}/files/{fileId}', request)
        
        query_params = utils.get_query_params(operations.DfareportingReportsFilesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingReportsFilesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.File])
                res.file = out

        return res

    def dfareporting_reports_files_list(self, request: operations.DfareportingReportsFilesListRequest, security: operations.DfareportingReportsFilesListSecurity) -> operations.DfareportingReportsFilesListResponse:
        r"""Lists files for a report."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingReportsFilesListRequest, base_url, '/userprofiles/{profileId}/reports/{reportId}/files', request)
        
        query_params = utils.get_query_params(operations.DfareportingReportsFilesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingReportsFilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FileList])
                res.file_list = out

        return res

    def dfareporting_reports_get(self, request: operations.DfareportingReportsGetRequest, security: operations.DfareportingReportsGetSecurity) -> operations.DfareportingReportsGetResponse:
        r"""Retrieves a report by its ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingReportsGetRequest, base_url, '/userprofiles/{profileId}/reports/{reportId}', request)
        
        query_params = utils.get_query_params(operations.DfareportingReportsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingReportsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Report])
                res.report = out

        return res

    def dfareporting_reports_insert(self, request: operations.DfareportingReportsInsertRequest, security: operations.DfareportingReportsInsertSecurity) -> operations.DfareportingReportsInsertResponse:
        r"""Creates a report."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingReportsInsertRequest, base_url, '/userprofiles/{profileId}/reports', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "report", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingReportsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingReportsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Report])
                res.report = out

        return res

    def dfareporting_reports_list(self, request: operations.DfareportingReportsListRequest, security: operations.DfareportingReportsListSecurity) -> operations.DfareportingReportsListResponse:
        r"""Retrieves list of reports."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingReportsListRequest, base_url, '/userprofiles/{profileId}/reports', request)
        
        query_params = utils.get_query_params(operations.DfareportingReportsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingReportsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReportList])
                res.report_list = out

        return res

    def dfareporting_reports_patch(self, request: operations.DfareportingReportsPatchRequest, security: operations.DfareportingReportsPatchSecurity) -> operations.DfareportingReportsPatchResponse:
        r"""Updates an existing report. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingReportsPatchRequest, base_url, '/userprofiles/{profileId}/reports/{reportId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "report", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingReportsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingReportsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Report])
                res.report = out

        return res

    def dfareporting_reports_run(self, request: operations.DfareportingReportsRunRequest, security: operations.DfareportingReportsRunSecurity) -> operations.DfareportingReportsRunResponse:
        r"""Runs a report."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingReportsRunRequest, base_url, '/userprofiles/{profileId}/reports/{reportId}/run', request)
        
        query_params = utils.get_query_params(operations.DfareportingReportsRunRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingReportsRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.File])
                res.file = out

        return res

    def dfareporting_reports_update(self, request: operations.DfareportingReportsUpdateRequest, security: operations.DfareportingReportsUpdateSecurity) -> operations.DfareportingReportsUpdateResponse:
        r"""Updates a report."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingReportsUpdateRequest, base_url, '/userprofiles/{profileId}/reports/{reportId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "report", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingReportsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingReportsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Report])
                res.report = out

        return res

    