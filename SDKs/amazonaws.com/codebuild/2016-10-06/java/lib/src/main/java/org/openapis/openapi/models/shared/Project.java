/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Project - Information about a build project.
 */
public class Project {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arn")
    public String arn;
    public Project withArn(String arn) {
        this.arn = arn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("artifacts")
    public ProjectArtifacts artifacts;
    public Project withArtifacts(ProjectArtifacts artifacts) {
        this.artifacts = artifacts;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("badge")
    public ProjectBadge badge;
    public Project withBadge(ProjectBadge badge) {
        this.badge = badge;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buildBatchConfig")
    public ProjectBuildBatchConfig buildBatchConfig;
    public Project withBuildBatchConfig(ProjectBuildBatchConfig buildBatchConfig) {
        this.buildBatchConfig = buildBatchConfig;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cache")
    public ProjectCache cache;
    public Project withCache(ProjectCache cache) {
        this.cache = cache;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("concurrentBuildLimit")
    public Long concurrentBuildLimit;
    public Project withConcurrentBuildLimit(Long concurrentBuildLimit) {
        this.concurrentBuildLimit = concurrentBuildLimit;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created")
    public OffsetDateTime created;
    public Project withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Project withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptionKey")
    public String encryptionKey;
    public Project withEncryptionKey(String encryptionKey) {
        this.encryptionKey = encryptionKey;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environment")
    public ProjectEnvironment environment;
    public Project withEnvironment(ProjectEnvironment environment) {
        this.environment = environment;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileSystemLocations")
    public ProjectFileSystemLocation[] fileSystemLocations;
    public Project withFileSystemLocations(ProjectFileSystemLocation[] fileSystemLocations) {
        this.fileSystemLocations = fileSystemLocations;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastModified")
    public OffsetDateTime lastModified;
    public Project withLastModified(OffsetDateTime lastModified) {
        this.lastModified = lastModified;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logsConfig")
    public LogsConfig logsConfig;
    public Project withLogsConfig(LogsConfig logsConfig) {
        this.logsConfig = logsConfig;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Project withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * &lt;p&gt;Specifies the visibility of the project's builds. Possible values are:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;PUBLIC_READ&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The project builds are visible to the public.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;PRIVATE&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The project builds are not visible to the public.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projectVisibility")
    public ProjectVisibilityTypeEnum projectVisibility;
    public Project withProjectVisibility(ProjectVisibilityTypeEnum projectVisibility) {
        this.projectVisibility = projectVisibility;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publicProjectAlias")
    public String publicProjectAlias;
    public Project withPublicProjectAlias(String publicProjectAlias) {
        this.publicProjectAlias = publicProjectAlias;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queuedTimeoutInMinutes")
    public Long queuedTimeoutInMinutes;
    public Project withQueuedTimeoutInMinutes(Long queuedTimeoutInMinutes) {
        this.queuedTimeoutInMinutes = queuedTimeoutInMinutes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceAccessRole")
    public String resourceAccessRole;
    public Project withResourceAccessRole(String resourceAccessRole) {
        this.resourceAccessRole = resourceAccessRole;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondaryArtifacts")
    public ProjectArtifacts[] secondaryArtifacts;
    public Project withSecondaryArtifacts(ProjectArtifacts[] secondaryArtifacts) {
        this.secondaryArtifacts = secondaryArtifacts;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondarySourceVersions")
    public ProjectSourceVersion[] secondarySourceVersions;
    public Project withSecondarySourceVersions(ProjectSourceVersion[] secondarySourceVersions) {
        this.secondarySourceVersions = secondarySourceVersions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondarySources")
    public ProjectSource[] secondarySources;
    public Project withSecondarySources(ProjectSource[] secondarySources) {
        this.secondarySources = secondarySources;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceRole")
    public String serviceRole;
    public Project withServiceRole(String serviceRole) {
        this.serviceRole = serviceRole;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    public ProjectSource source;
    public Project withSource(ProjectSource source) {
        this.source = source;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceVersion")
    public String sourceVersion;
    public Project withSourceVersion(String sourceVersion) {
        this.sourceVersion = sourceVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public Tag[] tags;
    public Project withTags(Tag[] tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeoutInMinutes")
    public Long timeoutInMinutes;
    public Project withTimeoutInMinutes(Long timeoutInMinutes) {
        this.timeoutInMinutes = timeoutInMinutes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vpcConfig")
    public VpcConfig vpcConfig;
    public Project withVpcConfig(VpcConfig vpcConfig) {
        this.vpcConfig = vpcConfig;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhook")
    public Webhook webhook;
    public Project withWebhook(Webhook webhook) {
        this.webhook = webhook;
        return this;
    }
    
}
