"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import fileentity as shared_fileentity
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class PostFilesPathRequestBody:
    
    etags_etag: list[str] = dataclasses.field(metadata={'multipart_form': { 'field_name': 'etags[etag]' }})
    r"""etag identifier."""  
    etags_part: list[int] = dataclasses.field(metadata={'multipart_form': { 'field_name': 'etags[part]' }})
    r"""Part number."""  
    action: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'action' }})
    r"""The action to perform.  Can be `append`, `attachment`, `end`, `upload`, `put`, or may not exist"""  
    length: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'length' }})
    r"""Length of file."""  
    mkdir_parents: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'mkdir_parents' }})
    r"""Create parent directories if they do not exist?"""  
    part: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'part' }})
    r"""Part if uploading a part."""  
    parts: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'parts' }})
    r"""How many parts to fetch?"""  
    provided_mtime: Optional[datetime] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'provided_mtime' }})
    r"""User provided modification time."""  
    ref: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ref' }})  
    restart: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'restart' }})
    r"""File byte offset to restart from."""  
    size: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'size' }})
    r"""Size of file."""  
    structure: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'structure' }})
    r"""If copying folder, copy just the structure?"""  
    with_rename: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'with_rename' }})
    r"""Allow file rename instead of overwrite?"""  
    

@dataclasses.dataclass
class PostFilesPathRequest:
    
    path: str = dataclasses.field(metadata={'path_param': { 'field_name': 'path', 'style': 'simple', 'explode': False }})
    r"""Path to operate on."""  
    request_body: Optional[PostFilesPathRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'multipart/form-data' }})  
    

@dataclasses.dataclass
class PostFilesPathResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    file_entity: Optional[shared_fileentity.FileEntity] = dataclasses.field(default=None)
    r"""The Files object."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    