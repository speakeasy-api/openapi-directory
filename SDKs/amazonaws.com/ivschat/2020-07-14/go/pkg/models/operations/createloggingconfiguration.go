// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateLoggingConfigurationRequestBodyDestinationConfiguration - A complex type that describes a location where chat logs will be stored. Each member represents the configuration of one log destination. For logging, you define only one type of destination (for CloudWatch Logs, Kinesis Firehose, or S3).
type CreateLoggingConfigurationRequestBodyDestinationConfiguration struct {
	CloudWatchLogs *shared.CloudWatchLogsDestinationConfiguration `json:"cloudWatchLogs,omitempty"`
	Firehose       *shared.FirehoseDestinationConfiguration       `json:"firehose,omitempty"`
	S3             *shared.S3DestinationConfiguration             `json:"s3,omitempty"`
}

type CreateLoggingConfigurationRequestBody struct {
	// A complex type that describes a location where chat logs will be stored. Each member represents the configuration of one log destination. For logging, you define only one type of destination (for CloudWatch Logs, Kinesis Firehose, or S3).
	DestinationConfiguration CreateLoggingConfigurationRequestBodyDestinationConfiguration `json:"destinationConfiguration"`
	// Logging-configuration name. The value does not need to be unique.
	Name *string `json:"name,omitempty"`
	// Tags to attach to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS Resources</a> for details, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS Chat has no constraints on tags beyond what is documented there.
	Tags map[string]string `json:"tags,omitempty"`
}

type CreateLoggingConfigurationRequest struct {
	RequestBody       CreateLoggingConfigurationRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateLoggingConfigurationResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateLoggingConfigurationResponse *shared.CreateLoggingConfigurationResponse
	// PendingVerification
	PendingVerification interface{}
	StatusCode          int
	RawResponse         *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ValidationException
	ValidationException interface{}
}
