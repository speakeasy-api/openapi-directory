// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DescribeACLsQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// DescribeACLsXAmzTargetEnum
type DescribeACLsXAmzTargetEnum string

const (
	DescribeACLsXAmzTargetEnumAmazonMemoryDbDescribeAcLs DescribeACLsXAmzTargetEnum = "AmazonMemoryDB.DescribeACLs"
)

func (e *DescribeACLsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonMemoryDB.DescribeACLs":
		*e = DescribeACLsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeACLsXAmzTargetEnum: %s", s)
	}
}

type DescribeACLsHeaders struct {
	XAmzAlgorithm     *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeACLsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeACLsRequest struct {
	QueryParams DescribeACLsQueryParams
	Headers     DescribeACLsHeaders
	Request     shared.DescribeACLsRequest `request:"mediaType=application/json"`
}

type DescribeACLsResponse struct {
	// ACLNotFoundFault
	ACLNotFoundFault interface{}
	ContentType      string
	// Success
	DescribeACLsResponse *shared.DescribeACLsResponse
	// InvalidParameterCombinationException
	InvalidParameterCombinationException interface{}
	StatusCode                           int
	RawResponse                          *http.Response
}
