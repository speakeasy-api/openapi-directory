// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type VochseSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type VochseRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Enter Regno
	Regno string `json:"Regno"`
	// Enter Year
	Year string `json:"Year"`
	// Enter Exam Type
	Type string `json:"type"`
}

// VochseRequestBodyFormatEnum - The format of the certificate in response.
type VochseRequestBodyFormatEnum string

const (
	VochseRequestBodyFormatEnumPdf VochseRequestBodyFormatEnum = "pdf"
)

func (e VochseRequestBodyFormatEnum) ToPointer() *VochseRequestBodyFormatEnum {
	return &e
}

func (e *VochseRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = VochseRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VochseRequestBodyFormatEnum: %v", v)
	}
}

// VochseRequestBody - Request format
type VochseRequestBody struct {
	CertificateParameters *VochseRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema           `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format VochseRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Vochse504ApplicationJSONErrorEnum string

const (
	Vochse504ApplicationJSONErrorEnumGatewayTimeout Vochse504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Vochse504ApplicationJSONErrorEnum) ToPointer() *Vochse504ApplicationJSONErrorEnum {
	return &e
}

func (e *Vochse504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Vochse504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vochse504ApplicationJSONErrorEnum: %v", v)
	}
}

type Vochse504ApplicationJSONErrorDescriptionEnum string

const (
	Vochse504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Vochse504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Vochse504ApplicationJSONErrorDescriptionEnum) ToPointer() *Vochse504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vochse504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Vochse504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vochse504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vochse504ApplicationJSON - Gateway timeout
type Vochse504ApplicationJSON struct {
	Error            *Vochse504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vochse504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vochse503ApplicationJSONErrorEnum string

const (
	Vochse503ApplicationJSONErrorEnumServiceUnavailable Vochse503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Vochse503ApplicationJSONErrorEnum) ToPointer() *Vochse503ApplicationJSONErrorEnum {
	return &e
}

func (e *Vochse503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Vochse503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vochse503ApplicationJSONErrorEnum: %v", v)
	}
}

type Vochse503ApplicationJSONErrorDescriptionEnum string

const (
	Vochse503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Vochse503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Vochse503ApplicationJSONErrorDescriptionEnum) ToPointer() *Vochse503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vochse503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Vochse503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vochse503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vochse503ApplicationJSON - Service unavailable
type Vochse503ApplicationJSON struct {
	Error            *Vochse503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vochse503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vochse502ApplicationJSONErrorEnum string

const (
	Vochse502ApplicationJSONErrorEnumBadGatewy Vochse502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Vochse502ApplicationJSONErrorEnum) ToPointer() *Vochse502ApplicationJSONErrorEnum {
	return &e
}

func (e *Vochse502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Vochse502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vochse502ApplicationJSONErrorEnum: %v", v)
	}
}

type Vochse502ApplicationJSONErrorDescriptionEnum string

const (
	Vochse502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Vochse502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Vochse502ApplicationJSONErrorDescriptionEnum) ToPointer() *Vochse502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vochse502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Vochse502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vochse502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vochse502ApplicationJSON - Bad gateway
type Vochse502ApplicationJSON struct {
	Error            *Vochse502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vochse502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vochse500ApplicationJSONErrorEnum string

const (
	Vochse500ApplicationJSONErrorEnumInternalServerError Vochse500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Vochse500ApplicationJSONErrorEnum) ToPointer() *Vochse500ApplicationJSONErrorEnum {
	return &e
}

func (e *Vochse500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Vochse500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vochse500ApplicationJSONErrorEnum: %v", v)
	}
}

type Vochse500ApplicationJSONErrorDescriptionEnum string

const (
	Vochse500ApplicationJSONErrorDescriptionEnumInternalServerError Vochse500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Vochse500ApplicationJSONErrorDescriptionEnum) ToPointer() *Vochse500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vochse500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Vochse500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vochse500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vochse500ApplicationJSON - Internal server error
type Vochse500ApplicationJSON struct {
	Error            *Vochse500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vochse500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vochse404ApplicationJSONErrorEnum string

const (
	Vochse404ApplicationJSONErrorEnumRecordNotFound Vochse404ApplicationJSONErrorEnum = "record_not_found"
	Vochse404ApplicationJSONErrorEnumURLNotFound    Vochse404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Vochse404ApplicationJSONErrorEnum) ToPointer() *Vochse404ApplicationJSONErrorEnum {
	return &e
}

func (e *Vochse404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Vochse404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vochse404ApplicationJSONErrorEnum: %v", v)
	}
}

type Vochse404ApplicationJSONErrorDescriptionEnum string

const (
	Vochse404ApplicationJSONErrorDescriptionEnumNoRecordFound               Vochse404ApplicationJSONErrorDescriptionEnum = "No record found"
	Vochse404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Vochse404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Vochse404ApplicationJSONErrorDescriptionEnum) ToPointer() *Vochse404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vochse404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Vochse404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vochse404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vochse404ApplicationJSON - No record found
type Vochse404ApplicationJSON struct {
	Error            *Vochse404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vochse404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vochse401ApplicationJSONErrorEnum string

const (
	Vochse401ApplicationJSONErrorEnumInvalidAuthentication Vochse401ApplicationJSONErrorEnum = "invalid_authentication"
	Vochse401ApplicationJSONErrorEnumInvalidAuthorization  Vochse401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Vochse401ApplicationJSONErrorEnum) ToPointer() *Vochse401ApplicationJSONErrorEnum {
	return &e
}

func (e *Vochse401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Vochse401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vochse401ApplicationJSONErrorEnum: %v", v)
	}
}

type Vochse401ApplicationJSONErrorDescriptionEnum string

const (
	Vochse401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Vochse401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Vochse401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Vochse401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Vochse401ApplicationJSONErrorDescriptionEnum) ToPointer() *Vochse401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vochse401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Vochse401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vochse401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vochse401ApplicationJSON - Unauthorized access
type Vochse401ApplicationJSON struct {
	Error            *Vochse401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vochse401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vochse400ApplicationJSONErrorEnum string

const (
	Vochse400ApplicationJSONErrorEnumMissingParameter Vochse400ApplicationJSONErrorEnum = "missing_parameter"
	Vochse400ApplicationJSONErrorEnumInvalidParameter Vochse400ApplicationJSONErrorEnum = "invalid_parameter"
	Vochse400ApplicationJSONErrorEnumInvalidFormat    Vochse400ApplicationJSONErrorEnum = "invalid_format"
	Vochse400ApplicationJSONErrorEnumInvalidTxnid     Vochse400ApplicationJSONErrorEnum = "invalid_txnid"
	Vochse400ApplicationJSONErrorEnumInvalidConsentid Vochse400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Vochse400ApplicationJSONErrorEnum) ToPointer() *Vochse400ApplicationJSONErrorEnum {
	return &e
}

func (e *Vochse400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Vochse400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vochse400ApplicationJSONErrorEnum: %v", v)
	}
}

type Vochse400ApplicationJSONErrorDescriptionEnum string

const (
	Vochse400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Vochse400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Vochse400ApplicationJSONErrorDescriptionEnumBadRequest                              Vochse400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Vochse400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Vochse400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Vochse400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Vochse400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Vochse400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Vochse400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Vochse400ApplicationJSONErrorDescriptionEnum) ToPointer() *Vochse400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vochse400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Vochse400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vochse400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vochse400ApplicationJSON - Bad request
type Vochse400ApplicationJSON struct {
	Error            *Vochse400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vochse400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type VochseResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Vochse400ApplicationJSONObject *Vochse400ApplicationJSON
	// Unauthorized access
	Vochse401ApplicationJSONObject *Vochse401ApplicationJSON
	// No record found
	Vochse404ApplicationJSONObject *Vochse404ApplicationJSON
	// Internal server error
	Vochse500ApplicationJSONObject *Vochse500ApplicationJSON
	// Bad gateway
	Vochse502ApplicationJSONObject *Vochse502ApplicationJSON
	// Service unavailable
	Vochse503ApplicationJSONObject *Vochse503ApplicationJSON
	// Gateway timeout
	Vochse504ApplicationJSONObject *Vochse504ApplicationJSON
}
