// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeletePipelineXAmzTargetEnum
type DeletePipelineXAmzTargetEnum string

const (
	DeletePipelineXAmzTargetEnumCodePipeline20150709DeletePipeline DeletePipelineXAmzTargetEnum = "CodePipeline_20150709.DeletePipeline"
)

func (e *DeletePipelineXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodePipeline_20150709.DeletePipeline":
		*e = DeletePipelineXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletePipelineXAmzTargetEnum: %s", s)
	}
}

type DeletePipelineRequest struct {
	DeletePipelineInput shared.DeletePipelineInput   `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          DeletePipelineXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeletePipelineResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	StatusCode                      int
	RawResponse                     *http.Response
	// ValidationException
	ValidationException interface{}
}
