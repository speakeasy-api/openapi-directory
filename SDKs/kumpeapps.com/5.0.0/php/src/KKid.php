<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class KKid 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * returns allowance balance and allowance transactions
     * 
     * By passing in the appropriate options, you can view allowance balance and allowance transactions for a given user provided that they are within the masterID account of the authenticated user.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidAllowanceGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidAllowanceGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidAllowanceGetResponse
     */
	public function kkidAllowanceGet(
        \OpenAPI\OpenAPI\Models\Operations\KkidAllowanceGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KkidAllowanceGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidAllowanceGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/allowance');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidAllowanceGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidAllowanceGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->allowance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Allowance', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }
        else if ($httpResponse->getStatusCode() === 206) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodata = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Nodata', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 405) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndFive', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 412) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndTwelve = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndTwelve', 'json');
            }
        }

        return $response;
    }
	
    /**
     * adds new allowance transaction to kidUserID
     * 
     * By passing in the appropriate options, you can add an allowance transaction to a given user.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidAllowancePostRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidAllowancePostSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidAllowancePostResponse
     */
	public function kkidAllowancePost(
        \OpenAPI\OpenAPI\Models\Operations\KkidAllowancePostRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KkidAllowancePostSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidAllowancePostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/allowance');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidAllowancePostRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidAllowancePostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->success = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Success', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }
        else if ($httpResponse->getStatusCode() === 206) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodata = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Nodata', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 405) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndFive', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 412) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndTwelve = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndTwelve', 'json');
            }
        }

        return $response;
    }
	
    /**
     * subscribes/unsubscribes/registers for apns push notifications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidApnsPostRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidApnsPostSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidApnsPostResponse
     */
	public function kkidApnsPost(
        \OpenAPI\OpenAPI\Models\Operations\KkidApnsPostRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KkidApnsPostSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidApnsPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/apns');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidApnsPostRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidApnsPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->success = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Success', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }
        else if ($httpResponse->getStatusCode() === 206) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodata = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Nodata', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 405) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndFive', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 412) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndTwelve = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndTwelve', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deletes chore for given chore id
     * 
     * By passing in the appropriate options, you can delete a chore for the given chore id under authenticated user's master account
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidChorelistDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidChorelistDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidChorelistDeleteResponse
     */
	public function kkidChorelistDelete(
        \OpenAPI\OpenAPI\Models\Operations\KkidChorelistDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KkidChorelistDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidChorelistDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/chorelist');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidChorelistDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidChorelistDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->success = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Success', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 409) {
        }
        else if ($httpResponse->getStatusCode() === 206) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodata = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Nodata', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 405) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndFive', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 412) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndTwelve = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndTwelve', 'json');
            }
        }

        return $response;
    }
	
    /**
     * returns list of chores for given user
     * 
     * By passing in the appropriate options, you can search for
     * chores assigned to a given user within the authenticated user's master account
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidChorelistGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidChorelistGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidChorelistGetResponse
     */
	public function kkidChorelistGet(
        \OpenAPI\OpenAPI\Models\Operations\KkidChorelistGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KkidChorelistGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidChorelistGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/chorelist');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidChorelistGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidChorelistGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chorelist = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Chorelist', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }
        else if ($httpResponse->getStatusCode() === 206) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodata = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Nodata', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 405) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndFive', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 412) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndTwelve = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndTwelve', 'json');
            }
        }

        return $response;
    }
	
    /**
     * adds chore for given user
     * 
     * By passing in the appropriate options, you can add a chore to given kid username under authenticated user's master account
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidChorelistPostRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidChorelistPostSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidChorelistPostResponse
     */
	public function kkidChorelistPost(
        \OpenAPI\OpenAPI\Models\Operations\KkidChorelistPostRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KkidChorelistPostSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidChorelistPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/chorelist');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidChorelistPostRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidChorelistPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->success = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Success', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 409) {
        }
        else if ($httpResponse->getStatusCode() === 206) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodata = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Nodata', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 405) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndFive', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 412) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndTwelve = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndTwelve', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updates chore for given chore id
     * 
     * By passing in the appropriate options, you can update the fields of a specific core within the authenticated user's master account
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidChorelistPutRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidChorelistPutSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidChorelistPutResponse
     */
	public function kkidChorelistPut(
        \OpenAPI\OpenAPI\Models\Operations\KkidChorelistPutRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KkidChorelistPutSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidChorelistPutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/chorelist');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidChorelistPutRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidChorelistPutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->success = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Success', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }
        else if ($httpResponse->getStatusCode() === 206) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodata = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Nodata', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 405) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndFive', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 412) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndTwelve = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndTwelve', 'json');
            }
        }

        return $response;
    }
	
    /**
     * adds new master user account
     * 
     * By passing in the appropriate variables this method creates a new user with master account access. (The use of this method is restricted to Superusers ONLY)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidMasteruserPostRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidMasteruserPostSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidMasteruserPostResponse
     */
	public function kkidMasteruserPost(
        \OpenAPI\OpenAPI\Models\Operations\KkidMasteruserPostRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KkidMasteruserPostSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidMasteruserPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/masteruser');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidMasteruserPostRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidMasteruserPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addUserResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AddUserResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 409) {
        }
        else if ($httpResponse->getStatusCode() === 405) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndFive', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create Share Link
     * 
     * Create share link
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidShareGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidShareGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidShareGetResponse
     */
	public function kkidShareGet(
        \OpenAPI\OpenAPI\Models\Operations\KkidShareGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KkidShareGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidShareGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/share');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidShareGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidShareGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->twoHundredAndOneShare = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TwoHundredAndOneShare', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets user info
     * 
     * Gets user info for authenticated user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidUserGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidUserGetResponse
     */
	public function kkidUserGet(
        \OpenAPI\OpenAPI\Models\Operations\KkidUserGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidUserGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/user');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidUserGetRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidUserGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userlist = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Userlist', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deletes user
     * 
     * By passing in the appropriate variables this method deletes the specified user. (This function is restricted to Superusers ONLY)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidUserlistDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidUserlistDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidUserlistDeleteResponse
     */
	public function kkidUserlistDelete(
        \OpenAPI\OpenAPI\Models\Operations\KkidUserlistDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KkidUserlistDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidUserlistDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/userlist');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidUserlistDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidUserlistDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 409) {
        }
        else if ($httpResponse->getStatusCode() === 405) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndFive', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 412) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndTwelve = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndTwelve', 'json');
            }
        }

        return $response;
    }
	
    /**
     * returns list of users
     * 
     * By passing in the appropriate options, you can search for
     * users within the authenticated user's master account
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidUserlistGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidUserlistGetResponse
     */
	public function kkidUserlistGet(
        \OpenAPI\OpenAPI\Models\Operations\KkidUserlistGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidUserlistGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/userlist');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidUserlistGetRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidUserlistGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userlist = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Userlist', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }
        else if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodata = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Nodata', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 405) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndFive', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 412) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndTwelve = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndTwelve', 'json');
            }
        }

        return $response;
    }
	
    /**
     * adds new child user
     * 
     * By passing in the appropriate variables this method creates a new user and assigns it to the master account of the authenticated user. By default this user will have chores and allowance access.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidUserlistPostRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidUserlistPostSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidUserlistPostResponse
     */
	public function kkidUserlistPost(
        \OpenAPI\OpenAPI\Models\Operations\KkidUserlistPostRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KkidUserlistPostSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidUserlistPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/userlist');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidUserlistPostRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidUserlistPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addUserResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AddUserResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 409) {
        }
        else if ($httpResponse->getStatusCode() === 405) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndFive', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 412) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndTwelve = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndTwelve', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updates user
     * 
     * By passing in the appropriate variables this method updates the user's profile
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidUserlistPutRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidUserlistPutResponse
     */
	public function kkidUserlistPut(
        \OpenAPI\OpenAPI\Models\Operations\KkidUserlistPutRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidUserlistPutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/userlist');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidUserlistPutRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidUserlistPutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addUserResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AddUserResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 409) {
        }
        else if ($httpResponse->getStatusCode() === 405) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndFive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndFive', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 412) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndTwelve = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FourHundredAndTwelve', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete item from wishlist
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidWishlistDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidWishlistDeleteResponse
     */
	public function kkidWishlistDelete(
        \OpenAPI\OpenAPI\Models\Operations\KkidWishlistDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidWishlistDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/wishlist');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidWishlistDeleteRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidWishlistDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->success = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Success', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of wishlist items
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidWishlistGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidWishlistGetResponse
     */
	public function kkidWishlistGet(
        \OpenAPI\OpenAPI\Models\Operations\KkidWishlistGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidWishlistGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/wishlist');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidWishlistGetRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidWishlistGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wishlist = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Wishlist', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add item to kid's wishlist
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidWishlistPostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidWishlistPostResponse
     */
	public function kkidWishlistPost(
        \OpenAPI\OpenAPI\Models\Operations\KkidWishlistPostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidWishlistPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/wishlist');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidWishlistPostRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidWishlistPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->success = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Success', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update item on kid's wishlist
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KkidWishlistPutRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\KkidWishlistPutResponse
     */
	public function kkidWishlistPut(
        \OpenAPI\OpenAPI\Models\Operations\KkidWishlistPutRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\KkidWishlistPutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/kkid/wishlist');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KkidWishlistPutRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KkidWishlistPutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->success = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Success', 'json');
            }
        }

        return $response;
    }
}