"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import tfl_api_presentation_entities_journeyplanner_journeyfare as shared_tfl_api_presentation_entities_journeyplanner_journeyfare
from ..shared import tfl_api_presentation_entities_journeyplanner_leg as shared_tfl_api_presentation_entities_journeyplanner_leg
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesJourneyPlannerJourney:
    r"""Object that represents an end to end journey (see schematic)."""
    
    arrival_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arrivalDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})  
    fare: Optional[shared_tfl_api_presentation_entities_journeyplanner_journeyfare.TflAPIPresentationEntitiesJourneyPlannerJourneyFare] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fare'), 'exclude': lambda f: f is None }})  
    legs: Optional[list[shared_tfl_api_presentation_entities_journeyplanner_leg.TflAPIPresentationEntitiesJourneyPlannerLeg]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legs'), 'exclude': lambda f: f is None }})  
    start_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    