// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RegisterWebhookWithThirdPartyXAmzTargetEnum
type RegisterWebhookWithThirdPartyXAmzTargetEnum string

const (
	RegisterWebhookWithThirdPartyXAmzTargetEnumCodePipeline20150709RegisterWebhookWithThirdParty RegisterWebhookWithThirdPartyXAmzTargetEnum = "CodePipeline_20150709.RegisterWebhookWithThirdParty"
)

func (e *RegisterWebhookWithThirdPartyXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodePipeline_20150709.RegisterWebhookWithThirdParty":
		*e = RegisterWebhookWithThirdPartyXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterWebhookWithThirdPartyXAmzTargetEnum: %s", s)
	}
}

type RegisterWebhookWithThirdPartyHeaders struct {
	XAmzAlgorithm     *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        RegisterWebhookWithThirdPartyXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type RegisterWebhookWithThirdPartyRequest struct {
	Headers RegisterWebhookWithThirdPartyHeaders
	Request shared.RegisterWebhookWithThirdPartyInput `request:"mediaType=application/json"`
}

type RegisterWebhookWithThirdPartyResponse struct {
	ContentType string
	// Success
	RegisterWebhookWithThirdPartyOutput map[string]interface{}
	StatusCode                          int
	RawResponse                         *http.Response
	// ValidationException
	ValidationException interface{}
	// WebhookNotFoundException
	WebhookNotFoundException interface{}
}
