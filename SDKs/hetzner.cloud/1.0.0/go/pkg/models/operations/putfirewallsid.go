// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PutFirewallsIDPathParams struct {
	// ID of the resource
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

type PutFirewallsIDUpdateFirewallRequest struct {
	// User-defined labels (key-value pairs)
	Labels map[string]interface{} `json:"labels,omitempty"`
	// New Firewall name
	Name *string `json:"name,omitempty"`
}

type PutFirewallsIDRequest struct {
	PathParams PutFirewallsIDPathParams
	Request    *PutFirewallsIDUpdateFirewallRequest `request:"mediaType=application/json"`
}

type PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesServer struct {
	// ID of the Resource
	ID int64 `json:"id"`
}

// PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum - Type of resource referenced
type PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum string

const (
	PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnumServer PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum = "server"
)

func (e *PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "server":
		*e = PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum: %s", s)
	}
}

type PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResources struct {
	Server *PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesServer `json:"server,omitempty"`
	// Type of resource referenced
	Type *PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum `json:"type,omitempty"`
}

type PutFirewallsIDFirewallResponseFirewallAppliedToLabelSelector struct {
	// Label selector
	Selector string `json:"selector"`
}

type PutFirewallsIDFirewallResponseFirewallAppliedToServer struct {
	// ID of the Resource
	ID int64 `json:"id"`
}

// PutFirewallsIDFirewallResponseFirewallAppliedToTypeEnum - Type of resource referenced
type PutFirewallsIDFirewallResponseFirewallAppliedToTypeEnum string

const (
	PutFirewallsIDFirewallResponseFirewallAppliedToTypeEnumServer        PutFirewallsIDFirewallResponseFirewallAppliedToTypeEnum = "server"
	PutFirewallsIDFirewallResponseFirewallAppliedToTypeEnumLabelSelector PutFirewallsIDFirewallResponseFirewallAppliedToTypeEnum = "label_selector"
)

func (e *PutFirewallsIDFirewallResponseFirewallAppliedToTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "server":
		fallthrough
	case "label_selector":
		*e = PutFirewallsIDFirewallResponseFirewallAppliedToTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallsIDFirewallResponseFirewallAppliedToTypeEnum: %s", s)
	}
}

type PutFirewallsIDFirewallResponseFirewallAppliedTo struct {
	AppliedToResources []PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResources `json:"applied_to_resources,omitempty"`
	LabelSelector      *PutFirewallsIDFirewallResponseFirewallAppliedToLabelSelector       `json:"label_selector,omitempty"`
	Server             *PutFirewallsIDFirewallResponseFirewallAppliedToServer              `json:"server,omitempty"`
	// Type of resource referenced
	Type PutFirewallsIDFirewallResponseFirewallAppliedToTypeEnum `json:"type"`
}

// PutFirewallsIDFirewallResponseFirewallRuleDirectionEnum - Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
type PutFirewallsIDFirewallResponseFirewallRuleDirectionEnum string

const (
	PutFirewallsIDFirewallResponseFirewallRuleDirectionEnumIn  PutFirewallsIDFirewallResponseFirewallRuleDirectionEnum = "in"
	PutFirewallsIDFirewallResponseFirewallRuleDirectionEnumOut PutFirewallsIDFirewallResponseFirewallRuleDirectionEnum = "out"
)

func (e *PutFirewallsIDFirewallResponseFirewallRuleDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "in":
		fallthrough
	case "out":
		*e = PutFirewallsIDFirewallResponseFirewallRuleDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallsIDFirewallResponseFirewallRuleDirectionEnum: %s", s)
	}
}

// PutFirewallsIDFirewallResponseFirewallRuleProtocolEnum - Type of traffic to allow
type PutFirewallsIDFirewallResponseFirewallRuleProtocolEnum string

const (
	PutFirewallsIDFirewallResponseFirewallRuleProtocolEnumTCP  PutFirewallsIDFirewallResponseFirewallRuleProtocolEnum = "tcp"
	PutFirewallsIDFirewallResponseFirewallRuleProtocolEnumUDP  PutFirewallsIDFirewallResponseFirewallRuleProtocolEnum = "udp"
	PutFirewallsIDFirewallResponseFirewallRuleProtocolEnumIcmp PutFirewallsIDFirewallResponseFirewallRuleProtocolEnum = "icmp"
	PutFirewallsIDFirewallResponseFirewallRuleProtocolEnumEsp  PutFirewallsIDFirewallResponseFirewallRuleProtocolEnum = "esp"
	PutFirewallsIDFirewallResponseFirewallRuleProtocolEnumGre  PutFirewallsIDFirewallResponseFirewallRuleProtocolEnum = "gre"
)

func (e *PutFirewallsIDFirewallResponseFirewallRuleProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tcp":
		fallthrough
	case "udp":
		fallthrough
	case "icmp":
		fallthrough
	case "esp":
		fallthrough
	case "gre":
		*e = PutFirewallsIDFirewallResponseFirewallRuleProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallsIDFirewallResponseFirewallRuleProtocolEnum: %s", s)
	}
}

type PutFirewallsIDFirewallResponseFirewallRule struct {
	// Description of the Rule
	Description *string `json:"description,omitempty"`
	// List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
	DestinationIps []string `json:"destination_ips,omitempty"`
	// Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
	Direction PutFirewallsIDFirewallResponseFirewallRuleDirectionEnum `json:"direction"`
	// Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.
	Port *string `json:"port,omitempty"`
	// Type of traffic to allow
	Protocol PutFirewallsIDFirewallResponseFirewallRuleProtocolEnum `json:"protocol"`
	// List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
	SourceIps []string `json:"source_ips,omitempty"`
}

type PutFirewallsIDFirewallResponseFirewall struct {
	AppliedTo []PutFirewallsIDFirewallResponseFirewallAppliedTo `json:"applied_to"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// ID of the Resource
	ID int64 `json:"id"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels,omitempty"`
	// Name of the Resource. Must be unique per Project.
	Name  string                                       `json:"name"`
	Rules []PutFirewallsIDFirewallResponseFirewallRule `json:"rules"`
}

// PutFirewallsIDFirewallResponse - The `firewall` key contains the Firewall that was just updated
type PutFirewallsIDFirewallResponse struct {
	Firewall PutFirewallsIDFirewallResponseFirewall `json:"firewall"`
}

type PutFirewallsIDResponse struct {
	ContentType string
	// The `firewall` key contains the Firewall that was just updated
	FirewallResponse *PutFirewallsIDFirewallResponse
	StatusCode       int
	RawResponse      *http.Response
}
