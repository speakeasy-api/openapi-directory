/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ColumnDescription - Details on a column in the table.
 */
public class ColumnDescription {
    /**
     * Data type of the column Supported types are auto_id, boolean, boolean_list, creator, create_timestamp, date, dropdown, location, integer, integer_list, number, number_list, person, person_list, tags, check_list, text, text_list, update_timestamp, updater, relationship, file_attachment_list. These types directly map to the column types supported on Tables website.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataType")
    public String dataType;

    public ColumnDescription withDataType(String dataType) {
        this.dataType = dataType;
        return this;
    }
    
    /**
     * Details about a date column.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dateDetails")
    public DateDetails dateDetails;

    public ColumnDescription withDateDetails(DateDetails dateDetails) {
        this.dateDetails = dateDetails;
        return this;
    }
    
    /**
     * Internal id for a column.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public ColumnDescription withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Optional. Range of labeled values for the column. Some columns like tags and drop-downs limit the values to a set of possible values. We return the range of values in such cases to help clients implement better user data validation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public LabeledItem[] labels;

    public ColumnDescription withLabels(LabeledItem[] labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Details about a lookup column whose value comes from the associated relationship.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lookupDetails")
    public LookupDetails lookupDetails;

    public ColumnDescription withLookupDetails(LookupDetails lookupDetails) {
        this.lookupDetails = lookupDetails;
        return this;
    }
    
    /**
     * Optional. Indicates whether or not multiple values are allowed for array types where such a restriction is possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multipleValuesDisallowed")
    public Boolean multipleValuesDisallowed;

    public ColumnDescription withMultipleValuesDisallowed(Boolean multipleValuesDisallowed) {
        this.multipleValuesDisallowed = multipleValuesDisallowed;
        return this;
    }
    
    /**
     * column name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public ColumnDescription withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Optional. Indicates that values for the column cannot be set by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readonly")
    public Boolean readonly;

    public ColumnDescription withReadonly(Boolean readonly) {
        this.readonly = readonly;
        return this;
    }
    
    /**
     * Details about a relationship column.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relationshipDetails")
    public RelationshipDetails relationshipDetails;

    public ColumnDescription withRelationshipDetails(RelationshipDetails relationshipDetails) {
        this.relationshipDetails = relationshipDetails;
        return this;
    }
    
    public ColumnDescription(){}
}
