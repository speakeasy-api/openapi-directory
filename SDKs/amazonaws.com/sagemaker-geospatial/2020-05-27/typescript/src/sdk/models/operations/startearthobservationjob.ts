/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Input configuration information.
 */
export class StartEarthObservationJobRequestBodyInputConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DataSourceConfig" })
  @Type(() => shared.EojDataSourceConfigInput)
  dataSourceConfig?: shared.EojDataSourceConfigInput;

  @SpeakeasyMetadata()
  @Expose({ name: "PreviousEarthObservationJobArn" })
  previousEarthObservationJobArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RasterDataCollectionQuery" })
  @Type(() => shared.RasterDataCollectionQueryInput)
  rasterDataCollectionQuery?: shared.RasterDataCollectionQueryInput;
}

/**
 * The input structure for the JobConfig in an EarthObservationJob.
 */
export class StartEarthObservationJobRequestBodyJobConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "BandMathConfig" })
  @Type(() => shared.BandMathConfigInput)
  bandMathConfig?: shared.BandMathConfigInput;

  @SpeakeasyMetadata()
  @Expose({ name: "CloudMaskingConfig" })
  cloudMaskingConfig?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "CloudRemovalConfig" })
  @Type(() => shared.CloudRemovalConfigInput)
  cloudRemovalConfig?: shared.CloudRemovalConfigInput;

  @SpeakeasyMetadata()
  @Expose({ name: "GeoMosaicConfig" })
  @Type(() => shared.GeoMosaicConfigInput)
  geoMosaicConfig?: shared.GeoMosaicConfigInput;

  @SpeakeasyMetadata()
  @Expose({ name: "LandCoverSegmentationConfig" })
  landCoverSegmentationConfig?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "ResamplingConfig" })
  @Type(() => shared.ResamplingConfigInput)
  resamplingConfig?: shared.ResamplingConfigInput;

  @SpeakeasyMetadata()
  @Expose({ name: "StackConfig" })
  @Type(() => shared.StackConfigInput)
  stackConfig?: shared.StackConfigInput;

  @SpeakeasyMetadata()
  @Expose({ name: "TemporalStatisticsConfig" })
  @Type(() => shared.TemporalStatisticsConfigInput)
  temporalStatisticsConfig?: shared.TemporalStatisticsConfigInput;

  @SpeakeasyMetadata()
  @Expose({ name: "ZonalStatisticsConfig" })
  @Type(() => shared.ZonalStatisticsConfigInput)
  zonalStatisticsConfig?: shared.ZonalStatisticsConfigInput;
}

export class StartEarthObservationJobRequestBody extends SpeakeasyBase {
  /**
   * A unique token that guarantees that the call to this API is idempotent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ClientToken" })
  clientToken?: string;

  /**
   * The Amazon Resource Name (ARN) of the IAM role that you specified for the job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ExecutionRoleArn" })
  executionRoleArn?: string;

  /**
   * Input configuration information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "InputConfig" })
  @Type(() => StartEarthObservationJobRequestBodyInputConfig)
  inputConfig: StartEarthObservationJobRequestBodyInputConfig;

  /**
   * The input structure for the JobConfig in an EarthObservationJob.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "JobConfig" })
  @Type(() => StartEarthObservationJobRequestBodyJobConfig)
  jobConfig: StartEarthObservationJobRequestBodyJobConfig;

  /**
   * The Amazon Key Management Service (KMS) key ID for server-side encryption.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "KmsKeyId" })
  kmsKeyId?: string;

  /**
   * The name of the Earth Observation job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  /**
   * Each tag consists of a key and a value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;
}

export class StartEarthObservationJobRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: StartEarthObservationJobRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class StartEarthObservationJobResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  startEarthObservationJobOutput?: shared.StartEarthObservationJobOutput;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
