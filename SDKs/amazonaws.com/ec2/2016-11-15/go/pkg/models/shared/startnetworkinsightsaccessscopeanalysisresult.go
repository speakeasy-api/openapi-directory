// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisFindingsFoundEnum - Indicates whether there are findings.
type StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisFindingsFoundEnum string

const (
	StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisFindingsFoundEnumTrue    StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisFindingsFoundEnum = "true"
	StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisFindingsFoundEnumFalse   StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisFindingsFoundEnum = "false"
	StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisFindingsFoundEnumUnknown StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisFindingsFoundEnum = "unknown"
)

func (e StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisFindingsFoundEnum) ToPointer() *StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisFindingsFoundEnum {
	return &e
}

func (e *StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisFindingsFoundEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		fallthrough
	case "unknown":
		*e = StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisFindingsFoundEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisFindingsFoundEnum: %v", v)
	}
}

// StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisStatusEnum - The status.
type StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisStatusEnum string

const (
	StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisStatusEnumRunning   StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisStatusEnum = "running"
	StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisStatusEnumSucceeded StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisStatusEnum = "succeeded"
	StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisStatusEnumFailed    StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisStatusEnum = "failed"
)

func (e StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisStatusEnum) ToPointer() *StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisStatusEnum {
	return &e
}

func (e *StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "running":
		fallthrough
	case "succeeded":
		fallthrough
	case "failed":
		*e = StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisStatusEnum: %v", v)
	}
}

// StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisTags - Describes a tag.
type StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisTags struct {
	Key   *string
	Value *string
}

// StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysis - The Network Access Scope analysis.
type StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysis struct {
	AnalyzedEniCount                      *int64
	EndDate                               *time.Time
	FindingsFound                         *StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisFindingsFoundEnum
	NetworkInsightsAccessScopeAnalysisArn *string
	NetworkInsightsAccessScopeAnalysisID  *string
	NetworkInsightsAccessScopeID          *string
	StartDate                             *time.Time
	Status                                *StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisStatusEnum
	StatusMessage                         *string
	Tags                                  []StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysisTags
	WarningMessage                        *string
}

// StartNetworkInsightsAccessScopeAnalysisResult - Success
type StartNetworkInsightsAccessScopeAnalysisResult struct {
	NetworkInsightsAccessScopeAnalysis *StartNetworkInsightsAccessScopeAnalysisResultNetworkInsightsAccessScopeAnalysis
}
