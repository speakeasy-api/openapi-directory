/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Specify the category of clothing to return.
 */
export enum GetNhClothingCategoryEnum {
  Tops = "Tops",
  Bottoms = "Bottoms",
  DressUp = "Dress-up",
  Headwear = "Headwear",
  Accessories = "Accessories",
  Socks = "Socks",
  Shoes = "Shoes",
  Bags = "Bags",
  Umbrellas = "Umbrellas",
}

export enum GetNhClothingColorEnum {
  Aqua = "Aqua",
  Beige = "Beige",
  Black = "Black",
  Blue = "Blue",
  Brown = "Brown",
  Colorful = "Colorful",
  Gray = "Gray",
  Green = "Green",
  Orange = "Orange",
  Pink = "Pink",
  Purple = "Purple",
  Red = "Red",
  White = "White",
  Yellow = "Yellow",
}

/**
 * Return clothing that have the specified Label theme. This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island.
 */
export enum GetNhClothingLabelthemeEnum {
  Comfy = "Comfy",
  Everyday = "Everyday",
  FairyTale = "Fairy tale",
  Formal = "Formal",
  Goth = "Goth",
  Outdoorsy = "Outdoorsy",
  Party = "Party",
  Sporty = "Sporty",
  Theatrical = "Theatrical",
  Vacation = "Vacation",
  Work = "Work",
}

export enum GetNhClothingStyleEnum {
  Active = "Active",
  Cool = "Cool",
  Cute = "Cute",
  Elegant = "Elegant",
  Gorgeous = "Gorgeous",
  Simple = "Simple",
}

export class GetNhClothingRequest extends SpeakeasyBase {
  /**
   * The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Accept-Version",
  })
  acceptVersion: string;

  /**
   * Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-API-KEY",
  })
  xApiKey: string;

  /**
   * Specify the category of clothing to return.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=category",
  })
  category?: GetNhClothingCategoryEnum;

  /**
   * Return clothing that matches the provided colors (may specify one or two colors). Colors are used for gifting villagers.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=color" })
  color?: GetNhClothingColorEnum[];

  /**
   * When set to `true`, only clothing names are returned. Instead of an array of objects with all details, the return will be an array of strings.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=excludedetails",
  })
  excludedetails?: string;

  /**
   * Return clothing that have the specified Label theme. This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=labeltheme",
  })
  labeltheme?: GetNhClothingLabelthemeEnum;

  /**
   * Return clothing that matches the provided styles (may specify one or two styles). Styles are used for gifting villagers.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=style" })
  style?: GetNhClothingStyleEnum[];
}

export class GetNhClothingResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Failed to authenticate user from `X-API-KEY`.
   */
  @SpeakeasyMetadata()
  error401?: shared.Error401;

  /**
   * There was an error fetching the requested data.
   */
  @SpeakeasyMetadata()
  error500?: shared.Error500;

  /**
   * A JSON array of clothing.
   */
  @SpeakeasyMetadata({ elemType: shared.NHClothing })
  nhClothings?: shared.NHClothing[];

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
