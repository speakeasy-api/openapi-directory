"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import applicationstatus_enum as shared_applicationstatus_enum
from ..shared import cloudwatchloggingoptiondescription as shared_cloudwatchloggingoptiondescription
from ..shared import inputdescription as shared_inputdescription
from ..shared import outputdescription as shared_outputdescription
from ..shared import referencedatasourcedescription as shared_referencedatasourcedescription
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ApplicationDetail:
    r"""<note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\\"/kinesisanalytics/latest/apiv2/Welcome.html\\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>Provides a description of the application, including the application Amazon Resource Name (ARN), status, latest version, and input and output configuration.</p>"""
    
    application_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationARN') }})  
    application_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationName') }})  
    application_status: shared_applicationstatus_enum.ApplicationStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationStatus') }})  
    application_version_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationVersionId') }})  
    application_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationCode'), 'exclude': lambda f: f is None }})  
    application_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationDescription'), 'exclude': lambda f: f is None }})  
    cloud_watch_logging_option_descriptions: Optional[list[shared_cloudwatchloggingoptiondescription.CloudWatchLoggingOptionDescription]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudWatchLoggingOptionDescriptions'), 'exclude': lambda f: f is None }})  
    create_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreateTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    input_descriptions: Optional[list[shared_inputdescription.InputDescription]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputDescriptions'), 'exclude': lambda f: f is None }})  
    last_update_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdateTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    output_descriptions: Optional[list[shared_outputdescription.OutputDescription]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputDescriptions'), 'exclude': lambda f: f is None }})  
    reference_data_source_descriptions: Optional[list[shared_referencedatasourcedescription.ReferenceDataSourceDescription]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReferenceDataSourceDescriptions'), 'exclude': lambda f: f is None }})  
    