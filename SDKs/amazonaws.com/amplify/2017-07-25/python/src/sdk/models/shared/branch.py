"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import stage_enum as shared_stage_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Branch:
    r"""The branch for an Amplify app, which maps to a third-party repository branch."""
    
    active_job_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activeJobId') }})  
    branch_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branchArn') }})  
    branch_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branchName') }})  
    create_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    custom_domains: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customDomains') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    display_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName') }})  
    enable_auto_build: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableAutoBuild') }})  
    enable_basic_auth: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableBasicAuth') }})  
    enable_notification: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableNotification') }})  
    enable_pull_request_preview: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enablePullRequestPreview') }})  
    environment_variables: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentVariables') }})  
    framework: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('framework') }})  
    stage: shared_stage_enum.StageEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stage') }})  
    total_number_of_jobs: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalNumberOfJobs') }})  
    ttl: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ttl') }})  
    update_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    associated_resources: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associatedResources'), 'exclude': lambda f: f is None }})  
    backend_environment_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backendEnvironmentArn'), 'exclude': lambda f: f is None }})  
    basic_auth_credentials: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basicAuthCredentials'), 'exclude': lambda f: f is None }})  
    build_spec: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildSpec'), 'exclude': lambda f: f is None }})  
    destination_branch: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationBranch'), 'exclude': lambda f: f is None }})  
    enable_performance_mode: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enablePerformanceMode'), 'exclude': lambda f: f is None }})  
    pull_request_environment_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pullRequestEnvironmentName'), 'exclude': lambda f: f is None }})  
    source_branch: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceBranch'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    thumbnail_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnailUrl'), 'exclude': lambda f: f is None }})  
    