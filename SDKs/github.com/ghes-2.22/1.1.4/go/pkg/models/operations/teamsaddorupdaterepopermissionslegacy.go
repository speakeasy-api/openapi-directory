// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// TeamsAddOrUpdateRepoPermissionsLegacyRequestBodyPermissionEnum - The permission to grant the team on this repository. Can be one of:
// \* `pull` - team members can pull, but not push to or administer this repository.
// \* `push` - team members can pull and push, but not administer this repository.
// \* `admin` - team members can pull, push and administer this repository.
//
// If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
type TeamsAddOrUpdateRepoPermissionsLegacyRequestBodyPermissionEnum string

const (
	TeamsAddOrUpdateRepoPermissionsLegacyRequestBodyPermissionEnumPull  TeamsAddOrUpdateRepoPermissionsLegacyRequestBodyPermissionEnum = "pull"
	TeamsAddOrUpdateRepoPermissionsLegacyRequestBodyPermissionEnumPush  TeamsAddOrUpdateRepoPermissionsLegacyRequestBodyPermissionEnum = "push"
	TeamsAddOrUpdateRepoPermissionsLegacyRequestBodyPermissionEnumAdmin TeamsAddOrUpdateRepoPermissionsLegacyRequestBodyPermissionEnum = "admin"
)

func (e TeamsAddOrUpdateRepoPermissionsLegacyRequestBodyPermissionEnum) ToPointer() *TeamsAddOrUpdateRepoPermissionsLegacyRequestBodyPermissionEnum {
	return &e
}

func (e *TeamsAddOrUpdateRepoPermissionsLegacyRequestBodyPermissionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pull":
		fallthrough
	case "push":
		fallthrough
	case "admin":
		*e = TeamsAddOrUpdateRepoPermissionsLegacyRequestBodyPermissionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsAddOrUpdateRepoPermissionsLegacyRequestBodyPermissionEnum: %v", v)
	}
}

type TeamsAddOrUpdateRepoPermissionsLegacyRequestBody struct {
	// The permission to grant the team on this repository. Can be one of:
	// \* `pull` - team members can pull, but not push to or administer this repository.
	// \* `push` - team members can pull and push, but not administer this repository.
	// \* `admin` - team members can pull, push and administer this repository.
	//
	// If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
	Permission *TeamsAddOrUpdateRepoPermissionsLegacyRequestBodyPermissionEnum `json:"permission,omitempty"`
}

type TeamsAddOrUpdateRepoPermissionsLegacyRequest struct {
	RequestBody *TeamsAddOrUpdateRepoPermissionsLegacyRequestBody `request:"mediaType=application/json"`
	Owner       string                                            `pathParam:"style=simple,explode=false,name=owner"`
	Repo        string                                            `pathParam:"style=simple,explode=false,name=repo"`
	TeamID      int64                                             `pathParam:"style=simple,explode=false,name=team_id"`
}

type TeamsAddOrUpdateRepoPermissionsLegacyResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Validation failed
	ValidationError *shared.ValidationError
}
