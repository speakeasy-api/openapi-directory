/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Configuration options for configure Cognito streams.
 */
export class SetIdentityPoolConfigurationRequestBodyCognitoStreams extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "RoleArn" })
  roleArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StreamName" })
  streamName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StreamingStatus" })
  streamingStatus?: shared.StreamingStatusEnum;
}

/**
 * Configuration options to be applied to the identity pool.
 */
export class SetIdentityPoolConfigurationRequestBodyPushSync extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ApplicationArns" })
  applicationArns?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "RoleArn" })
  roleArn?: string;
}

export class SetIdentityPoolConfigurationRequestBody extends SpeakeasyBase {
  /**
   * Configuration options for configure Cognito streams.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CognitoStreams" })
  @Type(() => SetIdentityPoolConfigurationRequestBodyCognitoStreams)
  cognitoStreams?: SetIdentityPoolConfigurationRequestBodyCognitoStreams;

  /**
   * Configuration options to be applied to the identity pool.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PushSync" })
  @Type(() => SetIdentityPoolConfigurationRequestBodyPushSync)
  pushSync?: SetIdentityPoolConfigurationRequestBodyPushSync;
}

export class SetIdentityPoolConfigurationRequest extends SpeakeasyBase {
  /**
   * A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. This is the ID of the pool to modify.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=IdentityPoolId",
  })
  identityPoolId: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: SetIdentityPoolConfigurationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class SetIdentityPoolConfigurationResponse extends SpeakeasyBase {
  /**
   * ConcurrentModificationException
   */
  @SpeakeasyMetadata()
  concurrentModificationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalErrorException
   */
  @SpeakeasyMetadata()
  internalErrorException?: any;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  /**
   * NotAuthorizedException
   */
  @SpeakeasyMetadata()
  notAuthorizedException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  setIdentityPoolConfigurationResponse?: shared.SetIdentityPoolConfigurationResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
