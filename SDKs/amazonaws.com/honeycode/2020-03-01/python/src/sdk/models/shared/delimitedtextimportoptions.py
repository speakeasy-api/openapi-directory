"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import importdatacharacterencoding_enum as shared_importdatacharacterencoding_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DelimitedTextImportOptions:
    r"""An object that contains the options relating to parsing delimited text as part of an import request."""
    
    delimiter: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delimiter') }})  
    data_character_encoding: Optional[shared_importdatacharacterencoding_enum.ImportDataCharacterEncodingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataCharacterEncoding'), 'exclude': lambda f: f is None }})  
    has_header_row: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasHeaderRow'), 'exclude': lambda f: f is None }})  
    ignore_empty_rows: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignoreEmptyRows'), 'exclude': lambda f: f is None }})  
    