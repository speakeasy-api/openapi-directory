"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DNSKeyDigestTypeEnum(str, Enum):
    r"""Specifies the algorithm used to calculate this digest."""
    SHA1 = 'sha1'
    SHA256 = 'sha256'
    SHA384 = 'sha384'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DNSKeyDigest:
    
    digest: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('digest'), 'exclude': lambda f: f is None }})
    r"""The base-16 encoded bytes of this digest. Suitable for use in a DS resource record."""  
    type: Optional[DNSKeyDigestTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Specifies the algorithm used to calculate this digest."""  
    