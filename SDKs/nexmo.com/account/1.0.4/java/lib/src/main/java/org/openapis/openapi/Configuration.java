/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Manage the settings on your account
 */
public class Configuration {
	
    /**
	 * CHANGE_ACCOUNT_SETTINGS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CHANGE_ACCOUNT_SETTINGS_SERVERS = {
        "https://rest.nexmo.com",
    };
	
    /**
	 * REGISTER_SENDER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] REGISTER_SENDER_SERVERS = {
        "https://rest.nexmo.com",
    };
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Configuration(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Change Account Settings
     * Update the default webhook URLs associated with your account:
     *   * Callback URL for incoming SMS messages
     *   * Callback URL for delivery receipts
     * 
     * Note that the URLs you provide must be valid and active. Vonage will check that they return a 200 OK response before the setting is saved.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChangeAccountSettingsResponse changeAccountSettings(org.openapis.openapi.models.operations.ChangeAccountSettingsRequest request) throws Exception {
        return this.changeAccountSettings(request, null);
    }

    /**
     * Change Account Settings
     * Update the default webhook URLs associated with your account:
     *   * Callback URL for incoming SMS messages
     *   * Callback URL for delivery receipts
     * 
     * Note that the URLs you provide must be valid and active. Vonage will check that they return a 200 OK response before the setting is saved.
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChangeAccountSettingsResponse changeAccountSettings(org.openapis.openapi.models.operations.ChangeAccountSettingsRequest request, String serverURL) throws Exception {
        String baseUrl = CHANGE_ACCOUNT_SETTINGS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/account/settings");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "accountSettingsRequest", "form");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChangeAccountSettingsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChangeAccountSettingsResponse res = new org.openapis.openapi.models.operations.ChangeAccountSettingsResponse() {{
            accountSettings = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AccountSettings out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AccountSettings.class);
                res.accountSettings = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
        }

        return res;
    }

    /**
     * Register an email sender
     * Register an email sender with an API Key for using email with Verify V2.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RegisterSenderResponse registerSender(org.openapis.openapi.models.operations.RegisterSenderRequest request) throws Exception {
        return this.registerSender(request, null);
    }

    /**
     * Register an email sender
     * Register an email sender with an API Key for using email with Verify V2.
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RegisterSenderResponse registerSender(org.openapis.openapi.models.operations.RegisterSenderRequest request, String serverURL) throws Exception {
        String baseUrl = REGISTER_SENDER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/account/register-sender");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "registerEmailRequest", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RegisterSenderRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RegisterSenderResponse res = new org.openapis.openapi.models.operations.RegisterSenderResponse() {{
            registerEmailResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RegisterEmailResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RegisterEmailResponse.class);
                res.registerEmailResponse = out;
            }
        }

        return res;
    }
}