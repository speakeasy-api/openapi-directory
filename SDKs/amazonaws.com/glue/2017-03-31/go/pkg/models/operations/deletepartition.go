// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeletePartitionXAmzTargetEnum
type DeletePartitionXAmzTargetEnum string

const (
	DeletePartitionXAmzTargetEnumAwsGlueDeletePartition DeletePartitionXAmzTargetEnum = "AWSGlue.DeletePartition"
)

func (e DeletePartitionXAmzTargetEnum) ToPointer() *DeletePartitionXAmzTargetEnum {
	return &e
}

func (e *DeletePartitionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSGlue.DeletePartition":
		*e = DeletePartitionXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletePartitionXAmzTargetEnum: %v", v)
	}
}

type DeletePartitionRequest struct {
	DeletePartitionRequest shared.DeletePartitionRequest `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             DeletePartitionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeletePartitionResponse struct {
	ContentType string
	// Success
	DeletePartitionResponse map[string]interface{}
	// EntityNotFoundException
	EntityNotFoundException interface{}
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	// OperationTimeoutException
	OperationTimeoutException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
