// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteParameterXAmzTargetEnum
type DeleteParameterXAmzTargetEnum string

const (
	DeleteParameterXAmzTargetEnumAmazonSsmDeleteParameter DeleteParameterXAmzTargetEnum = "AmazonSSM.DeleteParameter"
)

func (e DeleteParameterXAmzTargetEnum) ToPointer() *DeleteParameterXAmzTargetEnum {
	return &e
}

func (e *DeleteParameterXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonSSM.DeleteParameter":
		*e = DeleteParameterXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteParameterXAmzTargetEnum: %v", v)
	}
}

type DeleteParameterRequest struct {
	DeleteParameterRequest shared.DeleteParameterRequest `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             DeleteParameterXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteParameterResponse struct {
	ContentType string
	// Success
	DeleteParameterResult map[string]interface{}
	// InternalServerError
	InternalServerError interface{}
	// ParameterNotFound
	ParameterNotFound interface{}
	StatusCode        int
	RawResponse       *http.Response
}
