// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateListenerXAmzTargetEnum
type CreateListenerXAmzTargetEnum string

const (
	CreateListenerXAmzTargetEnumGlobalAcceleratorV20180706CreateListener CreateListenerXAmzTargetEnum = "GlobalAccelerator_V20180706.CreateListener"
)

func (e *CreateListenerXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GlobalAccelerator_V20180706.CreateListener":
		*e = CreateListenerXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateListenerXAmzTargetEnum: %s", s)
	}
}

type CreateListenerHeaders struct {
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateListenerXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateListenerRequest struct {
	Headers CreateListenerHeaders
	Request shared.CreateListenerRequest `request:"mediaType=application/json"`
}

type CreateListenerResponse struct {
	// AcceleratorNotFoundException
	AcceleratorNotFoundException interface{}
	ContentType                  string
	// Success
	CreateListenerResponse *shared.CreateListenerResponse
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// InvalidPortRangeException
	InvalidPortRangeException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
}
