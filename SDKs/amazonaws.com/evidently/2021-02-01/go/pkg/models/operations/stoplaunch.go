// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type StopLaunchPathParams struct {
	// The name of the launch to stop.
	Launch string `pathParam:"style=simple,explode=false,name=launch"`
	// The name or ARN of the project that contains the launch that you want to stop.
	Project string `pathParam:"style=simple,explode=false,name=project"`
}

type StopLaunchHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// StopLaunchRequestBodyDesiredStateEnum - Specify whether to consider the launch as <code>COMPLETED</code> or <code>CANCELLED</code> after it stops.
type StopLaunchRequestBodyDesiredStateEnum string

const (
	StopLaunchRequestBodyDesiredStateEnumCompleted StopLaunchRequestBodyDesiredStateEnum = "COMPLETED"
	StopLaunchRequestBodyDesiredStateEnumCancelled StopLaunchRequestBodyDesiredStateEnum = "CANCELLED"
)

func (e *StopLaunchRequestBodyDesiredStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "COMPLETED":
		fallthrough
	case "CANCELLED":
		*e = StopLaunchRequestBodyDesiredStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StopLaunchRequestBodyDesiredStateEnum: %s", s)
	}
}

type StopLaunchRequestBody struct {
	// Specify whether to consider the launch as <code>COMPLETED</code> or <code>CANCELLED</code> after it stops.
	DesiredState *StopLaunchRequestBodyDesiredStateEnum `json:"desiredState,omitempty"`
	// A string that describes why you are stopping the launch.
	Reason *string `json:"reason,omitempty"`
}

type StopLaunchRequest struct {
	PathParams StopLaunchPathParams
	Headers    StopLaunchHeaders
	Request    StopLaunchRequestBody `request:"mediaType=application/json"`
}

type StopLaunchResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// Success
	StopLaunchResponse *shared.StopLaunchResponse
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
