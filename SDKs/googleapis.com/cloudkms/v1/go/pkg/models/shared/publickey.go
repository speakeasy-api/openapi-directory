// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PublicKeyAlgorithmEnum - The Algorithm associated with this key.
type PublicKeyAlgorithmEnum string

const (
	PublicKeyAlgorithmEnumCryptoKeyVersionAlgorithmUnspecified PublicKeyAlgorithmEnum = "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED"
	PublicKeyAlgorithmEnumGoogleSymmetricEncryption            PublicKeyAlgorithmEnum = "GOOGLE_SYMMETRIC_ENCRYPTION"
	PublicKeyAlgorithmEnumRsaSignPss2048Sha256                 PublicKeyAlgorithmEnum = "RSA_SIGN_PSS_2048_SHA256"
	PublicKeyAlgorithmEnumRsaSignPss3072Sha256                 PublicKeyAlgorithmEnum = "RSA_SIGN_PSS_3072_SHA256"
	PublicKeyAlgorithmEnumRsaSignPss4096Sha256                 PublicKeyAlgorithmEnum = "RSA_SIGN_PSS_4096_SHA256"
	PublicKeyAlgorithmEnumRsaSignPss4096Sha512                 PublicKeyAlgorithmEnum = "RSA_SIGN_PSS_4096_SHA512"
	PublicKeyAlgorithmEnumRsaSignPkcs12048Sha256               PublicKeyAlgorithmEnum = "RSA_SIGN_PKCS1_2048_SHA256"
	PublicKeyAlgorithmEnumRsaSignPkcs13072Sha256               PublicKeyAlgorithmEnum = "RSA_SIGN_PKCS1_3072_SHA256"
	PublicKeyAlgorithmEnumRsaSignPkcs14096Sha256               PublicKeyAlgorithmEnum = "RSA_SIGN_PKCS1_4096_SHA256"
	PublicKeyAlgorithmEnumRsaSignPkcs14096Sha512               PublicKeyAlgorithmEnum = "RSA_SIGN_PKCS1_4096_SHA512"
	PublicKeyAlgorithmEnumRsaSignRawPkcs12048                  PublicKeyAlgorithmEnum = "RSA_SIGN_RAW_PKCS1_2048"
	PublicKeyAlgorithmEnumRsaSignRawPkcs13072                  PublicKeyAlgorithmEnum = "RSA_SIGN_RAW_PKCS1_3072"
	PublicKeyAlgorithmEnumRsaSignRawPkcs14096                  PublicKeyAlgorithmEnum = "RSA_SIGN_RAW_PKCS1_4096"
	PublicKeyAlgorithmEnumRsaDecryptOaep2048Sha256             PublicKeyAlgorithmEnum = "RSA_DECRYPT_OAEP_2048_SHA256"
	PublicKeyAlgorithmEnumRsaDecryptOaep3072Sha256             PublicKeyAlgorithmEnum = "RSA_DECRYPT_OAEP_3072_SHA256"
	PublicKeyAlgorithmEnumRsaDecryptOaep4096Sha256             PublicKeyAlgorithmEnum = "RSA_DECRYPT_OAEP_4096_SHA256"
	PublicKeyAlgorithmEnumRsaDecryptOaep4096Sha512             PublicKeyAlgorithmEnum = "RSA_DECRYPT_OAEP_4096_SHA512"
	PublicKeyAlgorithmEnumRsaDecryptOaep2048Sha1               PublicKeyAlgorithmEnum = "RSA_DECRYPT_OAEP_2048_SHA1"
	PublicKeyAlgorithmEnumRsaDecryptOaep3072Sha1               PublicKeyAlgorithmEnum = "RSA_DECRYPT_OAEP_3072_SHA1"
	PublicKeyAlgorithmEnumRsaDecryptOaep4096Sha1               PublicKeyAlgorithmEnum = "RSA_DECRYPT_OAEP_4096_SHA1"
	PublicKeyAlgorithmEnumEcSignP256Sha256                     PublicKeyAlgorithmEnum = "EC_SIGN_P256_SHA256"
	PublicKeyAlgorithmEnumEcSignP384Sha384                     PublicKeyAlgorithmEnum = "EC_SIGN_P384_SHA384"
	PublicKeyAlgorithmEnumEcSignSecp256K1Sha256                PublicKeyAlgorithmEnum = "EC_SIGN_SECP256K1_SHA256"
	PublicKeyAlgorithmEnumHmacSha256                           PublicKeyAlgorithmEnum = "HMAC_SHA256"
	PublicKeyAlgorithmEnumHmacSha1                             PublicKeyAlgorithmEnum = "HMAC_SHA1"
	PublicKeyAlgorithmEnumHmacSha384                           PublicKeyAlgorithmEnum = "HMAC_SHA384"
	PublicKeyAlgorithmEnumHmacSha512                           PublicKeyAlgorithmEnum = "HMAC_SHA512"
	PublicKeyAlgorithmEnumHmacSha224                           PublicKeyAlgorithmEnum = "HMAC_SHA224"
	PublicKeyAlgorithmEnumExternalSymmetricEncryption          PublicKeyAlgorithmEnum = "EXTERNAL_SYMMETRIC_ENCRYPTION"
)

func (e *PublicKeyAlgorithmEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED":
		fallthrough
	case "GOOGLE_SYMMETRIC_ENCRYPTION":
		fallthrough
	case "RSA_SIGN_PSS_2048_SHA256":
		fallthrough
	case "RSA_SIGN_PSS_3072_SHA256":
		fallthrough
	case "RSA_SIGN_PSS_4096_SHA256":
		fallthrough
	case "RSA_SIGN_PSS_4096_SHA512":
		fallthrough
	case "RSA_SIGN_PKCS1_2048_SHA256":
		fallthrough
	case "RSA_SIGN_PKCS1_3072_SHA256":
		fallthrough
	case "RSA_SIGN_PKCS1_4096_SHA256":
		fallthrough
	case "RSA_SIGN_PKCS1_4096_SHA512":
		fallthrough
	case "RSA_SIGN_RAW_PKCS1_2048":
		fallthrough
	case "RSA_SIGN_RAW_PKCS1_3072":
		fallthrough
	case "RSA_SIGN_RAW_PKCS1_4096":
		fallthrough
	case "RSA_DECRYPT_OAEP_2048_SHA256":
		fallthrough
	case "RSA_DECRYPT_OAEP_3072_SHA256":
		fallthrough
	case "RSA_DECRYPT_OAEP_4096_SHA256":
		fallthrough
	case "RSA_DECRYPT_OAEP_4096_SHA512":
		fallthrough
	case "RSA_DECRYPT_OAEP_2048_SHA1":
		fallthrough
	case "RSA_DECRYPT_OAEP_3072_SHA1":
		fallthrough
	case "RSA_DECRYPT_OAEP_4096_SHA1":
		fallthrough
	case "EC_SIGN_P256_SHA256":
		fallthrough
	case "EC_SIGN_P384_SHA384":
		fallthrough
	case "EC_SIGN_SECP256K1_SHA256":
		fallthrough
	case "HMAC_SHA256":
		fallthrough
	case "HMAC_SHA1":
		fallthrough
	case "HMAC_SHA384":
		fallthrough
	case "HMAC_SHA512":
		fallthrough
	case "HMAC_SHA224":
		fallthrough
	case "EXTERNAL_SYMMETRIC_ENCRYPTION":
		*e = PublicKeyAlgorithmEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PublicKeyAlgorithmEnum: %s", s)
	}
}

// PublicKeyProtectionLevelEnum - The ProtectionLevel of the CryptoKeyVersion public key.
type PublicKeyProtectionLevelEnum string

const (
	PublicKeyProtectionLevelEnumProtectionLevelUnspecified PublicKeyProtectionLevelEnum = "PROTECTION_LEVEL_UNSPECIFIED"
	PublicKeyProtectionLevelEnumSoftware                   PublicKeyProtectionLevelEnum = "SOFTWARE"
	PublicKeyProtectionLevelEnumHsm                        PublicKeyProtectionLevelEnum = "HSM"
	PublicKeyProtectionLevelEnumExternal                   PublicKeyProtectionLevelEnum = "EXTERNAL"
	PublicKeyProtectionLevelEnumExternalVpc                PublicKeyProtectionLevelEnum = "EXTERNAL_VPC"
)

func (e *PublicKeyProtectionLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROTECTION_LEVEL_UNSPECIFIED":
		fallthrough
	case "SOFTWARE":
		fallthrough
	case "HSM":
		fallthrough
	case "EXTERNAL":
		fallthrough
	case "EXTERNAL_VPC":
		*e = PublicKeyProtectionLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PublicKeyProtectionLevelEnum: %s", s)
	}
}

// PublicKey - The public key for a given CryptoKeyVersion. Obtained via GetPublicKey.
type PublicKey struct {
	// The Algorithm associated with this key.
	Algorithm *PublicKeyAlgorithmEnum `json:"algorithm,omitempty"`
	// The name of the CryptoKeyVersion public key. Provided here for verification. NOTE: This field is in Beta.
	Name *string `json:"name,omitempty"`
	// The public key, encoded in PEM format. For more information, see the [RFC 7468](https://tools.ietf.org/html/rfc7468) sections for [General Considerations](https://tools.ietf.org/html/rfc7468#section-2) and [Textual Encoding of Subject Public Key Info] (https://tools.ietf.org/html/rfc7468#section-13).
	Pem *string `json:"pem,omitempty"`
	// Integrity verification field. A CRC32C checksum of the returned PublicKey.pem. An integrity check of PublicKey.pem can be performed by computing the CRC32C checksum of PublicKey.pem and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type. NOTE: This field is in Beta.
	PemCrc32c *string `json:"pemCrc32c,omitempty"`
	// The ProtectionLevel of the CryptoKeyVersion public key.
	ProtectionLevel *PublicKeyProtectionLevelEnum `json:"protectionLevel,omitempty"`
}
