/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The configuration of the studio component, based on component type.
 */
export class UpdateStudioComponentRequestBodyConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "activeDirectoryConfiguration" })
  @Type(() => shared.ActiveDirectoryConfiguration)
  activeDirectoryConfiguration?: shared.ActiveDirectoryConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "computeFarmConfiguration" })
  @Type(() => shared.ComputeFarmConfiguration)
  computeFarmConfiguration?: shared.ComputeFarmConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "licenseServiceConfiguration" })
  @Type(() => shared.LicenseServiceConfiguration)
  licenseServiceConfiguration?: shared.LicenseServiceConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "sharedFileSystemConfiguration" })
  @Type(() => shared.SharedFileSystemConfiguration)
  sharedFileSystemConfiguration?: shared.SharedFileSystemConfiguration;
}

/**
 * The specific subtype of a studio component.
 */
export enum UpdateStudioComponentRequestBodySubtypeEnum {
  AwsManagedMicrosoftAd = "AWS_MANAGED_MICROSOFT_AD",
  AmazonFsxForWindows = "AMAZON_FSX_FOR_WINDOWS",
  AmazonFsxForLustre = "AMAZON_FSX_FOR_LUSTRE",
  Custom = "CUSTOM",
}

/**
 * The type of the studio component.
 */
export enum UpdateStudioComponentRequestBodyTypeEnum {
  ActiveDirectory = "ACTIVE_DIRECTORY",
  SharedFileSystem = "SHARED_FILE_SYSTEM",
  ComputeFarm = "COMPUTE_FARM",
  LicenseService = "LICENSE_SERVICE",
  Custom = "CUSTOM",
}

export class UpdateStudioComponentRequestBody extends SpeakeasyBase {
  /**
   * The configuration of the studio component, based on component type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "configuration" })
  @Type(() => UpdateStudioComponentRequestBodyConfiguration)
  configuration?: UpdateStudioComponentRequestBodyConfiguration;

  /**
   * The description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The EC2 security groups that control access to the studio component.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ec2SecurityGroupIds" })
  ec2SecurityGroupIds?: string[];

  /**
   * Initialization scripts for studio components.
   */
  @SpeakeasyMetadata({ elemType: shared.StudioComponentInitializationScript })
  @Expose({ name: "initializationScripts" })
  @Type(() => shared.StudioComponentInitializationScript)
  initializationScripts?: shared.StudioComponentInitializationScript[];

  /**
   * The name for the studio component.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runtimeRoleArn" })
  runtimeRoleArn?: string;

  /**
   * Parameters for the studio component scripts.
   */
  @SpeakeasyMetadata({ elemType: shared.ScriptParameterKeyValue })
  @Expose({ name: "scriptParameters" })
  @Type(() => shared.ScriptParameterKeyValue)
  scriptParameters?: shared.ScriptParameterKeyValue[];

  /**
   * An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secureInitializationRoleArn" })
  secureInitializationRoleArn?: string;

  /**
   * The specific subtype of a studio component.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subtype" })
  subtype?: UpdateStudioComponentRequestBodySubtypeEnum;

  /**
   * The type of the studio component.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: UpdateStudioComponentRequestBodyTypeEnum;
}

export class UpdateStudioComponentRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateStudioComponentRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Client-Token",
  })
  xAmzClientToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The studio component ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=studioComponentId",
  })
  studioComponentId: string;

  /**
   * The studio ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=studioId",
  })
  studioId: string;
}

export class UpdateStudioComponentResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerErrorException
   */
  @SpeakeasyMetadata()
  internalServerErrorException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateStudioComponentResponse?: shared.UpdateStudioComponentResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
