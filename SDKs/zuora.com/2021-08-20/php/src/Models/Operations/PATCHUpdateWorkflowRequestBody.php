<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class PATCHUpdateWorkflowRequestBody
{
    /**
     * If true, the workflow will run upon an API callout. This field must be `true` for integrating with the Configurable Payment Retry feature or the Collections Window feature in Collect.
     * 
     * 
     * 
     * @var ?bool $calloutTrigger
     */
	#[\JMS\Serializer\Annotation\SerializedName('callout_trigger')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $calloutTrigger = null;
    
    /**
     * The description of the workflow defintion
     * 
     * 
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * The cron expression for workflows with scheduled_trigger as `true`
     * 
     * 
     * 
     * @var ?string $interval
     */
	#[\JMS\Serializer\Annotation\SerializedName('interval')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $interval = null;
    
    /**
     * The name of the workflow definition
     * 
     * 
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * If true, the workflow will run when manually initiated.
     * 
     * 
     * 
     * @var ?bool $ondemandTrigger
     */
	#[\JMS\Serializer\Annotation\SerializedName('ondemand_trigger')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $ondemandTrigger = null;
    
    /**
     * Can be `High`, `Medium`, or `Low`. Higher-priority workflows take precedence over lower-priority workflows. When a workflow of higher priority is initiated, it will be placed ahead of lower-priority workflows that are running. Depending on the available resources, lower-priority workflows may be paused until resources are released.
     * 
     * 
     * 
     * @var ?string $priority
     */
	#[\JMS\Serializer\Annotation\SerializedName('priority')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $priority = null;
    
    /**
     * If true, the workflow will run based on the configured schedule with the interval field.
     * 
     * 
     * 
     * @var ?bool $scheduledTrigger
     */
	#[\JMS\Serializer\Annotation\SerializedName('scheduled_trigger')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $scheduledTrigger = null;
    
    /**
     * Can be `Active` or `Inactive`. Active workfow definitions run like normal. Inactive workflow definitions cannot be run.
     * 
     * 
     * 
     * @var ?string $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $status = null;
    
    /**
     * The timezone that corresponds with the cron expression in the interval field. See the [list of accepted timezone values](https://docs.google.com/spreadsheets/d/1skhepi-q5l9LyaMUPZjU_V9gzTphNMqNyV6ST5mygEo/edit?usp=sharing).
     * 
     * 
     * 
     * @var ?string $timezone
     */
	#[\JMS\Serializer\Annotation\SerializedName('timezone')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $timezone = null;
    
	public function __construct()
	{
		$this->calloutTrigger = null;
		$this->description = null;
		$this->interval = null;
		$this->name = null;
		$this->ondemandTrigger = null;
		$this->priority = null;
		$this->scheduledTrigger = null;
		$this->status = null;
		$this->timezone = null;
	}
}
