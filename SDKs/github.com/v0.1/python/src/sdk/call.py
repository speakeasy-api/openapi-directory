"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Call:
    r"""API methods responsible for spawning and manipulating individual calls"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_v0_1_bulk_call_(self, request: shared.BulkCallParameters, security: operations.PostV01BulkCallSecurity) -> operations.PostV01BulkCallResponse:
        r"""/v0.1/BulkCall/
        Initiates multiple concurrent outbound calls
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/BulkCall/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01BulkCallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkCallResponse])
                res.bulk_call_response = out

        return res

    def post_v0_1_call_(self, request: shared.CallParameters, security: operations.PostV01CallSecurity) -> operations.PostV01CallResponse:
        r"""/v0.1/Call/
        Initiates an outbound call
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/Call/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01CallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CallResponse])
                res.call_response = out

        return res

    def post_v0_1_cancel_scheduled_hangup_(self, request: shared.CancelScheduledHangupParameters, security: operations.PostV01CancelScheduledHangupSecurity) -> operations.PostV01CancelScheduledHangupResponse:
        r"""/v0.1/CancelScheduledHangup/
        Cancels a scheduled hangup for a call
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/CancelScheduledHangup/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01CancelScheduledHangupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CancelScheduledHangupResponse])
                res.cancel_scheduled_hangup_response = out

        return res

    def post_v0_1_cancel_scheduled_play_(self, request: shared.CancelScheduledPlayParameters, security: operations.PostV01CancelScheduledPlaySecurity) -> operations.PostV01CancelScheduledPlayResponse:
        r"""/v0.1/CancelScheduledPlay/
        Cancels a scheduled playback request
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/CancelScheduledPlay/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01CancelScheduledPlayResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CancelScheduledPlayResponse])
                res.cancel_scheduled_play_response = out

        return res

    def post_v0_1_group_call_(self, request: shared.GroupCallParameters, security: operations.PostV01GroupCallSecurity) -> operations.PostV01GroupCallResponse:
        r"""/v0.1/GroupCall/
        Initiate multiple racing outbound calls
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/GroupCall/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01GroupCallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupCallResponse])
                res.group_call_response = out

        return res

    def post_v0_1_hangup_all_calls_(self) -> operations.PostV01HangupAllCallsResponse:
        r"""/v0.1/HangupAllCalls/
        Hangs up all established calls
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/HangupAllCalls/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01HangupAllCallsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HangupAllCallsResponse])
                res.hangup_all_calls_response = out

        return res

    def post_v0_1_hangup_call_(self, request: shared.HangupCallParameters, security: operations.PostV01HangupCallSecurity) -> operations.PostV01HangupCallResponse:
        r"""/v0.1/HangupCall/
        Hangs up a specific call
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/HangupCall/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01HangupCallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HangupCallResponse])
                res.hangup_call_response = out

        return res

    def post_v0_1_play_(self, request: shared.PlayParameters, security: operations.PostV01PlaySecurity) -> operations.PostV01PlayResponse:
        r"""/v0.1/Play/
        Plays media into a live call
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/Play/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01PlayResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlayResponse])
                res.play_response = out

        return res

    def post_v0_1_play_stop_(self, request: shared.PlayStopParameters, security: operations.PostV01PlayStopSecurity) -> operations.PostV01PlayStopResponse:
        r"""/v0.1/PlayStop/
        Interrupts media playback on a given call
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/PlayStop/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01PlayStopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlayStopResponse])
                res.play_stop_response = out

        return res

    def post_v0_1_record_start_(self, request: shared.RecordStartParameters, security: operations.PostV01RecordStartSecurity) -> operations.PostV01RecordStartResponse:
        r"""/v0.1/RecordStart/
        Initiates recording of a given call
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/RecordStart/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01RecordStartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RecordStartResponse])
                res.record_start_response = out

        return res

    def post_v0_1_record_stop_(self, request: shared.RecordStopParameters, security: operations.PostV01RecordStopSecurity) -> operations.PostV01RecordStopResponse:
        r"""/v0.1/RecordStop/
        Stops the recording of a given call
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/RecordStop/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01RecordStopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RecordStopResponse])
                res.record_stop_response = out

        return res

    def post_v0_1_schedule_hangup_(self, request: shared.ScheduleHangupParameters, security: operations.PostV01ScheduleHangupSecurity) -> operations.PostV01ScheduleHangupResponse:
        r"""/v0.1/ScheduleHangup/
        Schedules a hangup for a specific call
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/ScheduleHangup/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01ScheduleHangupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScheduleHangupResponse])
                res.schedule_hangup_response = out

        return res

    def post_v0_1_schedule_play_(self, request: shared.SchedulePlayParameters, security: operations.PostV01SchedulePlaySecurity) -> operations.PostV01SchedulePlayResponse:
        r"""/v0.1/SchedulePlay/
        Schedules media playback for a specific call
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/SchedulePlay/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01SchedulePlayResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SchedulePlayResponse])
                res.schedule_play_response = out

        return res

    def post_v0_1_send_digits_(self, request: shared.SendDigitsParameters, security: operations.PostV01SendDigitsSecurity) -> operations.PostV01SendDigitsResponse:
        r"""/v0.1/SendDigits/
        Emits DMTF tones to a call
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/SendDigits/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01SendDigitsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SendDigitsResponse])
                res.send_digits_response = out

        return res

    def post_v0_1_sound_touch_(self, request: shared.SoundTouchParameters, security: operations.PostV01SoundTouchSecurity) -> operations.PostV01SoundTouchResponse:
        r"""/v0.1/SoundTouch/
        Applies SoundTouch effects to a live call
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/SoundTouch/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01SoundTouchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SoundTouchResponse])
                res.sound_touch_response = out

        return res

    def post_v0_1_sound_touch_stop_(self, request: shared.SoundTouchStopParameters, security: operations.PostV01SoundTouchStopSecurity) -> operations.PostV01SoundTouchStopResponse:
        r"""/v0.1/SoundTouchStop/
        Removes SoundTouch effects from a given call
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/SoundTouchStop/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01SoundTouchStopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SoundTouchStopResponse])
                res.sound_touch_stop_response = out

        return res

    def post_v0_1_transfer_call_(self, request: shared.TransferCallParameters, security: operations.PostV01TransferCallSecurity) -> operations.PostV01TransferCallResponse:
        r"""/v0.1/TransferCall/
        Replaces the RestXML flow of a live call
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/TransferCall/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01TransferCallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TransferCallResponse])
                res.transfer_call_response = out

        return res

    