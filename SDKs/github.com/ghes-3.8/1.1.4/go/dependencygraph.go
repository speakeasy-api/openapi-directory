// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
)

// dependencyGraph - Endpoints to access Dependency Graph features.
type dependencyGraph struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newDependencyGraph(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *dependencyGraph {
	return &dependencyGraph{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// DependencyGraphCreateRepositorySnapshot - Create a snapshot of dependencies for a repository
// Create a new snapshot of a repository's dependencies. You must authenticate using an access token with the `repo` scope to use this endpoint for a repository that the requesting user has access to.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependency-graph#create-a-snapshot-of-dependencies-for-a-repository - API method documentation
func (s *dependencyGraph) DependencyGraphCreateRepositorySnapshot(ctx context.Context, request operations.DependencyGraphCreateRepositorySnapshotRequest) (*operations.DependencyGraphCreateRepositorySnapshotResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repos/{owner}/{repo}/dependency-graph/snapshots", request, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Snapshot", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependencyGraphCreateRepositorySnapshotResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 201:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.DependencyGraphCreateRepositorySnapshot201ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.DependencyGraphCreateRepositorySnapshot201ApplicationJSONObject = out
		}
	}

	return res, nil
}

// DependencyGraphDiffRange - Get a diff of the dependencies between commits
// Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
// https://docs.github.com/enterprise-server@3.8/rest/reference/dependency-graph#get-a-diff-of-the-dependencies-between-commits - API method documentation
func (s *dependencyGraph) DependencyGraphDiffRange(ctx context.Context, request operations.DependencyGraphDiffRangeRequest) (*operations.DependencyGraphDiffRangeResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repos/{owner}/{repo}/dependency-graph/compare/{basehead}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DependencyGraphDiffRangeResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		res.Headers = httpRes.Header

		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out []shared.DependencyGraphDiff
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.DependencyGraphDiff = out
		}
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.BasicError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.BasicError = out
		}
	}

	return res, nil
}
