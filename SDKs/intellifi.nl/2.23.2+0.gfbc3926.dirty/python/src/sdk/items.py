"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Items:
    r"""The `items` resource contains data about things that can be tracked using the Brain.
    When an item is detected for the first time by a device connected to the Brain, it will be added to this resource.
    It will then be updated with information about where the item currently is, or where it has been seen for the last time.
    https://intellifi.zendesk.com/hc/en-us/articles/360007502554
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_item(self, request: Any) -> operations.AddItemResponse:
        r"""Create item"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/items'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def delete_item(self, request: operations.DeleteItemRequest) -> operations.DeleteItemResponse:
        r"""Delete item"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteItemRequest, base_url, '/items/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def get_item_by_id(self, request: operations.GetItemByIDRequest) -> operations.GetItemByIDResponse:
        r"""Get item"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetItemByIDRequest, base_url, '/items/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetItemByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.item = out

        return res

    def get_items(self, request: operations.GetItemsRequest) -> operations.GetItemsResponse:
        r"""Get all items"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/items'
        
        query_params = utils.get_query_params(operations.GetItemsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetItemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetItems200ApplicationJSON])
                res.get_items_200_application_json_object = out

        return res

    def update_item(self, request: operations.UpdateItemRequest) -> operations.UpdateItemResponse:
        r"""Update existing item"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateItemRequest, base_url, '/items/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "item_update", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    