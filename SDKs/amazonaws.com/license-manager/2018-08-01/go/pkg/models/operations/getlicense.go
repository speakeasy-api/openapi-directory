// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetLicenseXAmzTargetEnum
type GetLicenseXAmzTargetEnum string

const (
	GetLicenseXAmzTargetEnumAwsLicenseManagerGetLicense GetLicenseXAmzTargetEnum = "AWSLicenseManager.GetLicense"
)

func (e GetLicenseXAmzTargetEnum) ToPointer() *GetLicenseXAmzTargetEnum {
	return &e
}

func (e *GetLicenseXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSLicenseManager.GetLicense":
		*e = GetLicenseXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLicenseXAmzTargetEnum: %v", v)
	}
}

type GetLicenseRequest struct {
	GetLicenseRequest shared.GetLicenseRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetLicenseXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetLicenseResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// AuthorizationException
	AuthorizationException interface{}
	ContentType            string
	// Success
	GetLicenseResponse *shared.GetLicenseResponse
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	// RateLimitExceededException
	RateLimitExceededException interface{}
	StatusCode                 int
	RawResponse                *http.Response
	// ServerInternalException
	ServerInternalException interface{}
	// ValidationException
	ValidationException interface{}
}
