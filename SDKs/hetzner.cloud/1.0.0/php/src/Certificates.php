<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Certificates 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a Certificate
     * 
     * Deletes a Certificate.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCertificatesIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCertificatesIdResponse
     */
	public function deleteCertificatesId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCertificatesIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCertificatesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/certificates/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteCertificatesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCertificatesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get all Certificates
     * 
     * Returns all Certificate objects.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCertificatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCertificatesResponse
     */
	public function getCertificates(
        \OpenAPI\OpenAPI\Models\Operations\GetCertificatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCertificatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/certificates');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCertificatesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCertificatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->certificatesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetCertificatesCertificatesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a Certificate
     * 
     * Gets a specific Certificate object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdResponse
     */
	public function getCertificatesId(
        \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/certificates/{id}', \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->certificateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdCertificateResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Certificate
     * 
     * Creates a new Certificate.
     * 
     * The default type **uploaded** allows for uploading your existing `certificate` and `private_key` in PEM format. You have to monitor its expiration date and handle renewal yourself.
     * 
     * In contrast, type **managed** requests a new Certificate from *Let's Encrypt* for the specified `domain_names`. Only domains managed by *Hetzner DNS* are supported. We handle renewal and timely alert the project owner via email if problems occur.
     * 
     * For type `managed` Certificates the `action` key of the response contains the Action that allows for tracking the issuance process. For type `uploaded` Certificates the `action` is always null.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCertificatesCreateCertificateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCertificatesResponse
     */
	public function postCertificates(
        \OpenAPI\OpenAPI\Models\Operations\PostCertificatesCreateCertificateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCertificatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/certificates');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCertificatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createCertificateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostCertificatesCreateCertificateResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a Certificate
     * 
     * Updates the Certificate properties.
     * 
     * Note that when updating labels, the Certificate’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.
     * 
     * Note: if the Certificate object changes during the request, the response will be a “conflict” error.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutCertificatesIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutCertificatesIdResponse
     */
	public function putCertificatesId(
        \OpenAPI\OpenAPI\Models\Operations\PutCertificatesIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutCertificatesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/certificates/{id}', \OpenAPI\OpenAPI\Models\Operations\PutCertificatesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutCertificatesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->certificateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutCertificatesIdCertificateResponse', 'json');
            }
        }

        return $response;
    }
}