/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class GetAllinvestorAccountsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=x-api-key",
  })
  apiSecretKey: string;
}

export class GetAllinvestorAccountsRequest extends SpeakeasyBase {
  /**
   * multiple account ids as comma seperated string
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=account_id",
  })
  accountId?: string;

  /**
   * multiple financial product ids as comma seperated string
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=financial_product_id",
  })
  financialProductId?: string;

  /**
   * multiple investor ids as comma seperated string
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=investor_id",
  })
  investorId?: string;

  /**
   * Page number for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_number",
  })
  pageNumber?: string;

  /**
   * Page size for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_size",
  })
  pageSize?: string;

  /**
   * multiple statuses as comma seperated string
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=status",
  })
  status?: string;

  /**
   * ApiSecretKey
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-api-key",
  })
  xApiKey: string;
}

/**
 * System error. Retry later. If the error persist, contact WOS support
 */
export class GetAllinvestorAccounts500ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
 */
export class GetAllinvestorAccounts429ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Current status of the original request
 */
export enum GetAllinvestorAccounts409ApplicationJSONStatusEnum {
  Processing = "PROCESSING",
  Complete = "COMPLETE",
}

/**
 * Duplicate request
 */
export class GetAllinvestorAccounts409ApplicationJSON extends SpeakeasyBase {
  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;

  /**
   * Stringified original response body if status is `COMPLETE`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "response" })
  response?: Record<string, any>;

  /**
   * Current status of the original request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetAllinvestorAccounts409ApplicationJSONStatusEnum;
}

/**
 * The specified resource was not found
 */
export class GetAllinvestorAccounts404ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Your authentication information is missing or invalid. Please check the keys are properly set and its correct
 */
export class GetAllinvestorAccounts403ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * You do not have permissions to access this resource.
 */
export class GetAllinvestorAccounts401ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Request is not complete and may have one or more validations errors. Please check the error message and the code
 */
export class GetAllinvestorAccounts400ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export enum GetAllinvestorAccounts200ApplicationJSONInvestorAccountsAccountTypeEnum {
  X = "X",
  Z = "Z",
  B = "B",
  G = "G",
}

/**
 * account status
 */
export enum GetAllinvestorAccounts200ApplicationJSONInvestorAccountsStatusEnum {
  Active = "active",
}

export class GetAllinvestorAccounts200ApplicationJSONInvestorAccounts extends SpeakeasyBase {
  /**
   * investor account id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_id" })
  accountId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "account_type" })
  accountType?: GetAllinvestorAccounts200ApplicationJSONInvestorAccountsAccountTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * does the Account have contributions for the current tax year
   */
  @SpeakeasyMetadata()
  @Expose({ name: "current_year_subscription" })
  currentYearSubscription?: boolean;

  /**
   * total contribution by investor for account for the current tax year
   */
  @SpeakeasyMetadata()
  @Expose({ name: "current_year_total_contribution" })
  currentYearTotalContribution?: string;

  /**
   * total withdrawal by investor for account for the current tax year
   */
  @SpeakeasyMetadata()
  @Expose({ name: "current_year_total_withdrawals" })
  currentYearTotalWithdrawals?: string;

  /**
   * the first date the account was opened by the investor
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_of_account_activation" })
  dateOfAccountActivation?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "financial_product_id" })
  financialProductId: string;

  /**
   * date of the first subscription received for the current tax year
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first_subscription_date_for_current_year" })
  firstSubscriptionDateForCurrentYear?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "investor_id" })
  investorId: string;

  /**
   * account status
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetAllinvestorAccounts200ApplicationJSONInvestorAccountsStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;
}

/**
 * Array of investor accounts
 */
export class GetAllinvestorAccounts200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: GetAllinvestorAccounts200ApplicationJSONInvestorAccounts,
  })
  @Expose({ name: "investor_accounts" })
  @Type(() => GetAllinvestorAccounts200ApplicationJSONInvestorAccounts)
  investorAccounts?: GetAllinvestorAccounts200ApplicationJSONInvestorAccounts[];

  @SpeakeasyMetadata()
  @Expose({ name: "next_page_available" })
  nextPageAvailable?: boolean;
}

export class GetAllinvestorAccountsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * success
   */
  @SpeakeasyMetadata()
  getAllinvestorAccounts200ApplicationJSONObject?: GetAllinvestorAccounts200ApplicationJSON;

  /**
   * Request is not complete and may have one or more validations errors. Please check the error message and the code
   */
  @SpeakeasyMetadata()
  getAllinvestorAccounts400ApplicationJSONObject?: GetAllinvestorAccounts400ApplicationJSON;

  /**
   * You do not have permissions to access this resource.
   */
  @SpeakeasyMetadata()
  getAllinvestorAccounts401ApplicationJSONObject?: GetAllinvestorAccounts401ApplicationJSON;

  /**
   * Your authentication information is missing or invalid. Please check the keys are properly set and its correct
   */
  @SpeakeasyMetadata()
  getAllinvestorAccounts403ApplicationJSONObject?: GetAllinvestorAccounts403ApplicationJSON;

  /**
   * The specified resource was not found
   */
  @SpeakeasyMetadata()
  getAllinvestorAccounts404ApplicationJSONObject?: GetAllinvestorAccounts404ApplicationJSON;

  /**
   * Duplicate request
   */
  @SpeakeasyMetadata()
  getAllinvestorAccounts409ApplicationJSONObject?: GetAllinvestorAccounts409ApplicationJSON;

  /**
   * You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
   */
  @SpeakeasyMetadata()
  getAllinvestorAccounts429ApplicationJSONObject?: GetAllinvestorAccounts429ApplicationJSON;

  /**
   * System error. Retry later. If the error persist, contact WOS support
   */
  @SpeakeasyMetadata()
  getAllinvestorAccounts500ApplicationJSONObject?: GetAllinvestorAccounts500ApplicationJSON;
}
