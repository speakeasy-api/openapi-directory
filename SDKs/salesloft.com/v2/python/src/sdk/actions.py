"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Actions:
    r"""Actions"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_v2_actions_json(self, request: operations.GetV2ActionsJSONRequest) -> operations.GetV2ActionsJSONResponse:
        r"""List actions
        Fetches multiple action records. The records can be filtered, paged, and sorted according to
        the respective parameters. Only actions that are currently \"in_progess\" will be returned by
        this endpoint.
        
        If the requester is not an admin, this endpoint will only return actions belonging to the requester.
        If the request is an admin, this endpoint will return actions for the entire team. Additionaly, an admin
        may use the user_guid parameter to request actions that belong to specific users on the team.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/actions.json'
        
        query_params = utils.get_query_params(operations.GetV2ActionsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2ActionsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_v2_actions_id_json(self, request: operations.GetV2ActionsIDJSONRequest) -> operations.GetV2ActionsIDJSONResponse:
        r"""Fetch an action
        Fetches an action, by ID only.
        This endpoint will only return actions that are in_progress or pending_activity.
        Once an action is complete, the request for that action will return a 404 status code.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2ActionsIDJSONRequest, base_url, '/v2/actions/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2ActionsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    