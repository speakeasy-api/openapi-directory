/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * How the auto-merging process should resolve conflicts between different profiles.
 */
export class GetAutoMergingPreviewRequestBodyConflictResolution extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ConflictResolvingModel" })
  conflictResolvingModel?: shared.ConflictResolvingModelEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "SourceName" })
  sourceName?: string;
}

/**
 * The matching criteria to be used during the auto-merging process.
 */
export class GetAutoMergingPreviewRequestBodyConsolidation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "MatchingAttributesList" })
  matchingAttributesList?: string[][];
}

export class GetAutoMergingPreviewRequestBody extends SpeakeasyBase {
  /**
   * How the auto-merging process should resolve conflicts between different profiles.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ConflictResolution" })
  @Type(() => GetAutoMergingPreviewRequestBodyConflictResolution)
  conflictResolution: GetAutoMergingPreviewRequestBodyConflictResolution;

  /**
   * The matching criteria to be used during the auto-merging process.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Consolidation" })
  @Type(() => GetAutoMergingPreviewRequestBodyConsolidation)
  consolidation: GetAutoMergingPreviewRequestBodyConsolidation;

  /**
   * Minimum confidence score required for profiles within a matching group to be merged during the auto-merge process.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinAllowedConfidenceScoreForMerging" })
  minAllowedConfidenceScoreForMerging?: number;
}

export class GetAutoMergingPreviewRequest extends SpeakeasyBase {
  /**
   * The unique name of the domain.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=DomainName",
  })
  domainName: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: GetAutoMergingPreviewRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GetAutoMergingPreviewResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  getAutoMergingPreviewResponse?: shared.GetAutoMergingPreviewResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
