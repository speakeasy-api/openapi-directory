/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * NfsExportOptions - NFS export options specifications.
 */
public class NfsExportOptions {
    /**
     * Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessMode")
    public NfsExportOptionsAccessModeEnum accessMode;

    public NfsExportOptions withAccessMode(NfsExportOptionsAccessModeEnum accessMode) {
        this.accessMode = accessMode;
        return this;
    }
    
    /**
     * An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anonGid")
    public String anonGid;

    public NfsExportOptions withAnonGid(String anonGid) {
        this.anonGid = anonGid;
        return this;
    }
    
    /**
     * An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anonUid")
    public String anonUid;

    public NfsExportOptions withAnonUid(String anonUid) {
        this.anonUid = anonUid;
        return this;
    }
    
    /**
     * List of either an IPv4 addresses in the format `{octet1}.{octet2}.{octet3}.{octet4}` or CIDR ranges in the format `{octet1}.{octet2}.{octet3}.{octet4}/{mask size}` which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipRanges")
    public String[] ipRanges;

    public NfsExportOptions withIpRanges(String[] ipRanges) {
        this.ipRanges = ipRanges;
        return this;
    }
    
    /**
     * The security flavors allowed for mount operations. The default is AUTH_SYS.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("securityFlavors")
    public NfsExportOptionsSecurityFlavorsEnum[] securityFlavors;

    public NfsExportOptions withSecurityFlavors(NfsExportOptionsSecurityFlavorsEnum[] securityFlavors) {
        this.securityFlavors = securityFlavors;
        return this;
    }
    
    /**
     * Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("squashMode")
    public NfsExportOptionsSquashModeEnum squashMode;

    public NfsExportOptions withSquashMode(NfsExportOptionsSquashModeEnum squashMode) {
        this.squashMode = squashMode;
        return this;
    }
    
    public NfsExportOptions(){}
}
