// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// WaterfallChartSpecStackedTypeEnum - The stacked type.
type WaterfallChartSpecStackedTypeEnum string

const (
	WaterfallChartSpecStackedTypeEnumWaterfallStackedTypeUnspecified WaterfallChartSpecStackedTypeEnum = "WATERFALL_STACKED_TYPE_UNSPECIFIED"
	WaterfallChartSpecStackedTypeEnumStacked                         WaterfallChartSpecStackedTypeEnum = "STACKED"
	WaterfallChartSpecStackedTypeEnumSequential                      WaterfallChartSpecStackedTypeEnum = "SEQUENTIAL"
)

func (e WaterfallChartSpecStackedTypeEnum) ToPointer() *WaterfallChartSpecStackedTypeEnum {
	return &e
}

func (e *WaterfallChartSpecStackedTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WATERFALL_STACKED_TYPE_UNSPECIFIED":
		fallthrough
	case "STACKED":
		fallthrough
	case "SEQUENTIAL":
		*e = WaterfallChartSpecStackedTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WaterfallChartSpecStackedTypeEnum: %v", v)
	}
}

// WaterfallChartSpec - A waterfall chart.
type WaterfallChartSpec struct {
	// Properties that describe the style of a line.
	ConnectorLineStyle *LineStyle `json:"connectorLineStyle,omitempty"`
	// The domain of a waterfall chart.
	Domain *WaterfallChartDomain `json:"domain,omitempty"`
	// True to interpret the first value as a total.
	FirstValueIsTotal *bool `json:"firstValueIsTotal,omitempty"`
	// True to hide connector lines between columns.
	HideConnectorLines *bool `json:"hideConnectorLines,omitempty"`
	// The data this waterfall chart is visualizing.
	Series []WaterfallChartSeries `json:"series,omitempty"`
	// The stacked type.
	StackedType *WaterfallChartSpecStackedTypeEnum `json:"stackedType,omitempty"`
	// Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph.
	TotalDataLabel *DataLabel `json:"totalDataLabel,omitempty"`
}
