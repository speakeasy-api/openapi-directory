/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class DesignerTemplate {
    @JsonProperty("components")
    public java.util.Map<String, Object>[] components;

    public DesignerTemplate withComponents(java.util.Map<String, Object>[] components) {
        this.components = components;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public DesignerTemplate withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonProperty("css")
    public String css;

    public DesignerTemplate withCss(String css) {
        this.css = css;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("footer_html")
    public String footerHtml;

    public DesignerTemplate withFooterHtml(String footerHtml) {
        this.footerHtml = footerHtml;
        return this;
    }
    
    /**
     * An enumeration.
     */
    @JsonProperty("format")
    public FormatEnum format;

    public DesignerTemplate withFormat(FormatEnum format) {
        this.format = format;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("header_html")
    public String headerHtml;

    public DesignerTemplate withHeaderHtml(String headerHtml) {
        this.headerHtml = headerHtml;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public DesignerTemplate withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonProperty("margin")
    public Margin margin;

    public DesignerTemplate withMargin(Margin margin) {
        this.margin = margin;
        return this;
    }
    
    @JsonProperty("name")
    public String name;

    public DesignerTemplate withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * An enumeration.
     */
    @JsonProperty("orientation")
    public OrientationEnum orientation;

    public DesignerTemplate withOrientation(OrientationEnum orientation) {
        this.orientation = orientation;
        return this;
    }
    
    @JsonProperty("preview_payload")
    public java.util.Map<String, Object> previewPayload;

    public DesignerTemplate withPreviewPayload(java.util.Map<String, Object> previewPayload) {
        this.previewPayload = previewPayload;
        return this;
    }
    
    @JsonProperty("template_html")
    public String templateHtml;

    public DesignerTemplate withTemplateHtml(String templateHtml) {
        this.templateHtml = templateHtml;
        return this;
    }
    
    public DesignerTemplate(@JsonProperty("components") java.util.Map<String, Object>[] components, @JsonProperty("css") String css, @JsonProperty("format") FormatEnum format, @JsonProperty("margin") Margin margin, @JsonProperty("name") String name, @JsonProperty("orientation") OrientationEnum orientation, @JsonProperty("preview_payload") java.util.Map<String, Object> previewPayload, @JsonProperty("template_html") String templateHtml) {
        this.components = components;
        this.css = css;
        this.format = format;
        this.margin = margin;
        this.name = name;
        this.orientation = orientation;
        this.previewPayload = previewPayload;
        this.templateHtml = templateHtml;
  }
}
