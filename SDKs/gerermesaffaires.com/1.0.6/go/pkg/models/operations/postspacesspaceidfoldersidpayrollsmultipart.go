// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDPayrollsMultipartSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnum = "permanent"
)

func (e *PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccounting struct {
	AccountedOn *string                                                                    `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                    `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataFile struct {
	File    string `multipartForm:"name=File"`
	Content []byte `multipartForm:"content"`
}

// PostSpacesSpaceIDFoldersIDPayrollsMultipartFormData1 - Payroll to add or to generate
type PostSpacesSpaceIDFoldersIDPayrollsMultipartFormData1 struct {
	Accounting            *PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataAccounting `multipartForm:"name=Accounting,json"`
	Author                *string                                                        `multipartForm:"name=Author"`
	Begin                 *string                                                        `multipartForm:"name=Begin"`
	Code                  *string                                                        `multipartForm:"name=Code"`
	Comment               *string                                                        `multipartForm:"name=Comment"`
	Date                  *string                                                        `multipartForm:"name=Date"`
	EmployeeContributions *float32                                                       `multipartForm:"name=EmployeeContributions"`
	EmployerContributions *float32                                                       `multipartForm:"name=EmployerContributions"`
	End                   *string                                                        `multipartForm:"name=End"`
	File                  PostSpacesSpaceIDFoldersIDPayrollsMultipartFormDataFile        `multipartForm:"file"`
	NetAmount             *float32                                                       `multipartForm:"name=NetAmount"`
	Title                 string                                                         `multipartForm:"name=Title"`
	TotalGrossAmount      *float32                                                       `multipartForm:"name=TotalGrossAmount"`
}

type PostSpacesSpaceIDFoldersIDPayrollsMultipartRequest struct {
	// Payroll to add or to generate
	RequestBody PostSpacesSpaceIDFoldersIDPayrollsMultipartFormData1 `request:"mediaType=multipart/form-data"`
	// Id of the folder social
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDPayrollsMultipart201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDPayrollsMultipart201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDPayrollsMultipartResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDPayrollsMultipart201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDPayrollsMultipart201ApplicationJSON
}
