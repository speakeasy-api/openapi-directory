<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * AuditSuppression -  Filters out specific findings of a Device Defender audit. 
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class AuditSuppression
{
    /**
     * An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
     * 
     * @var string $checkName
     */
	#[\JMS\Serializer\Annotation\SerializedName('checkName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $checkName;
    
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('expirationDate')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $expirationDate = null;
    
    /**
     * Information that identifies the noncompliant resource.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\ResourceIdentifier $resourceIdentifier
     */
	#[\JMS\Serializer\Annotation\SerializedName('resourceIdentifier')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ResourceIdentifier')]
    public ResourceIdentifier $resourceIdentifier;
    
	#[\JMS\Serializer\Annotation\SerializedName('suppressIndefinitely')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $suppressIndefinitely = null;
    
	public function __construct()
	{
		$this->checkName = "";
		$this->description = null;
		$this->expirationDate = null;
		$this->resourceIdentifier = new \OpenAPI\OpenAPI\Models\Shared\ResourceIdentifier();
		$this->suppressIndefinitely = null;
	}
}
