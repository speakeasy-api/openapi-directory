// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ResourceRelationshipsDirectFileData struct {
	ID   *int    `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

type ResourceRelationshipsDirectFile struct {
	Data *ResourceRelationshipsDirectFileData `json:"data,omitempty"`
}

type ResourceRelationshipsNotificationsData struct {
	ID   *int    `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

type ResourceRelationshipsNotifications struct {
	Data *ResourceRelationshipsNotificationsData `json:"data,omitempty"`
}

type ResourceRelationshipsParentResourceData struct {
	ID   *int64  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

type ResourceRelationshipsParentResource struct {
	Data *ResourceRelationshipsParentResourceData `json:"data,omitempty"`
}

type ResourceRelationshipsShareData struct {
	ID   *int    `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

type ResourceRelationshipsShare struct {
	Data *ResourceRelationshipsShareData `json:"data,omitempty"`
}

type ResourceRelationships struct {
	DirectFile     *ResourceRelationshipsDirectFile     `json:"directFile,omitempty"`
	Notifications  []ResourceRelationshipsNotifications `json:"notifications,omitempty"`
	ParentResource *ResourceRelationshipsParentResource `json:"parentResource,omitempty"`
	Share          *ResourceRelationshipsShare          `json:"share,omitempty"`
}

// ResourceTypeEnum - Type of item. "resource"
type ResourceTypeEnum string

const (
	ResourceTypeEnumResource ResourceTypeEnum = "resource"
)

func (e *ResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "resource":
		*e = ResourceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ResourceTypeEnum: %s", s)
	}
}

// Resource - All properties of the resource.
type Resource struct {
	// Attributes of resource
	Attributes    *ResourceAttributes    `json:"attributes,omitempty"`
	ID            *int64                 `json:"id,omitempty"`
	Relationships *ResourceRelationships `json:"relationships,omitempty"`
	// Type of item. "resource"
	Type *ResourceTypeEnum `json:"type,omitempty"`
}
