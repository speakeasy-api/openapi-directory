/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RegisterParameters - Parameters required to register a new domain.
 */
public class RegisterParameters {
    /**
     * Indicates whether the domain is available for registration. This value is accurate when obtained by calling `RetrieveRegisterParameters`, but is approximate when obtained by calling `SearchDomains`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availability")
    public RegisterParametersAvailabilityEnum availability;

    public RegisterParameters withAvailability(RegisterParametersAvailabilityEnum availability) {
        this.availability = availability;
        return this;
    }
    
    /**
     * The domain name. Unicode domain names are expressed in Punycode format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domainName")
    public String domainName;

    public RegisterParameters withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }
    
    /**
     * Notices about special properties of the domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domainNotices")
    public RegisterParametersDomainNoticesEnum[] domainNotices;

    public RegisterParameters withDomainNotices(RegisterParametersDomainNoticesEnum[] domainNotices) {
        this.domainNotices = domainNotices;
        return this;
    }
    
    /**
     * Contact privacy options that the domain supports.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportedPrivacy")
    public RegisterParametersSupportedPrivacyEnum[] supportedPrivacy;

    public RegisterParameters withSupportedPrivacy(RegisterParametersSupportedPrivacyEnum[] supportedPrivacy) {
        this.supportedPrivacy = supportedPrivacy;
        return this;
    }
    
    /**
     * Represents an amount of money with its currency type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("yearlyPrice")
    public Money yearlyPrice;

    public RegisterParameters withYearlyPrice(Money yearlyPrice) {
        this.yearlyPrice = yearlyPrice;
        return this;
    }
    
    public RegisterParameters(){}
}
