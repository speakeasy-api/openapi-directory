// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateCollaborationHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateCollaborationRequestBodyDataEncryptionMetadata - The settings for client-side encryption for cryptographic computing.
type CreateCollaborationRequestBodyDataEncryptionMetadata struct {
	AllowCleartext                        *bool `json:"allowCleartext,omitempty"`
	AllowDuplicates                       *bool `json:"allowDuplicates,omitempty"`
	AllowJoinsOnColumnsWithDifferentNames *bool `json:"allowJoinsOnColumnsWithDifferentNames,omitempty"`
	PreserveNulls                         *bool `json:"preserveNulls,omitempty"`
}

// CreateCollaborationRequestBodyQueryLogStatusEnum - An indicator as to whether query logging has been enabled or disabled for the collaboration.
type CreateCollaborationRequestBodyQueryLogStatusEnum string

const (
	CreateCollaborationRequestBodyQueryLogStatusEnumEnabled  CreateCollaborationRequestBodyQueryLogStatusEnum = "ENABLED"
	CreateCollaborationRequestBodyQueryLogStatusEnumDisabled CreateCollaborationRequestBodyQueryLogStatusEnum = "DISABLED"
)

func (e *CreateCollaborationRequestBodyQueryLogStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ENABLED":
		fallthrough
	case "DISABLED":
		*e = CreateCollaborationRequestBodyQueryLogStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCollaborationRequestBodyQueryLogStatusEnum: %s", s)
	}
}

type CreateCollaborationRequestBody struct {
	// The display name of the collaboration creator.
	CreatorDisplayName string `json:"creatorDisplayName"`
	// The abilities granted to the collaboration creator.
	CreatorMemberAbilities []shared.MemberAbilityEnum `json:"creatorMemberAbilities"`
	// The settings for client-side encryption for cryptographic computing.
	DataEncryptionMetadata *CreateCollaborationRequestBodyDataEncryptionMetadata `json:"dataEncryptionMetadata,omitempty"`
	// A description of the collaboration provided by the collaboration owner.
	Description string `json:"description"`
	// A list of initial members, not including the creator. This list is immutable.
	Members []shared.MemberSpecification `json:"members"`
	// The display name for a collaboration.
	Name string `json:"name"`
	// An indicator as to whether query logging has been enabled or disabled for the collaboration.
	QueryLogStatus CreateCollaborationRequestBodyQueryLogStatusEnum `json:"queryLogStatus"`
	// Map of tags assigned to a resource
	Tags map[string]string `json:"tags,omitempty"`
}

type CreateCollaborationRequest struct {
	Headers CreateCollaborationHeaders
	Request CreateCollaborationRequestBody `request:"mediaType=application/json"`
}

type CreateCollaborationResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// Success
	CreateCollaborationOutput *shared.CreateCollaborationOutput
	// InternalServerException
	InternalServerException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
