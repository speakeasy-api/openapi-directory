// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworkWirelessSettingsRequest struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// GetNetworkWirelessSettings200ApplicationJSONNamedVlansPoolDhcpMonitoring - Named VLAN Pool DHCP Monitoring settings.
type GetNetworkWirelessSettings200ApplicationJSONNamedVlansPoolDhcpMonitoring struct {
	// The duration in minutes that devices will refrain from using dirty VLANs before adding them back to the pool.
	Duration *int64 `json:"duration,omitempty"`
	// Whether or not devices using named VLAN pools should remove dirty VLANs from the pool, thereby preventing clients from being assigned to VLANs where they would be unable to obtain an IP address via DHCP
	Enabled *bool `json:"enabled,omitempty"`
}

// GetNetworkWirelessSettings200ApplicationJSONNamedVlans - Named VLAN settings for wireless networks.
type GetNetworkWirelessSettings200ApplicationJSONNamedVlans struct {
	// Named VLAN Pool DHCP Monitoring settings.
	PoolDhcpMonitoring *GetNetworkWirelessSettings200ApplicationJSONNamedVlansPoolDhcpMonitoring `json:"poolDhcpMonitoring,omitempty"`
}

// GetNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum - The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
type GetNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum string

const (
	GetNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnumMinimizeClientDowntime GetNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum = "minimizeClientDowntime"
	GetNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnumMinimizeUpgradeTime    GetNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum = "minimizeUpgradeTime"
)

func (e *GetNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "minimizeClientDowntime":
		fallthrough
	case "minimizeUpgradeTime":
		*e = GetNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum: %s", s)
	}
}

// GetNetworkWirelessSettings200ApplicationJSON - Successful operation
type GetNetworkWirelessSettings200ApplicationJSON struct {
	// Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
	Ipv6BridgeEnabled *bool `json:"ipv6BridgeEnabled,omitempty"`
	// Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
	LedLightsOn *bool `json:"ledLightsOn,omitempty"`
	// Toggle for enabling or disabling location analytics for your network
	LocationAnalyticsEnabled *bool `json:"locationAnalyticsEnabled,omitempty"`
	// Toggle for enabling or disabling meshing in a network
	MeshingEnabled *bool `json:"meshingEnabled,omitempty"`
	// Named VLAN settings for wireless networks.
	NamedVlans *GetNetworkWirelessSettings200ApplicationJSONNamedVlans `json:"namedVlans,omitempty"`
	// The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
	UpgradeStrategy *GetNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum `json:"upgradeStrategy,omitempty"`
}

type GetNetworkWirelessSettingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkWirelessSettings200ApplicationJSONObject *GetNetworkWirelessSettings200ApplicationJSON
}
