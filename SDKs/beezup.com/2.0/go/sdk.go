// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://api.beezup.com",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// SDK - # The REST API of BeezUP system
// ## Overview
// The REST APIs provide programmatic access to read and write BeezUP data.
// Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !
//
// The main features are:
// - Register and manage your account
// - Create and manage and share your stores with your friends/co-workers.
// - Import your product catalog and schedule the auto importation
// - Search the channels your want to use
// - Configure your channels for your catalogs to export your product information:
//   - cost and general settings
//   - category and columns mappings
//   - your will be able to create and manage your custom column
//   - put in place exlusion filters based on simple conditions on your product data
//   - override product values
//   - get product vision for a channel catalog scope
//
// - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product.
// - Automatize your optimisation by using rules!
// - And of course... Manage your orders harvested from all your marketplaces:
//   - Synchronize your orders in an uniformized way
//   - Get the available actions and update the order status
//
// - ...and more!
//
// ## Authentication credentials
// The public API with the base path **/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials.
// We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).
//
// The user API with the base path **/v2/user** requires a token which is available on this page:
// https://go.beezup.com/Account/MyAccount
//
// ## Things to keep in mind
// ### API Rate Limits
// - The BeezUP REST API is limited to 100 calls/minute.
//
// ### Media type
// The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.
//
// ### Required content type
// The required and default encoding for the request and responses is UTF8.
//
// ### Required date time format
// All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.
//
// ### Base URL
// The Base URL of the BeezUP API Order Management REST API conforms to the following template.
//
// https://api.beezup.com
//
// All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.
//
// You can test our API on https://api-docs.beezup.com/swagger-ui\\
// You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
// https://api-docs.beezup.com/ - Find the documentation for BeezUP's API here
type SDK struct {
	AnalyticsGlobal                              *analyticsGlobal
	AnalyticsOptimisations                       *analyticsOptimisations
	AnalyticsReports                             *analyticsReports
	AnalyticsRules                               *analyticsRules
	AnalyticsStatistics                          *analyticsStatistics
	AnalyticsTracking                            *analyticsTracking
	CatalogsAuto                                 *catalogsAuto
	CatalogsCatalog                              *catalogsCatalog
	CatalogsGlobal                               *catalogsGlobal
	CatalogsImportationCatalogInfo               *catalogsImportationCatalogInfo
	CatalogsImportationProcess                   *catalogsImportationProcess
	ChannelCatalogsCategories                    *channelCatalogsCategories
	ChannelCatalogsColumnMappings                *channelCatalogsColumnMappings
	ChannelCatalogsExclusionFilters              *channelCatalogsExclusionFilters
	ChannelCatalogsExportations                  *channelCatalogsExportations
	ChannelCatalogsGlobal                        *channelCatalogsGlobal
	ChannelCatalogsLegacyTrackingGlobal          *channelCatalogsLegacyTrackingGlobal
	ChannelCatalogsProducts                      *channelCatalogsProducts
	ChannelCatalogsProductsOptimisation          *channelCatalogsProductsOptimisation
	ChannelCatalogsProductsOverrides             *channelCatalogsProductsOverrides
	ChannelCatalogsSettings                      *channelCatalogsSettings
	ChannelsChannelsGlobal                       *channelsChannelsGlobal
	CustomerAccount                              *customerAccount
	CustomerAlerts                               *customerAlerts
	CustomerContracts                            *customerContracts
	CustomerFriends                              *customerFriends
	CustomerGlobal                               *customerGlobal
	CustomerInvoices                             *customerInvoices
	CustomerRights                               *customerRights
	CustomerSecurity                             *customerSecurity
	CustomerShares                               *customerShares
	CustomerStores                               *customerStores
	MarketplacesChannelCatalogsGlobal            *marketplacesChannelCatalogsGlobal
	MarketplacesChannelCatalogsPublications      *marketplacesChannelCatalogsPublications
	MarketplacesChannelCatalogsSettings          *marketplacesChannelCatalogsSettings
	MarketplacesOrdersAutoTransitions            *marketplacesOrdersAutoTransitions
	MarketplacesOrdersBatches                    *marketplacesOrdersBatches
	MarketplacesOrdersExports                    *marketplacesOrdersExports
	MarketplacesOrdersGlobal                     *marketplacesOrdersGlobal
	MarketplacesOrdersList                       *marketplacesOrdersList
	MarketplacesOrdersOrder                      *marketplacesOrdersOrder
	MarketplacesOrdersSubscriptionsSubscriptions *marketplacesOrdersSubscriptionsSubscriptions
	MarketplacesOrdersV3Batches                  *marketplacesOrdersV3Batches
	MarketplacesOrdersV3Global                   *marketplacesOrdersV3Global
	MarketplacesOrdersV3List                     *marketplacesOrdersV3List
	MarketplacesOrdersV3Order                    *marketplacesOrdersV3Order
	OMInvoiceAPIGeneration                       *omInvoiceAPIGeneration
	OMInvoiceAPISettings                         *omInvoiceAPISettings
	PublicChannelsPublicChannels                 *publicChannelsPublicChannels
	PublicListOfValuesLOV                        *publicListOfValuesLOV
	PublicSecuritySecurity                       *publicSecuritySecurity
	UserListOfValuesLOV                          *userListOfValuesLOV

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient

	_serverURL  string
	_language   string
	_sdkVersion string
	_genVersion string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		sdk._securityClient = sdk._defaultClient
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.AnalyticsGlobal = newAnalyticsGlobal(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.AnalyticsOptimisations = newAnalyticsOptimisations(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.AnalyticsReports = newAnalyticsReports(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.AnalyticsRules = newAnalyticsRules(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.AnalyticsStatistics = newAnalyticsStatistics(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.AnalyticsTracking = newAnalyticsTracking(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CatalogsAuto = newCatalogsAuto(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CatalogsCatalog = newCatalogsCatalog(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CatalogsGlobal = newCatalogsGlobal(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CatalogsImportationCatalogInfo = newCatalogsImportationCatalogInfo(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CatalogsImportationProcess = newCatalogsImportationProcess(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ChannelCatalogsCategories = newChannelCatalogsCategories(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ChannelCatalogsColumnMappings = newChannelCatalogsColumnMappings(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ChannelCatalogsExclusionFilters = newChannelCatalogsExclusionFilters(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ChannelCatalogsExportations = newChannelCatalogsExportations(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ChannelCatalogsGlobal = newChannelCatalogsGlobal(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ChannelCatalogsLegacyTrackingGlobal = newChannelCatalogsLegacyTrackingGlobal(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ChannelCatalogsProducts = newChannelCatalogsProducts(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ChannelCatalogsProductsOptimisation = newChannelCatalogsProductsOptimisation(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ChannelCatalogsProductsOverrides = newChannelCatalogsProductsOverrides(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ChannelCatalogsSettings = newChannelCatalogsSettings(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ChannelsChannelsGlobal = newChannelsChannelsGlobal(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CustomerAccount = newCustomerAccount(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CustomerAlerts = newCustomerAlerts(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CustomerContracts = newCustomerContracts(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CustomerFriends = newCustomerFriends(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CustomerGlobal = newCustomerGlobal(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CustomerInvoices = newCustomerInvoices(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CustomerRights = newCustomerRights(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CustomerSecurity = newCustomerSecurity(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CustomerShares = newCustomerShares(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CustomerStores = newCustomerStores(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MarketplacesChannelCatalogsGlobal = newMarketplacesChannelCatalogsGlobal(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MarketplacesChannelCatalogsPublications = newMarketplacesChannelCatalogsPublications(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MarketplacesChannelCatalogsSettings = newMarketplacesChannelCatalogsSettings(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MarketplacesOrdersAutoTransitions = newMarketplacesOrdersAutoTransitions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MarketplacesOrdersBatches = newMarketplacesOrdersBatches(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MarketplacesOrdersExports = newMarketplacesOrdersExports(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MarketplacesOrdersGlobal = newMarketplacesOrdersGlobal(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MarketplacesOrdersList = newMarketplacesOrdersList(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MarketplacesOrdersOrder = newMarketplacesOrdersOrder(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MarketplacesOrdersSubscriptionsSubscriptions = newMarketplacesOrdersSubscriptionsSubscriptions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MarketplacesOrdersV3Batches = newMarketplacesOrdersV3Batches(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MarketplacesOrdersV3Global = newMarketplacesOrdersV3Global(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MarketplacesOrdersV3List = newMarketplacesOrdersV3List(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MarketplacesOrdersV3Order = newMarketplacesOrdersV3Order(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.OMInvoiceAPIGeneration = newOMInvoiceAPIGeneration(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.OMInvoiceAPISettings = newOMInvoiceAPISettings(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.PublicChannelsPublicChannels = newPublicChannelsPublicChannels(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.PublicListOfValuesLOV = newPublicListOfValuesLOV(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.PublicSecuritySecurity = newPublicSecuritySecurity(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.UserListOfValuesLOV = newUserListOfValuesLOV(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
