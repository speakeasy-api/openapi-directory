"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetInventoryRequest:
    
    sku: str = dataclasses.field(metadata={'query_param': { 'field_name': 'sku', 'style': 'form', 'explode': True }})
    r"""An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \\"'\\", '(', ')', '*', '+', ',', ';', '=', ‘ ’, '{', '}' as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded."""  
    wm_qos_correlation_id: str = dataclasses.field(metadata={'header': { 'field_name': 'WM_QOS.CORRELATION_ID', 'style': 'simple', 'explode': False }})
    r"""A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID"""  
    wm_sec_access_token: str = dataclasses.field(metadata={'header': { 'field_name': 'WM_SEC.ACCESS_TOKEN', 'style': 'simple', 'explode': False }})
    r"""The access token retrieved in the Token API call"""  
    wm_svc_name: str = dataclasses.field(metadata={'header': { 'field_name': 'WM_SVC.NAME', 'style': 'simple', 'explode': False }})
    r"""Walmart Service Name"""  
    ship_node: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'shipNode', 'style': 'form', 'explode': True }})
    r"""The shipNode for which the inventory is requested"""  
    wm_consumer_channel_type: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'WM_CONSUMER.CHANNEL.TYPE', 'style': 'simple', 'explode': False }})
    r"""A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding"""  
    
class GetInventory200ApplicationXMLQuantityUnitEnum(str, Enum):
    r"""The unit of measurement. Example: 'EACH'"""
    EACH = 'EACH'


@dataclasses.dataclass
class GetInventory200ApplicationXMLQuantity:
    r"""Quantity that has been ordered by the customers but not yet shipped"""
    
    amount: float = dataclasses.field()
    r"""Inventory Count"""  
    unit: GetInventory200ApplicationXMLQuantityUnitEnum = dataclasses.field()
    r"""The unit of measurement. Example: 'EACH'"""  
    

@dataclasses.dataclass
class GetInventory200ApplicationXML:
    r"""Successful Operation"""
    
    quantity: GetInventory200ApplicationXMLQuantity = dataclasses.field()
    r"""Quantity that has been ordered by the customers but not yet shipped"""  
    sku: str = dataclasses.field()
    r"""A seller-provided Product ID. Response will have decoded value."""  
    
class GetInventory200ApplicationJSONQuantityUnitEnum(str, Enum):
    r"""The unit of measurement. Example: 'EACH'"""
    EACH = 'EACH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInventory200ApplicationJSONQuantity:
    r"""Quantity that has been ordered by the customers but not yet shipped"""
    
    amount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""Inventory Count"""  
    unit: GetInventory200ApplicationJSONQuantityUnitEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit') }})
    r"""The unit of measurement. Example: 'EACH'"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInventory200ApplicationJSON:
    r"""Successful Operation"""
    
    quantity: GetInventory200ApplicationJSONQuantity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity') }})
    r"""Quantity that has been ordered by the customers but not yet shipped"""  
    sku: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku') }})
    r"""A seller-provided Product ID. Response will have decoded value."""  
    

@dataclasses.dataclass
class GetInventoryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    get_inventory_200_application_json_object: Optional[GetInventory200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful Operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    