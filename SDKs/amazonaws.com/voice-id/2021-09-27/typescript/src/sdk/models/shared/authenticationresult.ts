/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AuthenticationConfiguration } from "./authenticationconfiguration";
import { AuthenticationDecisionEnum } from "./authenticationdecisionenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The authentication result produced by Voice ID, processed against the current session state and streamed audio of the speaker.
 */
export class AuthenticationResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AudioAggregationEndedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  audioAggregationEndedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "AudioAggregationStartedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  audioAggregationStartedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "AuthenticationResultId" })
  authenticationResultId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Configuration" })
  @Type(() => AuthenticationConfiguration)
  configuration?: AuthenticationConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "CustomerSpeakerId" })
  customerSpeakerId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Decision" })
  decision?: AuthenticationDecisionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "GeneratedSpeakerId" })
  generatedSpeakerId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Score" })
  score?: number;
}
