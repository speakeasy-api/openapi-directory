<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Earnings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add/Update Earning
     * 
     * Add/Update Earning API sends new or updated employee earnings information directly to Web Pay.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddOrUpdateAnEmployeeEarningRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddOrUpdateAnEmployeeEarningSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddOrUpdateAnEmployeeEarningResponse
     */
	public function addOrUpdateAnEmployeeEarning(
        \OpenAPI\OpenAPI\Models\Operations\AddOrUpdateAnEmployeeEarningRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddOrUpdateAnEmployeeEarningSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddOrUpdateAnEmployeeEarningResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/companies/{companyId}/employees/{employeeId}/earnings', \OpenAPI\OpenAPI\Models\Operations\AddOrUpdateAnEmployeeEarningRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "earning", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddOrUpdateAnEmployeeEarningResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 429) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errors = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Error>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Earning by Earning Code and Start Date
     * 
     * Delete Earning by Earning Code and Start Date
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEarningByEarningCodeAndStartDateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEarningByEarningCodeAndStartDateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteEarningByEarningCodeAndStartDateResponse
     */
	public function deleteEarningByEarningCodeAndStartDate(
        \OpenAPI\OpenAPI\Models\Operations\DeleteEarningByEarningCodeAndStartDateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteEarningByEarningCodeAndStartDateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteEarningByEarningCodeAndStartDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}/{startDate}', \OpenAPI\OpenAPI\Models\Operations\DeleteEarningByEarningCodeAndStartDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteEarningByEarningCodeAndStartDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errors = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Error>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get All Earnings
     * 
     * Get All Earnings returns all earnings for the selected employee.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllEarningsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllEarningsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllEarningsResponse
     */
	public function getAllEarnings(
        \OpenAPI\OpenAPI\Models\Operations\GetAllEarningsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAllEarningsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllEarningsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/companies/{companyId}/employees/{employeeId}/earnings', \OpenAPI\OpenAPI\Models\Operations\GetAllEarningsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllEarningsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->earnings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Earning>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errors = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Error>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Earning by Earning Code and Start Date
     * 
     * Get Earnings returns the single earning with the provided earning code and start date for the selected employee.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEarningByEarningCodeAndStartDateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEarningByEarningCodeAndStartDateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEarningByEarningCodeAndStartDateResponse
     */
	public function getEarningByEarningCodeAndStartDate(
        \OpenAPI\OpenAPI\Models\Operations\GetEarningByEarningCodeAndStartDateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEarningByEarningCodeAndStartDateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEarningByEarningCodeAndStartDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}/{startDate}', \OpenAPI\OpenAPI\Models\Operations\GetEarningByEarningCodeAndStartDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEarningByEarningCodeAndStartDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->earning = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Earning', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errors = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Error>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Earnings by Earning Code
     * 
     * Get Earnings returns all earnings with the provided earning code for the selected employee.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEarningsByEarningCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEarningsByEarningCodeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEarningsByEarningCodeResponse
     */
	public function getEarningsByEarningCode(
        \OpenAPI\OpenAPI\Models\Operations\GetEarningsByEarningCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEarningsByEarningCodeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEarningsByEarningCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}', \OpenAPI\OpenAPI\Models\Operations\GetEarningsByEarningCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEarningsByEarningCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->earnings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Earning>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errors = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Error>', 'json');
            }
        }

        return $response;
    }
}