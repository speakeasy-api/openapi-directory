"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import contactsdto as shared_contactsdto
from ..shared import customfielddto as shared_customfielddto
from ..shared import financedto as shared_financedto
from ..shared import instructionsdto as shared_instructionsdto
from ..shared import projectdatesdto as shared_projectdatesdto
from ..shared import taskdto as shared_taskdto
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProjectDTOv1StatusEnum(str, Enum):
    REQUESTED_PROJECT = 'REQUESTED_PROJECT'
    OPENED = 'OPENED'
    CLOSED = 'CLOSED'
    CANCELLED = 'CANCELLED'
    CLAIM = 'CLAIM'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProjectDTOv1:
    r"""Success"""
    
    categories_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoriesIds'), 'exclude': lambda f: f is None }})  
    contact_person_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contactPersonId'), 'exclude': lambda f: f is None }})  
    contacts: Optional[shared_contactsdto.ContactsDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contacts'), 'exclude': lambda f: f is None }})  
    customer_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerId'), 'exclude': lambda f: f is None }})  
    custom_fields: Optional[list[shared_customfielddto.CustomFieldDTO]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFields'), 'exclude': lambda f: f is None }})  
    dates: Optional[shared_projectdatesdto.ProjectDatesDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dates'), 'exclude': lambda f: f is None }})  
    finance: Optional[shared_financedto.FinanceDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finance'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    id_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idNumber'), 'exclude': lambda f: f is None }})  
    instructions: Optional[shared_instructionsdto.InstructionsDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructions'), 'exclude': lambda f: f is None }})  
    is_classic_project: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isClassicProject'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    project_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectId'), 'exclude': lambda f: f is None }})  
    project_manager_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectManagerId'), 'exclude': lambda f: f is None }})  
    specialization_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('specializationId'), 'exclude': lambda f: f is None }})  
    status: Optional[ProjectDTOv1StatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    tasks: Optional[list[shared_taskdto.TaskDTO]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tasks'), 'exclude': lambda f: f is None }})  
    