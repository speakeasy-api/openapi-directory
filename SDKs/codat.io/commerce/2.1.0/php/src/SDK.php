<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - Codat's standardized API for accessing commerce data 
 * 
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.
 * 
 * Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.
 * 
 * [Read more...](https://docs.codat.io/commerce-api/overview)
 * 
 * [See our OpenAPI spec](https://github.com/codatio/oas) 
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
        /** Production */
		'https://api.codat.io',
	];
  	
    /**
     * Retrieve standardized data from linked commerce platforms.
     * 
     * @var CompanyInfo $$companyInfo
     */
	public CompanyInfo $companyInfo;
	
    /**
     * Retrieve standardized data from linked commerce platforms.
     * 
     * @var Customers $$customers
     */
	public Customers $customers;
	
    /**
     * Retrieve standardized data from linked commerce platforms.
     * 
     * @var Disputes $$disputes
     */
	public Disputes $disputes;
	
    /**
     * Retrieve standardized data from linked commerce platforms.
     * 
     * @var Locations $$locations
     */
	public Locations $locations;
	
    /**
     * Retrieve standardized data from linked commerce platforms.
     * 
     * @var Orders $$orders
     */
	public Orders $orders;
	
    /**
     * Retrieve standardized data from linked commerce platforms.
     * 
     * @var Payments $$payments
     */
	public Payments $payments;
	
    /**
     * Retrieve standardized data from linked commerce platforms.
     * 
     * @var Products $$products
     */
	public Products $products;
	
    /**
     * Retrieve standardized data from linked commerce platforms.
     * 
     * @var TaxComponents $$taxComponents
     */
	public TaxComponents $taxComponents;
	
    /**
     * Retrieve standardized data from linked commerce platforms.
     * 
     * @var Transactions $$transactions
     */
	public Transactions $transactions;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->companyInfo = new CompanyInfo(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->customers = new Customers(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->disputes = new Disputes(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->locations = new Locations(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->orders = new Orders(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->payments = new Payments(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->products = new Products(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->taxComponents = new TaxComponents(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->transactions = new Transactions(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}