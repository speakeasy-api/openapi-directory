/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class ProxyGetPaymentMethod {
    /**
     *  The ID of the customer account associated with this payment method. This field is not required for the account ID. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountId")
    public String accountId;
    public ProxyGetPaymentMethod withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     *  The nine-digit routing number or ABA number used by banks. Use this field for ACH payment methods.
     * **Character limit**: 9 **Values**: a string of 9 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchAbaCode")
    public String achAbaCode;
    public ProxyGetPaymentMethod withAchAbaCode(String achAbaCode) {
        this.achAbaCode = achAbaCode;
        return this;
    }
    
    /**
     *  The name of the account holder, which can be either a person or a company. Use this field for ACH payment methods.
     * **Character limit**: 70 **Values**: a string of 70 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchAccountName")
    public String achAccountName;
    public ProxyGetPaymentMethod withAchAccountName(String achAccountName) {
        this.achAccountName = achAccountName;
        return this;
    }
    
    /**
     *  This is a masked displayable version of the ACH account number, used for security purposes. For example: `XXXXXXXXX54321`. Use this field for ACH payment methods.
     * **Character limit**: 32 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchAccountNumberMask")
    public String achAccountNumberMask;
    public ProxyGetPaymentMethod withAchAccountNumberMask(String achAccountNumberMask) {
        this.achAccountNumberMask = achAccountNumberMask;
        return this;
    }
    
    /**
     *  The type of bank account associated with the ACH payment. Use this field for ACH payment methods.
     * **Character limit**: 16 **Values**:
     * 
     * - `BusinessChecking`
     * - `Checking`
     * - `Saving`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchAccountType")
    public String achAccountType;
    public ProxyGetPaymentMethod withAchAccountType(String achAccountType) {
        this.achAccountType = achAccountType;
        return this;
    }
    
    /**
     *  Line 1 for the ACH address. Required on create for the Vantiv payment gateway. Optional for other gateways.
     * **Character limit:** **Values:** an address 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchAddress1")
    public String achAddress1;
    public ProxyGetPaymentMethod withAchAddress1(String achAddress1) {
        this.achAddress1 = achAddress1;
        return this;
    }
    
    /**
     *  Line 2 for the ACH address. Required on create for the Vantiv payment gateway. Optional for other gateways.
     * **Character limit:** **Values:** an address 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchAddress2")
    public String achAddress2;
    public ProxyGetPaymentMethod withAchAddress2(String achAddress2) {
        this.achAddress2 = achAddress2;
        return this;
    }
    
    /**
     *  The name of the bank where the ACH payment account is held. Use this field for ACH payment methods.
     * **Character limit**: 70 **Values**: a string of 70 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AchBankName")
    public String achBankName;
    public ProxyGetPaymentMethod withAchBankName(String achBankName) {
        this.achBankName = achBankName;
        return this;
    }
    
    /**
     *  Specifies whether a payment method is available in Zuora. This field is used to indicate if a payment method is loaded by the system or created by the customer.
     * - `true`: System loaded payment method.
     * - `false`: Customer created payment method.
     * 
     * The default value is `false`.
     * **Character limit**: 5 **Values**: `true`, `false` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Active")
    public Boolean active;
    public ProxyGetPaymentMethod withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     *  The branch code of the bank used for direct debit. Use this field for direct debit payment methods.
     * **Character limit**: 10 **Values**:  string of 10 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankBranchCode")
    public String bankBranchCode;
    public ProxyGetPaymentMethod withBankBranchCode(String bankBranchCode) {
        this.bankBranchCode = bankBranchCode;
        return this;
    }
    
    /**
     * The check digit in the international bank account number, which confirms the validity of the account. Use this field for direct debit payment methods. **Character limit**: 4 **Values**:  string of 4 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankCheckDigit")
    public String bankCheckDigit;
    public ProxyGetPaymentMethod withBankCheckDigit(String bankCheckDigit) {
        this.bankCheckDigit = bankCheckDigit;
        return this;
    }
    
    /**
     *  The city of the direct debit bank. Use this field for direct debit payment methods.
     * **Character limit**:70 **Values**:  string of 70 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankCity")
    public String bankCity;
    public ProxyGetPaymentMethod withBankCity(String bankCity) {
        this.bankCity = bankCity;
        return this;
    }
    
    /**
     *  The sort code or number that identifies the bank. This is also known as the sort code. This field is required for direct debit payment methods.
     * **Character limit**: 18 **Values**:  string of 18 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankCode")
    public String bankCode;
    public ProxyGetPaymentMethod withBankCode(String bankCode) {
        this.bankCode = bankCode;
        return this;
    }
    
    /**
     *  The first six digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method.
     * **Character limit**: 6 **Values**:  string of 6 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankIdentificationNumber")
    public String bankIdentificationNumber;
    public ProxyGetPaymentMethod withBankIdentificationNumber(String bankIdentificationNumber) {
        this.bankIdentificationNumber = bankIdentificationNumber;
        return this;
    }
    
    /**
     *  The name of the direct debit bank. Use this field for direct debit payment methods.
     * **Character limit**:80 **Values**:  string of 80 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankName")
    public String bankName;
    public ProxyGetPaymentMethod withBankName(String bankName) {
        this.bankName = bankName;
        return this;
    }
    
    /**
     *  The zip code or postal code of the direct debit bank. Use this field for direct debit payment methods.
     * **Character limit**:20 **Values**:  string of 20 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankPostalCode")
    public String bankPostalCode;
    public ProxyGetPaymentMethod withBankPostalCode(String bankPostalCode) {
        this.bankPostalCode = bankPostalCode;
        return this;
    }
    
    /**
     *  The name of the street of the direct debit bank. Use this field for direct debit payment methods.
     * **Character limit**:60 **Values**:  string of 60 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankStreetName")
    public String bankStreetName;
    public ProxyGetPaymentMethod withBankStreetName(String bankStreetName) {
        this.bankStreetName = bankStreetName;
        return this;
    }
    
    /**
     *  The number of the direct debit bank. Use this field for direct debit payment methods.
     * **Character limit**:10 **Values**:  string of 10 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankStreetNumber")
    public String bankStreetNumber;
    public ProxyGetPaymentMethod withBankStreetNumber(String bankStreetNumber) {
        this.bankStreetNumber = bankStreetNumber;
        return this;
    }
    
    /**
     *  The name on the direct debit bank account. Use this field for direct debit payment methods.
     * **Character limit**: 60 **Values**:  string of 60 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankTransferAccountName")
    public String bankTransferAccountName;
    public ProxyGetPaymentMethod withBankTransferAccountName(String bankTransferAccountName) {
        this.bankTransferAccountName = bankTransferAccountName;
        return this;
    }
    
    /**
     * The number of the customer's bank account. Use this field for direct debit payment methods.
     * 
     * **Character limit**: 30
     * **Values**: a string of 30 characters or fewer
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankTransferAccountNumber")
    public String bankTransferAccountNumber;
    public ProxyGetPaymentMethod withBankTransferAccountNumber(String bankTransferAccountNumber) {
        this.bankTransferAccountNumber = bankTransferAccountNumber;
        return this;
    }
    
    /**
     *  This is a masked displayable version of the bank account number, used for security purposes. For example: `XXXXXXXXX54321`.
     * **Character limit**: 32 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankTransferAccountNumberMask")
    public String bankTransferAccountNumberMask;
    public ProxyGetPaymentMethod withBankTransferAccountNumberMask(String bankTransferAccountNumberMask) {
        this.bankTransferAccountNumberMask = bankTransferAccountNumberMask;
        return this;
    }
    
    /**
     *  The type of the customer's bank account. Use this field for direct debit payment methods.
     * **Character limit**: 11 **Values**: `DirectDebit` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankTransferAccountType")
    public String bankTransferAccountType;
    public ProxyGetPaymentMethod withBankTransferAccountType(String bankTransferAccountType) {
        this.bankTransferAccountType = bankTransferAccountType;
        return this;
    }
    
    /**
     * The type of direct debit transfer. The value of this field is dependent on the country of the user. This field is only required if the `Type` field is set to `BankTransfer`.
     * 
     *  **Values**: 
     * 
     *    - `SEPA`
     *    
     *    - `AutomatischIncasso` (NL)
     * 
     *    - `LastschriftDE` (Germany)
     * 
     *    - `LastschriftAT` (Austria)
     * 
     *    - `DemandeDePrelevement` (FR)
     * 
     *    - `DirectDebitUK` (UK)
     * 
     *    - `Domicil` (Belgium)
     * 
     *    - `LastschriftCH` (CH)
     * 
     *    - `RID` (Italy)
     * 
     *    - `OrdenDeDomiciliacion` (Spain)
     *    - `Autogiro` (Sweden)
     *    - `Betalingsservice` (Denmark)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankTransferType")
    public String bankTransferType;
    public ProxyGetPaymentMethod withBankTransferType(String bankTransferType) {
        this.bankTransferType = bankTransferType;
        return this;
    }
    
    /**
     *  The business identification code for Swiss direct payment methods that use the Global Collect payment gateway. Use this field only for direct debit payments in Switzerland with Global Collect.
     * **Character limit**: 11 **Values**: string of 11 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BusinessIdentificationCode")
    public String businessIdentificationCode;
    public ProxyGetPaymentMethod withBusinessIdentificationCode(String businessIdentificationCode) {
        this.businessIdentificationCode = businessIdentificationCode;
        return this;
    }
    
    /**
     *  The city of the customer's address. Use this field for direct debit payment methods.
     * **Character limit**:80 **Values**:  string of 80 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("City")
    public String city;
    public ProxyGetPaymentMethod withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * The name of the company.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CompanyName")
    public String companyName;
    public ProxyGetPaymentMethod withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }
    
    /**
     *  The two-letter country code of the customer's address. Use this field for direct debit payment methods.
     * **Character limit**: 2 **Values**: a valid country code 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Country")
    public String country;
    public ProxyGetPaymentMethod withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     *  The user ID of the person who created the `PaymentMethod` object when there is a login user in the user session. In Hosted Payment Method and Zuora Checkout pages, this field is set to 3 as there is no login user to initiate a user session.
     * **Character limit**: 32 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreatedById")
    public String createdById;
    public ProxyGetPaymentMethod withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     *  The date when the `PaymentMethod` object was created in the Zuora system.
     * **Character limit**: 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreatedDate")
    public OffsetDateTime createdDate;
    public ProxyGetPaymentMethod withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     *  The first line of the card holder's address, which is often a street address or business name. Use this field for credit card and direct debit payment methods.
     * **Character limit**: 255 **Values**: a string of 255 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardAddress1")
    public String creditCardAddress1;
    public ProxyGetPaymentMethod withCreditCardAddress1(String creditCardAddress1) {
        this.creditCardAddress1 = creditCardAddress1;
        return this;
    }
    
    /**
     *  The second line of the card holder's address. Use this field for credit card and direct debit payment methods.
     * **Character limit**: 255 **Values**: a string of 255 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardAddress2")
    public String creditCardAddress2;
    public ProxyGetPaymentMethod withCreditCardAddress2(String creditCardAddress2) {
        this.creditCardAddress2 = creditCardAddress2;
        return this;
    }
    
    /**
     *  The city of the card holder's address. Use this field for credit card and direct debit payment methods **Character limit**: 40 **Values**: a string of 40 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardCity")
    public String creditCardCity;
    public ProxyGetPaymentMethod withCreditCardCity(String creditCardCity) {
        this.creditCardCity = creditCardCity;
        return this;
    }
    
    /**
     *  The country of the card holder's address. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardCountry")
    public String creditCardCountry;
    public ProxyGetPaymentMethod withCreditCardCountry(String creditCardCountry) {
        this.creditCardCountry = creditCardCountry;
        return this;
    }
    
    /**
     *  The expiration month of the credit card or debit card. Use this field for credit card and direct debit payment methods.
     * **Character limit**: 2 **Values**: a two-digit number, 01 - 12 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardExpirationMonth")
    public Integer creditCardExpirationMonth;
    public ProxyGetPaymentMethod withCreditCardExpirationMonth(Integer creditCardExpirationMonth) {
        this.creditCardExpirationMonth = creditCardExpirationMonth;
        return this;
    }
    
    /**
     *  The expiration month of the credit card or debit card. Use this field for credit card and direct debit payment methods.
     * **Character limit**: 4 **Values**: a four-digit number 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardExpirationYear")
    public Integer creditCardExpirationYear;
    public ProxyGetPaymentMethod withCreditCardExpirationYear(Integer creditCardExpirationYear) {
        this.creditCardExpirationYear = creditCardExpirationYear;
        return this;
    }
    
    /**
     *  The full name of the card holder. Use this field for credit card and direct debit payment methods.
     * **Character limit**: 50 **Values**: a string of 50 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardHolderName")
    public String creditCardHolderName;
    public ProxyGetPaymentMethod withCreditCardHolderName(String creditCardHolderName) {
        this.creditCardHolderName = creditCardHolderName;
        return this;
    }
    
    /**
     *  A masked version of the credit or debit card number.
     * **Character limit**: 32 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardMaskNumber")
    public String creditCardMaskNumber;
    public ProxyGetPaymentMethod withCreditCardMaskNumber(String creditCardMaskNumber) {
        this.creditCardMaskNumber = creditCardMaskNumber;
        return this;
    }
    
    /**
     *  The billing address's zip code. This field is required only when you define a debit card or credit card payment.
     * **Character limit**: 20 **Values**: a string of 20 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardPostalCode")
    public String creditCardPostalCode;
    public ProxyGetPaymentMethod withCreditCardPostalCode(String creditCardPostalCode) {
        this.creditCardPostalCode = creditCardPostalCode;
        return this;
    }
    
    /**
     *  The billing address's state. Use this field is if the `CreditCardCountry` value is either Canada or the US. State names must be spelled in full. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardState")
    public String creditCardState;
    public ProxyGetPaymentMethod withCreditCardState(String creditCardState) {
        this.creditCardState = creditCardState;
        return this;
    }
    
    /**
     * The type of the credit card.
     *     
     * Possible values  include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditCardType")
    public String creditCardType;
    public ProxyGetPaymentMethod withCreditCardType(String creditCardType) {
        this.creditCardType = creditCardType;
        return this;
    }
    
    /**
     *  The session ID of the user when the `PaymentMethod` was created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, then Zuora passes this field to supported gateways. Currently only Verifi supports this field.
     * **Character limit**: 255 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DeviceSessionId")
    public String deviceSessionId;
    public ProxyGetPaymentMethod withDeviceSessionId(String deviceSessionId) {
        this.deviceSessionId = deviceSessionId;
        return this;
    }
    
    /**
     *  An email address for the payment method in addition to the bill to contact email address.
     * **Character limit**: 80 **Values**: a string of 80 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Email")
    public String email;
    public ProxyGetPaymentMethod withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     *  Indicates if the customer has an existing mandate or a new mandate. A mandate is a signed authorization for UK and NL customers. When you are migrating mandates from another system, be sure to set this field correctly. If you indicate that a new mandate is an existing mandate or vice-versa, then transactions fail. This field is used only for the direct debit payment method.
     * **Character limit**: 3 **Values**: `Yes` or `No` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExistingMandate")
    public String existingMandate;
    public ProxyGetPaymentMethod withExistingMandate(String existingMandate) {
        this.existingMandate = existingMandate;
        return this;
    }
    
    /**
     *  The customer's first name. This field is used only for the direct debit payment method.
     * **Character limit**: 30 **Values**: a string of 30 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FirstName")
    public String firstName;
    public ProxyGetPaymentMethod withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     *  The International Bank Account Number. This field is used only for the direct debit payment method.
     * **Character limit**: 42 **Values**: a string of 42 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IBAN")
    public String iban;
    public ProxyGetPaymentMethod withIban(String iban) {
        this.iban = iban;
        return this;
    }
    
    /**
     *  The IP address of the user when the payment method was created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, then Zuora passes this field to supported gateways. Currently PayPal, CyberSource, Authorize.Net, Verifi, and WorldPay support this field.
     * **Character limit**: 15 **Values**: a string of 15 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IPAddress")
    public String ipAddress;
    public ProxyGetPaymentMethod withIPAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    
    /**
     * Object identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public String id;
    public ProxyGetPaymentMethod withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The unique identity number of the customer account. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IdentityNumber")
    public String identityNumber;
    public ProxyGetPaymentMethod withIdentityNumber(String identityNumber) {
        this.identityNumber = identityNumber;
        return this;
    }
    
    /**
     * Whether the customer account is a company.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IsCompany")
    public Boolean isCompany;
    public ProxyGetPaymentMethod withIsCompany(Boolean isCompany) {
        this.isCompany = isCompany;
        return this;
    }
    
    /**
     *  The date of the last failed attempt to collect payment with this payment method.
     * **Character limit**: 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("LastFailedSaleTransactionDate")
    public OffsetDateTime lastFailedSaleTransactionDate;
    public ProxyGetPaymentMethod withLastFailedSaleTransactionDate(OffsetDateTime lastFailedSaleTransactionDate) {
        this.lastFailedSaleTransactionDate = lastFailedSaleTransactionDate;
        return this;
    }
    
    /**
     *  The customer's last name. This field is used only for the direct debit payment method.
     * **Character limit**: 70 **Values**: a string of 70 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LastName")
    public String lastName;
    public ProxyGetPaymentMethod withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     *  The date of the most recent transaction.
     * **Character limit**: 29 **Values**: a valid date and time value 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("LastTransactionDateTime")
    public OffsetDateTime lastTransactionDateTime;
    public ProxyGetPaymentMethod withLastTransactionDateTime(OffsetDateTime lastTransactionDateTime) {
        this.lastTransactionDateTime = lastTransactionDateTime;
        return this;
    }
    
    /**
     *  The status of the most recent transaction.
     * **Character limit**: 39 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LastTransactionStatus")
    public String lastTransactionStatus;
    public ProxyGetPaymentMethod withLastTransactionStatus(String lastTransactionStatus) {
        this.lastTransactionStatus = lastTransactionStatus;
        return this;
    }
    
    /**
     *  The date when the mandate was created, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.
     * **Character limit**: 29 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("MandateCreationDate")
    public LocalDate mandateCreationDate;
    public ProxyGetPaymentMethod withMandateCreationDate(LocalDate mandateCreationDate) {
        this.mandateCreationDate = mandateCreationDate;
        return this;
    }
    
    /**
     *  The ID of the mandate. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.
     * **Character limit**: 36 **Values**: a string of 36 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MandateID")
    public String mandateID;
    public ProxyGetPaymentMethod withMandateID(String mandateID) {
        this.mandateID = mandateID;
        return this;
    }
    
    /**
     *  Indicates if  the mandate was received. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.
     * **Character limit**: 3 **Values**: `Yes` or `No `(case-sensitive) 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MandateReceived")
    public String mandateReceived;
    public ProxyGetPaymentMethod withMandateReceived(String mandateReceived) {
        this.mandateReceived = mandateReceived;
        return this;
    }
    
    /**
     *  The date when the mandate was last updated, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.
     * **Character limit**: 29 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("MandateUpdateDate")
    public LocalDate mandateUpdateDate;
    public ProxyGetPaymentMethod withMandateUpdateDate(LocalDate mandateUpdateDate) {
        this.mandateUpdateDate = mandateUpdateDate;
        return this;
    }
    
    /**
     *  Specifies the number of allowable consecutive failures Zuora attempts with the payment method before stopping.
     * **Values**: a valid number 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxConsecutivePaymentFailures")
    public Long maxConsecutivePaymentFailures;
    public ProxyGetPaymentMethod withMaxConsecutivePaymentFailures(Long maxConsecutivePaymentFailures) {
        this.maxConsecutivePaymentFailures = maxConsecutivePaymentFailures;
        return this;
    }
    
    /**
     * The name of the payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Name")
    public String name;
    public ProxyGetPaymentMethod withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NumConsecutiveFailures")
    public Integer numConsecutiveFailures;
    public ProxyGetPaymentMethod withNumConsecutiveFailures(Integer numConsecutiveFailures) {
        this.numConsecutiveFailures = numConsecutiveFailures;
        return this;
    }
    
    /**
     *  This field is used to indicate the status of the payment method created within an account. It is set to `Active` on creation.
     * **Character limit**: 6 **Values**: `Active` or `Closed`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentMethodStatus")
    public String paymentMethodStatus;
    public ProxyGetPaymentMethod withPaymentMethodStatus(String paymentMethodStatus) {
        this.paymentMethodStatus = paymentMethodStatus;
        return this;
    }
    
    /**
     *  The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours. This field is required if the `UseDefaultRetryRule` field value is set to `false`.
     * **Character limit**: 4 **Values**: a whole number between 1 and 1000, exclusive 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentRetryWindow")
    public Long paymentRetryWindow;
    public ProxyGetPaymentMethod withPaymentRetryWindow(Long paymentRetryWindow) {
        this.paymentRetryWindow = paymentRetryWindow;
        return this;
    }
    
    /**
     *  The PayPal billing agreement ID, which is a contract between two PayPal accounts. Typically, the selling party initiates a request to create a BAID, and sends it to buying party for acceptance. The seller can keep track of the BAID and use it for future charges against the buyer. This field is required when defining a PayPal payment method.
     * **Character limit**: 64 **Values**: a string of 64 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaypalBaid")
    public String paypalBaid;
    public ProxyGetPaymentMethod withPaypalBaid(String paypalBaid) {
        this.paypalBaid = paypalBaid;
        return this;
    }
    
    /**
     *  The email address associated with the account holder's PayPal account or of the PayPal account of the person paying for the service. This field is required only when you define a PayPal payment method.
     * **Character limit**: 80 **Values**: a string of 80 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaypalEmail")
    public String paypalEmail;
    public ProxyGetPaymentMethod withPaypalEmail(String paypalEmail) {
        this.paypalEmail = paypalEmail;
        return this;
    }
    
    /**
     *  PayPal's Adaptive Payments API key. Zuora does not create this key, nor does it call PayPal to generate it. You must use PayPal's Adaptive Payments' API to generate this key, and then pass it to Zuora. Zuora uses this key to authorize future payments to PayPal's Adaptive Payments API. This field is required when you use PayPal Adaptive Payments gateway.
     * **Character limit**: 32 **Values**: a valid PayPal Adaptive Payment pre-approval key 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaypalPreapprovalKey")
    public String paypalPreapprovalKey;
    public ProxyGetPaymentMethod withPaypalPreapprovalKey(String paypalPreapprovalKey) {
        this.paypalPreapprovalKey = paypalPreapprovalKey;
        return this;
    }
    
    /**
     *  Specifies the PayPal gateway: PayFlow Pro (Express Checkout) or Adaptive Payments. This field is required when you use PayPal Adaptive Payments or Payflow Pro (Express Checkout) gateways.
     * **Character limit**: 32 **Values**: `ExpressCheckout` or `AdaptivePayments` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaypalType")
    public String paypalType;
    public ProxyGetPaymentMethod withPaypalType(String paypalType) {
        this.paypalType = paypalType;
        return this;
    }
    
    /**
     *  The phone number that the account holder registered with the bank. This field is used for credit card validation when passing to a gateway.
     * **Character limit**: 40 **Values**: a string of 40 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Phone")
    public String phone;
    public ProxyGetPaymentMethod withPhone(String phone) {
        this.phone = phone;
        return this;
    }
    
    /**
     *  The zip code of the customer's address. This field is used only for the direct debit payment method.
     * **Character limit**: 20 **Values**: a string of 20 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PostalCode")
    public String postalCode;
    public ProxyGetPaymentMethod withPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }
    
    /**
     *  A gateway unique identifier that replaces sensitive payment method data. `SecondTokenId` is conditionally required only when `TokenId` is being used to represent a gateway customer profile. `SecondTokenId` is used in the CC Reference Transaction payment method. **Character limit**: 64 **Values**: a string of 64 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SecondTokenId")
    public String secondTokenId;
    public ProxyGetPaymentMethod withSecondTokenId(String secondTokenId) {
        this.secondTokenId = secondTokenId;
        return this;
    }
    
    /**
     *  The state of the customer's address. This field is used only for the direct debit payment method.
     * **Character limit**: 70 **Values**: a string of 70 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("State")
    public String state;
    public ProxyGetPaymentMethod withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     *  The street name of the customer's address. This field is used only for the direct debit payment method.
     * **Character limit**: 100 **Values**: a string of 100 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StreetName")
    public String streetName;
    public ProxyGetPaymentMethod withStreetName(String streetName) {
        this.streetName = streetName;
        return this;
    }
    
    /**
     *  The street number of the customer's address. This field is used only for the direct debit payment method.
     * **Character limit**: 30 **Values**: a string of 30 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StreetNumber")
    public String streetNumber;
    public ProxyGetPaymentMethod withStreetNumber(String streetNumber) {
        this.streetNumber = streetNumber;
        return this;
    }
    
    /**
     *  A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile. `TokenId` is required for the CC Reference Transaction payment method.
     * **Character limit**: 255 **Values**: a string of 255 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TokenId")
    public String tokenId;
    public ProxyGetPaymentMethod withTokenId(String tokenId) {
        this.tokenId = tokenId;
        return this;
    }
    
    /**
     *  The number of error payments that used this payment method.
     * **Character limit**: **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TotalNumberOfErrorPayments")
    public Integer totalNumberOfErrorPayments;
    public ProxyGetPaymentMethod withTotalNumberOfErrorPayments(Integer totalNumberOfErrorPayments) {
        this.totalNumberOfErrorPayments = totalNumberOfErrorPayments;
        return this;
    }
    
    /**
     *  The number of successful payments that used this payment method.
     * **Character limit**: **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TotalNumberOfProcessedPayments")
    public Integer totalNumberOfProcessedPayments;
    public ProxyGetPaymentMethod withTotalNumberOfProcessedPayments(Integer totalNumberOfProcessedPayments) {
        this.totalNumberOfProcessedPayments = totalNumberOfProcessedPayments;
        return this;
    }
    
    /**
     * The type of payment method. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Type")
    public ProxyGetPaymentMethodTypeEnum type;
    public ProxyGetPaymentMethod withType(ProxyGetPaymentMethodTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     *  The ID of the user who last updated the payment method.
     * **Character limit**: 32 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UpdatedById")
    public String updatedById;
    public ProxyGetPaymentMethod withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     *  The date when the payment method was last updated.
     * **Character limit**: 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("UpdatedDate")
    public OffsetDateTime updatedDate;
    public ProxyGetPaymentMethod withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
    /**
     *  Determines whether to use the default retry rules configured in the Zuora Payments settings. Set this to `true` to use the default retry rules. Set this to `false` to set the specific rules for this payment method. If you set this value to `false`, then the fields, `PaymentRetryWindow` and `MaxConsecutivePaymentFailures`, are required.
     * **Character limit**: 5 **Values**: `t``rue`, `false` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UseDefaultRetryRule")
    public Boolean useDefaultRetryRule;
    public ProxyGetPaymentMethod withUseDefaultRetryRule(Boolean useDefaultRetryRule) {
        this.useDefaultRetryRule = useDefaultRetryRule;
        return this;
    }
    
}
