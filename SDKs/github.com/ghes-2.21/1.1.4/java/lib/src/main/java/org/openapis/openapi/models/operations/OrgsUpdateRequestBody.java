/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class OrgsUpdateRequestBody {
    /**
     * Billing email address. This address is not publicized.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_email")
    public String billingEmail;
    public OrgsUpdateRequestBody withBillingEmail(String billingEmail) {
        this.billingEmail = billingEmail;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blog")
    public String blog;
    public OrgsUpdateRequestBody withBlog(String blog) {
        this.blog = blog;
        return this;
    }
    
    /**
     * The company name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company")
    public String company;
    public OrgsUpdateRequestBody withCompany(String company) {
        this.company = company;
        return this;
    }
    
    /**
     * Default permission level members have for organization repositories:  
     * \* `read` - can pull, but not push to or administer this repository.  
     * \* `write` - can pull and push, but not administer this repository.  
     * \* `admin` - can pull, push, and administer this repository.  
     * \* `none` - no permissions granted by default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_repository_permission")
    public OrgsUpdateRequestBodyDefaultRepositoryPermissionEnum defaultRepositoryPermission;
    public OrgsUpdateRequestBody withDefaultRepositoryPermission(OrgsUpdateRequestBodyDefaultRepositoryPermissionEnum defaultRepositoryPermission) {
        this.defaultRepositoryPermission = defaultRepositoryPermission;
        return this;
    }
    
    /**
     * The description of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public OrgsUpdateRequestBody withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The publicly visible email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;
    public OrgsUpdateRequestBody withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Toggles whether an organization can use organization projects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_organization_projects")
    public Boolean hasOrganizationProjects;
    public OrgsUpdateRequestBody withHasOrganizationProjects(Boolean hasOrganizationProjects) {
        this.hasOrganizationProjects = hasOrganizationProjects;
        return this;
    }
    
    /**
     * Toggles whether repositories that belong to the organization can use repository projects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_repository_projects")
    public Boolean hasRepositoryProjects;
    public OrgsUpdateRequestBody withHasRepositoryProjects(Boolean hasRepositoryProjects) {
        this.hasRepositoryProjects = hasRepositoryProjects;
        return this;
    }
    
    /**
     * The location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public OrgsUpdateRequestBody withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Specifies which types of repositories non-admin organization members can create. Can be one of:  
     * \* `all` - all organization members can create public and private repositories.  
     * \* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.  
     * \* `none` - only admin members can create repositories.  
     * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members_allowed_repository_creation_type")
    public OrgsUpdateRequestBodyMembersAllowedRepositoryCreationTypeEnum membersAllowedRepositoryCreationType;
    public OrgsUpdateRequestBody withMembersAllowedRepositoryCreationType(OrgsUpdateRequestBodyMembersAllowedRepositoryCreationTypeEnum membersAllowedRepositoryCreationType) {
        this.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
        return this;
    }
    
    /**
     * Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:  
     * \* `true` - all organization members can create internal repositories.  
     * \* `false` - only organization owners can create internal repositories.  
     * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members_can_create_internal_repositories")
    public Boolean membersCanCreateInternalRepositories;
    public OrgsUpdateRequestBody withMembersCanCreateInternalRepositories(Boolean membersCanCreateInternalRepositories) {
        this.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
        return this;
    }
    
    /**
     * Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:  
     * \* `true` - all organization members can create private repositories.  
     * \* `false` - only organization owners can create private repositories.  
     * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members_can_create_private_repositories")
    public Boolean membersCanCreatePrivateRepositories;
    public OrgsUpdateRequestBody withMembersCanCreatePrivateRepositories(Boolean membersCanCreatePrivateRepositories) {
        this.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
        return this;
    }
    
    /**
     * Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:  
     * \* `true` - all organization members can create public repositories.  
     * \* `false` - only organization owners can create public repositories.  
     * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members_can_create_public_repositories")
    public Boolean membersCanCreatePublicRepositories;
    public OrgsUpdateRequestBody withMembersCanCreatePublicRepositories(Boolean membersCanCreatePublicRepositories) {
        this.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
        return this;
    }
    
    /**
     * Toggles the ability of non-admin organization members to create repositories. Can be one of:  
     * \* `true` - all organization members can create repositories.  
     * \* `false` - only organization owners can create repositories.  
     * Default: `true`  
     * **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members_can_create_repositories")
    public Boolean membersCanCreateRepositories;
    public OrgsUpdateRequestBody withMembersCanCreateRepositories(Boolean membersCanCreateRepositories) {
        this.membersCanCreateRepositories = membersCanCreateRepositories;
        return this;
    }
    
    /**
     * The shorthand name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public OrgsUpdateRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The Twitter username of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("twitter_username")
    public String twitterUsername;
    public OrgsUpdateRequestBody withTwitterUsername(String twitterUsername) {
        this.twitterUsername = twitterUsername;
        return this;
    }
    
}
