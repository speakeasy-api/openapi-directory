/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * Indicates whether you want to increase or decrease the retention period.
 */
export enum UpdateDataRetentionRequestBodyOperationEnum {
  IncreaseDataRetention = "INCREASE_DATA_RETENTION",
  DecreaseDataRetention = "DECREASE_DATA_RETENTION",
}

export class UpdateDataRetentionRequestBody extends SpeakeasyBase {
  /**
   * The version of the stream whose retention period you want to change. To get the version, call either the <code>DescribeStream</code> or the <code>ListStreams</code> API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CurrentVersion" })
  currentVersion: string;

  /**
   * The retention period, in hours. The value you specify replaces the current value. The maximum value for this parameter is 87600 (ten years).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DataRetentionChangeInHours" })
  dataRetentionChangeInHours: number;

  /**
   * Indicates whether you want to increase or decrease the retention period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Operation" })
  operation: UpdateDataRetentionRequestBodyOperationEnum;

  /**
   * The Amazon Resource Name (ARN) of the stream whose retention period you want to change.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StreamARN" })
  streamARN?: string;

  /**
   * The name of the stream whose retention period you want to change.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StreamName" })
  streamName?: string;
}

export class UpdateDataRetentionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateDataRetentionRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateDataRetentionResponse extends SpeakeasyBase {
  /**
   * ClientLimitExceededException
   */
  @SpeakeasyMetadata()
  clientLimitExceededException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InvalidArgumentException
   */
  @SpeakeasyMetadata()
  invalidArgumentException?: any;

  /**
   * NotAuthorizedException
   */
  @SpeakeasyMetadata()
  notAuthorizedException?: any;

  /**
   * ResourceInUseException
   */
  @SpeakeasyMetadata()
  resourceInUseException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateDataRetentionOutput?: Record<string, any>;

  /**
   * VersionMismatchException
   */
  @SpeakeasyMetadata()
  versionMismatchException?: any;
}
