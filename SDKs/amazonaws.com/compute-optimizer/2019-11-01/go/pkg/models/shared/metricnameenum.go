// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MetricNameEnum string

const (
	MetricNameEnumCPU                        MetricNameEnum = "Cpu"
	MetricNameEnumMemory                     MetricNameEnum = "Memory"
	MetricNameEnumEbsReadOpsPerSecond        MetricNameEnum = "EBS_READ_OPS_PER_SECOND"
	MetricNameEnumEbsWriteOpsPerSecond       MetricNameEnum = "EBS_WRITE_OPS_PER_SECOND"
	MetricNameEnumEbsReadBytesPerSecond      MetricNameEnum = "EBS_READ_BYTES_PER_SECOND"
	MetricNameEnumEbsWriteBytesPerSecond     MetricNameEnum = "EBS_WRITE_BYTES_PER_SECOND"
	MetricNameEnumDiskReadOpsPerSecond       MetricNameEnum = "DISK_READ_OPS_PER_SECOND"
	MetricNameEnumDiskWriteOpsPerSecond      MetricNameEnum = "DISK_WRITE_OPS_PER_SECOND"
	MetricNameEnumDiskReadBytesPerSecond     MetricNameEnum = "DISK_READ_BYTES_PER_SECOND"
	MetricNameEnumDiskWriteBytesPerSecond    MetricNameEnum = "DISK_WRITE_BYTES_PER_SECOND"
	MetricNameEnumNetworkInBytesPerSecond    MetricNameEnum = "NETWORK_IN_BYTES_PER_SECOND"
	MetricNameEnumNetworkOutBytesPerSecond   MetricNameEnum = "NETWORK_OUT_BYTES_PER_SECOND"
	MetricNameEnumNetworkPacketsInPerSecond  MetricNameEnum = "NETWORK_PACKETS_IN_PER_SECOND"
	MetricNameEnumNetworkPacketsOutPerSecond MetricNameEnum = "NETWORK_PACKETS_OUT_PER_SECOND"
)

func (e MetricNameEnum) ToPointer() *MetricNameEnum {
	return &e
}

func (e *MetricNameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Cpu":
		fallthrough
	case "Memory":
		fallthrough
	case "EBS_READ_OPS_PER_SECOND":
		fallthrough
	case "EBS_WRITE_OPS_PER_SECOND":
		fallthrough
	case "EBS_READ_BYTES_PER_SECOND":
		fallthrough
	case "EBS_WRITE_BYTES_PER_SECOND":
		fallthrough
	case "DISK_READ_OPS_PER_SECOND":
		fallthrough
	case "DISK_WRITE_OPS_PER_SECOND":
		fallthrough
	case "DISK_READ_BYTES_PER_SECOND":
		fallthrough
	case "DISK_WRITE_BYTES_PER_SECOND":
		fallthrough
	case "NETWORK_IN_BYTES_PER_SECOND":
		fallthrough
	case "NETWORK_OUT_BYTES_PER_SECOND":
		fallthrough
	case "NETWORK_PACKETS_IN_PER_SECOND":
		fallthrough
	case "NETWORK_PACKETS_OUT_PER_SECOND":
		*e = MetricNameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MetricNameEnum: %v", v)
	}
}
