<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsListResponse
     */
	public function servicedirectoryProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a namespace, and returns the new namespace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesCreateResponse
     */
	public function servicedirectoryProjectsLocationsNamespacesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/namespaces', \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "namespaceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->namespace = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NamespaceT', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all namespaces.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesListResponse
     */
	public function servicedirectoryProjectsLocationsNamespacesList(
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/namespaces', \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNamespacesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListNamespacesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a service, and returns the new service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesCreateResponse
     */
	public function servicedirectoryProjectsLocationsNamespacesServicesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/services', \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "serviceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an endpoint, and returns the new endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateResponse
     */
	public function servicedirectoryProjectsLocationsNamespacesServicesEndpointsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/endpoints', \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "endpointInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->endpoint = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Endpoint', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteResponse
     */
	public function servicedirectoryProjectsLocationsNamespacesServicesEndpointsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets an endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetResponse
     */
	public function servicedirectoryProjectsLocationsNamespacesServicesEndpointsGet(
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->endpoint = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Endpoint', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListResponse
     */
	public function servicedirectoryProjectsLocationsNamespacesServicesEndpointsList(
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/endpoints', \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEndpointsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEndpointsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchResponse
     */
	public function servicedirectoryProjectsLocationsNamespacesServicesEndpointsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "endpointInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->endpoint = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Endpoint', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all services belonging to a namespace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesListResponse
     */
	public function servicedirectoryProjectsLocationsNamespacesServicesList(
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/services', \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListServicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a service and its associated endpoints. Resolving a service is not considered an active developer method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesResolveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesResolveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesResolveResponse
     */
	public function servicedirectoryProjectsLocationsNamespacesServicesResolve(
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesResolveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesResolveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesResolveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:resolve', \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesResolveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resolveServiceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesResolveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsNamespacesServicesResolveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resolveServiceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResolveServiceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the IAM Policy for a resource
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicyResponse
     */
	public function servicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the IAM Policy for a resource
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicyResponse
     */
	public function servicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Tests IAM permissions for a resource (namespace, service or service workload only).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissionsResponse
     */
	public function servicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicedirectoryProjectsLocationsRegistrationPoliciesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}