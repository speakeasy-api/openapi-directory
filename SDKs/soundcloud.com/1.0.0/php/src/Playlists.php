<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Playlists 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes a playlist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePlaylistsPlaylistIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePlaylistsPlaylistIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePlaylistsPlaylistIdResponse
     */
	public function deletePlaylistsPlaylistId(
        \OpenAPI\OpenAPI\Models\Operations\DeletePlaylistsPlaylistIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeletePlaylistsPlaylistIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePlaylistsPlaylistIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/playlists/{playlist_id}', \OpenAPI\OpenAPI\Models\Operations\DeletePlaylistsPlaylistIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePlaylistsPlaylistIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a playlist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdResponse
     */
	public function getPlaylistsPlaylistId(
        \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/playlists/{playlist_id}', \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playlist = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Playlist', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a collection of playlist's reposters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdRepostersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdRepostersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdRepostersResponse
     */
	public function getPlaylistsPlaylistIdReposters(
        \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdRepostersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdRepostersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdRepostersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/playlists/{playlist_id}/reposters', \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdRepostersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdRepostersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdRepostersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->metaUsers = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MetaUsers', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns tracks under a playlist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdTracksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdTracksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdTracksResponse
     */
	public function getPlaylistsPlaylistIdTracks(
        \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdTracksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdTracksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdTracksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/playlists/{playlist_id}/tracks', \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdTracksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdTracksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPlaylistsPlaylistIdTracksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPlaylistsPlaylistIdTracks200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a playlist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateUpdatePlaylistRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPlaylistsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPlaylistsResponse
     */
	public function postPlaylists(
        \OpenAPI\OpenAPI\Models\Shared\CreateUpdatePlaylistRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostPlaylistsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPlaylistsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/playlists');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPlaylistsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPlaylists201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPlaylists201ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a playlist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutPlaylistsPlaylistIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutPlaylistsPlaylistIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutPlaylistsPlaylistIdResponse
     */
	public function putPlaylistsPlaylistId(
        \OpenAPI\OpenAPI\Models\Operations\PutPlaylistsPlaylistIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutPlaylistsPlaylistIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutPlaylistsPlaylistIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/playlists/{playlist_id}', \OpenAPI\OpenAPI\Models\Operations\PutPlaylistsPlaylistIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createUpdatePlaylistRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutPlaylistsPlaylistIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putPlaylistsPlaylistId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutPlaylistsPlaylistId200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}