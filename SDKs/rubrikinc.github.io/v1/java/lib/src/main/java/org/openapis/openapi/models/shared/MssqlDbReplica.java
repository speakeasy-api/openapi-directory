/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class MssqlDbReplica {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availabilityInfo")
    public MssqlDbReplicaAvailabilityInfo availabilityInfo;

    public MssqlDbReplica withAvailabilityInfo(MssqlDbReplicaAvailabilityInfo availabilityInfo) {
        this.availabilityInfo = availabilityInfo;
        return this;
    }
    
    /**
     * `True` when the Rubrik cluster has sufficient permissions to perform all necessary operations.
     */
    @JsonProperty("hasPermissions")
    public Boolean hasPermissions;

    public MssqlDbReplica withHasPermissions(Boolean hasPermissions) {
        this.hasPermissions = hasPermissions;
        return this;
    }
    
    /**
     * ID of the SQL Server instance managing the replica.
     */
    @JsonProperty("instanceId")
    public String instanceId;

    public MssqlDbReplica withInstanceId(String instanceId) {
        this.instanceId = instanceId;
        return this;
    }
    
    /**
     * Name of the SQL Server instance managing the replica.
     */
    @JsonProperty("instanceName")
    public String instanceName;

    public MssqlDbReplica withInstanceName(String instanceName) {
        this.instanceName = instanceName;
        return this;
    }
    
    /**
     * Deprecated. Please use 'isDeleted' instead.
     */
    @JsonProperty("isArchived")
    public Boolean isArchived;

    public MssqlDbReplica withIsArchived(Boolean isArchived) {
        this.isArchived = isArchived;
        return this;
    }
    
    /**
     * `True` when the replica is deleted.
     */
    @JsonProperty("isDeleted")
    public Boolean isDeleted;

    public MssqlDbReplica withIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
        return this;
    }
    
    /**
     * `True` when the replica is in standby mode.
     */
    @JsonProperty("isStandby")
    public Boolean isStandby;

    public MssqlDbReplica withIsStandby(Boolean isStandby) {
        this.isStandby = isStandby;
        return this;
    }
    
    /**
     * The recovery fork GUID of the replica.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recoveryForkGuid")
    public String recoveryForkGuid;

    public MssqlDbReplica withRecoveryForkGuid(String recoveryForkGuid) {
        this.recoveryForkGuid = recoveryForkGuid;
        return this;
    }
    
    /**
     * The recovery model of the replica.
     */
    @JsonProperty("recoveryModel")
    public MssqlDbReplicaRecoveryModelEnum recoveryModel;

    public MssqlDbReplica withRecoveryModel(MssqlDbReplicaRecoveryModelEnum recoveryModel) {
        this.recoveryModel = recoveryModel;
        return this;
    }
    
    @JsonProperty("rootProperties")
    public MssqlRootProperties rootProperties;

    public MssqlDbReplica withRootProperties(MssqlRootProperties rootProperties) {
        this.rootProperties = rootProperties;
        return this;
    }
    
    /**
     * The state of the replica.
     */
    @JsonProperty("state")
    public String state;

    public MssqlDbReplica withState(String state) {
        this.state = state;
        return this;
    }
    
    public MssqlDbReplica(@JsonProperty("hasPermissions") Boolean hasPermissions, @JsonProperty("instanceId") String instanceId, @JsonProperty("instanceName") String instanceName, @JsonProperty("isArchived") Boolean isArchived, @JsonProperty("isDeleted") Boolean isDeleted, @JsonProperty("isStandby") Boolean isStandby, @JsonProperty("recoveryModel") MssqlDbReplicaRecoveryModelEnum recoveryModel, @JsonProperty("rootProperties") MssqlRootProperties rootProperties, @JsonProperty("state") String state) {
        this.hasPermissions = hasPermissions;
        this.instanceId = instanceId;
        this.instanceName = instanceName;
        this.isArchived = isArchived;
        this.isDeleted = isDeleted;
        this.isStandby = isStandby;
        this.recoveryModel = recoveryModel;
        this.rootProperties = rootProperties;
        this.state = state;
  }
}
