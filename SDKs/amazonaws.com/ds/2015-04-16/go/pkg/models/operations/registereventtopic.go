// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RegisterEventTopicXAmzTargetEnum
type RegisterEventTopicXAmzTargetEnum string

const (
	RegisterEventTopicXAmzTargetEnumDirectoryService20150416RegisterEventTopic RegisterEventTopicXAmzTargetEnum = "DirectoryService_20150416.RegisterEventTopic"
)

func (e RegisterEventTopicXAmzTargetEnum) ToPointer() *RegisterEventTopicXAmzTargetEnum {
	return &e
}

func (e *RegisterEventTopicXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DirectoryService_20150416.RegisterEventTopic":
		*e = RegisterEventTopicXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterEventTopicXAmzTargetEnum: %v", v)
	}
}

type RegisterEventTopicRequest struct {
	RegisterEventTopicRequest shared.RegisterEventTopicRequest `request:"mediaType=application/json"`
	XAmzAlgorithm             *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                RegisterEventTopicXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type RegisterEventTopicResponse struct {
	// ClientException
	ClientException interface{}
	ContentType     string
	// EntityDoesNotExistException
	EntityDoesNotExistException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// Success
	RegisterEventTopicResult map[string]interface{}
	// ServiceException
	ServiceException interface{}
	StatusCode       int
	RawResponse      *http.Response
}
