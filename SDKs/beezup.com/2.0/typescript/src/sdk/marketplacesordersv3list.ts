/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class MarketplacesOrdersV3List {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get a paginated list of all Orders with all Order and Order Item(s) properties
   *
   * @remarks
   * The purpose of this operation is to reduce the amount of request to the API.\
   * \
   * Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties.
   *
   */
  getOrderListFullV3(
    req: operations.GetOrderListFullV3Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrderListFullV3Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrderListFullV3Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/orders/v3/list/full";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "orderListRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrderListFullV3Response =
        new operations.GetOrderListFullV3Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.orderListFullWithLinks = utils.objectToClass(
              httpRes?.data,
              shared.OrderListFullWithLinks
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponseMessage
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a paginated list of all Orders without details
   */
  getOrderListLightV3(
    req: shared.OrderListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrderListLightV3Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.OrderListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/orders/v3/list/light";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrderListLightV3Response =
        new operations.GetOrderListLightV3Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.orderListLightWithLinks = utils.objectToClass(
              httpRes?.data,
              shared.OrderListLightWithLinks
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponseMessage
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }
}
