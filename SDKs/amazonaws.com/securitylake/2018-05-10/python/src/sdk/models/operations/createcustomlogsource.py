"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createcustomlogsourceresponse as shared_createcustomlogsourceresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateCustomLogSourceRequestBodyEventClassEnum(str, Enum):
    r"""The Open Cybersecurity Schema Framework (OCSF) event class which describes the type of data that the custom source will send to Security Lake."""
    ACCESS_ACTIVITY = 'ACCESS_ACTIVITY'
    FILE_ACTIVITY = 'FILE_ACTIVITY'
    KERNEL_ACTIVITY = 'KERNEL_ACTIVITY'
    KERNEL_EXTENSION = 'KERNEL_EXTENSION'
    MEMORY_ACTIVITY = 'MEMORY_ACTIVITY'
    MODULE_ACTIVITY = 'MODULE_ACTIVITY'
    PROCESS_ACTIVITY = 'PROCESS_ACTIVITY'
    REGISTRY_KEY_ACTIVITY = 'REGISTRY_KEY_ACTIVITY'
    REGISTRY_VALUE_ACTIVITY = 'REGISTRY_VALUE_ACTIVITY'
    RESOURCE_ACTIVITY = 'RESOURCE_ACTIVITY'
    SCHEDULED_JOB_ACTIVITY = 'SCHEDULED_JOB_ACTIVITY'
    SECURITY_FINDING = 'SECURITY_FINDING'
    ACCOUNT_CHANGE = 'ACCOUNT_CHANGE'
    AUTHENTICATION = 'AUTHENTICATION'
    AUTHORIZATION = 'AUTHORIZATION'
    ENTITY_MANAGEMENT_AUDIT = 'ENTITY_MANAGEMENT_AUDIT'
    DHCP_ACTIVITY = 'DHCP_ACTIVITY'
    NETWORK_ACTIVITY = 'NETWORK_ACTIVITY'
    DNS_ACTIVITY = 'DNS_ACTIVITY'
    FTP_ACTIVITY = 'FTP_ACTIVITY'
    HTTP_ACTIVITY = 'HTTP_ACTIVITY'
    RDP_ACTIVITY = 'RDP_ACTIVITY'
    SMB_ACTIVITY = 'SMB_ACTIVITY'
    SSH_ACTIVITY = 'SSH_ACTIVITY'
    CLOUD_API = 'CLOUD_API'
    CONTAINER_LIFECYCLE = 'CONTAINER_LIFECYCLE'
    DATABASE_LIFECYCLE = 'DATABASE_LIFECYCLE'
    CONFIG_STATE = 'CONFIG_STATE'
    CLOUD_STORAGE = 'CLOUD_STORAGE'
    INVENTORY_INFO = 'INVENTORY_INFO'
    RFB_ACTIVITY = 'RFB_ACTIVITY'
    SMTP_ACTIVITY = 'SMTP_ACTIVITY'
    VIRTUAL_MACHINE_ACTIVITY = 'VIRTUAL_MACHINE_ACTIVITY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCustomLogSourceRequestBody:
    
    custom_source_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customSourceName') }})
    r"""The name for a third-party custom source. This must be a Regionally unique value."""  
    event_class: CreateCustomLogSourceRequestBodyEventClassEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventClass') }})
    r"""The Open Cybersecurity Schema Framework (OCSF) event class which describes the type of data that the custom source will send to Security Lake."""  
    glue_invocation_role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('glueInvocationRoleArn') }})
    r"""<p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be used by the Glue crawler. The recommended IAM policies are:</p> <ul> <li> <p>The managed policy <code>AWSGlueServiceRole</code> </p> </li> <li> <p>A custom policy granting access to your Amazon S3 Data Lake</p> </li> </ul>"""  
    log_provider_account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logProviderAccountId') }})
    r"""The Amazon Web Services account ID of the custom source that will write logs and events into the Amazon S3 Data Lake."""  
    

@dataclasses.dataclass
class CreateCustomLogSourceRequest:
    
    request_body: CreateCustomLogSourceRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateCustomLogSourceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    account_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccountNotFoundException"""  
    bucket_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BucketNotFoundException"""  
    conflict_source_names_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictSourceNamesException"""  
    create_custom_log_source_response: Optional[shared_createcustomlogsourceresponse.CreateCustomLogSourceResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    