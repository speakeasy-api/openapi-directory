"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ReportSignInSignOutActivitiesSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class ReportSignInSignOutActivitiesRequest:
    
    from_: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Start date for which you would like to view the activity logs report. Using the `from` and `to` parameters, specify a monthly date range for the report as the API only provides one month worth of data in one request. The specified date range should fall within the last six months."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""Next page token is used to paginate through large result sets"""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records to be returned within a single API call"""  
    to: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""End date up to which you would like to view the activity logs report."""  
    

@dataclasses.dataclass
class ReportSignInSignOutActivities200ApplicationXMLActivityLogs:
    
    client_type: Optional[str] = dataclasses.field(default=None)
    r"""The client interface type using which the activity was performed."""  
    email: Optional[str] = dataclasses.field(default=None)
    r"""Email address of the user used for the activity."""  
    ip_address: Optional[str] = dataclasses.field(default=None)
    r"""The IP address of the user's device."""  
    time: Optional[datetime] = dataclasses.field(default=None)
    r"""Time during which the activity occurred."""  
    type: Optional[str] = dataclasses.field(default=None)
    r"""The type of activity: <br>`Sign in`: Sign in activity by user.<br>`Sign out`: Sign out activity by user."""  
    version: Optional[str] = dataclasses.field(default=None)
    r"""Zoom client version of the user."""  
    

@dataclasses.dataclass
class ReportSignInSignOutActivities200ApplicationXML:
    r"""Report object"""
    
    activity_logs: Optional[list[ReportSignInSignOutActivities200ApplicationXMLActivityLogs]] = dataclasses.field(default=None)
    r"""Array of activity logs."""  
    from_: Optional[str] = dataclasses.field(default=None)
    r"""Start date from which you want the activity logs report to be generated."""  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""Next page token is used to paginate through large result sets."""  
    page_size: Optional[str] = dataclasses.field(default=None)
    r"""The number of records returned within a single API call."""  
    to: Optional[str] = dataclasses.field(default=None)
    r"""End date until which you want the activity logs report to be generated"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportSignInSignOutActivities200ApplicationJSONActivityLogs:
    
    client_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_type'), 'exclude': lambda f: f is None }})
    r"""The client interface type using which the activity was performed."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email address of the user used for the activity."""  
    ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip_address'), 'exclude': lambda f: f is None }})
    r"""The IP address of the user's device."""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time during which the activity occurred."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of activity: <br>`Sign in`: Sign in activity by user.<br>`Sign out`: Sign out activity by user."""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Zoom client version of the user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportSignInSignOutActivities200ApplicationJSON:
    r"""Report object"""
    
    activity_logs: Optional[list[ReportSignInSignOutActivities200ApplicationJSONActivityLogs]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activity_logs'), 'exclude': lambda f: f is None }})
    r"""Array of activity logs."""  
    from_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'exclude': lambda f: f is None }})
    r"""Start date from which you want the activity logs report to be generated."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""Next page token is used to paginate through large result sets."""  
    page_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single API call."""  
    to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'exclude': lambda f: f is None }})
    r"""End date until which you want the activity logs report to be generated"""  
    

@dataclasses.dataclass
class ReportSignInSignOutActivitiesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    report_sign_in_sign_out_activities_200_application_json_object: Optional[ReportSignInSignOutActivities200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Success
    """  
    