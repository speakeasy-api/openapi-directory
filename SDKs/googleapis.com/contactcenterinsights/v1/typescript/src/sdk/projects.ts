/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates an analysis. The long running operation is done when the analysis has completed.
   */
  contactcenterinsightsProjectsLocationsConversationsAnalysesCreate(
    req: operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateRequest,
    security: operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/analyses",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudContactcenterinsightsV1AnalysisInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateResponse =
        new operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists analyses.
   */
  contactcenterinsightsProjectsLocationsConversationsAnalysesList(
    req: operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListRequest,
    security: operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/analyses",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListResponse =
        new operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudContactcenterinsightsV1ListAnalysesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudContactcenterinsightsV1ListAnalysesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Analyzes multiple conversations in a single request.
   */
  contactcenterinsightsProjectsLocationsConversationsBulkAnalyze(
    req: operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeRequest,
    security: operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/conversations:bulkAnalyze",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudContactcenterinsightsV1BulkAnalyzeConversationsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeResponse =
        new operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets conversation statistics.
   */
  contactcenterinsightsProjectsLocationsConversationsCalculateStats(
    req: operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsRequest,
    security: operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{location}/conversations:calculateStats",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsResponse =
        new operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudContactcenterinsightsV1CalculateStatsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudContactcenterinsightsV1CalculateStatsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a conversation.
   */
  contactcenterinsightsProjectsLocationsConversationsCreate(
    req: operations.ContactcenterinsightsProjectsLocationsConversationsCreateRequest,
    security: operations.ContactcenterinsightsProjectsLocationsConversationsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsConversationsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsConversationsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/conversations",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudContactcenterinsightsV1ConversationInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsConversationsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsConversationsCreateResponse =
        new operations.ContactcenterinsightsProjectsLocationsConversationsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudContactcenterinsightsV1Conversation =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudContactcenterinsightsV1Conversation
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Imports conversations and processes them according to the user's configuration.
   */
  contactcenterinsightsProjectsLocationsConversationsIngest(
    req: operations.ContactcenterinsightsProjectsLocationsConversationsIngestRequest,
    security: operations.ContactcenterinsightsProjectsLocationsConversationsIngestSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsConversationsIngestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsConversationsIngestRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/conversations:ingest",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudContactcenterinsightsV1IngestConversationsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsConversationsIngestSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsConversationsIngestResponse =
        new operations.ContactcenterinsightsProjectsLocationsConversationsIngestResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists conversations.
   */
  contactcenterinsightsProjectsLocationsConversationsList(
    req: operations.ContactcenterinsightsProjectsLocationsConversationsListRequest,
    security: operations.ContactcenterinsightsProjectsLocationsConversationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsConversationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsConversationsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/conversations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsConversationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsConversationsListResponse =
        new operations.ContactcenterinsightsProjectsLocationsConversationsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudContactcenterinsightsV1ListConversationsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudContactcenterinsightsV1ListConversationsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Export insights data to a destination defined in the request body.
   */
  contactcenterinsightsProjectsLocationsInsightsdataExport(
    req: operations.ContactcenterinsightsProjectsLocationsInsightsdataExportRequest,
    security: operations.ContactcenterinsightsProjectsLocationsInsightsdataExportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsInsightsdataExportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsInsightsdataExportRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/insightsdata:export",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudContactcenterinsightsV1ExportInsightsDataRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsInsightsdataExportSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsInsightsdataExportResponse =
        new operations.ContactcenterinsightsProjectsLocationsInsightsdataExportResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets an issue model's statistics.
   */
  contactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStats(
    req: operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsRequest,
    security: operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{issueModel}:calculateIssueModelStats",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsResponse =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates an issue model.
   */
  contactcenterinsightsProjectsLocationsIssueModelsCreate(
    req: operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateRequest,
    security: operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/issueModels",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudContactcenterinsightsV1IssueModelInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateResponse =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deploys an issue model. Returns an error if a model is already deployed. An issue model can only be used in analysis after it has been deployed.
   */
  contactcenterinsightsProjectsLocationsIssueModelsDeploy(
    req: operations.ContactcenterinsightsProjectsLocationsIssueModelsDeployRequest,
    security: operations.ContactcenterinsightsProjectsLocationsIssueModelsDeploySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsIssueModelsDeployResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsDeployRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:deploy", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudContactcenterinsightsV1DeployIssueModelRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsDeploySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsIssueModelsDeployResponse =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsDeployResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists issues.
   */
  contactcenterinsightsProjectsLocationsIssueModelsIssuesList(
    req: operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListRequest,
    security: operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/issues", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListResponse =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudContactcenterinsightsV1ListIssuesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudContactcenterinsightsV1ListIssuesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists issue models.
   */
  contactcenterinsightsProjectsLocationsIssueModelsList(
    req: operations.ContactcenterinsightsProjectsLocationsIssueModelsListRequest,
    security: operations.ContactcenterinsightsProjectsLocationsIssueModelsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsIssueModelsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/issueModels",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsIssueModelsListResponse =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudContactcenterinsightsV1ListIssueModelsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudContactcenterinsightsV1ListIssueModelsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Undeploys an issue model. An issue model can not be used in analysis after it has been undeployed.
   */
  contactcenterinsightsProjectsLocationsIssueModelsUndeploy(
    req: operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeployRequest,
    security: operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeploySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeployResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeployRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:undeploy", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudContactcenterinsightsV1UndeployIssueModelRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeploySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeployResponse =
        new operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeployResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
   */
  contactcenterinsightsProjectsLocationsOperationsCancel(
    req: operations.ContactcenterinsightsProjectsLocationsOperationsCancelRequest,
    security: operations.ContactcenterinsightsProjectsLocationsOperationsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsOperationsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsOperationsCancelRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:cancel", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsOperationsCancelSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsOperationsCancelResponse =
        new operations.ContactcenterinsightsProjectsLocationsOperationsCancelResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleProtobufEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
   */
  contactcenterinsightsProjectsLocationsOperationsList(
    req: operations.ContactcenterinsightsProjectsLocationsOperationsListRequest,
    security: operations.ContactcenterinsightsProjectsLocationsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsOperationsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsOperationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsOperationsListResponse =
        new operations.ContactcenterinsightsProjectsLocationsOperationsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningListOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a phrase matcher.
   */
  contactcenterinsightsProjectsLocationsPhraseMatchersCreate(
    req: operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateRequest,
    security: operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/phraseMatchers",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudContactcenterinsightsV1PhraseMatcherInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateResponse =
        new operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudContactcenterinsightsV1PhraseMatcher =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudContactcenterinsightsV1PhraseMatcher
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists phrase matchers.
   */
  contactcenterinsightsProjectsLocationsPhraseMatchersList(
    req: operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListRequest,
    security: operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/phraseMatchers",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListResponse =
        new operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudContactcenterinsightsV1ListPhraseMatchersResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudContactcenterinsightsV1ListPhraseMatchersResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a view.
   */
  contactcenterinsightsProjectsLocationsViewsCreate(
    req: operations.ContactcenterinsightsProjectsLocationsViewsCreateRequest,
    security: operations.ContactcenterinsightsProjectsLocationsViewsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsViewsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsViewsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/views", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudContactcenterinsightsV1ViewInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsViewsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsViewsCreateResponse =
        new operations.ContactcenterinsightsProjectsLocationsViewsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudContactcenterinsightsV1View = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudContactcenterinsightsV1View
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a view.
   */
  contactcenterinsightsProjectsLocationsViewsDelete(
    req: operations.ContactcenterinsightsProjectsLocationsViewsDeleteRequest,
    security: operations.ContactcenterinsightsProjectsLocationsViewsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsViewsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsViewsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsViewsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsViewsDeleteResponse =
        new operations.ContactcenterinsightsProjectsLocationsViewsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleProtobufEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a view.
   */
  contactcenterinsightsProjectsLocationsViewsGet(
    req: operations.ContactcenterinsightsProjectsLocationsViewsGetRequest,
    security: operations.ContactcenterinsightsProjectsLocationsViewsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsViewsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsViewsGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsViewsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsViewsGetResponse =
        new operations.ContactcenterinsightsProjectsLocationsViewsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudContactcenterinsightsV1View = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudContactcenterinsightsV1View
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists views.
   */
  contactcenterinsightsProjectsLocationsViewsList(
    req: operations.ContactcenterinsightsProjectsLocationsViewsListRequest,
    security: operations.ContactcenterinsightsProjectsLocationsViewsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsViewsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsViewsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/views", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsViewsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsViewsListResponse =
        new operations.ContactcenterinsightsProjectsLocationsViewsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudContactcenterinsightsV1ListViewsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudContactcenterinsightsV1ListViewsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a view.
   */
  contactcenterinsightsProjectsLocationsViewsPatch(
    req: operations.ContactcenterinsightsProjectsLocationsViewsPatchRequest,
    security: operations.ContactcenterinsightsProjectsLocationsViewsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactcenterinsightsProjectsLocationsViewsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContactcenterinsightsProjectsLocationsViewsPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudContactcenterinsightsV1ViewInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContactcenterinsightsProjectsLocationsViewsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactcenterinsightsProjectsLocationsViewsPatchResponse =
        new operations.ContactcenterinsightsProjectsLocationsViewsPatchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudContactcenterinsightsV1View = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudContactcenterinsightsV1View
            );
          }
          break;
      }

      return res;
    });
  }
}
