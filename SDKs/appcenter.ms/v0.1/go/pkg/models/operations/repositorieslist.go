// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type RepositoriesListSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// RepositoriesListFormEnum - The selected form of the object
type RepositoriesListFormEnum string

const (
	RepositoriesListFormEnumLite RepositoriesListFormEnum = "lite"
	RepositoriesListFormEnumFull RepositoriesListFormEnum = "full"
)

func (e RepositoriesListFormEnum) ToPointer() *RepositoriesListFormEnum {
	return &e
}

func (e *RepositoriesListFormEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "lite":
		fallthrough
	case "full":
		*e = RepositoriesListFormEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RepositoriesListFormEnum: %v", v)
	}
}

// RepositoriesListSourceHostEnum - The source host
type RepositoriesListSourceHostEnum string

const (
	RepositoriesListSourceHostEnumGithub    RepositoriesListSourceHostEnum = "github"
	RepositoriesListSourceHostEnumBitbucket RepositoriesListSourceHostEnum = "bitbucket"
	RepositoriesListSourceHostEnumVsts      RepositoriesListSourceHostEnum = "vsts"
	RepositoriesListSourceHostEnumGitlab    RepositoriesListSourceHostEnum = "gitlab"
)

func (e RepositoriesListSourceHostEnum) ToPointer() *RepositoriesListSourceHostEnum {
	return &e
}

func (e *RepositoriesListSourceHostEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		fallthrough
	case "bitbucket":
		fallthrough
	case "vsts":
		fallthrough
	case "gitlab":
		*e = RepositoriesListSourceHostEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RepositoriesListSourceHostEnum: %v", v)
	}
}

type RepositoriesListRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The selected form of the object
	Form *RepositoriesListFormEnum `queryParam:"style=form,explode=true,name=form"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The id of the service connection (private). Required for GitLab self-hosted repositories
	ServiceConnectionID *string `queryParam:"style=form,explode=true,name=service_connection_id"`
	// The source host
	SourceHost RepositoriesListSourceHostEnum `pathParam:"style=simple,explode=false,name=source_host"`
	// Filter repositories only for specified account and project, "vstsProjectId" is required
	VstsAccountName *string `queryParam:"style=form,explode=true,name=vstsAccountName"`
	// Filter repositories only for specified account and project, "vstsAccountName" is required
	VstsProjectID *string `queryParam:"style=form,explode=true,name=vstsProjectId"`
}

// RepositoriesListDefaultApplicationJSON - Bad Request
type RepositoriesListDefaultApplicationJSON struct {
	Code    string `json:"code"`
	ID      string `json:"id"`
	Message string `json:"message"`
}

// RepositoriesList200ApplicationJSON - The source repository
type RepositoriesList200ApplicationJSON struct {
	// URL used to clone the repository
	CloneURL *string `json:"clone_url,omitempty"`
	// The repository name
	Name *string `json:"name,omitempty"`
}

type RepositoriesListResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	RepositoriesList200ApplicationJSONObjects []RepositoriesList200ApplicationJSON
	// Bad Request
	RepositoriesListDefaultApplicationJSONObject *RepositoriesListDefaultApplicationJSON
}
