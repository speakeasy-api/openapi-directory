/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Flat users
 */
export class User {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List liked scores
   */
  gerUserLikes(
    req: operations.GerUserLikesRequest,
    security: operations.GerUserLikesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GerUserLikesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GerUserLikesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/users/{user}/likes", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GerUserLikesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GerUserLikesResponse =
        new operations.GerUserLikesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scoreDetails = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.scoreDetails = utils.objectToClass(
              httpRes?.data,
              shared.ScoreDetails,
              resFieldDepth
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.flatErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.FlatErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a public user profile
   *
   * @remarks
   * Get a public profile of a Flat User.
   *
   */
  getUser(
    req: operations.GetUserRequest,
    security: operations.GetUserSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/users/{user}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetUserSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUserResponse = new operations.GetUserResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userPublic = utils.objectToClass(
              httpRes?.data,
              shared.UserPublic
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.flatErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.FlatErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List user's scores
   *
   * @remarks
   * Get the list of public scores owned by a User.
   *
   * **DEPRECATED**: Please note that the current behavior will be deprecrated on **2019-01-01**.
   * This method will no longer list private and shared scores, but only public scores of a Flat account.
   * If you want to access to private scores, please use the [Collections API](#tag/Collection) instead.
   *
   */
  getUserScores(
    req: operations.GetUserScoresRequest,
    security: operations.GetUserScoresSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUserScoresResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUserScoresRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/users/{user}/scores", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetUserScoresSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUserScoresResponse =
        new operations.GetUserScoresResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scoreDetails = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.scoreDetails = utils.objectToClass(
              httpRes?.data,
              shared.ScoreDetails,
              resFieldDepth
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.flatErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.FlatErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
