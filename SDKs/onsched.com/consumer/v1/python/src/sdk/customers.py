"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Customers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_consumer_v1_customers_id_(self, request: operations.DeleteConsumerV1CustomersIDRequest) -> operations.DeleteConsumerV1CustomersIDResponse:
        r"""Delete Customer
        <p>Use this endpoint to permanently <b>Delete</b> a Customer object. A valid <b>customer id</b> is required.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteConsumerV1CustomersIDRequest, base_url, '/consumer/v1/customers/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteConsumerV1CustomersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_consumer_v1_customers(self, request: operations.GetConsumerV1CustomersRequest) -> operations.GetConsumerV1CustomersResponse:
        r"""List Customers
        <p>Use this endpoint to return a <b>List of Customers</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/consumer/v1/customers'
        
        query_params = utils.get_query_params(operations.GetConsumerV1CustomersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConsumerV1CustomersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerListViewModel])
                res.customer_list_view_model = out

        return res

    def get_consumer_v1_customers_bookingfields(self, request: operations.GetConsumerV1CustomersBookingfieldsRequest) -> operations.GetConsumerV1CustomersBookingfieldsResponse:
        r"""Get Customer Booking Fields
        <p>Use this endpoint to return <b>Customer Booking Fields</b>. Customer booking fields are stored with each customer object. They are used when the information collected during the booking is for a particular customer. Customer Booking Fields include any custom customer fields you define and want to capture with the Booking.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/consumer/v1/customers/bookingfields'
        
        query_params = utils.get_query_params(operations.GetConsumerV1CustomersBookingfieldsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConsumerV1CustomersBookingfieldsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BookingFieldListViewModel])
                res.booking_field_list_view_model = out

        return res

    def get_consumer_v1_customers_countries(self) -> operations.GetConsumerV1CustomersCountriesResponse:
        r"""List Country Codes
        <p>Use this endpoint to return a <b>List of Countries with their associated Country Code</b>. Country codes are based on the 2-character ANSI standard. If your countries of operation are not currently listed, contact us at <i><b>support@onsched.com</b></i>.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/consumer/v1/customers/countries'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConsumerV1CustomersCountriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CountryViewModel]])
                res.country_view_models = out

        return res

    def get_consumer_v1_customers_customfields(self, request: operations.GetConsumerV1CustomersCustomfieldsRequest) -> operations.GetConsumerV1CustomersCustomfieldsResponse:
        r"""Get Customer Custom Fields
        <p>Use this endpoint to return <b>Customer Custom Fields</b>. Customer custom fields are stored with the customer object. They are used when the information collected during the booking is specific to a particular customer.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/consumer/v1/customers/customfields'
        
        query_params = utils.get_query_params(operations.GetConsumerV1CustomersCustomfieldsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConsumerV1CustomersCustomfieldsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomFieldDefinitionListViewModel])
                res.custom_field_definition_list_view_model = out

        return res

    def get_consumer_v1_customers_states(self, request: operations.GetConsumerV1CustomersStatesRequest) -> operations.GetConsumerV1CustomersStatesResponse:
        r"""List Country States
        <p>Use this endpoint to return a <b>List of Countries with their associated State Codes</b>. Supply a country code to filter results further. If states for your countries of operation are not currently listed, contact us at <i><b>support@onsched.com</b></i>.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/consumer/v1/customers/states'
        
        query_params = utils.get_query_params(operations.GetConsumerV1CustomersStatesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConsumerV1CustomersStatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.StateViewModel]])
                res.state_view_models = out

        return res

    def get_consumer_v1_customers_id_(self, request: operations.GetConsumerV1CustomersIDRequest) -> operations.GetConsumerV1CustomersIDResponse:
        r"""Get Customer
        <p>Use this endpoint to return a <b>Customer</b> object. A valid <b>customer id</b> is required. Find customer id's by using the <i>GET /consumer/v1/customers</i> endpoint.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetConsumerV1CustomersIDRequest, base_url, '/consumer/v1/customers/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConsumerV1CustomersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerViewModel])
                res.customer_view_model = out

        return res

    def post_consumer_v1_customers(self, request: shared.CustomerInputModel) -> operations.PostConsumerV1CustomersResponse:
        r"""Create Customer
        <p>Use this endpoint to <b>Create</b> a new Customer. A customer object is automatically created with the first appointment booking if it doesn't already exist. If not specified, the business location id defaults to the primary business location.</p>
        <p>Required Fields: <b>Email</b> and <b>Name</b> or <b>First and Lastname</b> depending on customer type. Type 0 = Person, Type 1 = Business. For type 0, the firstname and lastname fields are used. For type 1, the Name field is used, and the name field is also used to populate the lastname.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/consumer/v1/customers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostConsumerV1CustomersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerViewModel])
                res.customer_view_model = out

        return res

    def put_consumer_v1_customers_id_(self, request: operations.PutConsumerV1CustomersIDRequest) -> operations.PutConsumerV1CustomersIDResponse:
        r"""Update Customer
        <p>Use this endpoint to <b>Update</b> a Customer object. A valid <b>customer id</b> is required. Note: Blank fields are not changed.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutConsumerV1CustomersIDRequest, base_url, '/consumer/v1/customers/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "customer_update_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutConsumerV1CustomersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    