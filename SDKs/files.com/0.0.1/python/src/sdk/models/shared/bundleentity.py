"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import formfieldsetentity as shared_formfieldsetentity
from ..shared import imageentity as shared_imageentity
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class BundleEntityPermissionsEnum(str, Enum):
    r"""Permissions that apply to Folders in this Share Link."""
    READ = 'read'
    WRITE = 'write'
    READ_WRITE = 'read_write'
    FULL = 'full'
    NONE = 'none'
    PREVIEW_ONLY = 'preview_only'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BundleEntity:
    r"""Create Bundle"""
    
    clickwrap_body: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickwrap_body'), 'exclude': lambda f: f is None }})
    r"""Legal text that must be agreed to prior to accessing Bundle."""  
    clickwrap_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickwrap_id'), 'exclude': lambda f: f is None }})
    r"""ID of the clickwrap to use with this bundle."""  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Bundle code.  This code forms the end part of the Public URL."""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Bundle created at date/time"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Public description"""  
    dont_separate_submissions_by_folder: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dont_separate_submissions_by_folder'), 'exclude': lambda f: f is None }})
    r"""Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required."""  
    expires_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Bundle expiration date/time"""  
    form_field_set: Optional[shared_formfieldsetentity.FormFieldSetEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_field_set'), 'exclude': lambda f: f is None }})
    r"""List Form Field Sets"""  
    has_inbox: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_inbox'), 'exclude': lambda f: f is None }})
    r"""Does this bundle have an associated inbox?"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Bundle ID"""  
    inbox_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inbox_id'), 'exclude': lambda f: f is None }})
    r"""ID of the associated inbox, if available."""  
    max_uses: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_uses'), 'exclude': lambda f: f is None }})
    r"""Maximum number of times bundle can be accessed"""  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})
    r"""Bundle internal note"""  
    password_protected: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password_protected'), 'exclude': lambda f: f is None }})
    r"""Is this bundle password protected?"""  
    path_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path_template'), 'exclude': lambda f: f is None }})
    r"""Template for creating submission subfolders. Can use the uploader's name, email address, ip, company, and any custom form data."""  
    paths: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paths'), 'exclude': lambda f: f is None }})
    r"""A list of paths in this bundle"""  
    permissions: Optional[BundleEntityPermissionsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})
    r"""Permissions that apply to Folders in this Share Link."""  
    preview_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preview_only'), 'exclude': lambda f: f is None }})
    r"""Restrict users to previewing files only?"""  
    require_registration: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('require_registration'), 'exclude': lambda f: f is None }})
    r"""Show a registration page that captures the downloader's name and email address?"""  
    require_share_recipient: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('require_share_recipient'), 'exclude': lambda f: f is None }})
    r"""Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI?"""  
    send_email_receipt_to_uploader: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('send_email_receipt_to_uploader'), 'exclude': lambda f: f is None }})
    r"""Send delivery receipt to the uploader. Note: For writable share only"""  
    skip_company: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_company'), 'exclude': lambda f: f is None }})
    r"""BundleRegistrations can be saved without providing company?"""  
    skip_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_email'), 'exclude': lambda f: f is None }})
    r"""BundleRegistrations can be saved without providing email?"""  
    skip_name: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_name'), 'exclude': lambda f: f is None }})
    r"""BundleRegistrations can be saved without providing name?"""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Public URL of Share Link"""  
    user_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }})
    r"""Bundle creator user ID"""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username'), 'exclude': lambda f: f is None }})
    r"""Bundle creator username"""  
    watermark_attachment: Optional[shared_imageentity.ImageEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watermark_attachment'), 'exclude': lambda f: f is None }})  
    watermark_value: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watermark_value'), 'exclude': lambda f: f is None }})
    r"""Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value"""  
    