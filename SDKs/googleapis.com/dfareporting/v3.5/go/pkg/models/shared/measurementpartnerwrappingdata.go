// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MeasurementPartnerWrappingDataLinkStatusEnum - Placement wrapping status.
type MeasurementPartnerWrappingDataLinkStatusEnum string

const (
	MeasurementPartnerWrappingDataLinkStatusEnumMeasurementPartnerUnlinked            MeasurementPartnerWrappingDataLinkStatusEnum = "MEASUREMENT_PARTNER_UNLINKED"
	MeasurementPartnerWrappingDataLinkStatusEnumMeasurementPartnerLinked              MeasurementPartnerWrappingDataLinkStatusEnum = "MEASUREMENT_PARTNER_LINKED"
	MeasurementPartnerWrappingDataLinkStatusEnumMeasurementPartnerLinkPending         MeasurementPartnerWrappingDataLinkStatusEnum = "MEASUREMENT_PARTNER_LINK_PENDING"
	MeasurementPartnerWrappingDataLinkStatusEnumMeasurementPartnerLinkFailure         MeasurementPartnerWrappingDataLinkStatusEnum = "MEASUREMENT_PARTNER_LINK_FAILURE"
	MeasurementPartnerWrappingDataLinkStatusEnumMeasurementPartnerLinkOptOut          MeasurementPartnerWrappingDataLinkStatusEnum = "MEASUREMENT_PARTNER_LINK_OPT_OUT"
	MeasurementPartnerWrappingDataLinkStatusEnumMeasurementPartnerLinkOptOutPending   MeasurementPartnerWrappingDataLinkStatusEnum = "MEASUREMENT_PARTNER_LINK_OPT_OUT_PENDING"
	MeasurementPartnerWrappingDataLinkStatusEnumMeasurementPartnerLinkWrappingPending MeasurementPartnerWrappingDataLinkStatusEnum = "MEASUREMENT_PARTNER_LINK_WRAPPING_PENDING"
	MeasurementPartnerWrappingDataLinkStatusEnumMeasurementPartnerModeChangePending   MeasurementPartnerWrappingDataLinkStatusEnum = "MEASUREMENT_PARTNER_MODE_CHANGE_PENDING"
)

func (e *MeasurementPartnerWrappingDataLinkStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MEASUREMENT_PARTNER_UNLINKED":
		fallthrough
	case "MEASUREMENT_PARTNER_LINKED":
		fallthrough
	case "MEASUREMENT_PARTNER_LINK_PENDING":
		fallthrough
	case "MEASUREMENT_PARTNER_LINK_FAILURE":
		fallthrough
	case "MEASUREMENT_PARTNER_LINK_OPT_OUT":
		fallthrough
	case "MEASUREMENT_PARTNER_LINK_OPT_OUT_PENDING":
		fallthrough
	case "MEASUREMENT_PARTNER_LINK_WRAPPING_PENDING":
		fallthrough
	case "MEASUREMENT_PARTNER_MODE_CHANGE_PENDING":
		*e = MeasurementPartnerWrappingDataLinkStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeasurementPartnerWrappingDataLinkStatusEnum: %s", s)
	}
}

// MeasurementPartnerWrappingDataMeasurementPartnerEnum - Measurement partner used for wrapping the placement.
type MeasurementPartnerWrappingDataMeasurementPartnerEnum string

const (
	MeasurementPartnerWrappingDataMeasurementPartnerEnumNone              MeasurementPartnerWrappingDataMeasurementPartnerEnum = "NONE"
	MeasurementPartnerWrappingDataMeasurementPartnerEnumIntegralAdScience MeasurementPartnerWrappingDataMeasurementPartnerEnum = "INTEGRAL_AD_SCIENCE"
	MeasurementPartnerWrappingDataMeasurementPartnerEnumDoubleVerify      MeasurementPartnerWrappingDataMeasurementPartnerEnum = "DOUBLE_VERIFY"
)

func (e *MeasurementPartnerWrappingDataMeasurementPartnerEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NONE":
		fallthrough
	case "INTEGRAL_AD_SCIENCE":
		fallthrough
	case "DOUBLE_VERIFY":
		*e = MeasurementPartnerWrappingDataMeasurementPartnerEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeasurementPartnerWrappingDataMeasurementPartnerEnum: %s", s)
	}
}

// MeasurementPartnerWrappingDataTagWrappingModeEnum - Measurement mode for the wrapped placement.
type MeasurementPartnerWrappingDataTagWrappingModeEnum string

const (
	MeasurementPartnerWrappingDataTagWrappingModeEnumNone                 MeasurementPartnerWrappingDataTagWrappingModeEnum = "NONE"
	MeasurementPartnerWrappingDataTagWrappingModeEnumBlocking             MeasurementPartnerWrappingDataTagWrappingModeEnum = "BLOCKING"
	MeasurementPartnerWrappingDataTagWrappingModeEnumMonitoring           MeasurementPartnerWrappingDataTagWrappingModeEnum = "MONITORING"
	MeasurementPartnerWrappingDataTagWrappingModeEnumMonitoringOnly       MeasurementPartnerWrappingDataTagWrappingModeEnum = "MONITORING_ONLY"
	MeasurementPartnerWrappingDataTagWrappingModeEnumVideoPixelMonitoring MeasurementPartnerWrappingDataTagWrappingModeEnum = "VIDEO_PIXEL_MONITORING"
	MeasurementPartnerWrappingDataTagWrappingModeEnumTracking             MeasurementPartnerWrappingDataTagWrappingModeEnum = "TRACKING"
	MeasurementPartnerWrappingDataTagWrappingModeEnumVpaidMonitoring      MeasurementPartnerWrappingDataTagWrappingModeEnum = "VPAID_MONITORING"
	MeasurementPartnerWrappingDataTagWrappingModeEnumVpaidBlocking        MeasurementPartnerWrappingDataTagWrappingModeEnum = "VPAID_BLOCKING"
	MeasurementPartnerWrappingDataTagWrappingModeEnumNonVpaidMonitoring   MeasurementPartnerWrappingDataTagWrappingModeEnum = "NON_VPAID_MONITORING"
	MeasurementPartnerWrappingDataTagWrappingModeEnumVpaidOnlyMonitoring  MeasurementPartnerWrappingDataTagWrappingModeEnum = "VPAID_ONLY_MONITORING"
	MeasurementPartnerWrappingDataTagWrappingModeEnumVpaidOnlyBlocking    MeasurementPartnerWrappingDataTagWrappingModeEnum = "VPAID_ONLY_BLOCKING"
	MeasurementPartnerWrappingDataTagWrappingModeEnumVpaidOnlyFiltering   MeasurementPartnerWrappingDataTagWrappingModeEnum = "VPAID_ONLY_FILTERING"
	MeasurementPartnerWrappingDataTagWrappingModeEnumVpaidFiltering       MeasurementPartnerWrappingDataTagWrappingModeEnum = "VPAID_FILTERING"
	MeasurementPartnerWrappingDataTagWrappingModeEnumNonVpaidFiltering    MeasurementPartnerWrappingDataTagWrappingModeEnum = "NON_VPAID_FILTERING"
)

func (e *MeasurementPartnerWrappingDataTagWrappingModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NONE":
		fallthrough
	case "BLOCKING":
		fallthrough
	case "MONITORING":
		fallthrough
	case "MONITORING_ONLY":
		fallthrough
	case "VIDEO_PIXEL_MONITORING":
		fallthrough
	case "TRACKING":
		fallthrough
	case "VPAID_MONITORING":
		fallthrough
	case "VPAID_BLOCKING":
		fallthrough
	case "NON_VPAID_MONITORING":
		fallthrough
	case "VPAID_ONLY_MONITORING":
		fallthrough
	case "VPAID_ONLY_BLOCKING":
		fallthrough
	case "VPAID_ONLY_FILTERING":
		fallthrough
	case "VPAID_FILTERING":
		fallthrough
	case "NON_VPAID_FILTERING":
		*e = MeasurementPartnerWrappingDataTagWrappingModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeasurementPartnerWrappingDataTagWrappingModeEnum: %s", s)
	}
}

// MeasurementPartnerWrappingData - Placement tag wrapping
type MeasurementPartnerWrappingData struct {
	// Placement wrapping status.
	LinkStatus *MeasurementPartnerWrappingDataLinkStatusEnum `json:"linkStatus,omitempty"`
	// Measurement partner used for wrapping the placement.
	MeasurementPartner *MeasurementPartnerWrappingDataMeasurementPartnerEnum `json:"measurementPartner,omitempty"`
	// Measurement mode for the wrapped placement.
	TagWrappingMode *MeasurementPartnerWrappingDataTagWrappingModeEnum `json:"tagWrappingMode,omitempty"`
	// Tag provided by the measurement partner during wrapping.
	WrappedTag *string `json:"wrappedTag,omitempty"`
}
