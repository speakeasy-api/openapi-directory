// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// FileV1FormatEnum - The format of the file returned (e.g., csv, pdf, jpg, or png).
type FileV1FormatEnum string

const (
	FileV1FormatEnumPdf FileV1FormatEnum = "pdf"
	FileV1FormatEnumCsv FileV1FormatEnum = "csv"
	FileV1FormatEnumJpg FileV1FormatEnum = "jpg"
	FileV1FormatEnumPng FileV1FormatEnum = "png"
)

func (e FileV1FormatEnum) ToPointer() *FileV1FormatEnum {
	return &e
}

func (e *FileV1FormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		fallthrough
	case "csv":
		fallthrough
	case "jpg":
		fallthrough
	case "png":
		*e = FileV1FormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FileV1FormatEnum: %v", v)
	}
}

// FileV1StatusEnum - The status of the file. If the status is `deleted`, you can no longer get a link to access the contents of the file using `/files/{file_id}/temporary_link`.
type FileV1StatusEnum string

const (
	FileV1StatusEnumAvailable FileV1StatusEnum = "available"
	FileV1StatusEnumDeleted   FileV1StatusEnum = "deleted"
)

func (e FileV1StatusEnum) ToPointer() *FileV1StatusEnum {
	return &e
}

func (e *FileV1StatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "available":
		fallthrough
	case "deleted":
		*e = FileV1StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FileV1StatusEnum: %v", v)
	}
}

// FileV1TypeEnum - The type of file defined by Herald to distinguish between multiple files, such as `quote_summary` or `policy_specimen`.
type FileV1TypeEnum string

const (
	FileV1TypeEnumQuoteSummary       FileV1TypeEnum = "quote_summary"
	FileV1TypeEnumPolicySpecimen     FileV1TypeEnum = "policy_specimen"
	FileV1TypeEnumCyberRiskAssement  FileV1TypeEnum = "cyber_risk_assement"
	FileV1TypeEnumApplicationSummary FileV1TypeEnum = "application_summary"
)

func (e FileV1TypeEnum) ToPointer() *FileV1TypeEnum {
	return &e
}

func (e *FileV1TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "quote_summary":
		fallthrough
	case "policy_specimen":
		fallthrough
	case "cyber_risk_assement":
		fallthrough
	case "application_summary":
		*e = FileV1TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FileV1TypeEnum: %v", v)
	}
}

// FileV1 - Details for a specific file.
type FileV1 struct {
	// The date when the file was created.
	CreatedAt *types.Date `json:"created_at,omitempty"`
	// A filename for the file, can be used when saving a file to a filesystem.
	FileName *string `json:"file_name,omitempty"`
	// The format of the file returned (e.g., csv, pdf, jpg, or png).
	Format *FileV1FormatEnum `json:"format,omitempty"`
	// id for a specific file.
	ID *string `json:"id,omitempty"`
	// The size of the file contents in bytes.
	Size *int64 `json:"size,omitempty"`
	// The status of the file. If the status is `deleted`, you can no longer get a link to access the contents of the file using `/files/{file_id}/temporary_link`.
	Status *FileV1StatusEnum `json:"status,omitempty"`
	// Text for the file that can be shown on screen.
	Text *string `json:"text,omitempty"`
	// The type of file defined by Herald to distinguish between multiple files, such as `quote_summary` or `policy_specimen`.
	Type *FileV1TypeEnum `json:"type,omitempty"`
}
