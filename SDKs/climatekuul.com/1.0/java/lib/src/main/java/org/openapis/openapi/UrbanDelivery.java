/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.net.http.HttpResponse;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.SerializedBody;

public class UrbanDelivery {
	
    /**
	 * CONFIRM_CARBON_OFFSET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CONFIRM_CARBON_OFFSET_SERVERS = {
        "http://api.climatekuul.com:8000/footprint",
    };
	
    /**
	 * CONFIRM_PAYMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CONFIRM_PAYMENT_SERVERS = {
        "http://api.climatekuul.com:8000/footprint",
    };
	
    /**
	 * CONFIRM_PAYMENT_OF_TRANSACTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CONFIRM_PAYMENT_OF_TRANSACTION_SERVERS = {
        "http://api.climatekuul.com:8000/footprint",
    };
	
    /**
	 * CONFIRMS_PLANTING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CONFIRMS_PLANTING_SERVERS = {
        "http://api.climatekuul.com:8000/footprint",
    };
	
    /**
	 * URBAN_DELIVERY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] URBAN_DELIVERY_SERVERS = {
        "http://api.climatekuul.com:8000/footprint",
    };
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public UrbanDelivery(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * confirmCarbonOffset
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmCarbonOffsetResponse confirmCarbonOffset(org.openapis.openapi.models.operations.ConfirmCarbonOffsetRequestBody request) throws Exception {
        return this.confirmCarbonOffset(request, null);
    }

    /**
     * confirmCarbonOffset
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmCarbonOffsetResponse confirmCarbonOffset(org.openapis.openapi.models.operations.ConfirmCarbonOffsetRequestBody request, String serverURL) throws Exception {
        String baseUrl = CONFIRM_CARBON_OFFSET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/urbanDelivery/confirmCarbonOffset");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConfirmCarbonOffsetResponse res = new org.openapis.openapi.models.operations.ConfirmCarbonOffsetResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * confirmPayment
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmPaymentResponse confirmPayment(org.openapis.openapi.models.operations.ConfirmPaymentRequestBody request) throws Exception {
        return this.confirmPayment(request, null);
    }

    /**
     * confirmPayment
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmPaymentResponse confirmPayment(org.openapis.openapi.models.operations.ConfirmPaymentRequestBody request, String serverURL) throws Exception {
        String baseUrl = CONFIRM_PAYMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/urbanDelivery/confirmPayment");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConfirmPaymentResponse res = new org.openapis.openapi.models.operations.ConfirmPaymentResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * confirmTransaction
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmPaymentOfTransactionResponse confirmPaymentOfTransaction(org.openapis.openapi.models.operations.ConfirmPaymentOfTransactionRequestBody request) throws Exception {
        return this.confirmPaymentOfTransaction(request, null);
    }

    /**
     * confirmTransaction
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmPaymentOfTransactionResponse confirmPaymentOfTransaction(org.openapis.openapi.models.operations.ConfirmPaymentOfTransactionRequestBody request, String serverURL) throws Exception {
        String baseUrl = CONFIRM_PAYMENT_OF_TRANSACTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/urbanDelivery/confirmTransaction");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConfirmPaymentOfTransactionResponse res = new org.openapis.openapi.models.operations.ConfirmPaymentOfTransactionResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * confirmPlanting
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmsPlantingResponse confirmsPlanting(org.openapis.openapi.models.operations.ConfirmsPlantingRequestBody request) throws Exception {
        return this.confirmsPlanting(request, null);
    }

    /**
     * confirmPlanting
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConfirmsPlantingResponse confirmsPlanting(org.openapis.openapi.models.operations.ConfirmsPlantingRequestBody request, String serverURL) throws Exception {
        String baseUrl = CONFIRMS_PLANTING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/urbanDelivery/confirmPlanting");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConfirmsPlantingResponse res = new org.openapis.openapi.models.operations.ConfirmsPlantingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * urbanDelivery
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UrbanDeliveryResponse urbanDelivery(org.openapis.openapi.models.operations.UrbanDeliveryRequestBody request) throws Exception {
        return this.urbanDelivery(request, null);
    }

    /**
     * urbanDelivery
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UrbanDeliveryResponse urbanDelivery(org.openapis.openapi.models.operations.UrbanDeliveryRequestBody request, String serverURL) throws Exception {
        String baseUrl = URBAN_DELIVERY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/urbanDelivery");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UrbanDeliveryResponse res = new org.openapis.openapi.models.operations.UrbanDeliveryResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }
}