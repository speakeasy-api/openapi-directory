/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * TaskStatistics - Resource usage statistics for a task.
 */
public class TaskStatistics {
    /**
     * Gets or sets the total kernel mode CPU time (summed across all cores and all compute nodes) consumed by the task.
     */
    @JsonProperty("kernelCPUTime")
    public String kernelCPUTime;
    public TaskStatistics withKernelCPUTime(String kernelCPUTime) {
        this.kernelCPUTime = kernelCPUTime;
        return this;
    }
    
    /**
     * Gets or sets the time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdateTime")
    public OffsetDateTime lastUpdateTime;
    public TaskStatistics withLastUpdateTime(OffsetDateTime lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
        return this;
    }
    
    /**
     * Gets or sets the total amount of data in GiB of I/O read by the task.
     */
    @JsonProperty("readIOGiB")
    public Double readIOGiB;
    public TaskStatistics withReadIOGiB(Double readIOGiB) {
        this.readIOGiB = readIOGiB;
        return this;
    }
    
    /**
     * Gets or sets the total number of I/O read operations performed by the task.
     */
    @JsonProperty("readIOps")
    public Long readIOps;
    public TaskStatistics withReadIOps(Long readIOps) {
        this.readIOps = readIOps;
        return this;
    }
    
    /**
     * Gets or sets the start time of the time range covered by the statistics.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;
    public TaskStatistics withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Gets or sets the URL for the statistics.
     */
    @JsonProperty("url")
    public String url;
    public TaskStatistics withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Gets or sets the total user mode CPU time (summed across all cores and all compute nodes) consumed by the task.
     */
    @JsonProperty("userCPUTime")
    public String userCPUTime;
    public TaskStatistics withUserCPUTime(String userCPUTime) {
        this.userCPUTime = userCPUTime;
        return this;
    }
    
    /**
     * Gets or sets the elapsed time between the creation of the task and the start of task execution.
     */
    @JsonProperty("waitTime")
    public String waitTime;
    public TaskStatistics withWaitTime(String waitTime) {
        this.waitTime = waitTime;
        return this;
    }
    
    /**
     * Gets or sets the total wall clock time of the task.
     */
    @JsonProperty("wallClockTime")
    public String wallClockTime;
    public TaskStatistics withWallClockTime(String wallClockTime) {
        this.wallClockTime = wallClockTime;
        return this;
    }
    
    /**
     * Gets or sets the total amount of data in GiB of I/O written by the task.
     */
    @JsonProperty("writeIOGiB")
    public Double writeIOGiB;
    public TaskStatistics withWriteIOGiB(Double writeIOGiB) {
        this.writeIOGiB = writeIOGiB;
        return this;
    }
    
    /**
     * Gets or sets the total number of I/O write operations performed by the task.
     */
    @JsonProperty("writeIOps")
    public Long writeIOps;
    public TaskStatistics withWriteIOps(Long writeIOps) {
        this.writeIOps = writeIOps;
        return this;
    }
    
}
