/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * WorkItemServiceState - The Dataflow service's idea of the current state of a WorkItem being processed by a worker.
 */
public class WorkItemServiceState {
    /**
     * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completeWorkStatus")
    public Status completeWorkStatus;

    public WorkItemServiceState withCompleteWorkStatus(Status completeWorkStatus) {
        this.completeWorkStatus = completeWorkStatus;
        return this;
    }
    
    /**
     * Other data returned by the service, specific to the particular worker harness.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("harnessData")
    public java.util.Map<String, Object> harnessData;

    public WorkItemServiceState withHarnessData(java.util.Map<String, Object> harnessData) {
        this.harnessData = harnessData;
        return this;
    }
    
    /**
     * Proto describing a hot key detected on a given WorkItem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hotKeyDetection")
    public HotKeyDetection hotKeyDetection;

    public WorkItemServiceState withHotKeyDetection(HotKeyDetection hotKeyDetection) {
        this.hotKeyDetection = hotKeyDetection;
        return this;
    }
    
    /**
     * Time at which the current lease will expire.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leaseExpireTime")
    public String leaseExpireTime;

    public WorkItemServiceState withLeaseExpireTime(String leaseExpireTime) {
        this.leaseExpireTime = leaseExpireTime;
        return this;
    }
    
    /**
     * The short ids that workers should use in subsequent metric updates. Workers should strive to use short ids whenever possible, but it is ok to request the short_id again if a worker lost track of it (e.g. if the worker is recovering from a crash). NOTE: it is possible that the response may have short ids for a subset of the metrics.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metricShortId")
    public MetricShortId[] metricShortId;

    public WorkItemServiceState withMetricShortId(MetricShortId[] metricShortId) {
        this.metricShortId = metricShortId;
        return this;
    }
    
    /**
     * The index value to use for the next report sent by the worker. Note: If the report call fails for whatever reason, the worker should reuse this index for subsequent report attempts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextReportIndex")
    public String nextReportIndex;

    public WorkItemServiceState withNextReportIndex(String nextReportIndex) {
        this.nextReportIndex = nextReportIndex;
        return this;
    }
    
    /**
     * New recommended reporting interval.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportStatusInterval")
    public String reportStatusInterval;

    public WorkItemServiceState withReportStatusInterval(String reportStatusInterval) {
        this.reportStatusInterval = reportStatusInterval;
        return this;
    }
    
    /**
     * A suggestion by the service to the worker to dynamically split the WorkItem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splitRequest")
    public ApproximateSplitRequest splitRequest;

    public WorkItemServiceState withSplitRequest(ApproximateSplitRequest splitRequest) {
        this.splitRequest = splitRequest;
        return this;
    }
    
    /**
     * Obsolete in favor of ApproximateReportedProgress and ApproximateSplitRequest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suggestedStopPoint")
    public ApproximateProgress suggestedStopPoint;

    public WorkItemServiceState withSuggestedStopPoint(ApproximateProgress suggestedStopPoint) {
        this.suggestedStopPoint = suggestedStopPoint;
        return this;
    }
    
    /**
     * Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suggestedStopPosition")
    public Position suggestedStopPosition;

    public WorkItemServiceState withSuggestedStopPosition(Position suggestedStopPosition) {
        this.suggestedStopPosition = suggestedStopPosition;
        return this;
    }
    
    public WorkItemServiceState(){}
}
