/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PolicyRepresentation } from "./policyrepresentation";
import { ResourceRepresentation } from "./resourcerepresentation";
import { ScopeRepresentation } from "./scoperepresentation";
import { Expose, Type } from "class-transformer";

export enum ResourceServerRepresentationDecisionStrategyEnum {
  Affirmative = "AFFIRMATIVE",
  Unanimous = "UNANIMOUS",
  Consensus = "CONSENSUS",
}

export enum ResourceServerRepresentationPolicyEnforcementModeEnum {
  Enforcing = "ENFORCING",
  Permissive = "PERMISSIVE",
  Disabled = "DISABLED",
}

export class ResourceServerRepresentation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "allowRemoteResourceManagement" })
  allowRemoteResourceManagement?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "clientId" })
  clientId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "decisionStrategy" })
  decisionStrategy?: ResourceServerRepresentationDecisionStrategyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata({ elemType: PolicyRepresentation })
  @Expose({ name: "policies" })
  @Type(() => PolicyRepresentation)
  policies?: PolicyRepresentation[];

  @SpeakeasyMetadata()
  @Expose({ name: "policyEnforcementMode" })
  policyEnforcementMode?: ResourceServerRepresentationPolicyEnforcementModeEnum;

  @SpeakeasyMetadata({ elemType: ResourceRepresentation })
  @Expose({ name: "resources" })
  @Type(() => ResourceRepresentation)
  resources?: ResourceRepresentation[];

  @SpeakeasyMetadata({ elemType: ScopeRepresentation })
  @Expose({ name: "scopes" })
  @Type(() => ScopeRepresentation)
  scopes?: ScopeRepresentation[];
}
