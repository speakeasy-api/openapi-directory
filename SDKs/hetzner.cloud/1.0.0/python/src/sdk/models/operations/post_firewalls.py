"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFirewallsCreateFirewallRequestApplyToLabelSelector:
    r"""Configuration for type LabelSelector, required if type is `label_selector`"""
    
    selector: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selector') }})
    r"""Label selector"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFirewallsCreateFirewallRequestApplyToServer:
    r"""Configuration for type Server, required if type is `server`"""
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Server"""  
    
class PostFirewallsCreateFirewallRequestApplyToTypeEnum(str, Enum):
    r"""Type of the resource"""
    SERVER = 'server'
    LABEL_SELECTOR = 'label_selector'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFirewallsCreateFirewallRequestApplyTo:
    
    type: PostFirewallsCreateFirewallRequestApplyToTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of the resource"""  
    label_selector: Optional[PostFirewallsCreateFirewallRequestApplyToLabelSelector] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_selector'), 'exclude': lambda f: f is None }})
    r"""Configuration for type LabelSelector, required if type is `label_selector`"""  
    server: Optional[PostFirewallsCreateFirewallRequestApplyToServer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server'), 'exclude': lambda f: f is None }})
    r"""Configuration for type Server, required if type is `server`"""  
    
class PostFirewallsCreateFirewallRequestRuleDirectionEnum(str, Enum):
    r"""Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`."""
    IN = 'in'
    OUT = 'out'

class PostFirewallsCreateFirewallRequestRuleProtocolEnum(str, Enum):
    r"""Type of traffic to allow"""
    TCP = 'tcp'
    UDP = 'udp'
    ICMP = 'icmp'
    ESP = 'esp'
    GRE = 'gre'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFirewallsCreateFirewallRequestRule:
    
    direction: PostFirewallsCreateFirewallRequestRuleDirectionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction') }})
    r"""Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`."""  
    protocol: PostFirewallsCreateFirewallRequestRuleProtocolEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol') }})
    r"""Type of traffic to allow"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the Rule"""  
    destination_ips: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_ips'), 'exclude': lambda f: f is None }})
    r"""List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most."""  
    port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port'), 'exclude': lambda f: f is None }})
    r"""Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`."""  
    source_ips: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_ips'), 'exclude': lambda f: f is None }})
    r"""List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFirewallsCreateFirewallRequest:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Firewall"""  
    apply_to: Optional[list[PostFirewallsCreateFirewallRequestApplyTo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apply_to'), 'exclude': lambda f: f is None }})
    r"""Resources the Firewall should be applied to after creation"""  
    labels: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""User-defined labels (key-value pairs)"""  
    rules: Optional[list[PostFirewallsCreateFirewallRequestRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules'), 'exclude': lambda f: f is None }})
    r"""Array of rules"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFirewallsCreateFirewallResponseActionError:
    r"""Error message for the Action if error occurred, otherwise null"""
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Fixed machine readable code"""  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Humanized error message"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFirewallsCreateFirewallResponseActionResources:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of resource referenced"""  
    
class PostFirewallsCreateFirewallResponseActionStatusEnum(str, Enum):
    r"""Status of the Action"""
    SUCCESS = 'success'
    RUNNING = 'running'
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFirewallsCreateFirewallResponseAction:
    
    command: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('command') }})
    r"""Command executed in the Action"""  
    error: PostFirewallsCreateFirewallResponseActionError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})
    r"""Error message for the Action if error occurred, otherwise null"""  
    finished: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finished') }})
    r"""Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    progress: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progress') }})
    r"""Progress of Action in percent"""  
    resources: list[PostFirewallsCreateFirewallResponseActionResources] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources') }})
    r"""Resources the Action relates to"""  
    started: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('started') }})
    r"""Point in time when the Action was started (in ISO-8601 format)"""  
    status: PostFirewallsCreateFirewallResponseActionStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of the Action"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesServer:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    
class PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum(str, Enum):
    r"""Type of resource referenced"""
    SERVER = 'server'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResources:
    
    server: Optional[PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesServer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server'), 'exclude': lambda f: f is None }})  
    type: Optional[PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of resource referenced"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFirewallsCreateFirewallResponseFirewallAppliedToLabelSelector:
    
    selector: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selector') }})
    r"""Label selector"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFirewallsCreateFirewallResponseFirewallAppliedToServer:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    
class PostFirewallsCreateFirewallResponseFirewallAppliedToTypeEnum(str, Enum):
    r"""Type of resource referenced"""
    SERVER = 'server'
    LABEL_SELECTOR = 'label_selector'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFirewallsCreateFirewallResponseFirewallAppliedTo:
    
    type: PostFirewallsCreateFirewallResponseFirewallAppliedToTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of resource referenced"""  
    applied_to_resources: Optional[list[PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResources]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applied_to_resources'), 'exclude': lambda f: f is None }})  
    label_selector: Optional[PostFirewallsCreateFirewallResponseFirewallAppliedToLabelSelector] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_selector'), 'exclude': lambda f: f is None }})  
    server: Optional[PostFirewallsCreateFirewallResponseFirewallAppliedToServer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server'), 'exclude': lambda f: f is None }})  
    
class PostFirewallsCreateFirewallResponseFirewallRuleDirectionEnum(str, Enum):
    r"""Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`."""
    IN = 'in'
    OUT = 'out'

class PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum(str, Enum):
    r"""Type of traffic to allow"""
    TCP = 'tcp'
    UDP = 'udp'
    ICMP = 'icmp'
    ESP = 'esp'
    GRE = 'gre'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFirewallsCreateFirewallResponseFirewallRule:
    
    direction: PostFirewallsCreateFirewallResponseFirewallRuleDirectionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction') }})
    r"""Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`."""  
    protocol: PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol') }})
    r"""Type of traffic to allow"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the Rule"""  
    destination_ips: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_ips'), 'exclude': lambda f: f is None }})
    r"""List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most."""  
    port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port'), 'exclude': lambda f: f is None }})
    r"""Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`."""  
    source_ips: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_ips'), 'exclude': lambda f: f is None }})
    r"""List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFirewallsCreateFirewallResponseFirewall:
    
    applied_to: list[PostFirewallsCreateFirewallResponseFirewallAppliedTo] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applied_to') }})  
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Resource was created (in ISO-8601 format)"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Resource. Must be unique per Project."""  
    rules: list[PostFirewallsCreateFirewallResponseFirewallRule] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules') }})  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""User-defined labels (key-value pairs)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFirewallsCreateFirewallResponse:
    r"""The `firewall` key contains the Firewall that was just created"""
    
    actions: Optional[list[PostFirewallsCreateFirewallResponseAction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actions'), 'exclude': lambda f: f is None }})  
    firewall: Optional[PostFirewallsCreateFirewallResponseFirewall] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firewall'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostFirewallsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_firewall_response: Optional[PostFirewallsCreateFirewallResponse] = dataclasses.field(default=None)
    r"""The `firewall` key contains the Firewall that was just created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    