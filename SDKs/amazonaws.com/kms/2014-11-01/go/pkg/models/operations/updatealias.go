// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateAliasXAmzTargetEnum
type UpdateAliasXAmzTargetEnum string

const (
	UpdateAliasXAmzTargetEnumTrentServiceUpdateAlias UpdateAliasXAmzTargetEnum = "TrentService.UpdateAlias"
)

func (e UpdateAliasXAmzTargetEnum) ToPointer() *UpdateAliasXAmzTargetEnum {
	return &e
}

func (e *UpdateAliasXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TrentService.UpdateAlias":
		*e = UpdateAliasXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAliasXAmzTargetEnum: %v", v)
	}
}

type UpdateAliasRequest struct {
	UpdateAliasRequest shared.UpdateAliasRequest `request:"mediaType=application/json"`
	XAmzAlgorithm      *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget         UpdateAliasXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateAliasResponse struct {
	ContentType string
	// DependencyTimeoutException
	DependencyTimeoutException interface{}
	// KMSInternalException
	KMSInternalException interface{}
	// KMSInvalidStateException
	KMSInvalidStateException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
}
