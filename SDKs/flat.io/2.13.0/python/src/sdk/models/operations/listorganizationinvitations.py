"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import flaterrorresponse as shared_flaterrorresponse
from ..shared import organizationinvitation as shared_organizationinvitation
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class ListOrganizationInvitationsSecurity:
    
    o_auth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class ListOrganizationInvitationsRoleEnum(str, Enum):
    r"""Filter users by role"""
    USER = 'user'
    TEACHER = 'teacher'
    ADMIN = 'admin'


@dataclasses.dataclass
class ListOrganizationInvitationsRequest:
    
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""This is the maximum number of objects that may be returned"""  
    next: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next', 'style': 'form', 'explode': True }})
    r"""An opaque string cursor to fetch the next page of data.
    The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
    """  
    previous: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'previous', 'style': 'form', 'explode': True }})
    r"""An opaque string cursor to fetch the previous page of data.
    The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
    """  
    role: Optional[ListOrganizationInvitationsRoleEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'role', 'style': 'form', 'explode': True }})
    r"""Filter users by role"""  
    

@dataclasses.dataclass
class ListOrganizationInvitationsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    flat_error_response: Optional[shared_flaterrorresponse.FlatErrorResponse] = dataclasses.field(default=None)
    r"""Error"""  
    organization_invitations: Optional[list[shared_organizationinvitation.OrganizationInvitation]] = dataclasses.field(default=None)
    r"""List of invitations"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    