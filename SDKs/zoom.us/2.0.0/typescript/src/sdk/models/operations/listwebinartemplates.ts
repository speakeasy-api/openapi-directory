/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class ListWebinarTemplatesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=userId",
  })
  userId: string;
}

export class ListWebinarTemplates200ApplicationXMLTemplates extends SpeakeasyBase {
  /**
   * Unique identifier of the template. If you would like to use this template while scheduling a webinar, you can provide the value of this field in `template_id` field of [Create a Webinar](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate) API.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * Name of the template.
   */
  @SpeakeasyMetadata()
  name?: string;
}

/**
 * **HTTP Status Code:** `200` **OK** <br>
 *
 * @remarks
 * List of existing templates returned.
 */
export class ListWebinarTemplates200ApplicationXML extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: ListWebinarTemplates200ApplicationXMLTemplates,
  })
  templates?: ListWebinarTemplates200ApplicationXMLTemplates[];

  /**
   * Total number of records returned.
   */
  @SpeakeasyMetadata()
  totalRecords?: number;
}

export class ListWebinarTemplates200ApplicationJSONTemplates extends SpeakeasyBase {
  /**
   * Unique identifier of the template. If you would like to use this template while scheduling a webinar, you can provide the value of this field in `template_id` field of [Create a Webinar](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate) API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name of the template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * **HTTP Status Code:** `200` **OK** <br>
 *
 * @remarks
 * List of existing templates returned.
 */
export class ListWebinarTemplates200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: ListWebinarTemplates200ApplicationJSONTemplates,
  })
  @Expose({ name: "templates" })
  @Type(() => ListWebinarTemplates200ApplicationJSONTemplates)
  templates?: ListWebinarTemplates200ApplicationJSONTemplates[];

  /**
   * Total number of records returned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_records" })
  totalRecords?: number;
}

export class ListWebinarTemplatesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200` **OK** <br>
   *
   * @remarks
   * List of existing templates returned.
   */
  @SpeakeasyMetadata()
  listWebinarTemplates200ApplicationJSONObject?: ListWebinarTemplates200ApplicationJSON;
}
