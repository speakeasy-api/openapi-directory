// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// QueryUnmanagedReaderObjectObjectTypeEnum - Filter by the type of the unmanaged object.
type QueryUnmanagedReaderObjectObjectTypeEnum string

const (
	QueryUnmanagedReaderObjectObjectTypeEnumVirtualMachine          QueryUnmanagedReaderObjectObjectTypeEnum = "VirtualMachine"
	QueryUnmanagedReaderObjectObjectTypeEnumMssqlDatabase           QueryUnmanagedReaderObjectObjectTypeEnum = "MssqlDatabase"
	QueryUnmanagedReaderObjectObjectTypeEnumLinuxFileset            QueryUnmanagedReaderObjectObjectTypeEnum = "LinuxFileset"
	QueryUnmanagedReaderObjectObjectTypeEnumWindowsFileset          QueryUnmanagedReaderObjectObjectTypeEnum = "WindowsFileset"
	QueryUnmanagedReaderObjectObjectTypeEnumShareFileset            QueryUnmanagedReaderObjectObjectTypeEnum = "ShareFileset"
	QueryUnmanagedReaderObjectObjectTypeEnumNutanixVirtualMachine   QueryUnmanagedReaderObjectObjectTypeEnum = "NutanixVirtualMachine"
	QueryUnmanagedReaderObjectObjectTypeEnumHypervVirtualMachine    QueryUnmanagedReaderObjectObjectTypeEnum = "HypervVirtualMachine"
	QueryUnmanagedReaderObjectObjectTypeEnumManagedVolume           QueryUnmanagedReaderObjectObjectTypeEnum = "ManagedVolume"
	QueryUnmanagedReaderObjectObjectTypeEnumEc2Instance             QueryUnmanagedReaderObjectObjectTypeEnum = "Ec2Instance"
	QueryUnmanagedReaderObjectObjectTypeEnumStorageArrayVolumeGroup QueryUnmanagedReaderObjectObjectTypeEnum = "StorageArrayVolumeGroup"
	QueryUnmanagedReaderObjectObjectTypeEnumVcdVapp                 QueryUnmanagedReaderObjectObjectTypeEnum = "VcdVapp"
	QueryUnmanagedReaderObjectObjectTypeEnumLinuxHost               QueryUnmanagedReaderObjectObjectTypeEnum = "LinuxHost"
	QueryUnmanagedReaderObjectObjectTypeEnumWindowsHost             QueryUnmanagedReaderObjectObjectTypeEnum = "WindowsHost"
	QueryUnmanagedReaderObjectObjectTypeEnumOracleDatabase          QueryUnmanagedReaderObjectObjectTypeEnum = "OracleDatabase"
	QueryUnmanagedReaderObjectObjectTypeEnumVolumeGroup             QueryUnmanagedReaderObjectObjectTypeEnum = "VolumeGroup"
	QueryUnmanagedReaderObjectObjectTypeEnumAppBlueprint            QueryUnmanagedReaderObjectObjectTypeEnum = "AppBlueprint"
)

func (e QueryUnmanagedReaderObjectObjectTypeEnum) ToPointer() *QueryUnmanagedReaderObjectObjectTypeEnum {
	return &e
}

func (e *QueryUnmanagedReaderObjectObjectTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VirtualMachine":
		fallthrough
	case "MssqlDatabase":
		fallthrough
	case "LinuxFileset":
		fallthrough
	case "WindowsFileset":
		fallthrough
	case "ShareFileset":
		fallthrough
	case "NutanixVirtualMachine":
		fallthrough
	case "HypervVirtualMachine":
		fallthrough
	case "ManagedVolume":
		fallthrough
	case "Ec2Instance":
		fallthrough
	case "StorageArrayVolumeGroup":
		fallthrough
	case "VcdVapp":
		fallthrough
	case "LinuxHost":
		fallthrough
	case "WindowsHost":
		fallthrough
	case "OracleDatabase":
		fallthrough
	case "VolumeGroup":
		fallthrough
	case "AppBlueprint":
		*e = QueryUnmanagedReaderObjectObjectTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryUnmanagedReaderObjectObjectTypeEnum: %v", v)
	}
}

// QueryUnmanagedReaderObjectSortByEnum - Sort the result by given attribute.
type QueryUnmanagedReaderObjectSortByEnum string

const (
	QueryUnmanagedReaderObjectSortByEnumName                   QueryUnmanagedReaderObjectSortByEnum = "Name"
	QueryUnmanagedReaderObjectSortByEnumUnmanagedStatus        QueryUnmanagedReaderObjectSortByEnum = "UnmanagedStatus"
	QueryUnmanagedReaderObjectSortByEnumLocation               QueryUnmanagedReaderObjectSortByEnum = "Location"
	QueryUnmanagedReaderObjectSortByEnumUnmanagedSnapshotCount QueryUnmanagedReaderObjectSortByEnum = "UnmanagedSnapshotCount"
	QueryUnmanagedReaderObjectSortByEnumLocalStorage           QueryUnmanagedReaderObjectSortByEnum = "LocalStorage"
	QueryUnmanagedReaderObjectSortByEnumArchiveStorage         QueryUnmanagedReaderObjectSortByEnum = "ArchiveStorage"
	QueryUnmanagedReaderObjectSortByEnumRetentionSLADomainName QueryUnmanagedReaderObjectSortByEnum = "RetentionSlaDomainName"
	QueryUnmanagedReaderObjectSortByEnumObjectType             QueryUnmanagedReaderObjectSortByEnum = "ObjectType"
	QueryUnmanagedReaderObjectSortByEnumSnapshotCount          QueryUnmanagedReaderObjectSortByEnum = "SnapshotCount"
	QueryUnmanagedReaderObjectSortByEnumAutoSnapshotCount      QueryUnmanagedReaderObjectSortByEnum = "AutoSnapshotCount"
	QueryUnmanagedReaderObjectSortByEnumManualSnapshotCount    QueryUnmanagedReaderObjectSortByEnum = "ManualSnapshotCount"
)

func (e QueryUnmanagedReaderObjectSortByEnum) ToPointer() *QueryUnmanagedReaderObjectSortByEnum {
	return &e
}

func (e *QueryUnmanagedReaderObjectSortByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Name":
		fallthrough
	case "UnmanagedStatus":
		fallthrough
	case "Location":
		fallthrough
	case "UnmanagedSnapshotCount":
		fallthrough
	case "LocalStorage":
		fallthrough
	case "ArchiveStorage":
		fallthrough
	case "RetentionSlaDomainName":
		fallthrough
	case "ObjectType":
		fallthrough
	case "SnapshotCount":
		fallthrough
	case "AutoSnapshotCount":
		fallthrough
	case "ManualSnapshotCount":
		*e = QueryUnmanagedReaderObjectSortByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryUnmanagedReaderObjectSortByEnum: %v", v)
	}
}

// QueryUnmanagedReaderObjectSortOrderEnum - The sort order. The default sort order is ascending.
type QueryUnmanagedReaderObjectSortOrderEnum string

const (
	QueryUnmanagedReaderObjectSortOrderEnumAsc  QueryUnmanagedReaderObjectSortOrderEnum = "asc"
	QueryUnmanagedReaderObjectSortOrderEnumDesc QueryUnmanagedReaderObjectSortOrderEnum = "desc"
)

func (e QueryUnmanagedReaderObjectSortOrderEnum) ToPointer() *QueryUnmanagedReaderObjectSortOrderEnum {
	return &e
}

func (e *QueryUnmanagedReaderObjectSortOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = QueryUnmanagedReaderObjectSortOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryUnmanagedReaderObjectSortOrderEnum: %v", v)
	}
}

// QueryUnmanagedReaderObjectUnmanagedStatusEnum - Filters by object status. Valid status are Protected, Unprotected, and Relic.
type QueryUnmanagedReaderObjectUnmanagedStatusEnum string

const (
	QueryUnmanagedReaderObjectUnmanagedStatusEnumProtected         QueryUnmanagedReaderObjectUnmanagedStatusEnum = "Protected"
	QueryUnmanagedReaderObjectUnmanagedStatusEnumRelic             QueryUnmanagedReaderObjectUnmanagedStatusEnum = "Relic"
	QueryUnmanagedReaderObjectUnmanagedStatusEnumUnprotected       QueryUnmanagedReaderObjectUnmanagedStatusEnum = "Unprotected"
	QueryUnmanagedReaderObjectUnmanagedStatusEnumReplicatedRelic   QueryUnmanagedReaderObjectUnmanagedStatusEnum = "ReplicatedRelic"
	QueryUnmanagedReaderObjectUnmanagedStatusEnumRemoteUnprotected QueryUnmanagedReaderObjectUnmanagedStatusEnum = "RemoteUnprotected"
)

func (e QueryUnmanagedReaderObjectUnmanagedStatusEnum) ToPointer() *QueryUnmanagedReaderObjectUnmanagedStatusEnum {
	return &e
}

func (e *QueryUnmanagedReaderObjectUnmanagedStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Protected":
		fallthrough
	case "Relic":
		fallthrough
	case "Unprotected":
		fallthrough
	case "ReplicatedRelic":
		fallthrough
	case "RemoteUnprotected":
		*e = QueryUnmanagedReaderObjectUnmanagedStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryUnmanagedReaderObjectUnmanagedStatusEnum: %v", v)
	}
}

type QueryUnmanagedReaderObjectRequest struct {
	// Retrieve objects after the unmanaged object with the specified ID.
	AfterID *string `queryParam:"style=form,explode=true,name=after_id"`
	// Limit the number of matches returned.
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Search object by object name.
	ObjectName *string `queryParam:"style=form,explode=true,name=object_name"`
	// Filter by the type of the unmanaged object.
	ObjectType *QueryUnmanagedReaderObjectObjectTypeEnum `queryParam:"style=form,explode=true,name=object_type"`
	// Sort the result by given attribute.
	SortBy *QueryUnmanagedReaderObjectSortByEnum `queryParam:"style=form,explode=true,name=sort_by"`
	// The sort order. The default sort order is ascending.
	SortOrder *QueryUnmanagedReaderObjectSortOrderEnum `queryParam:"style=form,explode=true,name=sort_order"`
	// Filters by object status. Valid status are Protected, Unprotected, and Relic.
	UnmanagedStatus *QueryUnmanagedReaderObjectUnmanagedStatusEnum `queryParam:"style=form,explode=true,name=unmanaged_status"`
}

type QueryUnmanagedReaderObjectResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Returns a page summary of the unmanaged objects recovered from reader archival locations.
	UnmanagedObjectSummaryListResponse *shared.UnmanagedObjectSummaryListResponse
}
