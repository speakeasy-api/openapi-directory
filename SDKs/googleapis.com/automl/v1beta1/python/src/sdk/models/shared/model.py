"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import imageclassificationmodelmetadata as shared_imageclassificationmodelmetadata
from ..shared import imageobjectdetectionmodelmetadata as shared_imageobjectdetectionmodelmetadata
from ..shared import tablesmodelmetadata as shared_tablesmodelmetadata
from ..shared import textclassificationmodelmetadata as shared_textclassificationmodelmetadata
from ..shared import textextractionmodelmetadata as shared_textextractionmodelmetadata
from ..shared import translationmodelmetadata as shared_translationmodelmetadata
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ModelDeploymentStateEnum(str, Enum):
    r"""Output only. Deployment state of the model. A model can only serve prediction requests after it gets deployed."""
    DEPLOYMENT_STATE_UNSPECIFIED = 'DEPLOYMENT_STATE_UNSPECIFIED'
    DEPLOYED = 'DEPLOYED'
    UNDEPLOYED = 'UNDEPLOYED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Model:
    r"""API proto representing a trained machine learning model."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Timestamp when the model training finished and can be used for prediction."""  
    dataset_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datasetId'), 'exclude': lambda f: f is None }})
    r"""Required. The resource ID of the dataset used to create the model. The dataset must come from the same ancestor project and location."""  
    deployment_state: Optional[ModelDeploymentStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentState'), 'exclude': lambda f: f is None }})
    r"""Output only. Deployment state of the model. A model can only serve prediction requests after it gets deployed."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The name of the model to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9. It must start with a letter."""  
    image_classification_model_metadata: Optional[shared_imageclassificationmodelmetadata.ImageClassificationModelMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageClassificationModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata for image classification."""  
    image_object_detection_model_metadata: Optional[shared_imageobjectdetectionmodelmetadata.ImageObjectDetectionModelMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageObjectDetectionModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata specific to image object detection."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Resource name of the model. Format: `projects/{project_id}/locations/{location_id}/models/{model_id}`"""  
    tables_model_metadata: Optional[shared_tablesmodelmetadata.TablesModelMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tablesModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata specific to AutoML Tables."""  
    text_classification_model_metadata: Optional[shared_textclassificationmodelmetadata.TextClassificationModelMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textClassificationModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata that is specific to text classification."""  
    text_extraction_model_metadata: Optional[shared_textextractionmodelmetadata.TextExtractionModelMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textExtractionModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata that is specific to text extraction."""  
    text_sentiment_model_metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textSentimentModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata that is specific to text sentiment."""  
    train_example_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trainExampleCount'), 'exclude': lambda f: f is None }})
    r"""Output only. The number of examples in the training set used for the model creation."""  
    translation_model_metadata: Optional[shared_translationmodelmetadata.TranslationModelMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('translationModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata that is specific to translation."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Timestamp when this model was last updated."""  
    validate_example_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validateExampleCount'), 'exclude': lambda f: f is None }})
    r"""Output only. The number of examples in the validation set used for the model creation."""  
    video_classification_model_metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoClassificationModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata specific to video classification."""  
    video_object_tracking_model_metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoObjectTrackingModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata specific to video object tracking."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ModelInput:
    r"""API proto representing a trained machine learning model."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Timestamp when the model training finished and can be used for prediction."""  
    dataset_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datasetId'), 'exclude': lambda f: f is None }})
    r"""Required. The resource ID of the dataset used to create the model. The dataset must come from the same ancestor project and location."""  
    deployment_state: Optional[ModelDeploymentStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentState'), 'exclude': lambda f: f is None }})
    r"""Output only. Deployment state of the model. A model can only serve prediction requests after it gets deployed."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The name of the model to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9. It must start with a letter."""  
    image_classification_model_metadata: Optional[shared_imageclassificationmodelmetadata.ImageClassificationModelMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageClassificationModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata for image classification."""  
    image_object_detection_model_metadata: Optional[shared_imageobjectdetectionmodelmetadata.ImageObjectDetectionModelMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageObjectDetectionModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata specific to image object detection."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Resource name of the model. Format: `projects/{project_id}/locations/{location_id}/models/{model_id}`"""  
    tables_model_metadata: Optional[shared_tablesmodelmetadata.TablesModelMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tablesModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata specific to AutoML Tables."""  
    text_classification_model_metadata: Optional[shared_textclassificationmodelmetadata.TextClassificationModelMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textClassificationModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata that is specific to text classification."""  
    text_extraction_model_metadata: Optional[shared_textextractionmodelmetadata.TextExtractionModelMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textExtractionModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata that is specific to text extraction."""  
    text_sentiment_model_metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textSentimentModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata that is specific to text sentiment."""  
    translation_model_metadata: Optional[shared_translationmodelmetadata.TranslationModelMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('translationModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata that is specific to translation."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Timestamp when this model was last updated."""  
    video_classification_model_metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoClassificationModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata specific to video classification."""  
    video_object_tracking_model_metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoObjectTrackingModelMetadata'), 'exclude': lambda f: f is None }})
    r"""Model metadata specific to video object tracking."""  
    