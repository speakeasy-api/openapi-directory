"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PerformanceReport:
    r"""The configuration data for an Ad Exchange performance report list."""
    
    bid_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bidRate'), 'exclude': lambda f: f is None }})
    r"""The number of bid responses with an ad."""  
    bid_request_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bidRequestRate'), 'exclude': lambda f: f is None }})
    r"""The number of bid requests sent to your bidder."""  
    callout_status_rate: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calloutStatusRate'), 'exclude': lambda f: f is None }})
    r"""Rate of various prefiltering statuses per match. Please refer to the callout-status-codes.txt file for different statuses."""  
    cookie_matcher_status_rate: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cookieMatcherStatusRate'), 'exclude': lambda f: f is None }})
    r"""Average QPS for cookie matcher operations."""  
    creative_status_rate: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeStatusRate'), 'exclude': lambda f: f is None }})
    r"""Rate of ads with a given status. Please refer to the creative-status-codes.txt file for different statuses."""  
    filtered_bid_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filteredBidRate'), 'exclude': lambda f: f is None }})
    r"""The number of bid responses that were filtered due to a policy violation or other errors."""  
    hosted_match_status_rate: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hostedMatchStatusRate'), 'exclude': lambda f: f is None }})
    r"""Average QPS for hosted match operations."""  
    inventory_match_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventoryMatchRate'), 'exclude': lambda f: f is None }})
    r"""The number of potential queries based on your pretargeting settings."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Resource type."""  
    latency50th_percentile: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latency50thPercentile'), 'exclude': lambda f: f is None }})
    r"""The 50th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report."""  
    latency85th_percentile: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latency85thPercentile'), 'exclude': lambda f: f is None }})
    r"""The 85th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report."""  
    latency95th_percentile: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latency95thPercentile'), 'exclude': lambda f: f is None }})
    r"""The 95th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report."""  
    no_quota_in_region: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noQuotaInRegion'), 'exclude': lambda f: f is None }})
    r"""Rate of various quota account statuses per quota check."""  
    out_of_quota: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outOfQuota'), 'exclude': lambda f: f is None }})
    r"""Rate of various quota account statuses per quota check."""  
    pixel_match_requests: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pixelMatchRequests'), 'exclude': lambda f: f is None }})
    r"""Average QPS for pixel match requests from clients."""  
    pixel_match_responses: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pixelMatchResponses'), 'exclude': lambda f: f is None }})
    r"""Average QPS for pixel match responses from clients."""  
    quota_configured_limit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quotaConfiguredLimit'), 'exclude': lambda f: f is None }})
    r"""The configured quota limits for this account."""  
    quota_throttled_limit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quotaThrottledLimit'), 'exclude': lambda f: f is None }})
    r"""The throttled quota limits for this account."""  
    region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region'), 'exclude': lambda f: f is None }})
    r"""The trading location of this data."""  
    successful_request_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('successfulRequestRate'), 'exclude': lambda f: f is None }})
    r"""The number of properly formed bid responses received by our servers within the deadline."""  
    timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})
    r"""The unix timestamp of the starting time of this performance data."""  
    unsuccessful_request_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unsuccessfulRequestRate'), 'exclude': lambda f: f is None }})
    r"""The number of bid responses that were unsuccessful due to timeouts, incorrect formatting, etc."""  
    