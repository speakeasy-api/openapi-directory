/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum PatternsGetPatternByRunExpandEnum {
  All = "All",
  Stop = "Stop",
  Route = "Route",
  Run = "Run",
  Direction = "Direction",
  Disruption = "Disruption",
  VehicleDescriptor = "VehicleDescriptor",
  VehiclePosition = "VehiclePosition",
  None = "None",
}

/**
 * Number identifying transport mode; values returned via RouteTypes API
 */
export enum PatternsGetPatternByRunRouteTypeEnum {
  Zero = "0",
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
}

export class PatternsGetPatternByRunRequest extends SpeakeasyBase {
  /**
   * Filter by the date and time of the request (ISO 8601 UTC format)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=date_utc;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  dateUtc?: Date;

  /**
   * Your developer id
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=devid" })
  devid?: string;

  /**
   * List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=expand",
  })
  expand: PatternsGetPatternByRunExpandEnum[];

  /**
   * Indicates if geopath data will be returned (default = false)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_geopath",
  })
  includeGeopath?: boolean;

  /**
   * Include any skipped stops in a stopping pattern. Defaults to false.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_skipped_stops",
  })
  includeSkippedStops?: boolean;

  /**
   * Number identifying transport mode; values returned via RouteTypes API
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=route_type",
  })
  routeType: PatternsGetPatternByRunRouteTypeEnum;

  /**
   * The run_ref is the identifier of a run as returned by the departures/* and runs/* endpoints. WARNING, run_id is deprecated. Use run_ref instead.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=run_ref",
  })
  runRef: string;

  /**
   * Authentication signature for request
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=signature",
  })
  signature?: string;

  /**
   * Filter by stop_id; values returned by Stops API
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=stop_id",
  })
  stopId?: number;

  /**
   * Please ignore
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=token" })
  token?: string;
}

export class PatternsGetPatternByRunResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Invalid Request
   */
  @SpeakeasyMetadata()
  v3ErrorResponse?: shared.V3ErrorResponse;

  /**
   * The stopping pattern of the specified run_ref and route type. (NOTE: the departure sequence field should be used to sort departures in chronological order, however it is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4)
   */
  @SpeakeasyMetadata()
  v3StoppingPattern?: shared.V3StoppingPattern;
}
