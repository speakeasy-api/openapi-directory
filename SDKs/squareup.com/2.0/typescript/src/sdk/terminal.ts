/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Terminal {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * CancelTerminalCheckout
   *
   * @remarks
   * Cancels a Terminal checkout request if the status of the request permits it.
   */
  cancelTerminalCheckout(
    req: operations.CancelTerminalCheckoutRequest,
    security: operations.CancelTerminalCheckoutSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CancelTerminalCheckoutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CancelTerminalCheckoutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/terminals/checkouts/{checkout_id}/cancel",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CancelTerminalCheckoutSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CancelTerminalCheckoutResponse =
        new operations.CancelTerminalCheckoutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cancelTerminalCheckoutResponse = utils.objectToClass(
              httpRes?.data,
              shared.CancelTerminalCheckoutResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CancelTerminalRefund
   *
   * @remarks
   * Cancels an Interac Terminal refund request by refund request ID if the status of the request permits it.
   */
  cancelTerminalRefund(
    req: operations.CancelTerminalRefundRequest,
    security: operations.CancelTerminalRefundSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CancelTerminalRefundResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CancelTerminalRefundRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/terminals/refunds/{terminal_refund_id}/cancel",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CancelTerminalRefundSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CancelTerminalRefundResponse =
        new operations.CancelTerminalRefundResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cancelTerminalRefundResponse = utils.objectToClass(
              httpRes?.data,
              shared.CancelTerminalRefundResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CreateTerminalCheckout
   *
   * @remarks
   * Creates a Terminal checkout request and sends it to the specified device to take a payment
   * for the requested amount.
   */
  createTerminalCheckout(
    req: shared.CreateTerminalCheckoutRequest,
    security: operations.CreateTerminalCheckoutSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateTerminalCheckoutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateTerminalCheckoutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/terminals/checkouts";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateTerminalCheckoutSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateTerminalCheckoutResponse =
        new operations.CreateTerminalCheckoutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createTerminalCheckoutResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateTerminalCheckoutResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CreateTerminalRefund
   *
   * @remarks
   * Creates a request to refund an Interac payment completed on a Square Terminal.
   */
  createTerminalRefund(
    req: shared.CreateTerminalRefundRequest,
    security: operations.CreateTerminalRefundSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateTerminalRefundResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateTerminalRefundRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/terminals/refunds";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateTerminalRefundSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateTerminalRefundResponse =
        new operations.CreateTerminalRefundResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createTerminalRefundResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateTerminalRefundResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * GetTerminalCheckout
   *
   * @remarks
   * Retrieves a Terminal checkout request by `checkout_id`.
   */
  getTerminalCheckout(
    req: operations.GetTerminalCheckoutRequest,
    security: operations.GetTerminalCheckoutSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTerminalCheckoutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTerminalCheckoutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/terminals/checkouts/{checkout_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTerminalCheckoutSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTerminalCheckoutResponse =
        new operations.GetTerminalCheckoutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTerminalCheckoutResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetTerminalCheckoutResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * GetTerminalRefund
   *
   * @remarks
   * Retrieves an Interac Terminal refund object by ID.
   */
  getTerminalRefund(
    req: operations.GetTerminalRefundRequest,
    security: operations.GetTerminalRefundSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTerminalRefundResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTerminalRefundRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/terminals/refunds/{terminal_refund_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTerminalRefundSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTerminalRefundResponse =
        new operations.GetTerminalRefundResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTerminalRefundResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetTerminalRefundResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * SearchTerminalCheckouts
   *
   * @remarks
   * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
   */
  searchTerminalCheckouts(
    req: shared.SearchTerminalCheckoutsRequest,
    security: operations.SearchTerminalCheckoutsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SearchTerminalCheckoutsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.SearchTerminalCheckoutsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/terminals/checkouts/search";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SearchTerminalCheckoutsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SearchTerminalCheckoutsResponse =
        new operations.SearchTerminalCheckoutsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchTerminalCheckoutsResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchTerminalCheckoutsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * SearchTerminalRefunds
   *
   * @remarks
   * Retrieves a filtered list of Interac Terminal refund requests created by the seller making the request.
   */
  searchTerminalRefunds(
    req: shared.SearchTerminalRefundsRequest,
    security: operations.SearchTerminalRefundsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SearchTerminalRefundsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.SearchTerminalRefundsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/terminals/refunds/search";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SearchTerminalRefundsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SearchTerminalRefundsResponse =
        new operations.SearchTerminalRefundsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchTerminalRefundsResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchTerminalRefundsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
