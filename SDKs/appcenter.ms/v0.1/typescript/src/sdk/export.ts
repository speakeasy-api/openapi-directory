/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Export {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create new export configuration
   */
  exportConfigurationsCreate(
    req: operations.ExportConfigurationsCreateRequest,
    security: operations.ExportConfigurationsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ExportConfigurationsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExportConfigurationsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/export_configurations",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ExportConfigurationsCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExportConfigurationsCreateResponse =
        new operations.ExportConfigurationsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exportConfigurationsCreate202ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExportConfigurationsCreate202ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exportConfigurationsCreateDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExportConfigurationsCreateDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete export configuration.
   */
  exportConfigurationsDelete(
    req: operations.ExportConfigurationsDeleteRequest,
    security: operations.ExportConfigurationsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ExportConfigurationsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExportConfigurationsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ExportConfigurationsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExportConfigurationsDeleteResponse =
        new operations.ExportConfigurationsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exportConfigurationsDeleteDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExportConfigurationsDeleteDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Disable export configuration.
   */
  exportConfigurationsDisable(
    req: operations.ExportConfigurationsDisableRequest,
    security: operations.ExportConfigurationsDisableSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ExportConfigurationsDisableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExportConfigurationsDisableRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/disable",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ExportConfigurationsDisableSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExportConfigurationsDisableResponse =
        new operations.ExportConfigurationsDisableResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exportConfigurationsDisableDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExportConfigurationsDisableDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Enable export configuration.
   */
  exportConfigurationsEnable(
    req: operations.ExportConfigurationsEnableRequest,
    security: operations.ExportConfigurationsEnableSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ExportConfigurationsEnableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExportConfigurationsEnableRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/enable",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ExportConfigurationsEnableSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExportConfigurationsEnableResponse =
        new operations.ExportConfigurationsEnableResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exportConfigurationsEnableDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExportConfigurationsEnableDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get export configuration.
   */
  exportConfigurationsGet(
    req: operations.ExportConfigurationsGetRequest,
    security: operations.ExportConfigurationsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ExportConfigurationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExportConfigurationsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ExportConfigurationsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExportConfigurationsGetResponse =
        new operations.ExportConfigurationsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exportConfigurationsGet200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExportConfigurationsGet200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exportConfigurationsGetDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExportConfigurationsGetDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List export configurations.
   */
  exportConfigurationsList(
    req: operations.ExportConfigurationsListRequest,
    security: operations.ExportConfigurationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ExportConfigurationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExportConfigurationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/export_configurations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ExportConfigurationsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExportConfigurationsListResponse =
        new operations.ExportConfigurationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exportConfigurationsList200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExportConfigurationsList200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exportConfigurationsListDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExportConfigurationsListDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Partially update export configuration.
   */
  exportConfigurationsPartialUpdate(
    req: operations.ExportConfigurationsPartialUpdateRequest,
    security: operations.ExportConfigurationsPartialUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ExportConfigurationsPartialUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExportConfigurationsPartialUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ExportConfigurationsPartialUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExportConfigurationsPartialUpdateResponse =
        new operations.ExportConfigurationsPartialUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exportConfigurationsPartialUpdate200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExportConfigurationsPartialUpdate200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exportConfigurationsPartialUpdateDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExportConfigurationsPartialUpdateDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
