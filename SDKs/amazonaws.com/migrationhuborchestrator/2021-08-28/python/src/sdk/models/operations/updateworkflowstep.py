"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import platformcommand as shared_platformcommand
from ..shared import platformscriptkey as shared_platformscriptkey
from ..shared import runenvironment_enum as shared_runenvironment_enum
from ..shared import targettype_enum as shared_targettype_enum
from ..shared import updateworkflowstepresponse as shared_updateworkflowstepresponse
from ..shared import workflowstepoutput as shared_workflowstepoutput
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateWorkflowStepRequestBodyStatusEnum(str, Enum):
    r"""The status of the step."""
    AWAITING_DEPENDENCIES = 'AWAITING_DEPENDENCIES'
    READY = 'READY'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    PAUSED = 'PAUSED'
    USER_ATTENTION_REQUIRED = 'USER_ATTENTION_REQUIRED'

class UpdateWorkflowStepRequestBodyStepActionTypeEnum(str, Enum):
    r"""The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step."""
    MANUAL = 'MANUAL'
    AUTOMATED = 'AUTOMATED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateWorkflowStepRequestBodyWorkflowStepAutomationConfiguration:
    r"""The custom script to run tests on source or target environments."""
    
    command: Optional[shared_platformcommand.PlatformCommand] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('command'), 'exclude': lambda f: f is None }})  
    run_environment: Optional[shared_runenvironment_enum.RunEnvironmentEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runEnvironment'), 'exclude': lambda f: f is None }})  
    script_location_s3_bucket: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scriptLocationS3Bucket'), 'exclude': lambda f: f is None }})  
    script_location_s3_key: Optional[shared_platformscriptkey.PlatformScriptKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scriptLocationS3Key'), 'exclude': lambda f: f is None }})  
    target_type: Optional[shared_targettype_enum.TargetTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetType'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateWorkflowStepRequestBody:
    
    step_group_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stepGroupId') }})
    r"""The ID of the step group."""  
    workflow_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflowId') }})
    r"""The ID of the migration workflow."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the step."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the step."""  
    next: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next'), 'exclude': lambda f: f is None }})
    r"""The next step."""  
    outputs: Optional[list[shared_workflowstepoutput.WorkflowStepOutput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputs'), 'exclude': lambda f: f is None }})
    r"""The outputs of a step."""  
    previous: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous'), 'exclude': lambda f: f is None }})
    r"""The previous step."""  
    status: Optional[UpdateWorkflowStepRequestBodyStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the step."""  
    step_action_type: Optional[UpdateWorkflowStepRequestBodyStepActionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stepActionType'), 'exclude': lambda f: f is None }})
    r"""The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step."""  
    step_target: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stepTarget'), 'exclude': lambda f: f is None }})
    r"""The servers on which a step will be run."""  
    workflow_step_automation_configuration: Optional[UpdateWorkflowStepRequestBodyWorkflowStepAutomationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflowStepAutomationConfiguration'), 'exclude': lambda f: f is None }})
    r"""The custom script to run tests on source or target environments."""  
    

@dataclasses.dataclass
class UpdateWorkflowStepRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""The ID of the step."""  
    request_body: UpdateWorkflowStepRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateWorkflowStepResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_workflow_step_response: Optional[shared_updateworkflowstepresponse.UpdateWorkflowStepResponse] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    