<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Webhooks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a webhook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugWebhooksIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugWebhooksIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugWebhooksIdResponse
     */
	public function deleteWorkspaceSlugWebhooksId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugWebhooksIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugWebhooksIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugWebhooksIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/webhooks/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugWebhooksIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugWebhooksIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * List webhooks in a workspace
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugWebhooksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugWebhooksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugWebhooksResponse
     */
	public function getWorkspaceSlugWebhooks(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugWebhooksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugWebhooksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugWebhooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/webhooks', \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugWebhooksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugWebhooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get a webhook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugWebhooksIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugWebhooksIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugWebhooksIdResponse
     */
	public function getWorkspaceSlugWebhooksId(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugWebhooksIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugWebhooksIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugWebhooksIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/webhooks/{id}', \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugWebhooksIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugWebhooksIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Create a webhook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugWebhooksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugWebhooksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugWebhooksResponse
     */
	public function postWorkspaceSlugWebhooks(
        \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugWebhooksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugWebhooksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugWebhooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/webhooks', \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugWebhooksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "webhookSubscription", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugWebhooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Update a webhook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugWebhooksIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugWebhooksIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugWebhooksIdResponse
     */
	public function putWorkspaceSlugWebhooksId(
        \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugWebhooksIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugWebhooksIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugWebhooksIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/webhooks/{id}', \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugWebhooksIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "webhookSubscription", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugWebhooksIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
}