"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkCameraWirelessProfileRequestBodyIdentity:
    r"""The identity of the wireless profile. Required for creating wireless profiles in 8021x-radius auth mode."""
    
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""The password of the identity."""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username'), 'exclude': lambda f: f is None }})
    r"""The username of the identity."""  
    
class UpdateNetworkCameraWirelessProfileRequestBodySsidAuthModeEnum(str, Enum):
    r"""The auth mode of the SSID. It can be set to ('psk', '8021x-radius')."""
    EIGHT_THOUSAND_AND_TWENTY_ONEX_RADIUS = '8021x-radius'
    PSK = 'psk'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkCameraWirelessProfileRequestBodySsid:
    r"""The details of the SSID config."""
    
    auth_mode: Optional[UpdateNetworkCameraWirelessProfileRequestBodySsidAuthModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authMode'), 'exclude': lambda f: f is None }})
    r"""The auth mode of the SSID. It can be set to ('psk', '8021x-radius')."""  
    encryption_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionMode'), 'exclude': lambda f: f is None }})
    r"""The encryption mode of the SSID. It can be set to ('wpa', 'wpa-eap'). With 'wpa' mode, the authMode should be 'psk' and with 'wpa-eap' the authMode should be '8021x-radius'"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the SSID."""  
    psk: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('psk'), 'exclude': lambda f: f is None }})
    r"""The pre-shared key of the SSID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkCameraWirelessProfileRequestBody:
    
    identity: Optional[UpdateNetworkCameraWirelessProfileRequestBodyIdentity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identity'), 'exclude': lambda f: f is None }})
    r"""The identity of the wireless profile. Required for creating wireless profiles in 8021x-radius auth mode."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the camera wireless profile."""  
    ssid: Optional[UpdateNetworkCameraWirelessProfileRequestBodySsid] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssid'), 'exclude': lambda f: f is None }})
    r"""The details of the SSID config."""  
    

@dataclasses.dataclass
class UpdateNetworkCameraWirelessProfileRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    wireless_profile_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'wirelessProfileId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkCameraWirelessProfileRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkCameraWirelessProfileResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_camera_wireless_profile_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    