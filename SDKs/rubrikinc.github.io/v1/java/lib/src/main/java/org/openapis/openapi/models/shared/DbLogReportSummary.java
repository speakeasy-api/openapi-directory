/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class DbLogReportSummary {
    /**
     * Type of database.
     */
    @JsonProperty("databaseType")
    public DatabaseTypeEnum databaseType;

    public DbLogReportSummary withDatabaseType(DatabaseTypeEnum databaseType) {
        this.databaseType = databaseType;
        return this;
    }
    
    /**
     * ID of the SLA Domain controlling the database protection.
     */
    @JsonProperty("effectiveSlaDomainId")
    public String effectiveSlaDomainId;

    public DbLogReportSummary withEffectiveSlaDomainId(String effectiveSlaDomainId) {
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        return this;
    }
    
    /**
     * Name of the SLA Domain controlling the database protection.
     */
    @JsonProperty("effectiveSlaDomainName")
    public String effectiveSlaDomainName;

    public DbLogReportSummary withEffectiveSlaDomainName(String effectiveSlaDomainName) {
        this.effectiveSlaDomainName = effectiveSlaDomainName;
        return this;
    }
    
    @JsonProperty("id")
    public String id;

    public DbLogReportSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Time, in UTC, of the last database backup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastSnapshotTime")
    public OffsetDateTime lastSnapshotTime;

    public DbLogReportSummary withLastSnapshotTime(OffsetDateTime lastSnapshotTime) {
        this.lastSnapshotTime = lastSnapshotTime;
        return this;
    }
    
    /**
     * Latest point in time, in UTC, to which the database can be restored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("latestRecoveryTime")
    public OffsetDateTime latestRecoveryTime;

    public DbLogReportSummary withLatestRecoveryTime(OffsetDateTime latestRecoveryTime) {
        this.latestRecoveryTime = latestRecoveryTime;
        return this;
    }
    
    /**
     * Location of the customer database. For a standalone SQL database, this includes the host and instance name.
     */
    @JsonProperty("location")
    public String location;

    public DbLogReportSummary withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Amount of time, in seconds, that has elapsed since the next expected log backup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logBackupDelay")
    public Long logBackupDelay;

    public DbLogReportSummary withLogBackupDelay(Long logBackupDelay) {
        this.logBackupDelay = logBackupDelay;
        return this;
    }
    
    /**
     * Frequency, in seconds, of the database log backup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logBackupFrequency")
    public Integer logBackupFrequency;

    public DbLogReportSummary withLogBackupFrequency(Integer logBackupFrequency) {
        this.logBackupFrequency = logBackupFrequency;
        return this;
    }
    
    /**
     * Name of the database.
     */
    @JsonProperty("name")
    public String name;

    public DbLogReportSummary withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * ID of the primary Rubrik cluster on which the database is located.
     */
    @JsonProperty("primaryClusterId")
    public String primaryClusterId;

    public DbLogReportSummary withPrimaryClusterId(String primaryClusterId) {
        this.primaryClusterId = primaryClusterId;
        return this;
    }
    
    public DbLogReportSummary(@JsonProperty("databaseType") DatabaseTypeEnum databaseType, @JsonProperty("effectiveSlaDomainId") String effectiveSlaDomainId, @JsonProperty("effectiveSlaDomainName") String effectiveSlaDomainName, @JsonProperty("id") String id, @JsonProperty("location") String location, @JsonProperty("name") String name, @JsonProperty("primaryClusterId") String primaryClusterId) {
        this.databaseType = databaseType;
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        this.effectiveSlaDomainName = effectiveSlaDomainName;
        this.id = id;
        this.location = location;
        this.name = name;
        this.primaryClusterId = primaryClusterId;
  }
}
