"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dealtermsguaranteedfixedpriceterms as shared_dealtermsguaranteedfixedpriceterms
from ..shared import dealtermsnonguaranteedauctionterms as shared_dealtermsnonguaranteedauctionterms
from ..shared import dealtermsnonguaranteedfixedpriceterms as shared_dealtermsnonguaranteedfixedpriceterms
from ..shared import dealtermsrubiconnonguaranteedterms as shared_dealtermsrubiconnonguaranteedterms
from ..shared import price as shared_price
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DealTerms:
    
    branding_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brandingType'), 'exclude': lambda f: f is None }})
    r"""Visibility of the URL in bid requests."""  
    cross_listed_external_deal_id_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crossListedExternalDealIdType'), 'exclude': lambda f: f is None }})
    r"""Indicates that this ExternalDealId exists under at least two different AdxInventoryDeals. Currently, the only case that the same ExternalDealId will exist is programmatic cross sell case."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description for the proposed terms of the deal."""  
    estimated_gross_spend: Optional[shared_price.Price] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimatedGrossSpend'), 'exclude': lambda f: f is None }})  
    estimated_impressions_per_day: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimatedImpressionsPerDay'), 'exclude': lambda f: f is None }})
    r"""Non-binding estimate of the impressions served per day Can be set by buyer or seller."""  
    guaranteed_fixed_price_terms: Optional[shared_dealtermsguaranteedfixedpriceterms.DealTermsGuaranteedFixedPriceTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guaranteedFixedPriceTerms'), 'exclude': lambda f: f is None }})  
    non_guaranteed_auction_terms: Optional[shared_dealtermsnonguaranteedauctionterms.DealTermsNonGuaranteedAuctionTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonGuaranteedAuctionTerms'), 'exclude': lambda f: f is None }})  
    non_guaranteed_fixed_price_terms: Optional[shared_dealtermsnonguaranteedfixedpriceterms.DealTermsNonGuaranteedFixedPriceTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonGuaranteedFixedPriceTerms'), 'exclude': lambda f: f is None }})  
    rubicon_non_guaranteed_terms: Optional[shared_dealtermsrubiconnonguaranteedterms.DealTermsRubiconNonGuaranteedTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rubiconNonGuaranteedTerms'), 'exclude': lambda f: f is None }})  
    seller_time_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerTimeZone'), 'exclude': lambda f: f is None }})
    r"""For deals with Cost Per Day billing, defines the timezone used to mark the boundaries of a day (buyer-readonly)"""  
    