// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConferenceListMembersResponseMessageEnum - Response message
type ConferenceListMembersResponseMessageEnum string

const (
	ConferenceListMembersResponseMessageEnumConferenceListMembersExecuted                 ConferenceListMembersResponseMessageEnum = "Conference ListMembers Executed"
	ConferenceListMembersResponseMessageEnumConferenceNameParameterMustBePresent          ConferenceListMembersResponseMessageEnum = "ConferenceName Parameter must be present"
	ConferenceListMembersResponseMessageEnumConferenceListMembersFailedToParseResult      ConferenceListMembersResponseMessageEnum = "Conference ListMembers Failed to parse result"
	ConferenceListMembersResponseMessageEnumConferenceListMembersFailedConferenceNotFound ConferenceListMembersResponseMessageEnum = "Conference ListMembers Failed -- Conference not found"
)

func (e ConferenceListMembersResponseMessageEnum) ToPointer() *ConferenceListMembersResponseMessageEnum {
	return &e
}

func (e *ConferenceListMembersResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Conference ListMembers Executed":
		fallthrough
	case "ConferenceName Parameter must be present":
		fallthrough
	case "Conference ListMembers Failed to parse result":
		fallthrough
	case "Conference ListMembers Failed -- Conference not found":
		*e = ConferenceListMembersResponseMessageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConferenceListMembersResponseMessageEnum: %v", v)
	}
}

// ConferenceListMembersResponse - Response
type ConferenceListMembersResponse struct {
	// List of established conferences
	List map[string]interface{} `json:"List"`
	// Response message
	Message ConferenceListMembersResponseMessageEnum `json:"Message"`
	// Whether the request was successful or not
	Success bool `json:"Success"`
}
