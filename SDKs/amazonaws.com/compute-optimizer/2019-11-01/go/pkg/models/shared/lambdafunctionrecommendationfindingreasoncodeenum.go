// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LambdaFunctionRecommendationFindingReasonCodeEnum string

const (
	LambdaFunctionRecommendationFindingReasonCodeEnumMemoryOverprovisioned  LambdaFunctionRecommendationFindingReasonCodeEnum = "MemoryOverprovisioned"
	LambdaFunctionRecommendationFindingReasonCodeEnumMemoryUnderprovisioned LambdaFunctionRecommendationFindingReasonCodeEnum = "MemoryUnderprovisioned"
	LambdaFunctionRecommendationFindingReasonCodeEnumInsufficientData       LambdaFunctionRecommendationFindingReasonCodeEnum = "InsufficientData"
	LambdaFunctionRecommendationFindingReasonCodeEnumInconclusive           LambdaFunctionRecommendationFindingReasonCodeEnum = "Inconclusive"
)

func (e LambdaFunctionRecommendationFindingReasonCodeEnum) ToPointer() *LambdaFunctionRecommendationFindingReasonCodeEnum {
	return &e
}

func (e *LambdaFunctionRecommendationFindingReasonCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MemoryOverprovisioned":
		fallthrough
	case "MemoryUnderprovisioned":
		fallthrough
	case "InsufficientData":
		fallthrough
	case "Inconclusive":
		*e = LambdaFunctionRecommendationFindingReasonCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LambdaFunctionRecommendationFindingReasonCodeEnum: %v", v)
	}
}
