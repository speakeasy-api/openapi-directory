// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ConvertAPIRequestBody struct {
	URL *string `multipartForm:"name=url"`
}

// ConvertAPIFormatEnum
type ConvertAPIFormatEnum string

const (
	ConvertAPIFormatEnumSwagger10    ConvertAPIFormatEnum = "swagger10"
	ConvertAPIFormatEnumSwagger20    ConvertAPIFormatEnum = "swagger20"
	ConvertAPIFormatEnumSwaggeryaml  ConvertAPIFormatEnum = "swaggeryaml"
	ConvertAPIFormatEnumApiblueprint ConvertAPIFormatEnum = "apiblueprint"
	ConvertAPIFormatEnumWadl2009     ConvertAPIFormatEnum = "wadl2009"
	ConvertAPIFormatEnumRaml         ConvertAPIFormatEnum = "raml"
	ConvertAPIFormatEnumApimatic     ConvertAPIFormatEnum = "apimatic"
)

func (e ConvertAPIFormatEnum) ToPointer() *ConvertAPIFormatEnum {
	return &e
}

func (e *ConvertAPIFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "swagger10":
		fallthrough
	case "swagger20":
		fallthrough
	case "swaggeryaml":
		fallthrough
	case "apiblueprint":
		fallthrough
	case "wadl2009":
		fallthrough
	case "raml":
		fallthrough
	case "apimatic":
		*e = ConvertAPIFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConvertAPIFormatEnum: %v", v)
	}
}

type ConvertAPIRequest struct {
	RequestBody *ConvertAPIRequestBody `request:"mediaType=multipart/form-data"`
	Format      ConvertAPIFormatEnum   `queryParam:"style=form,explode=true,name=format"`
}

type ConvertAPIResponse struct {
	Body        []byte
	ContentType string
	// The converted API specification
	ConvertAPI200ApplicationJSONObject map[string]interface{}
	StatusCode                         int
	RawResponse                        *http.Response
}
