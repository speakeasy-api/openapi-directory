"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import providerinvoicedatesdto as shared_providerinvoicedatesdto
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProviderInvoiceDTOPaymentStatusEnum(str, Enum):
    NOT_PAID = 'NOT_PAID'
    FULLY_PAID = 'FULLY_PAID'
    IRRECOVERABLE = 'IRRECOVERABLE'
    PARTIALLY_PAID = 'PARTIALLY_PAID'

class ProviderInvoiceDTOStatusEnum(str, Enum):
    POSTPONED = 'POSTPONED'
    TO_BE_SENT = 'TO_BE_SENT'
    SENT = 'SENT'
    CONFIRMED = 'CONFIRMED'
    BILL_CREATED = 'BILL_CREATED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProviderInvoiceDTO:
    r"""Success"""
    
    currency_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyId'), 'exclude': lambda f: f is None }})  
    dates: Optional[shared_providerinvoicedatesdto.ProviderInvoiceDatesDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dates'), 'exclude': lambda f: f is None }})  
    draft_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('draftNumber'), 'exclude': lambda f: f is None }})  
    final_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finalNumber'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    internal_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('internalNumber'), 'exclude': lambda f: f is None }})  
    jobs_net_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobsNetValue'), 'exclude': lambda f: f is None }})  
    notes_from_provider: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notesFromProvider'), 'exclude': lambda f: f is None }})  
    payment_status: Optional[ProviderInvoiceDTOPaymentStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentStatus'), 'exclude': lambda f: f is None }})  
    provider_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('providerId'), 'exclude': lambda f: f is None }})  
    status: Optional[ProviderInvoiceDTOStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    total_gross: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalGross'), 'exclude': lambda f: f is None }})  
    total_gross_in_words: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalGrossInWords'), 'exclude': lambda f: f is None }})  
    total_netto: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalNetto'), 'exclude': lambda f: f is None }})  
    