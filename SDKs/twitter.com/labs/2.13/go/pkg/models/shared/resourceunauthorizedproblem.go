// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ResourceUnauthorizedProblemResourceTypeEnum string

const (
	ResourceUnauthorizedProblemResourceTypeEnumTweet ResourceUnauthorizedProblemResourceTypeEnum = "tweet"
	ResourceUnauthorizedProblemResourceTypeEnumUser  ResourceUnauthorizedProblemResourceTypeEnum = "user"
	ResourceUnauthorizedProblemResourceTypeEnumMedia ResourceUnauthorizedProblemResourceTypeEnum = "media"
)

func (e *ResourceUnauthorizedProblemResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tweet":
		fallthrough
	case "user":
		fallthrough
	case "media":
		*e = ResourceUnauthorizedProblemResourceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ResourceUnauthorizedProblemResourceTypeEnum: %s", s)
	}
}

type ResourceUnauthorizedProblemSectionEnum string

const (
	ResourceUnauthorizedProblemSectionEnumData     ResourceUnauthorizedProblemSectionEnum = "data"
	ResourceUnauthorizedProblemSectionEnumIncludes ResourceUnauthorizedProblemSectionEnum = "includes"
)

func (e *ResourceUnauthorizedProblemSectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "data":
		fallthrough
	case "includes":
		*e = ResourceUnauthorizedProblemSectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ResourceUnauthorizedProblemSectionEnum: %s", s)
	}
}

// ResourceUnauthorizedProblem - A problem that indicates you are not allowed to see a particular Tweet, User, etc.
type ResourceUnauthorizedProblem struct {
	Detail       string                                      `json:"detail"`
	ResourceID   string                                      `json:"resource_id"`
	ResourceType ResourceUnauthorizedProblemResourceTypeEnum `json:"resource_type"`
	Section      ResourceUnauthorizedProblemSectionEnum      `json:"section"`
	Title        string                                      `json:"title"`
	Type         string                                      `json:"type"`
}
