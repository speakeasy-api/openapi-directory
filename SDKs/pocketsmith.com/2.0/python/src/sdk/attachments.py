"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Attachments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_attachments_id_(self, request: operations.DeleteAttachmentsIDRequest) -> operations.DeleteAttachmentsIDResponse:
        r"""Delete attachment
        Deletes a particular attachment by its ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAttachmentsIDRequest, base_url, '/attachments/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAttachmentsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def delete_transactions_transaction_id_attachments_attachment_id_(self, request: operations.DeleteTransactionsTransactionIDAttachmentsAttachmentIDRequest) -> operations.DeleteTransactionsTransactionIDAttachmentsAttachmentIDResponse:
        r"""Unassigns attachment in transaction
        Unassigns a particular attachment by its ID from the transaction ID. This does not delete the attachment, it only removes its association from the transaction.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteTransactionsTransactionIDAttachmentsAttachmentIDRequest, base_url, '/transactions/{transaction_id}/attachments/{attachment_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTransactionsTransactionIDAttachmentsAttachmentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_attachments_id_(self, request: operations.GetAttachmentsIDRequest) -> operations.GetAttachmentsIDResponse:
        r"""Get attachment
        Gets a particular attachment by its ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAttachmentsIDRequest, base_url, '/attachments/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAttachmentsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Attachment])
                res.attachment = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_transactions_id_attachments(self, request: operations.GetTransactionsIDAttachmentsRequest) -> operations.GetTransactionsIDAttachmentsResponse:
        r"""List attachments in transaction
        Lists attachments belonging to a transaction by their ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTransactionsIDAttachmentsRequest, base_url, '/transactions/{id}/attachments', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionsIDAttachmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Attachment]])
                res.attachments = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_users_id_attachments(self, request: operations.GetUsersIDAttachmentsRequest) -> operations.GetUsersIDAttachmentsResponse:
        r"""Lists attachments in user
        Lists attachments belonging to a user by their ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersIDAttachmentsRequest, base_url, '/users/{id}/attachments', request)
        
        query_params = utils.get_query_params(operations.GetUsersIDAttachmentsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersIDAttachmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Attachment]])
                res.attachments = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_transactions_id_attachments(self, request: operations.PostTransactionsIDAttachmentsRequest) -> operations.PostTransactionsIDAttachmentsResponse:
        r"""Assigns attachment to transaction
        Assigns an attachment to the transaction by their ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostTransactionsIDAttachmentsRequest, base_url, '/transactions/{id}/attachments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTransactionsIDAttachmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Attachment])
                res.attachment = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_users_id_attachments(self, request: operations.PostUsersIDAttachmentsRequest) -> operations.PostUsersIDAttachmentsResponse:
        r"""Create attachment in user
        Creates an attachment belonging to the user by their ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostUsersIDAttachmentsRequest, base_url, '/users/{id}/attachments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostUsersIDAttachmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Attachment])
                res.attachment = out
        elif http_res.status_code in [403, 404, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def put_attachments_id_(self, request: operations.PutAttachmentsIDRequest) -> operations.PutAttachmentsIDResponse:
        r"""Update attachment
        Updates the title of the attachment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutAttachmentsIDRequest, base_url, '/attachments/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutAttachmentsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Attachment])
                res.attachment = out
        elif http_res.status_code in [403, 404, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    