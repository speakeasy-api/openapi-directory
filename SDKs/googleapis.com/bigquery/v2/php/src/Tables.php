<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Tables 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the table specified by tableId from the dataset. If the table contains data, all the data will be deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesDeleteResponse
     */
	public function bigqueryTablesDelete(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/datasets/{datasetId}/tables/{tableId}', \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryTablesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets the specified table resource by table ID. This method does not return the data in the table, it only returns the table resource, which describes the structure of this table.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetResponse
     */
	public function bigqueryTablesGet(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/datasets/{datasetId}/tables/{tableId}', \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->table = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Table', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetIamPolicyResponse
     */
	public function bigqueryTablesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new, empty table in the dataset.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesInsertResponse
     */
	public function bigqueryTablesInsert(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/datasets/{datasetId}/tables', \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "table", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryTablesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->table = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Table', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all tables in the specified dataset. Requires the READER dataset role.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesListResponse
     */
	public function bigqueryTablesList(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/datasets/{datasetId}/tables', \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryTablesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tableList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TableList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates information in an existing table. The update method replaces the entire table resource, whereas the patch method only replaces fields that are provided in the submitted table resource. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesPatchResponse
     */
	public function bigqueryTablesPatch(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/datasets/{datasetId}/tables/{tableId}', \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "table", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryTablesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->table = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Table', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesSetIamPolicyResponse
     */
	public function bigqueryTablesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryTablesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesTestIamPermissionsResponse
     */
	public function bigqueryTablesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryTablesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates information in an existing table. The update method replaces the entire table resource, whereas the patch method only replaces fields that are provided in the submitted table resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesUpdateResponse
     */
	public function bigqueryTablesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/datasets/{datasetId}/tables/{tableId}', \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "table", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryTablesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryTablesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->table = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Table', 'json');
            }
        }

        return $response;
    }
}