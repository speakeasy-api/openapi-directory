// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProductViewAggregatedDestinationStatusEnum - Aggregated destination status.
type ProductViewAggregatedDestinationStatusEnum string

const (
	ProductViewAggregatedDestinationStatusEnumAggregatedStatusUnspecified ProductViewAggregatedDestinationStatusEnum = "AGGREGATED_STATUS_UNSPECIFIED"
	ProductViewAggregatedDestinationStatusEnumNotEligibleOrDisapproved    ProductViewAggregatedDestinationStatusEnum = "NOT_ELIGIBLE_OR_DISAPPROVED"
	ProductViewAggregatedDestinationStatusEnumPending                     ProductViewAggregatedDestinationStatusEnum = "PENDING"
	ProductViewAggregatedDestinationStatusEnumEligibleLimited             ProductViewAggregatedDestinationStatusEnum = "ELIGIBLE_LIMITED"
	ProductViewAggregatedDestinationStatusEnumEligible                    ProductViewAggregatedDestinationStatusEnum = "ELIGIBLE"
)

func (e *ProductViewAggregatedDestinationStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AGGREGATED_STATUS_UNSPECIFIED":
		fallthrough
	case "NOT_ELIGIBLE_OR_DISAPPROVED":
		fallthrough
	case "PENDING":
		fallthrough
	case "ELIGIBLE_LIMITED":
		fallthrough
	case "ELIGIBLE":
		*e = ProductViewAggregatedDestinationStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductViewAggregatedDestinationStatusEnum: %s", s)
	}
}

// ProductViewChannelEnum - Channel of the product (online versus local).
type ProductViewChannelEnum string

const (
	ProductViewChannelEnumChannelUnspecified ProductViewChannelEnum = "CHANNEL_UNSPECIFIED"
	ProductViewChannelEnumLocal              ProductViewChannelEnum = "LOCAL"
	ProductViewChannelEnumOnline             ProductViewChannelEnum = "ONLINE"
)

func (e *ProductViewChannelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CHANNEL_UNSPECIFIED":
		fallthrough
	case "LOCAL":
		fallthrough
	case "ONLINE":
		*e = ProductViewChannelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductViewChannelEnum: %s", s)
	}
}

// ProductView - Product fields. Values are only set for fields requested explicitly in the request's search query.
type ProductView struct {
	// Aggregated destination status.
	AggregatedDestinationStatus *ProductViewAggregatedDestinationStatusEnum `json:"aggregatedDestinationStatus,omitempty"`
	// Availability of the product.
	Availability *string `json:"availability,omitempty"`
	// Brand of the product.
	Brand *string `json:"brand,omitempty"`
	// First level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).
	CategoryL1 *string `json:"categoryL1,omitempty"`
	// Second level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).
	CategoryL2 *string `json:"categoryL2,omitempty"`
	// Third level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).
	CategoryL3 *string `json:"categoryL3,omitempty"`
	// Fourth level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).
	CategoryL4 *string `json:"categoryL4,omitempty"`
	// Fifth level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).
	CategoryL5 *string `json:"categoryL5,omitempty"`
	// Channel of the product (online versus local).
	Channel *ProductViewChannelEnum `json:"channel,omitempty"`
	// Condition of the product.
	Condition *string `json:"condition,omitempty"`
	// The time the merchant created the product in timestamp seconds.
	CreationTime *string `json:"creationTime,omitempty"`
	// Product price currency code (for example, ISO 4217). Absent if product price is not available.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	ExpirationDate *Date `json:"expirationDate,omitempty"`
	// GTIN of the product.
	Gtin []string `json:"gtin,omitempty"`
	// The REST ID of the product, in the form of channel:contentLanguage:targetCountry:offerId. Content API methods that operate on products take this as their productId parameter. Should always be included in the SELECT clause.
	ID *string `json:"id,omitempty"`
	// Item group ID provided by the merchant for grouping variants together.
	ItemGroupID *string `json:"itemGroupId,omitempty"`
	// List of item issues for the product.
	ItemIssues []ProductViewItemIssue `json:"itemIssues,omitempty"`
	// Language code of the product in BCP 47 format.
	LanguageCode *string `json:"languageCode,omitempty"`
	// Merchant-provided id of the product.
	OfferID *string `json:"offerId,omitempty"`
	// Product price specified as micros (1 millionth of a standard unit, 1 USD = 1000000 micros) in the product currency. Absent in case the information about the price of the product is not available.
	PriceMicros *string `json:"priceMicros,omitempty"`
	// First level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).
	ProductTypeL1 *string `json:"productTypeL1,omitempty"`
	// Second level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).
	ProductTypeL2 *string `json:"productTypeL2,omitempty"`
	// Third level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).
	ProductTypeL3 *string `json:"productTypeL3,omitempty"`
	// Fourth level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).
	ProductTypeL4 *string `json:"productTypeL4,omitempty"`
	// Fifth level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).
	ProductTypeL5 *string `json:"productTypeL5,omitempty"`
	// The normalized shipping label specified in the feed
	ShippingLabel *string `json:"shippingLabel,omitempty"`
	// Title of the product.
	Title *string `json:"title,omitempty"`
}
