/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class UsersAddonsReadRequest extends SpeakeasyBase {
  /**
   * The unique identifier of the addon provider.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=provider",
  })
  provider: string;

  /**
   * The unique identifier of the user.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=user_id",
  })
  userId: string;
}

/**
 * The properties of the user addon entity.
 */
export class UsersAddonsReadUserAddonAttributes extends SpeakeasyBase {
  /**
   * Whether or not the user has access to this user addon.
   */
  @SpeakeasyMetadata()
  userHasAuth: boolean;
}

/**
 * URLs to alternative representations of the user addon entity.
 */
export class UsersAddonsReadUserAddonLinks extends SpeakeasyBase {
  /**
   * A dictionary with addon_account id as key, an array of connected nodes and link to user account as value
   */
  @SpeakeasyMetadata()
  accounts?: Record<string, any>;

  /**
   * The canonical API endpoint to this user addon.
   */
  @SpeakeasyMetadata()
  self?: string;
}

/**
 * OK
 */
export class UsersAddonsReadUserAddon extends SpeakeasyBase {
  /**
   * The properties of the user addon entity.
   */
  @SpeakeasyMetadata()
  attributes: UsersAddonsReadUserAddonAttributes;

  /**
   * The unique identifier of the user addon entity.
   */
  @SpeakeasyMetadata()
  id: string;

  /**
   * URLs to alternative representations of the user addon entity.
   */
  @SpeakeasyMetadata()
  links: UsersAddonsReadUserAddonLinks;

  /**
   * The type identifier of the user addon entity (`user_addons`).
   */
  @SpeakeasyMetadata()
  type: string;
}

export class UsersAddonsReadResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
