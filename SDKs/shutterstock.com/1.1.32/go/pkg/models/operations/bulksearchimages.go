// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type BulkSearchImagesSecurity struct {
	Basic              *shared.SchemeBasic              `security:"scheme,type=http,subtype=basic"`
	CustomerAccessCode *shared.SchemeCustomerAccessCode `security:"scheme,type=oauth2"`
}

type BulkSearchImagesImageTypeEnum string

const (
	BulkSearchImagesImageTypeEnumPhoto        BulkSearchImagesImageTypeEnum = "photo"
	BulkSearchImagesImageTypeEnumIllustration BulkSearchImagesImageTypeEnum = "illustration"
	BulkSearchImagesImageTypeEnumVector       BulkSearchImagesImageTypeEnum = "vector"
)

func (e *BulkSearchImagesImageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "photo":
		fallthrough
	case "illustration":
		fallthrough
	case "vector":
		*e = BulkSearchImagesImageTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BulkSearchImagesImageTypeEnum: %s", s)
	}
}

type BulkSearchImagesLicenseEnum string

const (
	BulkSearchImagesLicenseEnumCommercial BulkSearchImagesLicenseEnum = "commercial"
	BulkSearchImagesLicenseEnumEditorial  BulkSearchImagesLicenseEnum = "editorial"
	BulkSearchImagesLicenseEnumEnhanced   BulkSearchImagesLicenseEnum = "enhanced"
)

func (e *BulkSearchImagesLicenseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "commercial":
		fallthrough
	case "editorial":
		fallthrough
	case "enhanced":
		*e = BulkSearchImagesLicenseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BulkSearchImagesLicenseEnum: %s", s)
	}
}

// BulkSearchImagesOrientationEnum - Show image results with horizontal or vertical orientation
type BulkSearchImagesOrientationEnum string

const (
	BulkSearchImagesOrientationEnumHorizontal BulkSearchImagesOrientationEnum = "horizontal"
	BulkSearchImagesOrientationEnumVertical   BulkSearchImagesOrientationEnum = "vertical"
)

func (e *BulkSearchImagesOrientationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "horizontal":
		fallthrough
	case "vertical":
		*e = BulkSearchImagesOrientationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BulkSearchImagesOrientationEnum: %s", s)
	}
}

// BulkSearchImagesPeopleAgeEnum - Show images that feature people of the specified age category
type BulkSearchImagesPeopleAgeEnum string

const (
	BulkSearchImagesPeopleAgeEnumInfants   BulkSearchImagesPeopleAgeEnum = "infants"
	BulkSearchImagesPeopleAgeEnumChildren  BulkSearchImagesPeopleAgeEnum = "children"
	BulkSearchImagesPeopleAgeEnumTeenagers BulkSearchImagesPeopleAgeEnum = "teenagers"
	BulkSearchImagesPeopleAgeEnumTwentys   BulkSearchImagesPeopleAgeEnum = "20s"
	BulkSearchImagesPeopleAgeEnumThirtys   BulkSearchImagesPeopleAgeEnum = "30s"
	BulkSearchImagesPeopleAgeEnumFortys    BulkSearchImagesPeopleAgeEnum = "40s"
	BulkSearchImagesPeopleAgeEnumFiftys    BulkSearchImagesPeopleAgeEnum = "50s"
	BulkSearchImagesPeopleAgeEnumSixtys    BulkSearchImagesPeopleAgeEnum = "60s"
	BulkSearchImagesPeopleAgeEnumOlder     BulkSearchImagesPeopleAgeEnum = "older"
)

func (e *BulkSearchImagesPeopleAgeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "infants":
		fallthrough
	case "children":
		fallthrough
	case "teenagers":
		fallthrough
	case "20s":
		fallthrough
	case "30s":
		fallthrough
	case "40s":
		fallthrough
	case "50s":
		fallthrough
	case "60s":
		fallthrough
	case "older":
		*e = BulkSearchImagesPeopleAgeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BulkSearchImagesPeopleAgeEnum: %s", s)
	}
}

type BulkSearchImagesPeopleEthnicityEnum string

const (
	BulkSearchImagesPeopleEthnicityEnumAfrican            BulkSearchImagesPeopleEthnicityEnum = "african"
	BulkSearchImagesPeopleEthnicityEnumAfricanAmerican    BulkSearchImagesPeopleEthnicityEnum = "african_american"
	BulkSearchImagesPeopleEthnicityEnumBlack              BulkSearchImagesPeopleEthnicityEnum = "black"
	BulkSearchImagesPeopleEthnicityEnumBrazilian          BulkSearchImagesPeopleEthnicityEnum = "brazilian"
	BulkSearchImagesPeopleEthnicityEnumChinese            BulkSearchImagesPeopleEthnicityEnum = "chinese"
	BulkSearchImagesPeopleEthnicityEnumCaucasian          BulkSearchImagesPeopleEthnicityEnum = "caucasian"
	BulkSearchImagesPeopleEthnicityEnumEastAsian          BulkSearchImagesPeopleEthnicityEnum = "east_asian"
	BulkSearchImagesPeopleEthnicityEnumHispanic           BulkSearchImagesPeopleEthnicityEnum = "hispanic"
	BulkSearchImagesPeopleEthnicityEnumJapanese           BulkSearchImagesPeopleEthnicityEnum = "japanese"
	BulkSearchImagesPeopleEthnicityEnumMiddleEastern      BulkSearchImagesPeopleEthnicityEnum = "middle_eastern"
	BulkSearchImagesPeopleEthnicityEnumNativeAmerican     BulkSearchImagesPeopleEthnicityEnum = "native_american"
	BulkSearchImagesPeopleEthnicityEnumPacificIslander    BulkSearchImagesPeopleEthnicityEnum = "pacific_islander"
	BulkSearchImagesPeopleEthnicityEnumSouthAsian         BulkSearchImagesPeopleEthnicityEnum = "south_asian"
	BulkSearchImagesPeopleEthnicityEnumSoutheastAsian     BulkSearchImagesPeopleEthnicityEnum = "southeast_asian"
	BulkSearchImagesPeopleEthnicityEnumOther              BulkSearchImagesPeopleEthnicityEnum = "other"
	BulkSearchImagesPeopleEthnicityEnumNotAfrican         BulkSearchImagesPeopleEthnicityEnum = "NOT african"
	BulkSearchImagesPeopleEthnicityEnumNotAfricanAmerican BulkSearchImagesPeopleEthnicityEnum = "NOT african_american"
	BulkSearchImagesPeopleEthnicityEnumNotBlack           BulkSearchImagesPeopleEthnicityEnum = "NOT black"
	BulkSearchImagesPeopleEthnicityEnumNotBrazilian       BulkSearchImagesPeopleEthnicityEnum = "NOT brazilian"
	BulkSearchImagesPeopleEthnicityEnumNotChinese         BulkSearchImagesPeopleEthnicityEnum = "NOT chinese"
	BulkSearchImagesPeopleEthnicityEnumNotCaucasian       BulkSearchImagesPeopleEthnicityEnum = "NOT caucasian"
	BulkSearchImagesPeopleEthnicityEnumNotEastAsian       BulkSearchImagesPeopleEthnicityEnum = "NOT east_asian"
	BulkSearchImagesPeopleEthnicityEnumNotHispanic        BulkSearchImagesPeopleEthnicityEnum = "NOT hispanic"
	BulkSearchImagesPeopleEthnicityEnumNotJapanese        BulkSearchImagesPeopleEthnicityEnum = "NOT japanese"
	BulkSearchImagesPeopleEthnicityEnumNotMiddleEastern   BulkSearchImagesPeopleEthnicityEnum = "NOT middle_eastern"
	BulkSearchImagesPeopleEthnicityEnumNotNativeAmerican  BulkSearchImagesPeopleEthnicityEnum = "NOT native_american"
	BulkSearchImagesPeopleEthnicityEnumNotPacificIslander BulkSearchImagesPeopleEthnicityEnum = "NOT pacific_islander"
	BulkSearchImagesPeopleEthnicityEnumNotSouthAsian      BulkSearchImagesPeopleEthnicityEnum = "NOT south_asian"
	BulkSearchImagesPeopleEthnicityEnumNotSoutheastAsian  BulkSearchImagesPeopleEthnicityEnum = "NOT southeast_asian"
	BulkSearchImagesPeopleEthnicityEnumNotOther           BulkSearchImagesPeopleEthnicityEnum = "NOT other"
)

func (e *BulkSearchImagesPeopleEthnicityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "african":
		fallthrough
	case "african_american":
		fallthrough
	case "black":
		fallthrough
	case "brazilian":
		fallthrough
	case "chinese":
		fallthrough
	case "caucasian":
		fallthrough
	case "east_asian":
		fallthrough
	case "hispanic":
		fallthrough
	case "japanese":
		fallthrough
	case "middle_eastern":
		fallthrough
	case "native_american":
		fallthrough
	case "pacific_islander":
		fallthrough
	case "south_asian":
		fallthrough
	case "southeast_asian":
		fallthrough
	case "other":
		fallthrough
	case "NOT african":
		fallthrough
	case "NOT african_american":
		fallthrough
	case "NOT black":
		fallthrough
	case "NOT brazilian":
		fallthrough
	case "NOT chinese":
		fallthrough
	case "NOT caucasian":
		fallthrough
	case "NOT east_asian":
		fallthrough
	case "NOT hispanic":
		fallthrough
	case "NOT japanese":
		fallthrough
	case "NOT middle_eastern":
		fallthrough
	case "NOT native_american":
		fallthrough
	case "NOT pacific_islander":
		fallthrough
	case "NOT south_asian":
		fallthrough
	case "NOT southeast_asian":
		fallthrough
	case "NOT other":
		*e = BulkSearchImagesPeopleEthnicityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BulkSearchImagesPeopleEthnicityEnum: %s", s)
	}
}

// BulkSearchImagesPeopleGenderEnum - Show images with people of the specified gender
type BulkSearchImagesPeopleGenderEnum string

const (
	BulkSearchImagesPeopleGenderEnumMale   BulkSearchImagesPeopleGenderEnum = "male"
	BulkSearchImagesPeopleGenderEnumFemale BulkSearchImagesPeopleGenderEnum = "female"
	BulkSearchImagesPeopleGenderEnumBoth   BulkSearchImagesPeopleGenderEnum = "both"
)

func (e *BulkSearchImagesPeopleGenderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "male":
		fallthrough
	case "female":
		fallthrough
	case "both":
		*e = BulkSearchImagesPeopleGenderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BulkSearchImagesPeopleGenderEnum: %s", s)
	}
}

// BulkSearchImagesSortEnum - Sort by
type BulkSearchImagesSortEnum string

const (
	BulkSearchImagesSortEnumNewest    BulkSearchImagesSortEnum = "newest"
	BulkSearchImagesSortEnumPopular   BulkSearchImagesSortEnum = "popular"
	BulkSearchImagesSortEnumRelevance BulkSearchImagesSortEnum = "relevance"
	BulkSearchImagesSortEnumRandom    BulkSearchImagesSortEnum = "random"
)

func (e *BulkSearchImagesSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "newest":
		fallthrough
	case "popular":
		fallthrough
	case "relevance":
		fallthrough
	case "random":
		*e = BulkSearchImagesSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BulkSearchImagesSortEnum: %s", s)
	}
}

// BulkSearchImagesViewEnum - Amount of detail to render in the response
type BulkSearchImagesViewEnum string

const (
	BulkSearchImagesViewEnumMinimal BulkSearchImagesViewEnum = "minimal"
	BulkSearchImagesViewEnumFull    BulkSearchImagesViewEnum = "full"
)

func (e *BulkSearchImagesViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "minimal":
		fallthrough
	case "full":
		*e = BulkSearchImagesViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BulkSearchImagesViewEnum: %s", s)
	}
}

type BulkSearchImagesQueryParams struct {
	// Show images added on the specified date
	AddedDate *types.Date `queryParam:"style=form,explode=true,name=added_date"`
	// Show images added before the specified date
	AddedDateEnd *types.Date `queryParam:"style=form,explode=true,name=added_date_end"`
	// Show images added on or after the specified date
	AddedDateStart *types.Date `queryParam:"style=form,explode=true,name=added_date_start"`
	// Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
	AspectRatio *float64 `queryParam:"style=form,explode=true,name=aspect_ratio"`
	// Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
	AspectRatioMax *float64 `queryParam:"style=form,explode=true,name=aspect_ratio_max"`
	// Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
	AspectRatioMin *float64 `queryParam:"style=form,explode=true,name=aspect_ratio_min"`
	// Show images with the specified Shutterstock-defined category; specify a category name or ID
	Category *string `queryParam:"style=form,explode=true,name=category"`
	// Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors
	Color *string `queryParam:"style=form,explode=true,name=color"`
	// Show images with the specified contributor names or IDs, allows multiple
	Contributor []string `queryParam:"style=form,explode=true,name=contributor"`
	// Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
	ContributorCountry interface{} `queryParam:"style=form,explode=true,name=contributor_country"`
	// Fields to display in the response; see the documentation for the fields parameter in the overview section
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// (Deprecated; use height_from and height_to instead) Show images with the specified height
	Height *int64 `queryParam:"style=form,explode=true,name=height"`
	// Show images with the specified height or larger, in pixels
	HeightFrom *int64 `queryParam:"style=form,explode=true,name=height_from"`
	// Show images with the specified height or smaller, in pixels
	HeightTo *int64 `queryParam:"style=form,explode=true,name=height_to"`
	// Show images of the specified type
	ImageType []BulkSearchImagesImageTypeEnum `queryParam:"style=form,explode=true,name=image_type"`
	// Hide results with potentially unsafe keywords
	KeywordSafeSearch *bool `queryParam:"style=form,explode=true,name=keyword_safe_search"`
	// Set query and result language (uses Accept-Language header if not set)
	Language *shared.LanguageEnum `queryParam:"style=form,explode=true,name=language"`
	// Show only images with the specified license
	License []BulkSearchImagesLicenseEnum `queryParam:"style=form,explode=true,name=license"`
	// Show image results with the specified model IDs
	Model []string `queryParam:"style=form,explode=true,name=model"`
	// Show image results with horizontal or vertical orientation
	Orientation *BulkSearchImagesOrientationEnum `queryParam:"style=form,explode=true,name=orientation"`
	// Page number
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Show images that feature people of the specified age category
	PeopleAge *BulkSearchImagesPeopleAgeEnum `queryParam:"style=form,explode=true,name=people_age"`
	// Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
	PeopleEthnicity []BulkSearchImagesPeopleEthnicityEnum `queryParam:"style=form,explode=true,name=people_ethnicity"`
	// Show images with people of the specified gender
	PeopleGender *BulkSearchImagesPeopleGenderEnum `queryParam:"style=form,explode=true,name=people_gender"`
	// Show images of people with a signed model release
	PeopleModelReleased *bool `queryParam:"style=form,explode=true,name=people_model_released"`
	// Show images with the specified number of people
	PeopleNumber *int64 `queryParam:"style=form,explode=true,name=people_number"`
	// Number of results per page
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
	Region interface{} `queryParam:"style=form,explode=true,name=region"`
	// Enable or disable safe search
	Safe *bool `queryParam:"style=form,explode=true,name=safe"`
	// Sort by
	Sort *BulkSearchImagesSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Spellcheck the search query and return results on suggested spellings
	SpellcheckQuery *bool `queryParam:"style=form,explode=true,name=spellcheck_query"`
	// Amount of detail to render in the response
	View *BulkSearchImagesViewEnum `queryParam:"style=form,explode=true,name=view"`
	// (Deprecated; use width_from and width_to instead) Show images with the specified width
	Width *int64 `queryParam:"style=form,explode=true,name=width"`
	// Show images with the specified width or larger, in pixels
	WidthFrom *int64 `queryParam:"style=form,explode=true,name=width_from"`
	// Show images with the specified width or smaller, in pixels
	WidthTo *int64 `queryParam:"style=form,explode=true,name=width_to"`
}

type BulkSearchImagesRequest struct {
	QueryParams BulkSearchImagesQueryParams
	// List of queries to request results for and filters to apply per query; these values override the defaults in the query parameters
	Request  []shared.SearchImage `request:"mediaType=application/json"`
	Security BulkSearchImagesSecurity
}

type BulkSearchImagesResponse struct {
	// OK
	BulkImageSearchResults *shared.BulkImageSearchResults
	ContentType            string
	StatusCode             int
	RawResponse            *http.Response
}
