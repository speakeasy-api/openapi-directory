// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CmcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type CmcerRequestBodyCertificateParameters struct {
	// Application Number
	Aplno string `json:"aplno"`
	// Certificate Number
	Certno string `json:"certno"`
	// Security Code
	Sccd string `json:"sccd"`
}

// CmcerRequestBodyFormatEnum - The format of the certificate in response.
type CmcerRequestBodyFormatEnum string

const (
	CmcerRequestBodyFormatEnumPdf CmcerRequestBodyFormatEnum = "pdf"
)

func (e CmcerRequestBodyFormatEnum) ToPointer() *CmcerRequestBodyFormatEnum {
	return &e
}

func (e *CmcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = CmcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CmcerRequestBodyFormatEnum: %v", v)
	}
}

// CmcerRequestBody - Request format
type CmcerRequestBody struct {
	CertificateParameters *CmcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format CmcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Cmcer504ApplicationJSONErrorEnum string

const (
	Cmcer504ApplicationJSONErrorEnumGatewayTimeout Cmcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Cmcer504ApplicationJSONErrorEnum) ToPointer() *Cmcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Cmcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Cmcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cmcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Cmcer504ApplicationJSONErrorDescriptionEnum string

const (
	Cmcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Cmcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Cmcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Cmcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cmcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Cmcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cmcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cmcer504ApplicationJSON - Gateway timeout
type Cmcer504ApplicationJSON struct {
	Error            *Cmcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cmcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cmcer503ApplicationJSONErrorEnum string

const (
	Cmcer503ApplicationJSONErrorEnumServiceUnavailable Cmcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Cmcer503ApplicationJSONErrorEnum) ToPointer() *Cmcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Cmcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Cmcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cmcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Cmcer503ApplicationJSONErrorDescriptionEnum string

const (
	Cmcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Cmcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Cmcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Cmcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cmcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Cmcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cmcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cmcer503ApplicationJSON - Service unavailable
type Cmcer503ApplicationJSON struct {
	Error            *Cmcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cmcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cmcer502ApplicationJSONErrorEnum string

const (
	Cmcer502ApplicationJSONErrorEnumBadGatewy Cmcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Cmcer502ApplicationJSONErrorEnum) ToPointer() *Cmcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Cmcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Cmcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cmcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Cmcer502ApplicationJSONErrorDescriptionEnum string

const (
	Cmcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Cmcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Cmcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Cmcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cmcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Cmcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cmcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cmcer502ApplicationJSON - Bad gateway
type Cmcer502ApplicationJSON struct {
	Error            *Cmcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cmcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cmcer500ApplicationJSONErrorEnum string

const (
	Cmcer500ApplicationJSONErrorEnumInternalServerError Cmcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Cmcer500ApplicationJSONErrorEnum) ToPointer() *Cmcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Cmcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Cmcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cmcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Cmcer500ApplicationJSONErrorDescriptionEnum string

const (
	Cmcer500ApplicationJSONErrorDescriptionEnumInternalServerError Cmcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Cmcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Cmcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cmcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Cmcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cmcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cmcer500ApplicationJSON - Internal server error
type Cmcer500ApplicationJSON struct {
	Error            *Cmcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cmcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cmcer404ApplicationJSONErrorEnum string

const (
	Cmcer404ApplicationJSONErrorEnumRecordNotFound Cmcer404ApplicationJSONErrorEnum = "record_not_found"
	Cmcer404ApplicationJSONErrorEnumURLNotFound    Cmcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Cmcer404ApplicationJSONErrorEnum) ToPointer() *Cmcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Cmcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Cmcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cmcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Cmcer404ApplicationJSONErrorDescriptionEnum string

const (
	Cmcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Cmcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Cmcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Cmcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Cmcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Cmcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cmcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Cmcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cmcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cmcer404ApplicationJSON - No record found
type Cmcer404ApplicationJSON struct {
	Error            *Cmcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cmcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cmcer401ApplicationJSONErrorEnum string

const (
	Cmcer401ApplicationJSONErrorEnumInvalidAuthentication Cmcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Cmcer401ApplicationJSONErrorEnumInvalidAuthorization  Cmcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Cmcer401ApplicationJSONErrorEnum) ToPointer() *Cmcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Cmcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Cmcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cmcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Cmcer401ApplicationJSONErrorDescriptionEnum string

const (
	Cmcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Cmcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Cmcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Cmcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Cmcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Cmcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cmcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Cmcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cmcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cmcer401ApplicationJSON - Unauthorized access
type Cmcer401ApplicationJSON struct {
	Error            *Cmcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cmcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cmcer400ApplicationJSONErrorEnum string

const (
	Cmcer400ApplicationJSONErrorEnumMissingParameter Cmcer400ApplicationJSONErrorEnum = "missing_parameter"
	Cmcer400ApplicationJSONErrorEnumInvalidParameter Cmcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Cmcer400ApplicationJSONErrorEnumInvalidFormat    Cmcer400ApplicationJSONErrorEnum = "invalid_format"
	Cmcer400ApplicationJSONErrorEnumInvalidTxnid     Cmcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Cmcer400ApplicationJSONErrorEnumInvalidConsentid Cmcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Cmcer400ApplicationJSONErrorEnum) ToPointer() *Cmcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Cmcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Cmcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cmcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Cmcer400ApplicationJSONErrorDescriptionEnum string

const (
	Cmcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Cmcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Cmcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Cmcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Cmcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Cmcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Cmcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Cmcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Cmcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Cmcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Cmcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Cmcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cmcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Cmcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cmcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cmcer400ApplicationJSON - Bad request
type Cmcer400ApplicationJSON struct {
	Error            *Cmcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cmcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type CmcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Cmcer400ApplicationJSONObject *Cmcer400ApplicationJSON
	// Unauthorized access
	Cmcer401ApplicationJSONObject *Cmcer401ApplicationJSON
	// No record found
	Cmcer404ApplicationJSONObject *Cmcer404ApplicationJSON
	// Internal server error
	Cmcer500ApplicationJSONObject *Cmcer500ApplicationJSON
	// Bad gateway
	Cmcer502ApplicationJSONObject *Cmcer502ApplicationJSON
	// Service unavailable
	Cmcer503ApplicationJSONObject *Cmcer503ApplicationJSON
	// Gateway timeout
	Cmcer504ApplicationJSONObject *Cmcer504ApplicationJSON
}
