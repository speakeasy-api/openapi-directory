/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { PolicyControllerOnClusterState } from "./policycontrolleronclusterstate";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The state of the policy controller policy content
 */
export class PolicyControllerPolicyContentState extends SpeakeasyBase {
  /**
   * The state of the any bundles included in the chosen version of the manifest
   */
  @SpeakeasyMetadata({ elemType: PolicyControllerOnClusterState })
  @Expose({ name: "bundleStates" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, PolicyControllerOnClusterState> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], PolicyControllerOnClusterState);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  bundleStates?: Record<string, PolicyControllerOnClusterState>;

  /**
   * OnClusterState represents the state of a sub-component of Policy Controller.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "templateLibraryState" })
  @Type(() => PolicyControllerOnClusterState)
  templateLibraryState?: PolicyControllerOnClusterState;
}
