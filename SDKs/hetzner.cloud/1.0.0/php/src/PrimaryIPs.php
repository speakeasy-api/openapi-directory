<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PrimaryIPs 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a Primary IP
     * 
     * Deletes a Primary IP.
     * 
     * The Primary IP may be assigned to a Server. In this case it is unassigned automatically. The Server must be powered off (status `off`) in order for this operation to succeed.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePrimaryIpsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePrimaryIpsIdResponse
     */
	public function deletePrimaryIpsId(
        \OpenAPI\OpenAPI\Models\Operations\DeletePrimaryIpsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePrimaryIpsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/primary_ips/{id}', \OpenAPI\OpenAPI\Models\Operations\DeletePrimaryIpsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePrimaryIpsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get all Primary IPs
     * 
     * Returns all Primary IP objects.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPrimaryIpsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPrimaryIpsResponse
     */
	public function getPrimaryIps(
        \OpenAPI\OpenAPI\Models\Operations\GetPrimaryIpsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPrimaryIpsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/primary_ips');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPrimaryIpsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPrimaryIpsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->primaryIPsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetPrimaryIpsPrimaryIPsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a Primary IP
     * 
     * Returns a specific Primary IP object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPrimaryIpsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPrimaryIpsIdResponse
     */
	public function getPrimaryIpsId(
        \OpenAPI\OpenAPI\Models\Operations\GetPrimaryIpsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPrimaryIpsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/primary_ips/{id}', \OpenAPI\OpenAPI\Models\Operations\GetPrimaryIpsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPrimaryIpsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->primaryIPResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetPrimaryIpsIdPrimaryIPResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Primary IP
     * 
     * Creates a new Primary IP, optionally assigned to a Server.
     * 
     * If you want to create a Primary IP that is not assigned to a Server, you need to provide the `datacenter` key instead of `assignee_id`. This can be either the ID or the name of the Datacenter this Primary IP shall be created in.
     * 
     * Note that a Primary IP can only be assigned to a Server in the same Datacenter later on.
     * 
     * #### Call specific error codes
     * 
     * | Code                          | Description                                                   |
     * |------------------------------ |-------------------------------------------------------------- |
     * | `server_not_stopped`          | The specified server is running, but needs to be powered off  |
     * | `server_has_ipv4`             | The server already has an ipv4 address                        |
     * | `server_has_ipv6`             | The server already has an ipv6 address                        |
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsCreatePrimaryIPRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsResponse
     */
	public function postPrimaryIps(
        \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsCreatePrimaryIPRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/primary_ips');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createPrimaryIPResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsCreatePrimaryIPResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a Primary IP
     * 
     * Updates the Primary IP.
     * 
     * Note that when updating labels, the Primary IP's current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.
     * 
     * If the Primary IP object changes during the request, the response will be a “conflict” error.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutPrimaryIpsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutPrimaryIpsIdResponse
     */
	public function putPrimaryIpsId(
        \OpenAPI\OpenAPI\Models\Operations\PutPrimaryIpsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutPrimaryIpsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/primary_ips/{id}', \OpenAPI\OpenAPI\Models\Operations\PutPrimaryIpsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutPrimaryIpsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->primaryIPResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutPrimaryIpsIdPrimaryIPResponse', 'json');
            }
        }

        return $response;
    }
}