// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCopyClusterSnapshotActionEnum
type GETCopyClusterSnapshotActionEnum string

const (
	GETCopyClusterSnapshotActionEnumCopyClusterSnapshot GETCopyClusterSnapshotActionEnum = "CopyClusterSnapshot"
)

func (e *GETCopyClusterSnapshotActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CopyClusterSnapshot":
		*e = GETCopyClusterSnapshotActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCopyClusterSnapshotActionEnum: %s", s)
	}
}

// GETCopyClusterSnapshotVersionEnum
type GETCopyClusterSnapshotVersionEnum string

const (
	GETCopyClusterSnapshotVersionEnumTwoThousandAndTwelve1201 GETCopyClusterSnapshotVersionEnum = "2012-12-01"
)

func (e *GETCopyClusterSnapshotVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-12-01":
		*e = GETCopyClusterSnapshotVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCopyClusterSnapshotVersionEnum: %s", s)
	}
}

type GETCopyClusterSnapshotRequest struct {
	Action GETCopyClusterSnapshotActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
	ManualSnapshotRetentionPeriod *int64 `queryParam:"style=form,explode=true,name=ManualSnapshotRetentionPeriod"`
	// <p>The identifier of the cluster the source snapshot was created from. This parameter is required if your IAM user or role has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for a valid cluster.</p> </li> </ul>
	SourceSnapshotClusterIdentifier *string `queryParam:"style=form,explode=true,name=SourceSnapshotClusterIdentifier"`
	// <p>The identifier for the source snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for a valid automated snapshot whose state is <code>available</code>.</p> </li> </ul>
	SourceSnapshotIdentifier string `queryParam:"style=form,explode=true,name=SourceSnapshotIdentifier"`
	// <p>The identifier given to the new manual snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for the Amazon Web Services account that is making the request.</p> </li> </ul>
	TargetSnapshotIdentifier string                            `queryParam:"style=form,explode=true,name=TargetSnapshotIdentifier"`
	Version                  GETCopyClusterSnapshotVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm            *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCopyClusterSnapshotResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
