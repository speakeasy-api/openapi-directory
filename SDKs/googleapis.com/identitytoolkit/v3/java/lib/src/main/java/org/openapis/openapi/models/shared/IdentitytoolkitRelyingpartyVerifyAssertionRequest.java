/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * IdentitytoolkitRelyingpartyVerifyAssertionRequest - Request to verify the IDP assertion.
 */
public class IdentitytoolkitRelyingpartyVerifyAssertionRequest {
    /**
     * When it's true, automatically creates a new account if the user doesn't exist. When it's false, allows existing user to sign in normally and throws exception if the user doesn't exist.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoCreate")
    public Boolean autoCreate;

    public IdentitytoolkitRelyingpartyVerifyAssertionRequest withAutoCreate(Boolean autoCreate) {
        this.autoCreate = autoCreate;
        return this;
    }
    
    /**
     * GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delegatedProjectNumber")
    public String delegatedProjectNumber;

    public IdentitytoolkitRelyingpartyVerifyAssertionRequest withDelegatedProjectNumber(String delegatedProjectNumber) {
        this.delegatedProjectNumber = delegatedProjectNumber;
        return this;
    }
    
    /**
     * The GITKit token of the authenticated user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idToken")
    public String idToken;

    public IdentitytoolkitRelyingpartyVerifyAssertionRequest withIdToken(String idToken) {
        this.idToken = idToken;
        return this;
    }
    
    /**
     * Instance id token of the app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceId")
    public String instanceId;

    public IdentitytoolkitRelyingpartyVerifyAssertionRequest withInstanceId(String instanceId) {
        this.instanceId = instanceId;
        return this;
    }
    
    /**
     * The GITKit token for the non-trusted IDP pending to be confirmed by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingIdToken")
    public String pendingIdToken;

    public IdentitytoolkitRelyingpartyVerifyAssertionRequest withPendingIdToken(String pendingIdToken) {
        this.pendingIdToken = pendingIdToken;
        return this;
    }
    
    /**
     * The post body if the request is a HTTP POST.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postBody")
    public String postBody;

    public IdentitytoolkitRelyingpartyVerifyAssertionRequest withPostBody(String postBody) {
        this.postBody = postBody;
        return this;
    }
    
    /**
     * The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestUri")
    public String requestUri;

    public IdentitytoolkitRelyingpartyVerifyAssertionRequest withRequestUri(String requestUri) {
        this.requestUri = requestUri;
        return this;
    }
    
    /**
     * Whether return 200 and IDP credential rather than throw exception when federated id is already linked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returnIdpCredential")
    public Boolean returnIdpCredential;

    public IdentitytoolkitRelyingpartyVerifyAssertionRequest withReturnIdpCredential(Boolean returnIdpCredential) {
        this.returnIdpCredential = returnIdpCredential;
        return this;
    }
    
    /**
     * Whether to return refresh tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returnRefreshToken")
    public Boolean returnRefreshToken;

    public IdentitytoolkitRelyingpartyVerifyAssertionRequest withReturnRefreshToken(Boolean returnRefreshToken) {
        this.returnRefreshToken = returnRefreshToken;
        return this;
    }
    
    /**
     * Whether return sts id token and refresh token instead of gitkit token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returnSecureToken")
    public Boolean returnSecureToken;

    public IdentitytoolkitRelyingpartyVerifyAssertionRequest withReturnSecureToken(Boolean returnSecureToken) {
        this.returnSecureToken = returnSecureToken;
        return this;
    }
    
    /**
     * Session ID, which should match the one in previous createAuthUri request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionId")
    public String sessionId;

    public IdentitytoolkitRelyingpartyVerifyAssertionRequest withSessionId(String sessionId) {
        this.sessionId = sessionId;
        return this;
    }
    
    /**
     * For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tenantId")
    public String tenantId;

    public IdentitytoolkitRelyingpartyVerifyAssertionRequest withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }
    
    /**
     * Tenant project number to be used for idp discovery.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tenantProjectNumber")
    public String tenantProjectNumber;

    public IdentitytoolkitRelyingpartyVerifyAssertionRequest withTenantProjectNumber(String tenantProjectNumber) {
        this.tenantProjectNumber = tenantProjectNumber;
        return this;
    }
    
    public IdentitytoolkitRelyingpartyVerifyAssertionRequest(){}
}
