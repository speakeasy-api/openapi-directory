"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import functionconfiguration as shared_functionconfiguration
from ..shared import invalidparametervalueexception as shared_invalidparametervalueexception
from ..shared import resourcenotfoundexception as shared_resourcenotfoundexception
from ..shared import serviceexception as shared_serviceexception
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UploadFunctionModeEnum(str, Enum):
    r"""How the Lambda function will be invoked. Lambda supports only the \\"event\\" mode."""
    EVENT = 'event'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UploadFunctionRequestBody:
    
    function_zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FunctionZip') }})
    r"""A .zip file containing your packaged source code. For more information about creating a .zip file, go to <a href=\\"http://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events.html\\">AWS LambdaL How it Works</a> in the AWS Lambda Developer Guide."""  
    
class UploadFunctionRuntimeEnum(str, Enum):
    r"""The runtime environment for the Lambda function you are uploading. Currently, Lambda supports only \\"nodejs\\" as the runtime."""
    NODEJS = 'nodejs'


@dataclasses.dataclass
class UploadFunctionRequest:
    
    function_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'FunctionName', 'style': 'simple', 'explode': False }})
    r"""The name you want to assign to the function you are uploading. The function names appear in the console and are returned in the <a>ListFunctions</a> API. Function names are used to specify functions to other AWS Lambda APIs, such as <a>InvokeAsync</a>."""  
    handler: str = dataclasses.field(metadata={'query_param': { 'field_name': 'Handler', 'style': 'form', 'explode': True }})
    r"""The function that Lambda calls to begin execution. For Node.js, it is the <i>module-name</i>.<i>export</i> value in your function."""  
    mode: UploadFunctionModeEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Mode', 'style': 'form', 'explode': True }})
    r"""How the Lambda function will be invoked. Lambda supports only the \\"event\\" mode."""  
    request_body: UploadFunctionRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    role: str = dataclasses.field(metadata={'query_param': { 'field_name': 'Role', 'style': 'form', 'explode': True }})
    r"""The Amazon Resource Name (ARN) of the IAM role that Lambda assumes when it executes your function to access any other Amazon Web Services (AWS) resources."""  
    runtime: UploadFunctionRuntimeEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Runtime', 'style': 'form', 'explode': True }})
    r"""The runtime environment for the Lambda function you are uploading. Currently, Lambda supports only \\"nodejs\\" as the runtime."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Description', 'style': 'form', 'explode': True }})
    r"""A short, user-defined function description. Lambda does not use this value. Assign a meaningful description as you see fit."""  
    memory_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MemorySize', 'style': 'form', 'explode': True }})
    r"""The amount of memory, in MB, your Lambda function is given. Lambda uses this memory size to infer the amount of CPU allocated to your function. Your function use-case determines your CPU and memory requirements. For example, database operation might need less memory compared to image processing function. The default value is 128 MB. The value must be a multiple of 64 MB."""  
    timeout: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Timeout', 'style': 'form', 'explode': True }})
    r"""The function execution time at which Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UploadFunctionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    function_configuration: Optional[shared_functionconfiguration.FunctionConfiguration] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_parameter_value_exception: Optional[shared_invalidparametervalueexception.InvalidParameterValueException] = dataclasses.field(default=None)
    r"""InvalidParameterValueException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[shared_resourcenotfoundexception.ResourceNotFoundException] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_exception: Optional[shared_serviceexception.ServiceException] = dataclasses.field(default=None)
    r"""ServiceException"""  
    