<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SummaryJournalEntries 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a summary journal entry
     * 
     * This reference describes how to delete a summary journal entry using the REST API.
     * 
     * You must have the "Delete Cancelled Journal Entry" user permission enabled to delete summary journal entries.
     * 
     * A summary journal entry must be canceled before it can be deleted.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DELETESummaryJournalEntryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DELETESummaryJournalEntryResponse
     */
	public function deleteSummaryJournalEntry(
        \OpenAPI\OpenAPI\Models\Operations\DELETESummaryJournalEntryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DELETESummaryJournalEntryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/journal-entries/{je-number}', \OpenAPI\OpenAPI\Models\Operations\DELETESummaryJournalEntryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DELETESummaryJournalEntryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonResponseType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all summary journal entries in a journal run
     * 
     * 
     * This REST API reference describes how to retrieve information about all summary journal entries in a journal run.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAllSummaryJournalEntriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAllSummaryJournalEntriesResponse
     */
	public function getAllSummaryJournalEntries(
        \OpenAPI\OpenAPI\Models\Operations\GETAllSummaryJournalEntriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAllSummaryJournalEntriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/journal-entries/journal-runs/{jr-number}', \OpenAPI\OpenAPI\Models\Operations\GETAllSummaryJournalEntriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETAllSummaryJournalEntriesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAllSummaryJournalEntriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getJournalEntriesInJournalRunType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETJournalEntriesInJournalRunType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a summary journal entry
     * 
     * This REST API reference describes how to get information about a summary journal entry by its journal entry number.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETSummaryJournalEntryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETSummaryJournalEntryResponse
     */
	public function getSummaryJournalEntry(
        \OpenAPI\OpenAPI\Models\Operations\GETSummaryJournalEntryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETSummaryJournalEntryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/journal-entries/{je-number}', \OpenAPI\OpenAPI\Models\Operations\GETSummaryJournalEntryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETSummaryJournalEntryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getJournalEntryDetailType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETJournalEntryDetailType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a summary journal entry
     * 
     * This REST API reference describes how to manually create a summary journal entry. Request and response field descriptions and sample code are provided.
     * ## Requirements
     * 1.The sum of debits must equal the sum of credits in the summary journal entry.
     * 
     * 2.The following applies only if you use foreign currency conversion:
     *   * If you have configured Aggregate transactions with different currencies during a Journal Run to "Yes", the value of the **currency** field must be the same as your tenant's home currency. That is, you must create journal entries using your home currency.
     *   * All journal entries in an accounting period must either all be aggregated or all be unaggregated. You cannot have a mix of aggregated and unaggregated journal entries in the same accounting period.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTSummaryJournalEntryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTSummaryJournalEntryResponse
     */
	public function postSummaryJournalEntry(
        \OpenAPI\OpenAPI\Models\Operations\POSTSummaryJournalEntryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTSummaryJournalEntryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/journal-entries');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "postJournalEntryType", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTSummaryJournalEntryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postJournalEntryResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\POSTJournalEntryResponseType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a summary journal entry
     * 
     * 
     * This REST API reference describes how to update the basic information of a summary journal entry. Request and response field descriptions and sample code are provided.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTBasicSummaryJournalEntryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTBasicSummaryJournalEntryResponse
     */
	public function putBasicSummaryJournalEntry(
        \OpenAPI\OpenAPI\Models\Operations\PUTBasicSummaryJournalEntryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTBasicSummaryJournalEntryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/journal-entries/{je-number}/basic-information', \OpenAPI\OpenAPI\Models\Operations\PUTBasicSummaryJournalEntryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "putBasicSummaryJournalEntryType", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTBasicSummaryJournalEntryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonResponseType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancel a summary journal entry
     * 
     * 
     * This reference describes how to cancel a summary journal entry using the REST API.
     *     
     * You must have the "Cancel Journal Entry" user permission enabled to cancel summary journal entries.
     *     
     * A summary journal entry cannot be canceled if its Transferred to Accounting status is "Yes" or "Processing".
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTSummaryJournalEntryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTSummaryJournalEntryResponse
     */
	public function putSummaryJournalEntry(
        \OpenAPI\OpenAPI\Models\Operations\PUTSummaryJournalEntryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTSummaryJournalEntryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/journal-entries/{je-number}/cancel', \OpenAPI\OpenAPI\Models\Operations\PUTSummaryJournalEntryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTSummaryJournalEntryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonResponseType', 'json');
            }
        }

        return $response;
    }
}