// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type StoreReleasesListSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type StoreReleasesListPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The name of the store
	StoreName string `pathParam:"style=simple,explode=false,name=store_name"`
}

type StoreReleasesListRequest struct {
	PathParams StoreReleasesListPathParams
	Security   StoreReleasesListSecurity
}

type StoreReleasesListDefaultApplicationJSONCodeEnum string

const (
	StoreReleasesListDefaultApplicationJSONCodeEnumBadRequest          StoreReleasesListDefaultApplicationJSONCodeEnum = "BadRequest"
	StoreReleasesListDefaultApplicationJSONCodeEnumConflict            StoreReleasesListDefaultApplicationJSONCodeEnum = "Conflict"
	StoreReleasesListDefaultApplicationJSONCodeEnumNotAcceptable       StoreReleasesListDefaultApplicationJSONCodeEnum = "NotAcceptable"
	StoreReleasesListDefaultApplicationJSONCodeEnumNotFound            StoreReleasesListDefaultApplicationJSONCodeEnum = "NotFound"
	StoreReleasesListDefaultApplicationJSONCodeEnumInternalServerError StoreReleasesListDefaultApplicationJSONCodeEnum = "InternalServerError"
	StoreReleasesListDefaultApplicationJSONCodeEnumUnauthorized        StoreReleasesListDefaultApplicationJSONCodeEnum = "Unauthorized"
	StoreReleasesListDefaultApplicationJSONCodeEnumTooManyRequests     StoreReleasesListDefaultApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *StoreReleasesListDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = StoreReleasesListDefaultApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoreReleasesListDefaultApplicationJSONCodeEnum: %s", s)
	}
}

// StoreReleasesListDefaultApplicationJSON - Error
type StoreReleasesListDefaultApplicationJSON struct {
	Code    StoreReleasesListDefaultApplicationJSONCodeEnum `json:"code"`
	Message string                                          `json:"message"`
}

// StoreReleasesList200ApplicationJSONDestinationTypeEnum - Destination for this release.
type StoreReleasesList200ApplicationJSONDestinationTypeEnum string

const (
	StoreReleasesList200ApplicationJSONDestinationTypeEnumGroup  StoreReleasesList200ApplicationJSONDestinationTypeEnum = "group"
	StoreReleasesList200ApplicationJSONDestinationTypeEnumStore  StoreReleasesList200ApplicationJSONDestinationTypeEnum = "store"
	StoreReleasesList200ApplicationJSONDestinationTypeEnumTester StoreReleasesList200ApplicationJSONDestinationTypeEnum = "tester"
)

func (e *StoreReleasesList200ApplicationJSONDestinationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "group":
		fallthrough
	case "store":
		fallthrough
	case "tester":
		*e = StoreReleasesList200ApplicationJSONDestinationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoreReleasesList200ApplicationJSONDestinationTypeEnum: %s", s)
	}
}

// StoreReleasesList200ApplicationJSONDistributionStoresTypeEnum - A type identifying the type of distribution store.
type StoreReleasesList200ApplicationJSONDistributionStoresTypeEnum string

const (
	StoreReleasesList200ApplicationJSONDistributionStoresTypeEnumGoogleplay StoreReleasesList200ApplicationJSONDistributionStoresTypeEnum = "googleplay"
	StoreReleasesList200ApplicationJSONDistributionStoresTypeEnumIntune     StoreReleasesList200ApplicationJSONDistributionStoresTypeEnum = "intune"
	StoreReleasesList200ApplicationJSONDistributionStoresTypeEnumApple      StoreReleasesList200ApplicationJSONDistributionStoresTypeEnum = "apple"
)

func (e *StoreReleasesList200ApplicationJSONDistributionStoresTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "googleplay":
		fallthrough
	case "intune":
		fallthrough
	case "apple":
		*e = StoreReleasesList200ApplicationJSONDistributionStoresTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoreReleasesList200ApplicationJSONDistributionStoresTypeEnum: %s", s)
	}
}

type StoreReleasesList200ApplicationJSONDistributionStores struct {
	// ID identifying a unique distribution store.
	ID *string `json:"id,omitempty"`
	// Is the containing release the latest one in this distribution store.
	IsLatest *bool `json:"is_latest,omitempty"`
	// A name identifying a unique distribution store.
	Name *string `json:"name,omitempty"`
	// A status identifying the status of release in the distribution store.
	PublishingStatus *string `json:"publishing_status,omitempty"`
	// A type identifying the type of distribution store.
	Type *StoreReleasesList200ApplicationJSONDistributionStoresTypeEnum `json:"type,omitempty"`
}

// StoreReleasesList200ApplicationJSON - Basic information on a release
type StoreReleasesList200ApplicationJSON struct {
	// Destination for this release.
	DestinationType *StoreReleasesList200ApplicationJSONDestinationTypeEnum `json:"destination_type,omitempty"`
	// a list of distribution stores that are associated with this release.
	DistributionStores []StoreReleasesList200ApplicationJSONDistributionStores `json:"distribution_stores,omitempty"`
	// ID identifying this unique release.
	ID *float64 `json:"id,omitempty"`
	// The release's short version.
	// For iOS: CFBundleShortVersionString from info.plist.
	// For Android: android:versionName from AppManifest.xml.
	//
	ShortVersion *string `json:"short_version,omitempty"`
	// UTC time in ISO 8601 format of the uploaded time.
	UploadedAt *string `json:"uploaded_at,omitempty"`
	// The release's version.
	// For iOS: CFBundleVersion from info.plist.
	// For Android: android:versionCode from AppManifest.xml.
	//
	Version *string `json:"version,omitempty"`
}

type StoreReleasesListResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	StoreReleasesList200ApplicationJSONObjects []StoreReleasesList200ApplicationJSON
	// Error
	StoreReleasesListDefaultApplicationJSONObject *StoreReleasesListDefaultApplicationJSON
}
