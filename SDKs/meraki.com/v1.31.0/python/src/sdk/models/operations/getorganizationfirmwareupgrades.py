"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetOrganizationFirmwareUpgradesRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    product_type: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'productType', 'style': 'form', 'explode': False }})
    r"""The product type in a given upgrade ID"""  
    status: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': False }})
    r"""The status of an upgrade"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationFirmwareUpgrades200ApplicationJSONFromVersion:
    r"""ID of the upgrade's starting version"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version ID"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationFirmwareUpgrades200ApplicationJSONNetwork:
    r"""Network of the upgrade"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of network"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The network"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationFirmwareUpgrades200ApplicationJSONToVersion:
    r"""ID of the upgrade's target version"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version ID"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationFirmwareUpgrades200ApplicationJSON:
    
    completed_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completedAt'), 'exclude': lambda f: f is None }})
    r"""Timestamp when upgrade completed. Null if status pending."""  
    from_version: Optional[GetOrganizationFirmwareUpgrades200ApplicationJSONFromVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromVersion'), 'exclude': lambda f: f is None }})
    r"""ID of the upgrade's starting version"""  
    network: Optional[GetOrganizationFirmwareUpgrades200ApplicationJSONNetwork] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""Network of the upgrade"""  
    product_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productType'), 'exclude': lambda f: f is None }})
    r"""product upgraded [wireless, appliance, switch, systemsManager, camera, cellularGateway, sensor]"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of upgrade event: [Cancelled, Completed]"""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Scheduled start time"""  
    to_version: Optional[GetOrganizationFirmwareUpgrades200ApplicationJSONToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""ID of the upgrade's target version"""  
    upgrade_batch_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeBatchId'), 'exclude': lambda f: f is None }})
    r"""The upgrade batch"""  
    upgrade_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeId'), 'exclude': lambda f: f is None }})
    r"""The upgrade"""  
    

@dataclasses.dataclass
class GetOrganizationFirmwareUpgradesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_organization_firmware_upgrades_200_application_json_objects: Optional[list[GetOrganizationFirmwareUpgrades200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    