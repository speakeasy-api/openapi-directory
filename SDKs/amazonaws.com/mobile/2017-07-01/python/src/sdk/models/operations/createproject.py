"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import badrequestexception as shared_badrequestexception
from ..shared import createprojectresult as shared_createprojectresult
from ..shared import internalfailureexception as shared_internalfailureexception
from ..shared import limitexceededexception as shared_limitexceededexception
from ..shared import notfoundexception as shared_notfoundexception
from ..shared import serviceunavailableexception as shared_serviceunavailableexception
from ..shared import toomanyrequestsexception as shared_toomanyrequestsexception
from ..shared import unauthorizedexception as shared_unauthorizedexception
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateProjectRequestBody:
    
    contents: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contents'), 'exclude': lambda f: f is None }})
    r"""Binary file data."""  
    

@dataclasses.dataclass
class CreateProjectRequest:
    
    request_body: CreateProjectRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Name of the project."""  
    region: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'region', 'style': 'form', 'explode': True }})
    r"""Default region where project resources should be created."""  
    snapshot_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'snapshotId', 'style': 'form', 'explode': True }})
    r"""Unique identifier for an exported snapshot of project configuration. This snapshot identifier is included in the share URL when a project is exported."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateProjectResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request_exception: Optional[shared_badrequestexception.BadRequestException] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    create_project_result: Optional[shared_createprojectresult.CreateProjectResult] = dataclasses.field(default=None)
    r"""Success"""  
    internal_failure_exception: Optional[shared_internalfailureexception.InternalFailureException] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    limit_exceeded_exception: Optional[shared_limitexceededexception.LimitExceededException] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    not_found_exception: Optional[shared_notfoundexception.NotFoundException] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_unavailable_exception: Optional[shared_serviceunavailableexception.ServiceUnavailableException] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    too_many_requests_exception: Optional[shared_toomanyrequestsexception.TooManyRequestsException] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    unauthorized_exception: Optional[shared_unauthorizedexception.UnauthorizedException] = dataclasses.field(default=None)
    r"""UnauthorizedException"""  
    