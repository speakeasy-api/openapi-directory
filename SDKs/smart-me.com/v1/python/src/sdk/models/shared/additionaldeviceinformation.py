"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdditionalDeviceInformation:
    r"""Additional Information For a device"""
    
    additional_meter_serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalMeterSerialNumber'), 'exclude': lambda f: f is None }})
    r"""An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to."""  
    firmware_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirmwareVersion'), 'exclude': lambda f: f is None }})
    r"""The Firmware Version of a Meter"""  
    hardware_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HardwareVersion'), 'exclude': lambda f: f is None }})
    r"""The Hardware Version of a Meter."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ID'), 'exclude': lambda f: f is None }})
    r"""The ID of the device"""  
    network_connection: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkConnection'), 'exclude': lambda f: f is None }})
    r"""The mode how the device is connected to the network. Valid values are:
                wifi, gprs, ltecatm1, ltenbiot, meshmobile, meshwifi
    """  
    network_connection_rssi: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkConnectionRSSI'), 'exclude': lambda f: f is None }})
    r"""The connection RSSI value (0 is bad, 100 is best)"""  
    