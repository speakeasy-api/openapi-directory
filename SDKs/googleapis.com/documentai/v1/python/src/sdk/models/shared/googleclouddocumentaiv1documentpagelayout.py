"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddocumentaiv1boundingpoly as shared_googleclouddocumentaiv1boundingpoly
from ..shared import googleclouddocumentaiv1documenttextanchor as shared_googleclouddocumentaiv1documenttextanchor
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudDocumentaiV1DocumentPageLayoutOrientationEnum(str, Enum):
    r"""Detected orientation for the Layout."""
    ORIENTATION_UNSPECIFIED = 'ORIENTATION_UNSPECIFIED'
    PAGE_UP = 'PAGE_UP'
    PAGE_RIGHT = 'PAGE_RIGHT'
    PAGE_DOWN = 'PAGE_DOWN'
    PAGE_LEFT = 'PAGE_LEFT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDocumentaiV1DocumentPageLayout:
    r"""Visual element describing a layout unit on a page."""
    
    bounding_poly: Optional[shared_googleclouddocumentaiv1boundingpoly.GoogleCloudDocumentaiV1BoundingPoly] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('boundingPoly'), 'exclude': lambda f: f is None }})
    r"""A bounding polygon for the detected image annotation."""  
    confidence: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidence'), 'exclude': lambda f: f is None }})
    r"""Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`."""  
    orientation: Optional[GoogleCloudDocumentaiV1DocumentPageLayoutOrientationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orientation'), 'exclude': lambda f: f is None }})
    r"""Detected orientation for the Layout."""  
    text_anchor: Optional[shared_googleclouddocumentaiv1documenttextanchor.GoogleCloudDocumentaiV1DocumentTextAnchor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textAnchor'), 'exclude': lambda f: f is None }})
    r"""Text reference indexing into the Document.text."""  
    