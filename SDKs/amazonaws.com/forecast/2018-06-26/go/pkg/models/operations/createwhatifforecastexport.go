// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateWhatIfForecastExportXAmzTargetEnum
type CreateWhatIfForecastExportXAmzTargetEnum string

const (
	CreateWhatIfForecastExportXAmzTargetEnumAmazonForecastCreateWhatIfForecastExport CreateWhatIfForecastExportXAmzTargetEnum = "AmazonForecast.CreateWhatIfForecastExport"
)

func (e CreateWhatIfForecastExportXAmzTargetEnum) ToPointer() *CreateWhatIfForecastExportXAmzTargetEnum {
	return &e
}

func (e *CreateWhatIfForecastExportXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonForecast.CreateWhatIfForecastExport":
		*e = CreateWhatIfForecastExportXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWhatIfForecastExportXAmzTargetEnum: %v", v)
	}
}

type CreateWhatIfForecastExportRequest struct {
	CreateWhatIfForecastExportRequest shared.CreateWhatIfForecastExportRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                     *string                                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                 *string                                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                    *string                                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                          *string                                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                 *string                                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                     *string                                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                 *string                                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                        CreateWhatIfForecastExportXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateWhatIfForecastExportResponse struct {
	ContentType string
	// Success
	CreateWhatIfForecastExportResponse *shared.CreateWhatIfForecastExportResponse
	// InvalidInputException
	InvalidInputException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
}
