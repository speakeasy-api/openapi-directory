"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Deployments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def deploymentmanager_deployments_cancel_preview(self, request: operations.DeploymentmanagerDeploymentsCancelPreviewRequest, security: operations.DeploymentmanagerDeploymentsCancelPreviewSecurity) -> operations.DeploymentmanagerDeploymentsCancelPreviewResponse:
        r"""Cancels and removes the preview currently associated with the deployment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerDeploymentsCancelPreviewRequest, base_url, '/deploymentmanager/v2/projects/{project}/global/deployments/{deployment}/cancelPreview', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "deployments_cancel_preview_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DeploymentmanagerDeploymentsCancelPreviewRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerDeploymentsCancelPreviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def deploymentmanager_deployments_delete(self, request: operations.DeploymentmanagerDeploymentsDeleteRequest, security: operations.DeploymentmanagerDeploymentsDeleteSecurity) -> operations.DeploymentmanagerDeploymentsDeleteResponse:
        r"""Deletes a deployment and all of the resources in the deployment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerDeploymentsDeleteRequest, base_url, '/deploymentmanager/v2/projects/{project}/global/deployments/{deployment}', request)
        
        query_params = utils.get_query_params(operations.DeploymentmanagerDeploymentsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerDeploymentsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def deploymentmanager_deployments_get(self, request: operations.DeploymentmanagerDeploymentsGetRequest, security: operations.DeploymentmanagerDeploymentsGetSecurity) -> operations.DeploymentmanagerDeploymentsGetResponse:
        r"""Gets information about a specific deployment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerDeploymentsGetRequest, base_url, '/deploymentmanager/v2/projects/{project}/global/deployments/{deployment}', request)
        
        query_params = utils.get_query_params(operations.DeploymentmanagerDeploymentsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerDeploymentsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Deployment])
                res.deployment = out

        return res

    def deploymentmanager_deployments_get_iam_policy(self, request: operations.DeploymentmanagerDeploymentsGetIamPolicyRequest, security: operations.DeploymentmanagerDeploymentsGetIamPolicySecurity) -> operations.DeploymentmanagerDeploymentsGetIamPolicyResponse:
        r"""Gets the access control policy for a resource. May be empty if no such policy or resource exists."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerDeploymentsGetIamPolicyRequest, base_url, '/deploymentmanager/v2/projects/{project}/global/deployments/{resource}/getIamPolicy', request)
        
        query_params = utils.get_query_params(operations.DeploymentmanagerDeploymentsGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerDeploymentsGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def deploymentmanager_deployments_insert(self, request: operations.DeploymentmanagerDeploymentsInsertRequest, security: operations.DeploymentmanagerDeploymentsInsertSecurity) -> operations.DeploymentmanagerDeploymentsInsertResponse:
        r"""Creates a deployment and all of the resources described by the deployment manifest."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerDeploymentsInsertRequest, base_url, '/deploymentmanager/v2/projects/{project}/global/deployments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "deployment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DeploymentmanagerDeploymentsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerDeploymentsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def deploymentmanager_deployments_list(self, request: operations.DeploymentmanagerDeploymentsListRequest, security: operations.DeploymentmanagerDeploymentsListSecurity) -> operations.DeploymentmanagerDeploymentsListResponse:
        r"""Lists all deployments for a given project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerDeploymentsListRequest, base_url, '/deploymentmanager/v2/projects/{project}/global/deployments', request)
        
        query_params = utils.get_query_params(operations.DeploymentmanagerDeploymentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerDeploymentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeploymentsListResponse])
                res.deployments_list_response = out

        return res

    def deploymentmanager_deployments_patch(self, request: operations.DeploymentmanagerDeploymentsPatchRequest, security: operations.DeploymentmanagerDeploymentsPatchSecurity) -> operations.DeploymentmanagerDeploymentsPatchResponse:
        r"""Patches a deployment and all of the resources described by the deployment manifest."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerDeploymentsPatchRequest, base_url, '/deploymentmanager/v2/projects/{project}/global/deployments/{deployment}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "deployment1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DeploymentmanagerDeploymentsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerDeploymentsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def deploymentmanager_deployments_set_iam_policy(self, request: operations.DeploymentmanagerDeploymentsSetIamPolicyRequest, security: operations.DeploymentmanagerDeploymentsSetIamPolicySecurity) -> operations.DeploymentmanagerDeploymentsSetIamPolicyResponse:
        r"""Sets the access control policy on the specified resource. Replaces any existing policy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerDeploymentsSetIamPolicyRequest, base_url, '/deploymentmanager/v2/projects/{project}/global/deployments/{resource}/setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "global_set_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DeploymentmanagerDeploymentsSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerDeploymentsSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def deploymentmanager_deployments_stop(self, request: operations.DeploymentmanagerDeploymentsStopRequest, security: operations.DeploymentmanagerDeploymentsStopSecurity) -> operations.DeploymentmanagerDeploymentsStopResponse:
        r"""Stops an ongoing operation. This does not roll back any work that has already been completed, but prevents any new work from being started."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerDeploymentsStopRequest, base_url, '/deploymentmanager/v2/projects/{project}/global/deployments/{deployment}/stop', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "deployments_stop_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DeploymentmanagerDeploymentsStopRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerDeploymentsStopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def deploymentmanager_deployments_test_iam_permissions(self, request: operations.DeploymentmanagerDeploymentsTestIamPermissionsRequest, security: operations.DeploymentmanagerDeploymentsTestIamPermissionsSecurity) -> operations.DeploymentmanagerDeploymentsTestIamPermissionsResponse:
        r"""Returns permissions that a caller has on the specified resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerDeploymentsTestIamPermissionsRequest, base_url, '/deploymentmanager/v2/projects/{project}/global/deployments/{resource}/testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DeploymentmanagerDeploymentsTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerDeploymentsTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestPermissionsResponse])
                res.test_permissions_response = out

        return res

    def deploymentmanager_deployments_update(self, request: operations.DeploymentmanagerDeploymentsUpdateRequest, security: operations.DeploymentmanagerDeploymentsUpdateSecurity) -> operations.DeploymentmanagerDeploymentsUpdateResponse:
        r"""Updates a deployment and all of the resources described by the deployment manifest."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerDeploymentsUpdateRequest, base_url, '/deploymentmanager/v2/projects/{project}/global/deployments/{deployment}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "deployment1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DeploymentmanagerDeploymentsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerDeploymentsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    