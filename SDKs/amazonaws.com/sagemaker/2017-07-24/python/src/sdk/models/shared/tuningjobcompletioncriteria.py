"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import bestobjectivenotimproving as shared_bestobjectivenotimproving
from ..shared import convergencedetected as shared_convergencedetected
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TuningJobCompletionCriteria:
    r"""The job completion criteria."""
    
    best_objective_not_improving: Optional[shared_bestobjectivenotimproving.BestObjectiveNotImproving] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BestObjectiveNotImproving'), 'exclude': lambda f: f is None }})  
    convergence_detected: Optional[shared_convergencedetected.ConvergenceDetected] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConvergenceDetected'), 'exclude': lambda f: f is None }})  
    target_objective_metric_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetObjectiveMetricValue'), 'exclude': lambda f: f is None }})  
    