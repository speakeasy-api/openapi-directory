// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PaymentV3StatusEnum string

const (
	PaymentV3StatusEnumSubmitted     PaymentV3StatusEnum = "SUBMITTED"
	PaymentV3StatusEnumAccepted      PaymentV3StatusEnum = "ACCEPTED"
	PaymentV3StatusEnumRejected      PaymentV3StatusEnum = "REJECTED"
	PaymentV3StatusEnumWithdrawn     PaymentV3StatusEnum = "WITHDRAWN"
	PaymentV3StatusEnumReturned      PaymentV3StatusEnum = "RETURNED"
	PaymentV3StatusEnumAwaitingFunds PaymentV3StatusEnum = "AWAITING_FUNDS"
	PaymentV3StatusEnumFunded        PaymentV3StatusEnum = "FUNDED"
	PaymentV3StatusEnumUnfunded      PaymentV3StatusEnum = "UNFUNDED"
	PaymentV3StatusEnumCancelled     PaymentV3StatusEnum = "CANCELLED"
	PaymentV3StatusEnumRequested     PaymentV3StatusEnum = "REQUESTED"
)

func (e *PaymentV3StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SUBMITTED":
		fallthrough
	case "ACCEPTED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "WITHDRAWN":
		fallthrough
	case "RETURNED":
		fallthrough
	case "AWAITING_FUNDS":
		fallthrough
	case "FUNDED":
		fallthrough
	case "UNFUNDED":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "REQUESTED":
		*e = PaymentV3StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentV3StatusEnum: %s", s)
	}
}

type PaymentV3 struct {
	Amount   *int64  `json:"amount,omitempty"`
	Currency *string `json:"currency,omitempty"`
	// Payee data associated with a payment. Either individual or company must be populated
	Payee             *PayoutPayeeV3       `json:"payee,omitempty"`
	PaymentID         string               `json:"paymentId"`
	PaymentMemo       *string              `json:"paymentMemo,omitempty"`
	PaymentMetadata   *string              `json:"paymentMetadata,omitempty"`
	PayorPaymentID    *string              `json:"payorPaymentId,omitempty"`
	RemoteID          *string              `json:"remoteId,omitempty"`
	RemoteSystemID    *string              `json:"remoteSystemId,omitempty"`
	SourceAccountName *string              `json:"sourceAccountName,omitempty"`
	Status            *PaymentV3StatusEnum `json:"status,omitempty"`
	// <p>The transmission type that will be used to send a payment</p>
	// <p>If omitted, a default will be provided by the payment rails</p>
	//
	TransmissionType *TransmissionTypeEnum `json:"transmissionType,omitempty"`
	Withdrawable     *bool                 `json:"withdrawable,omitempty"`
}
