// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type FslcsSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type FslcsRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token No.
	TokenNo string `json:"TokenNo"`
}

// FslcsRequestBodyFormatEnum - The format of the certificate in response.
type FslcsRequestBodyFormatEnum string

const (
	FslcsRequestBodyFormatEnumPdf FslcsRequestBodyFormatEnum = "pdf"
)

func (e *FslcsRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = FslcsRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FslcsRequestBodyFormatEnum: %s", s)
	}
}

// FslcsRequestBody - Request format
type FslcsRequestBody struct {
	CertificateParameters *FslcsRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format FslcsRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Fslcs504ApplicationJSONErrorEnum string

const (
	Fslcs504ApplicationJSONErrorEnumGatewayTimeout Fslcs504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Fslcs504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Fslcs504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fslcs504ApplicationJSONErrorEnum: %s", s)
	}
}

type Fslcs504ApplicationJSONErrorDescriptionEnum string

const (
	Fslcs504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Fslcs504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Fslcs504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Fslcs504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fslcs504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Fslcs504ApplicationJSON - Gateway timeout
type Fslcs504ApplicationJSON struct {
	Error            *Fslcs504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fslcs504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fslcs503ApplicationJSONErrorEnum string

const (
	Fslcs503ApplicationJSONErrorEnumServiceUnavailable Fslcs503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Fslcs503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Fslcs503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fslcs503ApplicationJSONErrorEnum: %s", s)
	}
}

type Fslcs503ApplicationJSONErrorDescriptionEnum string

const (
	Fslcs503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Fslcs503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Fslcs503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Fslcs503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fslcs503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Fslcs503ApplicationJSON - Service unavailable
type Fslcs503ApplicationJSON struct {
	Error            *Fslcs503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fslcs503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fslcs502ApplicationJSONErrorEnum string

const (
	Fslcs502ApplicationJSONErrorEnumBadGatewy Fslcs502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Fslcs502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Fslcs502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fslcs502ApplicationJSONErrorEnum: %s", s)
	}
}

type Fslcs502ApplicationJSONErrorDescriptionEnum string

const (
	Fslcs502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Fslcs502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Fslcs502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Fslcs502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fslcs502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Fslcs502ApplicationJSON - Bad gateway
type Fslcs502ApplicationJSON struct {
	Error            *Fslcs502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fslcs502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fslcs500ApplicationJSONErrorEnum string

const (
	Fslcs500ApplicationJSONErrorEnumInternalServerError Fslcs500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Fslcs500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Fslcs500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fslcs500ApplicationJSONErrorEnum: %s", s)
	}
}

type Fslcs500ApplicationJSONErrorDescriptionEnum string

const (
	Fslcs500ApplicationJSONErrorDescriptionEnumInternalServerError Fslcs500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Fslcs500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Fslcs500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fslcs500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Fslcs500ApplicationJSON - Internal server error
type Fslcs500ApplicationJSON struct {
	Error            *Fslcs500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fslcs500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fslcs404ApplicationJSONErrorEnum string

const (
	Fslcs404ApplicationJSONErrorEnumRecordNotFound Fslcs404ApplicationJSONErrorEnum = "record_not_found"
	Fslcs404ApplicationJSONErrorEnumURLNotFound    Fslcs404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Fslcs404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Fslcs404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fslcs404ApplicationJSONErrorEnum: %s", s)
	}
}

type Fslcs404ApplicationJSONErrorDescriptionEnum string

const (
	Fslcs404ApplicationJSONErrorDescriptionEnumNoRecordFound               Fslcs404ApplicationJSONErrorDescriptionEnum = "No record found"
	Fslcs404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Fslcs404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Fslcs404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Fslcs404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fslcs404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Fslcs404ApplicationJSON - No record found
type Fslcs404ApplicationJSON struct {
	Error            *Fslcs404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fslcs404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fslcs401ApplicationJSONErrorEnum string

const (
	Fslcs401ApplicationJSONErrorEnumInvalidAuthentication Fslcs401ApplicationJSONErrorEnum = "invalid_authentication"
	Fslcs401ApplicationJSONErrorEnumInvalidAuthorization  Fslcs401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Fslcs401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Fslcs401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fslcs401ApplicationJSONErrorEnum: %s", s)
	}
}

type Fslcs401ApplicationJSONErrorDescriptionEnum string

const (
	Fslcs401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Fslcs401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Fslcs401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Fslcs401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Fslcs401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Fslcs401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fslcs401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Fslcs401ApplicationJSON - Unauthorized access
type Fslcs401ApplicationJSON struct {
	Error            *Fslcs401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fslcs401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fslcs400ApplicationJSONErrorEnum string

const (
	Fslcs400ApplicationJSONErrorEnumMissingParameter Fslcs400ApplicationJSONErrorEnum = "missing_parameter"
	Fslcs400ApplicationJSONErrorEnumInvalidParameter Fslcs400ApplicationJSONErrorEnum = "invalid_parameter"
	Fslcs400ApplicationJSONErrorEnumInvalidFormat    Fslcs400ApplicationJSONErrorEnum = "invalid_format"
	Fslcs400ApplicationJSONErrorEnumInvalidTxnid     Fslcs400ApplicationJSONErrorEnum = "invalid_txnid"
	Fslcs400ApplicationJSONErrorEnumInvalidConsentid Fslcs400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Fslcs400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Fslcs400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fslcs400ApplicationJSONErrorEnum: %s", s)
	}
}

type Fslcs400ApplicationJSONErrorDescriptionEnum string

const (
	Fslcs400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Fslcs400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Fslcs400ApplicationJSONErrorDescriptionEnumBadRequest                              Fslcs400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Fslcs400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Fslcs400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Fslcs400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Fslcs400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Fslcs400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Fslcs400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Fslcs400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Fslcs400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fslcs400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Fslcs400ApplicationJSON - Bad request
type Fslcs400ApplicationJSON struct {
	Error            *Fslcs400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fslcs400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type FslcsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Fslcs400ApplicationJSONObject *Fslcs400ApplicationJSON
	// Unauthorized access
	Fslcs401ApplicationJSONObject *Fslcs401ApplicationJSON
	// No record found
	Fslcs404ApplicationJSONObject *Fslcs404ApplicationJSON
	// Internal server error
	Fslcs500ApplicationJSONObject *Fslcs500ApplicationJSON
	// Bad gateway
	Fslcs502ApplicationJSONObject *Fslcs502ApplicationJSON
	// Service unavailable
	Fslcs503ApplicationJSONObject *Fslcs503ApplicationJSON
	// Gateway timeout
	Fslcs504ApplicationJSONObject *Fslcs504ApplicationJSON
}
