"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import address as shared_address
from typing import Any, Optional


@dataclasses.dataclass
class CreateClientAddressRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    profile_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'profileId', 'style': 'simple', 'explode': False }})
    r"""ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter."""  
    address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    alternative_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alternativeKey', 'style': 'form', 'explode': True }})
    r"""The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
    
    
    > Currently, there are two possible values for this parameter: `email` and `document`.
    """  
    

@dataclasses.dataclass
class CreateClientAddressResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_client_address_201_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    