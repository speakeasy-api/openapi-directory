"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from datetime import datetime
from typing import Any, Optional


@dataclasses.dataclass
class RegistrationsCitationsListRequest:
    
    registration_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'registration_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the registration."""  
    

@dataclasses.dataclass
class RegistrationsCitationsListCitationStyleAttributes:
    r"""The properties of the citation style entity."""
    
    date_parsed: datetime = dataclasses.field()
    r"""The time at which the citation style was first parsed, as an iso8601 formatted timestamp."""  
    title: str = dataclasses.field()
    r"""The official name of the citation style."""  
    short_title: Optional[str] = dataclasses.field(default=None)
    r"""The short name for the citation style."""  
    summary: Optional[str] = dataclasses.field(default=None)
    r"""The summary of the citation style."""  
    

@dataclasses.dataclass
class RegistrationsCitationsListCitationStyle:
    
    attributes: RegistrationsCitationsListCitationStyleAttributes = dataclasses.field()
    r"""The properties of the citation style entity."""  
    id: str = dataclasses.field()
    r"""The identifier of the citation style, e.g. APA."""  
    type: str = dataclasses.field()
    r"""The type identifier of the citation style entity (`citation-styles`)."""  
    links: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""URLs to alternative representations of the citation style entity."""  
    

@dataclasses.dataclass
class RegistrationsCitationsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    