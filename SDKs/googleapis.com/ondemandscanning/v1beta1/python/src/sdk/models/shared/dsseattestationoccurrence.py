"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import envelope as shared_envelope
from ..shared import intotostatement as shared_intotostatement
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DSSEAttestationOccurrence:
    r"""Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence."""
    
    envelope: Optional[shared_envelope.Envelope] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('envelope'), 'exclude': lambda f: f is None }})
    r"""MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type."""  
    statement: Optional[shared_intotostatement.InTotoStatement] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statement'), 'exclude': lambda f: f is None }})
    r"""Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always \\"application/vnd.in-toto+json\\"."""  
    