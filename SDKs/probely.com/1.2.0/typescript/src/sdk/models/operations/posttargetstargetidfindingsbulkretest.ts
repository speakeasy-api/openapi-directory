/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class PostTargetsTargetIdFindingsBulkRetestRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  findingBulkRetest: shared.FindingBulkRetest;

  /**
   * Target id
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=target_id",
  })
  targetId: string;
}

/**
 * Not found
 */
export class PostTargetsTargetIdFindingsBulkRetest404ApplicationJSON extends SpeakeasyBase {
  /**
   * Not found.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detail" })
  detail?: string;
}

/**
 * Access token is missing or invalid
 */
export class PostTargetsTargetIdFindingsBulkRetest401ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "detail" })
  detail?: string;
}

/**
 * Bad Request
 */
export class PostTargetsTargetIdFindingsBulkRetest400ApplicationJSON extends SpeakeasyBase {
  /**
   * Error message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: string;
}

export class PostTargetsTargetIdFindingsBulkRetestResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Bad Request
   */
  @SpeakeasyMetadata()
  postTargetsTargetIdFindingsBulkRetest400ApplicationJSONObject?: PostTargetsTargetIdFindingsBulkRetest400ApplicationJSON;

  /**
   * Access token is missing or invalid
   */
  @SpeakeasyMetadata()
  postTargetsTargetIdFindingsBulkRetest401ApplicationJSONObject?: PostTargetsTargetIdFindingsBulkRetest401ApplicationJSON;

  /**
   * Not found
   */
  @SpeakeasyMetadata()
  postTargetsTargetIdFindingsBulkRetest404ApplicationJSONObject?: PostTargetsTargetIdFindingsBulkRetest404ApplicationJSON;
}
