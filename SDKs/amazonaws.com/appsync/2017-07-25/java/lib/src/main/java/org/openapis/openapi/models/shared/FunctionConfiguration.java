/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FunctionConfiguration - A function is a reusable entity. You can use multiple functions to compose the resolver logic.
 */
public class FunctionConfiguration {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public String code;
    public FunctionConfiguration withCode(String code) {
        this.code = code;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSourceName")
    public String dataSourceName;
    public FunctionConfiguration withDataSourceName(String dataSourceName) {
        this.dataSourceName = dataSourceName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public FunctionConfiguration withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("functionArn")
    public String functionArn;
    public FunctionConfiguration withFunctionArn(String functionArn) {
        this.functionArn = functionArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("functionId")
    public String functionId;
    public FunctionConfiguration withFunctionId(String functionId) {
        this.functionId = functionId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("functionVersion")
    public String functionVersion;
    public FunctionConfiguration withFunctionVersion(String functionVersion) {
        this.functionVersion = functionVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxBatchSize")
    public Long maxBatchSize;
    public FunctionConfiguration withMaxBatchSize(Long maxBatchSize) {
        this.maxBatchSize = maxBatchSize;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public FunctionConfiguration withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestMappingTemplate")
    public String requestMappingTemplate;
    public FunctionConfiguration withRequestMappingTemplate(String requestMappingTemplate) {
        this.requestMappingTemplate = requestMappingTemplate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseMappingTemplate")
    public String responseMappingTemplate;
    public FunctionConfiguration withResponseMappingTemplate(String responseMappingTemplate) {
        this.responseMappingTemplate = responseMappingTemplate;
        return this;
    }
    
    /**
     * Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtime")
    public AppSyncRuntime runtime;
    public FunctionConfiguration withRuntime(AppSyncRuntime runtime) {
        this.runtime = runtime;
        return this;
    }
    
    /**
     * &lt;p&gt;Describes a Sync configuration for a resolver.&lt;/p&gt; &lt;p&gt;Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncConfig")
    public SyncConfig syncConfig;
    public FunctionConfiguration withSyncConfig(SyncConfig syncConfig) {
        this.syncConfig = syncConfig;
        return this;
    }
    
}
