"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class ErrorsErrorDownloadSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    
class ErrorsErrorDownloadFormatEnum(str, Enum):
    r"""the format of the crash log"""
    JSON = 'json'
    TXT = 'txt'


@dataclasses.dataclass
class ErrorsErrorDownloadRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    error_group_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'errorGroupId', 'style': 'simple', 'explode': False }})
    r"""The id of the error group"""  
    error_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'errorId', 'style': 'simple', 'explode': False }})
    r"""The id of the error"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    format: Optional[ErrorsErrorDownloadFormatEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'format', 'style': 'form', 'explode': True }})
    r"""the format of the crash log"""  
    
class ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsErrorDownloadDefaultApplicationJSONError:
    
    code: ErrorsErrorDownloadDefaultApplicationJSONErrorCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsErrorDownloadDefaultApplicationJSON:
    r"""Error code with reason"""
    
    error: ErrorsErrorDownloadDefaultApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})  
    

@dataclasses.dataclass
class ErrorsErrorDownloadResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    errors_error_download_200_application_json_file_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Error details."""  
    errors_error_download_default_application_json_object: Optional[ErrorsErrorDownloadDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error code with reason"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    