/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Job - Job represents an operation for a `Rollout`.
 */
public class Job {
    /**
     * An advanceChildRollout Job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advanceChildRolloutJob")
    public java.util.Map<String, Object> advanceChildRolloutJob;

    public Job withAdvanceChildRolloutJob(java.util.Map<String, Object> advanceChildRolloutJob) {
        this.advanceChildRolloutJob = advanceChildRolloutJob;
        return this;
    }
    
    /**
     * A createChildRollout Job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createChildRolloutJob")
    public java.util.Map<String, Object> createChildRolloutJob;

    public Job withCreateChildRolloutJob(java.util.Map<String, Object> createChildRolloutJob) {
        this.createChildRolloutJob = createChildRolloutJob;
        return this;
    }
    
    /**
     * A deploy Job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deployJob")
    public java.util.Map<String, Object> deployJob;

    public Job withDeployJob(java.util.Map<String, Object> deployJob) {
        this.deployJob = deployJob;
        return this;
    }
    
    /**
     * Output only. The ID of the Job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Job withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Output only. The name of the `JobRun` responsible for the most recent invocation of this Job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobRun")
    public String jobRun;

    public Job withJobRun(String jobRun) {
        this.jobRun = jobRun;
        return this;
    }
    
    /**
     * Output only. Additional information on why the Job was skipped, if available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skipMessage")
    public String skipMessage;

    public Job withSkipMessage(String skipMessage) {
        this.skipMessage = skipMessage;
        return this;
    }
    
    /**
     * Output only. The current state of the Job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public JobStateEnum state;

    public Job withState(JobStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * A verify Job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verifyJob")
    public java.util.Map<String, Object> verifyJob;

    public Job withVerifyJob(java.util.Map<String, Object> verifyJob) {
        this.verifyJob = verifyJob;
        return this;
    }
    
    public Job(){}
}
