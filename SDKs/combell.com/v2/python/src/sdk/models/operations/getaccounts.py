"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import account as shared_account
from ..shared import assettype_enum as shared_assettype_enum
from typing import Optional


@dataclasses.dataclass
class GetAccountsRequest:
    
    asset_type: Optional[shared_assettype_enum.AssetTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'asset_type', 'style': 'form', 'explode': True }})
    r"""Filters the list, returning only accounts containing the specified asset type."""  
    identifier: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'identifier', 'style': 'form', 'explode': True }})
    r"""Return only accounts, matching the specified identifier."""  
    skip: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'skip', 'style': 'form', 'explode': True }})
    r"""The number of items to skip in the resultset."""  
    take: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'take', 'style': 'form', 'explode': True }})
    r"""The number of items to return in the resultset. The returned count can be equal or less than this number."""  
    

@dataclasses.dataclass
class GetAccountsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    accounts: Optional[list[shared_account.Account]] = dataclasses.field(default=None)
    r"""Success"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    