/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * Object representing flags that potentialy modify this transaction
 */
export class SendTokenRequestFlags extends SpeakeasyBase {
  /**
   * If true change will be split into 2 outputs, one for NEBL change and one for NTP1 change (recommended)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "splitChange" })
  splitChange?: boolean;
}

export class SendTokenRequestMetadataEncryptions extends SpeakeasyBase {
  /**
   * key format (pem or der)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format?: string;

  /**
   * userData key to encrypt
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * RSA public key used for encryption
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pubkey" })
  pubkey?: string;

  /**
   * pkcs1 or pkcs8
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

/**
 * Object describing expiration rules of the token
 */
export class SendTokenRequestMetadataRulesExpiration extends SpeakeasyBase {
  /**
   * Whether this rule can be modified in future transactions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locked" })
  locked?: boolean;

  /**
   * Blockheight at wh
   */
  @SpeakeasyMetadata()
  @Expose({ name: "validUntil" })
  validUntil?: number;
}

export class SendTokenRequestMetadataRulesFeesItems extends SpeakeasyBase {
  /**
   * Address fee is auto sent to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address?: string;

  /**
   * How fee should be paid, either with a tokenId, or with NEBL if null
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tokenId" })
  tokenId?: string;

  /**
   * Amount of NTP1 token, or NEBL (in satoshi) to pay as fee
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

export class SendTokenRequestMetadataRulesFees extends SpeakeasyBase {
  /**
   * Array of objects describing fee rules
   */
  @SpeakeasyMetadata({ elemType: SendTokenRequestMetadataRulesFeesItems })
  @Expose({ name: "items" })
  @Type(() => SendTokenRequestMetadataRulesFeesItems)
  items?: SendTokenRequestMetadataRulesFeesItems[];

  /**
   * Whether this rule can be modified in future transactions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locked" })
  locked?: boolean;
}

export class SendTokenRequestMetadataRulesHolders extends SpeakeasyBase {
  /**
   * Address that can hold the token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address?: string;

  /**
   * Whether this rule can be modified in future transactions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locked" })
  locked?: boolean;
}

/**
 * Object describing token rules
 */
export class SendTokenRequestMetadataRules extends SpeakeasyBase {
  /**
   * Object describing expiration rules of the token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration" })
  @Type(() => SendTokenRequestMetadataRulesExpiration)
  expiration?: SendTokenRequestMetadataRulesExpiration;

  @SpeakeasyMetadata()
  @Expose({ name: "fees" })
  @Type(() => SendTokenRequestMetadataRulesFees)
  fees?: SendTokenRequestMetadataRulesFees;

  /**
   * Array of objects describing what addresses can hold the token
   */
  @SpeakeasyMetadata({ elemType: SendTokenRequestMetadataRulesHolders })
  @Expose({ name: "holders" })
  @Type(() => SendTokenRequestMetadataRulesHolders)
  holders?: SendTokenRequestMetadataRulesHolders[];
}

export class SendTokenRequestMetadataUrls extends SpeakeasyBase {
  /**
   * Hash of data at the URL, used for verification
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataHash" })
  dataHash?: string;

  /**
   * mimeType of URL content
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mimeType" })
  mimeType?: string;

  /**
   * Name of the URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Actual URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class SendTokenRequestMetadataUserDataMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * Metadata set by user on token
 */
export class SendTokenRequestMetadataUserData extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: SendTokenRequestMetadataUserDataMeta })
  @Expose({ name: "meta" })
  @Type(() => SendTokenRequestMetadataUserDataMeta)
  meta?: SendTokenRequestMetadataUserDataMeta[];
}

/**
 * Object representing all metadata at token issuance
 */
export class SendTokenRequestMetadata extends SpeakeasyBase {
  /**
   * Long name or description of token (ex. Nibble)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Array of encryption instruction objects for encrypting userData
   */
  @SpeakeasyMetadata({ elemType: SendTokenRequestMetadataEncryptions })
  @Expose({ name: "encryptions" })
  @Type(() => SendTokenRequestMetadataEncryptions)
  encryptions?: SendTokenRequestMetadataEncryptions[];

  /**
   * Name of token issuer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "issuer" })
  issuer?: string;

  /**
   * Object describing token rules
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rules" })
  @Type(() => SendTokenRequestMetadataRules)
  rules?: SendTokenRequestMetadataRules;

  /**
   * Token Symbol it will be identified by (ex. NIBBL)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tokenName" })
  tokenName?: string;

  @SpeakeasyMetadata({ elemType: SendTokenRequestMetadataUrls })
  @Expose({ name: "urls" })
  @Type(() => SendTokenRequestMetadataUrls)
  urls?: SendTokenRequestMetadataUrls[];

  /**
   * Metadata set by user on token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userData" })
  @Type(() => SendTokenRequestMetadataUserData)
  userData?: SendTokenRequestMetadataUserData;
}

export class SendTokenRequestTo extends SpeakeasyBase {
  /**
   * Address to transfer tokens to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address?: string;

  /**
   * Number of tokens to send
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: number;

  /**
   * ID of token we are sending
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tokenId" })
  tokenId?: string;
}

/**
 * Object representing the token to be sent
 */
export class SendTokenRequest extends SpeakeasyBase {
  /**
   * Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fee" })
  fee: number;

  /**
   * Object representing flags that potentialy modify this transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "flags" })
  @Type(() => SendTokenRequestFlags)
  flags?: SendTokenRequestFlags;

  /**
   * Array of addresses to send the token from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from?: string[];

  /**
   * Object representing all metadata at token issuance
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => SendTokenRequestMetadata)
  metadata?: SendTokenRequestMetadata;

  /**
   * Array of UTXOs to send the token from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sendutxo" })
  sendutxo?: string[];

  @SpeakeasyMetadata({ elemType: SendTokenRequestTo })
  @Expose({ name: "to" })
  @Type(() => SendTokenRequestTo)
  to: SendTokenRequestTo[];
}
