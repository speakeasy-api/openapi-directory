/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Pull request number for this codespace
 */
export class CodespacesCreateForAuthenticatedUserRequestBody2PullRequest extends SpeakeasyBase {
  /**
   * Pull request number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pull_request_number" })
  pullRequestNumber: number;

  /**
   * Repository id for this codespace
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repository_id" })
  repositoryId: number;
}

export class CodespacesCreateForAuthenticatedUserRequestBody2 extends SpeakeasyBase {
  /**
   * Path to devcontainer.json config to use for this codespace
   */
  @SpeakeasyMetadata()
  @Expose({ name: "devcontainer_path" })
  devcontainerPath?: string;

  /**
   * Time in minutes before codespace stops from inactivity
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idle_timeout_minutes" })
  idleTimeoutMinutes?: number;

  /**
   * Location for this codespace. Assigned by IP if not provided
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  /**
   * Machine type to use for this codespace
   */
  @SpeakeasyMetadata()
  @Expose({ name: "machine" })
  machine?: string;

  /**
   * Pull request number for this codespace
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pull_request" })
  @Type(() => CodespacesCreateForAuthenticatedUserRequestBody2PullRequest)
  pullRequest: CodespacesCreateForAuthenticatedUserRequestBody2PullRequest;

  /**
   * Working directory for this codespace
   */
  @SpeakeasyMetadata()
  @Expose({ name: "working_directory" })
  workingDirectory?: string;
}

export class CodespacesCreateForAuthenticatedUserRequestBody1 extends SpeakeasyBase {
  /**
   * IP for location auto-detection when proxying a request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ip" })
  clientIp?: string;

  /**
   * Path to devcontainer.json config to use for this codespace
   */
  @SpeakeasyMetadata()
  @Expose({ name: "devcontainer_path" })
  devcontainerPath?: string;

  /**
   * Display name for this codespace
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_name" })
  displayName?: string;

  /**
   * Time in minutes before codespace stops from inactivity
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idle_timeout_minutes" })
  idleTimeoutMinutes?: number;

  /**
   * Location for this codespace. Assigned by IP if not provided
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  /**
   * Machine type to use for this codespace
   */
  @SpeakeasyMetadata()
  @Expose({ name: "machine" })
  machine?: string;

  /**
   * Whether to authorize requested permissions from devcontainer.json
   */
  @SpeakeasyMetadata()
  @Expose({ name: "multi_repo_permissions_opt_out" })
  multiRepoPermissionsOptOut?: boolean;

  /**
   * Git ref (typically a branch name) for this codespace
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ref" })
  ref?: string;

  /**
   * Repository id for this codespace
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repository_id" })
  repositoryId: number;

  /**
   * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retention_period_minutes" })
  retentionPeriodMinutes?: number;

  /**
   * Working directory for this codespace
   */
  @SpeakeasyMetadata()
  @Expose({ name: "working_directory" })
  workingDirectory?: string;
}

/**
 * Service unavailable
 */
export class CodespacesCreateForAuthenticatedUser503ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "documentation_url" })
  documentationUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;
}

export class CodespacesCreateForAuthenticatedUserResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Requires authentication
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response when the codespace was successfully created
   */
  @SpeakeasyMetadata()
  codespace?: shared.Codespace;

  /**
   * Service unavailable
   */
  @SpeakeasyMetadata()
  codespacesCreateForAuthenticatedUser503ApplicationJSONObject?: CodespacesCreateForAuthenticatedUser503ApplicationJSON;
}
