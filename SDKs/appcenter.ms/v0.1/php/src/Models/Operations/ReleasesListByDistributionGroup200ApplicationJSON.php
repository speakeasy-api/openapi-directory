<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


/**
 * ReleasesListByDistributionGroup200ApplicationJSON - Response for getting a list of releases in a distribution group
 * 
 * @package OpenAPI\OpenAPI\Models\Operations
 * @access public
 */
class ReleasesListByDistributionGroup200ApplicationJSON
{
    /**
     * This value determines the whether a release currently is enabled or disabled.
     * 
     * @var bool $enabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('enabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $enabled;
    
    /**
     * ID identifying this unique release.
     * 
     * @var int $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $id;
    
    /**
     * This value determines if a release is external or not.
     * 
     * @var ?bool $isExternalBuild
     */
	#[\JMS\Serializer\Annotation\SerializedName('is_external_build')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isExternalBuild = null;
    
    /**
     * A boolean which determines whether the release is a mandatory update or not.
     * 
     * @var bool $mandatoryUpdate
     */
	#[\JMS\Serializer\Annotation\SerializedName('mandatory_update')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $mandatoryUpdate;
    
    /**
     * The release's origin
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReleasesListByDistributionGroup200ApplicationJSONOriginEnum $origin
     */
	#[\JMS\Serializer\Annotation\SerializedName('origin')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\ReleasesListByDistributionGroup200ApplicationJSONOriginEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ReleasesListByDistributionGroup200ApplicationJSONOriginEnum $origin = null;
    
    /**
     * The release's short version.<br>
     * 
     * For iOS: CFBundleShortVersionString from info.plist.<br>
     * For Android: android:versionName from AppManifest.xml.
     * 
     * 
     * @var string $shortVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('short_version')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $shortVersion;
    
    /**
     * UTC time in ISO 8601 format of the uploaded time.
     * 
     * @var string $uploadedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('uploaded_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $uploadedAt;
    
    /**
     * The release's version.<br>
     * 
     * For iOS: CFBundleVersion from info.plist.<br>
     * For Android: android:versionCode from AppManifest.xml.
     * 
     * 
     * @var string $version
     */
	#[\JMS\Serializer\Annotation\SerializedName('version')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $version;
    
	public function __construct()
	{
		$this->enabled = false;
		$this->id = 0;
		$this->isExternalBuild = null;
		$this->mandatoryUpdate = false;
		$this->origin = null;
		$this->shortVersion = "";
		$this->uploadedAt = "";
		$this->version = "";
	}
}
