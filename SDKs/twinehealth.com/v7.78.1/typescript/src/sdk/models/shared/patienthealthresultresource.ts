/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class PatientHealthResultResourceAttributesAnnotations extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

export class PatientHealthResultResourceAttributesData extends SpeakeasyBase {
  /**
   * Can be any value (number, boolean, string, object) depending on the metric type. Most values are of type number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: any;
}

export enum PatientHealthResultResourceAttributesMetricTypeEnum {
  BloodPressureSystolic = "blood_pressure_systolic",
  BloodPressureDiastolic = "blood_pressure_diastolic",
  HemoglobinA1c = "hemoglobin_a1c",
  HdlCholesterol = "hdl_cholesterol",
  LdlCholesterol = "ldl_cholesterol",
  TotalCholesterol = "total_cholesterol",
  Triglycerides = "triglycerides",
  BloodUreaNitrogen = "blood_urea_nitrogen",
  Creatinine = "creatinine",
  Hemoglobin = "hemoglobin",
  Hematocrit = "hematocrit",
  TotalSerumIron = "total_serum_iron",
  ThyroidStimulatingHormone = "thyroid_stimulating_hormone",
  FreeThyroxine = "free_thyroxine",
  FreeTriiodothyronine = "free_triiodothyronine",
  TotalTriiodothyronine = "total_triiodothyronine",
  Cd4CellCount = "cd4_cell_count",
  HivViralLoad = "hiv_viral_load",
  Inr = "inr",
  FreeTestosterone = "free_testosterone",
  TotalTestosterone = "total_testosterone",
  CReactiveProtein = "c_reactive_protein",
  ProstateSpecificAntigen = "prostate_specific_antigen",
  Cotinine = "cotinine",
  CPeptide = "c_peptide",
  BloodPressure = "blood_pressure",
  BloodGlucose = "blood_glucose",
  Weight = "weight",
  HeartRate = "heart_rate",
  BodyFatPercentage = "body_fat_percentage",
  BodyMassIndex = "body_mass_index",
  BodyTemperature = "body_temperature",
  ForcedExpiratoryVolume1 = "forced_expiratory_volume1",
  ForcedVitalCapacity = "forced_vital_capacity",
  LeanBodyMass = "lean_body_mass",
  NauseaLevel = "nausea_level",
  OxygenSaturation = "oxygen_saturation",
  PainLevel = "pain_level",
  PeakExpiratoryFlowRate = "peak_expiratory_flow_rate",
  PeripheralPerfusionIndex = "peripheral_perfusion_index",
  RespiratoryRate = "respiratory_rate",
  InhalerUsage = "inhaler_usage",
}

export class PatientHealthResultResourceAttributesSource extends SpeakeasyBase {
  /**
   * Can be any value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: any;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "source_id" })
  sourceId?: string;
}

export class PatientHealthResultResourceAttributes extends SpeakeasyBase {
  /**
   * Links together results. This should be the same as the thread of _action, if it is defined
   */
  @SpeakeasyMetadata()
  @Expose({ name: "_thread" })
  thread?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "aggregation" })
  aggregation?: string;

  @SpeakeasyMetadata({
    elemType: PatientHealthResultResourceAttributesAnnotations,
  })
  @Expose({ name: "annotations" })
  @Type(() => PatientHealthResultResourceAttributesAnnotations)
  annotations?: PatientHealthResultResourceAttributesAnnotations[];

  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => PatientHealthResultResourceAttributesData)
  data?: PatientHealthResultResourceAttributesData;

  @SpeakeasyMetadata()
  @Expose({ name: "external_id" })
  externalId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "metric_type" })
  metricType?: PatientHealthResultResourceAttributesMetricTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "occurred_at" })
  occurredAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "occurred_at_time_zone" })
  occurredAtTimeZone?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "skipped" })
  skipped?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(() => PatientHealthResultResourceAttributesSource)
  source?: PatientHealthResultResourceAttributesSource;

  /**
   * Type of result. Usually the same as metric_type except for lifestyle actions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "window" })
  window?: string;
}

export class PatientHealthResultResourceRelationshipsActionData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class PatientHealthResultResourceRelationshipsAction extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => PatientHealthResultResourceRelationshipsActionData)
  data?: PatientHealthResultResourceRelationshipsActionData;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  links?: Record<string, any>;
}

export class PatientHealthResultResourceRelationshipsMetricData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class PatientHealthResultResourceRelationshipsMetric extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => PatientHealthResultResourceRelationshipsMetricData)
  data?: PatientHealthResultResourceRelationshipsMetricData;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  links?: Record<string, any>;
}

export class PatientHealthResultResourceRelationshipsPatientDataMetaQueryIdentifier extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "system" })
  system: string;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: string;
}

/**
 * The query must return one and only one patient.
 */
export class PatientHealthResultResourceRelationshipsPatientDataMetaQuery extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "groups" })
  groups?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "identifier" })
  @Type(
    () => PatientHealthResultResourceRelationshipsPatientDataMetaQueryIdentifier
  )
  identifier: PatientHealthResultResourceRelationshipsPatientDataMetaQueryIdentifier;

  @SpeakeasyMetadata()
  @Expose({ name: "organization" })
  organization?: string;
}

/**
 * Allows the specification of a query for a patient rather than providing a patient id directly
 */
export class PatientHealthResultResourceRelationshipsPatientDataMeta extends SpeakeasyBase {
  /**
   * The query must return one and only one patient.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query" })
  @Type(() => PatientHealthResultResourceRelationshipsPatientDataMetaQuery)
  query: PatientHealthResultResourceRelationshipsPatientDataMetaQuery;
}

export class PatientHealthResultResourceRelationshipsPatientData extends SpeakeasyBase {
  /**
   * Required if the `meta.query` is not defined.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Allows the specification of a query for a patient rather than providing a patient id directly
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => PatientHealthResultResourceRelationshipsPatientDataMeta)
  meta?: PatientHealthResultResourceRelationshipsPatientDataMeta;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class PatientHealthResultResourceRelationshipsPatient extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => PatientHealthResultResourceRelationshipsPatientData)
  data?: PatientHealthResultResourceRelationshipsPatientData;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  links?: Record<string, any>;
}

export class PatientHealthResultResourceRelationships extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  @Type(() => PatientHealthResultResourceRelationshipsAction)
  action?: PatientHealthResultResourceRelationshipsAction;

  @SpeakeasyMetadata()
  @Expose({ name: "metric" })
  @Type(() => PatientHealthResultResourceRelationshipsMetric)
  metric?: PatientHealthResultResourceRelationshipsMetric;

  @SpeakeasyMetadata()
  @Expose({ name: "patient" })
  @Type(() => PatientHealthResultResourceRelationshipsPatient)
  patient?: PatientHealthResultResourceRelationshipsPatient;
}

export class PatientHealthResultResource extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => PatientHealthResultResourceAttributes)
  attributes?: PatientHealthResultResourceAttributes;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "relationships" })
  @Type(() => PatientHealthResultResourceRelationships)
  relationships?: PatientHealthResultResourceRelationships;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}
