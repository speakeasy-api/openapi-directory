"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .address_types import AddressTypes
from .business_name_lifecycle_states import BusinessNameLifecycleStates
from .business_names import BusinessNames
from .electronic_address_types import ElectronicAddressTypes
from .genders import Genders
from .individuals import Individuals
from .individuals_addresses import IndividualsAddresses
from .individuals_business_names import IndividualsBusinessNames
from .individuals_electronic_addresses import IndividualsElectronicAddresses
from .individuals_licenses import IndividualsLicenses
from .individuals_roles import IndividualsRoles
from .legal_entity_types import LegalEntityTypes
from .license_lifecycle_states import LicenseLifecycleStates
from .license_types import LicenseTypes
from .licenses import Licenses
from .name_directions import NameDirections
from .name_prefixes import NamePrefixes
from .name_types import NameTypes
from .organisations import Organisations
from .organisations_addresses import OrganisationsAddresses
from .organisations_business_names import OrganisationsBusinessNames
from .organisations_electronic_addresses import OrganisationsElectronicAddresses
from .organisations_licenses import OrganisationsLicenses
from .organisations_roles import OrganisationsRoles
from .registered_identifier_types import RegisteredIdentifierTypes
from .roles import Roles

SERVERS = [
    "//api.abr.ato.gov.au/",
    r"""Production API Server"""
    "//api.sandbox.abr.ato.gov.au/",
    r"""Sandbox API Server"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""# Introduction
    The Business Registries API is built on HTTP. The API is RESTful. It has predictable resource URIs.
    
      The API is documented in <a target=\"_blank\" href=\"https://github.com/OAI/OpenAPI-Specification\">OpenAPI</a> format.
      In addition to the standard OpenAPI syntax we use a few
      <a target=\"_blank\" href=\"https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md\">vendor extensions</a>.
    
    # Overview
    The following sections describe the resources that make up the Business Registries REST API.
    ## Current Version
    By default, all requests to https://api.abr.ato.gov.au receive the `v1` version of the REST API. We encourage you to explicitly request this version via the `Accept` header.
    
        Accept: application/vnd.abr-ato.v1+json
    
    ## Schema
    All API access is over HTTPS, and accessed from https://api.abr.ato.gov.au. All data is sent and received as JSON. Blank fields are included.
    
      All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
    
        YYYY-MM-DD
    
      For example: `2017-07-01` (the 1st of July 2017)
    
      All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
    
        YYYY-MM-DDTHH:MM:SSZ
    
      For example: `2017-07-01T11:05:06+10:00`
    
    ## Timezones
    Some requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls.
    ### Explicitly provide an ISO 8601 timestamp with timezone information
    For API calls that allow for a timestamp to be specified, we use that exact timestamp.
    
      For example: `2017-07-01T11:05:06+10:00`
    
    ## Pagination
    Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.
    
      For example:
    
        Link: <https://api.abr.ato.gov.au/individuals?page=2>; rel=\"next\",
              <https://api.abr.ato.gov.au/individuals?page=34>; rel=\"last\"
    
    `rel=\"next\"` states that the next page is `page=2`. This makes sense, since by default, all paginated queries start at page `1`. `rel=\"last\"` provides some more information, stating that the last page of results is on `page 34`. Accordingly, we have 33 more pages of information that we can consume.
    ## Parameters
    Many API methods take optional parameters:
    
        GET /individuals/1234/addresses/?addressType='Mailing'
    
    In this example, the '1234' value is provided for the `:partyId` parameter in the path while `:addressType` is passed in the query string.
    For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of 'application/json'.
    ## Metadata
    The API provides **metadata services** that you can use to discover information about the classifcation schemes and values used by the Registry.
    
      For example:
    
        GET /classifications/roles
    
      Sample response:
    
        [
          {
            \"id\": \"123e4567-e89b-12d3-a456-426655440001\",
            \"role\": \"Director\",
            \"roleDescription\": \"An individual responsible for managing a company's ...\",
            \"relationship\": \"Directorship\",
            \"reciprocalRole\": \"Company\",
            \"reciprocalRoleDescription\": \"An incorporated legal entity.\"
          },
          {
            ...
          }
        ]
    
    ## Root Endpoint
    You can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:
    
        curl https://api.abr.ato.gov.au
    
    ## Authentication
    The Business Registries API supports API Key authentication.
    
      When you sign up for an account, you are given your first API key. You can generate additional API keys, and delete
      API keys (as you may need to rotate your keys in the future). You authenticate to the Business Registries API by
      providing your secret key in the request header.
    
      **Note:** Some requests will return `404 Not Found`, instead of `403 Permission Denied`. This is to prevent the
      accidental leakage of information to unauthorised users.
    """
    address_types: AddressTypes
    r"""A classification scheme for addresses."""
    business_name_lifecycle_states: BusinessNameLifecycleStates
    r"""A classification scheme for business names."""
    business_names: BusinessNames
    r"""A business name is a name or title under which a person or organisation conducts a business."""
    electronic_address_types: ElectronicAddressTypes
    r"""A classification scheme for electronic addresses."""
    genders: Genders
    r"""A classification scheme for the representation of human sexes."""
    individuals: Individuals
    r"""An individual is a person about whom the registry wishes to maintain information.
    
      For example, the individual's date and place of birth (for the purposes of identification) and the individual's
      residential address (which is used for administrative purposes).
    """
    individuals_addresses: IndividualsAddresses
    r"""The registry maintains information about an individual's contact details for administrative purposes.
    
      Including:
      - an address for the service of documents
      - a principal place of business address
    """
    individuals_business_names: IndividualsBusinessNames
    r"""A business name is a name or title under which a person conducts a business."""
    individuals_electronic_addresses: IndividualsElectronicAddresses
    r"""The registry maintains information about an individual's contact details for administrative purposes.
    
      Including:
      - an email address
      - a mobile number
    """
    individuals_licenses: IndividualsLicenses
    r"""If you carry on a business you may need to hold a licence.
    
      For example, if you provide financial services, you are required to hold an Australian Financial
      Services (AFS) licence.
    """
    individuals_roles: IndividualsRoles
    r"""A role defines the characteristics of a relationship between parties.
    An Individual can participate in a relationship with other individuals and organisations.
    
    For example:
    
    | Party         | Role           | Relationship     | Role          | Party                           |
    | ------------- | -------------- | ---------------- | ------------- | ------------------------------- |
    | Homer Simpson | Husband        | Marriage         | Wife          | Marge Simpson                   |
    | Homer Simpson | Employee       | Employment       | Employer      | Springfield Nuclear Power Plant |
    | Homer Simpson | Safety Officer | Colleague        | Supervisor    | Carl Carlson                    |
    | Homer Simpson | Director       | Directorship     | Company       | Compu Global Hyper Mega Net     |
    | Homer Simpson | Employee       | Employment       | Employer      | Compu Global Hyper Mega Net     |
    | Homer Simpson | Member         | Membership       | Organisation  | The Stonecutters                |
    | Homer Simpson | Partner        | Partnership      | Partnership   | The Be Sharps                   |
    | Homer Simpson | Trustee        | Trusteeship      | Trust         | The Simpson Family Trust        |
    | Homer Simpson | Member         | Membership       | Association   | Mensa International             |
    
    You can use the API's **metadata services** to retrieve information about the classifcation schemes and
    values used by the Registry.
    """
    legal_entity_types: LegalEntityTypes
    r"""A classification scheme for parties (individuals and organisations)."""
    license_lifecycle_states: LicenseLifecycleStates
    r"""A classification scheme for licenses."""
    license_types: LicenseTypes
    r"""A classification scheme for licenses."""
    licenses: Licenses
    r"""If you carry on a business you may need to hold a licence.
    
      For example, if you provide financial services, you are required to hold an Australian Financial
      Services (AFS) licence.
    """
    name_directions: NameDirections
    r"""A classification scheme for names."""
    name_prefixes: NamePrefixes
    r"""A classification scheme for names."""
    name_types: NameTypes
    r"""A classification scheme for names."""
    organisations: Organisations
    r"""An organisation usually consists of a number of individuals or groups bound by a common purpose about whom the
    registry wishes to maintain information.
    
      For example, the organisation's legal entity type (e.g., Incorporated Entity, Unincorporated Entity,
      Partnership or Joint Venture).
    """
    organisations_addresses: OrganisationsAddresses
    r"""The registry maintains information about an organisation's contact details for administrative purposes.
    
      Including:
      - an address for the service of documents
      - a principal place of business address
    """
    organisations_business_names: OrganisationsBusinessNames
    r"""A business name is a name or title under which an organisation conducts a business."""
    organisations_electronic_addresses: OrganisationsElectronicAddresses
    r"""The registry maintains information about an organisation's contact details for administrative purposes.
    
      Including:
      - an email address
      - a mobile number
    """
    organisations_licenses: OrganisationsLicenses
    r"""If you carry on a business you may need to hold a licence.
    
      For example, if you provide financial services, you are required to hold an Australian Financial
      Services (AFS) licence.
    """
    organisations_roles: OrganisationsRoles
    r"""A role defines the characteristics of a relationship between parties.
    An Organisation can participate in a relationship with other organisations and indiviuals.
    
    For example:
    
    | Party                           | Role     | Relationship | Role         | Party             |
    | ------------------------------- | -------- | -------------| ------------ | ----------------- |
    | Springfield Nuclear Power Plant | Employer | Employment   | Employee     | Homer Simpson     |
    | Springfield Nuclear Power Plant | Company  | Directorship | Director     | Mr Burns          |
    | Springfield Nuclear Power Plant | Employer | Employment   | Employee     | Mr Burns          |
    | Springfield Nuclear Power Plant | Sponsor  | Sponsorship  | Organisation | The Stonecutters  |
    
    You can use the API's **metadata services** to retrieve information about the classifcation schemes and
    values used by the Registry.
    """
    registered_identifier_types: RegisteredIdentifierTypes
    r"""A classification scheme for registered identifiers."""
    roles: Roles
    r"""A classification scheme for the characteristics of relationships between parties (individuals and organisations)."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.address_types = AddressTypes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.business_name_lifecycle_states = BusinessNameLifecycleStates(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.business_names = BusinessNames(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.electronic_address_types = ElectronicAddressTypes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.genders = Genders(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.individuals = Individuals(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.individuals_addresses = IndividualsAddresses(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.individuals_business_names = IndividualsBusinessNames(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.individuals_electronic_addresses = IndividualsElectronicAddresses(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.individuals_licenses = IndividualsLicenses(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.individuals_roles = IndividualsRoles(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.legal_entity_types = LegalEntityTypes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.license_lifecycle_states = LicenseLifecycleStates(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.license_types = LicenseTypes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.licenses = Licenses(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.name_directions = NameDirections(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.name_prefixes = NamePrefixes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.name_types = NameTypes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.organisations = Organisations(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.organisations_addresses = OrganisationsAddresses(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.organisations_business_names = OrganisationsBusinessNames(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.organisations_electronic_addresses = OrganisationsElectronicAddresses(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.organisations_licenses = OrganisationsLicenses(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.organisations_roles = OrganisationsRoles(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.registered_identifier_types = RegisteredIdentifierTypes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.roles = Roles(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    