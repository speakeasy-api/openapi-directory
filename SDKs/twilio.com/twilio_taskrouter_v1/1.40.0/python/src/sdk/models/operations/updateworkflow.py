"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import taskrouter_v1_workspace_workflow as shared_taskrouter_v1_workspace_workflow
from typing import Optional

UPDATE_WORKFLOW_SERVERS = [
	"https://taskrouter.twilio.com",
]


@dataclasses.dataclass
class UpdateWorkflowSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class UpdateWorkflowUpdateWorkflowRequest:
    
    assignment_callback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AssignmentCallbackUrl' }})
    r"""The URL from your application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/taskrouter/handle-assignment-callbacks) for more details."""  
    configuration: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Configuration' }})
    r"""A JSON string that contains the rules to apply to the Workflow. See [Configuring Workflows](https://www.twilio.com/docs/taskrouter/workflow-configuration) for more information."""  
    fallback_assignment_callback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FallbackAssignmentCallbackUrl' }})
    r"""The URL that we should call when a call to the `assignment_callback_url` fails."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FriendlyName' }})
    r"""A descriptive string that you create to describe the Workflow resource. For example, `Inbound Call Workflow` or `2014 Outbound Campaign`."""  
    re_evaluate_tasks: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ReEvaluateTasks' }})
    r"""Whether or not to re-evaluate Tasks. The default is `false`, which means Tasks in the Workflow will not be processed through the assignment loop again."""  
    task_reservation_timeout: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'TaskReservationTimeout' }})
    r"""How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker. Can be up to `86,400` (24 hours) and the default is `120`."""  
    

@dataclasses.dataclass
class UpdateWorkflowRequest:
    
    sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Sid', 'style': 'simple', 'explode': False }})
    r"""The SID of the Workflow resource to update."""  
    workspace_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'WorkspaceSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the Workspace with the Workflow to update."""  
    request_body: Optional[UpdateWorkflowUpdateWorkflowRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateWorkflowResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    taskrouter_v1_workspace_workflow: Optional[shared_taskrouter_v1_workspace_workflow.TaskrouterV1WorkspaceWorkflow] = dataclasses.field(default=None)
    r"""OK"""  
    