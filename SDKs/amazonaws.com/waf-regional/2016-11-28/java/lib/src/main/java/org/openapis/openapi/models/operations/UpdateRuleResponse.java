/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class UpdateRuleResponse {
    
    public String contentType;

    public UpdateRuleResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    
    public Integer statusCode;

    public UpdateRuleResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public UpdateRuleResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.UpdateRuleResponse updateRuleResponse;

    public UpdateRuleResponse withUpdateRuleResponse(org.openapis.openapi.models.shared.UpdateRuleResponse updateRuleResponse) {
        this.updateRuleResponse = updateRuleResponse;
        return this;
    }
    
    /**
     * WAFInternalErrorException
     */
    
    public Object wafInternalErrorException;

    public UpdateRuleResponse withWAFInternalErrorException(Object wafInternalErrorException) {
        this.wafInternalErrorException = wafInternalErrorException;
        return this;
    }
    
    /**
     * WAFInvalidAccountException
     */
    
    public Object wafInvalidAccountException;

    public UpdateRuleResponse withWAFInvalidAccountException(Object wafInvalidAccountException) {
        this.wafInvalidAccountException = wafInvalidAccountException;
        return this;
    }
    
    /**
     * WAFInvalidOperationException
     */
    
    public Object wafInvalidOperationException;

    public UpdateRuleResponse withWAFInvalidOperationException(Object wafInvalidOperationException) {
        this.wafInvalidOperationException = wafInvalidOperationException;
        return this;
    }
    
    /**
     * WAFInvalidParameterException
     */
    
    public Object wafInvalidParameterException;

    public UpdateRuleResponse withWAFInvalidParameterException(Object wafInvalidParameterException) {
        this.wafInvalidParameterException = wafInvalidParameterException;
        return this;
    }
    
    /**
     * WAFLimitsExceededException
     */
    
    public Object wafLimitsExceededException;

    public UpdateRuleResponse withWAFLimitsExceededException(Object wafLimitsExceededException) {
        this.wafLimitsExceededException = wafLimitsExceededException;
        return this;
    }
    
    /**
     * WAFNonexistentContainerException
     */
    
    public Object wafNonexistentContainerException;

    public UpdateRuleResponse withWAFNonexistentContainerException(Object wafNonexistentContainerException) {
        this.wafNonexistentContainerException = wafNonexistentContainerException;
        return this;
    }
    
    /**
     * WAFNonexistentItemException
     */
    
    public Object wafNonexistentItemException;

    public UpdateRuleResponse withWAFNonexistentItemException(Object wafNonexistentItemException) {
        this.wafNonexistentItemException = wafNonexistentItemException;
        return this;
    }
    
    /**
     * WAFReferencedItemException
     */
    
    public Object wafReferencedItemException;

    public UpdateRuleResponse withWAFReferencedItemException(Object wafReferencedItemException) {
        this.wafReferencedItemException = wafReferencedItemException;
        return this;
    }
    
    /**
     * WAFStaleDataException
     */
    
    public Object wafStaleDataException;

    public UpdateRuleResponse withWAFStaleDataException(Object wafStaleDataException) {
        this.wafStaleDataException = wafStaleDataException;
        return this;
    }
    
    public UpdateRuleResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
