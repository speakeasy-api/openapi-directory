/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class MarketChangeMessage {
    /**
     * Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clk")
    public String clk;
    public MarketChangeMessage withClk(String clk) {
        this.clk = clk;
        return this;
    }
    
    /**
     * Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conflateMs")
    public Long conflateMs;
    public MarketChangeMessage withConflateMs(Long conflateMs) {
        this.conflateMs = conflateMs;
        return this;
    }
    
    /**
     * Change Type - set to indicate the type of change - if null this is a delta)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ct")
    public MarketChangeMessageCtEnum ct;
    public MarketChangeMessage withCt(MarketChangeMessageCtEnum ct) {
        this.ct = ct;
        return this;
    }
    
    /**
     * Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("heartbeatMs")
    public Long heartbeatMs;
    public MarketChangeMessage withHeartbeatMs(Long heartbeatMs) {
        this.heartbeatMs = heartbeatMs;
        return this;
    }
    
    /**
     * Client generated unique id to link request with response (like json rpc)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;
    public MarketChangeMessage withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initialClk")
    public String initialClk;
    public MarketChangeMessage withInitialClk(String initialClk) {
        this.initialClk = initialClk;
        return this;
    }
    
    /**
     * MarketChanges - the modifications to markets (will be null on a heartbeat
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mc")
    public MarketChange[] mc;
    public MarketChangeMessage withMc(MarketChange[] mc) {
        this.mc = mc;
        return this;
    }
    
    /**
     * The operation type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("op")
    public String op;
    public MarketChangeMessage withOp(String op) {
        this.op = op;
        return this;
    }
    
    /**
     * Publish Time (in millis since epoch) that the changes were generated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pt")
    public Long pt;
    public MarketChangeMessage withPt(Long pt) {
        this.pt = pt;
        return this;
    }
    
    /**
     * Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("segmentType")
    public MarketChangeMessageSegmentTypeEnum segmentType;
    public MarketChangeMessage withSegmentType(MarketChangeMessageSegmentTypeEnum segmentType) {
        this.segmentType = segmentType;
        return this;
    }
    
    /**
     * Stream status: set to null if the exchange stream data is up to date and 503 if the downstream services are experiencing latencies
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public Integer status;
    public MarketChangeMessage withStatus(Integer status) {
        this.status = status;
        return this;
    }
    
}
