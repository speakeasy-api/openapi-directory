/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * An object defining the template for a placement.
 */
export class UpdateProjectRequestBodyPlacementTemplate extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "defaultAttributes" })
  defaultAttributes?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: shared.DeviceTemplate })
  @Expose({ name: "deviceTemplates" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.DeviceTemplate> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.DeviceTemplate);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  deviceTemplates?: Record<string, shared.DeviceTemplate>;
}

export class UpdateProjectRequestBody extends SpeakeasyBase {
  /**
   * An optional user-defined description for the project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * An object defining the template for a placement.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "placementTemplate" })
  @Type(() => UpdateProjectRequestBodyPlacementTemplate)
  placementTemplate?: UpdateProjectRequestBodyPlacementTemplate;
}

export class UpdateProjectRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateProjectRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The name of the project to be updated.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=projectName",
  })
  projectName: string;
}

export class UpdateProjectResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateProjectResponse?: Record<string, any>;
}
