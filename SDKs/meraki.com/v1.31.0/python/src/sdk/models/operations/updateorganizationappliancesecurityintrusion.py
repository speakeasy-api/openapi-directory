"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationApplianceSecurityIntrusionRequestBodyAllowedRules:
    
    rule_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ruleId') }})
    r"""A rule identifier of the format meraki:intrusion/snort/GID/<gid>/SID/<sid>. gid and sid can be obtained from either https://www.snort.org/rule-docs or as ruleIds from the security events in /organization/[orgId]/securityEvents"""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""Message is optional and is ignored on a PUT call. It is allowed in order for PUT to be compatible with GET"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationApplianceSecurityIntrusionRequestBody:
    
    allowed_rules: list[UpdateOrganizationApplianceSecurityIntrusionRequestBodyAllowedRules] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedRules') }})
    r"""Sets a list of specific SNORT signatures to allow"""  
    

@dataclasses.dataclass
class UpdateOrganizationApplianceSecurityIntrusionRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    request_body: UpdateOrganizationApplianceSecurityIntrusionRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateOrganizationApplianceSecurityIntrusionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_organization_appliance_security_intrusion_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    