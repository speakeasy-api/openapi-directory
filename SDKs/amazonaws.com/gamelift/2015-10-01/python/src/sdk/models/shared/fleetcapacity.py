"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import ec2instancecounts as shared_ec2instancecounts
from ..shared import ec2instancetype_enum as shared_ec2instancetype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FleetCapacity:
    r"""<p>Current resource capacity settings in a specified fleet or location. The location value might refer to a fleet's remote location or its home Region. </p> <p> <b>Related actions</b> </p> <p> <a href=\\"https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribeFleetCapacity.html\\">DescribeFleetCapacity</a> | <a href=\\"https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribeFleetLocationCapacity.html\\">DescribeFleetLocationCapacity</a> | <a href=\\"https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateFleetCapacity.html\\">UpdateFleetCapacity</a> </p>"""
    
    fleet_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FleetArn'), 'exclude': lambda f: f is None }})  
    fleet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FleetId'), 'exclude': lambda f: f is None }})  
    instance_counts: Optional[shared_ec2instancecounts.Ec2InstanceCounts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceCounts'), 'exclude': lambda f: f is None }})
    r"""Resource capacity settings. Fleet capacity is measured in Amazon EC2 instances. Pending and terminating counts are non-zero when the fleet capacity is adjusting to a scaling event or if access to resources is temporarily affected."""  
    instance_type: Optional[shared_ec2instancetype_enum.Ec2InstanceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceType'), 'exclude': lambda f: f is None }})  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Location'), 'exclude': lambda f: f is None }})  
    