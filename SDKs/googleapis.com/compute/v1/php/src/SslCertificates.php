<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SslCertificates 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves the list of all SslCertificate resources, regional and global, available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesAggregatedListResponse
     */
	public function computeSslCertificatesAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/sslCertificates', \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sslCertificateAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SslCertificateAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified SslCertificate resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesDeleteResponse
     */
	public function computeSslCertificatesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/sslCertificates/{sslCertificate}', \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified SslCertificate resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesGetResponse
     */
	public function computeSslCertificatesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/sslCertificates/{sslCertificate}', \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sslCertificate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SslCertificate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a SslCertificate resource in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesInsertResponse
     */
	public function computeSslCertificatesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/sslCertificates', \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sslCertificate", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of SslCertificate resources available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesListResponse
     */
	public function computeSslCertificatesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/sslCertificates', \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSslCertificatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sslCertificateList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SslCertificateList', 'json');
            }
        }

        return $response;
    }
}