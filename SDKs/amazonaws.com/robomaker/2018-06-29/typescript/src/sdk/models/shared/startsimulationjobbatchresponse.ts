/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BatchPolicy } from "./batchpolicy";
import { FailedCreateSimulationJobRequest } from "./failedcreatesimulationjobrequest";
import { SimulationJobBatchErrorCodeEnum } from "./simulationjobbatcherrorcodeenum";
import { SimulationJobBatchStatusEnum } from "./simulationjobbatchstatusenum";
import { SimulationJobRequest } from "./simulationjobrequest";
import { SimulationJobSummary } from "./simulationjobsummary";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class StartSimulationJobBatchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "batchPolicy" })
  @Type(() => BatchPolicy)
  batchPolicy?: BatchPolicy;

  @SpeakeasyMetadata()
  @Expose({ name: "clientRequestToken" })
  clientRequestToken?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  @SpeakeasyMetadata({ elemType: SimulationJobSummary })
  @Expose({ name: "createdRequests" })
  @Type(() => SimulationJobSummary)
  createdRequests?: SimulationJobSummary[];

  @SpeakeasyMetadata({ elemType: FailedCreateSimulationJobRequest })
  @Expose({ name: "failedRequests" })
  @Type(() => FailedCreateSimulationJobRequest)
  failedRequests?: FailedCreateSimulationJobRequest[];

  @SpeakeasyMetadata()
  @Expose({ name: "failureCode" })
  failureCode?: SimulationJobBatchErrorCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "failureReason" })
  failureReason?: string;

  @SpeakeasyMetadata({ elemType: SimulationJobRequest })
  @Expose({ name: "pendingRequests" })
  @Type(() => SimulationJobRequest)
  pendingRequests?: SimulationJobRequest[];

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: SimulationJobBatchStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}
