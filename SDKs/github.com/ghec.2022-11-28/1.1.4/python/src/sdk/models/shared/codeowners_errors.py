"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodeownersErrorsErrors:
    
    column: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('column') }})
    r"""The column number where this errors occurs."""  
    kind: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind') }})
    r"""The type of error."""  
    line: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line') }})
    r"""The line number where this errors occurs."""  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting)."""  
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""The path of the file where the error occured."""  
    source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""The contents of the line where the error occurs."""  
    suggestion: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestion'), 'exclude': lambda f: f is None }})
    r"""Suggested action to fix the error. This will usually be `null`, but is provided for some common errors."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodeownersErrors:
    r"""A list of errors found in a repo's CODEOWNERS file"""
    
    errors: list[CodeownersErrorsErrors] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors') }})  
    