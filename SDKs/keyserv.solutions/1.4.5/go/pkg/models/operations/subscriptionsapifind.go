// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type SubscriptionsAPIFindRequestBodyType string

const (
	SubscriptionsAPIFindRequestBodyTypeFindCredentials SubscriptionsAPIFindRequestBodyType = "FindCredentials"
)

type SubscriptionsAPIFindRequestBody struct {
	FindCredentials *shared.FindCredentials

	Type SubscriptionsAPIFindRequestBodyType
}

func CreateSubscriptionsAPIFindRequestBodyFindCredentials(findCredentials shared.FindCredentials) SubscriptionsAPIFindRequestBody {
	typ := SubscriptionsAPIFindRequestBodyTypeFindCredentials

	return SubscriptionsAPIFindRequestBody{
		FindCredentials: &findCredentials,
		Type:            typ,
	}
}

func (u *SubscriptionsAPIFindRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	findCredentials := new(shared.FindCredentials)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&findCredentials); err == nil {
		u.FindCredentials = findCredentials
		u.Type = SubscriptionsAPIFindRequestBodyTypeFindCredentials
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SubscriptionsAPIFindRequestBody) MarshalJSON() ([]byte, error) {
	if u.FindCredentials != nil {
		return json.Marshal(u.FindCredentials)
	}

	return nil, nil
}

type SubscriptionsAPIFindRequest struct {
	Request SubscriptionsAPIFindRequestBody `request:"mediaType=application/json"`
}

type SubscriptionsAPIFind200ApplicationJSONType string

const (
	SubscriptionsAPIFind200ApplicationJSONTypeSubscriptionView SubscriptionsAPIFind200ApplicationJSONType = "SubscriptionView"
)

type SubscriptionsAPIFind200ApplicationJSON struct {
	SubscriptionView *shared.SubscriptionView

	Type SubscriptionsAPIFind200ApplicationJSONType
}

func CreateSubscriptionsAPIFind200ApplicationJSONSubscriptionView(subscriptionView shared.SubscriptionView) SubscriptionsAPIFind200ApplicationJSON {
	typ := SubscriptionsAPIFind200ApplicationJSONTypeSubscriptionView

	return SubscriptionsAPIFind200ApplicationJSON{
		SubscriptionView: &subscriptionView,
		Type:             typ,
	}
}

func (u *SubscriptionsAPIFind200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	subscriptionView := new(shared.SubscriptionView)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&subscriptionView); err == nil {
		u.SubscriptionView = subscriptionView
		u.Type = SubscriptionsAPIFind200ApplicationJSONTypeSubscriptionView
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SubscriptionsAPIFind200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.SubscriptionView != nil {
		return json.Marshal(u.SubscriptionView)
	}

	return nil, nil
}

type SubscriptionsAPIFindResponse struct {
	ContentType                                 string
	StatusCode                                  int
	RawResponse                                 *http.Response
	SubscriptionsAPIFind200ApplicationJSONOneOf *SubscriptionsAPIFind200ApplicationJSON
}
