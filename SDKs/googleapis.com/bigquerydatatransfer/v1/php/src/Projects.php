<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns true if valid credentials exist for the given data source and requesting user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsResponse
     */
	public function bigquerydatatransferProjectsLocationsDataSourcesCheckValidCreds(
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:checkValidCreds', \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkValidCredsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CheckValidCredsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists supported data sources and returns their settings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesListResponse
     */
	public function bigquerydatatransferProjectsLocationsDataSourcesList(
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/dataSources', \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsDataSourcesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDataSourcesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDataSourcesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enroll data sources in a user project. This allows users to create transfer configurations for these data sources. They will also appear in the ListDataSources RPC and as such, will appear in the [BigQuery UI](https://console.cloud.google.com/bigquery), and the documents can be found in the public guide for [BigQuery Web UI](https://cloud.google.com/bigquery/bigquery-web-ui) and [Data Transfer Service](https://cloud.google.com/bigquery/docs/working-with-transfers).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsEnrollDataSourcesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsEnrollDataSourcesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsEnrollDataSourcesResponse
     */
	public function bigquerydatatransferProjectsLocationsEnrollDataSources(
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsEnrollDataSourcesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsEnrollDataSourcesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsEnrollDataSourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:enrollDataSources', \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsEnrollDataSourcesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "enrollDataSourcesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsEnrollDataSourcesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsEnrollDataSourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsListResponse
     */
	public function bigquerydatatransferProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new data transfer configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsCreateResponse
     */
	public function bigquerydatatransferProjectsTransferConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/transferConfigs', \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "transferConfigInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->transferConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TransferConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information about all transfer configs owned by a project in the specified location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsListResponse
     */
	public function bigquerydatatransferProjectsTransferConfigsList(
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/transferConfigs', \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTransferConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTransferConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a data transfer configuration. All fields must be set, even if they are not updated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsPatchResponse
     */
	public function bigquerydatatransferProjectsTransferConfigsPatch(
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "transferConfigInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->transferConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TransferConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified transfer run.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsDeleteResponse
     */
	public function bigquerydatatransferProjectsTransferConfigsRunsDelete(
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information about the particular transfer run.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsGetResponse
     */
	public function bigquerydatatransferProjectsTransferConfigsRunsGet(
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->transferRun = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TransferRun', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information about running and completed transfer runs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsListResponse
     */
	public function bigquerydatatransferProjectsTransferConfigsRunsList(
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/runs', \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTransferRunsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTransferRunsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns log messages for the transfer run.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsTransferLogsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsTransferLogsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsTransferLogsListResponse
     */
	public function bigquerydatatransferProjectsTransferConfigsRunsTransferLogsList(
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsTransferLogsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsTransferLogsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsTransferLogsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/transferLogs', \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsTransferLogsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsTransferLogsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsRunsTransferLogsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTransferLogsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTransferLogsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates transfer runs for a time range [start_time, end_time]. For each date - or whatever granularity the data source supports - in the range, one transfer run is created. Note that runs are created per UTC time in the time range. DEPRECATED: use StartManualTransferRuns instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsScheduleRunsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsScheduleRunsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsScheduleRunsResponse
     */
	public function bigquerydatatransferProjectsTransferConfigsScheduleRuns(
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsScheduleRunsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsScheduleRunsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsScheduleRunsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}:scheduleRuns', \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsScheduleRunsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "scheduleTransferRunsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsScheduleRunsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsScheduleRunsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scheduleTransferRunsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScheduleTransferRunsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Start manual transfer runs to be executed now with schedule_time equal to current time. The transfer runs can be created for a time range where the run_time is between start_time (inclusive) and end_time (exclusive), or for a specific run_time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsStartManualRunsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsStartManualRunsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsStartManualRunsResponse
     */
	public function bigquerydatatransferProjectsTransferConfigsStartManualRuns(
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsStartManualRunsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsStartManualRunsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsStartManualRunsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}:startManualRuns', \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsStartManualRunsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "startManualTransferRunsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsStartManualRunsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigquerydatatransferProjectsTransferConfigsStartManualRunsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->startManualTransferRunsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StartManualTransferRunsResponse', 'json');
            }
        }

        return $response;
    }
}