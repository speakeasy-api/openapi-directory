/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Providers {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Providers(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Disable a connection source
     * This will make it so the specified source will not be synchronized anymore.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConnectionsIdConnectionSourcesIdSourceResponse deleteConnectionsIdConnectionSourcesIdSource(org.openapis.openapi.models.operations.DeleteConnectionsIdConnectionSourcesIdSourceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteConnectionsIdConnectionSourcesIdSourceRequest.class, baseUrl, "/connections/{id_connection}/sources/{id_source}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DeleteConnectionsIdConnectionSourcesIdSourceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteConnectionsIdConnectionSourcesIdSourceResponse res = new org.openapis.openapi.models.operations.DeleteConnectionsIdConnectionSourcesIdSourceResponse(contentType, httpRes.statusCode()) {{
            connectionSource = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConnectionSource out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConnectionSource.class);
                res.connectionSource = out;
            }
        }

        return res;
    }

    /**
     * Delete a single Logo object.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConnectorsIdConnectorLogosIdLogoResponse deleteConnectorsIdConnectorLogosIdLogo(org.openapis.openapi.models.operations.DeleteConnectorsIdConnectorLogosIdLogoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteConnectorsIdConnectorLogosIdLogoRequest.class, baseUrl, "/connectors/{id_connector}/logos/{id_logo}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DeleteConnectorsIdConnectorLogosIdLogoRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteConnectorsIdConnectorLogosIdLogoResponse res = new org.openapis.openapi.models.operations.DeleteConnectorsIdConnectorLogosIdLogoResponse(contentType, httpRes.statusCode()) {{
            connectorLogo = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConnectorLogo out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConnectorLogo.class);
                res.connectorLogo = out;
            }
        }

        return res;
    }

    /**
     * Delete all connections
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsResponse deleteUsersIdUserConnections(org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsRequest.class, baseUrl, "/users/{id_user}/connections", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsResponse res = new org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsResponse(contentType, httpRes.statusCode()) {{
            connection = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Connection out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Connection.class);
                res.connection = out;
            }
        }

        return res;
    }

    /**
     * Delete a connection.
     * This endpoint deletes a connection and all related accounts and transactions.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsIdConnectionResponse deleteUsersIdUserConnectionsIdConnection(org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsIdConnectionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsIdConnectionRequest.class, baseUrl, "/users/{id_user}/connections/{id_connection}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsIdConnectionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsIdConnectionResponse res = new org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsIdConnectionResponse(contentType, httpRes.statusCode()) {{
            connection = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Connection out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Connection.class);
                res.connection = out;
            }
        }

        return res;
    }

    /**
     * Disable a connection source
     * This will make it so the specified source will not be synchronized anymore.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse deleteUsersIdUserConnectionsIdConnectionSourcesIdSource(org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest.class, baseUrl, "/users/{id_user}/connections/{id_connection}/sources/{id_source}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse res = new org.openapis.openapi.models.operations.DeleteUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse(contentType, httpRes.statusCode()) {{
            connectionSource = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConnectionSource out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConnectionSource.class);
                res.connectionSource = out;
            }
        }

        return res;
    }

    /**
     * Get list of connectors
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBanksResponse getBanks(org.openapis.openapi.models.operations.GetBanksRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/banks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetBanksRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBanksResponse res = new org.openapis.openapi.models.operations.GetBanksResponse(contentType, httpRes.statusCode()) {{
            getBanks200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBanks200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBanks200ApplicationJSON.class);
                res.getBanks200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get a connector
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBanksIdBankResponse getBanksIdBank(org.openapis.openapi.models.operations.GetBanksIdBankRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetBanksIdBankRequest.class, baseUrl, "/banks/{id_bank}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetBanksIdBankRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBanksIdBankResponse res = new org.openapis.openapi.models.operations.GetBanksIdBankResponse(contentType, httpRes.statusCode()) {{
            connector = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Connector out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Connector.class);
                res.connector = out;
            }
        }

        return res;
    }

    /**
     * Get all links to the files associated with this connector.
     * This endpoint returns all links to files associated with this connector.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBanksIdConnectorLogosResponse getBanksIdConnectorLogos(org.openapis.openapi.models.operations.GetBanksIdConnectorLogosRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetBanksIdConnectorLogosRequest.class, baseUrl, "/banks/{id_connector}/logos", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetBanksIdConnectorLogosRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBanksIdConnectorLogosResponse res = new org.openapis.openapi.models.operations.GetBanksIdConnectorLogosResponse(contentType, httpRes.statusCode()) {{
            getBanksIdConnectorLogos200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBanksIdConnectorLogos200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBanksIdConnectorLogos200ApplicationJSON.class);
                res.getBanksIdConnectorLogos200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get all links to the files associated with this connector.
     * This endpoint returns all links to files associated with this connector.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBanksIdConnectorLogosMainResponse getBanksIdConnectorLogosMain(org.openapis.openapi.models.operations.GetBanksIdConnectorLogosMainRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetBanksIdConnectorLogosMainRequest.class, baseUrl, "/banks/{id_connector}/logos/main", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetBanksIdConnectorLogosMainRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBanksIdConnectorLogosMainResponse res = new org.openapis.openapi.models.operations.GetBanksIdConnectorLogosMainResponse(contentType, httpRes.statusCode()) {{
            getBanksIdConnectorLogosMain200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBanksIdConnectorLogosMain200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBanksIdConnectorLogosMain200ApplicationJSON.class);
                res.getBanksIdConnectorLogosMain200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get all links to the files associated with this connector.
     * This endpoint returns all links to files associated with this connector.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBanksIdConnectorLogosThumbnailResponse getBanksIdConnectorLogosThumbnail(org.openapis.openapi.models.operations.GetBanksIdConnectorLogosThumbnailRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetBanksIdConnectorLogosThumbnailRequest.class, baseUrl, "/banks/{id_connector}/logos/thumbnail", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetBanksIdConnectorLogosThumbnailRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBanksIdConnectorLogosThumbnailResponse res = new org.openapis.openapi.models.operations.GetBanksIdConnectorLogosThumbnailResponse(contentType, httpRes.statusCode()) {{
            getBanksIdConnectorLogosThumbnail200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBanksIdConnectorLogosThumbnail200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBanksIdConnectorLogosThumbnail200ApplicationJSON.class);
                res.getBanksIdConnectorLogosThumbnail200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get list of connector sources
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBanksIdConnectorSourcesResponse getBanksIdConnectorSources(org.openapis.openapi.models.operations.GetBanksIdConnectorSourcesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetBanksIdConnectorSourcesRequest.class, baseUrl, "/banks/{id_connector}/sources", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetBanksIdConnectorSourcesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBanksIdConnectorSourcesResponse res = new org.openapis.openapi.models.operations.GetBanksIdConnectorSourcesResponse(contentType, httpRes.statusCode()) {{
            getBanksIdConnectorSources200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBanksIdConnectorSources200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBanksIdConnectorSources200ApplicationJSON.class);
                res.getBanksIdConnectorSources200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get the connector source
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBanksIdConnectorSourcesIdSourceResponse getBanksIdConnectorSourcesIdSource(org.openapis.openapi.models.operations.GetBanksIdConnectorSourcesIdSourceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetBanksIdConnectorSourcesIdSourceRequest.class, baseUrl, "/banks/{id_connector}/sources/{id_source}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetBanksIdConnectorSourcesIdSourceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBanksIdConnectorSourcesIdSourceResponse res = new org.openapis.openapi.models.operations.GetBanksIdConnectorSourcesIdSourceResponse(contentType, httpRes.statusCode()) {{
            connectorSource = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConnectorSource out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConnectorSource.class);
                res.connectorSource = out;
            }
        }

        return res;
    }

    /**
     * Get connections without a user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetConnectionsResponse getConnections(org.openapis.openapi.models.operations.GetConnectionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/connections");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetConnectionsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetConnectionsResponse res = new org.openapis.openapi.models.operations.GetConnectionsResponse(contentType, httpRes.statusCode()) {{
            getConnections200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetConnections200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetConnections200ApplicationJSON.class);
                res.getConnections200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get connection logs
     * Get logs about connections.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetConnectionsIdConnectionLogsResponse getConnectionsIdConnectionLogs(org.openapis.openapi.models.operations.GetConnectionsIdConnectionLogsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetConnectionsIdConnectionLogsRequest.class, baseUrl, "/connections/{id_connection}/logs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetConnectionsIdConnectionLogsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetConnectionsIdConnectionLogsResponse res = new org.openapis.openapi.models.operations.GetConnectionsIdConnectionLogsResponse(contentType, httpRes.statusCode()) {{
            getConnectionsIdConnectionLogs200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetConnectionsIdConnectionLogs200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetConnectionsIdConnectionLogs200ApplicationJSON.class);
                res.getConnectionsIdConnectionLogs200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get connection sources
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetConnectionsIdConnectionSourcesResponse getConnectionsIdConnectionSources(org.openapis.openapi.models.operations.GetConnectionsIdConnectionSourcesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetConnectionsIdConnectionSourcesRequest.class, baseUrl, "/connections/{id_connection}/sources", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetConnectionsIdConnectionSourcesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetConnectionsIdConnectionSourcesResponse res = new org.openapis.openapi.models.operations.GetConnectionsIdConnectionSourcesResponse(contentType, httpRes.statusCode()) {{
            getConnectionsIdConnectionSources200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetConnectionsIdConnectionSources200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetConnectionsIdConnectionSources200ApplicationJSON.class);
                res.getConnectionsIdConnectionSources200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get list of connectors
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetConnectorsResponse getConnectors(org.openapis.openapi.models.operations.GetConnectorsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/connectors");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetConnectorsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetConnectorsResponse res = new org.openapis.openapi.models.operations.GetConnectorsResponse(contentType, httpRes.statusCode()) {{
            getConnectors200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetConnectors200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetConnectors200ApplicationJSON.class);
                res.getConnectors200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get a connector
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetConnectorsIdConnectorResponse getConnectorsIdConnector(org.openapis.openapi.models.operations.GetConnectorsIdConnectorRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetConnectorsIdConnectorRequest.class, baseUrl, "/connectors/{id_connector}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetConnectorsIdConnectorRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetConnectorsIdConnectorResponse res = new org.openapis.openapi.models.operations.GetConnectorsIdConnectorResponse(contentType, httpRes.statusCode()) {{
            connector = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Connector out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Connector.class);
                res.connector = out;
            }
        }

        return res;
    }

    /**
     * Get all links to the files associated with this connector.
     * This endpoint returns all links to files associated with this connector.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosResponse getConnectorsIdConnectorLogos(org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosRequest.class, baseUrl, "/connectors/{id_connector}/logos", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosResponse res = new org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosResponse(contentType, httpRes.statusCode()) {{
            getConnectorsIdConnectorLogos200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogos200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogos200ApplicationJSON.class);
                res.getConnectorsIdConnectorLogos200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get all links to the files associated with this connector.
     * This endpoint returns all links to files associated with this connector.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosMainResponse getConnectorsIdConnectorLogosMain(org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosMainRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosMainRequest.class, baseUrl, "/connectors/{id_connector}/logos/main", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosMainRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosMainResponse res = new org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosMainResponse(contentType, httpRes.statusCode()) {{
            getConnectorsIdConnectorLogosMain200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosMain200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosMain200ApplicationJSON.class);
                res.getConnectorsIdConnectorLogosMain200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get all links to the files associated with this connector.
     * This endpoint returns all links to files associated with this connector.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosThumbnailResponse getConnectorsIdConnectorLogosThumbnail(org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosThumbnailRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosThumbnailRequest.class, baseUrl, "/connectors/{id_connector}/logos/thumbnail", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosThumbnailRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosThumbnailResponse res = new org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosThumbnailResponse(contentType, httpRes.statusCode()) {{
            getConnectorsIdConnectorLogosThumbnail200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosThumbnail200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetConnectorsIdConnectorLogosThumbnail200ApplicationJSON.class);
                res.getConnectorsIdConnectorLogosThumbnail200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get list of connector sources
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetConnectorsIdConnectorSourcesResponse getConnectorsIdConnectorSources(org.openapis.openapi.models.operations.GetConnectorsIdConnectorSourcesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetConnectorsIdConnectorSourcesRequest.class, baseUrl, "/connectors/{id_connector}/sources", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetConnectorsIdConnectorSourcesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetConnectorsIdConnectorSourcesResponse res = new org.openapis.openapi.models.operations.GetConnectorsIdConnectorSourcesResponse(contentType, httpRes.statusCode()) {{
            getConnectorsIdConnectorSources200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetConnectorsIdConnectorSources200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetConnectorsIdConnectorSources200ApplicationJSON.class);
                res.getConnectorsIdConnectorSources200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get the connector source
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetConnectorsIdConnectorSourcesIdSourceResponse getConnectorsIdConnectorSourcesIdSource(org.openapis.openapi.models.operations.GetConnectorsIdConnectorSourcesIdSourceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetConnectorsIdConnectorSourcesIdSourceRequest.class, baseUrl, "/connectors/{id_connector}/sources/{id_source}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetConnectorsIdConnectorSourcesIdSourceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetConnectorsIdConnectorSourcesIdSourceResponse res = new org.openapis.openapi.models.operations.GetConnectorsIdConnectorSourcesIdSourceResponse(contentType, httpRes.statusCode()) {{
            connectorSource = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConnectorSource out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConnectorSource.class);
                res.connectorSource = out;
            }
        }

        return res;
    }

    /**
     * Get connection logs
     * Get logs about connections.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetLogsResponse getLogs(org.openapis.openapi.models.operations.GetLogsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/logs");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetLogsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetLogsResponse res = new org.openapis.openapi.models.operations.GetLogsResponse(contentType, httpRes.statusCode()) {{
            getLogs200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetLogs200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetLogs200ApplicationJSON.class);
                res.getLogs200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get list of connectors
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetProvidersResponse getProviders(org.openapis.openapi.models.operations.GetProvidersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/providers");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetProvidersRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetProvidersResponse res = new org.openapis.openapi.models.operations.GetProvidersResponse(contentType, httpRes.statusCode()) {{
            getProviders200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetProviders200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetProviders200ApplicationJSON.class);
                res.getProviders200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get all links to the files associated with this connector.
     * This endpoint returns all links to files associated with this connector.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosResponse getProvidersIdConnectorLogos(org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosRequest.class, baseUrl, "/providers/{id_connector}/logos", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosResponse res = new org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosResponse(contentType, httpRes.statusCode()) {{
            getProvidersIdConnectorLogos200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetProvidersIdConnectorLogos200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetProvidersIdConnectorLogos200ApplicationJSON.class);
                res.getProvidersIdConnectorLogos200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get all links to the files associated with this connector.
     * This endpoint returns all links to files associated with this connector.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosMainResponse getProvidersIdConnectorLogosMain(org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosMainRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosMainRequest.class, baseUrl, "/providers/{id_connector}/logos/main", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosMainRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosMainResponse res = new org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosMainResponse(contentType, httpRes.statusCode()) {{
            getProvidersIdConnectorLogosMain200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosMain200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosMain200ApplicationJSON.class);
                res.getProvidersIdConnectorLogosMain200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get all links to the files associated with this connector.
     * This endpoint returns all links to files associated with this connector.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosThumbnailResponse getProvidersIdConnectorLogosThumbnail(org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosThumbnailRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosThumbnailRequest.class, baseUrl, "/providers/{id_connector}/logos/thumbnail", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosThumbnailRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosThumbnailResponse res = new org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosThumbnailResponse(contentType, httpRes.statusCode()) {{
            getProvidersIdConnectorLogosThumbnail200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosThumbnail200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetProvidersIdConnectorLogosThumbnail200ApplicationJSON.class);
                res.getProvidersIdConnectorLogosThumbnail200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get list of connector sources
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetProvidersIdConnectorSourcesResponse getProvidersIdConnectorSources(org.openapis.openapi.models.operations.GetProvidersIdConnectorSourcesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetProvidersIdConnectorSourcesRequest.class, baseUrl, "/providers/{id_connector}/sources", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetProvidersIdConnectorSourcesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetProvidersIdConnectorSourcesResponse res = new org.openapis.openapi.models.operations.GetProvidersIdConnectorSourcesResponse(contentType, httpRes.statusCode()) {{
            getProvidersIdConnectorSources200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetProvidersIdConnectorSources200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetProvidersIdConnectorSources200ApplicationJSON.class);
                res.getProvidersIdConnectorSources200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get the connector source
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetProvidersIdConnectorSourcesIdSourceResponse getProvidersIdConnectorSourcesIdSource(org.openapis.openapi.models.operations.GetProvidersIdConnectorSourcesIdSourceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetProvidersIdConnectorSourcesIdSourceRequest.class, baseUrl, "/providers/{id_connector}/sources/{id_source}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetProvidersIdConnectorSourcesIdSourceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetProvidersIdConnectorSourcesIdSourceResponse res = new org.openapis.openapi.models.operations.GetProvidersIdConnectorSourcesIdSourceResponse(contentType, httpRes.statusCode()) {{
            connectorSource = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConnectorSource out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConnectorSource.class);
                res.connectorSource = out;
            }
        }

        return res;
    }

    /**
     * Get a connector
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetProvidersIdProviderResponse getProvidersIdProvider(org.openapis.openapi.models.operations.GetProvidersIdProviderRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetProvidersIdProviderRequest.class, baseUrl, "/providers/{id_provider}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetProvidersIdProviderRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetProvidersIdProviderResponse res = new org.openapis.openapi.models.operations.GetProvidersIdProviderResponse(contentType, httpRes.statusCode()) {{
            connector = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Connector out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Connector.class);
                res.connector = out;
            }
        }

        return res;
    }

    /**
     * Get connections
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetUsersIdUserConnectionsResponse getUsersIdUserConnections(org.openapis.openapi.models.operations.GetUsersIdUserConnectionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetUsersIdUserConnectionsRequest.class, baseUrl, "/users/{id_user}/connections", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetUsersIdUserConnectionsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetUsersIdUserConnectionsResponse res = new org.openapis.openapi.models.operations.GetUsersIdUserConnectionsResponse(contentType, httpRes.statusCode()) {{
            getUsersIdUserConnections200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetUsersIdUserConnections200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetUsersIdUserConnections200ApplicationJSON.class);
                res.getUsersIdUserConnections200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get connection additionnal informations
     * &lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionInformationsResponse getUsersIdUserConnectionsIdConnectionInformations(org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionInformationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionInformationsRequest.class, baseUrl, "/users/{id_user}/connections/{id_connection}/informations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionInformationsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionInformationsResponse res = new org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionInformationsResponse(contentType, httpRes.statusCode()) {{
            getUsersIdUserConnectionsIdConnectionInformations200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionInformations200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionInformations200ApplicationJSON.class);
                res.getUsersIdUserConnectionsIdConnectionInformations200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get connection logs
     * Get logs about connections.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionLogsResponse getUsersIdUserConnectionsIdConnectionLogs(org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionLogsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionLogsRequest.class, baseUrl, "/users/{id_user}/connections/{id_connection}/logs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionLogsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionLogsResponse res = new org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionLogsResponse(contentType, httpRes.statusCode()) {{
            getUsersIdUserConnectionsIdConnectionLogs200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionLogs200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionLogs200ApplicationJSON.class);
                res.getUsersIdUserConnectionsIdConnectionLogs200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get connection sources
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionSourcesResponse getUsersIdUserConnectionsIdConnectionSources(org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionSourcesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionSourcesRequest.class, baseUrl, "/users/{id_user}/connections/{id_connection}/sources", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionSourcesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionSourcesResponse res = new org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionSourcesResponse(contentType, httpRes.statusCode()) {{
            getUsersIdUserConnectionsIdConnectionSources200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionSources200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetUsersIdUserConnectionsIdConnectionSources200ApplicationJSON.class);
                res.getUsersIdUserConnectionsIdConnectionSources200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get connection logs
     * Get logs about connections.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetUsersIdUserLogsResponse getUsersIdUserLogs(org.openapis.openapi.models.operations.GetUsersIdUserLogsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetUsersIdUserLogsRequest.class, baseUrl, "/users/{id_user}/logs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetUsersIdUserLogsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetUsersIdUserLogsResponse res = new org.openapis.openapi.models.operations.GetUsersIdUserLogsResponse(contentType, httpRes.statusCode()) {{
            getUsersIdUserLogs200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetUsersIdUserLogs200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetUsersIdUserLogs200ApplicationJSON.class);
                res.getUsersIdUserLogs200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * "
     * This endpoint is used to enable a source or force a synchronization on it.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostConnectionsIdConnectionSourcesIdSourceResponse postConnectionsIdConnectionSourcesIdSource(org.openapis.openapi.models.operations.PostConnectionsIdConnectionSourcesIdSourceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostConnectionsIdConnectionSourcesIdSourceRequest.class, baseUrl, "/connections/{id_connection}/sources/{id_source}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "multipart");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PostConnectionsIdConnectionSourcesIdSourceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostConnectionsIdConnectionSourcesIdSourceResponse res = new org.openapis.openapi.models.operations.PostConnectionsIdConnectionSourcesIdSourceResponse(contentType, httpRes.statusCode()) {{
            connectionSource = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConnectionSource out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConnectionSource.class);
                res.connectionSource = out;
            }
        }

        return res;
    }

    /**
     * Request a new connector
     * Send a request to add a new connector&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostConnectorsResponse postConnectors(org.openapis.openapi.models.operations.PostConnectorsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/connectors");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PostConnectorsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostConnectorsResponse res = new org.openapis.openapi.models.operations.PostConnectorsResponse(contentType, httpRes.statusCode()) {{
            connector = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Connector out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Connector.class);
                res.connector = out;
            }
        }

        return res;
    }

    /**
     * Create a connector Logo
     * This endpoint creates a connector logo. You can either pass a file to as a parameter to insert and link it with the connector or pass an id_file to link a connector with an existing file. Will fail if the file is already linked with that connector.&lt;br&gt;&lt;br&gt;Form params: - id_file (integer): The id of the file to link with that connector. - img (string): Path to the image to link with that connector.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostConnectorsIdConnectorLogosResponse postConnectorsIdConnectorLogos(org.openapis.openapi.models.operations.PostConnectorsIdConnectorLogosRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostConnectorsIdConnectorLogosRequest.class, baseUrl, "/connectors/{id_connector}/logos", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PostConnectorsIdConnectorLogosRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostConnectorsIdConnectorLogosResponse res = new org.openapis.openapi.models.operations.PostConnectorsIdConnectorLogosResponse(contentType, httpRes.statusCode()) {{
            connectorLogo = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConnectorLogo out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConnectorLogo.class);
                res.connectorLogo = out;
            }
        }

        return res;
    }

    /**
     * Add a new connection.
     * Create a new connection to a given bank or provider. You have to give all needed parameters (use /banks/ID/fields or /providers/ID/fields to get them).&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostUsersIdUserConnectionsResponse postUsersIdUserConnections(org.openapis.openapi.models.operations.PostUsersIdUserConnectionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostUsersIdUserConnectionsRequest.class, baseUrl, "/users/{id_user}/connections", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "multipart");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PostUsersIdUserConnectionsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostUsersIdUserConnectionsResponse res = new org.openapis.openapi.models.operations.PostUsersIdUserConnectionsResponse(contentType, httpRes.statusCode()) {{
            connection = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Connection out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Connection.class);
                res.connection = out;
            }
        }

        return res;
    }

    /**
     * Update a connection.
     * Give new parameters to change on the configuration of this connection (for example "password").&lt;br&gt;&lt;br&gt;It tests connection to website, and if it fails, a 400 response is given with the error code "wrongpass" or "websiteUnavailable".&lt;br&gt;&lt;br&gt;You can also supply meta-parameters on connection, like 'active' or 'expire'.&lt;br&gt;&lt;br&gt;It's possible to execute the update/synchronization in the background with a query parameter. If done in background this endpoint will respond with data that is not yet updated. To obtain updated data, polling is required as the the data will be filled in the background.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostUsersIdUserConnectionsIdConnectionResponse postUsersIdUserConnectionsIdConnection(org.openapis.openapi.models.operations.PostUsersIdUserConnectionsIdConnectionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostUsersIdUserConnectionsIdConnectionRequest.class, baseUrl, "/users/{id_user}/connections/{id_connection}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "multipart");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PostUsersIdUserConnectionsIdConnectionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostUsersIdUserConnectionsIdConnectionResponse res = new org.openapis.openapi.models.operations.PostUsersIdUserConnectionsIdConnectionResponse(contentType, httpRes.statusCode()) {{
            connection = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Connection out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Connection.class);
                res.connection = out;
            }
        }

        return res;
    }

    /**
     * "
     * This endpoint is used to enable a source or force a synchronization on it.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse postUsersIdUserConnectionsIdConnectionSourcesIdSource(org.openapis.openapi.models.operations.PostUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest.class, baseUrl, "/users/{id_user}/connections/{id_connection}/sources/{id_source}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "multipart");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PostUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse res = new org.openapis.openapi.models.operations.PostUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse(contentType, httpRes.statusCode()) {{
            connectionSource = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConnectionSource out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConnectionSource.class);
                res.connectionSource = out;
            }
        }

        return res;
    }

    /**
     * Update connection source
     * This endpoint is used to enable a source or force a synchronization on it.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutConnectionsIdConnectionSourcesIdSourceResponse putConnectionsIdConnectionSourcesIdSource(org.openapis.openapi.models.operations.PutConnectionsIdConnectionSourcesIdSourceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutConnectionsIdConnectionSourcesIdSourceRequest.class, baseUrl, "/connections/{id_connection}/sources/{id_source}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "multipart");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PutConnectionsIdConnectionSourcesIdSourceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutConnectionsIdConnectionSourcesIdSourceResponse res = new org.openapis.openapi.models.operations.PutConnectionsIdConnectionSourcesIdSourceResponse(contentType, httpRes.statusCode()) {{
            connectionSource = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConnectionSource out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConnectionSource.class);
                res.connectionSource = out;
            }
        }

        return res;
    }

    /**
     * Create or Update a connector Logo
     * This endpoint creates or update a connector logo. This logo is a mapping between a file (/file route) and a connector (/connectors route) or a provider (/providers route).&lt;br&gt;&lt;br&gt;Form params: - id_file (integer): The id of the file to link with that connector.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutConnectorsIdConnectorLogosResponse putConnectorsIdConnectorLogos(org.openapis.openapi.models.operations.PutConnectorsIdConnectorLogosRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutConnectorsIdConnectorLogosRequest.class, baseUrl, "/connectors/{id_connector}/logos", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PutConnectorsIdConnectorLogosRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutConnectorsIdConnectorLogosResponse res = new org.openapis.openapi.models.operations.PutConnectorsIdConnectorLogosResponse(contentType, httpRes.statusCode()) {{
            connectorLogo = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConnectorLogo out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConnectorLogo.class);
                res.connectorLogo = out;
            }
        }

        return res;
    }

    /**
     * Create or Update a connector Logo.
     * This endpoint creates or update a connector logo. This logo is a mapping between a file (/file route) and a connector (/connectors route) or a provider (/providers route).&lt;br&gt;&lt;br&gt;Form params: - id_file (integer): The id of the file to link with that connector.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutConnectorsIdConnectorLogosIdLogoResponse putConnectorsIdConnectorLogosIdLogo(org.openapis.openapi.models.operations.PutConnectorsIdConnectorLogosIdLogoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutConnectorsIdConnectorLogosIdLogoRequest.class, baseUrl, "/connectors/{id_connector}/logos/{id_logo}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PutConnectorsIdConnectorLogosIdLogoRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutConnectorsIdConnectorLogosIdLogoResponse res = new org.openapis.openapi.models.operations.PutConnectorsIdConnectorLogosIdLogoResponse(contentType, httpRes.statusCode()) {{
            connectorLogo = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConnectorLogo out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConnectorLogo.class);
                res.connectorLogo = out;
            }
        }

        return res;
    }

    /**
     * Edit several connector sources
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutConnectorsIdConnectorSourcesResponse putConnectorsIdConnectorSources(org.openapis.openapi.models.operations.PutConnectorsIdConnectorSourcesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutConnectorsIdConnectorSourcesRequest.class, baseUrl, "/connectors/{id_connector}/sources", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "multipart");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PutConnectorsIdConnectorSourcesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutConnectorsIdConnectorSourcesResponse res = new org.openapis.openapi.models.operations.PutConnectorsIdConnectorSourcesResponse(contentType, httpRes.statusCode()) {{
            connectorSource = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConnectorSource out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConnectorSource.class);
                res.connectorSource = out;
            }
        }

        return res;
    }

    /**
     * Edit the provided connector source
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutConnectorsIdConnectorSourcesIdSourceResponse putConnectorsIdConnectorSourcesIdSource(org.openapis.openapi.models.operations.PutConnectorsIdConnectorSourcesIdSourceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutConnectorsIdConnectorSourcesIdSourceRequest.class, baseUrl, "/connectors/{id_connector}/sources/{id_source}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "multipart");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PutConnectorsIdConnectorSourcesIdSourceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutConnectorsIdConnectorSourcesIdSourceResponse res = new org.openapis.openapi.models.operations.PutConnectorsIdConnectorSourcesIdSourceResponse(contentType, httpRes.statusCode()) {{
            connectorSource = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConnectorSource out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConnectorSource.class);
                res.connectorSource = out;
            }
        }

        return res;
    }

    /**
     * Force synchronisation of a connection.
     * We suggest to pass parameter expand=accounts[transactions] to get all *new* and *updated* transactions.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutUsersIdUserConnectionsIdConnectionResponse putUsersIdUserConnectionsIdConnection(org.openapis.openapi.models.operations.PutUsersIdUserConnectionsIdConnectionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutUsersIdUserConnectionsIdConnectionRequest.class, baseUrl, "/users/{id_user}/connections/{id_connection}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PutUsersIdUserConnectionsIdConnectionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutUsersIdUserConnectionsIdConnectionResponse res = new org.openapis.openapi.models.operations.PutUsersIdUserConnectionsIdConnectionResponse(contentType, httpRes.statusCode()) {{
            connection = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Connection out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Connection.class);
                res.connection = out;
            }
        }

        return res;
    }

    /**
     * Update connection source
     * This endpoint is used to enable a source or force a synchronization on it.&lt;br&gt;&lt;br&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse putUsersIdUserConnectionsIdConnectionSourcesIdSource(org.openapis.openapi.models.operations.PutUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest.class, baseUrl, "/users/{id_user}/connections/{id_connection}/sources/{id_source}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "multipart");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PutUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse res = new org.openapis.openapi.models.operations.PutUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse(contentType, httpRes.statusCode()) {{
            connectionSource = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConnectionSource out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConnectionSource.class);
                res.connectionSource = out;
            }
        }

        return res;
    }
}