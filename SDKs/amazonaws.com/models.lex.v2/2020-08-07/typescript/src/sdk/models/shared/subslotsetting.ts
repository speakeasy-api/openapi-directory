/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Specifications } from "./specifications";
import { Expose, Transform } from "class-transformer";

/**
 * Specifications for the constituent sub slots and the expression for the composite slot.
 */
export class SubSlotSetting extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "expression" })
  expression?: string;

  @SpeakeasyMetadata({ elemType: Specifications })
  @Expose({ name: "slotSpecifications" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Specifications> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Specifications);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  slotSpecifications?: Record<string, Specifications>;
}
