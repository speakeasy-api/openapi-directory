/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Container - A Docker container.
 */
public class Container {
    /**
     * Arguments passed to the entrypoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("args")
    public String[] args;
    public Container withArgs(String[] args) {
        this.args = args;
        return this;
    }
    
    /**
     * If set, overrides the default ENTRYPOINT specified by the image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("command")
    public String[] command;
    public Container withCommand(String[] command) {
        this.command = command;
        return this;
    }
    
    /**
     * Environment variables passed to the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("env")
    public java.util.Map<String, String> env;
    public Container withEnv(java.util.Map<String, String> env) {
        this.env = env;
        return this;
    }
    
    /**
     * Docker image defining the container. This image must be accessible by the config's service account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public String image;
    public Container withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * If set, overrides the USER specified in the image with the given uid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runAsUser")
    public Integer runAsUser;
    public Container withRunAsUser(Integer runAsUser) {
        this.runAsUser = runAsUser;
        return this;
    }
    
    /**
     * If set, overrides the default DIR specified by the image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workingDir")
    public String workingDir;
    public Container withWorkingDir(String workingDir) {
        this.workingDir = workingDir;
        return this;
    }
    
}
