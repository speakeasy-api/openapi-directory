<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Corporate 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * View available permissions
     * 
     * View a list of available permissions for your corporate account. They are used when assigning permissions to your corporate users.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAvailableCorporatePermissionsResponse
     */
	public function getAvailableCorporatePermissions(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAvailableCorporatePermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/corporate/permissions');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAvailableCorporatePermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->permissionList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PermissionList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of available permissions for this corporate account. They are used when assigning permissions to corporate users.
     * 
     * Get a list of available permissions for this corporate account. They are used when assigning permissions to corporate users.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAvailableCorporatePermissionsByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAvailableCorporatePermissionsByIdResponse
     */
	public function getAvailableCorporatePermissionsById(
        \OpenAPI\OpenAPI\Models\Operations\GetAvailableCorporatePermissionsByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAvailableCorporatePermissionsByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/corporates/{corporateId}/permissions', \OpenAPI\OpenAPI\Models\Operations\GetAvailableCorporatePermissionsByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAvailableCorporatePermissionsByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->permissionList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PermissionList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View your corporate account
     * 
     * View the details of the corporate account that your user account belongs to.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCorporateResponse
     */
	public function getCorporate(
    ): \OpenAPI\OpenAPI\Models\Operations\GetCorporateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/corporate');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCorporateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->corporateAccount = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CorporateAccount', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get details of this corporate account
     * 
     * Get details of this corporate account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCorporateByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCorporateByIdResponse
     */
	public function getCorporateById(
        \OpenAPI\OpenAPI\Models\Operations\GetCorporateByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCorporateByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/corporates/{corporateId}', \OpenAPI\OpenAPI\Models\Operations\GetCorporateByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCorporateByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->corporateAccount = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CorporateAccount', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View user groups
     * 
     * View a list of user groups under my corporate account. User groups are a part of our RBAC implementation and can be used to configure complex permission scenarios.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCorporateUserGroupsResponse
     */
	public function getCorporateUserGroups(
    ): \OpenAPI\OpenAPI\Models\Operations\GetCorporateUserGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/corporate/user-groups');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCorporateUserGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userGroupList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserGroupList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of user groups for this corporate account
     * 
     * Get a list of user groups for this corporate account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCorporateUserGroupsByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCorporateUserGroupsByIdResponse
     */
	public function getCorporateUserGroupsById(
        \OpenAPI\OpenAPI\Models\Operations\GetCorporateUserGroupsByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCorporateUserGroupsByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/corporates/{corporateId}/user-groups', \OpenAPI\OpenAPI\Models\Operations\GetCorporateUserGroupsByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCorporateUserGroupsByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userGroupList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserGroupList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View users
     * 
     * View a list of users under your corporate account. This endpoint will only return information if your user account is permitted to view corporate account users, configured by your administrator.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCorporateUsersResponse
     */
	public function getCorporateUsers(
    ): \OpenAPI\OpenAPI\Models\Operations\GetCorporateUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/corporate/users');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCorporateUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of users for this corporate account
     * 
     * Get a list of users for this corporate account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCorporateUsersByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCorporateUsersByIdResponse
     */
	public function getCorporateUsersById(
        \OpenAPI\OpenAPI\Models\Operations\GetCorporateUsersByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCorporateUsersByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/corporates/{corporateId}/users', \OpenAPI\OpenAPI\Models\Operations\GetCorporateUsersByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCorporateUsersByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of corporate accounts
     * 
     * Get a list of corporate accounts
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCorporatesListResponse
     */
	public function getCorporatesList(
    ): \OpenAPI\OpenAPI\Models\Operations\GetCorporatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/corporates/all');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCorporatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->corporateAccounts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CorporateAccount>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create or update a user
     * 
     * Create or update a user under your corporate account. This endpoint requires permissions for corporate user management, configured by your administrator.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\UserUpdateContent $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SaveCorporateUserResponse
     */
	public function saveCorporateUser(
        \OpenAPI\OpenAPI\Models\Shared\UserUpdateContent $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SaveCorporateUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/corporate/users');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SaveCorporateUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create or update a corporate user group
     * 
     * Create or update a corporate user group
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\UserGroup $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SaveCorporateUserGroupResponse
     */
	public function saveCorporateUserGroup(
        \OpenAPI\OpenAPI\Models\Shared\UserGroup $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SaveCorporateUserGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/corporate/user-groups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SaveCorporateUserGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create or update a corporate user group for this corporate account
     * 
     * Create or update a corporate user group for this corporate account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SaveCorporateUserGroupByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SaveCorporateUserGroupByIdResponse
     */
	public function saveCorporateUserGroupById(
        \OpenAPI\OpenAPI\Models\Operations\SaveCorporateUserGroupByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SaveCorporateUserGroupByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/corporates/{corporateId}/user-groups', \OpenAPI\OpenAPI\Models\Operations\SaveCorporateUserGroupByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userGroup", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SaveCorporateUserGroupByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserGroup', 'json');
            }
        }

        return $response;
    }
}