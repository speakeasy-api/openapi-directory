/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class RoleMapper {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete realm-level role mappings
   */
  deleteRealmGroupsIdRoleMappingsRealm(
    req: operations.DeleteRealmGroupsIdRoleMappingsRealmRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmGroupsIdRoleMappingsRealmResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRealmGroupsIdRoleMappingsRealmRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/groups/{id}/role-mappings/realm",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmGroupsIdRoleMappingsRealmResponse =
        new operations.DeleteRealmGroupsIdRoleMappingsRealmResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Delete realm-level role mappings
   */
  deleteRealmUsersIdRoleMappingsRealm(
    req: operations.DeleteRealmUsersIdRoleMappingsRealmRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmUsersIdRoleMappingsRealmResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRealmUsersIdRoleMappingsRealmRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/role-mappings/realm",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmUsersIdRoleMappingsRealmResponse =
        new operations.DeleteRealmUsersIdRoleMappingsRealmResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Get role mappings
   */
  getRealmGroupsIdRoleMappings(
    req: operations.GetRealmGroupsIdRoleMappingsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmGroupsIdRoleMappingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmGroupsIdRoleMappingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/groups/{id}/role-mappings",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmGroupsIdRoleMappingsResponse =
        new operations.GetRealmGroupsIdRoleMappingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mappingsRepresentation = utils.objectToClass(
              httpRes?.data,
              shared.MappingsRepresentation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get realm-level role mappings
   */
  getRealmGroupsIdRoleMappingsRealm(
    req: operations.GetRealmGroupsIdRoleMappingsRealmRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmGroupsIdRoleMappingsRealmResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmGroupsIdRoleMappingsRealmRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/groups/{id}/role-mappings/realm",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmGroupsIdRoleMappingsRealmResponse =
        new operations.GetRealmGroupsIdRoleMappingsRealmResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get realm-level roles that can be mapped
   */
  getRealmGroupsIdRoleMappingsRealmAvailable(
    req: operations.GetRealmGroupsIdRoleMappingsRealmAvailableRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmGroupsIdRoleMappingsRealmAvailableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmGroupsIdRoleMappingsRealmAvailableRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/groups/{id}/role-mappings/realm/available",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmGroupsIdRoleMappingsRealmAvailableResponse =
        new operations.GetRealmGroupsIdRoleMappingsRealmAvailableResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get effective realm-level role mappings   This will recurse all composite roles to get the result.
   */
  getRealmGroupsIdRoleMappingsRealmComposite(
    req: operations.GetRealmGroupsIdRoleMappingsRealmCompositeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmGroupsIdRoleMappingsRealmCompositeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmGroupsIdRoleMappingsRealmCompositeRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/groups/{id}/role-mappings/realm/composite",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmGroupsIdRoleMappingsRealmCompositeResponse =
        new operations.GetRealmGroupsIdRoleMappingsRealmCompositeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get role mappings
   */
  getRealmUsersIdRoleMappings(
    req: operations.GetRealmUsersIdRoleMappingsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmUsersIdRoleMappingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmUsersIdRoleMappingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/role-mappings",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmUsersIdRoleMappingsResponse =
        new operations.GetRealmUsersIdRoleMappingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mappingsRepresentation = utils.objectToClass(
              httpRes?.data,
              shared.MappingsRepresentation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get realm-level role mappings
   */
  getRealmUsersIdRoleMappingsRealm(
    req: operations.GetRealmUsersIdRoleMappingsRealmRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmUsersIdRoleMappingsRealmResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmUsersIdRoleMappingsRealmRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/role-mappings/realm",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmUsersIdRoleMappingsRealmResponse =
        new operations.GetRealmUsersIdRoleMappingsRealmResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get realm-level roles that can be mapped
   */
  getRealmUsersIdRoleMappingsRealmAvailable(
    req: operations.GetRealmUsersIdRoleMappingsRealmAvailableRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmUsersIdRoleMappingsRealmAvailableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmUsersIdRoleMappingsRealmAvailableRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/role-mappings/realm/available",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmUsersIdRoleMappingsRealmAvailableResponse =
        new operations.GetRealmUsersIdRoleMappingsRealmAvailableResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get effective realm-level role mappings   This will recurse all composite roles to get the result.
   */
  getRealmUsersIdRoleMappingsRealmComposite(
    req: operations.GetRealmUsersIdRoleMappingsRealmCompositeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmUsersIdRoleMappingsRealmCompositeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmUsersIdRoleMappingsRealmCompositeRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/role-mappings/realm/composite",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmUsersIdRoleMappingsRealmCompositeResponse =
        new operations.GetRealmUsersIdRoleMappingsRealmCompositeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add realm-level role mappings to the user
   */
  postRealmGroupsIdRoleMappingsRealm(
    req: operations.PostRealmGroupsIdRoleMappingsRealmRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmGroupsIdRoleMappingsRealmResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmGroupsIdRoleMappingsRealmRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/groups/{id}/role-mappings/realm",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmGroupsIdRoleMappingsRealmResponse =
        new operations.PostRealmGroupsIdRoleMappingsRealmResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Add realm-level role mappings to the user
   */
  postRealmUsersIdRoleMappingsRealm(
    req: operations.PostRealmUsersIdRoleMappingsRealmRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmUsersIdRoleMappingsRealmResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmUsersIdRoleMappingsRealmRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/users/{id}/role-mappings/realm",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmUsersIdRoleMappingsRealmResponse =
        new operations.PostRealmUsersIdRoleMappingsRealmResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }
}
