/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Welcome specific methods
 */
export class Welcome {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Links a callback url to a user.
   *
   */
  addwebhook(
    req: operations.AddwebhookRequest,
    security: operations.AddwebhookSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddwebhookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddwebhookRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/addwebhook";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddwebhookSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddwebhookResponse =
        new operations.AddwebhookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naWelcomeWebhookResponse = utils.objectToClass(
              httpRes?.data,
              shared.NAWelcomeWebhookResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Dissociates a webhook from a user.
   *
   */
  dropwebhook(
    req: operations.DropwebhookRequest,
    security: operations.DropwebhookSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DropwebhookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DropwebhookRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/dropwebhook";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DropwebhookSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DropwebhookResponse =
        new operations.DropwebhookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naWelcomeWebhookResponse = utils.objectToClass(
              httpRes?.data,
              shared.NAWelcomeWebhookResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the snapshot associated to an event.
   *
   */
  getcamerapicture(
    req: operations.GetcamerapictureRequest,
    security: operations.GetcamerapictureSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetcamerapictureResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetcamerapictureRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getcamerapicture";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetcamerapictureSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetcamerapictureResponse =
        new operations.GetcamerapictureResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getcamerapicture200ApplicationJSONByteString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the snapshot associated to an event.
   *
   */
  geteventsuntil(
    req: operations.GeteventsuntilRequest,
    security: operations.GeteventsuntilSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GeteventsuntilResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GeteventsuntilRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/geteventsuntil";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GeteventsuntilSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GeteventsuntilResponse =
        new operations.GeteventsuntilResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naWelcomeEventResponse = utils.objectToClass(
              httpRes?.data,
              shared.NAWelcomeEventResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns information about users homes and cameras.
   *
   */
  gethomedata(
    req: operations.GethomedataRequest,
    security: operations.GethomedataSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GethomedataResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GethomedataRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/gethomedata";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GethomedataSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GethomedataResponse =
        new operations.GethomedataResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naWelcomeHomeDataResponse = utils.objectToClass(
              httpRes?.data,
              shared.NAWelcomeHomeDataResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns most recent events.
   *
   */
  getlasteventof(
    req: operations.GetlasteventofRequest,
    security: operations.GetlasteventofSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetlasteventofResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetlasteventofRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getlasteventof";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetlasteventofSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetlasteventofResponse =
        new operations.GetlasteventofResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naWelcomeEventResponse = utils.objectToClass(
              httpRes?.data,
              shared.NAWelcomeEventResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns previous events.
   *
   */
  getnextevents(
    req: operations.GetnexteventsRequest,
    security: operations.GetnexteventsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetnexteventsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetnexteventsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getnextevents";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetnexteventsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetnexteventsResponse =
        new operations.GetnexteventsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naWelcomeEventResponse = utils.objectToClass(
              httpRes?.data,
              shared.NAWelcomeEventResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets a person as 'Away' or the Home as 'Empty'. The event will be added to the user’s timeline.
   *
   */
  setpersonsaway(
    req: operations.SetpersonsawayRequest,
    security: operations.SetpersonsawaySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SetpersonsawayResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SetpersonsawayRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setpersonsaway";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SetpersonsawaySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SetpersonsawayResponse =
        new operations.SetpersonsawayResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naWelcomePersonsAwayResponse = utils.objectToClass(
              httpRes?.data,
              shared.NAWelcomePersonsAwayResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets a person as 'At home'.
   *
   */
  setpersonshome(
    req: operations.SetpersonshomeRequest,
    security: operations.SetpersonshomeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SetpersonshomeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SetpersonshomeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setpersonshome";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SetpersonshomeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SetpersonshomeResponse =
        new operations.SetpersonshomeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naWelcomePersonsHomeResponse = utils.objectToClass(
              httpRes?.data,
              shared.NAWelcomePersonsHomeResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
