"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Images:
    r"""Images are blueprints for your VM disks. They can be of different types:
    
    ### System Images
    Distribution Images maintained by us, e.g. “Ubuntu 20.04”
    
    ### Snapshot Images
    Maintained by you, for example “Ubuntu 20.04 with my own settings”. These are billed per GB per month.
    
    ### Backup Images
    Daily Backups of your Server. Will automatically be created for Servers which have backups enabled (`POST /servers/{id}/actions/enable_backup`)
    
    Bound to exactly one Server. If you delete the Server, you also delete all backups bound to it. You may convert backup Images to snapshot Images to keep them.
    
    These are billed at 20% of your instance price for 7 backup slots.
    
    ### App Images
    Prebuild images with specific software configurations, e.g. “Wordpress”. All app images are created by us.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_images_id_(self, request: operations.DeleteImagesIDRequest) -> operations.DeleteImagesIDResponse:
        r"""Delete an Image
        Deletes an Image. Only Images of type `snapshot` and `backup` can be deleted.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteImagesIDRequest, base_url, '/images/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteImagesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_images(self, request: operations.GetImagesRequest) -> operations.GetImagesResponse:
        r"""Get all Images
        Returns all Image objects. You can select specific Image types only and sort the results by using URI parameters.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/images'
        
        query_params = utils.get_query_params(operations.GetImagesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetImagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetImages200ApplicationJSON])
                res.get_images_200_application_json_object = out

        return res

    def get_images_id_(self, request: operations.GetImagesIDRequest) -> operations.GetImagesIDResponse:
        r"""Get an Image
        Returns a specific Image object.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetImagesIDRequest, base_url, '/images/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetImagesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetImagesID200ApplicationJSON])
                res.get_images_id_200_application_json_object = out

        return res

    def put_images_id_(self, request: operations.PutImagesIDRequest) -> operations.PutImagesIDResponse:
        r"""Update an Image
        Updates the Image. You may change the description, convert a Backup Image to a Snapshot Image or change the Image labels. Only Images of type `snapshot` and `backup` can be updated.
        
        Note that when updating labels, the current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutImagesIDRequest, base_url, '/images/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutImagesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutImagesID200ApplicationJSON])
                res.put_images_id_200_application_json_object = out

        return res

    