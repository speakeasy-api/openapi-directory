"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Promooffer:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def books_promooffer_accept(self, request: operations.BooksPromoofferAcceptRequest, security: operations.BooksPromoofferAcceptSecurity) -> operations.BooksPromoofferAcceptResponse:
        r"""Accepts the promo offer."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/books/v1/promooffer/accept'
        
        query_params = utils.get_query_params(operations.BooksPromoofferAcceptRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksPromoofferAcceptResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def books_promooffer_dismiss(self, request: operations.BooksPromoofferDismissRequest, security: operations.BooksPromoofferDismissSecurity) -> operations.BooksPromoofferDismissResponse:
        r"""Marks the promo offer as dismissed."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/books/v1/promooffer/dismiss'
        
        query_params = utils.get_query_params(operations.BooksPromoofferDismissRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksPromoofferDismissResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def books_promooffer_get(self, request: operations.BooksPromoofferGetRequest, security: operations.BooksPromoofferGetSecurity) -> operations.BooksPromoofferGetResponse:
        r"""Returns a list of promo offers available to the user"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/books/v1/promooffer/get'
        
        query_params = utils.get_query_params(operations.BooksPromoofferGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksPromoofferGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Offers])
                res.offers = out

        return res

    