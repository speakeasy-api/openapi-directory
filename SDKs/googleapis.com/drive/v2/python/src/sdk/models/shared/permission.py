"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PermissionInput:
    r"""A permission for a file."""
    
    additional_roles: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalRoles'), 'exclude': lambda f: f is None }})
    r"""Additional roles for this user. Only commenter is currently allowed, though more may be supported in the future."""  
    auth_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authKey'), 'exclude': lambda f: f is None }})
    r"""Deprecated."""  
    deleted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted'), 'exclude': lambda f: f is None }})
    r"""Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions."""  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})
    r"""The domain name of the entity this permission refers to. This is an output-only field which is present when the permission type is user, group or domain."""  
    email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailAddress'), 'exclude': lambda f: f is None }})
    r"""The email address of the user or group this permission refers to. This is an output-only field which is present when the permission type is user or group."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""The ETag of the permission."""  
    expiration_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expirationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time at which this permission will expire (RFC 3339 date-time). Expiration dates have the following restrictions:
    - They cannot be set on shared drive items 
    - They can only be set on user and group permissions 
    - The date must be in the future 
    - The date cannot be more than a year in the future
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the user this permission refers to, and identical to the permissionId in the About and Files resources. When making a drive.permissions.insert request, exactly one of the id or value fields must be specified unless the permission type is anyone, in which case both id and value are ignored."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""This is always drive#permission."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name for this permission."""  
    pending_owner: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pendingOwner'), 'exclude': lambda f: f is None }})
    r"""Whether the account associated with this permission is a pending owner. Only populated for user type permissions for files that are not in a shared drive."""  
    photo_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photoLink'), 'exclude': lambda f: f is None }})
    r"""A link to the profile photo, if available."""  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""The primary role for this user. While new values may be supported in the future, the following are currently allowed:
    - owner 
    - organizer 
    - fileOrganizer 
    - writer 
    - reader
    """  
    self_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selfLink'), 'exclude': lambda f: f is None }})
    r"""A link back to this permission."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The account type. Allowed values are:
    - user 
    - group 
    - domain 
    - anyone
    """  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""The email address or domain name for the entity. This is used during inserts and is not populated in responses. When making a drive.permissions.insert request, exactly one of the id or value fields must be specified unless the permission type is anyone, in which case both id and value are ignored."""  
    view: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view'), 'exclude': lambda f: f is None }})
    r"""Indicates the view for this permission. Only populated for permissions that belong to a view. published is the only supported value."""  
    with_link: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('withLink'), 'exclude': lambda f: f is None }})
    r"""Whether the link is required for this permission."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PermissionPermissionDetails:
    
    additional_roles: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalRoles'), 'exclude': lambda f: f is None }})
    r"""Additional roles for this user. Only commenter is currently possible, though more may be supported in the future."""  
    inherited: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inherited'), 'exclude': lambda f: f is None }})
    r"""Whether this permission is inherited. This field is always populated. This is an output-only field."""  
    inherited_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inheritedFrom'), 'exclude': lambda f: f is None }})
    r"""The ID of the item from which this permission is inherited. This is an output-only field."""  
    permission_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissionType'), 'exclude': lambda f: f is None }})
    r"""The permission type for this user. While new values may be added in future, the following are currently possible:
    - file 
    - member
    """  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""The primary role for this user. While new values may be added in the future, the following are currently possible:
    - organizer 
    - fileOrganizer 
    - writer 
    - reader
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PermissionTeamDrivePermissionDetails:
    
    additional_roles: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalRoles'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use permissionDetails/additionalRoles instead."""  
    inherited: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inherited'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use permissionDetails/inherited instead."""  
    inherited_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inheritedFrom'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use permissionDetails/inheritedFrom instead."""  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use permissionDetails/role instead."""  
    team_drive_permission_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teamDrivePermissionType'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use permissionDetails/permissionType instead."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Permission:
    r"""A permission for a file."""
    
    additional_roles: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalRoles'), 'exclude': lambda f: f is None }})
    r"""Additional roles for this user. Only commenter is currently allowed, though more may be supported in the future."""  
    auth_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authKey'), 'exclude': lambda f: f is None }})
    r"""Deprecated."""  
    deleted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted'), 'exclude': lambda f: f is None }})
    r"""Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions."""  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})
    r"""The domain name of the entity this permission refers to. This is an output-only field which is present when the permission type is user, group or domain."""  
    email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailAddress'), 'exclude': lambda f: f is None }})
    r"""The email address of the user or group this permission refers to. This is an output-only field which is present when the permission type is user or group."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""The ETag of the permission."""  
    expiration_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expirationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time at which this permission will expire (RFC 3339 date-time). Expiration dates have the following restrictions:
    - They cannot be set on shared drive items 
    - They can only be set on user and group permissions 
    - The date must be in the future 
    - The date cannot be more than a year in the future
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the user this permission refers to, and identical to the permissionId in the About and Files resources. When making a drive.permissions.insert request, exactly one of the id or value fields must be specified unless the permission type is anyone, in which case both id and value are ignored."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""This is always drive#permission."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name for this permission."""  
    pending_owner: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pendingOwner'), 'exclude': lambda f: f is None }})
    r"""Whether the account associated with this permission is a pending owner. Only populated for user type permissions for files that are not in a shared drive."""  
    permission_details: Optional[list[PermissionPermissionDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissionDetails'), 'exclude': lambda f: f is None }})
    r"""Details of whether the permissions on this shared drive item are inherited or directly on this item. This is an output-only field which is present only for shared drive items."""  
    photo_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photoLink'), 'exclude': lambda f: f is None }})
    r"""A link to the profile photo, if available."""  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""The primary role for this user. While new values may be supported in the future, the following are currently allowed:
    - owner 
    - organizer 
    - fileOrganizer 
    - writer 
    - reader
    """  
    self_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selfLink'), 'exclude': lambda f: f is None }})
    r"""A link back to this permission."""  
    team_drive_permission_details: Optional[list[PermissionTeamDrivePermissionDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teamDrivePermissionDetails'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use permissionDetails instead."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The account type. Allowed values are:
    - user 
    - group 
    - domain 
    - anyone
    """  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""The email address or domain name for the entity. This is used during inserts and is not populated in responses. When making a drive.permissions.insert request, exactly one of the id or value fields must be specified unless the permission type is anyone, in which case both id and value are ignored."""  
    view: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view'), 'exclude': lambda f: f is None }})
    r"""Indicates the view for this permission. Only populated for permissions that belong to a view. published is the only supported value."""  
    with_link: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('withLink'), 'exclude': lambda f: f is None }})
    r"""Whether the link is required for this permission."""  
    