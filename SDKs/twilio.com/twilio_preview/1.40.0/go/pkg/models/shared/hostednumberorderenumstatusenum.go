// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// HostedNumberOrderEnumStatusEnum - The Status of this HostedNumberOrder. One of `received`, `pending-verification`, `verified`, `pending-loa`, `carrier-processing`, `testing`, `completed`, `failed`, or `action-required`.
type HostedNumberOrderEnumStatusEnum string

const (
	HostedNumberOrderEnumStatusEnumReceived            HostedNumberOrderEnumStatusEnum = "received"
	HostedNumberOrderEnumStatusEnumPendingVerification HostedNumberOrderEnumStatusEnum = "pending-verification"
	HostedNumberOrderEnumStatusEnumVerified            HostedNumberOrderEnumStatusEnum = "verified"
	HostedNumberOrderEnumStatusEnumPendingLoa          HostedNumberOrderEnumStatusEnum = "pending-loa"
	HostedNumberOrderEnumStatusEnumCarrierProcessing   HostedNumberOrderEnumStatusEnum = "carrier-processing"
	HostedNumberOrderEnumStatusEnumTesting             HostedNumberOrderEnumStatusEnum = "testing"
	HostedNumberOrderEnumStatusEnumCompleted           HostedNumberOrderEnumStatusEnum = "completed"
	HostedNumberOrderEnumStatusEnumFailed              HostedNumberOrderEnumStatusEnum = "failed"
	HostedNumberOrderEnumStatusEnumActionRequired      HostedNumberOrderEnumStatusEnum = "action-required"
)

func (e *HostedNumberOrderEnumStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "received":
		fallthrough
	case "pending-verification":
		fallthrough
	case "verified":
		fallthrough
	case "pending-loa":
		fallthrough
	case "carrier-processing":
		fallthrough
	case "testing":
		fallthrough
	case "completed":
		fallthrough
	case "failed":
		fallthrough
	case "action-required":
		*e = HostedNumberOrderEnumStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for HostedNumberOrderEnumStatusEnum: %s", s)
	}
}
