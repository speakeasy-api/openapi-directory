// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// CalculateRouteMatrixRequestBodyCarModeOptions - Contains details about additional route preferences for requests that specify <code>TravelMode</code> as <code>Car</code>.
type CalculateRouteMatrixRequestBodyCarModeOptions struct {
	AvoidFerries *bool `json:"AvoidFerries,omitempty"`
	AvoidTolls   *bool `json:"AvoidTolls,omitempty"`
}

// CalculateRouteMatrixRequestBodyDistanceUnitEnum - <p>Set the unit system to specify the distance.</p> <p>Default Value: <code>Kilometers</code> </p>
type CalculateRouteMatrixRequestBodyDistanceUnitEnum string

const (
	CalculateRouteMatrixRequestBodyDistanceUnitEnumKilometers CalculateRouteMatrixRequestBodyDistanceUnitEnum = "Kilometers"
	CalculateRouteMatrixRequestBodyDistanceUnitEnumMiles      CalculateRouteMatrixRequestBodyDistanceUnitEnum = "Miles"
)

func (e CalculateRouteMatrixRequestBodyDistanceUnitEnum) ToPointer() *CalculateRouteMatrixRequestBodyDistanceUnitEnum {
	return &e
}

func (e *CalculateRouteMatrixRequestBodyDistanceUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Kilometers":
		fallthrough
	case "Miles":
		*e = CalculateRouteMatrixRequestBodyDistanceUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CalculateRouteMatrixRequestBodyDistanceUnitEnum: %v", v)
	}
}

// CalculateRouteMatrixRequestBodyTravelModeEnum - <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p> <p>The <code>TravelMode</code> you specify also determines how you specify route preferences: </p> <ul> <li> <p>If traveling by <code>Car</code> use the <code>CarModeOptions</code> parameter.</p> </li> <li> <p>If traveling by <code>Truck</code> use the <code>TruckModeOptions</code> parameter.</p> </li> </ul> <note> <p> <code>Bicycle</code> or <code>Motorcycle</code> are only valid when using <code>Grab</code> as a data provider, and only within Southeast Asia.</p> <p> <code>Truck</code> is not available for Grab.</p> <p>For more information about using Grab as a data provider, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/grab.html">GrabMaps</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </note> <p>Default Value: <code>Car</code> </p>
type CalculateRouteMatrixRequestBodyTravelModeEnum string

const (
	CalculateRouteMatrixRequestBodyTravelModeEnumCar        CalculateRouteMatrixRequestBodyTravelModeEnum = "Car"
	CalculateRouteMatrixRequestBodyTravelModeEnumTruck      CalculateRouteMatrixRequestBodyTravelModeEnum = "Truck"
	CalculateRouteMatrixRequestBodyTravelModeEnumWalking    CalculateRouteMatrixRequestBodyTravelModeEnum = "Walking"
	CalculateRouteMatrixRequestBodyTravelModeEnumBicycle    CalculateRouteMatrixRequestBodyTravelModeEnum = "Bicycle"
	CalculateRouteMatrixRequestBodyTravelModeEnumMotorcycle CalculateRouteMatrixRequestBodyTravelModeEnum = "Motorcycle"
)

func (e CalculateRouteMatrixRequestBodyTravelModeEnum) ToPointer() *CalculateRouteMatrixRequestBodyTravelModeEnum {
	return &e
}

func (e *CalculateRouteMatrixRequestBodyTravelModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Car":
		fallthrough
	case "Truck":
		fallthrough
	case "Walking":
		fallthrough
	case "Bicycle":
		fallthrough
	case "Motorcycle":
		*e = CalculateRouteMatrixRequestBodyTravelModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CalculateRouteMatrixRequestBodyTravelModeEnum: %v", v)
	}
}

// CalculateRouteMatrixRequestBodyTruckModeOptions - Contains details about additional route preferences for requests that specify <code>TravelMode</code> as <code>Truck</code>.
type CalculateRouteMatrixRequestBodyTruckModeOptions struct {
	AvoidFerries *bool                   `json:"AvoidFerries,omitempty"`
	AvoidTolls   *bool                   `json:"AvoidTolls,omitempty"`
	Dimensions   *shared.TruckDimensions `json:"Dimensions,omitempty"`
	Weight       *shared.TruckWeight     `json:"Weight,omitempty"`
}

type CalculateRouteMatrixRequestBody struct {
	// Contains details about additional route preferences for requests that specify <code>TravelMode</code> as <code>Car</code>.
	CarModeOptions *CalculateRouteMatrixRequestBodyCarModeOptions `json:"CarModeOptions,omitempty"`
	// <p>Sets the time of departure as the current time. Uses the current time to calculate the route matrix. You can't set both <code>DepartureTime</code> and <code>DepartNow</code>. If neither is set, the best time of day to travel with the best traffic conditions is used to calculate the route matrix.</p> <p>Default Value: <code>false</code> </p> <p>Valid Values: <code>false</code> | <code>true</code> </p>
	DepartNow *bool `json:"DepartNow,omitempty"`
	// <p>The list of departure (origin) positions for the route matrix. An array of points, each of which is itself a 2-value array defined in <a href="https://earth-info.nga.mil/GandG/wgs84/index.html">WGS 84</a> format: <code>[longitude, latitude]</code>. For example, <code>[-123.115, 49.285]</code>.</p> <important> <p>Depending on the data provider selected in the route calculator resource there may be additional restrictions on the inputs you can choose. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html#matrix-routing-position-limits"> Position restrictions</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </important> <note> <p>For route calculators that use Esri as the data provider, if you specify a departure that's not located on a road, Amazon Location <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html"> moves the position to the nearest road</a>. The snapped value is available in the result in <code>SnappedDeparturePositions</code>.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
	DeparturePositions [][]float64 `json:"DeparturePositions"`
	// <p>Specifies the desired time of departure. Uses the given time to calculate the route matrix. You can't set both <code>DepartureTime</code> and <code>DepartNow</code>. If neither is set, the best time of day to travel with the best traffic conditions is used to calculate the route matrix.</p> <note> <p>Setting a departure time in the past returns a <code>400 ValidationException</code> error.</p> </note> <ul> <li> <p>In <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. For example, <code>2020â€“07-2T12:15:20.000Z+01:00</code> </p> </li> </ul>
	DepartureTime *time.Time `json:"DepartureTime,omitempty"`
	// <p>The list of destination positions for the route matrix. An array of points, each of which is itself a 2-value array defined in <a href="https://earth-info.nga.mil/GandG/wgs84/index.html">WGS 84</a> format: <code>[longitude, latitude]</code>. For example, <code>[-122.339, 47.615]</code> </p> <important> <p>Depending on the data provider selected in the route calculator resource there may be additional restrictions on the inputs you can choose. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html#matrix-routing-position-limits"> Position restrictions</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </important> <note> <p>For route calculators that use Esri as the data provider, if you specify a destination that's not located on a road, Amazon Location <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html"> moves the position to the nearest road</a>. The snapped value is available in the result in <code>SnappedDestinationPositions</code>.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
	DestinationPositions [][]float64 `json:"DestinationPositions"`
	// <p>Set the unit system to specify the distance.</p> <p>Default Value: <code>Kilometers</code> </p>
	DistanceUnit *CalculateRouteMatrixRequestBodyDistanceUnitEnum `json:"DistanceUnit,omitempty"`
	// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p> <p>The <code>TravelMode</code> you specify also determines how you specify route preferences: </p> <ul> <li> <p>If traveling by <code>Car</code> use the <code>CarModeOptions</code> parameter.</p> </li> <li> <p>If traveling by <code>Truck</code> use the <code>TruckModeOptions</code> parameter.</p> </li> </ul> <note> <p> <code>Bicycle</code> or <code>Motorcycle</code> are only valid when using <code>Grab</code> as a data provider, and only within Southeast Asia.</p> <p> <code>Truck</code> is not available for Grab.</p> <p>For more information about using Grab as a data provider, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/grab.html">GrabMaps</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </note> <p>Default Value: <code>Car</code> </p>
	TravelMode *CalculateRouteMatrixRequestBodyTravelModeEnum `json:"TravelMode,omitempty"`
	// Contains details about additional route preferences for requests that specify <code>TravelMode</code> as <code>Truck</code>.
	TruckModeOptions *CalculateRouteMatrixRequestBodyTruckModeOptions `json:"TruckModeOptions,omitempty"`
}

type CalculateRouteMatrixRequest struct {
	// The name of the route calculator resource that you want to use to calculate the route matrix.
	CalculatorName    string                          `pathParam:"style=simple,explode=false,name=CalculatorName"`
	RequestBody       CalculateRouteMatrixRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CalculateRouteMatrixResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// Success
	CalculateRouteMatrixResponse *shared.CalculateRouteMatrixResponse
	ContentType                  string
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
