<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TerminalOrdersCompanyLevel 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get a list of billing entities
     * 
     * Returns the billing entities of the company identified in the path and all merchant accounts belonging to the company.
     * A billing entity is a legal entity where we charge orders to. An order for terminal products must contain the ID of a billing entity.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdBillingEntitiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdBillingEntitiesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdBillingEntitiesResponse
     */
	public function getCompaniesCompanyIdBillingEntities(
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdBillingEntitiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdBillingEntitiesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdBillingEntitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/billingEntities', \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdBillingEntitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdBillingEntitiesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdBillingEntitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->billingEntitiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BillingEntitiesResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of shipping locations
     * 
     * Returns the shipping locations for the company identified in the path and all merchant accounts belonging to the company.
     * A shipping location includes the address where orders can be delivered, and an ID which you need to specify when ordering terminal products.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdShippingLocationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdShippingLocationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdShippingLocationsResponse
     */
	public function getCompaniesCompanyIdShippingLocations(
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdShippingLocationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdShippingLocationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdShippingLocationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/shippingLocations', \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdShippingLocationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdShippingLocationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdShippingLocationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shippingLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ShippingLocationsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of terminal models
     * 
     * Returns a list of payment terminal models that the company identified in the path has access to.
     * The response includes the terminal model ID, which can be used as a query parameter when getting a list of terminals or a list of products for ordering.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalModelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalModelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalModelsResponse
     */
	public function getCompaniesCompanyIdTerminalModels(
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalModelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalModelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalModelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/terminalModels', \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalModelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalModelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminalModelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TerminalModelsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of orders
     * 
     * Returns a lists of terminal products orders for the company identified in the path.
     * To filter the list, use one or more of the query parameters.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersResponse
     */
	public function getCompaniesCompanyIdTerminalOrders(
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/terminalOrders', \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminalOrdersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TerminalOrdersResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an order
     * 
     * Returns the details of the terminal products order identified in the path.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersOrderIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersOrderIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersOrderIdResponse
     */
	public function getCompaniesCompanyIdTerminalOrdersOrderId(
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersOrderIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersOrderIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersOrderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/terminalOrders/{orderId}', \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersOrderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalOrdersOrderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminalOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TerminalOrder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of terminal products
     * 
     * Returns a country-specific list of payment terminal packages and parts that the company identified in the path has access to.
     *  
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalProductsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalProductsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalProductsResponse
     */
	public function getCompaniesCompanyIdTerminalProducts(
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalProductsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalProductsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalProductsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/terminalProducts', \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalProductsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalProductsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalProductsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminalProductsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TerminalProductsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an order
     * 
     * Updates the terminal products order identified in the path.
     * Updating is only possible while the order has the status **Placed**.
     * 
     * The request body only needs to contain what you want to change. 
     * However, to update the products in the `items` array, you must provide the entire array. For example, if the array has three items:
     *  To remove one item, the array must include the remaining two items. Or to add one item, the array must include all four items.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchCompaniesCompanyIdTerminalOrdersOrderIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchCompaniesCompanyIdTerminalOrdersOrderIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchCompaniesCompanyIdTerminalOrdersOrderIdResponse
     */
	public function patchCompaniesCompanyIdTerminalOrdersOrderId(
        \OpenAPI\OpenAPI\Models\Operations\PatchCompaniesCompanyIdTerminalOrdersOrderIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchCompaniesCompanyIdTerminalOrdersOrderIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchCompaniesCompanyIdTerminalOrdersOrderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/terminalOrders/{orderId}', \OpenAPI\OpenAPI\Models\Operations\PatchCompaniesCompanyIdTerminalOrdersOrderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "terminalOrderRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchCompaniesCompanyIdTerminalOrdersOrderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminalOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TerminalOrder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a shipping location
     * 
     * Creates a shipping location for the company identified in the path. A shipping location defines an address where orders can be delivered.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdShippingLocationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdShippingLocationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdShippingLocationsResponse
     */
	public function postCompaniesCompanyIdShippingLocations(
        \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdShippingLocationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdShippingLocationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdShippingLocationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/shippingLocations', \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdShippingLocationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "shippingLocation", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdShippingLocationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shippingLocation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ShippingLocation', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an order
     * 
     * Creates an order for payment terminal products for the company identified in the path.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdTerminalOrdersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdTerminalOrdersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdTerminalOrdersResponse
     */
	public function postCompaniesCompanyIdTerminalOrders(
        \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdTerminalOrdersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdTerminalOrdersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdTerminalOrdersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/terminalOrders', \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdTerminalOrdersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "terminalOrderRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdTerminalOrdersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminalOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TerminalOrder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancel an order
     * 
     * Cancels the terminal products order identified in the path.
     * Cancelling is only possible while the order has the status **Placed**.
     * To cancel an order, make a POST call without a request body. The response returns the full order details, but with the status changed to **Cancelled**.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal ordering read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdTerminalOrdersOrderIdCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdTerminalOrdersOrderIdCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdTerminalOrdersOrderIdCancelResponse
     */
	public function postCompaniesCompanyIdTerminalOrdersOrderIdCancel(
        \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdTerminalOrdersOrderIdCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdTerminalOrdersOrderIdCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdTerminalOrdersOrderIdCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/terminalOrders/{orderId}/cancel', \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdTerminalOrdersOrderIdCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdTerminalOrdersOrderIdCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminalOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TerminalOrder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
}