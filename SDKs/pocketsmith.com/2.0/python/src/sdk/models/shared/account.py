"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import scenario as shared_scenario
from ..shared import transactionaccount as shared_transactionaccount
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AccountTypeEnum(str, Enum):
    r"""The type of the account."""
    BANK = 'bank'
    CREDITS = 'credits'
    CASH = 'cash'
    STOCKS = 'stocks'
    MORTGAGE = 'mortgage'
    LOANS = 'loans'
    VEHICLE = 'vehicle'
    PROPERTY = 'property'
    INSURANCE = 'insurance'
    OTHER_ASSET = 'other_asset'
    OTHER_LIABILITY = 'other_liability'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Account:
    r"""Success"""
    
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""When the account was created."""  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency_code'), 'exclude': lambda f: f is None }})
    r"""The currency code for the account."""  
    current_balance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_balance'), 'exclude': lambda f: f is None }})
    r"""The current balance of the account."""  
    current_balance_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_balance_date'), 'exclude': lambda f: f is None }})
    r"""The date of the current balance."""  
    current_balance_exchange_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_balance_exchange_rate'), 'exclude': lambda f: f is None }})
    r"""The exchange rate between the account's currency and the user's base currency, when different. If the currencies are the same, null is returned."""  
    current_balance_in_base_currency: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_balance_in_base_currency'), 'exclude': lambda f: f is None }})
    r"""The current balance of the account in the user's base currency."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the account."""  
    is_net_worth: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_net_worth'), 'exclude': lambda f: f is None }})
    r"""Whether the account is a net worth asset."""  
    primary_scenario: Optional[shared_scenario.Scenario] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_scenario'), 'exclude': lambda f: f is None }})  
    primary_transaction_account: Optional[shared_transactionaccount.TransactionAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_transaction_account'), 'exclude': lambda f: f is None }})  
    safe_balance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('safe_balance'), 'exclude': lambda f: f is None }})
    r"""The current safe balance, if safe balance is activated on the account. If safe balance is not activated, then null is returned."""  
    safe_balance_in_base_currency: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('safe_balance_in_base_currency'), 'exclude': lambda f: f is None }})
    r"""The current safe balance in the user's base currency, if safe balance is activated on the account. If safe balance is not activated, then null is returned."""  
    scenarios: Optional[list[shared_scenario.Scenario]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scenarios'), 'exclude': lambda f: f is None }})
    r"""All scenarios that compose the account, including the primary."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The title of the account."""  
    transaction_accounts: Optional[list[shared_transactionaccount.TransactionAccount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_accounts'), 'exclude': lambda f: f is None }})
    r"""All transaction accounts that compose the account, including the primary."""  
    type: Optional[AccountTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the account."""  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})
    r"""When the account was last updated."""  
    