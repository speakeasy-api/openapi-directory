/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class GetCalculatorConfigurationByIdRequest extends SpeakeasyBase {
  /**
   * HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=Accept" })
  accept: string;

  /**
   * Type of the content being sent.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Content-Type",
  })
  contentType: string;

  /**
   * Promotion ID or tax ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=idCalculatorConfiguration",
  })
  idCalculatorConfiguration: string;
}

/**
 * Object with information of the affiliate.
 */
export class GetCalculatorConfigurationById200PromotionAffiliates extends SpeakeasyBase {
  /**
   * Affiliate ID.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * Affiliate Name.
   */
  @SpeakeasyMetadata()
  name?: string;
}

/**
 * Object with information of the brand.
 */
export class GetCalculatorConfigurationById200PromotionBrands extends SpeakeasyBase {
  /**
   * Brand ID.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * Brand Name.
   */
  @SpeakeasyMetadata()
  name?: string;
}

/**
 * Object with information of the category.
 */
export class GetCalculatorConfigurationById200PromotionCategories extends SpeakeasyBase {
  /**
   * Category ID.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * Category Name.
   */
  @SpeakeasyMetadata()
  name?: string;
}

/**
 * Object with information of the collection.
 */
export class GetCalculatorConfigurationById200PromotionCollections extends SpeakeasyBase {
  /**
   * Collection ID.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * Collection Name.
   */
  @SpeakeasyMetadata()
  name?: string;
}

/**
 * Object with information of the Payment Method.
 */
export class GetCalculatorConfigurationById200PromotionPaymentsMethods extends SpeakeasyBase {
  /**
   * Payment Method ID.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * Payment Method Name.
   */
  @SpeakeasyMetadata()
  name?: string;
}

/**
 * Object with information of the product.
 */
export class GetCalculatorConfigurationById200PromotionProducts extends SpeakeasyBase {
  /**
   * Product ID.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * Product Name.
   */
  @SpeakeasyMetadata()
  name?: string;
}

/**
 * Object with information of the SKU.
 */
export class GetCalculatorConfigurationById200PromotionSkus extends SpeakeasyBase {
  /**
   * SKU ID.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * SKU Name.
   */
  @SpeakeasyMetadata()
  name?: string;
}

/**
 * SKU Gift Object. Total discount on the product value set as a gift.
 */
export class GetCalculatorConfigurationById200PromotionSkusGift extends SpeakeasyBase {
  /**
   * Array with SKU Gifts IDs.
   */
  @SpeakeasyMetadata()
  gifts?: number;

  /**
   * Quantity of SKU Gifts.
   */
  @SpeakeasyMetadata()
  quantitySelectable?: number;
}

export class GetCalculatorConfigurationById200PromotionZipCodeRanges extends SpeakeasyBase {
  /**
   * Defines if the zip code range is included in the promotion.
   */
  @SpeakeasyMetadata()
  inclusive?: boolean;

  /**
   * Initial Zip Code.
   */
  @SpeakeasyMetadata()
  zipCodeFrom?: string;

  /**
   * Final Zip Code.
   */
  @SpeakeasyMetadata()
  zipCodeTo?: string;
}

/**
 * OK
 */
export class GetCalculatorConfigurationById200Promotion extends SpeakeasyBase {
  /**
   * Maximum value for the shipping.
   */
  @SpeakeasyMetadata()
  absoluteShippingDiscountValue?: number;

  /**
   * Allows the promotion to apply to products whose prices have been manually added by a call center operator.
   */
  @SpeakeasyMetadata()
  accumulateWithManualPrice?: boolean;

  /**
   * If set as `true`, it activates gifts Multiplier.
   */
  @SpeakeasyMetadata()
  activateGiftsMultiplier?: boolean;

  /**
   * Defines which days of the week the promotion will applied.
   */
  @SpeakeasyMetadata()
  activeDaysOfWeek?: string[];

  /**
   * Marketplace order identifier. The discount will apply to selected affiliates.
   */
  @SpeakeasyMetadata({
    elemType: GetCalculatorConfigurationById200PromotionAffiliates,
  })
  affiliates?: GetCalculatorConfigurationById200PromotionAffiliates[];

  /**
   * Promotion will be applied to all kind of shipping.
   */
  @SpeakeasyMetadata()
  applyToAllShippings?: boolean;

  /**
   * If set to `false`, this promotion will be applied to any trade policies present on the `idsSalesChannel` field. If set to `true`, trade policies present on that field will make this promotion not to be applied.
   */
  @SpeakeasyMetadata()
  areSalesChannelIdsExclusive?: boolean;

  /**
   * Promotion Begin Date (UTC).
   */
  @SpeakeasyMetadata()
  beginDateUtc?: string;

  /**
   * Object composed by the brands that will activate or deactivate the promotion.
   */
  @SpeakeasyMetadata({
    elemType: GetCalculatorConfigurationById200PromotionBrands,
  })
  brands?: GetCalculatorConfigurationById200PromotionBrands[];

  /**
   * If set to `true`, this promotion will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this promotion not to be applied.
   */
  @SpeakeasyMetadata()
  brandsAreInclusive?: boolean;

  /**
   * Campaign Audiences that activate this promotion.
   */
  @SpeakeasyMetadata()
  campaigns?: any[];

  @SpeakeasyMetadata()
  cardIssuers?: any[];

  /**
   * Object composed by the categories that will activate or deactivate the promotion.
   */
  @SpeakeasyMetadata({
    elemType: GetCalculatorConfigurationById200PromotionCategories,
  })
  categories?: GetCalculatorConfigurationById200PromotionCategories[];

  /**
   * If set to `true`, this promotion will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this promotion not to be applied.
   */
  @SpeakeasyMetadata()
  categoriesAreInclusive?: boolean;

  /**
   * An expression to use with clusters.
   */
  @SpeakeasyMetadata()
  clusterExpressions?: string[];

  /**
   * Array composed by the collections that will be activated or deactivated the promotion.
   */
  @SpeakeasyMetadata({
    elemType: GetCalculatorConfigurationById200PromotionCollections,
  })
  collections?: GetCalculatorConfigurationById200PromotionCollections[];

  /**
   * Collections that will generate the promotion, type **Buy Together**, **More for less**, **Progressive Discount**, **Buy One Get One**.
   */
  @SpeakeasyMetadata()
  collections1BuyTogether?: string[];

  @SpeakeasyMetadata()
  collections2BuyTogether?: any[];

  /**
   * If set to `true`, this promotion will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this promotion not to be applied.
   */
  @SpeakeasyMetadata()
  collectionsIsInclusive?: boolean;

  /**
   * If the **List Price** and **Price** are the same.
   */
  @SpeakeasyMetadata()
  compareListPriceAndPrice?: boolean;

  /**
   * Array with conditions IDs.
   */
  @SpeakeasyMetadata()
  conditionsIds?: string[];

  @SpeakeasyMetadata()
  coupon?: any[];

  /**
   * Defines if a promotion can accumulate with another one. (`true`) or not (`false`).
   */
  @SpeakeasyMetadata()
  cumulative?: boolean;

  /**
   * Number of days that are considered to add the purchase history.
   */
  @SpeakeasyMetadata()
  daysAgoOfPurchases?: number;

  /**
   * Promotion internal description.
   */
  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  disableDeal?: boolean;

  /**
   * The type of discount that will apply to the promotion.
   */
  @SpeakeasyMetadata()
  discountType?: string;

  /**
   * Enable **Buy Together** per SKU.
   */
  @SpeakeasyMetadata()
  enableBuyTogetherPerSku?: boolean;

  /**
   * Promotion End Date (UTC).
   */
  @SpeakeasyMetadata()
  endDateUtc?: string;

  /**
   * Applies the discount even if the user is not logged.
   */
  @SpeakeasyMetadata()
  firstBuyIsProfileOptimistic?: boolean;

  /**
   * Gifts List Type.
   */
  @SpeakeasyMetadata()
  giftListTypes?: string[];

  /**
   * Promotion ID.
   */
  @SpeakeasyMetadata()
  idCalculatorConfiguration?: string;

  /**
   * Seller Name.
   */
  @SpeakeasyMetadata()
  idSeller?: string;

  /**
   * If set to `true`, this promotion will be applied to any seller present on the idSeller field. If set to `false`, sellers present on that field will make this promotion not to be applied.
   */
  @SpeakeasyMetadata()
  idSellerIsInclusive?: boolean;

  /**
   * List of Trade Policies that activate this promotion.
   */
  @SpeakeasyMetadata()
  idsSalesChannel?: string[];

  @SpeakeasyMetadata()
  installment?: number;

  /**
   * If set as `true` the Promotion is activated. If set as `false` the Promotion is deactivated.
   */
  @SpeakeasyMetadata()
  isActive?: boolean;

  /**
   * If set as `true` the Promotion is archived. If set as `false` the Promotion is not archived.
   */
  @SpeakeasyMetadata()
  isArchived?: boolean;

  /**
   * Applies the promotion only if the list price and price is different.
   */
  @SpeakeasyMetadata()
  isDifferentListPriceAndPrice?: boolean;

  /**
   * Insert a flag with the promotion name used in the product's window display and page.
   */
  @SpeakeasyMetadata()
  isFeatured?: boolean;

  /**
   * Applies the discount only if it's a first buy.
   */
  @SpeakeasyMetadata()
  isFirstBuy?: boolean;

  /**
   * Set if the promotion will be applied considering a minimum and maximum values for installments.
   */
  @SpeakeasyMetadata()
  isMinMaxInstallments?: boolean;

  /**
   * Applies selected discount only when one of the defined shipping method is selected by the customer.
   */
  @SpeakeasyMetadata()
  isSlaSelected?: boolean;

  /**
   * Maximum price of the item.
   */
  @SpeakeasyMetadata()
  itemMaxPrice?: number;

  /**
   * Minimum price of the item.
   */
  @SpeakeasyMetadata()
  itemMinPrice?: number;

  /**
   * When the Promotion was last modified.
   */
  @SpeakeasyMetadata()
  lastModified?: string;

  /**
   * SKU first list for the promotion **Buy Together**.
   */
  @SpeakeasyMetadata()
  listSku1BuyTogether?: any[];

  /**
   * SKU second list for the promotion **Buy Together**.
   */
  @SpeakeasyMetadata()
  listSku2BuyTogether?: any[];

  /**
   * Promotion Marketing tags.
   */
  @SpeakeasyMetadata()
  marketingTags?: string[];

  /**
   * If set to `false`, this promotion will be applied to any marketing tag present on the `marketingTags` field. If set to `true`, marketing tags present on that field will make this promotion not to be applied.
   */
  @SpeakeasyMetadata()
  marketingTagsAreNotInclusive?: boolean;

  /**
   * Maximum value for installment.
   */
  @SpeakeasyMetadata()
  maxInstallment?: number;

  /**
   * The maximum number of affected items for a promotion.
   */
  @SpeakeasyMetadata()
  maxNumberOfAffectedItems?: number;

  /**
   * The maximum number of affected items by group key for a promotion.
   */
  @SpeakeasyMetadata()
  maxNumberOfAffectedItemsGroupKey?: string;

  @SpeakeasyMetadata()
  maxPricesPerItems?: any[];

  /**
   * Defines how many times the promotion can be used.
   */
  @SpeakeasyMetadata()
  maxUsage?: number;

  /**
   * Defines if the promotion can be used multiple times per client.
   */
  @SpeakeasyMetadata()
  maxUsagePerClient?: number;

  /**
   * The maximum price for each item of the purchase will be the price set up.
   */
  @SpeakeasyMetadata()
  maximumUnitPriceDiscount?: number;

  @SpeakeasyMetadata()
  merchants?: any[];

  /**
   * Minimum value for installment.
   */
  @SpeakeasyMetadata()
  minInstallment?: number;

  /**
   * Minimum quantity for **Buy Together** promotion.
   */
  @SpeakeasyMetadata()
  minimumQuantityBuyTogether?: number;

  /**
   * Object composed by a list of SKUs on a Multiple Effects promotion. Structure: `"{SkuId}": {PercentageDiscount}`. There is a limit of 400 SKUs for this type of promotion.
   */
  @SpeakeasyMetadata()
  multipleSkusCause?: Record<string, string>;

  /**
   * Defines if the promotion can be used multiple times per client.
   */
  @SpeakeasyMetadata()
  multipleUsePerClient?: boolean;

  /**
   * Promotion Name.
   */
  @SpeakeasyMetadata()
  name?: string;

  /**
   * New time offset from UTC in seconds.
   */
  @SpeakeasyMetadata()
  newOffset?: number;

  /**
   * Exact discount to be applied for the total purchase value.
   */
  @SpeakeasyMetadata()
  nominalDiscountValue?: number;

  /**
   * Nominal value for rewards program.
   */
  @SpeakeasyMetadata()
  nominalRewardValue?: number;

  /**
   * Exact discount to be applied for the shipping value.
   */
  @SpeakeasyMetadata()
  nominalShippingDiscountValue?: number;

  /**
   * Nominal Tax.
   */
  @SpeakeasyMetadata()
  nominalTax?: number;

  /**
   * Time offset from UTC in seconds.
   */
  @SpeakeasyMetadata()
  offset?: number;

  /**
   * Order status reward value.
   */
  @SpeakeasyMetadata()
  orderStatusRewardValue?: string;

  /**
   * Origin of the promotion, `marketplace` or `Fulfillment`. Read [Difference between orders with marketplace and fulfillment sources](https://help.vtex.com/en/tutorial/what-are-orders-with-marketplace-source-and-orders-with-fulfillment-source--6eVYrmUAwMOeKICU2KuG06) for more information.
   */
  @SpeakeasyMetadata()
  origin?: string;

  /**
   * Array composed by all the Payments Methods.
   */
  @SpeakeasyMetadata({
    elemType: GetCalculatorConfigurationById200PromotionPaymentsMethods,
  })
  paymentsMethods?: GetCalculatorConfigurationById200PromotionPaymentsMethods[];

  @SpeakeasyMetadata()
  paymentsRules?: any[];

  /**
   * Percentage discount to be applied for total purchase value.
   */
  @SpeakeasyMetadata()
  percentualDiscountValue?: number;

  /**
   * Percentual discount value list.
   */
  @SpeakeasyMetadata()
  percentualDiscountValueList?: number[];

  /**
   * Valid discounts for the SKUs in `listSku1BuyTogether`, discount list used for Buy Together Promotions.
   */
  @SpeakeasyMetadata()
  percentualDiscountValueList1?: number;

  /**
   * Equivalent to `percentualDiscountValueList1`.
   */
  @SpeakeasyMetadata()
  percentualDiscountValueList2?: number;

  /**
   * Percentage value for rewards program.
   */
  @SpeakeasyMetadata()
  percentualRewardValue?: number;

  /**
   * Percentage discount to be applied for shipping value.
   */
  @SpeakeasyMetadata()
  percentualShippingDiscountValue?: number;

  /**
   * Percentual Tax over purchase total value.
   */
  @SpeakeasyMetadata()
  percentualTax?: number;

  /**
   * Object composed by the products that will activate or deactivate the promotion.
   */
  @SpeakeasyMetadata({
    elemType: GetCalculatorConfigurationById200PromotionProducts,
  })
  products?: GetCalculatorConfigurationById200PromotionProducts[];

  /**
   * If set to `true`, this promotion will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this promotion not to be applied.
   */
  @SpeakeasyMetadata()
  productsAreInclusive?: boolean;

  @SpeakeasyMetadata()
  productsSpecifications?: any[];

  /**
   * Quantity to affect **Buy Together** promotion.
   */
  @SpeakeasyMetadata()
  quantityToAffectBuyTogether?: number;

  /**
   * Percentual Shipping Discount Value.
   */
  @SpeakeasyMetadata()
  rebatePercentualDiscountValue?: number;

  /**
   * The discount will be granted if the card's BIN is given.
   */
  @SpeakeasyMetadata()
  restrictionsBins?: string[];

  /**
   * Shipping Percentual Tax over purchase total value.
   */
  @SpeakeasyMetadata()
  shippingPercentualTax?: number;

  /**
   * Should distribute discount among matched items.
   */
  @SpeakeasyMetadata()
  shouldDistributeDiscountAmongMatchedItems?: boolean;

  /**
   * Object composed by the SKUs that will activate or deactivate the promotion.
   */
  @SpeakeasyMetadata({
    elemType: GetCalculatorConfigurationById200PromotionSkus,
  })
  skus?: GetCalculatorConfigurationById200PromotionSkus[];

  /**
   * If set to `true`, this promotion will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this promotion not to be applied.
   */
  @SpeakeasyMetadata()
  skusAreInclusive?: boolean;

  /**
   * SKU Gift Object. Total discount on the product value set as a gift.
   */
  @SpeakeasyMetadata()
  skusGift?: GetCalculatorConfigurationById200PromotionSkusGift;

  /**
   * The discount will be granted if the shipping method is the same as the one given.
   */
  @SpeakeasyMetadata()
  slasIds?: string[];

  @SpeakeasyMetadata()
  stores?: any[];

  @SpeakeasyMetadata()
  storesAreInclusive?: boolean;

  /**
   * Maximum chart value to activate the promotion.
   */
  @SpeakeasyMetadata()
  totalValueCeling?: number;

  /**
   * Minimum chart value to activate the promotion.
   */
  @SpeakeasyMetadata()
  totalValueFloor?: number;

  @SpeakeasyMetadata()
  totalValueIncludeAllItems?: boolean;

  /**
   * If products that already are receiving a promotion, will be considered on the chart total value. There are three options available: `IncludeMatchedItems`, `ExcludeMatchedItems`, `AllItems`.
   */
  @SpeakeasyMetadata()
  totalValueMode?: string;

  /**
   * Total value a client must have in past orders to active the promotion.
   */
  @SpeakeasyMetadata()
  totalValuePurchase?: number;

  /**
   * Defines what is the type of the promotion or indicates if it is a tax. Possible values: `regular` ([Regular Promotion](https://help.vtex.com/tutorial/regular-promotion--tutorials_327)), `combo` ([Buy Together](https://help.vtex.com/en/tutorial/buy-together--tutorials_323)), `forThePriceOf` ([More for Less](https://help.vtex.com/en/tutorial/creating-a-more-for-less-promotion--tutorials_325)), `progressive` ([Progressive Discount](https://help.vtex.com/en/tutorial/progressive-discount--tutorials_324)), `buyAndWin` ([Buy One Get One](https://help.vtex.com/en/tutorial/buy-one-get-one--tutorials_322)), `maxPricePerItem` (Deprecated), `campaign` ([Campaign Promotion](https://help.vtex.com/en/tutorial/campaign-promotion--1ChYXhK2AQGuS6wAqS8Ume)), `tax` (Tax), `multipleEffects` (Multiple Effects).
   */
  @SpeakeasyMetadata()
  type?: string;

  /**
   * Use new progressive algorithm.
   */
  @SpeakeasyMetadata()
  useNewProgressiveAlgorithm?: boolean;

  /**
   * Coupon utmCampaign code.
   */
  @SpeakeasyMetadata()
  utmCampaign?: string;

  /**
   * Coupon utmSource code.
   */
  @SpeakeasyMetadata()
  utmSource?: string;

  /**
   * Range of the zip code that applies the promotion.
   */
  @SpeakeasyMetadata({
    elemType: GetCalculatorConfigurationById200PromotionZipCodeRanges,
  })
  zipCodeRanges?: GetCalculatorConfigurationById200PromotionZipCodeRanges[];
}

export class GetCalculatorConfigurationByIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
