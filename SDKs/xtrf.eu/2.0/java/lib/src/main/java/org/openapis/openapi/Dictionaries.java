/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

/**
 * To change the description use /examples/TagsDescriptions.json
 */
public class Dictionaries {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Dictionaries(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Returns active dictionary entities for all types.
     * Returns active dictionary entities for all types.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetActiveResponse getActive() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/dictionaries/active");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetActiveResponse res = new org.openapis.openapi.models.operations.GetActiveResponse(contentType, httpRes.statusCode()) {{
            manyValuesPerTypeDTO = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ManyValuesPerTypeDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ManyValuesPerTypeDTO.class);
                res.manyValuesPerTypeDTO = out;
            }
        }

        return res;
    }

    /**
     * Returns active values from a given dictionary.
     * Returns active values from a given dictionary.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetActiveByTypeResponse getActiveByType(org.openapis.openapi.models.operations.GetActiveByTypeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetActiveByTypeRequest.class, baseUrl, "/dictionaries/{type}/active", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetActiveByTypeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetActiveByTypeResponse res = new org.openapis.openapi.models.operations.GetActiveByTypeResponse(contentType, httpRes.statusCode()) {{
            dictionaryEntity = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DictionaryEntity out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DictionaryEntity.class);
                res.dictionaryEntity = out;
            }
        }

        return res;
    }

    /**
     * Returns active services list
     * Returns active workflows list
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetAllActiveResponse getAllActive(org.openapis.openapi.models.operations.GetAllActiveRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/services/active");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetAllActiveRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetAllActiveResponse res = new org.openapis.openapi.models.operations.GetAllActiveResponse(contentType, httpRes.statusCode()) {{
            serviceDTO = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceDTO.class);
                res.serviceDTO = out;
            }
        }

        return res;
    }

    /**
     * Returns all values (both active and not active) from a given dictionary.
     * Returns all values (both active and not active) from a given dictionary.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetAllByTypeResponse getAllByType(org.openapis.openapi.models.operations.GetAllByTypeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetAllByTypeRequest.class, baseUrl, "/dictionaries/{type}/all", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetAllByTypeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetAllByTypeResponse res = new org.openapis.openapi.models.operations.GetAllByTypeResponse(contentType, httpRes.statusCode()) {{
            dictionaryEntity = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DictionaryEntity out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DictionaryEntity.class);
                res.dictionaryEntity = out;
            }
        }

        return res;
    }

    /**
     * Returns dictionary entities for all types. Both active and not active ones.
     * &lt;div&gt;
     *   &lt;p&gt;
     *     XTRF holds many user-defined dictionaries (ie. countries).
     *     Each dictionary contains a set of values (ie. Poland or Germany).
     *     A default value may be defined for a dictionary.
     *   &lt;/p&gt;
     *   &lt;p&gt;
     *     Dictionary values are identified using internal identifier which is constant and unique among other values from the same dictionary.
     *     Please note that name used in dictionary values is presented in the locale of the current identity.
     *     The same dictionary value can have different names, ie. "Poland" for one user, "Polska" for another one.
     *   &lt;/p&gt;
     *   &lt;p&gt;
     *     Possible dictionary types with short explanation:
     *     &lt;ul&gt;
     *       &lt;li&gt;calculationUnit - predefined values of how to calculate the volume of work into the price&lt;/li&gt;
     *       &lt;li&gt;category - labels to organize data on the platform&lt;/li&gt;
     *       &lt;li&gt;country - list of countries used on the platform&lt;/li&gt;
     *       &lt;li&gt;currency - currencies used in financial operations in the system&lt;/li&gt;
     *       &lt;li&gt;industry - industry sectors which clients specialize in&lt;/li&gt;
     *       &lt;li&gt;jobType - services offered by a company used in customized workflows&lt;/li&gt;
     *       &lt;li&gt;language - list of languages and its values used on the platform&lt;/li&gt;
     *       &lt;li&gt;leadSource - lead/recruitment places where new clients and vendors may be found&lt;/li&gt;
     *       &lt;li&gt;personDepartment - departments in which contact person may be assigned to&lt;/li&gt;
     *       &lt;li&gt;personPosition - positions in which user may be associated with&lt;/li&gt;
     *       &lt;li&gt;province - states and provinces used in various documents on the platform&lt;/li&gt;
     *       &lt;li&gt;specialization - list of specific qualifications required to perform a specific job in the task, for ex. medical, military&lt;/li&gt;
     *     &lt;/ul&gt;
     *   &lt;/p&gt;
     * &lt;/div&gt;
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetAll1Response getAll1() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/dictionaries/all");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetAll1Response res = new org.openapis.openapi.models.operations.GetAll1Response(contentType, httpRes.statusCode()) {{
            manyValuesPerTypeDTO = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ManyValuesPerTypeDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ManyValuesPerTypeDTO.class);
                res.manyValuesPerTypeDTO = out;
            }
        }

        return res;
    }

    /**
     * Returns services list
     * Returns workflows list. Both active and not active ones.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetAll3Response getAll3(org.openapis.openapi.models.operations.GetAll3Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/services/all");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetAll3Request.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetAll3Response res = new org.openapis.openapi.models.operations.GetAll3Response(contentType, httpRes.statusCode()) {{
            serviceDTO = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceDTO.class);
                res.serviceDTO = out;
            }
        }

        return res;
    }

    /**
     * Returns specific value from a given dictionary.
     * Returns specific value from a given dictionary.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetByTypeAndIdResponse getByTypeAndId(org.openapis.openapi.models.operations.GetByTypeAndIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetByTypeAndIdRequest.class, baseUrl, "/dictionaries/{type}/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetByTypeAndIdResponse res = new org.openapis.openapi.models.operations.GetByTypeAndIdResponse(contentType, httpRes.statusCode()) {{
            dictionaryEntity = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DictionaryEntity out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DictionaryEntity.class);
                res.dictionaryEntity = out;
            }
        }

        return res;
    }
}