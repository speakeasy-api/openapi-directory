/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CatalogObject - The wrapper object for the Catalog entries of a given object type.
 * 
 * The type of a particular `CatalogObject` is determined by the value of the
 * `type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.
 * For example, the following list shows some instances of `CatalogObject` of a given `type` and
 * their corresponding data attribute that can be set:
 * - For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.
 * - For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.
 * - For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.
 * - For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.
 * - For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.
 * - For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.
 * - For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.
 * - For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.
 * - For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.
 * - For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.
 * - For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.
 * - For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.
 * - For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.
 * 
 * 
 * For a more detailed discussion of the Catalog data model, please see the
 * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.
 */
public class CatalogObject {
    /**
     * A list of locations where the object is not present, even if `present_at_all_locations` is `true`.
     * This can include locations that are deactivated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("absent_at_location_ids")
    public String[] absentAtLocationIds;
    public CatalogObject withAbsentAtLocationIds(String[] absentAtLocationIds) {
        this.absentAtLocationIds = absentAtLocationIds;
        return this;
    }
    
    /**
     * The Connect v1 IDs for this object at each location where it is present, where they
     * differ from the object's Connect V2 ID. The field will only be present for objects that
     * have been created or modified by legacy APIs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog_v1_ids")
    public CatalogV1Id[] catalogV1Ids;
    public CatalogObject withCatalogV1Ids(CatalogV1Id[] catalogV1Ids) {
        this.catalogV1Ids = catalogV1Ids;
        return this;
    }
    
    /**
     * A category to which a `CatalogItem` instance belongs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category_data")
    public CatalogCategory categoryData;
    public CatalogObject withCategoryData(CatalogCategory categoryData) {
        this.categoryData = categoryData;
        return this;
    }
    
    /**
     * Contains information defining a custom attribute. Custom attributes are
     * intended to store additional information about a catalog object or to associate a
     * catalog object with an entity in another system. Do not use custom attributes
     * to store any sensitive information (personally identifiable information, card details, etc.).
     * [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_attribute_definition_data")
    public CatalogCustomAttributeDefinition customAttributeDefinitionData;
    public CatalogObject withCustomAttributeDefinitionData(CatalogCustomAttributeDefinition customAttributeDefinitionData) {
        this.customAttributeDefinitionData = customAttributeDefinitionData;
        return this;
    }
    
    /**
     * A map (key-value pairs) of application-defined custom attribute values. The value of a key-value pair
     * is a [CatalogCustomAttributeValue](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeValue) object. The key is the `key` attribute
     * value defined in the associated [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition)
     * object defined by the application making the request.
     * 
     * If the `CatalogCustomAttributeDefinition` object is
     * defined by another application, the `CatalogCustomAttributeDefinition`'s key attribute value is prefixed by
     * the defining application ID. For example, if the `CatalogCustomAttributeDefinition` has a `key` attribute of
     * `"cocoa_brand"` and the defining application ID is `"abcd1234"`, the key in the map is `"abcd1234:cocoa_brand"`
     * if the application making the request is different from the application defining the custom attribute definition.
     * Otherwise, the key used in the map is simply `"cocoa_brand"`.
     * 
     * Application-defined custom attributes that are set at a global (location-independent) level.
     * Custom attribute values are intended to store additional information about a catalog object
     * or associations with an entity in another system. Do not use custom attributes
     * to store any sensitive information (personally identifiable information, card details, etc.).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_attribute_values")
    public java.util.Map<String, CatalogCustomAttributeValue> customAttributeValues;
    public CatalogObject withCustomAttributeValues(java.util.Map<String, CatalogCustomAttributeValue> customAttributeValues) {
        this.customAttributeValues = customAttributeValues;
        return this;
    }
    
    /**
     * A discount applicable to items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_data")
    public CatalogDiscount discountData;
    public CatalogObject withDiscountData(CatalogDiscount discountData) {
        this.discountData = discountData;
        return this;
    }
    
    /**
     * An identifier to reference this object in the catalog. When a new `CatalogObject`
     * is inserted, the client should set the id to a temporary identifier starting with
     * a "`#`" character. Other objects being inserted or updated within the same request
     * may use this identifier to refer to the new object.
     * 
     * When the server receives the new object, it will supply a unique identifier that
     * replaces the temporary identifier for all future references.
     */
    @JsonProperty("id")
    public String id;
    public CatalogObject withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * An image file to use in Square catalogs. It can be associated with catalog
     * items, item variations, and categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image_data")
    public CatalogImage imageData;
    public CatalogObject withImageData(CatalogImage imageData) {
        this.imageData = imageData;
        return this;
    }
    
    /**
     * Identifies the `CatalogImage` attached to this `CatalogObject`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image_id")
    public String imageId;
    public CatalogObject withImageId(String imageId) {
        this.imageId = imageId;
        return this;
    }
    
    /**
     * If `true`, the object has been deleted from the database. Must be `false` for new objects
     * being inserted. When deleted, the `updated_at` field will equal the deletion time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_deleted")
    public Boolean isDeleted;
    public CatalogObject withIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
        return this;
    }
    
    /**
     * A [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance of the `ITEM` type, also referred to as an item, in the catalog.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_data")
    public CatalogItem itemData;
    public CatalogObject withItemData(CatalogItem itemData) {
        this.itemData = itemData;
        return this;
    }
    
    /**
     * A group of variations for a `CatalogItem`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_option_data")
    public CatalogItemOption itemOptionData;
    public CatalogObject withItemOptionData(CatalogItemOption itemOptionData) {
        this.itemOptionData = itemOptionData;
        return this;
    }
    
    /**
     * An enumerated value that can link a
     * `CatalogItemVariation` to an item option as one of
     * its item option values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_option_value_data")
    public CatalogItemOptionValue itemOptionValueData;
    public CatalogObject withItemOptionValueData(CatalogItemOptionValue itemOptionValueData) {
        this.itemOptionValueData = itemOptionValueData;
        return this;
    }
    
    /**
     * An item variation (i.e., product) in the Catalog object model. Each item
     * may have a maximum of 250 item variations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_variation_data")
    public CatalogItemVariation itemVariationData;
    public CatalogObject withItemVariationData(CatalogItemVariation itemVariationData) {
        this.itemVariationData = itemVariationData;
        return this;
    }
    
    /**
     * Represents the unit used to measure a `CatalogItemVariation` and
     * specifies the precision for decimal quantities.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("measurement_unit_data")
    public CatalogMeasurementUnit measurementUnitData;
    public CatalogObject withMeasurementUnitData(CatalogMeasurementUnit measurementUnitData) {
        this.measurementUnitData = measurementUnitData;
        return this;
    }
    
    /**
     * A modifier applicable to items at the time of sale.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifier_data")
    public CatalogModifier modifierData;
    public CatalogObject withModifierData(CatalogModifier modifierData) {
        this.modifierData = modifierData;
        return this;
    }
    
    /**
     * A list of modifiers applicable to items at the time of sale.
     * 
     * For example, a "Condiments" modifier list applicable to a "Hot Dog" item
     * may contain "Ketchup", "Mustard", and "Relish" modifiers.
     * Use the `selection_type` field to specify whether or not multiple selections from
     * the modifier list are allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifier_list_data")
    public CatalogModifierList modifierListData;
    public CatalogObject withModifierListData(CatalogModifierList modifierListData) {
        this.modifierListData = modifierListData;
        return this;
    }
    
    /**
     * If `true`, this object is present at all locations (including future locations), except where specified in
     * the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations),
     * except where specified in the `present_at_location_ids` field. If not specified, defaults to `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("present_at_all_locations")
    public Boolean presentAtAllLocations;
    public CatalogObject withPresentAtAllLocations(Boolean presentAtAllLocations) {
        this.presentAtAllLocations = presentAtAllLocations;
        return this;
    }
    
    /**
     * A list of locations where the object is present, even if `present_at_all_locations` is `false`.
     * This can include locations that are deactivated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("present_at_location_ids")
    public String[] presentAtLocationIds;
    public CatalogObject withPresentAtLocationIds(String[] presentAtLocationIds) {
        this.presentAtLocationIds = presentAtLocationIds;
        return this;
    }
    
    /**
     * Defines how discounts are automatically applied to a set of items that match the pricing rule
     * during the active time period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricing_rule_data")
    public CatalogPricingRule pricingRuleData;
    public CatalogObject withPricingRuleData(CatalogPricingRule pricingRuleData) {
        this.pricingRuleData = pricingRuleData;
        return this;
    }
    
    /**
     * Represents a collection of catalog objects for the purpose of applying a
     * `PricingRule`. Including a catalog object will include all of its subtypes.
     * For example, including a category in a product set will include all of its
     * items and associated item variations in the product set. Including an item in
     * a product set will also include its item variations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_set_data")
    public CatalogProductSet productSetData;
    public CatalogObject withProductSetData(CatalogProductSet productSetData) {
        this.productSetData = productSetData;
        return this;
    }
    
    /**
     * A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quick_amounts_settings_data")
    public CatalogQuickAmountsSettings quickAmountsSettingsData;
    public CatalogObject withQuickAmountsSettingsData(CatalogQuickAmountsSettings quickAmountsSettingsData) {
        this.quickAmountsSettingsData = quickAmountsSettingsData;
        return this;
    }
    
    /**
     * Describes a subscription plan. For more information, see
     * [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscription_plan_data")
    public CatalogSubscriptionPlan subscriptionPlanData;
    public CatalogObject withSubscriptionPlanData(CatalogSubscriptionPlan subscriptionPlanData) {
        this.subscriptionPlanData = subscriptionPlanData;
        return this;
    }
    
    /**
     * A tax applicable to an item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_data")
    public CatalogTax taxData;
    public CatalogObject withTaxData(CatalogTax taxData) {
        this.taxData = taxData;
        return this;
    }
    
    /**
     * Represents a time period - either a single period or a repeating period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_period_data")
    public CatalogTimePeriod timePeriodData;
    public CatalogObject withTimePeriodData(CatalogTimePeriod timePeriodData) {
        this.timePeriodData = timePeriodData;
        return this;
    }
    
    /**
     * The type of this object. Each object type has expected
     * properties expressed in a structured format within its corresponding `*_data` field below.
     */
    @JsonProperty("type")
    public String type;
    public CatalogObject withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Last modification [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) in RFC 3339 format, e.g., `"2016-08-15T23:59:33.123Z"`
     * would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public String updatedAt;
    public CatalogObject withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * The version of the object. When updating an object, the version supplied
     * must match the version in the database, otherwise the write will be rejected as conflicting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Long version;
    public CatalogObject withVersion(Long version) {
        this.version = version;
        return this;
    }
    
}
