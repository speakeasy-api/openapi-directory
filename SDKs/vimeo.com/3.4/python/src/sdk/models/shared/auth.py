"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import api_app as shared_api_app
from ..shared import user as shared_user
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AuthTokenTypeEnum(str, Enum):
    r"""The token type:
    
    Option descriptions:
     * `bearer` - The token is of the `bearer` type.
    """
    BEARER = 'bearer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Auth:
    r"""The authorization code was exchanged."""
    
    access_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access_token') }})
    r"""The access token string."""  
    app: shared_api_app.APIApp = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app') }})
    r"""The API application associated with the token."""  
    scope: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope') }})
    r"""The scope or scopes that the token supports."""  
    token_type: AuthTokenTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token_type') }})
    r"""The token type:
    
    Option descriptions:
     * `bearer` - The token is of the `bearer` type.
    """  
    expires_on: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_on'), 'exclude': lambda f: f is None }})
    r"""The date and time that the token expires."""  
    refresh_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refresh_token'), 'exclude': lambda f: f is None }})
    r"""The refresh token string."""  
    user: Optional[shared_user.User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""The user associated with the token."""  
    