/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class BehavioralEventHttpCompletionRequest {
    /**
     * Email of visitor
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;

    public BehavioralEventHttpCompletionRequest withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Internal name of the event-type to trigger
     */
    @JsonProperty("eventName")
    public String eventName;

    public BehavioralEventHttpCompletionRequest withEventName(String eventName) {
        this.eventName = eventName;
        return this;
    }
    
    /**
     * The object id that this event occurred on. Could be a contact id or a visitor id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectId")
    public String objectId;

    public BehavioralEventHttpCompletionRequest withObjectId(String objectId) {
        this.objectId = objectId;
        return this;
    }
    
    /**
     * The time when this event occurred (if any). If this isn't set, the current time will be used
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("occurredAt")
    public OffsetDateTime occurredAt;

    public BehavioralEventHttpCompletionRequest withOccurredAt(OffsetDateTime occurredAt) {
        this.occurredAt = occurredAt;
        return this;
    }
    
    /**
     * Map of properties for the event in the format property internal name - property value
     */
    @JsonProperty("properties")
    public java.util.Map<String, String> properties;

    public BehavioralEventHttpCompletionRequest withProperties(java.util.Map<String, String> properties) {
        this.properties = properties;
        return this;
    }
    
    /**
     * User token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("utk")
    public String utk;

    public BehavioralEventHttpCompletionRequest withUtk(String utk) {
        this.utk = utk;
        return this;
    }
    
    public BehavioralEventHttpCompletionRequest(@JsonProperty("eventName") String eventName, @JsonProperty("properties") java.util.Map<String, String> properties) {
        this.eventName = eventName;
        this.properties = properties;
  }
}
