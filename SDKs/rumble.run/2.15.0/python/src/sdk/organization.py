"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Organization:
    r"""Requires Organization Key"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def clear_bulk_asset_tags(self, request: shared.Search, security: operations.ClearBulkAssetTagsSecurity) -> operations.ClearBulkAssetTagsResponse:
        r"""Clear all tags across multiple assets based on a search query"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/assets/bulk/clearTags'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClearBulkAssetTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.status_message = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def create_scan(self, request: operations.CreateScanRequest, security: operations.CreateScanSecurity) -> operations.CreateScanResponse:
        r"""Create a scan task for a given site"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateScanRequest, base_url, '/org/sites/{site_id}/scan', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "scan_options", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateScanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Task])
                res.task = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def create_site(self, request: shared.SiteOptions, security: operations.CreateSiteSecurity) -> operations.CreateSiteResponse:
        r"""Create a new site"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/sites'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSiteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Site])
                res.site = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def get_agent(self, request: operations.GetAgentRequest, security: operations.GetAgentSecurity) -> operations.GetAgentResponse:
        r"""Get details for a single agent"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAgentRequest, base_url, '/org/agents/{agent_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAgentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Agent])
                res.agent = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def get_agents(self) -> operations.GetAgentsResponse:
        r"""Get all agents"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/agents'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAgentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Agent]])
                res.agents = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_asset(self, request: operations.GetAssetRequest, security: operations.GetAssetSecurity) -> operations.GetAssetResponse:
        r"""Get asset details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAssetRequest, base_url, '/org/assets/{asset_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAssetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Asset])
                res.asset = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def get_assets(self, request: operations.GetAssetsRequest, security: operations.GetAssetsSecurity) -> operations.GetAssetsResponse:
        r"""Get all assets"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/assets'
        
        query_params = utils.get_query_params(operations.GetAssetsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAssetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Asset]])
                res.assets = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_key(self) -> operations.GetKeyResponse:
        r"""Get API key details"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/key'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKey])
                res.api_key = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_organization(self) -> operations.GetOrganizationResponse:
        r"""Get organization details"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Organization])
                res.organization = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_service(self, request: operations.GetServiceRequest, security: operations.GetServiceSecurity) -> operations.GetServiceResponse:
        r"""Get service details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetServiceRequest, base_url, '/org/services/{service_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Service])
                res.service = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def get_services(self, request: operations.GetServicesRequest, security: operations.GetServicesSecurity) -> operations.GetServicesResponse:
        r"""Get all services"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/services'
        
        query_params = utils.get_query_params(operations.GetServicesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetServicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Service]])
                res.services = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_site(self, request: operations.GetSiteRequest, security: operations.GetSiteSecurity) -> operations.GetSiteResponse:
        r"""Get site details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSiteRequest, base_url, '/org/sites/{site_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSiteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Site])
                res.site = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def get_sites(self) -> operations.GetSitesResponse:
        r"""Get all sites"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/sites'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSitesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Site]])
                res.sites = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_task(self, request: operations.GetTaskRequest, security: operations.GetTaskSecurity) -> operations.GetTaskResponse:
        r"""Get task details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTaskRequest, base_url, '/org/tasks/{task_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Task])
                res.task = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_task_change_report(self, request: operations.GetTaskChangeReportRequest, security: operations.GetTaskChangeReportSecurity) -> operations.GetTaskChangeReportResponse:
        r"""Returns a temporary task change report data url"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTaskChangeReportRequest, base_url, '/org/tasks/{task_id}/changes', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTaskChangeReportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def get_task_log(self, request: operations.GetTaskLogRequest, security: operations.GetTaskLogSecurity) -> operations.GetTaskLogResponse:
        r"""Returns a temporary task log data url"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTaskLogRequest, base_url, '/org/tasks/{task_id}/log', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTaskLogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def get_task_scan_data(self, request: operations.GetTaskScanDataRequest, security: operations.GetTaskScanDataSecurity) -> operations.GetTaskScanDataResponse:
        r"""Returns a temporary task scan data url"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTaskScanDataRequest, base_url, '/org/tasks/{task_id}/data', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTaskScanDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def get_tasks(self, request: operations.GetTasksRequest, security: operations.GetTasksSecurity) -> operations.GetTasksResponse:
        r"""Get all tasks (last 1000)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/tasks'
        
        query_params = utils.get_query_params(operations.GetTasksRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTasksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Task]])
                res.tasks = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_wireless_lan(self, request: operations.GetWirelessLANRequest, security: operations.GetWirelessLANSecurity) -> operations.GetWirelessLANResponse:
        r"""Get wireless LAN details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWirelessLANRequest, base_url, '/org/wireless/{wireless_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWirelessLANResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Wireless])
                res.wireless = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_wireless_la_ns(self, request: operations.GetWirelessLANsRequest, security: operations.GetWirelessLANsSecurity) -> operations.GetWirelessLANsResponse:
        r"""Get all wireless LANs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/wireless'
        
        query_params = utils.get_query_params(operations.GetWirelessLANsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWirelessLANsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Wireless]])
                res.wirelesses = out
        elif http_res.status_code == 401:
            pass

        return res

    def hide_task(self, request: operations.HideTaskRequest, security: operations.HideTaskSecurity) -> operations.HideTaskResponse:
        r"""Signal that a completed task should be hidden"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.HideTaskRequest, base_url, '/org/tasks/{task_id}/hide', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HideTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def import_nessus_scan_data(self, request: operations.ImportNessusScanDataRequest, security: operations.ImportNessusScanDataSecurity) -> operations.ImportNessusScanDataResponse:
        r"""Import a Nessus scan data file into a site"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportNessusScanDataRequest, base_url, '/org/sites/{site_id}/import/nessus', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportNessusScanDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Task])
                res.task = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def import_scan_data(self, request: operations.ImportScanDataRequest, security: operations.ImportScanDataSecurity) -> operations.ImportScanDataResponse:
        r"""Import a scan data file into a site"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportScanDataRequest, base_url, '/org/sites/{site_id}/import', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportScanDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Task])
                res.task = out
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def remove_agent(self, request: operations.RemoveAgentRequest, security: operations.RemoveAgentSecurity) -> operations.RemoveAgentResponse:
        r"""Remove and uninstall an agent"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveAgentRequest, base_url, '/org/agents/{agent_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveAgentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def remove_asset(self, request: operations.RemoveAssetRequest, security: operations.RemoveAssetSecurity) -> operations.RemoveAssetResponse:
        r"""Remove an asset"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveAssetRequest, base_url, '/org/assets/{asset_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveAssetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def remove_key(self) -> operations.RemoveKeyResponse:
        r"""Remove the current API key"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/key'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def remove_service(self, request: operations.RemoveServiceRequest, security: operations.RemoveServiceSecurity) -> operations.RemoveServiceResponse:
        r"""Remove a service"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveServiceRequest, base_url, '/org/services/{service_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def remove_site(self, request: operations.RemoveSiteRequest, security: operations.RemoveSiteSecurity) -> operations.RemoveSiteResponse:
        r"""Remove a site and associated assets"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveSiteRequest, base_url, '/org/sites/{site_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveSiteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def remove_wireless_lan(self, request: operations.RemoveWirelessLANRequest, security: operations.RemoveWirelessLANSecurity) -> operations.RemoveWirelessLANResponse:
        r"""Remove a wireless LAN"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveWirelessLANRequest, base_url, '/org/wireless/{wireless_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveWirelessLANResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def rotate_key(self) -> operations.RotateKeyResponse:
        r"""Rotate the API key secret and return the updated key"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/key/rotate'
        
        
        client = self._client
        
        http_res = client.request('PATCH', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RotateKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKey])
                res.api_key = out
        elif http_res.status_code == 401:
            pass

        return res

    def stop_task(self, request: operations.StopTaskRequest, security: operations.StopTaskSecurity) -> operations.StopTaskResponse:
        r"""Signal that a task should be stopped or canceledThis will also remove recurring and scheduled tasks"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StopTaskRequest, base_url, '/org/tasks/{task_id}/stop', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StopTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def update_agent_site(self, request: operations.UpdateAgentSiteRequest, security: operations.UpdateAgentSiteSecurity) -> operations.UpdateAgentSiteResponse:
        r"""Update the site associated with agent"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateAgentSiteRequest, base_url, '/org/agents/{agent_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "agent_site_id", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAgentSiteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Agent])
                res.agent = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def update_asset_comments(self, request: operations.UpdateAssetCommentsRequest, security: operations.UpdateAssetCommentsSecurity) -> operations.UpdateAssetCommentsResponse:
        r"""Update asset comments"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateAssetCommentsRequest, base_url, '/org/assets/{asset_id}/comments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "asset_comments", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAssetCommentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Asset])
                res.asset = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def update_asset_tags(self, request: operations.UpdateAssetTagsRequest, security: operations.UpdateAssetTagsSecurity) -> operations.UpdateAssetTagsResponse:
        r"""Update asset tags"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateAssetTagsRequest, base_url, '/org/assets/{asset_id}/tags', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "asset_tags", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAssetTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Asset])
                res.asset = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def update_bulk_asset_tags(self, request: shared.AssetTagsWithSearch, security: operations.UpdateBulkAssetTagsSecurity) -> operations.UpdateBulkAssetTagsResponse:
        r"""Update tags across multiple assets based on a search query"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org/assets/bulk/tags'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateBulkAssetTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.status_message = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def update_organization(self, request: shared.OrgOptions, security: operations.UpdateOrganizationSecurity) -> operations.UpdateOrganizationResponse:
        r"""Update organization details"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/org'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Organization])
                res.organization = out
        elif http_res.status_code == 401:
            pass

        return res

    def update_site(self, request: operations.UpdateSiteRequest, security: operations.UpdateSiteSecurity) -> operations.UpdateSiteResponse:
        r"""Update a site definition"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateSiteRequest, base_url, '/org/sites/{site_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "site_options", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSiteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Site])
                res.site = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def update_task(self, request: operations.UpdateTaskRequest, security: operations.UpdateTaskSecurity) -> operations.UpdateTaskResponse:
        r"""Update task parameters"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateTaskRequest, base_url, '/org/tasks/{task_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "task", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Task])
                res.task = out
        elif http_res.status_code in [401, 404]:
            pass

        return res

    def upgrade_agent(self, request: operations.UpgradeAgentRequest, security: operations.UpgradeAgentSecurity) -> operations.UpgradeAgentResponse:
        r"""Force an agent to update and restart"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpgradeAgentRequest, base_url, '/org/agents/{agent_id}/update', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpgradeAgentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    