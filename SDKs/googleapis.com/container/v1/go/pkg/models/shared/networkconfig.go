// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NetworkConfigDatapathProviderEnum - The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
type NetworkConfigDatapathProviderEnum string

const (
	NetworkConfigDatapathProviderEnumDatapathProviderUnspecified NetworkConfigDatapathProviderEnum = "DATAPATH_PROVIDER_UNSPECIFIED"
	NetworkConfigDatapathProviderEnumLegacyDatapath              NetworkConfigDatapathProviderEnum = "LEGACY_DATAPATH"
	NetworkConfigDatapathProviderEnumAdvancedDatapath            NetworkConfigDatapathProviderEnum = "ADVANCED_DATAPATH"
)

func (e *NetworkConfigDatapathProviderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DATAPATH_PROVIDER_UNSPECIFIED":
		fallthrough
	case "LEGACY_DATAPATH":
		fallthrough
	case "ADVANCED_DATAPATH":
		*e = NetworkConfigDatapathProviderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NetworkConfigDatapathProviderEnum: %s", s)
	}
}

// NetworkConfigPrivateIpv6GoogleAccessEnum - The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
type NetworkConfigPrivateIpv6GoogleAccessEnum string

const (
	NetworkConfigPrivateIpv6GoogleAccessEnumPrivateIpv6GoogleAccessUnspecified   NetworkConfigPrivateIpv6GoogleAccessEnum = "PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED"
	NetworkConfigPrivateIpv6GoogleAccessEnumPrivateIpv6GoogleAccessDisabled      NetworkConfigPrivateIpv6GoogleAccessEnum = "PRIVATE_IPV6_GOOGLE_ACCESS_DISABLED"
	NetworkConfigPrivateIpv6GoogleAccessEnumPrivateIpv6GoogleAccessToGoogle      NetworkConfigPrivateIpv6GoogleAccessEnum = "PRIVATE_IPV6_GOOGLE_ACCESS_TO_GOOGLE"
	NetworkConfigPrivateIpv6GoogleAccessEnumPrivateIpv6GoogleAccessBidirectional NetworkConfigPrivateIpv6GoogleAccessEnum = "PRIVATE_IPV6_GOOGLE_ACCESS_BIDIRECTIONAL"
)

func (e *NetworkConfigPrivateIpv6GoogleAccessEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED":
		fallthrough
	case "PRIVATE_IPV6_GOOGLE_ACCESS_DISABLED":
		fallthrough
	case "PRIVATE_IPV6_GOOGLE_ACCESS_TO_GOOGLE":
		fallthrough
	case "PRIVATE_IPV6_GOOGLE_ACCESS_BIDIRECTIONAL":
		*e = NetworkConfigPrivateIpv6GoogleAccessEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NetworkConfigPrivateIpv6GoogleAccessEnum: %s", s)
	}
}

// NetworkConfig - NetworkConfig reports the relative names of network & subnetwork.
type NetworkConfig struct {
	// The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
	DatapathProvider *NetworkConfigDatapathProviderEnum `json:"datapathProvider,omitempty"`
	// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
	DefaultSnatStatus *DefaultSnatStatus `json:"defaultSnatStatus,omitempty"`
	// DNSConfig contains the desired set of options for configuring clusterDNS.
	DNSConfig *DNSConfig `json:"dnsConfig,omitempty"`
	// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
	EnableIntraNodeVisibility *bool `json:"enableIntraNodeVisibility,omitempty"`
	// Whether L4ILB Subsetting is enabled for this cluster.
	EnableL4ilbSubsetting *bool `json:"enableL4ilbSubsetting,omitempty"`
	// GatewayAPIConfig contains the desired config of Gateway API on this cluster.
	GatewayAPIConfig *GatewayAPIConfig `json:"gatewayApiConfig,omitempty"`
	// Output only. The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
	Network *string `json:"network,omitempty"`
	// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
	PrivateIpv6GoogleAccess *NetworkConfigPrivateIpv6GoogleAccessEnum `json:"privateIpv6GoogleAccess,omitempty"`
	// Config to block services with externalIPs field.
	ServiceExternalIpsConfig *ServiceExternalIPsConfig `json:"serviceExternalIpsConfig,omitempty"`
	// Output only. The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
	Subnetwork *string `json:"subnetwork,omitempty"`
}
