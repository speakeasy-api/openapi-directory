// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FinalReportLinksMessagesChannelEnum string

const (
	FinalReportLinksMessagesChannelEnumMessenger      FinalReportLinksMessagesChannelEnum = "messenger"
	FinalReportLinksMessagesChannelEnumViberSeviceMsg FinalReportLinksMessagesChannelEnum = "viber_sevice_msg"
	FinalReportLinksMessagesChannelEnumSms            FinalReportLinksMessagesChannelEnum = "sms"
	FinalReportLinksMessagesChannelEnumWhatsapp       FinalReportLinksMessagesChannelEnum = "whatsapp"
	FinalReportLinksMessagesChannelEnumMms            FinalReportLinksMessagesChannelEnum = "mms"
)

func (e FinalReportLinksMessagesChannelEnum) ToPointer() *FinalReportLinksMessagesChannelEnum {
	return &e
}

func (e *FinalReportLinksMessagesChannelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "messenger":
		fallthrough
	case "viber_sevice_msg":
		fallthrough
	case "sms":
		fallthrough
	case "whatsapp":
		fallthrough
	case "mms":
		*e = FinalReportLinksMessagesChannelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FinalReportLinksMessagesChannelEnum: %v", v)
	}
}

type FinalReportLinksMessagesStatusEnum string

const (
	FinalReportLinksMessagesStatusEnumSubmitted     FinalReportLinksMessagesStatusEnum = "submitted"
	FinalReportLinksMessagesStatusEnumDelivered     FinalReportLinksMessagesStatusEnum = "delivered"
	FinalReportLinksMessagesStatusEnumRead          FinalReportLinksMessagesStatusEnum = "read"
	FinalReportLinksMessagesStatusEnumRejected      FinalReportLinksMessagesStatusEnum = "rejected"
	FinalReportLinksMessagesStatusEnumUndeliverable FinalReportLinksMessagesStatusEnum = "undeliverable"
)

func (e FinalReportLinksMessagesStatusEnum) ToPointer() *FinalReportLinksMessagesStatusEnum {
	return &e
}

func (e *FinalReportLinksMessagesStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "submitted":
		fallthrough
	case "delivered":
		fallthrough
	case "read":
		fallthrough
	case "rejected":
		fallthrough
	case "undeliverable":
		*e = FinalReportLinksMessagesStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FinalReportLinksMessagesStatusEnum: %v", v)
	}
}

// FinalReportLinksMessagesUsageCurrencyEnum - The charge currency in ISO 4217 format.
type FinalReportLinksMessagesUsageCurrencyEnum string

const (
	FinalReportLinksMessagesUsageCurrencyEnumEur FinalReportLinksMessagesUsageCurrencyEnum = "EUR"
)

func (e FinalReportLinksMessagesUsageCurrencyEnum) ToPointer() *FinalReportLinksMessagesUsageCurrencyEnum {
	return &e
}

func (e *FinalReportLinksMessagesUsageCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = FinalReportLinksMessagesUsageCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FinalReportLinksMessagesUsageCurrencyEnum: %v", v)
	}
}

type FinalReportLinksMessagesUsage struct {
	// The charge currency in ISO 4217 format.
	Currency *FinalReportLinksMessagesUsageCurrencyEnum `json:"currency,omitempty"`
	// The charge amount as a stringified number.
	Price *string `json:"price,omitempty"`
}

type FinalReportLinksMessages struct {
	Channel *FinalReportLinksMessagesChannelEnum `json:"channel,omitempty"`
	// Please note GET is not currently supported
	Href        *string                             `json:"href,omitempty"`
	MessageUUID *string                             `json:"message_uuid,omitempty"`
	Status      *FinalReportLinksMessagesStatusEnum `json:"status,omitempty"`
	Usage       *FinalReportLinksMessagesUsage      `json:"usage,omitempty"`
}

type FinalReportLinks struct {
	Messages []FinalReportLinksMessages `json:"messages,omitempty"`
}

type FinalReportStatusEnum string

const (
	FinalReportStatusEnumCompleted FinalReportStatusEnum = "completed"
	FinalReportStatusEnumError     FinalReportStatusEnum = "error"
)

func (e FinalReportStatusEnum) ToPointer() *FinalReportStatusEnum {
	return &e
}

func (e *FinalReportStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "completed":
		fallthrough
	case "error":
		*e = FinalReportStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FinalReportStatusEnum: %v", v)
	}
}

type FinalReportTemplateEnum string

const (
	FinalReportTemplateEnumFailover FinalReportTemplateEnum = "failover"
)

func (e FinalReportTemplateEnum) ToPointer() *FinalReportTemplateEnum {
	return &e
}

func (e *FinalReportTemplateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "failover":
		*e = FinalReportTemplateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FinalReportTemplateEnum: %v", v)
	}
}

// FinalReportUsageCurrencyEnum - The charge currency in ISO 4217 format.
type FinalReportUsageCurrencyEnum string

const (
	FinalReportUsageCurrencyEnumEur FinalReportUsageCurrencyEnum = "EUR"
)

func (e FinalReportUsageCurrencyEnum) ToPointer() *FinalReportUsageCurrencyEnum {
	return &e
}

func (e *FinalReportUsageCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = FinalReportUsageCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FinalReportUsageCurrencyEnum: %v", v)
	}
}

// FinalReportUsage - This is the total cost of your Workflow request. Please note if a preceding message in the workflow request is delivered after the final message in the workflow is delivered it may not reflect the true total cost of the workflow.
type FinalReportUsage struct {
	// The charge currency in ISO 4217 format.
	Currency *FinalReportUsageCurrencyEnum `json:"currency,omitempty"`
	// The charge amount as a stringified number.
	Price *string `json:"price,omitempty"`
}

type FinalReport struct {
	Links        *FinalReportLinks        `json:"_links,omitempty"`
	DispatchUUID *string                  `json:"dispatch_uuid,omitempty"`
	Status       *FinalReportStatusEnum   `json:"status,omitempty"`
	Template     *FinalReportTemplateEnum `json:"template,omitempty"`
	// The datetime of when the event occurred.
	Timestamp *string `json:"timestamp,omitempty"`
	// This is the total cost of your Workflow request. Please note if a preceding message in the workflow request is delivered after the final message in the workflow is delivered it may not reflect the true total cost of the workflow.
	Usage *FinalReportUsage `json:"usage,omitempty"`
}
