// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SubscriptionBillingCommitmentEnum - The financial commitment the customer has in the product
type SubscriptionBillingCommitmentEnum string

const (
	SubscriptionBillingCommitmentEnumPaid  SubscriptionBillingCommitmentEnum = "PAID"
	SubscriptionBillingCommitmentEnumFree  SubscriptionBillingCommitmentEnum = "FREE"
	SubscriptionBillingCommitmentEnumTrial SubscriptionBillingCommitmentEnum = "TRIAL"
)

func (e *SubscriptionBillingCommitmentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PAID":
		fallthrough
	case "FREE":
		fallthrough
	case "TRIAL":
		*e = SubscriptionBillingCommitmentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubscriptionBillingCommitmentEnum: %s", s)
	}
}

type SubscriptionBillingPastDueTypesEnum string

const (
	SubscriptionBillingPastDueTypesEnumAddon        SubscriptionBillingPastDueTypesEnum = "ADDON"
	SubscriptionBillingPastDueTypesEnumBurst        SubscriptionBillingPastDueTypesEnum = "BURST"
	SubscriptionBillingPastDueTypesEnumSubscription SubscriptionBillingPastDueTypesEnum = "SUBSCRIPTION"
)

func (e *SubscriptionBillingPastDueTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ADDON":
		fallthrough
	case "BURST":
		fallthrough
	case "SUBSCRIPTION":
		*e = SubscriptionBillingPastDueTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubscriptionBillingPastDueTypesEnum: %s", s)
	}
}

// SubscriptionBillingStatusEnum - Whether payments are past due
type SubscriptionBillingStatusEnum string

const (
	SubscriptionBillingStatusEnumCurrent SubscriptionBillingStatusEnum = "CURRENT"
	SubscriptionBillingStatusEnumPastDue SubscriptionBillingStatusEnum = "PAST_DUE"
)

func (e *SubscriptionBillingStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CURRENT":
		fallthrough
	case "PAST_DUE":
		*e = SubscriptionBillingStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubscriptionBillingStatusEnum: %s", s)
	}
}

type SubscriptionBilling struct {
	// The financial commitment the customer has in the product
	Commitment SubscriptionBillingCommitmentEnum `json:"commitment"`
	// The types of charges that are past due when `status` is PAST_DUE
	PastDueTypes []SubscriptionBillingPastDueTypesEnum `json:"pastDueTypes,omitempty"`
	// The point in time after which the Subscription will bill for automatic renewal
	RenewAt string `json:"renewAt"`
	// Whether payments are past due
	Status SubscriptionBillingStatusEnum `json:"status"`
}
