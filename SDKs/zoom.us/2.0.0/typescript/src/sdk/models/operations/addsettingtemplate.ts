/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The type of template. Values include `user`, `group`, `autoReceptionist`, `commonarea`, or `interop`.
 */
export enum AddSettingTemplateApplicationJSONTypeEnum {
  User = "user",
  Group = "group",
  AutoReceptionist = "autoReceptionist",
  Commonarea = "commonarea",
  Interop = "interop",
}

export class AddSettingTemplateApplicationJSON extends SpeakeasyBase {
  /**
   * A description of the template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The name of the template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Unique identifier of the site. Required only when multiple sites are enabled. See [Managing multiple sites](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) for details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "site_id" })
  siteId?: string;

  /**
   * The type of template. Values include `user`, `group`, `autoReceptionist`, `commonarea`, or `interop`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: AddSettingTemplateApplicationJSONTypeEnum;
}

/**
 * **HTTP Status Code:** `201`<br>
 *
 * @remarks
 * Created Successfully.
 */
export class AddSettingTemplate201ApplicationXML extends SpeakeasyBase {
  /**
   * Template description.
   */
  @SpeakeasyMetadata()
  description?: string;

  /**
   * Template ID.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * Template name.
   */
  @SpeakeasyMetadata()
  name?: string;

  /**
   * The type of template. Values include: `user`, `group`, `autoReceptionist`, `commonArea`, `zr`, or `interop`.
   */
  @SpeakeasyMetadata()
  type?: string;
}

/**
 * **HTTP Status Code:** `201`<br>
 *
 * @remarks
 * Created Successfully.
 */
export class AddSettingTemplate201ApplicationJSON extends SpeakeasyBase {
  /**
   * Template description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Template ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Template name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The type of template. Values include: `user`, `group`, `autoReceptionist`, `commonArea`, `zr`, or `interop`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class AddSettingTemplateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `201`<br>
   *
   * @remarks
   * Created Successfully.
   */
  @SpeakeasyMetadata()
  addSettingTemplate201ApplicationJSONObject?: AddSettingTemplate201ApplicationJSON;
}
