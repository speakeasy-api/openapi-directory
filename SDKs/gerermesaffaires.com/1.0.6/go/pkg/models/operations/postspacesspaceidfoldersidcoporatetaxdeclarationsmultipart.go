// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnum = "permanent"
)

func (e *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccounting struct {
	AccountedOn *string                                                                                   `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                                   `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataFile struct {
	File    string `multipartForm:"name=File"`
	Content []byte `multipartForm:"content"`
}

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnum string

const (
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnumOnestAdvance   PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnum = "1st advance"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnumTwondAdvance   PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnum = "2nd advance"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnumThreerdAdvance PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnum = "3rd advance"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnumFourthAdvance  PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnum = "4th advance"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnumRegularization PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnum = "regularization"
)

func (e *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1st advance":
		fallthrough
	case "2nd advance":
		fallthrough
	case "3rd advance":
		fallthrough
	case "4th advance":
		fallthrough
	case "regularization":
		*e = PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnum: %s", s)
	}
}

// PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormData1 - Corporate tax declaration to add (either (DeclarationDate,DocumentId) either (File,Name,Content64Encoded,Title,DeclarationDate) is mandatory)
type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormData1 struct {
	Accounting      *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataAccounting `multipartForm:"name=Accounting,json"`
	Amount          *float32                                                                      `multipartForm:"name=Amount"`
	Author          *string                                                                       `multipartForm:"name=Author"`
	Code            *string                                                                       `multipartForm:"name=Code"`
	Comment         *string                                                                       `multipartForm:"name=Comment"`
	Date            *string                                                                       `multipartForm:"name=Date"`
	DeclarationDate *string                                                                       `multipartForm:"name=DeclarationDate"`
	File            PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataFile        `multipartForm:"file"`
	Order           *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormDataOrderEnum  `multipartForm:"name=Order"`
	Rate            *float32                                                                      `multipartForm:"name=Rate"`
	TaxBase         *float32                                                                      `multipartForm:"name=TaxBase"`
	Title           string                                                                        `multipartForm:"name=Title"`
}

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartRequest struct {
	// Corporate tax declaration to add (either (DeclarationDate,DocumentId) either (File,Name,Content64Encoded,Title,DeclarationDate) is mandatory)
	RequestBody PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartFormData1 `request:"mediaType=multipart/form-data"`
	// Id of the folder result and taxation
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipart201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipart201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipart201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipart201ApplicationJSON
}
