<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AuthenticationManagement 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete authenticator configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationConfigIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationConfigIdResponse
     */
	public function deleteRealmAuthenticationConfigId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationConfigIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationConfigIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/config/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationConfigIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationConfigIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Delete execution
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationExecutionsExecutionIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationExecutionsExecutionIdResponse
     */
	public function deleteRealmAuthenticationExecutionsExecutionId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationExecutionsExecutionIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationExecutionsExecutionIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/executions/{executionId}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationExecutionsExecutionIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationExecutionsExecutionIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Delete an authentication flow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationFlowsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationFlowsIdResponse
     */
	public function deleteRealmAuthenticationFlowsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationFlowsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationFlowsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/flows/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationFlowsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationFlowsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Delete required action
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationRequiredActionsAliasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationRequiredActionsAliasResponse
     */
	public function deleteRealmAuthenticationRequiredActionsAlias(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationRequiredActionsAliasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationRequiredActionsAliasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/required-actions/{alias}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationRequiredActionsAliasRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAuthenticationRequiredActionsAliasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Get authenticator providers   Returns a list of authenticator providers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationAuthenticatorProvidersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationAuthenticatorProvidersResponse
     */
	public function getRealmAuthenticationAuthenticatorProviders(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationAuthenticatorProvidersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationAuthenticatorProvidersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/authenticator-providers', \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationAuthenticatorProvidersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationAuthenticatorProvidersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRealmAuthenticationAuthenticatorProviders2XXApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get client authenticator providers   Returns a list of client authenticator providers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationClientAuthenticatorProvidersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationClientAuthenticatorProvidersResponse
     */
	public function getRealmAuthenticationClientAuthenticatorProviders(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationClientAuthenticatorProvidersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationClientAuthenticatorProvidersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/client-authenticator-providers', \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationClientAuthenticatorProvidersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationClientAuthenticatorProvidersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRealmAuthenticationClientAuthenticatorProviders2XXApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get authenticator provider’s configuration description
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationConfigDescriptionProviderIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationConfigDescriptionProviderIdResponse
     */
	public function getRealmAuthenticationConfigDescriptionProviderId(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationConfigDescriptionProviderIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationConfigDescriptionProviderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/config-description/{providerId}', \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationConfigDescriptionProviderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationConfigDescriptionProviderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authenticatorConfigInfoRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AuthenticatorConfigInfoRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get authenticator configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationConfigIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationConfigIdResponse
     */
	public function getRealmAuthenticationConfigId(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationConfigIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationConfigIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/config/{id}', \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationConfigIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationConfigIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authenticatorConfigRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AuthenticatorConfigRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Single Execution
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationExecutionsExecutionIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationExecutionsExecutionIdResponse
     */
	public function getRealmAuthenticationExecutionsExecutionId(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationExecutionsExecutionIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationExecutionsExecutionIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/executions/{executionId}', \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationExecutionsExecutionIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationExecutionsExecutionIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Get authentication flows   Returns a list of authentication flows.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsResponse
     */
	public function getRealmAuthenticationFlows(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/flows', \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authenticationFlowRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AuthenticationFlowRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get authentication executions for a flow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsFlowAliasExecutionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsFlowAliasExecutionsResponse
     */
	public function getRealmAuthenticationFlowsFlowAliasExecutions(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsFlowAliasExecutionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsFlowAliasExecutionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/flows/{flowAlias}/executions', \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsFlowAliasExecutionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsFlowAliasExecutionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Get authentication flow for id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsIdResponse
     */
	public function getRealmAuthenticationFlowsId(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/flows/{id}', \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFlowsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authenticationFlowRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AuthenticationFlowRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get form action providers   Returns a list of form action providers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFormActionProvidersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFormActionProvidersResponse
     */
	public function getRealmAuthenticationFormActionProviders(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFormActionProvidersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFormActionProvidersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/form-action-providers', \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFormActionProvidersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFormActionProvidersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRealmAuthenticationFormActionProviders2XXApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get form providers   Returns a list of form providers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFormProvidersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFormProvidersResponse
     */
	public function getRealmAuthenticationFormProviders(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFormProvidersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFormProvidersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/form-providers', \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFormProvidersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationFormProvidersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRealmAuthenticationFormProviders2XXApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get configuration descriptions for all clients
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationPerClientConfigDescriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationPerClientConfigDescriptionResponse
     */
	public function getRealmAuthenticationPerClientConfigDescription(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationPerClientConfigDescriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationPerClientConfigDescriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/per-client-config-description', \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationPerClientConfigDescriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationPerClientConfigDescriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRealmAuthenticationPerClientConfigDescription2XXApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get required actions   Returns a list of required actions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationRequiredActionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationRequiredActionsResponse
     */
	public function getRealmAuthenticationRequiredActions(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationRequiredActionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationRequiredActionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/required-actions', \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationRequiredActionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationRequiredActionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->requiredActionProviderRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RequiredActionProviderRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get required action for alias
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationRequiredActionsAliasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationRequiredActionsAliasResponse
     */
	public function getRealmAuthenticationRequiredActionsAlias(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationRequiredActionsAliasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationRequiredActionsAliasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/required-actions/{alias}', \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationRequiredActionsAliasRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationRequiredActionsAliasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->requiredActionProviderRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RequiredActionProviderRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get unregistered required actions   Returns a list of unregistered required actions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationUnregisteredRequiredActionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationUnregisteredRequiredActionsResponse
     */
	public function getRealmAuthenticationUnregisteredRequiredActions(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationUnregisteredRequiredActionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationUnregisteredRequiredActionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/unregistered-required-actions', \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationUnregisteredRequiredActionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmAuthenticationUnregisteredRequiredActionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRealmAuthenticationUnregisteredRequiredActions2XXApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add new authentication execution
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsResponse
     */
	public function postRealmAuthenticationExecutions(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/executions', \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "authenticationExecutionRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Update execution with new configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdConfigResponse
     */
	public function postRealmAuthenticationExecutionsExecutionIdConfig(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/executions/{executionId}/config', \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "authenticatorConfigRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Lower execution’s priority
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdLowerPriorityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse
     */
	public function postRealmAuthenticationExecutionsExecutionIdLowerPriority(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdLowerPriorityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/executions/{executionId}/lower-priority', \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdLowerPriorityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Raise execution’s priority
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdRaisePriorityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse
     */
	public function postRealmAuthenticationExecutionsExecutionIdRaisePriority(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdRaisePriorityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/executions/{executionId}/raise-priority', \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdRaisePriorityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Create a new authentication flow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsResponse
     */
	public function postRealmAuthenticationFlows(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/flows', \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "authenticationFlowRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Copy existing authentication flow under a new name   The new name is given as 'newName' attribute of the passed JSON object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasCopyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasCopyResponse
     */
	public function postRealmAuthenticationFlowsFlowAliasCopy(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasCopyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasCopyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/flows/{flowAlias}/copy', \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasCopyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasCopyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Add new authentication execution to a flow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse
     */
	public function postRealmAuthenticationFlowsFlowAliasExecutionsExecution(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/flows/{flowAlias}/executions/execution', \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Add new flow with new execution to existing flow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasExecutionsFlowRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse
     */
	public function postRealmAuthenticationFlowsFlowAliasExecutionsFlow(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasExecutionsFlowRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/flows/{flowAlias}/executions/flow', \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasExecutionsFlowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Register a new required actions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRegisterRequiredActionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRegisterRequiredActionResponse
     */
	public function postRealmAuthenticationRegisterRequiredAction(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRegisterRequiredActionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRegisterRequiredActionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/register-required-action', \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRegisterRequiredActionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRegisterRequiredActionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Lower required action’s priority
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRequiredActionsAliasLowerPriorityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse
     */
	public function postRealmAuthenticationRequiredActionsAliasLowerPriority(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRequiredActionsAliasLowerPriorityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/required-actions/{alias}/lower-priority', \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRequiredActionsAliasLowerPriorityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Raise required action’s priority
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRequiredActionsAliasRaisePriorityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse
     */
	public function postRealmAuthenticationRequiredActionsAliasRaisePriority(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRequiredActionsAliasRaisePriorityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/required-actions/{alias}/raise-priority', \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRequiredActionsAliasRaisePriorityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Update authenticator configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationConfigIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationConfigIdResponse
     */
	public function putRealmAuthenticationConfigId(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationConfigIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationConfigIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/config/{id}', \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationConfigIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "authenticatorConfigRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationConfigIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Update authentication executions of a flow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationFlowsFlowAliasExecutionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationFlowsFlowAliasExecutionsResponse
     */
	public function putRealmAuthenticationFlowsFlowAliasExecutions(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationFlowsFlowAliasExecutionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationFlowsFlowAliasExecutionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/flows/{flowAlias}/executions', \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationFlowsFlowAliasExecutionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "authenticationExecutionInfoRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationFlowsFlowAliasExecutionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Update an authentication flow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationFlowsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationFlowsIdResponse
     */
	public function putRealmAuthenticationFlowsId(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationFlowsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationFlowsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/flows/{id}', \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationFlowsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "authenticationFlowRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationFlowsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Update required action
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationRequiredActionsAliasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationRequiredActionsAliasResponse
     */
	public function putRealmAuthenticationRequiredActionsAlias(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationRequiredActionsAliasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationRequiredActionsAliasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/authentication/required-actions/{alias}', \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationRequiredActionsAliasRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requiredActionProviderRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmAuthenticationRequiredActionsAliasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
}