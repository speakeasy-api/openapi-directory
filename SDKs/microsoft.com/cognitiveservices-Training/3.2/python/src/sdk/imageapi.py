"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ImageAPI:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_image_regions_form(self, request: operations.CreateImageRegionsFormRequest) -> operations.CreateImageRegionsFormResponse:
        r"""Create a set of image regions.
        This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
        There is a limit of 64 entries in the batch.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateImageRegionsFormRequest, base_url, '/projects/{projectId}/images/regions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "image_region_create_batch", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateImageRegionsFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageRegionCreateSummary])
                res.image_region_create_summary = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def create_image_regions_json(self, request: operations.CreateImageRegionsJSONRequest) -> operations.CreateImageRegionsJSONResponse:
        r"""Create a set of image regions.
        This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
        There is a limit of 64 entries in the batch.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateImageRegionsJSONRequest, base_url, '/projects/{projectId}/images/regions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "image_region_create_batch", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateImageRegionsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageRegionCreateSummary])
                res.image_region_create_summary = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def create_image_regions_raw(self, request: operations.CreateImageRegionsRawRequest) -> operations.CreateImageRegionsRawResponse:
        r"""Create a set of image regions.
        This API accepts a batch of image regions, and optionally tags, to update existing images with region information.
        There is a limit of 64 entries in the batch.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateImageRegionsRawRequest, base_url, '/projects/{projectId}/images/regions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateImageRegionsRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageRegionCreateSummary])
                res.image_region_create_summary = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def create_image_tags_form(self, request: operations.CreateImageTagsFormRequest) -> operations.CreateImageTagsFormResponse:
        r"""Associate a set of images with a set of tags."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateImageTagsFormRequest, base_url, '/projects/{projectId}/images/tags', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "image_tag_create_batch", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateImageTagsFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageTagCreateSummary])
                res.image_tag_create_summary = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def create_image_tags_json(self, request: operations.CreateImageTagsJSONRequest) -> operations.CreateImageTagsJSONResponse:
        r"""Associate a set of images with a set of tags."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateImageTagsJSONRequest, base_url, '/projects/{projectId}/images/tags', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "image_tag_create_batch", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateImageTagsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageTagCreateSummary])
                res.image_tag_create_summary = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def create_image_tags_raw(self, request: operations.CreateImageTagsRawRequest) -> operations.CreateImageTagsRawResponse:
        r"""Associate a set of images with a set of tags."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateImageTagsRawRequest, base_url, '/projects/{projectId}/images/tags', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateImageTagsRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageTagCreateSummary])
                res.image_tag_create_summary = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def create_images_from_data(self, request: operations.CreateImagesFromDataRequest) -> operations.CreateImagesFromDataResponse:
        r"""Add the provided images to the set of training images.
        This API accepts body content as multipart/form-data and application/octet-stream. When using multipart
        multiple image files can be sent at once, with a maximum of 64 files
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateImagesFromDataRequest, base_url, '/projects/{projectId}/images', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.CreateImagesFromDataRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateImagesFromDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageCreateSummary])
                res.image_create_summary = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def create_images_from_files_form(self, request: operations.CreateImagesFromFilesFormRequest) -> operations.CreateImagesFromFilesFormResponse:
        r"""Add the provided batch of images to the set of training images.
        This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateImagesFromFilesFormRequest, base_url, '/projects/{projectId}/images/files', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "image_file_create_batch", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateImagesFromFilesFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageCreateSummary])
                res.image_create_summary = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def create_images_from_files_json(self, request: operations.CreateImagesFromFilesJSONRequest) -> operations.CreateImagesFromFilesJSONResponse:
        r"""Add the provided batch of images to the set of training images.
        This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateImagesFromFilesJSONRequest, base_url, '/projects/{projectId}/images/files', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "image_file_create_batch", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateImagesFromFilesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageCreateSummary])
                res.image_create_summary = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def create_images_from_files_raw(self, request: operations.CreateImagesFromFilesRawRequest) -> operations.CreateImagesFromFilesRawResponse:
        r"""Add the provided batch of images to the set of training images.
        This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateImagesFromFilesRawRequest, base_url, '/projects/{projectId}/images/files', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateImagesFromFilesRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageCreateSummary])
                res.image_create_summary = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def create_images_from_predictions_form(self, request: operations.CreateImagesFromPredictionsFormRequest) -> operations.CreateImagesFromPredictionsFormResponse:
        r"""Add the specified predicted images to the set of training images.
        This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateImagesFromPredictionsFormRequest, base_url, '/projects/{projectId}/images/predictions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "image_id_create_batch", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateImagesFromPredictionsFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageCreateSummary])
                res.image_create_summary = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def create_images_from_predictions_json(self, request: operations.CreateImagesFromPredictionsJSONRequest) -> operations.CreateImagesFromPredictionsJSONResponse:
        r"""Add the specified predicted images to the set of training images.
        This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateImagesFromPredictionsJSONRequest, base_url, '/projects/{projectId}/images/predictions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "image_id_create_batch", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateImagesFromPredictionsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageCreateSummary])
                res.image_create_summary = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def create_images_from_predictions_raw(self, request: operations.CreateImagesFromPredictionsRawRequest) -> operations.CreateImagesFromPredictionsRawResponse:
        r"""Add the specified predicted images to the set of training images.
        This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateImagesFromPredictionsRawRequest, base_url, '/projects/{projectId}/images/predictions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateImagesFromPredictionsRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageCreateSummary])
                res.image_create_summary = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def create_images_from_urls_form(self, request: operations.CreateImagesFromUrlsFormRequest) -> operations.CreateImagesFromUrlsFormResponse:
        r"""Add the provided images urls to the set of training images.
        This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateImagesFromUrlsFormRequest, base_url, '/projects/{projectId}/images/urls', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "image_url_create_batch", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateImagesFromUrlsFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageCreateSummary])
                res.image_create_summary = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def create_images_from_urls_json(self, request: operations.CreateImagesFromUrlsJSONRequest) -> operations.CreateImagesFromUrlsJSONResponse:
        r"""Add the provided images urls to the set of training images.
        This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateImagesFromUrlsJSONRequest, base_url, '/projects/{projectId}/images/urls', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "image_url_create_batch", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateImagesFromUrlsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageCreateSummary])
                res.image_create_summary = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def create_images_from_urls_raw(self, request: operations.CreateImagesFromUrlsRawRequest) -> operations.CreateImagesFromUrlsRawResponse:
        r"""Add the provided images urls to the set of training images.
        This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateImagesFromUrlsRawRequest, base_url, '/projects/{projectId}/images/urls', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateImagesFromUrlsRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImageCreateSummary])
                res.image_create_summary = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def delete_image_regions(self, request: operations.DeleteImageRegionsRequest) -> operations.DeleteImageRegionsResponse:
        r"""Delete a set of image regions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteImageRegionsRequest, base_url, '/projects/{projectId}/images/regions', request)
        
        query_params = utils.get_query_params(operations.DeleteImageRegionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteImageRegionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def delete_image_tags(self, request: operations.DeleteImageTagsRequest) -> operations.DeleteImageTagsResponse:
        r"""Remove a set of tags from a set of images."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteImageTagsRequest, base_url, '/projects/{projectId}/images/tags', request)
        
        query_params = utils.get_query_params(operations.DeleteImageTagsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteImageTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def delete_images(self, request: operations.DeleteImagesRequest) -> operations.DeleteImagesResponse:
        r"""Delete images from the set of training images."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteImagesRequest, base_url, '/projects/{projectId}/images', request)
        
        query_params = utils.get_query_params(operations.DeleteImagesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteImagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [202, 204]:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_images_by_ids(self, request: operations.GetImagesByIdsRequest) -> operations.GetImagesByIdsResponse:
        r"""Get images by id for a given project iteration.
        This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the
        current workspace is used.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetImagesByIdsRequest, base_url, '/projects/{projectId}/images/id', request)
        
        query_params = utils.get_query_params(operations.GetImagesByIdsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetImagesByIdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Image]])
                res.images = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def get_tagged_image_count(self, request: operations.GetTaggedImageCountRequest) -> operations.GetTaggedImageCountResponse:
        r"""Gets the number of images tagged with the provided {tagIds}.
        The filtering is on an and/or relationship. For example, if the provided tag ids are for the \"Dog\" and
        \"Cat\" tags, then only images tagged with Dog and/or Cat will be returned
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTaggedImageCountRequest, base_url, '/projects/{projectId}/images/tagged/count', request)
        
        query_params = utils.get_query_params(operations.GetTaggedImageCountRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTaggedImageCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.get_tagged_image_count_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def get_tagged_images(self, request: operations.GetTaggedImagesRequest) -> operations.GetTaggedImagesResponse:
        r"""Get tagged images for a given project iteration.
        This API supports batching and range selection. By default it will only return first 50 images matching images.
        Use the {take} and {skip} parameters to control how many images to return in a given batch.
        The filtering is on an and/or relationship. For example, if the provided tag ids are for the \"Dog\" and
        \"Cat\" tags, then only images tagged with Dog and/or Cat will be returned
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTaggedImagesRequest, base_url, '/projects/{projectId}/images/tagged', request)
        
        query_params = utils.get_query_params(operations.GetTaggedImagesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTaggedImagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Image]])
                res.images = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def get_untagged_image_count(self, request: operations.GetUntaggedImageCountRequest) -> operations.GetUntaggedImageCountResponse:
        r"""Gets the number of untagged images.
        This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the
        current workspace is used.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUntaggedImageCountRequest, base_url, '/projects/{projectId}/images/untagged/count', request)
        
        query_params = utils.get_query_params(operations.GetUntaggedImageCountRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUntaggedImageCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.get_untagged_image_count_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def get_untagged_images(self, request: operations.GetUntaggedImagesRequest) -> operations.GetUntaggedImagesResponse:
        r"""Get untagged images for a given project iteration.
        This API supports batching and range selection. By default it will only return first 50 images matching images.
        Use the {take} and {skip} parameters to control how many images to return in a given batch.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUntaggedImagesRequest, base_url, '/projects/{projectId}/images/untagged', request)
        
        query_params = utils.get_query_params(operations.GetUntaggedImagesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUntaggedImagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Image]])
                res.images = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def query_suggested_image_count_form(self, request: operations.QuerySuggestedImageCountFormRequest) -> operations.QuerySuggestedImageCountFormResponse:
        r"""Get count of images whose suggested tags match given tags and their probabilities are greater than or equal to the given threshold. Returns count as 0 if none found.
        This API takes in tagIds to get count of untagged images per suggested tags for a given threshold.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.QuerySuggestedImageCountFormRequest, base_url, '/projects/{projectId}/images/suggested/count', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "tag_filter", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.QuerySuggestedImageCountFormRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.QuerySuggestedImageCountFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, int]])
                res.query_suggested_image_count_form_200_application_json_object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def query_suggested_image_count_json(self, request: operations.QuerySuggestedImageCountJSONRequest) -> operations.QuerySuggestedImageCountJSONResponse:
        r"""Get count of images whose suggested tags match given tags and their probabilities are greater than or equal to the given threshold. Returns count as 0 if none found.
        This API takes in tagIds to get count of untagged images per suggested tags for a given threshold.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.QuerySuggestedImageCountJSONRequest, base_url, '/projects/{projectId}/images/suggested/count', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "tag_filter", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.QuerySuggestedImageCountJSONRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.QuerySuggestedImageCountJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, int]])
                res.query_suggested_image_count_json_200_application_json_object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def query_suggested_image_count_raw(self, request: operations.QuerySuggestedImageCountRawRequest) -> operations.QuerySuggestedImageCountRawResponse:
        r"""Get count of images whose suggested tags match given tags and their probabilities are greater than or equal to the given threshold. Returns count as 0 if none found.
        This API takes in tagIds to get count of untagged images per suggested tags for a given threshold.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.QuerySuggestedImageCountRawRequest, base_url, '/projects/{projectId}/images/suggested/count', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.QuerySuggestedImageCountRawRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.QuerySuggestedImageCountRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, int]])
                res.query_suggested_image_count_raw_200_application_json_object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def query_suggested_images_form(self, request: operations.QuerySuggestedImagesFormRequest) -> operations.QuerySuggestedImagesFormResponse:
        r"""Get untagged images whose suggested tags match given tags. Returns empty array if no images are found.
        This API will fetch untagged images filtered by suggested tags Ids. It returns an empty array if no images are found.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.QuerySuggestedImagesFormRequest, base_url, '/projects/{projectId}/images/suggested', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "suggested_tag_and_region_query_token", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.QuerySuggestedImagesFormRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.QuerySuggestedImagesFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SuggestedTagAndRegionQuery])
                res.suggested_tag_and_region_query = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def query_suggested_images_json(self, request: operations.QuerySuggestedImagesJSONRequest) -> operations.QuerySuggestedImagesJSONResponse:
        r"""Get untagged images whose suggested tags match given tags. Returns empty array if no images are found.
        This API will fetch untagged images filtered by suggested tags Ids. It returns an empty array if no images are found.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.QuerySuggestedImagesJSONRequest, base_url, '/projects/{projectId}/images/suggested', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "suggested_tag_and_region_query_token", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.QuerySuggestedImagesJSONRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.QuerySuggestedImagesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SuggestedTagAndRegionQuery])
                res.suggested_tag_and_region_query = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    def query_suggested_images_raw(self, request: operations.QuerySuggestedImagesRawRequest) -> operations.QuerySuggestedImagesRawResponse:
        r"""Get untagged images whose suggested tags match given tags. Returns empty array if no images are found.
        This API will fetch untagged images filtered by suggested tags Ids. It returns an empty array if no images are found.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.QuerySuggestedImagesRawRequest, base_url, '/projects/{projectId}/images/suggested', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.QuerySuggestedImagesRawRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.QuerySuggestedImagesRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SuggestedTagAndRegionQuery])
                res.suggested_tag_and_region_query = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    