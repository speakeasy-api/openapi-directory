// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchGetItemXAmzTargetEnum
type BatchGetItemXAmzTargetEnum string

const (
	BatchGetItemXAmzTargetEnumDynamoDb20120810BatchGetItem BatchGetItemXAmzTargetEnum = "DynamoDB_20120810.BatchGetItem"
)

func (e BatchGetItemXAmzTargetEnum) ToPointer() *BatchGetItemXAmzTargetEnum {
	return &e
}

func (e *BatchGetItemXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DynamoDB_20120810.BatchGetItem":
		*e = BatchGetItemXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchGetItemXAmzTargetEnum: %v", v)
	}
}

type BatchGetItemRequest struct {
	BatchGetItemInput shared.BatchGetItemInput `request:"mediaType=application/json"`
	// Pagination token
	RequestItems      *string                    `queryParam:"style=form,explode=true,name=RequestItems"`
	XAmzAlgorithm     *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        BatchGetItemXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchGetItemResponse struct {
	// Success
	BatchGetItemOutput *shared.BatchGetItemOutput
	ContentType        string
	// InternalServerError
	InternalServerError interface{}
	// ProvisionedThroughputExceededException
	ProvisionedThroughputExceededException interface{}
	// RequestLimitExceeded
	RequestLimitExceeded interface{}
	StatusCode           int
	RawResponse          *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
