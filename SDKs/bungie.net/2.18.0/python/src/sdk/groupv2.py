"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class GroupV2:
    r"""groupV2"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def group_v2_abdicate_foundership(self, request: operations.GroupV2AbdicateFoundershipRequest) -> operations.GroupV2AbdicateFoundershipResponse:
        r"""An administrative method to allow the founder of a group or clan to give up their position to another admin permanently."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2AbdicateFoundershipRequest, base_url, '/GroupV2/{groupId}/Admin/AbdicateFoundership/{membershipType}/{founderIdNew}/', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2AbdicateFoundershipResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_add_optional_conversation(self, request: operations.GroupV2AddOptionalConversationRequest, security: operations.GroupV2AddOptionalConversationSecurity) -> operations.GroupV2AddOptionalConversationResponse:
        r"""Add a new optional conversation/chat channel. Requires admin permissions to the group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2AddOptionalConversationRequest, base_url, '/GroupV2/{groupId}/OptionalConversations/Add/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2AddOptionalConversationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_approve_all_pending(self, request: operations.GroupV2ApproveAllPendingRequest, security: operations.GroupV2ApproveAllPendingSecurity) -> operations.GroupV2ApproveAllPendingResponse:
        r"""Approve all of the pending users for the given group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2ApproveAllPendingRequest, base_url, '/GroupV2/{groupId}/Members/ApproveAll/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2ApproveAllPendingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_approve_pending(self, request: operations.GroupV2ApprovePendingRequest, security: operations.GroupV2ApprovePendingSecurity) -> operations.GroupV2ApprovePendingResponse:
        r"""Approve the given membershipId to join the group/clan as long as they have applied."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2ApprovePendingRequest, base_url, '/GroupV2/{groupId}/Members/Approve/{membershipType}/{membershipId}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2ApprovePendingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_approve_pending_for_list(self, request: operations.GroupV2ApprovePendingForListRequest, security: operations.GroupV2ApprovePendingForListSecurity) -> operations.GroupV2ApprovePendingForListResponse:
        r"""Approve all of the pending users for the given group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2ApprovePendingForListRequest, base_url, '/GroupV2/{groupId}/Members/ApproveList/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2ApprovePendingForListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_ban_member(self, request: operations.GroupV2BanMemberRequest, security: operations.GroupV2BanMemberSecurity) -> operations.GroupV2BanMemberResponse:
        r"""Bans the requested member from the requested group for the specified period of time."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2BanMemberRequest, base_url, '/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Ban/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2BanMemberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_deny_all_pending(self, request: operations.GroupV2DenyAllPendingRequest, security: operations.GroupV2DenyAllPendingSecurity) -> operations.GroupV2DenyAllPendingResponse:
        r"""Deny all of the pending users for the given group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2DenyAllPendingRequest, base_url, '/GroupV2/{groupId}/Members/DenyAll/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2DenyAllPendingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_deny_pending_for_list(self, request: operations.GroupV2DenyPendingForListRequest, security: operations.GroupV2DenyPendingForListSecurity) -> operations.GroupV2DenyPendingForListResponse:
        r"""Deny all of the pending users for the given group that match the passed-in ."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2DenyPendingForListRequest, base_url, '/GroupV2/{groupId}/Members/DenyList/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2DenyPendingForListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_edit_clan_banner(self, request: operations.GroupV2EditClanBannerRequest, security: operations.GroupV2EditClanBannerSecurity) -> operations.GroupV2EditClanBannerResponse:
        r"""Edit an existing group's clan banner. You must have suitable permissions in the group to perform this operation. All fields are required."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2EditClanBannerRequest, base_url, '/GroupV2/{groupId}/EditClanBanner/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2EditClanBannerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_edit_founder_options(self, request: operations.GroupV2EditFounderOptionsRequest, security: operations.GroupV2EditFounderOptionsSecurity) -> operations.GroupV2EditFounderOptionsResponse:
        r"""Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2EditFounderOptionsRequest, base_url, '/GroupV2/{groupId}/EditFounderOptions/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2EditFounderOptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_edit_group(self, request: operations.GroupV2EditGroupRequest, security: operations.GroupV2EditGroupSecurity) -> operations.GroupV2EditGroupResponse:
        r"""Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2EditGroupRequest, base_url, '/GroupV2/{groupId}/Edit/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2EditGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_edit_group_membership(self, request: operations.GroupV2EditGroupMembershipRequest, security: operations.GroupV2EditGroupMembershipSecurity) -> operations.GroupV2EditGroupMembershipResponse:
        r"""Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2EditGroupMembershipRequest, base_url, '/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/SetMembershipType/{memberType}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2EditGroupMembershipResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_edit_optional_conversation(self, request: operations.GroupV2EditOptionalConversationRequest, security: operations.GroupV2EditOptionalConversationSecurity) -> operations.GroupV2EditOptionalConversationResponse:
        r"""Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2EditOptionalConversationRequest, base_url, '/GroupV2/{groupId}/OptionalConversations/Edit/{conversationId}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2EditOptionalConversationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_get_admins_and_founder_of_group(self, request: operations.GroupV2GetAdminsAndFounderOfGroupRequest) -> operations.GroupV2GetAdminsAndFounderOfGroupResponse:
        r"""Get the list of members in a given group who are of admin level or higher."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2GetAdminsAndFounderOfGroupRequest, base_url, '/GroupV2/{groupId}/AdminsAndFounder/', request)
        
        query_params = utils.get_query_params(operations.GroupV2GetAdminsAndFounderOfGroupRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2GetAdminsAndFounderOfGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_get_available_avatars(self) -> operations.GroupV2GetAvailableAvatarsResponse:
        r"""Returns a list of all available group avatars for the signed-in user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/GroupV2/GetAvailableAvatars/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2GetAvailableAvatarsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_get_available_themes(self) -> operations.GroupV2GetAvailableThemesResponse:
        r"""Returns a list of all available group themes."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/GroupV2/GetAvailableThemes/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2GetAvailableThemesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_get_banned_members_of_group(self, request: operations.GroupV2GetBannedMembersOfGroupRequest, security: operations.GroupV2GetBannedMembersOfGroupSecurity) -> operations.GroupV2GetBannedMembersOfGroupResponse:
        r"""Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2GetBannedMembersOfGroupRequest, base_url, '/GroupV2/{groupId}/Banned/', request)
        
        query_params = utils.get_query_params(operations.GroupV2GetBannedMembersOfGroupRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2GetBannedMembersOfGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_get_group(self, request: operations.GroupV2GetGroupRequest) -> operations.GroupV2GetGroupResponse:
        r"""Get information about a specific group of the given ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2GetGroupRequest, base_url, '/GroupV2/{groupId}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2GetGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_get_group_by_name(self, request: operations.GroupV2GetGroupByNameRequest) -> operations.GroupV2GetGroupByNameResponse:
        r"""Get information about a specific group with the given name and type."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2GetGroupByNameRequest, base_url, '/GroupV2/Name/{groupName}/{groupType}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2GetGroupByNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_get_group_by_name_v2(self) -> operations.GroupV2GetGroupByNameV2Response:
        r"""Get information about a specific group with the given name and type. The POST version."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/GroupV2/NameV2/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2GetGroupByNameV2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_get_group_optional_conversations(self, request: operations.GroupV2GetGroupOptionalConversationsRequest) -> operations.GroupV2GetGroupOptionalConversationsResponse:
        r"""Gets a list of available optional conversation channels and their settings."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2GetGroupOptionalConversationsRequest, base_url, '/GroupV2/{groupId}/OptionalConversations/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2GetGroupOptionalConversationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_get_groups_for_member(self, request: operations.GroupV2GetGroupsForMemberRequest) -> operations.GroupV2GetGroupsForMemberResponse:
        r"""Get information about the groups that a given member has joined."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2GetGroupsForMemberRequest, base_url, '/GroupV2/User/{membershipType}/{membershipId}/{filter}/{groupType}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2GetGroupsForMemberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_get_invited_individuals(self, request: operations.GroupV2GetInvitedIndividualsRequest, security: operations.GroupV2GetInvitedIndividualsSecurity) -> operations.GroupV2GetInvitedIndividualsResponse:
        r"""Get the list of users who have been invited into the group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2GetInvitedIndividualsRequest, base_url, '/GroupV2/{groupId}/Members/InvitedIndividuals/', request)
        
        query_params = utils.get_query_params(operations.GroupV2GetInvitedIndividualsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2GetInvitedIndividualsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_get_members_of_group(self, request: operations.GroupV2GetMembersOfGroupRequest) -> operations.GroupV2GetMembersOfGroupResponse:
        r"""Get the list of members in a given group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2GetMembersOfGroupRequest, base_url, '/GroupV2/{groupId}/Members/', request)
        
        query_params = utils.get_query_params(operations.GroupV2GetMembersOfGroupRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2GetMembersOfGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_get_pending_memberships(self, request: operations.GroupV2GetPendingMembershipsRequest, security: operations.GroupV2GetPendingMembershipsSecurity) -> operations.GroupV2GetPendingMembershipsResponse:
        r"""Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2GetPendingMembershipsRequest, base_url, '/GroupV2/{groupId}/Members/Pending/', request)
        
        query_params = utils.get_query_params(operations.GroupV2GetPendingMembershipsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2GetPendingMembershipsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_get_potential_groups_for_member(self, request: operations.GroupV2GetPotentialGroupsForMemberRequest) -> operations.GroupV2GetPotentialGroupsForMemberResponse:
        r"""Get information about the groups that a given member has applied to or been invited to."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2GetPotentialGroupsForMemberRequest, base_url, '/GroupV2/User/Potential/{membershipType}/{membershipId}/{filter}/{groupType}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2GetPotentialGroupsForMemberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_get_recommended_groups(self, request: operations.GroupV2GetRecommendedGroupsRequest, security: operations.GroupV2GetRecommendedGroupsSecurity) -> operations.GroupV2GetRecommendedGroupsResponse:
        r"""Gets groups recommended for you based on the groups to whom those you follow belong."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2GetRecommendedGroupsRequest, base_url, '/GroupV2/Recommended/{groupType}/{createDateRange}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2GetRecommendedGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_get_user_clan_invite_setting(self, request: operations.GroupV2GetUserClanInviteSettingRequest, security: operations.GroupV2GetUserClanInviteSettingSecurity) -> operations.GroupV2GetUserClanInviteSettingResponse:
        r"""Gets the state of the user's clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2GetUserClanInviteSettingRequest, base_url, '/GroupV2/GetUserClanInviteSetting/{mType}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2GetUserClanInviteSettingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_group_search(self) -> operations.GroupV2GroupSearchResponse:
        r"""Search for Groups."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/GroupV2/Search/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2GroupSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_individual_group_invite(self, request: operations.GroupV2IndividualGroupInviteRequest, security: operations.GroupV2IndividualGroupInviteSecurity) -> operations.GroupV2IndividualGroupInviteResponse:
        r"""Invite a user to join this group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2IndividualGroupInviteRequest, base_url, '/GroupV2/{groupId}/Members/IndividualInvite/{membershipType}/{membershipId}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2IndividualGroupInviteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_individual_group_invite_cancel(self, request: operations.GroupV2IndividualGroupInviteCancelRequest, security: operations.GroupV2IndividualGroupInviteCancelSecurity) -> operations.GroupV2IndividualGroupInviteCancelResponse:
        r"""Cancels a pending invitation to join a group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2IndividualGroupInviteCancelRequest, base_url, '/GroupV2/{groupId}/Members/IndividualInviteCancel/{membershipType}/{membershipId}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2IndividualGroupInviteCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_kick_member(self, request: operations.GroupV2KickMemberRequest, security: operations.GroupV2KickMemberSecurity) -> operations.GroupV2KickMemberResponse:
        r"""Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2KickMemberRequest, base_url, '/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Kick/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2KickMemberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_recover_group_for_founder(self, request: operations.GroupV2RecoverGroupForFounderRequest) -> operations.GroupV2RecoverGroupForFounderResponse:
        r"""Allows a founder to manually recover a group they can see in game but not on bungie.net"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2RecoverGroupForFounderRequest, base_url, '/GroupV2/Recover/{membershipType}/{membershipId}/{groupType}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2RecoverGroupForFounderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def group_v2_unban_member(self, request: operations.GroupV2UnbanMemberRequest, security: operations.GroupV2UnbanMemberSecurity) -> operations.GroupV2UnbanMemberResponse:
        r"""Unbans the requested member, allowing them to re-apply for membership."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupV2UnbanMemberRequest, base_url, '/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Unban/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupV2UnbanMemberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    