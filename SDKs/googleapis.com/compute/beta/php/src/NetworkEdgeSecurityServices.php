<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class NetworkEdgeSecurityServices 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves the list of all NetworkEdgeSecurityService resources available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesAggregatedListResponse
     */
	public function computeNetworkEdgeSecurityServicesAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/networkEdgeSecurityServices', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->networkEdgeSecurityServiceAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NetworkEdgeSecurityServiceAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesDeleteResponse
     */
	public function computeNetworkEdgeSecurityServicesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a specified NetworkEdgeSecurityService.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesGetResponse
     */
	public function computeNetworkEdgeSecurityServicesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->networkEdgeSecurityService = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NetworkEdgeSecurityService', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new service in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesInsertResponse
     */
	public function computeNetworkEdgeSecurityServicesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/networkEdgeSecurityServices', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "networkEdgeSecurityService", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified policy with the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesPatchResponse
     */
	public function computeNetworkEdgeSecurityServicesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "networkEdgeSecurityService1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkEdgeSecurityServicesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}