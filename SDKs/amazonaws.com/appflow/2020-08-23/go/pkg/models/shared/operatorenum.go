// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type OperatorEnum string

const (
	OperatorEnumProjection           OperatorEnum = "PROJECTION"
	OperatorEnumLessThan             OperatorEnum = "LESS_THAN"
	OperatorEnumGreaterThan          OperatorEnum = "GREATER_THAN"
	OperatorEnumContains             OperatorEnum = "CONTAINS"
	OperatorEnumBetween              OperatorEnum = "BETWEEN"
	OperatorEnumLessThanOrEqualTo    OperatorEnum = "LESS_THAN_OR_EQUAL_TO"
	OperatorEnumGreaterThanOrEqualTo OperatorEnum = "GREATER_THAN_OR_EQUAL_TO"
	OperatorEnumEqualTo              OperatorEnum = "EQUAL_TO"
	OperatorEnumNotEqualTo           OperatorEnum = "NOT_EQUAL_TO"
	OperatorEnumAddition             OperatorEnum = "ADDITION"
	OperatorEnumMultiplication       OperatorEnum = "MULTIPLICATION"
	OperatorEnumDivision             OperatorEnum = "DIVISION"
	OperatorEnumSubtraction          OperatorEnum = "SUBTRACTION"
	OperatorEnumMaskAll              OperatorEnum = "MASK_ALL"
	OperatorEnumMaskFirstN           OperatorEnum = "MASK_FIRST_N"
	OperatorEnumMaskLastN            OperatorEnum = "MASK_LAST_N"
	OperatorEnumValidateNonNull      OperatorEnum = "VALIDATE_NON_NULL"
	OperatorEnumValidateNonZero      OperatorEnum = "VALIDATE_NON_ZERO"
	OperatorEnumValidateNonNegative  OperatorEnum = "VALIDATE_NON_NEGATIVE"
	OperatorEnumValidateNumeric      OperatorEnum = "VALIDATE_NUMERIC"
	OperatorEnumNoOp                 OperatorEnum = "NO_OP"
)

func (e OperatorEnum) ToPointer() *OperatorEnum {
	return &e
}

func (e *OperatorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROJECTION":
		fallthrough
	case "LESS_THAN":
		fallthrough
	case "GREATER_THAN":
		fallthrough
	case "CONTAINS":
		fallthrough
	case "BETWEEN":
		fallthrough
	case "LESS_THAN_OR_EQUAL_TO":
		fallthrough
	case "GREATER_THAN_OR_EQUAL_TO":
		fallthrough
	case "EQUAL_TO":
		fallthrough
	case "NOT_EQUAL_TO":
		fallthrough
	case "ADDITION":
		fallthrough
	case "MULTIPLICATION":
		fallthrough
	case "DIVISION":
		fallthrough
	case "SUBTRACTION":
		fallthrough
	case "MASK_ALL":
		fallthrough
	case "MASK_FIRST_N":
		fallthrough
	case "MASK_LAST_N":
		fallthrough
	case "VALIDATE_NON_NULL":
		fallthrough
	case "VALIDATE_NON_ZERO":
		fallthrough
	case "VALIDATE_NON_NEGATIVE":
		fallthrough
	case "VALIDATE_NUMERIC":
		fallthrough
	case "NO_OP":
		*e = OperatorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OperatorEnum: %v", v)
	}
}
