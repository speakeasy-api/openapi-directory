<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class DatasetAccess
{
	#[\JMS\Serializer\Annotation\SerializedName('dataset')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DatasetAccessEntry')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DatasetAccessEntry $dataset = null;
    
    /**
     * [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN".
     * 
     * @var ?string $domain
     */
	#[\JMS\Serializer\Annotation\SerializedName('domain')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $domain = null;
    
    /**
     * [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP".
     * 
     * @var ?string $groupByEmail
     */
	#[\JMS\Serializer\Annotation\SerializedName('groupByEmail')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $groupByEmail = null;
    
    /**
     * [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
     * 
     * @var ?string $iamMember
     */
	#[\JMS\Serializer\Annotation\SerializedName('iamMember')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $iamMember = null;
    
    /**
     * [Required] An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER  roles/bigquery.dataOwner WRITER  roles/bigquery.dataEditor READER  roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to "roles/bigquery.dataOwner", it will be returned back as "OWNER".
     * 
     * @var ?string $role
     */
	#[\JMS\Serializer\Annotation\SerializedName('role')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $role = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('routine')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\RoutineReference')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RoutineReference $routine = null;
    
    /**
     * [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
     * 
     * @var ?string $specialGroup
     */
	#[\JMS\Serializer\Annotation\SerializedName('specialGroup')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $specialGroup = null;
    
    /**
     * [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL".
     * 
     * @var ?string $userByEmail
     */
	#[\JMS\Serializer\Annotation\SerializedName('userByEmail')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userByEmail = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('view')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TableReference')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TableReference $view = null;
    
	public function __construct()
	{
		$this->dataset = null;
		$this->domain = null;
		$this->groupByEmail = null;
		$this->iamMember = null;
		$this->role = null;
		$this->routine = null;
		$this->specialGroup = null;
		$this->userByEmail = null;
		$this->view = null;
	}
}
