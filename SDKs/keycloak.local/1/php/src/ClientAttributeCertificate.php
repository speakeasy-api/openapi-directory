<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ClientAttributeCertificate 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get key info
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdCertificatesAttrRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdCertificatesAttrResponse
     */
	public function getRealmClientsIdCertificatesAttr(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdCertificatesAttrRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdCertificatesAttrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/certificates/{attr}', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdCertificatesAttrRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdCertificatesAttrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->certificateRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CertificateRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a keystore file for the client, containing private key and public certificate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrDownloadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrDownloadResponse
     */
	public function postRealmClientsIdCertificatesAttrDownload(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrDownloadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrDownloadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/certificates/{attr}/download', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrDownloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "keyStoreConfig", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrDownloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->postRealmClientsIdCertificatesAttrDownload2XXApplicationOctetStreamByteString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Generate a new certificate with new key pair
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrGenerateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrGenerateResponse
     */
	public function postRealmClientsIdCertificatesAttrGenerate(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrGenerateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrGenerateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/certificates/{attr}/generate', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrGenerateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrGenerateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->certificateRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CertificateRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrGenerateAndDownloadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse
     */
	public function postRealmClientsIdCertificatesAttrGenerateAndDownload(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrGenerateAndDownloadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/certificates/{attr}/generate-and-download', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrGenerateAndDownloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "keyStoreConfig", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->postRealmClientsIdCertificatesAttrGenerateAndDownload2XXApplicationOctetStreamByteString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Upload certificate and eventually private key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrUploadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrUploadResponse
     */
	public function postRealmClientsIdCertificatesAttrUpload(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrUploadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/certificates/{attr}/upload', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrUploadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->certificateRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CertificateRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upload only certificate, not private key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrUploadCertificateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrUploadCertificateResponse
     */
	public function postRealmClientsIdCertificatesAttrUploadCertificate(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrUploadCertificateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrUploadCertificateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/certificates/{attr}/upload-certificate', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrUploadCertificateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdCertificatesAttrUploadCertificateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->certificateRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CertificateRepresentation', 'json');
            }
        }

        return $response;
    }
}