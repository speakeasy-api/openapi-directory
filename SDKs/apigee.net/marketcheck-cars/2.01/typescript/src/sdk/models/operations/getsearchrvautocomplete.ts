/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Field name for which you want auto-completion
 */
export enum GetSearchRvAutoCompleteFieldEnum {
  Make = "make",
  Model = "model",
  Trim = "trim",
  Class = "class",
  Transmission = "transmission",
  FuelType = "fuel_type",
  ExteriorColor = "exterior_color",
  InteriorColor = "interior_color",
  Engine = "engine",
  State = "state",
  City = "city",
}

/**
 * Sort the response, either by index or count(default)
 */
export enum GetSearchRvAutoCompleteSortByEnum {
  Index = "index",
  Count = "count",
}

export class GetSearchRvAutoCompleteRequest extends SpeakeasyBase {
  /**
   * The API Authentication Key. Mandatory with all API calls.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=api_key",
  })
  apiKey?: string;

  /**
   * To filter listing on their body type
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=body_type",
  })
  bodyType?: string;

  /**
   * To filter listing on City in which they are listed
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=city" })
  city?: string;

  /**
   * Color of the vehicle
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=color" })
  color?: string;

  /**
   * To filter listing on their drivetrain
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=drivetrain",
  })
  drivetrain?: string;

  /**
   * To filter listing on their engine
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=engine",
  })
  engine?: string;

  /**
   * Provide minimum count value for facets
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=facet_min_count",
  })
  facetMinCount?: number;

  /**
   * Field name for which you want auto-completion
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=field" })
  field: GetSearchRvAutoCompleteFieldEnum;

  /**
   * To filter listing on their fuel type
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fuel_type",
  })
  fuelType?: string;

  /**
   * Boolean variable to indicate ignore case of current input
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ignore_case",
  })
  ignoreCase?: boolean;

  /**
   * Input entered so far
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=input" })
  input: string;

  /**
   * To filter listing on their condition. Either used or new
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=inventory_type",
  })
  inventoryType?: shared.InventoryTypeEnum;

  /**
   * To filter listings on their make
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=make" })
  make?: string;

  /**
   * To filter listings on their model
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=model" })
  model?: string;

  /**
   * Radius around the search location (Unit - Miles)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=radius",
  })
  radius?: number;

  /**
   * seller type for autocomplete
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=seller_type",
  })
  sellerType?: string;

  /**
   * Sort the response, either by index or count(default)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_by",
  })
  sortBy?: GetSearchRvAutoCompleteSortByEnum;

  /**
   * To filter listing on State in which they are listed
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=state" })
  state?: string;

  /**
   * Boolean variable to indicate wheather to include term counts as well in response
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=term_counts",
  })
  termCounts?: boolean;

  /**
   * To filter listing on their transmission
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=transmission",
  })
  transmission?: string;

  /**
   * To filter listing on their trim
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=trim" })
  trim?: string;

  /**
   * To filter listing on their vehicle type
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=vehicle_type",
  })
  vehicleType?: string;

  /**
   * To filter listing on their year
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=year" })
  year?: string;

  /**
   * To filter listing on ZIP around which they are listed
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=zip" })
  zip?: string;
}

export class GetSearchRvAutoCompleteResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Error
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  /**
   * Unique terms available in given field for auto completion
   */
  @SpeakeasyMetadata()
  searchAutoCompleteResponse?: shared.SearchAutoCompleteResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
