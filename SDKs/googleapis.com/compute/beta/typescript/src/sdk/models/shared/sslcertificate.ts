/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SslCertificateManagedSslCertificate } from "./sslcertificatemanagedsslcertificate";
import { SslCertificateSelfManagedSslCertificate } from "./sslcertificateselfmanagedsslcertificate";
import { Expose, Type } from "class-transformer";

/**
 * (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
 */
export enum SslCertificateTypeEnum {
  Managed = "MANAGED",
  SelfManaged = "SELF_MANAGED",
  TypeUnspecified = "TYPE_UNSPECIFIED",
}

/**
 * Represents an SSL Certificate resource. Google Compute Engine has two SSL Certificate resources: * [Global](/compute/docs/reference/rest/beta/sslCertificates) * [Regional](/compute/docs/reference/rest/beta/regionSslCertificates) The sslCertificates are used by: - external HTTPS load balancers - SSL proxy load balancers The regionSslCertificates are used by internal HTTPS load balancers. Optionally, certificate file contents that you upload can contain a set of up to five PEM-encoded certificates. The API call creates an object (sslCertificate) that holds this data. You can use SSL keys and certificates to secure connections to a load balancer. For more information, read Creating and using SSL certificates, SSL certificates quotas and limits, and Troubleshooting SSL certificates.
 */
export class SslCertificate extends SpeakeasyBase {
  /**
   * A value read into memory from a certificate file. The certificate file must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "certificate" })
  certificate?: string;

  /**
   * [Output Only] Creation timestamp in RFC3339 text format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creationTimestamp" })
  creationTimestamp?: string;

  /**
   * An optional description of this resource. Provide this property when you create the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * [Output Only] Expire time of the certificate. RFC3339
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expireTime" })
  expireTime?: string;

  /**
   * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * [Output Only] Type of the resource. Always compute#sslCertificate for SSL certificates.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Configuration and status of a managed SSL certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "managed" })
  @Type(() => SslCertificateManagedSslCertificate)
  managed?: SslCertificateManagedSslCertificate;

  /**
   * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * A value read into memory from a write-only private key file. The private key file must be in PEM format. For security, only insert requests include this field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privateKey" })
  privateKey?: string;

  /**
   * [Output Only] URL of the region where the regional SSL Certificate resides. This field is not applicable to global SSL Certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "region" })
  region?: string;

  /**
   * [Output only] Server-defined URL for the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfLink" })
  selfLink?: string;

  /**
   * Configuration and status of a self-managed SSL certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfManaged" })
  @Type(() => SslCertificateSelfManagedSslCertificate)
  selfManaged?: SslCertificateSelfManagedSslCertificate;

  /**
   * [Output Only] Domains associated with the certificate via Subject Alternative Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subjectAlternativeNames" })
  subjectAlternativeNames?: string[];

  /**
   * (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: SslCertificateTypeEnum;
}
