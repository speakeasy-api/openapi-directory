"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import pitpolicyrule as shared_pitpolicyrule
from ..shared import replicationconfiguration as shared_replicationconfiguration
from ..shared import replicationconfigurationreplicateddisk as shared_replicationconfigurationreplicateddisk
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateReplicationConfigurationRequestBodyDataPlaneRoutingEnum(str, Enum):
    r"""The data plane routing mechanism that will be used for replication."""
    PRIVATE_IP = 'PRIVATE_IP'
    PUBLIC_IP = 'PUBLIC_IP'

class UpdateReplicationConfigurationRequestBodyDefaultLargeStagingDiskTypeEnum(str, Enum):
    r"""The Staging Disk EBS volume type to be used during replication."""
    GP2 = 'GP2'
    GP3 = 'GP3'
    ST1 = 'ST1'
    AUTO = 'AUTO'

class UpdateReplicationConfigurationRequestBodyEbsEncryptionEnum(str, Enum):
    r"""The type of EBS encryption to be used during replication."""
    DEFAULT = 'DEFAULT'
    CUSTOM = 'CUSTOM'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateReplicationConfigurationRequestBody:
    
    source_server_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceServerID') }})
    r"""The ID of the Source Server for this Replication Configuration."""  
    associate_default_security_group: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associateDefaultSecurityGroup'), 'exclude': lambda f: f is None }})
    r"""Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration."""  
    bandwidth_throttling: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandwidthThrottling'), 'exclude': lambda f: f is None }})
    r"""Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps."""  
    create_public_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createPublicIP'), 'exclude': lambda f: f is None }})
    r"""Whether to create a Public IP for the Recovery Instance by default."""  
    data_plane_routing: Optional[UpdateReplicationConfigurationRequestBodyDataPlaneRoutingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataPlaneRouting'), 'exclude': lambda f: f is None }})
    r"""The data plane routing mechanism that will be used for replication."""  
    default_large_staging_disk_type: Optional[UpdateReplicationConfigurationRequestBodyDefaultLargeStagingDiskTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultLargeStagingDiskType'), 'exclude': lambda f: f is None }})
    r"""The Staging Disk EBS volume type to be used during replication."""  
    ebs_encryption: Optional[UpdateReplicationConfigurationRequestBodyEbsEncryptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ebsEncryption'), 'exclude': lambda f: f is None }})
    r"""The type of EBS encryption to be used during replication."""  
    ebs_encryption_key_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ebsEncryptionKeyArn'), 'exclude': lambda f: f is None }})
    r"""The ARN of the EBS encryption key to be used during replication."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the Replication Configuration."""  
    pit_policy: Optional[list[shared_pitpolicyrule.PITPolicyRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pitPolicy'), 'exclude': lambda f: f is None }})
    r"""The Point in time (PIT) policy to manage snapshots taken during replication."""  
    replicated_disks: Optional[list[shared_replicationconfigurationreplicateddisk.ReplicationConfigurationReplicatedDisk]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replicatedDisks'), 'exclude': lambda f: f is None }})
    r"""The configuration of the disks of the Source Server to be replicated."""  
    replication_server_instance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replicationServerInstanceType'), 'exclude': lambda f: f is None }})
    r"""The instance type to be used for the replication server."""  
    replication_servers_security_groups_i_ds: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replicationServersSecurityGroupsIDs'), 'exclude': lambda f: f is None }})
    r"""The security group IDs that will be used by the replication server."""  
    staging_area_subnet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stagingAreaSubnetId'), 'exclude': lambda f: f is None }})
    r"""The subnet to be used by the replication staging area."""  
    staging_area_tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stagingAreaTags'), 'exclude': lambda f: f is None }})
    r"""A set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc."""  
    use_dedicated_replication_server: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useDedicatedReplicationServer'), 'exclude': lambda f: f is None }})
    r"""Whether to use a dedicated Replication Server in the replication staging area."""  
    

@dataclasses.dataclass
class UpdateReplicationConfigurationRequest:
    
    request_body: UpdateReplicationConfigurationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateReplicationConfigurationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    replication_configuration: Optional[shared_replicationconfiguration.ReplicationConfiguration] = dataclasses.field(default=None)
    r"""Success"""  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    uninitialized_account_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UninitializedAccountException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    