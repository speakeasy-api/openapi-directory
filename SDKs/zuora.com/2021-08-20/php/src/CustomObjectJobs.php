<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CustomObjectJobs 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List all custom object bulk jobs
     * 
     * Lists all custom object bulk jobs submitted by your tenant.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAllCustomObjectBulkJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAllCustomObjectBulkJobsResponse
     */
	public function getAllCustomObjectBulkJobs(
        \OpenAPI\OpenAPI\Models\Operations\GETAllCustomObjectBulkJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAllCustomObjectBulkJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/objects/jobs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETAllCustomObjectBulkJobsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAllCustomObjectBulkJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customObjectBulkJobResponseCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomObjectBulkJobResponseCollection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a custom object bulk job
     * 
     * Retrieves the custom object bulk job details by job ID.
     * 
     * Only the users that have the "View Custom Objects" permission can retrieve custom object bulk jobs. See [Platform Permissions](https://knowledgecenter.zuora.com/Billing/Tenant_Management/A_Administrator_Settings/User_Roles/h_Platform_Roles#Platform_Permissions) for more information.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectBulkJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectBulkJobResponse
     */
	public function getCustomObjectBulkJob(
        \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectBulkJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectBulkJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/objects/jobs/{id}', \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectBulkJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectBulkJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customObjectBulkJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomObjectBulkJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all errors for a custom object bulk job
     * 
     * Lists all errors for a custom object bulk job.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectBulkJobErrorsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectBulkJobErrorsResponse
     */
	public function getCustomObjectBulkJobErrors(
        \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectBulkJobErrorsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectBulkJobErrorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/objects/jobs/{id}/errors', \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectBulkJobErrorsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETCustomObjectBulkJobErrorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customObjectBulkJobErrorResponseCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomObjectBulkJobErrorResponseCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Submit a custom object bulk job
     * 
     * Submits a bulk job request for a bulk operation on the specified custom object records. A succcessful call returns a newly created bulk job. The job ID can be used to poll the job status or upload the CSV file if it is a `create` job.
     * 
     * ## Limits
     * This custom object bulk jobs have the following limits:
     * * The concurrent bulk job limit per tenant is 5. Bulk jobs in `open`, `pending`, or `in_progress` status are counted towards the concurrent bulk job limit.
     * * The bulk job execuation order is not guaranteed, which means the bulk job that you submit ealier may be executed later.  
     * * Only the users that have the "Delete Custom Objects" permission can create a `delete` bulk job. Only the users that have the "Edit Custom Objects" permission can create a `create` bulk job. See [Platform Permissions](https://knowledgecenter.zuora.com/Billing/Tenant_Management/A_Administrator_Settings/User_Roles/h_Platform_Roles#Platform_Permissions) for more information.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectBulkJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectBulkJobResponse
     */
	public function postCustomObjectBulkJob(
        \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectBulkJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectBulkJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/objects/jobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customObjectBulkJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTCustomObjectBulkJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customObjectBulkJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomObjectBulkJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upload a file for a custom object bulk job
     * 
     * Uploads a file to a create custom object bulk job. Only one file is allowed per job. The job must be in `pending` status when you upload the file to it. The job will start creating records once the upload is finished.
     * 
     * Only the users that have the "Edit Custom Objects" permission can upload files to custom object bulk jobs. See [Platform Permissions](https://knowledgecenter.zuora.com/Billing/Tenant_Management/A_Administrator_Settings/User_Roles/h_Platform_Roles#Platform_Permissions) for more information.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTUploadFileForCustomObjectBulkJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTUploadFileForCustomObjectBulkJobResponse
     */
	public function postUploadFileForCustomObjectBulkJob(
        \OpenAPI\OpenAPI\Models\Operations\POSTUploadFileForCustomObjectBulkJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTUploadFileForCustomObjectBulkJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/objects/jobs/{id}/files', \OpenAPI\OpenAPI\Models\Operations\POSTUploadFileForCustomObjectBulkJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "string");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTUploadFileForCustomObjectBulkJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customObjectBulkJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomObjectBulkJobResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonErrorResponse', 'json');
            }
        }

        return $response;
    }
}