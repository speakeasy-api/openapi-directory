// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PutVerificationStateOnViolationRequestBodyVerificationStateEnum - The verification state of the violation.
type PutVerificationStateOnViolationRequestBodyVerificationStateEnum string

const (
	PutVerificationStateOnViolationRequestBodyVerificationStateEnumFalsePositive  PutVerificationStateOnViolationRequestBodyVerificationStateEnum = "FALSE_POSITIVE"
	PutVerificationStateOnViolationRequestBodyVerificationStateEnumBenignPositive PutVerificationStateOnViolationRequestBodyVerificationStateEnum = "BENIGN_POSITIVE"
	PutVerificationStateOnViolationRequestBodyVerificationStateEnumTruePositive   PutVerificationStateOnViolationRequestBodyVerificationStateEnum = "TRUE_POSITIVE"
	PutVerificationStateOnViolationRequestBodyVerificationStateEnumUnknown        PutVerificationStateOnViolationRequestBodyVerificationStateEnum = "UNKNOWN"
)

func (e *PutVerificationStateOnViolationRequestBodyVerificationStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FALSE_POSITIVE":
		fallthrough
	case "BENIGN_POSITIVE":
		fallthrough
	case "TRUE_POSITIVE":
		fallthrough
	case "UNKNOWN":
		*e = PutVerificationStateOnViolationRequestBodyVerificationStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutVerificationStateOnViolationRequestBodyVerificationStateEnum: %s", s)
	}
}

type PutVerificationStateOnViolationRequestBody struct {
	// The verification state of the violation.
	VerificationState PutVerificationStateOnViolationRequestBodyVerificationStateEnum `json:"verificationState"`
	// The description of the verification state of the violation (detect alarm).
	VerificationStateDescription *string `json:"verificationStateDescription,omitempty"`
}

type PutVerificationStateOnViolationRequest struct {
	RequestBody       PutVerificationStateOnViolationRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The violation ID.
	ViolationID string `pathParam:"style=simple,explode=false,name=violationId"`
}

type PutVerificationStateOnViolationResponse struct {
	ContentType string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	PutVerificationStateOnViolationResponse map[string]interface{}
	StatusCode                              int
	RawResponse                             *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
