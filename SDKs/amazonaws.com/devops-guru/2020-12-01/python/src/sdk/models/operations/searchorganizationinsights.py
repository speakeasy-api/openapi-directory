"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from ..shared import insightseverity_enum as shared_insightseverity_enum
from ..shared import insightstatus_enum as shared_insightstatus_enum
from ..shared import resourcecollection as shared_resourcecollection
from ..shared import searchorganizationinsightsresponse as shared_searchorganizationinsightsresponse
from ..shared import servicecollection as shared_servicecollection
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchOrganizationInsightsRequestBodyFilters:
    r"""Filters you can use to specify which events are returned when <code>ListEvents</code> is called."""
    
    resource_collection: Optional[shared_resourcecollection.ResourceCollection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceCollection'), 'exclude': lambda f: f is None }})
    r"""A collection of Amazon Web Services resources supported by DevOps Guru. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks."""  
    service_collection: Optional[shared_servicecollection.ServiceCollection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceCollection'), 'exclude': lambda f: f is None }})
    r"""A collection of the names of Amazon Web Services services."""  
    severities: Optional[list[shared_insightseverity_enum.InsightSeverityEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Severities'), 'exclude': lambda f: f is None }})  
    statuses: Optional[list[shared_insightstatus_enum.InsightStatusEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Statuses'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchOrganizationInsightsRequestBodyStartTimeRange:
    r"""A time range used to specify when the behavior of an insight or anomaly started."""
    
    from_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FromTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    to_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ToTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    
class SearchOrganizationInsightsRequestBodyTypeEnum(str, Enum):
    r"""The type of insights you are searching for (<code>REACTIVE</code> or <code>PROACTIVE</code>)."""
    REACTIVE = 'REACTIVE'
    PROACTIVE = 'PROACTIVE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchOrganizationInsightsRequestBody:
    
    account_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountIds') }})
    r"""The ID of the Amazon Web Services account."""  
    start_time_range: SearchOrganizationInsightsRequestBodyStartTimeRange = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartTimeRange') }})
    r"""A time range used to specify when the behavior of an insight or anomaly started."""  
    type: SearchOrganizationInsightsRequestBodyTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})
    r"""The type of insights you are searching for (<code>REACTIVE</code> or <code>PROACTIVE</code>)."""  
    filters: Optional[SearchOrganizationInsightsRequestBodyFilters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Filters'), 'exclude': lambda f: f is None }})
    r"""Filters you can use to specify which events are returned when <code>ListEvents</code> is called."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxResults'), 'exclude': lambda f: f is None }})
    r"""The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextToken'), 'exclude': lambda f: f is None }})
    r"""The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."""  
    

@dataclasses.dataclass
class SearchOrganizationInsightsRequest:
    
    request_body: SearchOrganizationInsightsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    max_results: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxResults', 'style': 'form', 'explode': True }})
    r"""Pagination limit"""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})
    r"""Pagination token"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class SearchOrganizationInsightsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    search_organization_insights_response: Optional[shared_searchorganizationinsightsresponse.SearchOrganizationInsightsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    