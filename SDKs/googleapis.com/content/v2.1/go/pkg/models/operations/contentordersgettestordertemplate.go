// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ContentOrdersGettestordertemplateSecurity struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

// ContentOrdersGettestordertemplateTemplateNameEnum - The name of the template to retrieve.
type ContentOrdersGettestordertemplateTemplateNameEnum string

const (
	ContentOrdersGettestordertemplateTemplateNameEnumTemplate1  ContentOrdersGettestordertemplateTemplateNameEnum = "TEMPLATE1"
	ContentOrdersGettestordertemplateTemplateNameEnumTemplate2  ContentOrdersGettestordertemplateTemplateNameEnum = "TEMPLATE2"
	ContentOrdersGettestordertemplateTemplateNameEnumTemplate1A ContentOrdersGettestordertemplateTemplateNameEnum = "TEMPLATE1A"
	ContentOrdersGettestordertemplateTemplateNameEnumTemplate1B ContentOrdersGettestordertemplateTemplateNameEnum = "TEMPLATE1B"
	ContentOrdersGettestordertemplateTemplateNameEnumTemplate3  ContentOrdersGettestordertemplateTemplateNameEnum = "TEMPLATE3"
	ContentOrdersGettestordertemplateTemplateNameEnumTemplate4  ContentOrdersGettestordertemplateTemplateNameEnum = "TEMPLATE4"
)

func (e *ContentOrdersGettestordertemplateTemplateNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TEMPLATE1":
		fallthrough
	case "TEMPLATE2":
		fallthrough
	case "TEMPLATE1A":
		fallthrough
	case "TEMPLATE1B":
		fallthrough
	case "TEMPLATE3":
		fallthrough
	case "TEMPLATE4":
		*e = ContentOrdersGettestordertemplateTemplateNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ContentOrdersGettestordertemplateTemplateNameEnum: %s", s)
	}
}

type ContentOrdersGettestordertemplateRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// The country of the template to retrieve. Defaults to "`US`".
	Country *string `queryParam:"style=form,explode=true,name=country"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// The ID of the account that should manage the order. This cannot be a multi-client account.
	MerchantID string `pathParam:"style=simple,explode=false,name=merchantId"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// The name of the template to retrieve.
	TemplateName ContentOrdersGettestordertemplateTemplateNameEnum `pathParam:"style=simple,explode=false,name=templateName"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type ContentOrdersGettestordertemplateResponse struct {
	ContentType string
	// Successful response
	OrdersGetTestOrderTemplateResponse *shared.OrdersGetTestOrderTemplateResponse
	StatusCode                         int
	RawResponse                        *http.Response
}
