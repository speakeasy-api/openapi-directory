"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import ambiguousroleresolutiontype_enum as shared_ambiguousroleresolutiontype_enum
from ..shared import rolemappingtype_enum as shared_rolemappingtype_enum
from ..shared import rulesconfigurationtype as shared_rulesconfigurationtype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RoleMapping:
    r"""A role mapping."""
    
    type: shared_rolemappingtype_enum.RoleMappingTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})  
    ambiguous_role_resolution: Optional[shared_ambiguousroleresolutiontype_enum.AmbiguousRoleResolutionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AmbiguousRoleResolution'), 'exclude': lambda f: f is None }})  
    rules_configuration: Optional[shared_rulesconfigurationtype.RulesConfigurationType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RulesConfiguration'), 'exclude': lambda f: f is None }})  
    