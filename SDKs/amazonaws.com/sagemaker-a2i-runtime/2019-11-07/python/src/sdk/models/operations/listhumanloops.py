"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listhumanloopsresponse as shared_listhumanloopsresponse
from datetime import datetime
from enum import Enum
from typing import Any, Optional

class ListHumanLoopsSortOrderEnum(str, Enum):
    r"""Optional. The order for displaying results. Valid values: <code>Ascending</code> and <code>Descending</code>."""
    ASCENDING = 'Ascending'
    DESCENDING = 'Descending'


@dataclasses.dataclass
class ListHumanLoopsRequest:
    
    flow_definition_arn: str = dataclasses.field(metadata={'query_param': { 'field_name': 'FlowDefinitionArn', 'style': 'form', 'explode': True }})
    r"""The Amazon Resource Name (ARN) of a flow definition."""  
    creation_time_after: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CreationTimeAfter', 'style': 'form', 'explode': True }})
    r"""(Optional) The timestamp of the date when you want the human loops to begin in ISO 8601 format. For example, <code>2020-02-24</code>."""  
    creation_time_before: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CreationTimeBefore', 'style': 'form', 'explode': True }})
    r"""(Optional) The timestamp of the date before which you want the human loops to begin in ISO 8601 format. For example, <code>2020-02-24</code>."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxResults', 'style': 'form', 'explode': True }})
    r"""The total number of items to return. If the total number of available items is more than the value specified in <code>MaxResults</code>, then a <code>NextToken</code> is returned in the output. You can use this token to display the next page of results."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})
    r"""A token to display the next page of results."""  
    sort_order: Optional[ListHumanLoopsSortOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SortOrder', 'style': 'form', 'explode': True }})
    r"""Optional. The order for displaying results. Valid values: <code>Ascending</code> and <code>Descending</code>."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListHumanLoopsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    list_human_loops_response: Optional[shared_listhumanloopsresponse.ListHumanLoopsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    