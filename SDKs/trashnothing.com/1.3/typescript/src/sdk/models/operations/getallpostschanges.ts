/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class GetAllPostsChangesSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=query;name=api_key",
  })
  apiKey?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2Code?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2Implicit?: string;
}

export class GetAllPostsChangesRequest extends SpeakeasyBase {
  /**
   * Only changes older than this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_min. And the date and time must be rounded to the nearest second.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=date_max;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  dateMax: Date;

  /**
   * Only changes newer than or equal to this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_max. And the date and time must be within the last 30 days. And the date and time must be rounded to the nearest second.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=date_min;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  dateMin: Date;

  /**
   * The page of changes to return.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of changes to return per page (must be >= 1 and <= 50).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;
}

export class GetAllPostsChanges200ApplicationJSONChanges extends SpeakeasyBase {
  /**
   * The UTC date and time when the post was changed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  date?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "post_id" })
  postId?: string;

  /**
   * The type of change.  One of: deleted, undeleted, satisfied, promised, unpromised, withdrawn, edited, expired
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

/**
 * The changes.
 */
export class GetAllPostsChanges200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: GetAllPostsChanges200ApplicationJSONChanges })
  @Expose({ name: "changes" })
  @Type(() => GetAllPostsChanges200ApplicationJSONChanges)
  changes?: GetAllPostsChanges200ApplicationJSONChanges[];
}

export class GetAllPostsChangesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The changes.
   */
  @SpeakeasyMetadata()
  getAllPostsChanges200ApplicationJSONObject?: GetAllPostsChanges200ApplicationJSON;
}
