/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * PostNonRefRefundType - Container for custom fields of a Refund object.
 * 
 */
public class PostNonRefRefundType {
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationId__NS")
    public String integrationIdNS;
    public PostNonRefRefundType withIntegrationIdNS(String integrationIdNS) {
        this.integrationIdNS = integrationIdNS;
        return this;
    }
    
    /**
     * Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationStatus__NS")
    public String integrationStatusNS;
    public PostNonRefRefundType withIntegrationStatusNS(String integrationStatusNS) {
        this.integrationStatusNS = integrationStatusNS;
        return this;
    }
    
    /**
     * Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Origin__NS")
    public String originNS;
    public PostNonRefRefundType withOriginNS(String originNS) {
        this.originNS = originNS;
        return this;
    }
    
    /**
     * Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncDate__NS")
    public String syncDateNS;
    public PostNonRefRefundType withSyncDateNS(String syncDateNS) {
        this.syncDateNS = syncDateNS;
        return this;
    }
    
    /**
     * Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SynctoNetSuite__NS")
    public String synctoNetSuiteNS;
    public PostNonRefRefundType withSynctoNetSuiteNS(String synctoNetSuiteNS) {
        this.synctoNetSuiteNS = synctoNetSuiteNS;
        return this;
    }
    
    /**
     * Comments about the refund.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comment")
    public String comment;
    public PostNonRefRefundType withComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    /**
     * Container for the finance information related to the refund.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("financeInformation")
    public PostNonRefRefundTypeFinanceInformation financeInformation;
    public PostNonRefRefundType withFinanceInformation(PostNonRefRefundTypeFinanceInformation financeInformation) {
        this.financeInformation = financeInformation;
        return this;
    }
    
    /**
     * The ID of the gateway instance that processes the refund. This field can be specified only for electronic refunds. The ID must be a valid gateway instance ID, and this gateway must support the specific payment method. 
     * 
     * If no gateway ID is specified, the default gateway in the billing account configuration will be used. If no gateway is specified in the billing account, the default gateway of the corresponding tenant will be used.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayId")
    public String gatewayId;
    public PostNonRefRefundType withGatewayId(String gatewayId) {
        this.gatewayId = gatewayId;
        return this;
    }
    
    /**
     * The field used to pass gateway-specific parameters and parameter values.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayOptions")
    public PostNonRefRefundTypeGatewayOptions gatewayOptions;
    public PostNonRefRefundType withGatewayOptions(PostNonRefRefundTypeGatewayOptions gatewayOptions) {
        this.gatewayOptions = gatewayOptions;
        return this;
    }
    
    /**
     * Container for credit memo items. The maximum number of items is 1,000.
     * 
     * **Note:** This field is only available if you have the [Invoice Item Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/C_Invoice_Item_Settlement) feature enabled. Invoice Item Settlement must be used together with other Invoice Settlement features (Unapplied Payments, and Credit and Debit memos).  If you wish to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items")
    public RefundCreditMemoItemType[] items;
    public PostNonRefRefundType withItems(RefundCreditMemoItemType[] items) {
        this.items = items;
        return this;
    }
    
    /**
     * How an external refund was issued to a customer. This field is required for an external refund and must be left empty for an electronic refund. You can issue an external refund on a credit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("methodType")
    public PostNonRefRefundTypeMethodTypeEnum methodType;
    public PostNonRefRefundType withMethodType(PostNonRefRefundTypeMethodTypeEnum methodType) {
        this.methodType = methodType;
        return this;
    }
    
    /**
     * The ID of the payment method used for the refund. This field is required for an electronic refund, and the value must be an electronic payment method ID. This field must be left empty for an external refund. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMethodId")
    public String paymentMethodId;
    public PostNonRefRefundType withPaymentMethodId(String paymentMethodId) {
        this.paymentMethodId = paymentMethodId;
        return this;
    }
    
    /**
     * A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reasonCode")
    public String reasonCode;
    public PostNonRefRefundType withReasonCode(String reasonCode) {
        this.reasonCode = reasonCode;
        return this;
    }
    
    /**
     * The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referenceId")
    public String referenceId;
    public PostNonRefRefundType withReferenceId(String referenceId) {
        this.referenceId = referenceId;
        return this;
    }
    
    /**
     * The date when the refund takes effect, in `yyyy-mm-dd` format. The date of the refund cannot be before the credit memo date. Specify this field only for external refunds. Zuora automatically generates this field for electronic refunds.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("refundDate")
    public LocalDate refundDate;
    public PostNonRefRefundType withRefundDate(LocalDate refundDate) {
        this.refundDate = refundDate;
        return this;
    }
    
    /**
     * The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondRefundReferenceId")
    public String secondRefundReferenceId;
    public PostNonRefRefundType withSecondRefundReferenceId(String secondRefundReferenceId) {
        this.secondRefundReferenceId = secondRefundReferenceId;
        return this;
    }
    
    /**
     * A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softDescriptor")
    public String softDescriptor;
    public PostNonRefRefundType withSoftDescriptor(String softDescriptor) {
        this.softDescriptor = softDescriptor;
        return this;
    }
    
    /**
     * A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softDescriptorPhone")
    public String softDescriptorPhone;
    public PostNonRefRefundType withSoftDescriptorPhone(String softDescriptorPhone) {
        this.softDescriptorPhone = softDescriptorPhone;
        return this;
    }
    
    /**
     * The total amount of the refund. The amount cannot exceed the unapplied amount of the associated credit memo. If the original credit memo was applied to one or more invoices or debit memos, you have to unapply a full or partial credit memo from the invoices or debit memos, and then refund the full or partial unapplied credit memo to your customers.
     * 
     */
    @JsonProperty("totalAmount")
    public Double totalAmount;
    public PostNonRefRefundType withTotalAmount(Double totalAmount) {
        this.totalAmount = totalAmount;
        return this;
    }
    
    /**
     * The type of the refund.
     * 
     */
    @JsonProperty("type")
    public PostNonRefRefundTypeTypeEnum type;
    public PostNonRefRefundType withType(PostNonRefRefundTypeTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
