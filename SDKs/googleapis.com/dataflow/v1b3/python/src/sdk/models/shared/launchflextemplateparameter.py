"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import containerspec as shared_containerspec
from ..shared import flextemplateruntimeenvironment as shared_flextemplateruntimeenvironment
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LaunchFlexTemplateParameter:
    r"""Launch FlexTemplate Parameter."""
    
    container_spec: Optional[shared_containerspec.ContainerSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containerSpec'), 'exclude': lambda f: f is None }})
    r"""Container Spec."""  
    container_spec_gcs_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containerSpecGcsPath'), 'exclude': lambda f: f is None }})
    r"""Cloud Storage path to a file with json serialized ContainerSpec as content."""  
    environment: Optional[shared_flextemplateruntimeenvironment.FlexTemplateRuntimeEnvironment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environment'), 'exclude': lambda f: f is None }})
    r"""The environment values to be set at runtime for flex template."""  
    job_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobName'), 'exclude': lambda f: f is None }})
    r"""Required. The job name to use for the created job. For update job request, job name should be same as the existing running job."""  
    launch_options: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('launchOptions'), 'exclude': lambda f: f is None }})
    r"""Launch options for this flex template job. This is a common set of options across languages and templates. This should not be used to pass job parameters."""  
    parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})
    r"""The parameters for FlexTemplate. Ex. {\\"num_workers\\":\\"5\\"}"""  
    transform_name_mappings: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transformNameMappings'), 'exclude': lambda f: f is None }})
    r"""Use this to pass transform_name_mappings for streaming update jobs. Ex:{\\"oldTransformName\\":\\"newTransformName\\",...}'"""  
    update: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('update'), 'exclude': lambda f: f is None }})
    r"""Set this to true if you are sending a request to update a running streaming job. When set, the job name should be the same as the running job."""  
    