"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetUsersUserMobileApplicationOSEnum(str, Enum):
    r"""Operating system of device."""
    ANDROID = 'Android'
    IOS = 'IOS'
    OTHER = 'OTHER'

class GetUsersUserMobileApplicationDeviceNameEnum(str, Enum):
    r"""type of device."""
    I_PHONE = 'iPhone'
    ANDROID = 'Android'
    OTHER = 'Other'

class GetUsersUserMobileApplicationStatusEnum(str, Enum):
    r"""Status of user"""
    LIVE = 'LIVE'
    CLOSED = 'CLOSED'
    LOCKED = 'LOCKED'
    SMS_SENT = 'SMS_SENT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUsersUserMobileApplication:
    
    business_user_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessUserId'), 'exclude': lambda f: f is None }})
    r"""Business user ID"""  
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientID'), 'exclude': lambda f: f is None }})
    r"""Client ID of user."""  
    device_name: Optional[GetUsersUserMobileApplicationDeviceNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceName'), 'exclude': lambda f: f is None }})
    r"""type of device."""  
    device_os_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceOSVersion'), 'exclude': lambda f: f is None }})
    r"""OS version for device."""  
    mobile_application_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobileApplicationId'), 'exclude': lambda f: f is None }})
    r"""Mobile application id for user."""  
    os: Optional[GetUsersUserMobileApplicationOSEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OS'), 'exclude': lambda f: f is None }})
    r"""Operating system of device."""  
    status: Optional[GetUsersUserMobileApplicationStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of user"""  
    
class GetUsersUserRoleEnum(str, Enum):
    r"""User role"""
    ADMIN = 'ADMIN'
    FULL_USER = 'FULL_USER'
    READ_ONLY = 'READ_ONLY'
    CARD_ONLY = 'CARD_ONLY'

class GetUsersUserStatusEnum(str, Enum):
    r"""Status of user"""
    LIVE = 'LIVE'
    CLOSED = 'CLOSED'
    FROZEN = 'FROZEN'
    INVITE_SENT = 'INVITE_SENT'
    SMS_CODE_SENT = 'SMS_CODE_SENT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUsersUser:
    
    email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailAddress'), 'exclude': lambda f: f is None }})
    r"""email address for user"""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName'), 'exclude': lambda f: f is None }})
    r"""User first name"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The User ID for this User"""  
    lastlogin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastlogin'), 'exclude': lambda f: f is None }})
    r"""Timestamp on when user last logged in."""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName'), 'exclude': lambda f: f is None }})
    r"""User second name"""  
    mobile_application_details: Optional[GetUsersUserMobileApplication] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobileApplicationDetails'), 'exclude': lambda f: f is None }})  
    mobile_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobileNumber'), 'exclude': lambda f: f is None }})
    r"""User mobile number"""  
    role: Optional[GetUsersUserRoleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""User role"""  
    status: Optional[GetUsersUserStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of user"""  
    user_cvl: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userCvl'), 'exclude': lambda f: f is None }})
    r"""Users Cvl type ID (shows up when status is LIVE)"""  
    

@dataclasses.dataclass
class GetUsersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    users: Optional[list[GetUsersUser]] = dataclasses.field(default=None)
    r"""List of all Users."""  
    