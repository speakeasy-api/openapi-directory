// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DevicesRegisterUserForDeviceSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type DevicesRegisterUserForDevicePathParams struct {
	// The ID of the user
	UserID string `pathParam:"style=simple,explode=false,name=user_id"`
}

// DevicesRegisterUserForDeviceRequestBody - The information for a single iOS device
type DevicesRegisterUserForDeviceRequestBody struct {
	// The device's International Mobile Equipment Identity number. Always empty or undefined at present.
	Imei *string `json:"imei,omitempty"`
	// The model identifier of the device, in the format iDeviceM,N
	Model string `json:"model"`
	// The build number of the last known OS version running on the device
	OsBuild *string `json:"os_build,omitempty"`
	// The last known OS version running on the device
	OsVersion *string `json:"os_version,omitempty"`
	// The user ID of the device owner.
	OwnerID *string `json:"owner_id,omitempty"`
	// The device's serial number. Always empty or undefined at present.
	Serial *string `json:"serial,omitempty"`
	// The Unique Device IDentifier of the device
	Udid string `json:"udid"`
}

type DevicesRegisterUserForDeviceRequest struct {
	PathParams DevicesRegisterUserForDevicePathParams
	// The device info.
	Request  DevicesRegisterUserForDeviceRequestBody `request:"mediaType=application/json"`
	Security DevicesRegisterUserForDeviceSecurity
}

type DevicesRegisterUserForDevice404ApplicationJSONCodeEnum string

const (
	DevicesRegisterUserForDevice404ApplicationJSONCodeEnumBadRequest          DevicesRegisterUserForDevice404ApplicationJSONCodeEnum = "BadRequest"
	DevicesRegisterUserForDevice404ApplicationJSONCodeEnumConflict            DevicesRegisterUserForDevice404ApplicationJSONCodeEnum = "Conflict"
	DevicesRegisterUserForDevice404ApplicationJSONCodeEnumNotAcceptable       DevicesRegisterUserForDevice404ApplicationJSONCodeEnum = "NotAcceptable"
	DevicesRegisterUserForDevice404ApplicationJSONCodeEnumNotFound            DevicesRegisterUserForDevice404ApplicationJSONCodeEnum = "NotFound"
	DevicesRegisterUserForDevice404ApplicationJSONCodeEnumInternalServerError DevicesRegisterUserForDevice404ApplicationJSONCodeEnum = "InternalServerError"
	DevicesRegisterUserForDevice404ApplicationJSONCodeEnumUnauthorized        DevicesRegisterUserForDevice404ApplicationJSONCodeEnum = "Unauthorized"
	DevicesRegisterUserForDevice404ApplicationJSONCodeEnumTooManyRequests     DevicesRegisterUserForDevice404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *DevicesRegisterUserForDevice404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DevicesRegisterUserForDevice404ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DevicesRegisterUserForDevice404ApplicationJSONCodeEnum: %s", s)
	}
}

// DevicesRegisterUserForDevice404ApplicationJSON - <b>not_found</b>: The user or the device can't be found.
type DevicesRegisterUserForDevice404ApplicationJSON struct {
	Code    DevicesRegisterUserForDevice404ApplicationJSONCodeEnum `json:"code"`
	Message string                                                 `json:"message"`
}

// DevicesRegisterUserForDevice200ApplicationJSON - The information for a single iOS device
type DevicesRegisterUserForDevice200ApplicationJSON struct {
	// The device description, in the format "iPhone 7 Plus (A1784)"
	DeviceName string `json:"device_name"`
	// A combination of the device model name and the owner name.
	FullDeviceName *string `json:"full_device_name,omitempty"`
	// The device's International Mobile Equipment Identity number. Always empty or undefined at present.
	Imei *string `json:"imei,omitempty"`
	// The model identifier of the device, in the format iDeviceM,N
	Model string `json:"model"`
	// The last known OS version running on the device
	OsBuild string `json:"os_build"`
	// The last known OS version running on the device
	OsVersion string `json:"os_version"`
	// The user ID of the device owner.
	OwnerID *string `json:"owner_id,omitempty"`
	// Timestamp of when the device was registered in ISO format.
	RegisteredAt *string `json:"registered_at,omitempty"`
	// The device's serial number. Always empty or undefined at present.
	Serial *string `json:"serial,omitempty"`
	// The provisioning status of the device.
	Status string `json:"status"`
	// The Unique Device IDentifier of the device
	Udid string `json:"udid"`
}

type DevicesRegisterUserForDeviceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	DevicesRegisterUserForDevice200ApplicationJSONObject *DevicesRegisterUserForDevice200ApplicationJSON
	// <b>not_found</b>: The user or the device can't be found.
	//
	DevicesRegisterUserForDevice404ApplicationJSONObject *DevicesRegisterUserForDevice404ApplicationJSON
}
