"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class SwitchSettings:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_network_switch_settings_qos_rule(self, request: operations.CreateNetworkSwitchSettingsQosRuleRequest) -> operations.CreateNetworkSwitchSettingsQosRuleResponse:
        r"""Add a quality of service rule
        Add a quality of service rule
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateNetworkSwitchSettingsQosRuleRequest, base_url, '/networks/{networkId}/switch/settings/qosRules', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateNetworkSwitchSettingsQosRuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_network_switch_settings_qos_rule_201_application_json_object = out

        return res

    def delete_network_switch_settings_qos_rule(self, request: operations.DeleteNetworkSwitchSettingsQosRuleRequest) -> operations.DeleteNetworkSwitchSettingsQosRuleResponse:
        r"""Delete a quality of service rule
        Delete a quality of service rule
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteNetworkSwitchSettingsQosRuleRequest, base_url, '/networks/{networkId}/switch/settings/qosRules/{qosRuleId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteNetworkSwitchSettingsQosRuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_network_switch_settings(self, request: operations.GetNetworkSwitchSettingsRequest) -> operations.GetNetworkSwitchSettingsResponse:
        r"""Returns the switch network settings
        Returns the switch network settings
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSwitchSettingsRequest, base_url, '/networks/{networkId}/switch/settings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSwitchSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_switch_settings_200_application_json_object = out

        return res

    def get_network_switch_settings_mtu(self, request: operations.GetNetworkSwitchSettingsMtuRequest) -> operations.GetNetworkSwitchSettingsMtuResponse:
        r"""Return the MTU configuration
        Return the MTU configuration
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSwitchSettingsMtuRequest, base_url, '/networks/{networkId}/switch/settings/mtu', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSwitchSettingsMtuResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_switch_settings_mtu_200_application_json_object = out

        return res

    def get_network_switch_settings_multicast(self, request: operations.GetNetworkSwitchSettingsMulticastRequest) -> operations.GetNetworkSwitchSettingsMulticastResponse:
        r"""Return multicast settings for a network
        Return multicast settings for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSwitchSettingsMulticastRequest, base_url, '/networks/{networkId}/switch/settings/multicast', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSwitchSettingsMulticastResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_switch_settings_multicast_200_application_json_object = out

        return res

    def get_network_switch_settings_qos_rule(self, request: operations.GetNetworkSwitchSettingsQosRuleRequest) -> operations.GetNetworkSwitchSettingsQosRuleResponse:
        r"""Return a quality of service rule
        Return a quality of service rule
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSwitchSettingsQosRuleRequest, base_url, '/networks/{networkId}/switch/settings/qosRules/{qosRuleId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSwitchSettingsQosRuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_switch_settings_qos_rule_200_application_json_object = out

        return res

    def get_network_switch_settings_qos_rules(self, request: operations.GetNetworkSwitchSettingsQosRulesRequest) -> operations.GetNetworkSwitchSettingsQosRulesResponse:
        r"""List quality of service rules
        List quality of service rules
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSwitchSettingsQosRulesRequest, base_url, '/networks/{networkId}/switch/settings/qosRules', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSwitchSettingsQosRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_switch_settings_qos_rules_200_application_json_objects = out

        return res

    def get_network_switch_settings_qos_rules_order(self, request: operations.GetNetworkSwitchSettingsQosRulesOrderRequest) -> operations.GetNetworkSwitchSettingsQosRulesOrderResponse:
        r"""Return the quality of service rule IDs by order in which they will be processed by the switch
        Return the quality of service rule IDs by order in which they will be processed by the switch
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSwitchSettingsQosRulesOrderRequest, base_url, '/networks/{networkId}/switch/settings/qosRules/order', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSwitchSettingsQosRulesOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_switch_settings_qos_rules_order_200_application_json_object = out

        return res

    def get_network_switch_settings_storm_control(self, request: operations.GetNetworkSwitchSettingsStormControlRequest) -> operations.GetNetworkSwitchSettingsStormControlResponse:
        r"""Return the storm control configuration for a switch network
        Return the storm control configuration for a switch network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSwitchSettingsStormControlRequest, base_url, '/networks/{networkId}/switch/settings/stormControl', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSwitchSettingsStormControlResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_switch_settings_storm_control_200_application_json_object = out

        return res

    def update_network_switch_settings(self, request: operations.UpdateNetworkSwitchSettingsRequest) -> operations.UpdateNetworkSwitchSettingsResponse:
        r"""Update switch network settings
        Update switch network settings
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkSwitchSettingsRequest, base_url, '/networks/{networkId}/switch/settings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkSwitchSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_switch_settings_200_application_json_object = out

        return res

    def update_network_switch_settings_mtu(self, request: operations.UpdateNetworkSwitchSettingsMtuRequest) -> operations.UpdateNetworkSwitchSettingsMtuResponse:
        r"""Update the MTU configuration
        Update the MTU configuration
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkSwitchSettingsMtuRequest, base_url, '/networks/{networkId}/switch/settings/mtu', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkSwitchSettingsMtuResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_switch_settings_mtu_200_application_json_object = out

        return res

    def update_network_switch_settings_multicast(self, request: operations.UpdateNetworkSwitchSettingsMulticastRequest) -> operations.UpdateNetworkSwitchSettingsMulticastResponse:
        r"""Update multicast settings for a network
        Update multicast settings for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkSwitchSettingsMulticastRequest, base_url, '/networks/{networkId}/switch/settings/multicast', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkSwitchSettingsMulticastResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_switch_settings_multicast_200_application_json_object = out

        return res

    def update_network_switch_settings_qos_rule(self, request: operations.UpdateNetworkSwitchSettingsQosRuleRequest) -> operations.UpdateNetworkSwitchSettingsQosRuleResponse:
        r"""Update a quality of service rule
        Update a quality of service rule
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkSwitchSettingsQosRuleRequest, base_url, '/networks/{networkId}/switch/settings/qosRules/{qosRuleId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkSwitchSettingsQosRuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_switch_settings_qos_rule_200_application_json_object = out

        return res

    def update_network_switch_settings_qos_rules_order(self, request: operations.UpdateNetworkSwitchSettingsQosRulesOrderRequest) -> operations.UpdateNetworkSwitchSettingsQosRulesOrderResponse:
        r"""Update the order in which the rules should be processed by the switch
        Update the order in which the rules should be processed by the switch
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkSwitchSettingsQosRulesOrderRequest, base_url, '/networks/{networkId}/switch/settings/qosRules/order', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkSwitchSettingsQosRulesOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_switch_settings_qos_rules_order_200_application_json_object = out

        return res

    def update_network_switch_settings_storm_control(self, request: operations.UpdateNetworkSwitchSettingsStormControlRequest) -> operations.UpdateNetworkSwitchSettingsStormControlResponse:
        r"""Update the storm control configuration for a switch network
        Update the storm control configuration for a switch network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkSwitchSettingsStormControlRequest, base_url, '/networks/{networkId}/switch/settings/stormControl', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkSwitchSettingsStormControlResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_switch_settings_storm_control_200_application_json_object = out

        return res

    