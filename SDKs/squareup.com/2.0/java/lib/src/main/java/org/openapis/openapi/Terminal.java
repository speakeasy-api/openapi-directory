/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Terminal {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Terminal(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * CancelTerminalCheckout
     * Cancels a Terminal checkout request if the status of the request permits it.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CancelTerminalCheckoutResponse cancelTerminalCheckout(org.openapis.openapi.models.operations.CancelTerminalCheckoutRequest request, org.openapis.openapi.models.operations.CancelTerminalCheckoutSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CancelTerminalCheckoutRequest.class, baseUrl, "/v2/terminals/checkouts/{checkout_id}/cancel", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CancelTerminalCheckoutResponse res = new org.openapis.openapi.models.operations.CancelTerminalCheckoutResponse(contentType, httpRes.statusCode()) {{
            cancelTerminalCheckoutResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CancelTerminalCheckoutResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CancelTerminalCheckoutResponse.class);
                res.cancelTerminalCheckoutResponse = out;
            }
        }

        return res;
    }

    /**
     * CancelTerminalRefund
     * Cancels an Interac Terminal refund request by refund request ID if the status of the request permits it.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CancelTerminalRefundResponse cancelTerminalRefund(org.openapis.openapi.models.operations.CancelTerminalRefundRequest request, org.openapis.openapi.models.operations.CancelTerminalRefundSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CancelTerminalRefundRequest.class, baseUrl, "/v2/terminals/refunds/{terminal_refund_id}/cancel", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CancelTerminalRefundResponse res = new org.openapis.openapi.models.operations.CancelTerminalRefundResponse(contentType, httpRes.statusCode()) {{
            cancelTerminalRefundResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CancelTerminalRefundResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CancelTerminalRefundResponse.class);
                res.cancelTerminalRefundResponse = out;
            }
        }

        return res;
    }

    /**
     * CreateTerminalCheckout
     * Creates a Terminal checkout request and sends it to the specified device to take a payment
     * for the requested amount.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateTerminalCheckoutResponse createTerminalCheckout(org.openapis.openapi.models.shared.CreateTerminalCheckoutRequest request, org.openapis.openapi.models.operations.CreateTerminalCheckoutSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/terminals/checkouts");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateTerminalCheckoutResponse res = new org.openapis.openapi.models.operations.CreateTerminalCheckoutResponse(contentType, httpRes.statusCode()) {{
            createTerminalCheckoutResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CreateTerminalCheckoutResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CreateTerminalCheckoutResponse.class);
                res.createTerminalCheckoutResponse = out;
            }
        }

        return res;
    }

    /**
     * CreateTerminalRefund
     * Creates a request to refund an Interac payment completed on a Square Terminal.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateTerminalRefundResponse createTerminalRefund(org.openapis.openapi.models.shared.CreateTerminalRefundRequest request, org.openapis.openapi.models.operations.CreateTerminalRefundSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/terminals/refunds");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateTerminalRefundResponse res = new org.openapis.openapi.models.operations.CreateTerminalRefundResponse(contentType, httpRes.statusCode()) {{
            createTerminalRefundResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CreateTerminalRefundResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CreateTerminalRefundResponse.class);
                res.createTerminalRefundResponse = out;
            }
        }

        return res;
    }

    /**
     * GetTerminalCheckout
     * Retrieves a Terminal checkout request by `checkout_id`.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetTerminalCheckoutResponse getTerminalCheckout(org.openapis.openapi.models.operations.GetTerminalCheckoutRequest request, org.openapis.openapi.models.operations.GetTerminalCheckoutSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetTerminalCheckoutRequest.class, baseUrl, "/v2/terminals/checkouts/{checkout_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTerminalCheckoutResponse res = new org.openapis.openapi.models.operations.GetTerminalCheckoutResponse(contentType, httpRes.statusCode()) {{
            getTerminalCheckoutResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GetTerminalCheckoutResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GetTerminalCheckoutResponse.class);
                res.getTerminalCheckoutResponse = out;
            }
        }

        return res;
    }

    /**
     * GetTerminalRefund
     * Retrieves an Interac Terminal refund object by ID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetTerminalRefundResponse getTerminalRefund(org.openapis.openapi.models.operations.GetTerminalRefundRequest request, org.openapis.openapi.models.operations.GetTerminalRefundSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetTerminalRefundRequest.class, baseUrl, "/v2/terminals/refunds/{terminal_refund_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTerminalRefundResponse res = new org.openapis.openapi.models.operations.GetTerminalRefundResponse(contentType, httpRes.statusCode()) {{
            getTerminalRefundResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GetTerminalRefundResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GetTerminalRefundResponse.class);
                res.getTerminalRefundResponse = out;
            }
        }

        return res;
    }

    /**
     * SearchTerminalCheckouts
     * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SearchTerminalCheckoutsResponse searchTerminalCheckouts(org.openapis.openapi.models.shared.SearchTerminalCheckoutsRequest request, org.openapis.openapi.models.operations.SearchTerminalCheckoutsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/terminals/checkouts/search");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SearchTerminalCheckoutsResponse res = new org.openapis.openapi.models.operations.SearchTerminalCheckoutsResponse(contentType, httpRes.statusCode()) {{
            searchTerminalCheckoutsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SearchTerminalCheckoutsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SearchTerminalCheckoutsResponse.class);
                res.searchTerminalCheckoutsResponse = out;
            }
        }

        return res;
    }

    /**
     * SearchTerminalRefunds
     * Retrieves a filtered list of Interac Terminal refund requests created by the seller making the request.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SearchTerminalRefundsResponse searchTerminalRefunds(org.openapis.openapi.models.shared.SearchTerminalRefundsRequest request, org.openapis.openapi.models.operations.SearchTerminalRefundsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/terminals/refunds/search");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SearchTerminalRefundsResponse res = new org.openapis.openapi.models.operations.SearchTerminalRefundsResponse(contentType, httpRes.statusCode()) {{
            searchTerminalRefundsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SearchTerminalRefundsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SearchTerminalRefundsResponse.class);
                res.searchTerminalRefundsResponse = out;
            }
        }

        return res;
    }
}