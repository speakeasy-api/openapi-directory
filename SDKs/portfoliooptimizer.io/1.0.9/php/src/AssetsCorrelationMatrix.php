<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AssetsCorrelationMatrix 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Correlation Matrix
     * 
     * Compute the Pearson asset correlation matrix from either:  
     * * The asset returns
     * * The asset covariance matrix
     * 
     * References
     * * [Wikipedia, Correlation and Dependence](https://en.wikipedia.org/wiki/Correlation_and_dependence#Correlation_matrices)
     * 
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixResponse
     */
	public function postAssetsCorrelationMatrix(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/correlation/matrix');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsCorrelationMatrix200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrix200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Correlation Matrix Bounds
     * 
     * Compute the lower bounds and the upper bounds of an asset correlation matrix associated to a given group of assets.
     *  
     *  References
     *  * [Kawee Numpacharoen & Kornkanok Bunwong (2013) Boundaries of Correlation Adjustment with Applications to Financial Risk Management, Applied Mathematical Finance, 20:4, 403-414](http://dx.doi.org/10.1080/1350486X.2012.723517).
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixBoundsRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixBoundsResponse
     */
	public function postAssetsCorrelationMatrixBounds(
        \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixBoundsRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixBoundsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/correlation/matrix/bounds');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixBoundsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsCorrelationMatrixBounds200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixBounds200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Denoised Correlation Matrix
     * 
     * Compute a denoised asset correlation matrix, using one of the following methods:
     *  * The eigenvalues clipping method, described in the first reference, which is based on random matrix theory
     *  
     *  References
     *  * [Laurent Laloux, Pierre Cizeau, Jean-Philippe Bouchaud, and Marc Potters, Noise Dressing of Financial Correlation Matrices, Phys. Rev. Lett. 83, 1467](https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.83.1467)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixDenoisedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixDenoisedResponse
     */
	public function postAssetsCorrelationMatrixDenoised(
        \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixDenoisedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixDenoisedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/correlation/matrix/denoised');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixDenoisedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsCorrelationMatrixDenoised200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixDenoised200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Correlation Matrix Distance
     * 
     * Compute the distance between an asset correlation matrix and a reference correlation matrix, using one of the following distance metrics:
     * * Euclidean distance (default), which is the distance induced by [the Frobenius norm](https://en.wikipedia.org/wiki/Matrix_norm#Frobenius_norm)
     * * Correlation matrix distance, defined in the first reference, which corresponds to [the cosine distance](https://en.wikipedia.org/wiki/Cosine_similarity) between the two vectorized asset correlation matrices
     * * Bures distance, defined in the second reference
     * 
     *  References
     *  * [M. Herdin, N. Czink, H. Ozcelik and E. Bonek, Correlation matrix distance, a meaningful measure for evaluation of non-stationary MIMO channels, 2005 IEEE 61st Vehicular Technology Conference, 2005, pp. 136-140 Vol. 1](https://ieeexplore.ieee.org/document/1543265)
     *  * [Rajendra Bhatia, Tanvi Jain, Yongdo Lim, On the Buresâ€“Wasserstein distance between positive definite matrices, Expositiones Mathematicae, Volume 37, Issue 2, 2019](https://www.sciencedirect.com/science/article/pii/S0723086918300021)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixDistanceRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixDistanceResponse
     */
	public function postAssetsCorrelationMatrixDistance(
        \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixDistanceRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixDistanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/correlation/matrix/distance');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixDistanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsCorrelationMatrixDistance200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixDistance200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Correlation Matrix Effective Rank
     * 
     * Compute the effective rank of an asset correlation matrix.
     * 
     * References
     * * [Olivier Roy and Martin Vetterli, The effective rank: A measure of effective dimensionality, 15th European Signal Processing Conference, 2007](https://ieeexplore.ieee.org/document/7098875)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixEffectiveRankRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixEffectiveRankResponse
     */
	public function postAssetsCorrelationMatrixEffectiveRank(
        \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixEffectiveRankRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixEffectiveRankResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/correlation/matrix/effective-rank');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixEffectiveRankResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsCorrelationMatrixEffectiveRank200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixEffectiveRank200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Correlation Matrix Informativeness
     * 
     * Compute the informativeness of an asset correlation matrix, using one of the following distance metrics:
     * * Euclidean distance (default), which is the distance induced by [the Frobenius norm](https://en.wikipedia.org/wiki/Matrix_norm#Frobenius_norm)
     * * Correlation matrix distance, defined in the second reference, which corresponds to [the cosine distance](https://en.wikipedia.org/wiki/Cosine_similarity) between the two vectorized asset correlation matrices
     * * Bures distance, defined in the third reference
     * 
     *  References
     *  * [Austin J. Brockmeier and Tingting Mu and Sophia Ananiadou and John Y. Goulermas, Quantifying the Informativeness of Similarity Measurements, Journal of Machine Learning Research, 2017](http://jmlr.org/papers/v18/16-296.html)
     *  * [M. Herdin, N. Czink, H. Ozcelik and E. Bonek, Correlation matrix distance, a meaningful measure for evaluation of non-stationary MIMO channels, 2005 IEEE 61st Vehicular Technology Conference, 2005, pp. 136-140 Vol. 1](https://ieeexplore.ieee.org/document/1543265)
     *  * [Rajendra Bhatia, Tanvi Jain, Yongdo Lim, On the Buresâ€“Wasserstein distance between positive definite matrices, Expositiones Mathematicae, Volume 37, Issue 2, 2019](https://www.sciencedirect.com/science/article/pii/S0723086918300021)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixInformativenessRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixInformativenessResponse
     */
	public function postAssetsCorrelationMatrixInformativeness(
        \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixInformativenessRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixInformativenessResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/correlation/matrix/informativeness');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixInformativenessResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsCorrelationMatrixInformativeness200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixInformativeness200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Nearest Correlation Matrix
     * 
     * Compute the _closest_ - in terms of [the Frobenius norm](https://en.wikipedia.org/wiki/Matrix_norm#Frobenius_norm) - asset correlation matrix to an approximate asset correlation matrix, optionally keeping a selected number of correlations fixed.
     * 
     * References
     * * [Nicholas J. Higham, Computing the Nearest Correlation Matrixâ€”A Problem from Finance, IMA J. Numer. Anal. 22, 329â€“343, 2002.](http://www.maths.manchester.ac.uk/~higham/narep/narep369.pdf)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixNearestRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixNearestResponse
     */
	public function postAssetsCorrelationMatrixNearest(
        \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixNearestRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixNearestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/correlation/matrix/nearest');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixNearestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsCorrelationMatrixNearest200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixNearest200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Random Correlation Matrix
     * 
     * Generate an asset correlation matrix uniformly at random over the space of positive definite correlation matrices.
     * 
     * References
     * * [Joe, H., Generating random correlation matrices based on partial correlations. Journal of Multivariate Analysis, 2006, 97, 2177-2189](https://www.sciencedirect.com/science/article/pii/S0047259X05000886)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixRandomRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixRandomResponse
     */
	public function postAssetsCorrelationMatrixRandom(
        \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixRandomRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixRandomResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/correlation/matrix/random');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixRandomResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsCorrelationMatrixRandom200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixRandom200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Correlation Matrix Shrinkage
     * 
     * Compute an asset correlation matrix as a convex linear combination of an asset correlation matrix and a target correlation matrix, the target correlation matrix being either:  
     *  * An equicorrelation matrix made of 1
     *  * An equicorrelation matrix made of 0
     *  * An equicorrelation matrix made of -1/(n-1), with n the number of assets
     *  * A provided correlation matrix
     *  
     *  References
     *  * [Steiner, Andreas, Manipulating Valid Correlation Matrices](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1878165)
     * 
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixShrinkageResponse
     */
	public function postAssetsCorrelationMatrixShrinkage(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixShrinkageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/correlation/matrix/shrinkage');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixShrinkageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsCorrelationMatrixShrinkage200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixShrinkage200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Theory-Implied Correlation Matrix
     * 
     * Compute the theory-implied asset correlation matrix associated with:
     * * A hierarchical classification of a universe of assets
     * * An asset correlation matrix
     * 
     * References
     * * [Lopez de Prado, Marcos Estimation of Theory-Implied Correlation Matrices (November 9, 2019)](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3484152)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixTheoryImpliedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixTheoryImpliedResponse
     */
	public function postAssetsCorrelationMatrixTheoryImplied(
        \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixTheoryImpliedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixTheoryImpliedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/correlation/matrix/theory-implied');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixTheoryImpliedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsCorrelationMatrixTheoryImplied200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixTheoryImplied200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Correlation Matrix Validation
     * 
     * Validate whether a matrix is an asset correlation matrix.
     * 
     * References
     * * [Wikipedia, Correlation and Dependence](https://en.wikipedia.org/wiki/Correlation_and_dependence#Correlation_matrices)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixValidationRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixValidationResponse
     */
	public function postAssetsCorrelationMatrixValidation(
        \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixValidationRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixValidationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/correlation/matrix/validation');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixValidationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsCorrelationMatrixValidation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsCorrelationMatrixValidation200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}