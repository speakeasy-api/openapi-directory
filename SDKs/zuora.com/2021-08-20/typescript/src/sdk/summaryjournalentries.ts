/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class SummaryJournalEntries {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a summary journal entry
   *
   * @remarks
   * This reference describes how to delete a summary journal entry using the REST API.
   *
   * You must have the "Delete Cancelled Journal Entry" user permission enabled to delete summary journal entries.
   *
   * A summary journal entry must be canceled before it can be deleted.
   *
   */
  deleteSummaryJournalEntry(
    req: operations.DELETESummaryJournalEntryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DELETESummaryJournalEntryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DELETESummaryJournalEntryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/journal-entries/{je-number}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DELETESummaryJournalEntryResponse =
        new operations.DELETESummaryJournalEntryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.commonResponseType = utils.objectToClass(
              httpRes?.data,
              shared.CommonResponseType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all summary journal entries in a journal run
   *
   * @remarks
   *
   * This REST API reference describes how to retrieve information about all summary journal entries in a journal run.
   *
   */
  getAllSummaryJournalEntries(
    req: operations.GETAllSummaryJournalEntriesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETAllSummaryJournalEntriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETAllSummaryJournalEntriesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/journal-entries/journal-runs/{jr-number}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETAllSummaryJournalEntriesResponse =
        new operations.GETAllSummaryJournalEntriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getJournalEntriesInJournalRunType = utils.objectToClass(
              httpRes?.data,
              shared.GETJournalEntriesInJournalRunType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a summary journal entry
   *
   * @remarks
   * This REST API reference describes how to get information about a summary journal entry by its journal entry number.
   *
   */
  getSummaryJournalEntry(
    req: operations.GETSummaryJournalEntryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETSummaryJournalEntryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETSummaryJournalEntryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/journal-entries/{je-number}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETSummaryJournalEntryResponse =
        new operations.GETSummaryJournalEntryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getJournalEntryDetailType = utils.objectToClass(
              httpRes?.data,
              shared.GETJournalEntryDetailType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a summary journal entry
   *
   * @remarks
   * This REST API reference describes how to manually create a summary journal entry. Request and response field descriptions and sample code are provided.
   * ## Requirements
   * 1.The sum of debits must equal the sum of credits in the summary journal entry.
   *
   * 2.The following applies only if you use foreign currency conversion:
   *   * If you have configured Aggregate transactions with different currencies during a Journal Run to "Yes", the value of the **currency** field must be the same as your tenant's home currency. That is, you must create journal entries using your home currency.
   *   * All journal entries in an accounting period must either all be aggregated or all be unaggregated. You cannot have a mix of aggregated and unaggregated journal entries in the same accounting period.
   *
   */
  postSummaryJournalEntry(
    req: operations.POSTSummaryJournalEntryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.POSTSummaryJournalEntryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.POSTSummaryJournalEntryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/journal-entries";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "postJournalEntryType",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.POSTSummaryJournalEntryResponse =
        new operations.POSTSummaryJournalEntryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.postJournalEntryResponseType = utils.objectToClass(
              httpRes?.data,
              shared.POSTJournalEntryResponseType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a summary journal entry
   *
   * @remarks
   *
   * This REST API reference describes how to update the basic information of a summary journal entry. Request and response field descriptions and sample code are provided.
   *
   */
  putBasicSummaryJournalEntry(
    req: operations.PUTBasicSummaryJournalEntryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PUTBasicSummaryJournalEntryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PUTBasicSummaryJournalEntryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/journal-entries/{je-number}/basic-information",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "putBasicSummaryJournalEntryType",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PUTBasicSummaryJournalEntryResponse =
        new operations.PUTBasicSummaryJournalEntryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.commonResponseType = utils.objectToClass(
              httpRes?.data,
              shared.CommonResponseType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Cancel a summary journal entry
   *
   * @remarks
   *
   * This reference describes how to cancel a summary journal entry using the REST API.
   *
   * You must have the "Cancel Journal Entry" user permission enabled to cancel summary journal entries.
   *
   * A summary journal entry cannot be canceled if its Transferred to Accounting status is "Yes" or "Processing".
   *
   */
  putSummaryJournalEntry(
    req: operations.PUTSummaryJournalEntryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PUTSummaryJournalEntryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PUTSummaryJournalEntryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/journal-entries/{je-number}/cancel",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PUTSummaryJournalEntryResponse =
        new operations.PUTSummaryJournalEntryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.commonResponseType = utils.objectToClass(
              httpRes?.data,
              shared.CommonResponseType
            );
          }
          break;
      }

      return res;
    });
  }
}
