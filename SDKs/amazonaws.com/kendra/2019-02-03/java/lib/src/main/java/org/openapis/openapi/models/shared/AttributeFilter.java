/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AttributeFilter - &lt;p&gt;Provides filtering the query results based on document attributes or metadata fields.&lt;/p&gt; &lt;p&gt;When you use the &lt;code&gt;AndAllFilters&lt;/code&gt; or &lt;code&gt;OrAllFilters&lt;/code&gt;, filters you can use 2 layers under the first attribute filter. For example, you can use:&lt;/p&gt; &lt;p&gt; &lt;code&gt;&amp;lt;AndAllFilters&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &amp;lt;OrAllFilters&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &amp;lt;EqualsTo&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you use more than 2 layers, you receive a &lt;code&gt;ValidationException&lt;/code&gt; exception with the message "&lt;code&gt;AttributeFilter&lt;/code&gt; cannot have a depth of more than 2."&lt;/p&gt; &lt;p&gt;If you use more than 10 attribute filters in a given list for &lt;code&gt;AndAllFilters&lt;/code&gt; or &lt;code&gt;OrAllFilters&lt;/code&gt;, you receive a &lt;code&gt;ValidationException&lt;/code&gt; with the message "&lt;code&gt;AttributeFilter&lt;/code&gt; cannot have a length of more than 10".&lt;/p&gt;
 */
public class AttributeFilter {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AndAllFilters")
    public AttributeFilter[] andAllFilters;

    public AttributeFilter withAndAllFilters(AttributeFilter[] andAllFilters) {
        this.andAllFilters = andAllFilters;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ContainsAll")
    public DocumentAttribute containsAll;

    public AttributeFilter withContainsAll(DocumentAttribute containsAll) {
        this.containsAll = containsAll;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ContainsAny")
    public DocumentAttribute containsAny;

    public AttributeFilter withContainsAny(DocumentAttribute containsAny) {
        this.containsAny = containsAny;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EqualsTo")
    public DocumentAttribute equalsTo;

    public AttributeFilter withEqualsTo(DocumentAttribute equalsTo) {
        this.equalsTo = equalsTo;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GreaterThan")
    public DocumentAttribute greaterThan;

    public AttributeFilter withGreaterThan(DocumentAttribute greaterThan) {
        this.greaterThan = greaterThan;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GreaterThanOrEquals")
    public DocumentAttribute greaterThanOrEquals;

    public AttributeFilter withGreaterThanOrEquals(DocumentAttribute greaterThanOrEquals) {
        this.greaterThanOrEquals = greaterThanOrEquals;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LessThan")
    public DocumentAttribute lessThan;

    public AttributeFilter withLessThan(DocumentAttribute lessThan) {
        this.lessThan = lessThan;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LessThanOrEquals")
    public DocumentAttribute lessThanOrEquals;

    public AttributeFilter withLessThanOrEquals(DocumentAttribute lessThanOrEquals) {
        this.lessThanOrEquals = lessThanOrEquals;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NotFilter")
    public AttributeFilter notFilter;

    public AttributeFilter withNotFilter(AttributeFilter notFilter) {
        this.notFilter = notFilter;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OrAllFilters")
    public AttributeFilter[] orAllFilters;

    public AttributeFilter withOrAllFilters(AttributeFilter[] orAllFilters) {
        this.orAllFilters = orAllFilters;
        return this;
    }
    
    public AttributeFilter(){}
}
