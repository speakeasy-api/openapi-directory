"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    "http://azure-api.sportsdata.io/golf/v2",
    "https://azure-api.sportsdata.io/golf/v2",
];
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
    }
    /**
     * Current Season
     */
    SDK.prototype.currentSeason = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CurrentSeasonRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/CurrentSeason", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CurrentSeasonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.season = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Season);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * DFS Slates
     */
    SDK.prototype.dfsSlates = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DfsSlatesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/DfsSlatesByTournament/{tournamentid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DfsSlatesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.dfsSlates = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.dfsSlates = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DfsSlate, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Injuries
     */
    SDK.prototype.injuries = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.InjuriesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Injuries", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.InjuriesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.injuries = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.injuries = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Injury, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Injuries (Historical)
     */
    SDK.prototype.injuriesHistorical = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.InjuriesHistoricalRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/InjuriesByHistorical", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.InjuriesHistoricalResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.injuries = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.injuries = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Injury, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Leaderboard
     */
    SDK.prototype.leaderboard = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LeaderboardRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Leaderboard/{tournamentid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LeaderboardResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.leaderboard = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Leaderboard);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * News
     */
    SDK.prototype.news = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.NewsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/News", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.NewsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.news = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.news = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.News, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * News by Date
     */
    SDK.prototype.newsByDate = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.NewsByDateRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/NewsByDate/{date}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.NewsByDateResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.news = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.news = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.News, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * News by Player
     */
    SDK.prototype.newsByPlayer = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.NewsByPlayerRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/NewsByPlayerID/{playerid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.NewsByPlayerResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.news = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.news = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.News, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player
     */
    SDK.prototype.player = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Player/{playerid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.player = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Player);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player Season Stats (w/ World Golf Rankings)
     */
    SDK.prototype.playerSeasonStatsWWorldGolfRankings = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerSeasonStatsWWorldGolfRankingsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerSeasonStats/{season}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerSeasonStatsWWorldGolfRankingsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerSeasons = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.playerSeasons = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerSeason, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player Tournament Projected Stats (w/ DraftKings Salaries)
     */
    SDK.prototype.playerTournamentProjectedStatsWDraftkingsSalaries = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.PlayerTournamentProjectedStatsWDraftkingsSalariesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerTournamentProjectionStats/{tournamentid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerTournamentProjectedStatsWDraftkingsSalariesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerTournamentProjections = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.playerTournamentProjections = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerTournamentProjection, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player Tournament Stats By Player
     */
    SDK.prototype.playerTournamentStatsByPlayer = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerTournamentStatsByPlayerRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayerTournamentStatsByPlayer/{tournamentid}/{playerid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerTournamentStatsByPlayerResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.playerTournament = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PlayerTournament);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Players
     */
    SDK.prototype.players = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayersRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Players", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayersResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.players = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.players = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Player, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Schedule
     */
    SDK.prototype.schedule = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ScheduleRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Tournaments", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ScheduleResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tournaments = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tournaments = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Tournament, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Schedule by Season
     */
    SDK.prototype.scheduleBySeason = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ScheduleBySeasonRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Tournaments/{season}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ScheduleBySeasonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tournaments = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.tournaments = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Tournament, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    return SDK;
}());
exports.SDK = SDK;
