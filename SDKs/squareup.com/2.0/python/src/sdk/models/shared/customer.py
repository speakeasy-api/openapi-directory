"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import address as shared_address
from ..shared import card as shared_card
from ..shared import customerpreferences as shared_customerpreferences
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Customer:
    r"""Represents a Square customer profile in the Customer Directory of a Square seller."""
    
    address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Represents a postal address in a country. The address format is based
    on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
    see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
    This format has dedicated fields for four address components: postal code, 
    locality (city), administrative district (state, prefecture, or province), and 
    sublocality (town or village). These components have dedicated fields in the 
    `Address` object because software sometimes behaves differently based on them. 
    For example, sales tax software may charge different amounts of sales tax 
    based on the postal code, and some software is only available in 
    certain states due to compliance reasons.
    
    For the remaining address components, the `Address` type provides the 
    `address_line_1` and `address_line_2` fields for free-form data entry. 
    These fields are free-form because the remaining address components have 
    too many variations around the world and typical software does not parse 
    these components. These fields enable users to enter anything they want. 
    
    Note that, in the current implementation, all other `Address` type fields are blank. 
    These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
    `administrative_district_level_2`, `administrative_district_level_3`, 
    `first_name`, `last_name`, and `organization`. 
    
    When it comes to localization, the seller's language preferences 
    (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
    are ignored for addresses. Even though Square products (such as Square Point of Sale 
    and the Seller Dashboard) mostly use a seller's language preference in 
    communication, when it comes to addresses, they will use English for a US address, 
    Japanese for an address in Japan, and so on.
    """  
    birthday: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('birthday'), 'exclude': lambda f: f is None }})
    r"""The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.
    For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
    """  
    cards: Optional[list[shared_card.Card]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cards'), 'exclude': lambda f: f is None }})
    r"""Payment details of the credit, debit, and gift cards stored on file for the customer profile.
    
    DEPRECATED at version 2021-06-16. Replaced by calling [ListCards](https://developer.squareup.com/reference/square_2021-08-18/cards-api/list-cards) (for credit and debit cards on file) 
    or [ListGiftCards](https://developer.squareup.com/reference/square_2021-08-18/gift-cards-api/list-gift-cards) (for gift cards on file) and including the `customer_id` query parameter. 
    For more information, see [Migrate to the Cards API and Gift Cards API](https://developer.squareup.com/docs/customers-api/use-the-api/integrate-with-other-services#migrate-customer-cards).
    """  
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_name'), 'exclude': lambda f: f is None }})
    r"""A business name associated with the customer profile."""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""The timestamp when the customer profile was created, in RFC 3339 format."""  
    creation_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creation_source'), 'exclude': lambda f: f is None }})
    r"""A creation source represents the method used to create the
    customer profile.
    """  
    email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_address'), 'exclude': lambda f: f is None }})
    r"""The email address associated with the customer profile."""  
    family_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('family_name'), 'exclude': lambda f: f is None }})
    r"""The family (i.e., last) name associated with the customer profile."""  
    given_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('given_name'), 'exclude': lambda f: f is None }})
    r"""The given (i.e., first) name associated with the customer profile."""  
    group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_ids'), 'exclude': lambda f: f is None }})
    r"""The IDs of customer groups the customer belongs to."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""A unique Square-assigned ID for the customer profile."""  
    nickname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nickname'), 'exclude': lambda f: f is None }})
    r"""A nickname for the customer profile."""  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})
    r"""A custom note associated with the customer profile."""  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_number'), 'exclude': lambda f: f is None }})
    r"""The 11-digit phone number associated with the customer profile."""  
    preferences: Optional[shared_customerpreferences.CustomerPreferences] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferences'), 'exclude': lambda f: f is None }})
    r"""Represents communication preferences for the customer profile."""  
    reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference_id'), 'exclude': lambda f: f is None }})
    r"""An optional second ID used to associate the customer profile with an
    entity in another system.
    """  
    segment_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segment_ids'), 'exclude': lambda f: f is None }})
    r"""The IDs of segments the customer belongs to."""  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})
    r"""The timestamp when the customer profile was last updated, in RFC 3339 format."""  
    version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""The Square-assigned version number of the customer profile. The version number is incremented each time an update is committed to the customer profile, except for changes to customer segment membership and cards on file."""  
    