<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CadenceMemberships 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a cadence membership
     * 
     * Cadence Membership
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteV2CadenceMembershipsIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteV2CadenceMembershipsIdJsonResponse
     */
	public function deleteV2CadenceMembershipsIdJson(
        \OpenAPI\OpenAPI\Models\Operations\DeleteV2CadenceMembershipsIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteV2CadenceMembershipsIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/cadence_memberships/{id}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteV2CadenceMembershipsIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteV2CadenceMembershipsIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * List cadence memberships
     * 
     * Fetches multiple cadence membership records. The records can be filtered, paged, and sorted according to
     * the respective parameters. A cadence membership is the association between a person and their current and
     * historical time on a cadence. Cadence membership records are mutable and change over time. If a person is
     * added to a cadence and re-added to the same cadence in the future, there is a single membership record.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2CadenceMembershipsJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2CadenceMembershipsJsonResponse
     */
	public function getV2CadenceMembershipsJson(
        \OpenAPI\OpenAPI\Models\Operations\GetV2CadenceMembershipsJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2CadenceMembershipsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/cadence_memberships.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV2CadenceMembershipsJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2CadenceMembershipsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Fetch a cadence membership
     * 
     * Fetches a cadence membership, by ID only.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2CadenceMembershipsIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2CadenceMembershipsIdJsonResponse
     */
	public function getV2CadenceMembershipsIdJson(
        \OpenAPI\OpenAPI\Models\Operations\GetV2CadenceMembershipsIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2CadenceMembershipsIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/cadence_memberships/{id}.json', \OpenAPI\OpenAPI\Models\Operations\GetV2CadenceMembershipsIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2CadenceMembershipsIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create a cadence membership
     * 
     * Adds a person to a cadence. person_id and cadence_id are required, and must be visible to the authenticated user. user_id will
     * default to the authenticated user, but can be set to any visible user on the authenticated team.
     * 
     * A person cannot be added to a cadence on behalf of a teammate unless the cadence is a team cadence, the cadence is owned by
     * the teammate, or the teammate has the Personal Cadence Admin permission.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV2CadenceMembershipsJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV2CadenceMembershipsJsonResponse
     */
	public function postV2CadenceMembershipsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostV2CadenceMembershipsJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV2CadenceMembershipsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/cadence_memberships.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostV2CadenceMembershipsJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV2CadenceMembershipsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}