// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type DistributionGroupsGetAppsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type DistributionGroupsGetAppsRequest struct {
	// The name of the distribution group
	DistributionGroupName string `pathParam:"style=simple,explode=false,name=distribution_group_name"`
	// The organization's name
	OrgName string `pathParam:"style=simple,explode=false,name=org_name"`
}

// DistributionGroupsGetApps200ApplicationJSONOsEnum - The OS the app will be running on
type DistributionGroupsGetApps200ApplicationJSONOsEnum string

const (
	DistributionGroupsGetApps200ApplicationJSONOsEnumAndroid DistributionGroupsGetApps200ApplicationJSONOsEnum = "Android"
	DistributionGroupsGetApps200ApplicationJSONOsEnumIOs     DistributionGroupsGetApps200ApplicationJSONOsEnum = "iOS"
	DistributionGroupsGetApps200ApplicationJSONOsEnumMacOs   DistributionGroupsGetApps200ApplicationJSONOsEnum = "macOS"
	DistributionGroupsGetApps200ApplicationJSONOsEnumTizen   DistributionGroupsGetApps200ApplicationJSONOsEnum = "Tizen"
	DistributionGroupsGetApps200ApplicationJSONOsEnumTvOs    DistributionGroupsGetApps200ApplicationJSONOsEnum = "tvOS"
	DistributionGroupsGetApps200ApplicationJSONOsEnumWindows DistributionGroupsGetApps200ApplicationJSONOsEnum = "Windows"
	DistributionGroupsGetApps200ApplicationJSONOsEnumLinux   DistributionGroupsGetApps200ApplicationJSONOsEnum = "Linux"
	DistributionGroupsGetApps200ApplicationJSONOsEnumCustom  DistributionGroupsGetApps200ApplicationJSONOsEnum = "Custom"
)

func (e DistributionGroupsGetApps200ApplicationJSONOsEnum) ToPointer() *DistributionGroupsGetApps200ApplicationJSONOsEnum {
	return &e
}

func (e *DistributionGroupsGetApps200ApplicationJSONOsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Android":
		fallthrough
	case "iOS":
		fallthrough
	case "macOS":
		fallthrough
	case "Tizen":
		fallthrough
	case "tvOS":
		fallthrough
	case "Windows":
		fallthrough
	case "Linux":
		fallthrough
	case "Custom":
		*e = DistributionGroupsGetApps200ApplicationJSONOsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsGetApps200ApplicationJSONOsEnum: %v", v)
	}
}

// DistributionGroupsGetApps200ApplicationJSONOwnerTypeEnum - The owner type. Can either be 'org' or 'user'
type DistributionGroupsGetApps200ApplicationJSONOwnerTypeEnum string

const (
	DistributionGroupsGetApps200ApplicationJSONOwnerTypeEnumOrg  DistributionGroupsGetApps200ApplicationJSONOwnerTypeEnum = "org"
	DistributionGroupsGetApps200ApplicationJSONOwnerTypeEnumUser DistributionGroupsGetApps200ApplicationJSONOwnerTypeEnum = "user"
)

func (e DistributionGroupsGetApps200ApplicationJSONOwnerTypeEnum) ToPointer() *DistributionGroupsGetApps200ApplicationJSONOwnerTypeEnum {
	return &e
}

func (e *DistributionGroupsGetApps200ApplicationJSONOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "org":
		fallthrough
	case "user":
		*e = DistributionGroupsGetApps200ApplicationJSONOwnerTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsGetApps200ApplicationJSONOwnerTypeEnum: %v", v)
	}
}

// DistributionGroupsGetApps200ApplicationJSONOwner - The information about the app's owner
type DistributionGroupsGetApps200ApplicationJSONOwner struct {
	// The avatar URL of the owner
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The owner's display name
	DisplayName string `json:"display_name"`
	// The owner's email address
	Email *string `json:"email,omitempty"`
	// The unique id (UUID) of the owner
	ID string `json:"id"`
	// The unique name that used to identify the owner
	Name string `json:"name"`
	// The owner type. Can either be 'org' or 'user'
	Type DistributionGroupsGetApps200ApplicationJSONOwnerTypeEnum `json:"type"`
}

type DistributionGroupsGetApps200ApplicationJSON struct {
	// The description of the app
	Description *string `json:"description,omitempty"`
	// The display name of the app
	DisplayName string `json:"display_name"`
	// The string representation of the source of the app's icon
	IconSource *string `json:"icon_source,omitempty"`
	// The string representation of the URL pointing to the app's icon
	IconURL *string `json:"icon_url,omitempty"`
	// The unique ID (UUID) of the app
	ID string `json:"id"`
	// The name of the app used in URLs
	Name string `json:"name"`
	// The creation origin of this app
	Origin *string `json:"origin,omitempty"`
	// The OS the app will be running on
	Os DistributionGroupsGetApps200ApplicationJSONOsEnum `json:"os"`
	// The information about the app's owner
	Owner DistributionGroupsGetApps200ApplicationJSONOwner `json:"owner"`
	// The platform of the app
	Platform *string `json:"platform,omitempty"`
	// A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
	ReleaseType *string `json:"release_type,omitempty"`
}

type DistributionGroupsGetAppsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	DistributionGroupsGetApps200ApplicationJSONAnies []DistributionGroupsGetApps200ApplicationJSON
}
