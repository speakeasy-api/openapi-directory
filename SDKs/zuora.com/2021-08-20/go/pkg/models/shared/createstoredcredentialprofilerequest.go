// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// CreateStoredCredentialProfileRequestActionEnum - Specifies how Zuora activates the stored credential profile. Only applicable if you set the `status` field to `Active`.
//
// * `Activate` (default) - Use this value if you are creating the stored credential profile after receiving the customer's consent.
//
//	Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.
//
//	If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
//
// * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
type CreateStoredCredentialProfileRequestActionEnum string

const (
	CreateStoredCredentialProfileRequestActionEnumActivate CreateStoredCredentialProfileRequestActionEnum = "Activate"
	CreateStoredCredentialProfileRequestActionEnumPersist  CreateStoredCredentialProfileRequestActionEnum = "Persist"
)

func (e *CreateStoredCredentialProfileRequestActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Activate":
		fallthrough
	case "Persist":
		*e = CreateStoredCredentialProfileRequestActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateStoredCredentialProfileRequestActionEnum: %s", s)
	}
}

type CreateStoredCredentialProfileRequestConsentAgreementSrcEnum string

const (
	CreateStoredCredentialProfileRequestConsentAgreementSrcEnumExternal CreateStoredCredentialProfileRequestConsentAgreementSrcEnum = "External"
)

func (e *CreateStoredCredentialProfileRequestConsentAgreementSrcEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "External":
		*e = CreateStoredCredentialProfileRequestConsentAgreementSrcEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateStoredCredentialProfileRequestConsentAgreementSrcEnum: %s", s)
	}
}

// CreateStoredCredentialProfileRequestStatusEnum - Specifies the status of the stored credential profile.
//
// * `Active` - Use this value if you are creating the stored credential profile after receiving the customer's consent, or if the stored credential profile represents a stored credential profile in an external system.
//
//	You can use the `action` field to specify how Zuora activates the stored credential profile.
//
// * `Agreed` - Use this value if you are migrating the payment method to the stored credential transaction framework.
//
//	In this case, Zuora will not send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile.
type CreateStoredCredentialProfileRequestStatusEnum string

const (
	CreateStoredCredentialProfileRequestStatusEnumAgreed CreateStoredCredentialProfileRequestStatusEnum = "Agreed"
	CreateStoredCredentialProfileRequestStatusEnumActive CreateStoredCredentialProfileRequestStatusEnum = "Active"
)

func (e *CreateStoredCredentialProfileRequestStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Agreed":
		fallthrough
	case "Active":
		*e = CreateStoredCredentialProfileRequestStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateStoredCredentialProfileRequestStatusEnum: %s", s)
	}
}

type CreateStoredCredentialProfileRequestTypeEnum string

const (
	CreateStoredCredentialProfileRequestTypeEnumRecurring   CreateStoredCredentialProfileRequestTypeEnum = "Recurring"
	CreateStoredCredentialProfileRequestTypeEnumUnscheduled CreateStoredCredentialProfileRequestTypeEnum = "Unscheduled"
)

func (e *CreateStoredCredentialProfileRequestTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Recurring":
		fallthrough
	case "Unscheduled":
		*e = CreateStoredCredentialProfileRequestTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateStoredCredentialProfileRequestTypeEnum: %s", s)
	}
}

type CreateStoredCredentialProfileRequest struct {
	// Specifies how Zuora activates the stored credential profile. Only applicable if you set the `status` field to `Active`.
	//
	// * `Activate` (default) - Use this value if you are creating the stored credential profile after receiving the customer's consent.
	//
	//   Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.
	//
	//   If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
	//
	//
	// * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
	//
	Action *CreateStoredCredentialProfileRequestActionEnum `json:"action,omitempty"`
	// The date on which the profile is agreed. The date format is `yyyy-mm-dd`.
	//
	AgreedOn *types.Date `json:"agreedOn,omitempty"`
	// Specifies the ID of the payment gateway that Zuora will use when activating the stored credential profile.
	//
	AuthGateway *string `json:"authGateway,omitempty"`
	// The security code of the credit card.
	//
	CardSecurityCode *string `json:"cardSecurityCode,omitempty"`
	// Specifies your reference for the consent agreement that you have established with the customer.
	//
	ConsentAgreementRef *string                                                     `json:"consentAgreementRef,omitempty"`
	ConsentAgreementSrc CreateStoredCredentialProfileRequestConsentAgreementSrcEnum `json:"consentAgreementSrc"`
	// The ID of a network transaction.
	//
	NetworkTransactionID *string `json:"networkTransactionId,omitempty"`
	// Specifies the status of the stored credential profile.
	//
	// * `Active` - Use this value if you are creating the stored credential profile after receiving the customer's consent, or if the stored credential profile represents a stored credential profile in an external system.
	//
	//   You can use the `action` field to specify how Zuora activates the stored credential profile.
	//
	//
	// * `Agreed` - Use this value if you are migrating the payment method to the stored credential transaction framework.
	//
	//   In this case, Zuora will not send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile.
	//
	Status CreateStoredCredentialProfileRequestStatusEnum `json:"status"`
	Type   CreateStoredCredentialProfileRequestTypeEnum   `json:"type"`
}
