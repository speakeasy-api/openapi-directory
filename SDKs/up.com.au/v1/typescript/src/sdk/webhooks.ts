/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Webhooks provide a mechanism for a configured URL to receive
 *
 * @remarks
 * events when transaction activity occurs on Up. You can think of
 * webhooks as being like push notifications for your server-side
 * application.
 *
 */
export class Webhooks {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete webhook
   *
   * @remarks
   * Delete a specific webhook by providing its unique identifier. Once
   * deleted, webhook events will no longer be sent to the configured URL.
   *
   */
  deleteWebhooksId(
    req: operations.DeleteWebhooksIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteWebhooksIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteWebhooksIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/webhooks/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteWebhooksIdResponse =
        new operations.DeleteWebhooksIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * List webhooks
   *
   * @remarks
   * Retrieve a list of configured webhooks. The returned list is
   * [paginated](#pagination) and can be scrolled by following the `next`
   * and `prev` links where present. Results are ordered oldest first to
   * newest last.
   *
   */
  getWebhooks(
    req: operations.GetWebhooksRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWebhooksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWebhooksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/webhooks";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWebhooksResponse =
        new operations.GetWebhooksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listWebhooksResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListWebhooksResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve webhook
   *
   * @remarks
   * Retrieve a specific webhook by providing its unique identifier.
   *
   */
  getWebhooksId(
    req: operations.GetWebhooksIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWebhooksIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWebhooksIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/webhooks/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWebhooksIdResponse =
        new operations.GetWebhooksIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getWebhookResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetWebhookResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List webhook logs
   *
   * @remarks
   * Retrieve a list of delivery logs for a webhook by providing its unique
   * identifier. This is useful for analysis and debugging purposes. The
   * returned list is [paginated](#pagination) and can be scrolled by
   * following the `next` and `prev` links where present. Results are ordered
   * newest first to oldest last. Logs may be automatically purged after a
   * period of time.
   *
   */
  getWebhooksWebhookIdLogs(
    req: operations.GetWebhooksWebhookIdLogsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWebhooksWebhookIdLogsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWebhooksWebhookIdLogsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/webhooks/{webhookId}/logs",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWebhooksWebhookIdLogsResponse =
        new operations.GetWebhooksWebhookIdLogsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listWebhookDeliveryLogsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListWebhookDeliveryLogsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create webhook
   *
   * @remarks
   * Create a new webhook with a given URL. The URL will receive webhook
   * events as JSON-encoded `POST` requests. The URL must respond with a HTTP
   * `200` status on success.
   *
   * There is currently a limit of 10 webhooks at any given time. Once this
   * limit is reached, existing webhooks will need to be deleted before new
   * webhooks can be created.
   *
   * Event delivery is retried with exponential backoff if the URL is
   * unreachable or it does not respond with a `200` status. The response
   * includes a `secretKey` attribute, which is used to sign requests sent to
   * the webhook URL. It will not be returned from any other endpoints within
   * the Up API. If the `secretKey` is lost, simply create a new webhook with
   * the same URL, capture its `secretKey` and then delete the original
   * webhook. See [Handling webhook events](#callback_post_webhookURL) for
   * details on how to process webhook events.
   *
   * It is probably a good idea to test the webhook by
   * [sending it a `PING` event](#post_webhooks_webhookId_ping) after creating
   * it.
   *
   */
  postWebhooks(
    req: shared.CreateWebhookRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostWebhooksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateWebhookRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/webhooks";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostWebhooksResponse =
        new operations.PostWebhooksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createWebhookResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateWebhookResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Ping webhook
   *
   * @remarks
   * Send a `PING` event to a webhook by providing its unique identifier.
   * This is useful for testing and debugging purposes. The event is delivered
   * asynchronously and its data is returned in the response to this request.
   *
   */
  postWebhooksWebhookIdPing(
    req: operations.PostWebhooksWebhookIdPingRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostWebhooksWebhookIdPingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostWebhooksWebhookIdPingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/webhooks/{webhookId}/ping",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostWebhooksWebhookIdPingResponse =
        new operations.PostWebhooksWebhookIdPingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.webhookEventCallback = utils.objectToClass(
              httpRes?.data,
              shared.WebhookEventCallback
            );
          }
          break;
      }

      return res;
    });
  }
}
