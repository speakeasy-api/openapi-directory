/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Cadence Membership
 */
export class CadenceMemberships {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a cadence membership
   *
   * @remarks
   * Cadence Membership
   *
   */
  deleteV2CadenceMembershipsIdJson(
    req: operations.DeleteV2CadenceMembershipsIdJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteV2CadenceMembershipsIdJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteV2CadenceMembershipsIdJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/cadence_memberships/{id}.json",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteV2CadenceMembershipsIdJsonResponse =
        new operations.DeleteV2CadenceMembershipsIdJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * List cadence memberships
   *
   * @remarks
   * Fetches multiple cadence membership records. The records can be filtered, paged, and sorted according to
   * the respective parameters. A cadence membership is the association between a person and their current and
   * historical time on a cadence. Cadence membership records are mutable and change over time. If a person is
   * added to a cadence and re-added to the same cadence in the future, there is a single membership record.
   *
   */
  getV2CadenceMembershipsJson(
    req: operations.GetV2CadenceMembershipsJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetV2CadenceMembershipsJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetV2CadenceMembershipsJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/cadence_memberships.json";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV2CadenceMembershipsJsonResponse =
        new operations.GetV2CadenceMembershipsJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetch a cadence membership
   *
   * @remarks
   * Fetches a cadence membership, by ID only.
   *
   */
  getV2CadenceMembershipsIdJson(
    req: operations.GetV2CadenceMembershipsIdJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetV2CadenceMembershipsIdJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetV2CadenceMembershipsIdJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/cadence_memberships/{id}.json",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV2CadenceMembershipsIdJsonResponse =
        new operations.GetV2CadenceMembershipsIdJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a cadence membership
   *
   * @remarks
   * Adds a person to a cadence. person_id and cadence_id are required, and must be visible to the authenticated user. user_id will
   * default to the authenticated user, but can be set to any visible user on the authenticated team.
   *
   * A person cannot be added to a cadence on behalf of a teammate unless the cadence is a team cadence, the cadence is owned by
   * the teammate, or the teammate has the Personal Cadence Admin permission.
   *
   */
  postV2CadenceMembershipsJson(
    req: operations.PostV2CadenceMembershipsJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostV2CadenceMembershipsJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostV2CadenceMembershipsJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/cadence_memberships.json";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostV2CadenceMembershipsJsonResponse =
        new operations.PostV2CadenceMembershipsJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
