/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.net.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.SerializedBody;

/**
 * API operations to interact with the PATROL Agent.
 */
public class Actions {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Actions(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Triggers a new collect on a specific device.
     * You need to provide the &lt;b&gt;Device ID&lt;/b&gt; and &lt;b&gt;Monitor Class&lt;/b&gt; parameters to identify the device:&lt;br&gt;- Use the &lt;b&gt;/hardware/devices&lt;/b&gt; service in the &lt;b&gt;Device&lt;/b&gt; section to retrieve the &lt;b&gt;Device ID&lt;/b&gt; of any device.&lt;br&gt;- Use the &lt;b&gt;/hardware/device-monitors/{deviceId}&lt;/b&gt; service in the &lt;b&gt;Device&lt;/b&gt; section to retrieve the &lt;b&gt;Monitor Class&lt;/b&gt; of a device.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CollectNowResponse collectNow(org.openapis.openapi.models.operations.CollectNowRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CollectNowRequest.class, baseUrl, "/hardware/actions/{deviceId}/collect-now", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.CollectNowRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CollectNowResponse res = new org.openapis.openapi.models.operations.CollectNowResponse(contentType, httpRes.statusCode()) {{
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 403 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Triggers a new discovery on a specific device.
     * You need to provide the &lt;b&gt;Device ID&lt;/b&gt; to identify the device:&lt;br&gt;- Use the &lt;b&gt;/hardware/devices&lt;/b&gt; service in the &lt;b&gt;Device&lt;/b&gt; section to retrieve the &lt;b&gt;Device ID&lt;/b&gt; of a device.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RediscoverResponse rediscover(org.openapis.openapi.models.operations.RediscoverRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RediscoverRequest.class, baseUrl, "/hardware/actions/{deviceId}/rediscover", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RediscoverResponse res = new org.openapis.openapi.models.operations.RediscoverResponse(contentType, httpRes.statusCode()) {{
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 403 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Sends a 'Reinitialize KM' command.
     * Launches a 'Reinitialize KM' command for the following parameters:&lt;br&gt;- resetDiscoveryAndPollingIntervals&lt;br&gt;- resetAlertAfterNTimes&lt;br&gt;- resetAlertActions&lt;br&gt;- resetOtherA&lt;br&gt;- resetSettings&lt;br&gt;- resetDebugMode&lt;br&gt;- resetRemovedPausedObjectList&lt;br&gt;- resetReportSettings&lt;br&gt;- resetJavaSettings&lt;br&gt;- resetThresholds&lt;br&gt;&lt;br&gt;You need to provide the &lt;b&gt;Device ID&lt;/b&gt; to identify the device:&lt;br&gt;- Use the &lt;b&gt;/hardware/devices&lt;/b&gt; service in the &lt;b&gt;Device&lt;/b&gt; section to retrieve the &lt;b&gt;Device ID&lt;/b&gt; of a device.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReinitializeResponse reinitialize(org.openapis.openapi.models.operations.ReinitializeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReinitializeRequest.class, baseUrl, "/hardware/actions/{deviceId}/reinitialize", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "reinitializeActionConfiguration", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReinitializeResponse res = new org.openapis.openapi.models.operations.ReinitializeResponse(contentType, httpRes.statusCode()) {{
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 403 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Removes a specific instance from the monitoring environment.
     * You need to provide the &lt;b&gt;Device ID&lt;/b&gt;, the &lt;b&gt;Monitor Class&lt;/b&gt; and the &lt;b&gt;Monitor SID&lt;/b&gt; parameters:&lt;br&gt;- Use the &lt;b&gt;/hardware/devices&lt;/b&gt; service in the &lt;b&gt;Device&lt;/b&gt; section to retrieve the &lt;b&gt;Device ID&lt;/b&gt; of any device.&lt;br&gt;- Use the &lt;b&gt;/hardware/device-monitors/{deviceId}&lt;/b&gt; service in the &lt;b&gt;Device&lt;/b&gt; section to retrieve the &lt;b&gt;Monitor Class&lt;/b&gt; and the &lt;b&gt;Monitor SID&lt;/b&gt; for a device.&lt;br&gt;&lt;br&gt;(Example:"path":"/MS_HW_MAIN/10025150" where &lt;em&gt;MS_HW_MAIN&lt;/em&gt; is the Monitor Class and &lt;em&gt;10025150&lt;/em&gt; is the Monitor SID).
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RemoveResponse remove(org.openapis.openapi.models.operations.RemoveRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RemoveRequest.class, baseUrl, "/hardware/actions/{deviceId}/remove", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RemoveRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RemoveResponse res = new org.openapis.openapi.models.operations.RemoveResponse(contentType, httpRes.statusCode()) {{
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 403 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Resets the Error Count parameter.
     * Sets the Error Count parameter to 0.&lt;br&gt;&lt;br&gt;You need to provide the &lt;b&gt;Device ID&lt;/b&gt;, the &lt;b&gt;Monitor Class&lt;/b&gt; and the &lt;b&gt;Monitor SID&lt;/b&gt; parameters:&lt;br&gt;- Use the &lt;b&gt;/hardware/devices&lt;/b&gt; service in the &lt;b&gt;Device&lt;/b&gt; section to retrieve the &lt;b&gt;Device ID&lt;/b&gt; of any device.&lt;br&gt;- Use the &lt;b&gt;/hardware/device-monitors/{deviceId}&lt;/b&gt; service in the &lt;b&gt;Device&lt;/b&gt; section to retrieve the &lt;b&gt;Monitor Class&lt;/b&gt; and the &lt;b&gt;Monitor SID&lt;/b&gt; for a device.&lt;br&gt;&lt;br&gt;(Example:"path":"/MS_HW_MAIN/10025150" where &lt;em&gt;MS_HW_MAIN&lt;/em&gt; is the Monitor Class and &lt;em&gt;10025150&lt;/em&gt; is the monitorSid).
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ResetResponse reset(org.openapis.openapi.models.operations.ResetRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ResetRequest.class, baseUrl, "/hardware/actions/{deviceId}/reset-error-count", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ResetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ResetResponse res = new org.openapis.openapi.models.operations.ResetResponse(contentType, httpRes.statusCode()) {{
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 403 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }
}