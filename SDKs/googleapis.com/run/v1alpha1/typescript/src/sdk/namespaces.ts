/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Namespaces {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create a job.
   */
  runNamespacesJobsCreate(
    req: operations.RunNamespacesJobsCreateRequest,
    security: operations.RunNamespacesJobsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunNamespacesJobsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunNamespacesJobsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/apis/run.googleapis.com/v1alpha1/{parent}/jobs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "job",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RunNamespacesJobsCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunNamespacesJobsCreateResponse =
        new operations.RunNamespacesJobsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.job = utils.objectToClass(httpRes?.data, shared.Job);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a job.
   */
  runNamespacesJobsDelete(
    req: operations.RunNamespacesJobsDeleteRequest,
    security: operations.RunNamespacesJobsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunNamespacesJobsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunNamespacesJobsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/apis/run.googleapis.com/v1alpha1/{name}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RunNamespacesJobsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunNamespacesJobsDeleteResponse =
        new operations.RunNamespacesJobsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get information about a job.
   */
  runNamespacesJobsGet(
    req: operations.RunNamespacesJobsGetRequest,
    security: operations.RunNamespacesJobsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunNamespacesJobsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunNamespacesJobsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/apis/run.googleapis.com/v1alpha1/{name}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RunNamespacesJobsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunNamespacesJobsGetResponse =
        new operations.RunNamespacesJobsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.job = utils.objectToClass(httpRes?.data, shared.Job);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List jobs.
   */
  runNamespacesJobsList(
    req: operations.RunNamespacesJobsListRequest,
    security: operations.RunNamespacesJobsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunNamespacesJobsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunNamespacesJobsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/apis/run.googleapis.com/v1alpha1/{parent}/jobs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RunNamespacesJobsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunNamespacesJobsListResponse =
        new operations.RunNamespacesJobsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listJobsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListJobsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
