/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetAssociationsBetweenRequest extends SpeakeasyBase {
  /**
   * Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=evidence",
  })
  evidence?: string;

  /**
   * If true, excludes associations that involve IEAs (ECO:0000501)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=exclude_automatic_assertions",
  })
  excludeAutomaticAssertions?: boolean;

  /**
   * Return associations pointing to this node, e.g. MP:0013765. Can also be a biological entity such as a gene
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=object",
  })
  object: string;

  /**
   * number of rows
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=rows" })
  rows?: number;

  /**
   * beginning row
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=start" })
  start?: number;

  /**
   * Return associations emanating from this node, e.g. MGI:1342287 (If ID is from an ontology then results would include inferred associations, by default)
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=subject",
  })
  subject: string;

  /**
   * If true, excludes evidence objects in response
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=unselect_evidence",
  })
  unselectEvidence?: boolean;

  /**
   * If true, returns results in compact associations format
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=use_compact_associations",
  })
  useCompactAssociations?: boolean;
}

export class GetAssociationsBetweenResponse extends SpeakeasyBase {
  /**
   * Success
   */
  @SpeakeasyMetadata({ elemType: shared.AssociationResults })
  associationResults?: shared.AssociationResults[];

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
