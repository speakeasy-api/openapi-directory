/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ContinueWatchingListDataExpansion } from "./continuewatchinglistdataexpansion";
import { Expose, Transform } from "class-transformer";

/**
 * List data for ContinueWatching List
 */
export class ContinueWatchingListData extends SpeakeasyBase {
  /**
   * Object where keys are itemIds for the items in the list and values are objects
   *
   * @remarks
   * containing additional items (either episode/season/show) that were requested
   * in the "include" query option.
   *
   * For example if you request the ContinueWatching list with "season" items in
   * the list, you can specify `include=episode` and then the specific next episode
   * will be returned in this object.
   *
   */
  @SpeakeasyMetadata({ elemType: ContinueWatchingListDataExpansion })
  @Expose({ name: "itemInclusions" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ContinueWatchingListDataExpansion> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ContinueWatchingListDataExpansion);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  itemInclusions?: Record<string, ContinueWatchingListDataExpansion>;
}
