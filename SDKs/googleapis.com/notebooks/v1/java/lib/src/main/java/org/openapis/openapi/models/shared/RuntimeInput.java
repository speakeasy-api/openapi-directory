/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RuntimeInput - The definition of a Runtime for a managed notebook instance.
 */
public class RuntimeInput {
    /**
     * Specifies the login configuration for Runtime
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessConfig")
    public RuntimeAccessConfigInput accessConfig;
    public RuntimeInput withAccessConfig(RuntimeAccessConfigInput accessConfig) {
        this.accessConfig = accessConfig;
        return this;
    }
    
    /**
     * Optional. The labels to associate with this Managed Notebook or Runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public RuntimeInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softwareConfig")
    public RuntimeSoftwareConfigInput softwareConfig;
    public RuntimeInput withSoftwareConfig(RuntimeSoftwareConfigInput softwareConfig) {
        this.softwareConfig = softwareConfig;
        return this;
    }
    
    /**
     * Runtime using Virtual Machine for computing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtualMachine")
    public VirtualMachineInput virtualMachine;
    public RuntimeInput withVirtualMachine(VirtualMachineInput virtualMachine) {
        this.virtualMachine = virtualMachine;
        return this;
    }
    
}
