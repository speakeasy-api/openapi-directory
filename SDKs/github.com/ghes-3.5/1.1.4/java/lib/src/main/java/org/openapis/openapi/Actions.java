/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Endpoints to manage GitHub Actions using the REST API.
 */
public class Actions {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Actions(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Add custom labels to a self-hosted runner for an organization
     * Add custom labels to a self-hosted runner configured in an organization.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsAddCustomLabelsToSelfHostedRunnerForOrgResponse actionsAddCustomLabelsToSelfHostedRunnerForOrg(org.openapis.openapi.models.operations.ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runners/{runner_id}/labels", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsAddCustomLabelsToSelfHostedRunnerForOrgResponse res = new org.openapis.openapi.models.operations.ActionsAddCustomLabelsToSelfHostedRunnerForOrgResponse(contentType, httpRes.statusCode()) {{
            actionsAddCustomLabelsToSelfHostedRunnerForOrg200ApplicationJSONObject = null;
            basicError = null;
            validationErrorSimple = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsAddCustomLabelsToSelfHostedRunnerForOrg200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsAddCustomLabelsToSelfHostedRunnerForOrg200ApplicationJSON.class);
                res.actionsAddCustomLabelsToSelfHostedRunnerForOrg200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ValidationErrorSimple out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ValidationErrorSimple.class);
                res.validationErrorSimple = out;
            }
        }

        return res;
    }

    /**
     * Add custom labels to a self-hosted runner for a repository
     * Add custom labels to a self-hosted runner configured in a repository.
     * 
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsAddCustomLabelsToSelfHostedRunnerForRepoResponse actionsAddCustomLabelsToSelfHostedRunnerForRepo(org.openapis.openapi.models.operations.ActionsAddCustomLabelsToSelfHostedRunnerForRepoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsAddCustomLabelsToSelfHostedRunnerForRepoRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsAddCustomLabelsToSelfHostedRunnerForRepoResponse res = new org.openapis.openapi.models.operations.ActionsAddCustomLabelsToSelfHostedRunnerForRepoResponse(contentType, httpRes.statusCode()) {{
            actionsAddCustomLabelsToSelfHostedRunnerForRepo200ApplicationJSONObject = null;
            basicError = null;
            validationErrorSimple = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsAddCustomLabelsToSelfHostedRunnerForRepo200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsAddCustomLabelsToSelfHostedRunnerForRepo200ApplicationJSON.class);
                res.actionsAddCustomLabelsToSelfHostedRunnerForRepo200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ValidationErrorSimple out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ValidationErrorSimple.class);
                res.validationErrorSimple = out;
            }
        }

        return res;
    }

    /**
     * Add repository access to a self-hosted runner group in an organization
     * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
     * 
     * You must authenticate using an access token with the `admin:org`
     * scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#add-repository-acess-to-a-self-hosted-runner-group-in-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse actionsAddRepoAccessToSelfHostedRunnerGroupInOrg(org.openapis.openapi.models.operations.ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgRequest.class, baseUrl, "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse res = new org.openapis.openapi.models.operations.ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Add selected repository to an organization secret
     * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.5/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#add-selected-repository-to-an-organization-secret - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsAddSelectedRepoToOrgSecretResponse actionsAddSelectedRepoToOrgSecret(org.openapis.openapi.models.operations.ActionsAddSelectedRepoToOrgSecretRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsAddSelectedRepoToOrgSecretRequest.class, baseUrl, "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsAddSelectedRepoToOrgSecretResponse res = new org.openapis.openapi.models.operations.ActionsAddSelectedRepoToOrgSecretResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 409) {
        }

        return res;
    }

    /**
     * Add a self-hosted runner to a group for an organization
     * Adds a self-hosted runner to a runner group configured in an organization.
     * 
     * You must authenticate using an access token with the `admin:org`
     * scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsAddSelfHostedRunnerToGroupForOrgResponse actionsAddSelfHostedRunnerToGroupForOrg(org.openapis.openapi.models.operations.ActionsAddSelfHostedRunnerToGroupForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsAddSelfHostedRunnerToGroupForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsAddSelfHostedRunnerToGroupForOrgResponse res = new org.openapis.openapi.models.operations.ActionsAddSelfHostedRunnerToGroupForOrgResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Cancel a workflow run
     * Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#cancel-a-workflow-run - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsCancelWorkflowRunResponse actionsCancelWorkflowRun(org.openapis.openapi.models.operations.ActionsCancelWorkflowRunRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsCancelWorkflowRunRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsCancelWorkflowRunResponse res = new org.openapis.openapi.models.operations.ActionsCancelWorkflowRunResponse(contentType, httpRes.statusCode()) {{
            emptyObject = null;
            basicError = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 202) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.emptyObject = out;
            }
        }
        else if (httpRes.statusCode() == 409) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }

        return res;
    }

    /**
     * Create or update an environment secret
     * Creates or updates an environment secret with an encrypted value. Encrypt your secret using
     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
     * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
     * this endpoint.
     * 
     * #### Example encrypting a secret using Node.js
     * 
     * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
     * 
     * ```
     * const sodium = require('libsodium-wrappers')
     * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
     * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
     * 
     * //Check if libsodium is ready and then proceed.
     * sodium.ready.then(() =&gt; {
     *   // Convert Secret &amp; Base64 key to Uint8Array.
     *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
     *   let binsec = sodium.from_string(secret)
     * 
     *   //Encrypt the secret using LibSodium
     *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
     * 
     *   // Convert encrypted Uint8Array to Base64
     *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
     * 
     *   console.log(output)
     * });
     * ```
     * 
     * #### Example encrypting a secret using Python
     * 
     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
     * 
     * ```
     * from base64 import b64encode
     * from nacl import encoding, public
     * 
     * def encrypt(public_key: str, secret_value: str) -&gt; str:
     *   """Encrypt a Unicode string using the public key."""
     *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
     *   sealed_box = public.SealedBox(public_key)
     *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
     *   return b64encode(encrypted).decode("utf-8")
     * ```
     * 
     * #### Example encrypting a secret using C#
     * 
     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
     * 
     * ```
     * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
     * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
     * 
     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
     * 
     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
     * ```
     * 
     * #### Example encrypting a secret using Ruby
     * 
     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
     * 
     * ```ruby
     * require "rbnacl"
     * require "base64"
     * 
     * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
     * public_key = RbNaCl::PublicKey.new(key)
     * 
     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
     * encrypted_secret = box.encrypt("my_secret")
     * 
     * # Print the base64 encoded secret
     * puts Base64.strict_encode64(encrypted_secret)
     * ```
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#create-or-update-an-environment-secret - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsCreateOrUpdateEnvironmentSecretResponse actionsCreateOrUpdateEnvironmentSecret(org.openapis.openapi.models.operations.ActionsCreateOrUpdateEnvironmentSecretRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsCreateOrUpdateEnvironmentSecretRequest.class, baseUrl, "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsCreateOrUpdateEnvironmentSecretResponse res = new org.openapis.openapi.models.operations.ActionsCreateOrUpdateEnvironmentSecretResponse(contentType, httpRes.statusCode()) {{
            emptyObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.emptyObject = out;
            }
        }
        else if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Create or update an organization secret
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
     * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
     * use this endpoint.
     * 
     * #### Example encrypting a secret using Node.js
     * 
     * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
     * 
     * ```
     * const sodium = require('libsodium-wrappers')
     * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
     * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
     * 
     * //Check if libsodium is ready and then proceed.
     * sodium.ready.then(() =&gt; {
     *   // Convert Secret &amp; Base64 key to Uint8Array.
     *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
     *   let binsec = sodium.from_string(secret)
     * 
     *   //Encrypt the secret using LibSodium
     *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
     * 
     *   // Convert encrypted Uint8Array to Base64
     *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
     * 
     *   console.log(output)
     * });
     * ```
     * 
     * #### Example encrypting a secret using Python
     * 
     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
     * 
     * ```
     * from base64 import b64encode
     * from nacl import encoding, public
     * 
     * def encrypt(public_key: str, secret_value: str) -&gt; str:
     *   """Encrypt a Unicode string using the public key."""
     *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
     *   sealed_box = public.SealedBox(public_key)
     *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
     *   return b64encode(encrypted).decode("utf-8")
     * ```
     * 
     * #### Example encrypting a secret using C#
     * 
     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
     * 
     * ```
     * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
     * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
     * 
     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
     * 
     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
     * ```
     * 
     * #### Example encrypting a secret using Ruby
     * 
     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
     * 
     * ```ruby
     * require "rbnacl"
     * require "base64"
     * 
     * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
     * public_key = RbNaCl::PublicKey.new(key)
     * 
     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
     * encrypted_secret = box.encrypt("my_secret")
     * 
     * # Print the base64 encoded secret
     * puts Base64.strict_encode64(encrypted_secret)
     * ```
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#create-or-update-an-organization-secret - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsCreateOrUpdateOrgSecretResponse actionsCreateOrUpdateOrgSecret(org.openapis.openapi.models.operations.ActionsCreateOrUpdateOrgSecretRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsCreateOrUpdateOrgSecretRequest.class, baseUrl, "/orgs/{org}/actions/secrets/{secret_name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsCreateOrUpdateOrgSecretResponse res = new org.openapis.openapi.models.operations.ActionsCreateOrUpdateOrgSecretResponse(contentType, httpRes.statusCode()) {{
            emptyObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.emptyObject = out;
            }
        }
        else if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Create or update a repository secret
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
     * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
     * this endpoint.
     * 
     * #### Example encrypting a secret using Node.js
     * 
     * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
     * 
     * ```
     * const sodium = require('libsodium-wrappers')
     * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
     * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
     * 
     * //Check if libsodium is ready and then proceed.
     * sodium.ready.then(() =&gt; {
     *   // Convert Secret &amp; Base64 key to Uint8Array.
     *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
     *   let binsec = sodium.from_string(secret)
     * 
     *   //Encrypt the secret using LibSodium
     *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
     * 
     *   // Convert encrypted Uint8Array to Base64
     *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
     * 
     *   console.log(output)
     * });
     * ```
     * 
     * #### Example encrypting a secret using Python
     * 
     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
     * 
     * ```
     * from base64 import b64encode
     * from nacl import encoding, public
     * 
     * def encrypt(public_key: str, secret_value: str) -&gt; str:
     *   """Encrypt a Unicode string using the public key."""
     *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
     *   sealed_box = public.SealedBox(public_key)
     *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
     *   return b64encode(encrypted).decode("utf-8")
     * ```
     * 
     * #### Example encrypting a secret using C#
     * 
     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
     * 
     * ```
     * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
     * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
     * 
     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
     * 
     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
     * ```
     * 
     * #### Example encrypting a secret using Ruby
     * 
     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
     * 
     * ```ruby
     * require "rbnacl"
     * require "base64"
     * 
     * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
     * public_key = RbNaCl::PublicKey.new(key)
     * 
     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
     * encrypted_secret = box.encrypt("my_secret")
     * 
     * # Print the base64 encoded secret
     * puts Base64.strict_encode64(encrypted_secret)
     * ```
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#create-or-update-a-repository-secret - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsCreateOrUpdateRepoSecretResponse actionsCreateOrUpdateRepoSecret(org.openapis.openapi.models.operations.ActionsCreateOrUpdateRepoSecretRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsCreateOrUpdateRepoSecretRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/secrets/{secret_name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsCreateOrUpdateRepoSecretResponse res = new org.openapis.openapi.models.operations.ActionsCreateOrUpdateRepoSecretResponse(contentType, httpRes.statusCode()) {{
            emptyObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.emptyObject = out;
            }
        }
        else if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Create a registration token for an organization
     * Returns a token that you can pass to the `config` script. The token expires after one hour.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * 
     * #### Example using registration token
     * 
     * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
     * 
     * ```
     * ./config.sh --url https://github.com/octo-org --token TOKEN
     * ```
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#create-a-registration-token-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsCreateRegistrationTokenForOrgResponse actionsCreateRegistrationTokenForOrg(org.openapis.openapi.models.operations.ActionsCreateRegistrationTokenForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsCreateRegistrationTokenForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runners/registration-token", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsCreateRegistrationTokenForOrgResponse res = new org.openapis.openapi.models.operations.ActionsCreateRegistrationTokenForOrgResponse(contentType, httpRes.statusCode()) {{
            authenticationToken = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AuthenticationToken out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AuthenticationToken.class);
                res.authenticationToken = out;
            }
        }

        return res;
    }

    /**
     * Create a registration token for a repository
     * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
     * using an access token with the `repo` scope to use this endpoint.
     * 
     * #### Example using registration token
     *  
     * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
     * 
     * ```
     * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
     * ```
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#create-a-registration-token-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsCreateRegistrationTokenForRepoResponse actionsCreateRegistrationTokenForRepo(org.openapis.openapi.models.operations.ActionsCreateRegistrationTokenForRepoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsCreateRegistrationTokenForRepoRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runners/registration-token", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsCreateRegistrationTokenForRepoResponse res = new org.openapis.openapi.models.operations.ActionsCreateRegistrationTokenForRepoResponse(contentType, httpRes.statusCode()) {{
            authenticationToken = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AuthenticationToken out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AuthenticationToken.class);
                res.authenticationToken = out;
            }
        }

        return res;
    }

    /**
     * Create a remove token for an organization
     * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * 
     * #### Example using remove token
     * 
     * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
     * endpoint.
     * 
     * ```
     * ./config.sh remove --token TOKEN
     * ```
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#create-a-remove-token-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsCreateRemoveTokenForOrgResponse actionsCreateRemoveTokenForOrg(org.openapis.openapi.models.operations.ActionsCreateRemoveTokenForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsCreateRemoveTokenForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runners/remove-token", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsCreateRemoveTokenForOrgResponse res = new org.openapis.openapi.models.operations.ActionsCreateRemoveTokenForOrgResponse(contentType, httpRes.statusCode()) {{
            authenticationToken = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AuthenticationToken out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AuthenticationToken.class);
                res.authenticationToken = out;
            }
        }

        return res;
    }

    /**
     * Create a remove token for a repository
     * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
     * You must authenticate using an access token with the `repo` scope to use this endpoint.
     * 
     * #### Example using remove token
     *  
     * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
     * 
     * ```
     * ./config.sh remove --token TOKEN
     * ```
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#create-a-remove-token-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsCreateRemoveTokenForRepoResponse actionsCreateRemoveTokenForRepo(org.openapis.openapi.models.operations.ActionsCreateRemoveTokenForRepoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsCreateRemoveTokenForRepoRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runners/remove-token", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsCreateRemoveTokenForRepoResponse res = new org.openapis.openapi.models.operations.ActionsCreateRemoveTokenForRepoResponse(contentType, httpRes.statusCode()) {{
            authenticationToken = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AuthenticationToken out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AuthenticationToken.class);
                res.authenticationToken = out;
            }
        }

        return res;
    }

    /**
     * Create a self-hosted runner group for an organization
     * Creates a new self-hosted runner group for an organization.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#create-a-self-hosted-runner-group-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsCreateSelfHostedRunnerGroupForOrgResponse actionsCreateSelfHostedRunnerGroupForOrg(org.openapis.openapi.models.operations.ActionsCreateSelfHostedRunnerGroupForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsCreateSelfHostedRunnerGroupForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runner-groups", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsCreateSelfHostedRunnerGroupForOrgResponse res = new org.openapis.openapi.models.operations.ActionsCreateSelfHostedRunnerGroupForOrgResponse(contentType, httpRes.statusCode()) {{
            runnerGroupsOrg = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RunnerGroupsOrg out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RunnerGroupsOrg.class);
                res.runnerGroupsOrg = out;
            }
        }

        return res;
    }

    /**
     * Create a workflow dispatch event
     * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
     * 
     * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
     * 
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/enterprise-server@3.5/articles/creating-a-personal-access-token-for-the-command-line)."
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#create-a-workflow-dispatch-event - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsCreateWorkflowDispatchResponse actionsCreateWorkflowDispatch(org.openapis.openapi.models.operations.ActionsCreateWorkflowDispatchRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsCreateWorkflowDispatchRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsCreateWorkflowDispatchResponse res = new org.openapis.openapi.models.operations.ActionsCreateWorkflowDispatchResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete an artifact
     * Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#delete-an-artifact - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsDeleteArtifactResponse actionsDeleteArtifact(org.openapis.openapi.models.operations.ActionsDeleteArtifactRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsDeleteArtifactRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsDeleteArtifactResponse res = new org.openapis.openapi.models.operations.ActionsDeleteArtifactResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete an environment secret
     * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#delete-an-environment-secret - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsDeleteEnvironmentSecretResponse actionsDeleteEnvironmentSecret(org.openapis.openapi.models.operations.ActionsDeleteEnvironmentSecretRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsDeleteEnvironmentSecretRequest.class, baseUrl, "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsDeleteEnvironmentSecretResponse res = new org.openapis.openapi.models.operations.ActionsDeleteEnvironmentSecretResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete an organization secret
     * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#delete-an-organization-secret - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsDeleteOrgSecretResponse actionsDeleteOrgSecret(org.openapis.openapi.models.operations.ActionsDeleteOrgSecretRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsDeleteOrgSecretRequest.class, baseUrl, "/orgs/{org}/actions/secrets/{secret_name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsDeleteOrgSecretResponse res = new org.openapis.openapi.models.operations.ActionsDeleteOrgSecretResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a repository secret
     * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#delete-a-repository-secret - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsDeleteRepoSecretResponse actionsDeleteRepoSecret(org.openapis.openapi.models.operations.ActionsDeleteRepoSecretRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsDeleteRepoSecretRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/secrets/{secret_name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsDeleteRepoSecretResponse res = new org.openapis.openapi.models.operations.ActionsDeleteRepoSecretResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a self-hosted runner from an organization
     * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsDeleteSelfHostedRunnerFromOrgResponse actionsDeleteSelfHostedRunnerFromOrg(org.openapis.openapi.models.operations.ActionsDeleteSelfHostedRunnerFromOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsDeleteSelfHostedRunnerFromOrgRequest.class, baseUrl, "/orgs/{org}/actions/runners/{runner_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsDeleteSelfHostedRunnerFromOrgResponse res = new org.openapis.openapi.models.operations.ActionsDeleteSelfHostedRunnerFromOrgResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a self-hosted runner from a repository
     * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
     * 
     * You must authenticate using an access token with the `repo`
     * scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsDeleteSelfHostedRunnerFromRepoResponse actionsDeleteSelfHostedRunnerFromRepo(org.openapis.openapi.models.operations.ActionsDeleteSelfHostedRunnerFromRepoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsDeleteSelfHostedRunnerFromRepoRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runners/{runner_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsDeleteSelfHostedRunnerFromRepoResponse res = new org.openapis.openapi.models.operations.ActionsDeleteSelfHostedRunnerFromRepoResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a self-hosted runner group from an organization
     * Deletes a self-hosted runner group for an organization.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsDeleteSelfHostedRunnerGroupFromOrgResponse actionsDeleteSelfHostedRunnerGroupFromOrg(org.openapis.openapi.models.operations.ActionsDeleteSelfHostedRunnerGroupFromOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsDeleteSelfHostedRunnerGroupFromOrgRequest.class, baseUrl, "/orgs/{org}/actions/runner-groups/{runner_group_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsDeleteSelfHostedRunnerGroupFromOrgResponse res = new org.openapis.openapi.models.operations.ActionsDeleteSelfHostedRunnerGroupFromOrgResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a workflow run
     * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
     * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
     * this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#delete-a-workflow-run - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsDeleteWorkflowRunResponse actionsDeleteWorkflowRun(org.openapis.openapi.models.operations.ActionsDeleteWorkflowRunRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsDeleteWorkflowRunRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runs/{run_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsDeleteWorkflowRunResponse res = new org.openapis.openapi.models.operations.ActionsDeleteWorkflowRunResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete workflow run logs
     * Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#delete-workflow-run-logs - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsDeleteWorkflowRunLogsResponse actionsDeleteWorkflowRunLogs(org.openapis.openapi.models.operations.ActionsDeleteWorkflowRunLogsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsDeleteWorkflowRunLogsRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runs/{run_id}/logs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsDeleteWorkflowRunLogsResponse res = new org.openapis.openapi.models.operations.ActionsDeleteWorkflowRunLogsResponse(contentType, httpRes.statusCode()) {{
            basicError = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }
        else if (httpRes.statusCode() == 403 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }

        return res;
    }

    /**
     * Disable a selected repository for GitHub Actions in an organization
     * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsDisableSelectedRepositoryGithubActionsOrganizationResponse actionsDisableSelectedRepositoryGithubActionsOrganization(org.openapis.openapi.models.operations.ActionsDisableSelectedRepositoryGithubActionsOrganizationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsDisableSelectedRepositoryGithubActionsOrganizationRequest.class, baseUrl, "/orgs/{org}/actions/permissions/repositories/{repository_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsDisableSelectedRepositoryGithubActionsOrganizationResponse res = new org.openapis.openapi.models.operations.ActionsDisableSelectedRepositoryGithubActionsOrganizationResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Disable a workflow
     * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
     * 
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#disable-a-workflow - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsDisableWorkflowResponse actionsDisableWorkflow(org.openapis.openapi.models.operations.ActionsDisableWorkflowRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsDisableWorkflowRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsDisableWorkflowResponse res = new org.openapis.openapi.models.operations.ActionsDisableWorkflowResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Download an artifact
     * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
     * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
     * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
     * GitHub Apps must have the `actions:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#download-an-artifact - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsDownloadArtifactResponse actionsDownloadArtifact(org.openapis.openapi.models.operations.ActionsDownloadArtifactRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsDownloadArtifactRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsDownloadArtifactResponse res = new org.openapis.openapi.models.operations.ActionsDownloadArtifactResponse(contentType, httpRes.statusCode()) {{
            basicError = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 302) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
        }
        else if (httpRes.statusCode() == 410) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }

        return res;
    }

    /**
     * Download job logs for a workflow run
     * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
     * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
     * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
     * have the `actions:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#download-job-logs-for-a-workflow-run - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsDownloadJobLogsForWorkflowRunResponse actionsDownloadJobLogsForWorkflowRun(org.openapis.openapi.models.operations.ActionsDownloadJobLogsForWorkflowRunRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsDownloadJobLogsForWorkflowRunRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsDownloadJobLogsForWorkflowRunResponse res = new org.openapis.openapi.models.operations.ActionsDownloadJobLogsForWorkflowRunResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 302) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
        }

        return res;
    }

    /**
     * Download workflow run attempt logs
     * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
     * 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to
     * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
     * GitHub Apps must have the `actions:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#download-workflow-run-attempt-logs - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsDownloadWorkflowRunAttemptLogsResponse actionsDownloadWorkflowRunAttemptLogs(org.openapis.openapi.models.operations.ActionsDownloadWorkflowRunAttemptLogsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsDownloadWorkflowRunAttemptLogsRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsDownloadWorkflowRunAttemptLogsResponse res = new org.openapis.openapi.models.operations.ActionsDownloadWorkflowRunAttemptLogsResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 302) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
        }

        return res;
    }

    /**
     * Download workflow run logs
     * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
     * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
     * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
     * the `actions:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#download-workflow-run-logs - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsDownloadWorkflowRunLogsResponse actionsDownloadWorkflowRunLogs(org.openapis.openapi.models.operations.ActionsDownloadWorkflowRunLogsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsDownloadWorkflowRunLogsRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runs/{run_id}/logs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsDownloadWorkflowRunLogsResponse res = new org.openapis.openapi.models.operations.ActionsDownloadWorkflowRunLogsResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 302) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
        }

        return res;
    }

    /**
     * Enable a selected repository for GitHub Actions in an organization
     * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsEnableSelectedRepositoryGithubActionsOrganizationResponse actionsEnableSelectedRepositoryGithubActionsOrganization(org.openapis.openapi.models.operations.ActionsEnableSelectedRepositoryGithubActionsOrganizationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsEnableSelectedRepositoryGithubActionsOrganizationRequest.class, baseUrl, "/orgs/{org}/actions/permissions/repositories/{repository_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsEnableSelectedRepositoryGithubActionsOrganizationResponse res = new org.openapis.openapi.models.operations.ActionsEnableSelectedRepositoryGithubActionsOrganizationResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Enable a workflow
     * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
     * 
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#enable-a-workflow - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsEnableWorkflowResponse actionsEnableWorkflow(org.openapis.openapi.models.operations.ActionsEnableWorkflowRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsEnableWorkflowRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsEnableWorkflowResponse res = new org.openapis.openapi.models.operations.ActionsEnableWorkflowResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Get GitHub Actions cache usage for a repository
     * Gets GitHub Actions cache usage for a repository.
     * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
     * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-github-actions-cache-usage-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageResponse actionsGetActionsCacheUsage(org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/cache/usage", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageResponse res = new org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageResponse(contentType, httpRes.statusCode()) {{
            actionsCacheUsageByRepository = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActionsCacheUsageByRepository out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActionsCacheUsageByRepository.class);
                res.actionsCacheUsageByRepository = out;
            }
        }

        return res;
    }

    /**
     * List repositories with GitHub Actions cache usage for an organization
     * Lists repositories and their GitHub Actions cache usage for an organization.
     * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
     * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-repositories-with-github-actions-cache-usage-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageByRepoForOrgResponse actionsGetActionsCacheUsageByRepoForOrg(org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageByRepoForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageByRepoForOrgRequest.class, baseUrl, "/orgs/{org}/actions/cache/usage-by-repository", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageByRepoForOrgRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageByRepoForOrgResponse res = new org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageByRepoForOrgResponse(contentType, httpRes.statusCode()) {{
            actionsGetActionsCacheUsageByRepoForOrg200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageByRepoForOrg200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageByRepoForOrg200ApplicationJSON.class);
                res.actionsGetActionsCacheUsageByRepoForOrg200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get GitHub Actions cache usage for an enterprise
     * Gets the total GitHub Actions cache usage for an enterprise.
     * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-github-actions-cache-usage-for-an-enterprise - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageForEnterpriseResponse actionsGetActionsCacheUsageForEnterprise(org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageForEnterpriseRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageForEnterpriseRequest.class, baseUrl, "/enterprises/{enterprise}/actions/cache/usage", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageForEnterpriseResponse res = new org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageForEnterpriseResponse(contentType, httpRes.statusCode()) {{
            actionsCacheUsageOrgEnterprise = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActionsCacheUsageOrgEnterprise out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActionsCacheUsageOrgEnterprise.class);
                res.actionsCacheUsageOrgEnterprise = out;
            }
        }

        return res;
    }

    /**
     * Get GitHub Actions cache usage for an organization
     * Gets the total GitHub Actions cache usage for an organization.
     * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
     * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-github-actions-cache-usage-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageForOrgResponse actionsGetActionsCacheUsageForOrg(org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageForOrgRequest.class, baseUrl, "/orgs/{org}/actions/cache/usage", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageForOrgResponse res = new org.openapis.openapi.models.operations.ActionsGetActionsCacheUsageForOrgResponse(contentType, httpRes.statusCode()) {{
            actionsCacheUsageOrgEnterprise = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActionsCacheUsageOrgEnterprise out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActionsCacheUsageOrgEnterprise.class);
                res.actionsCacheUsageOrgEnterprise = out;
            }
        }

        return res;
    }

    /**
     * Get GitHub Actions cache usage policy for a repository
     * Gets GitHub Actions cache usage policy for a repository.
     * You must authenticate using an access token with the `repo` scope to use this endpoint.
     * GitHub Apps must have the `actions:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-github-actions-cache-usage-policy-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetActionsCacheUsagePolicyResponse actionsGetActionsCacheUsagePolicy(org.openapis.openapi.models.operations.ActionsGetActionsCacheUsagePolicyRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetActionsCacheUsagePolicyRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/cache/usage-policy", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetActionsCacheUsagePolicyResponse res = new org.openapis.openapi.models.operations.ActionsGetActionsCacheUsagePolicyResponse(contentType, httpRes.statusCode()) {{
            actionsCacheUsagePolicyForRepository = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActionsCacheUsagePolicyForRepository out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActionsCacheUsagePolicyForRepository.class);
                res.actionsCacheUsagePolicyForRepository = out;
            }
        }

        return res;
    }

    /**
     * Get GitHub Actions cache usage policy for an enterprise
     * Gets the GitHub Actions cache usage policy for an enterprise.
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-github-actions-cache-usage-policy-for-an-enterprise - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetActionsCacheUsagePolicyForEnterpriseResponse actionsGetActionsCacheUsagePolicyForEnterprise(org.openapis.openapi.models.operations.ActionsGetActionsCacheUsagePolicyForEnterpriseRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetActionsCacheUsagePolicyForEnterpriseRequest.class, baseUrl, "/enterprises/{enterprise}/actions/cache/usage-policy", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetActionsCacheUsagePolicyForEnterpriseResponse res = new org.openapis.openapi.models.operations.ActionsGetActionsCacheUsagePolicyForEnterpriseResponse(contentType, httpRes.statusCode()) {{
            actionsCacheUsagePolicyEnterprise = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActionsCacheUsagePolicyEnterprise out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActionsCacheUsagePolicyEnterprise.class);
                res.actionsCacheUsagePolicyEnterprise = out;
            }
        }

        return res;
    }

    /**
     * Get allowed actions for an organization
     * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-allowed-actions-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetAllowedActionsOrganizationResponse actionsGetAllowedActionsOrganization(org.openapis.openapi.models.operations.ActionsGetAllowedActionsOrganizationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetAllowedActionsOrganizationRequest.class, baseUrl, "/orgs/{org}/actions/permissions/selected-actions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetAllowedActionsOrganizationResponse res = new org.openapis.openapi.models.operations.ActionsGetAllowedActionsOrganizationResponse(contentType, httpRes.statusCode()) {{
            selectedActions = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SelectedActions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SelectedActions.class);
                res.selectedActions = out;
            }
        }

        return res;
    }

    /**
     * Get allowed actions for a repository
     * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
     * 
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-allowed-actions-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetAllowedActionsRepositoryResponse actionsGetAllowedActionsRepository(org.openapis.openapi.models.operations.ActionsGetAllowedActionsRepositoryRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetAllowedActionsRepositoryRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/permissions/selected-actions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetAllowedActionsRepositoryResponse res = new org.openapis.openapi.models.operations.ActionsGetAllowedActionsRepositoryResponse(contentType, httpRes.statusCode()) {{
            selectedActions = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SelectedActions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SelectedActions.class);
                res.selectedActions = out;
            }
        }

        return res;
    }

    /**
     * Get an artifact
     * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-an-artifact - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetArtifactResponse actionsGetArtifact(org.openapis.openapi.models.operations.ActionsGetArtifactRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetArtifactRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetArtifactResponse res = new org.openapis.openapi.models.operations.ActionsGetArtifactResponse(contentType, httpRes.statusCode()) {{
            artifact = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Artifact out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Artifact.class);
                res.artifact = out;
            }
        }

        return res;
    }

    /**
     * Get an environment public key
     * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-an-environment-public-key - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetEnvironmentPublicKeyResponse actionsGetEnvironmentPublicKey(org.openapis.openapi.models.operations.ActionsGetEnvironmentPublicKeyRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetEnvironmentPublicKeyRequest.class, baseUrl, "/repositories/{repository_id}/environments/{environment_name}/secrets/public-key", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetEnvironmentPublicKeyResponse res = new org.openapis.openapi.models.operations.ActionsGetEnvironmentPublicKeyResponse(contentType, httpRes.statusCode()) {{
            actionsPublicKey = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActionsPublicKey out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActionsPublicKey.class);
                res.actionsPublicKey = out;
            }
        }

        return res;
    }

    /**
     * Get an environment secret
     * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-an-environment-secret - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetEnvironmentSecretResponse actionsGetEnvironmentSecret(org.openapis.openapi.models.operations.ActionsGetEnvironmentSecretRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetEnvironmentSecretRequest.class, baseUrl, "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetEnvironmentSecretResponse res = new org.openapis.openapi.models.operations.ActionsGetEnvironmentSecretResponse(contentType, httpRes.statusCode()) {{
            actionsSecret = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActionsSecret out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActionsSecret.class);
                res.actionsSecret = out;
            }
        }

        return res;
    }

    /**
     * Get default workflow permissions for an organization
     * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
     * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
     * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/enterprise-server@3.5/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-default-workflow-permissions - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponse actionsGetGithubActionsDefaultWorkflowPermissionsOrganization(org.openapis.openapi.models.operations.ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationRequest.class, baseUrl, "/orgs/{org}/actions/permissions/workflow", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponse res = new org.openapis.openapi.models.operations.ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponse(contentType, httpRes.statusCode()) {{
            actionsGetDefaultWorkflowPermissions = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActionsGetDefaultWorkflowPermissions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActionsGetDefaultWorkflowPermissions.class);
                res.actionsGetDefaultWorkflowPermissions = out;
            }
        }

        return res;
    }

    /**
     * Get GitHub Actions permissions for an organization
     * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-github-actions-permissions-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetGithubActionsPermissionsOrganizationResponse actionsGetGithubActionsPermissionsOrganization(org.openapis.openapi.models.operations.ActionsGetGithubActionsPermissionsOrganizationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetGithubActionsPermissionsOrganizationRequest.class, baseUrl, "/orgs/{org}/actions/permissions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetGithubActionsPermissionsOrganizationResponse res = new org.openapis.openapi.models.operations.ActionsGetGithubActionsPermissionsOrganizationResponse(contentType, httpRes.statusCode()) {{
            actionsOrganizationPermissions = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActionsOrganizationPermissions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActionsOrganizationPermissions.class);
                res.actionsOrganizationPermissions = out;
            }
        }

        return res;
    }

    /**
     * Get GitHub Actions permissions for a repository
     * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.
     * 
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-github-actions-permissions-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetGithubActionsPermissionsRepositoryResponse actionsGetGithubActionsPermissionsRepository(org.openapis.openapi.models.operations.ActionsGetGithubActionsPermissionsRepositoryRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetGithubActionsPermissionsRepositoryRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/permissions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetGithubActionsPermissionsRepositoryResponse res = new org.openapis.openapi.models.operations.ActionsGetGithubActionsPermissionsRepositoryResponse(contentType, httpRes.statusCode()) {{
            actionsRepositoryPermissions = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActionsRepositoryPermissions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActionsRepositoryPermissions.class);
                res.actionsRepositoryPermissions = out;
            }
        }

        return res;
    }

    /**
     * Get a job for a workflow run
     * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-a-job-for-a-workflow-run - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetJobForWorkflowRunResponse actionsGetJobForWorkflowRun(org.openapis.openapi.models.operations.ActionsGetJobForWorkflowRunRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetJobForWorkflowRunRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/jobs/{job_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetJobForWorkflowRunResponse res = new org.openapis.openapi.models.operations.ActionsGetJobForWorkflowRunResponse(contentType, httpRes.statusCode()) {{
            job = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Job out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Job.class);
                res.job = out;
            }
        }

        return res;
    }

    /**
     * Get an organization public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-an-organization-public-key - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetOrgPublicKeyResponse actionsGetOrgPublicKey(org.openapis.openapi.models.operations.ActionsGetOrgPublicKeyRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetOrgPublicKeyRequest.class, baseUrl, "/orgs/{org}/actions/secrets/public-key", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetOrgPublicKeyResponse res = new org.openapis.openapi.models.operations.ActionsGetOrgPublicKeyResponse(contentType, httpRes.statusCode()) {{
            actionsPublicKey = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActionsPublicKey out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActionsPublicKey.class);
                res.actionsPublicKey = out;
            }
        }

        return res;
    }

    /**
     * Get an organization secret
     * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-an-organization-secret - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetOrgSecretResponse actionsGetOrgSecret(org.openapis.openapi.models.operations.ActionsGetOrgSecretRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetOrgSecretRequest.class, baseUrl, "/orgs/{org}/actions/secrets/{secret_name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetOrgSecretResponse res = new org.openapis.openapi.models.operations.ActionsGetOrgSecretResponse(contentType, httpRes.statusCode()) {{
            organizationActionsSecret = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.OrganizationActionsSecret out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.OrganizationActionsSecret.class);
                res.organizationActionsSecret = out;
            }
        }

        return res;
    }

    /**
     * Get pending deployments for a workflow run
     * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
     * 
     * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-pending-deployments-for-a-workflow-run - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetPendingDeploymentsForRunResponse actionsGetPendingDeploymentsForRun(org.openapis.openapi.models.operations.ActionsGetPendingDeploymentsForRunRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetPendingDeploymentsForRunRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetPendingDeploymentsForRunResponse res = new org.openapis.openapi.models.operations.ActionsGetPendingDeploymentsForRunResponse(contentType, httpRes.statusCode()) {{
            pendingDeployments = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PendingDeployment[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PendingDeployment[].class);
                res.pendingDeployments = out;
            }
        }

        return res;
    }

    /**
     * Get a repository public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-a-repository-public-key - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetRepoPublicKeyResponse actionsGetRepoPublicKey(org.openapis.openapi.models.operations.ActionsGetRepoPublicKeyRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetRepoPublicKeyRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/secrets/public-key", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetRepoPublicKeyResponse res = new org.openapis.openapi.models.operations.ActionsGetRepoPublicKeyResponse(contentType, httpRes.statusCode()) {{
            actionsPublicKey = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActionsPublicKey out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActionsPublicKey.class);
                res.actionsPublicKey = out;
            }
        }

        return res;
    }

    /**
     * Get a repository secret
     * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-a-repository-secret - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetRepoSecretResponse actionsGetRepoSecret(org.openapis.openapi.models.operations.ActionsGetRepoSecretRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetRepoSecretRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/secrets/{secret_name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetRepoSecretResponse res = new org.openapis.openapi.models.operations.ActionsGetRepoSecretResponse(contentType, httpRes.statusCode()) {{
            actionsSecret = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActionsSecret out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActionsSecret.class);
                res.actionsSecret = out;
            }
        }

        return res;
    }

    /**
     * Get the review history for a workflow run
     * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-the-review-history-for-a-workflow-run - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetReviewsForRunResponse actionsGetReviewsForRun(org.openapis.openapi.models.operations.ActionsGetReviewsForRunRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetReviewsForRunRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetReviewsForRunResponse res = new org.openapis.openapi.models.operations.ActionsGetReviewsForRunResponse(contentType, httpRes.statusCode()) {{
            environmentApprovals = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EnvironmentApprovals[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EnvironmentApprovals[].class);
                res.environmentApprovals = out;
            }
        }

        return res;
    }

    /**
     * Get a self-hosted runner for an organization
     * Gets a specific self-hosted runner configured in an organization.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-a-self-hosted-runner-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetSelfHostedRunnerForOrgResponse actionsGetSelfHostedRunnerForOrg(org.openapis.openapi.models.operations.ActionsGetSelfHostedRunnerForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetSelfHostedRunnerForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runners/{runner_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetSelfHostedRunnerForOrgResponse res = new org.openapis.openapi.models.operations.ActionsGetSelfHostedRunnerForOrgResponse(contentType, httpRes.statusCode()) {{
            runner = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Runner out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Runner.class);
                res.runner = out;
            }
        }

        return res;
    }

    /**
     * Get a self-hosted runner for a repository
     * Gets a specific self-hosted runner configured in a repository.
     * 
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-a-self-hosted-runner-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetSelfHostedRunnerForRepoResponse actionsGetSelfHostedRunnerForRepo(org.openapis.openapi.models.operations.ActionsGetSelfHostedRunnerForRepoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetSelfHostedRunnerForRepoRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runners/{runner_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetSelfHostedRunnerForRepoResponse res = new org.openapis.openapi.models.operations.ActionsGetSelfHostedRunnerForRepoResponse(contentType, httpRes.statusCode()) {{
            runner = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Runner out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Runner.class);
                res.runner = out;
            }
        }

        return res;
    }

    /**
     * Get a self-hosted runner group for an organization
     * Gets a specific self-hosted runner group for an organization.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-a-self-hosted-runner-group-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetSelfHostedRunnerGroupForOrgResponse actionsGetSelfHostedRunnerGroupForOrg(org.openapis.openapi.models.operations.ActionsGetSelfHostedRunnerGroupForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetSelfHostedRunnerGroupForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runner-groups/{runner_group_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetSelfHostedRunnerGroupForOrgResponse res = new org.openapis.openapi.models.operations.ActionsGetSelfHostedRunnerGroupForOrgResponse(contentType, httpRes.statusCode()) {{
            runnerGroupsOrg = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RunnerGroupsOrg out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RunnerGroupsOrg.class);
                res.runnerGroupsOrg = out;
            }
        }

        return res;
    }

    /**
     * Get a workflow
     * Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-a-workflow - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetWorkflowResponse actionsGetWorkflow(org.openapis.openapi.models.operations.ActionsGetWorkflowRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetWorkflowRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetWorkflowResponse res = new org.openapis.openapi.models.operations.ActionsGetWorkflowResponse(contentType, httpRes.statusCode()) {{
            workflow = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Workflow out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Workflow.class);
                res.workflow = out;
            }
        }

        return res;
    }

    /**
     * Get the level of access for workflows outside of the repository
     * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
     * This endpoint only applies to internal repositories.
     * For more information, see "[Managing GitHub Actions settings for a repository](https://docs.github.com/enterprise-server@3.5/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)."
     * 
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
     * repository `administration` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-workflow-access-level-to-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetWorkflowAccessToRepositoryResponse actionsGetWorkflowAccessToRepository(org.openapis.openapi.models.operations.ActionsGetWorkflowAccessToRepositoryRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetWorkflowAccessToRepositoryRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/permissions/access", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetWorkflowAccessToRepositoryResponse res = new org.openapis.openapi.models.operations.ActionsGetWorkflowAccessToRepositoryResponse(contentType, httpRes.statusCode()) {{
            actionsWorkflowAccessToRepository = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActionsWorkflowAccessToRepository out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActionsWorkflowAccessToRepository.class);
                res.actionsWorkflowAccessToRepository = out;
            }
        }

        return res;
    }

    /**
     * Get a workflow run
     * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-a-workflow-run - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetWorkflowRunResponse actionsGetWorkflowRun(org.openapis.openapi.models.operations.ActionsGetWorkflowRunRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetWorkflowRunRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runs/{run_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsGetWorkflowRunRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetWorkflowRunResponse res = new org.openapis.openapi.models.operations.ActionsGetWorkflowRunResponse(contentType, httpRes.statusCode()) {{
            workflowRun = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.WorkflowRun out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.WorkflowRun.class);
                res.workflowRun = out;
            }
        }

        return res;
    }

    /**
     * Get a workflow run attempt
     * Gets a specific workflow run attempt. Anyone with read access to the repository
     * can use this endpoint. If the repository is private you must use an access token
     * with the `repo` scope. GitHub Apps must have the `actions:read` permission to
     * use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#get-a-workflow-run-attempt - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsGetWorkflowRunAttemptResponse actionsGetWorkflowRunAttempt(org.openapis.openapi.models.operations.ActionsGetWorkflowRunAttemptRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsGetWorkflowRunAttemptRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsGetWorkflowRunAttemptRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsGetWorkflowRunAttemptResponse res = new org.openapis.openapi.models.operations.ActionsGetWorkflowRunAttemptResponse(contentType, httpRes.statusCode()) {{
            workflowRun = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.WorkflowRun out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.WorkflowRun.class);
                res.workflowRun = out;
            }
        }

        return res;
    }

    /**
     * List artifacts for a repository
     * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-artifacts-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListArtifactsForRepoResponse actionsListArtifactsForRepo(org.openapis.openapi.models.operations.ActionsListArtifactsForRepoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListArtifactsForRepoRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/artifacts", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListArtifactsForRepoRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListArtifactsForRepoResponse res = new org.openapis.openapi.models.operations.ActionsListArtifactsForRepoResponse(contentType, httpRes.statusCode()) {{
            actionsListArtifactsForRepo200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListArtifactsForRepo200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListArtifactsForRepo200ApplicationJSON.class);
                res.actionsListArtifactsForRepo200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List environment secrets
     * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-environment-secrets - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListEnvironmentSecretsResponse actionsListEnvironmentSecrets(org.openapis.openapi.models.operations.ActionsListEnvironmentSecretsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListEnvironmentSecretsRequest.class, baseUrl, "/repositories/{repository_id}/environments/{environment_name}/secrets", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListEnvironmentSecretsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListEnvironmentSecretsResponse res = new org.openapis.openapi.models.operations.ActionsListEnvironmentSecretsResponse(contentType, httpRes.statusCode()) {{
            actionsListEnvironmentSecrets200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListEnvironmentSecrets200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListEnvironmentSecrets200ApplicationJSON.class);
                res.actionsListEnvironmentSecrets200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List jobs for a workflow run
     * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.5/rest/overview/resources-in-the-rest-api#parameters).
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-jobs-for-a-workflow-run - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListJobsForWorkflowRunResponse actionsListJobsForWorkflowRun(org.openapis.openapi.models.operations.ActionsListJobsForWorkflowRunRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListJobsForWorkflowRunRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListJobsForWorkflowRunRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListJobsForWorkflowRunResponse res = new org.openapis.openapi.models.operations.ActionsListJobsForWorkflowRunResponse(contentType, httpRes.statusCode()) {{
            actionsListJobsForWorkflowRun200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListJobsForWorkflowRun200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListJobsForWorkflowRun200ApplicationJSON.class);
                res.actionsListJobsForWorkflowRun200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List jobs for a workflow run attempt
     * Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.5/rest/overview/resources-in-the-rest-api#parameters).
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-jobs-for-a-workflow-run-attempt - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListJobsForWorkflowRunAttemptResponse actionsListJobsForWorkflowRunAttempt(org.openapis.openapi.models.operations.ActionsListJobsForWorkflowRunAttemptRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListJobsForWorkflowRunAttemptRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListJobsForWorkflowRunAttemptRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListJobsForWorkflowRunAttemptResponse res = new org.openapis.openapi.models.operations.ActionsListJobsForWorkflowRunAttemptResponse(contentType, httpRes.statusCode()) {{
            actionsListJobsForWorkflowRunAttempt200ApplicationJSONObject = null;
            basicError = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListJobsForWorkflowRunAttempt200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListJobsForWorkflowRunAttempt200ApplicationJSON.class);
                res.actionsListJobsForWorkflowRunAttempt200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }

        return res;
    }

    /**
     * List labels for a self-hosted runner for an organization
     * Lists all labels for a self-hosted runner configured in an organization.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListLabelsForSelfHostedRunnerForOrgResponse actionsListLabelsForSelfHostedRunnerForOrg(org.openapis.openapi.models.operations.ActionsListLabelsForSelfHostedRunnerForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListLabelsForSelfHostedRunnerForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runners/{runner_id}/labels", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListLabelsForSelfHostedRunnerForOrgResponse res = new org.openapis.openapi.models.operations.ActionsListLabelsForSelfHostedRunnerForOrgResponse(contentType, httpRes.statusCode()) {{
            actionsListLabelsForSelfHostedRunnerForOrg200ApplicationJSONObject = null;
            basicError = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListLabelsForSelfHostedRunnerForOrg200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListLabelsForSelfHostedRunnerForOrg200ApplicationJSON.class);
                res.actionsListLabelsForSelfHostedRunnerForOrg200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }

        return res;
    }

    /**
     * List labels for a self-hosted runner for a repository
     * Lists all labels for a self-hosted runner configured in a repository.
     * 
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListLabelsForSelfHostedRunnerForRepoResponse actionsListLabelsForSelfHostedRunnerForRepo(org.openapis.openapi.models.operations.ActionsListLabelsForSelfHostedRunnerForRepoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListLabelsForSelfHostedRunnerForRepoRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListLabelsForSelfHostedRunnerForRepoResponse res = new org.openapis.openapi.models.operations.ActionsListLabelsForSelfHostedRunnerForRepoResponse(contentType, httpRes.statusCode()) {{
            actionsListLabelsForSelfHostedRunnerForRepo200ApplicationJSONObject = null;
            basicError = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListLabelsForSelfHostedRunnerForRepo200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListLabelsForSelfHostedRunnerForRepo200ApplicationJSON.class);
                res.actionsListLabelsForSelfHostedRunnerForRepo200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }

        return res;
    }

    /**
     * List organization secrets
     * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-organization-secrets - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListOrgSecretsResponse actionsListOrgSecrets(org.openapis.openapi.models.operations.ActionsListOrgSecretsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListOrgSecretsRequest.class, baseUrl, "/orgs/{org}/actions/secrets", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListOrgSecretsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListOrgSecretsResponse res = new org.openapis.openapi.models.operations.ActionsListOrgSecretsResponse(contentType, httpRes.statusCode()) {{
            actionsListOrgSecrets200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListOrgSecrets200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListOrgSecrets200ApplicationJSON.class);
                res.actionsListOrgSecrets200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List repository access to a self-hosted runner group in an organization
     * Lists the repositories with access to a self-hosted runner group configured in an organization.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-repository-access-to-a-self-hosted-runner-group-in-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse actionsListRepoAccessToSelfHostedRunnerGroupInOrg(org.openapis.openapi.models.operations.ActionsListRepoAccessToSelfHostedRunnerGroupInOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListRepoAccessToSelfHostedRunnerGroupInOrgRequest.class, baseUrl, "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListRepoAccessToSelfHostedRunnerGroupInOrgRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse res = new org.openapis.openapi.models.operations.ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse(contentType, httpRes.statusCode()) {{
            actionsListRepoAccessToSelfHostedRunnerGroupInOrg200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200ApplicationJSON.class);
                res.actionsListRepoAccessToSelfHostedRunnerGroupInOrg200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List repository secrets
     * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-repository-secrets - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListRepoSecretsResponse actionsListRepoSecrets(org.openapis.openapi.models.operations.ActionsListRepoSecretsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListRepoSecretsRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/secrets", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListRepoSecretsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListRepoSecretsResponse res = new org.openapis.openapi.models.operations.ActionsListRepoSecretsResponse(contentType, httpRes.statusCode()) {{
            actionsListRepoSecrets200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListRepoSecrets200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListRepoSecrets200ApplicationJSON.class);
                res.actionsListRepoSecrets200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List repository workflows
     * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-repository-workflows - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListRepoWorkflowsResponse actionsListRepoWorkflows(org.openapis.openapi.models.operations.ActionsListRepoWorkflowsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListRepoWorkflowsRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/workflows", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListRepoWorkflowsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListRepoWorkflowsResponse res = new org.openapis.openapi.models.operations.ActionsListRepoWorkflowsResponse(contentType, httpRes.statusCode()) {{
            actionsListRepoWorkflows200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListRepoWorkflows200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListRepoWorkflows200ApplicationJSON.class);
                res.actionsListRepoWorkflows200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List runner applications for an organization
     * Lists binaries for the runner application that you can download and run.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-runner-applications-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListRunnerApplicationsForOrgResponse actionsListRunnerApplicationsForOrg(org.openapis.openapi.models.operations.ActionsListRunnerApplicationsForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListRunnerApplicationsForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runners/downloads", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListRunnerApplicationsForOrgResponse res = new org.openapis.openapi.models.operations.ActionsListRunnerApplicationsForOrgResponse(contentType, httpRes.statusCode()) {{
            runnerApplications = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RunnerApplication[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RunnerApplication[].class);
                res.runnerApplications = out;
            }
        }

        return res;
    }

    /**
     * List runner applications for a repository
     * Lists binaries for the runner application that you can download and run.
     * 
     * You must authenticate using an access token with the `repo` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-runner-applications-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListRunnerApplicationsForRepoResponse actionsListRunnerApplicationsForRepo(org.openapis.openapi.models.operations.ActionsListRunnerApplicationsForRepoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListRunnerApplicationsForRepoRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runners/downloads", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListRunnerApplicationsForRepoResponse res = new org.openapis.openapi.models.operations.ActionsListRunnerApplicationsForRepoResponse(contentType, httpRes.statusCode()) {{
            runnerApplications = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RunnerApplication[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RunnerApplication[].class);
                res.runnerApplications = out;
            }
        }

        return res;
    }

    /**
     * List selected repositories for an organization secret
     * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-selected-repositories-for-an-organization-secret - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListSelectedReposForOrgSecretResponse actionsListSelectedReposForOrgSecret(org.openapis.openapi.models.operations.ActionsListSelectedReposForOrgSecretRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListSelectedReposForOrgSecretRequest.class, baseUrl, "/orgs/{org}/actions/secrets/{secret_name}/repositories", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListSelectedReposForOrgSecretRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListSelectedReposForOrgSecretResponse res = new org.openapis.openapi.models.operations.ActionsListSelectedReposForOrgSecretResponse(contentType, httpRes.statusCode()) {{
            actionsListSelectedReposForOrgSecret200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListSelectedReposForOrgSecret200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListSelectedReposForOrgSecret200ApplicationJSON.class);
                res.actionsListSelectedReposForOrgSecret200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List selected repositories enabled for GitHub Actions in an organization
     * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse actionsListSelectedRepositoriesEnabledGithubActionsOrganization(org.openapis.openapi.models.operations.ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationRequest.class, baseUrl, "/orgs/{org}/actions/permissions/repositories", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse res = new org.openapis.openapi.models.operations.ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse(contentType, httpRes.statusCode()) {{
            actionsListSelectedRepositoriesEnabledGithubActionsOrganization200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200ApplicationJSON.class);
                res.actionsListSelectedRepositoriesEnabledGithubActionsOrganization200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List self-hosted runner groups for an organization
     * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-self-hosted-runner-groups-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListSelfHostedRunnerGroupsForOrgResponse actionsListSelfHostedRunnerGroupsForOrg(org.openapis.openapi.models.operations.ActionsListSelfHostedRunnerGroupsForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListSelfHostedRunnerGroupsForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runner-groups", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListSelfHostedRunnerGroupsForOrgRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListSelfHostedRunnerGroupsForOrgResponse res = new org.openapis.openapi.models.operations.ActionsListSelfHostedRunnerGroupsForOrgResponse(contentType, httpRes.statusCode()) {{
            actionsListSelfHostedRunnerGroupsForOrg200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListSelfHostedRunnerGroupsForOrg200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListSelfHostedRunnerGroupsForOrg200ApplicationJSON.class);
                res.actionsListSelfHostedRunnerGroupsForOrg200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List self-hosted runners for an organization
     * Lists all self-hosted runners configured in an organization.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-self-hosted-runners-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersForOrgResponse actionsListSelfHostedRunnersForOrg(org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runners", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersForOrgRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersForOrgResponse res = new org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersForOrgResponse(contentType, httpRes.statusCode()) {{
            actionsListSelfHostedRunnersForOrg200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersForOrg200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersForOrg200ApplicationJSON.class);
                res.actionsListSelfHostedRunnersForOrg200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List self-hosted runners for a repository
     * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-self-hosted-runners-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersForRepoResponse actionsListSelfHostedRunnersForRepo(org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersForRepoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersForRepoRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runners", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersForRepoRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersForRepoResponse res = new org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersForRepoResponse(contentType, httpRes.statusCode()) {{
            actionsListSelfHostedRunnersForRepo200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersForRepo200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersForRepo200ApplicationJSON.class);
                res.actionsListSelfHostedRunnersForRepo200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List self-hosted runners in a group for an organization
     * Lists self-hosted runners that are in a specific organization group.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersInGroupForOrgResponse actionsListSelfHostedRunnersInGroupForOrg(org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersInGroupForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersInGroupForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersInGroupForOrgRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersInGroupForOrgResponse res = new org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersInGroupForOrgResponse(contentType, httpRes.statusCode()) {{
            actionsListSelfHostedRunnersInGroupForOrg200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersInGroupForOrg200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListSelfHostedRunnersInGroupForOrg200ApplicationJSON.class);
                res.actionsListSelfHostedRunnersInGroupForOrg200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List workflow run artifacts
     * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-workflow-run-artifacts - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListWorkflowRunArtifactsResponse actionsListWorkflowRunArtifacts(org.openapis.openapi.models.operations.ActionsListWorkflowRunArtifactsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListWorkflowRunArtifactsRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListWorkflowRunArtifactsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListWorkflowRunArtifactsResponse res = new org.openapis.openapi.models.operations.ActionsListWorkflowRunArtifactsResponse(contentType, httpRes.statusCode()) {{
            actionsListWorkflowRunArtifacts200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListWorkflowRunArtifacts200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListWorkflowRunArtifacts200ApplicationJSON.class);
                res.actionsListWorkflowRunArtifacts200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List workflow runs for a workflow
     * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.5/rest/overview/resources-in-the-rest-api#parameters).
     * 
     * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-workflow-runs - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListWorkflowRunsResponse actionsListWorkflowRuns(org.openapis.openapi.models.operations.ActionsListWorkflowRunsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListWorkflowRunsRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListWorkflowRunsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListWorkflowRunsResponse res = new org.openapis.openapi.models.operations.ActionsListWorkflowRunsResponse(contentType, httpRes.statusCode()) {{
            actionsListWorkflowRuns200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListWorkflowRuns200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListWorkflowRuns200ApplicationJSON.class);
                res.actionsListWorkflowRuns200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List workflow runs for a repository
     * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.5/rest/overview/resources-in-the-rest-api#parameters).
     * 
     * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#list-workflow-runs-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsListWorkflowRunsForRepoResponse actionsListWorkflowRunsForRepo(org.openapis.openapi.models.operations.ActionsListWorkflowRunsForRepoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsListWorkflowRunsForRepoRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ActionsListWorkflowRunsForRepoRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsListWorkflowRunsForRepoResponse res = new org.openapis.openapi.models.operations.ActionsListWorkflowRunsForRepoResponse(contentType, httpRes.statusCode()) {{
            actionsListWorkflowRunsForRepo200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsListWorkflowRunsForRepo200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsListWorkflowRunsForRepo200ApplicationJSON.class);
                res.actionsListWorkflowRunsForRepo200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Re-run a job from a workflow run
     * Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#re-run-job-for-workflow-run - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsReRunJobForWorkflowRunResponse actionsReRunJobForWorkflowRun(org.openapis.openapi.models.operations.ActionsReRunJobForWorkflowRunRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsReRunJobForWorkflowRunRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsReRunJobForWorkflowRunResponse res = new org.openapis.openapi.models.operations.ActionsReRunJobForWorkflowRunResponse(contentType, httpRes.statusCode()) {{
            emptyObject = null;
            basicError = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.emptyObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }

        return res;
    }

    /**
     * Re-run a workflow
     * Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#re-run-a-workflow - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsReRunWorkflowResponse actionsReRunWorkflow(org.openapis.openapi.models.operations.ActionsReRunWorkflowRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsReRunWorkflowRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsReRunWorkflowResponse res = new org.openapis.openapi.models.operations.ActionsReRunWorkflowResponse(contentType, httpRes.statusCode()) {{
            emptyObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.emptyObject = out;
            }
        }

        return res;
    }

    /**
     * Re-run failed jobs from a workflow run
     * Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#re-run-workflow-failed-jobs - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsReRunWorkflowFailedJobsResponse actionsReRunWorkflowFailedJobs(org.openapis.openapi.models.operations.ActionsReRunWorkflowFailedJobsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsReRunWorkflowFailedJobsRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsReRunWorkflowFailedJobsResponse res = new org.openapis.openapi.models.operations.ActionsReRunWorkflowFailedJobsResponse(contentType, httpRes.statusCode()) {{
            emptyObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.emptyObject = out;
            }
        }

        return res;
    }

    /**
     * Remove all custom labels from a self-hosted runner for an organization
     * Remove all custom labels from a self-hosted runner configured in an
     * organization. Returns the remaining read-only labels from the runner.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponse actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(org.openapis.openapi.models.operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runners/{runner_id}/labels", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponse res = new org.openapis.openapi.models.operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponse(contentType, httpRes.statusCode()) {{
            actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg200ApplicationJSONObject = null;
            basicError = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg200ApplicationJSON.class);
                res.actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }

        return res;
    }

    /**
     * Remove all custom labels from a self-hosted runner for a repository
     * Remove all custom labels from a self-hosted runner configured in a
     * repository. Returns the remaining read-only labels from the runner.
     * 
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponse actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(org.openapis.openapi.models.operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponse res = new org.openapis.openapi.models.operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponse(contentType, httpRes.statusCode()) {{
            actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo200ApplicationJSONObject = null;
            basicError = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo200ApplicationJSON.class);
                res.actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }

        return res;
    }

    /**
     * Remove a custom label from a self-hosted runner for an organization
     * Remove a custom label from a self-hosted runner configured
     * in an organization. Returns the remaining labels from the runner.
     * 
     * This endpoint returns a `404 Not Found` status if the custom label is not
     * present on the runner.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponse actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(org.openapis.openapi.models.operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runners/{runner_id}/labels/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponse res = new org.openapis.openapi.models.operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponse(contentType, httpRes.statusCode()) {{
            actionsRemoveCustomLabelFromSelfHostedRunnerForOrg200ApplicationJSONObject = null;
            basicError = null;
            validationErrorSimple = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForOrg200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForOrg200ApplicationJSON.class);
                res.actionsRemoveCustomLabelFromSelfHostedRunnerForOrg200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ValidationErrorSimple out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ValidationErrorSimple.class);
                res.validationErrorSimple = out;
            }
        }

        return res;
    }

    /**
     * Remove a custom label from a self-hosted runner for a repository
     * Remove a custom label from a self-hosted runner configured
     * in a repository. Returns the remaining labels from the runner.
     * 
     * This endpoint returns a `404 Not Found` status if the custom label is not
     * present on the runner.
     * 
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(org.openapis.openapi.models.operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse res = new org.openapis.openapi.models.operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse(contentType, httpRes.statusCode()) {{
            actionsRemoveCustomLabelFromSelfHostedRunnerForRepo200ApplicationJSONObject = null;
            basicError = null;
            validationErrorSimple = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForRepo200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsRemoveCustomLabelFromSelfHostedRunnerForRepo200ApplicationJSON.class);
                res.actionsRemoveCustomLabelFromSelfHostedRunnerForRepo200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ValidationErrorSimple out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ValidationErrorSimple.class);
                res.validationErrorSimple = out;
            }
        }

        return res;
    }

    /**
     * Remove repository access to a self-hosted runner group in an organization
     * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#remove-repository-access-to-a-self-hosted-runner-group-in-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponse actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg(org.openapis.openapi.models.operations.ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgRequest.class, baseUrl, "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponse res = new org.openapis.openapi.models.operations.ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove selected repository from an organization secret
     * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.5/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#remove-selected-repository-from-an-organization-secret - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsRemoveSelectedRepoFromOrgSecretResponse actionsRemoveSelectedRepoFromOrgSecret(org.openapis.openapi.models.operations.ActionsRemoveSelectedRepoFromOrgSecretRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsRemoveSelectedRepoFromOrgSecretRequest.class, baseUrl, "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsRemoveSelectedRepoFromOrgSecretResponse res = new org.openapis.openapi.models.operations.ActionsRemoveSelectedRepoFromOrgSecretResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 409) {
        }

        return res;
    }

    /**
     * Remove a self-hosted runner from a group for an organization
     * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsRemoveSelfHostedRunnerFromGroupForOrgResponse actionsRemoveSelfHostedRunnerFromGroupForOrg(org.openapis.openapi.models.operations.ActionsRemoveSelfHostedRunnerFromGroupForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsRemoveSelfHostedRunnerFromGroupForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsRemoveSelfHostedRunnerFromGroupForOrgResponse res = new org.openapis.openapi.models.operations.ActionsRemoveSelfHostedRunnerFromGroupForOrgResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Review pending deployments for a workflow run
     * Approve or reject pending deployments that are waiting on approval by a required reviewer.
     * 
     * Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the `repo` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#review-pending-deployments-for-a-workflow-run - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsReviewPendingDeploymentsForRunResponse actionsReviewPendingDeploymentsForRun(org.openapis.openapi.models.operations.ActionsReviewPendingDeploymentsForRunRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsReviewPendingDeploymentsForRunRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsReviewPendingDeploymentsForRunResponse res = new org.openapis.openapi.models.operations.ActionsReviewPendingDeploymentsForRunResponse(contentType, httpRes.statusCode()) {{
            deployments = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Deployment[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Deployment[].class);
                res.deployments = out;
            }
        }

        return res;
    }

    /**
     * Set GitHub Actions cache usage policy for a repository
     * Sets GitHub Actions cache usage policy for a repository.
     * You must authenticate using an access token with the `repo` scope to use this endpoint.
     * GitHub Apps must have the `actions:write` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#set-github-actions-cache-usage-policy-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsSetActionsCacheUsagePolicyResponse actionsSetActionsCacheUsagePolicy(org.openapis.openapi.models.operations.ActionsSetActionsCacheUsagePolicyRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsSetActionsCacheUsagePolicyRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/cache/usage-policy", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "actionsCacheUsagePolicyForRepository", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsSetActionsCacheUsagePolicyResponse res = new org.openapis.openapi.models.operations.ActionsSetActionsCacheUsagePolicyResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Set GitHub Actions cache usage policy for an enterprise
     * Sets the GitHub Actions cache usage policy for an enterprise.
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#set-github-actions-cache-usage-policy-for-an-enterprise - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsSetActionsCacheUsagePolicyForEnterpriseResponse actionsSetActionsCacheUsagePolicyForEnterprise(org.openapis.openapi.models.operations.ActionsSetActionsCacheUsagePolicyForEnterpriseRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsSetActionsCacheUsagePolicyForEnterpriseRequest.class, baseUrl, "/enterprises/{enterprise}/actions/cache/usage-policy", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "actionsCacheUsagePolicyEnterprise", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsSetActionsCacheUsagePolicyForEnterpriseResponse res = new org.openapis.openapi.models.operations.ActionsSetActionsCacheUsagePolicyForEnterpriseResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Set allowed actions for an organization
     * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     * 
     * If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.
     * 
     * To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#set-allowed-actions-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsSetAllowedActionsOrganizationResponse actionsSetAllowedActionsOrganization(org.openapis.openapi.models.operations.ActionsSetAllowedActionsOrganizationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsSetAllowedActionsOrganizationRequest.class, baseUrl, "/orgs/{org}/actions/permissions/selected-actions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "selectedActions", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsSetAllowedActionsOrganizationResponse res = new org.openapis.openapi.models.operations.ActionsSetAllowedActionsOrganizationResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Set allowed actions for a repository
     * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
     * 
     * If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.
     * 
     * To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.
     * 
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#set-allowed-actions-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsSetAllowedActionsRepositoryResponse actionsSetAllowedActionsRepository(org.openapis.openapi.models.operations.ActionsSetAllowedActionsRepositoryRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsSetAllowedActionsRepositoryRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/permissions/selected-actions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "selectedActions", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsSetAllowedActionsRepositoryResponse res = new org.openapis.openapi.models.operations.ActionsSetAllowedActionsRepositoryResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Set custom labels for a self-hosted runner for an organization
     * Remove all previous custom labels and set the new custom labels for a specific
     * self-hosted runner configured in an organization.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsSetCustomLabelsForSelfHostedRunnerForOrgResponse actionsSetCustomLabelsForSelfHostedRunnerForOrg(org.openapis.openapi.models.operations.ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runners/{runner_id}/labels", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsSetCustomLabelsForSelfHostedRunnerForOrgResponse res = new org.openapis.openapi.models.operations.ActionsSetCustomLabelsForSelfHostedRunnerForOrgResponse(contentType, httpRes.statusCode()) {{
            actionsSetCustomLabelsForSelfHostedRunnerForOrg200ApplicationJSONObject = null;
            basicError = null;
            validationErrorSimple = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsSetCustomLabelsForSelfHostedRunnerForOrg200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsSetCustomLabelsForSelfHostedRunnerForOrg200ApplicationJSON.class);
                res.actionsSetCustomLabelsForSelfHostedRunnerForOrg200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ValidationErrorSimple out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ValidationErrorSimple.class);
                res.validationErrorSimple = out;
            }
        }

        return res;
    }

    /**
     * Set custom labels for a self-hosted runner for a repository
     * Remove all previous custom labels and set the new custom labels for a specific
     * self-hosted runner configured in a repository.
     * 
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsSetCustomLabelsForSelfHostedRunnerForRepoResponse actionsSetCustomLabelsForSelfHostedRunnerForRepo(org.openapis.openapi.models.operations.ActionsSetCustomLabelsForSelfHostedRunnerForRepoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsSetCustomLabelsForSelfHostedRunnerForRepoRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsSetCustomLabelsForSelfHostedRunnerForRepoResponse res = new org.openapis.openapi.models.operations.ActionsSetCustomLabelsForSelfHostedRunnerForRepoResponse(contentType, httpRes.statusCode()) {{
            actionsSetCustomLabelsForSelfHostedRunnerForRepo200ApplicationJSONObject = null;
            basicError = null;
            validationErrorSimple = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ActionsSetCustomLabelsForSelfHostedRunnerForRepo200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ActionsSetCustomLabelsForSelfHostedRunnerForRepo200ApplicationJSON.class);
                res.actionsSetCustomLabelsForSelfHostedRunnerForRepo200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ValidationErrorSimple out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ValidationErrorSimple.class);
                res.validationErrorSimple = out;
            }
        }

        return res;
    }

    /**
     * Set default workflow permissions for an organization
     * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
     * can submit approving pull request reviews. For more information, see
     * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/enterprise-server@3.5/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#set-default-workflow-permissions - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponse actionsSetGithubActionsDefaultWorkflowPermissionsOrganization(org.openapis.openapi.models.operations.ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationRequest.class, baseUrl, "/orgs/{org}/actions/permissions/workflow", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "actionsSetDefaultWorkflowPermissions", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponse res = new org.openapis.openapi.models.operations.ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 409) {
        }

        return res;
    }

    /**
     * Set GitHub Actions permissions for an organization
     * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
     * 
     * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#set-github-actions-permissions-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsSetGithubActionsPermissionsOrganizationResponse actionsSetGithubActionsPermissionsOrganization(org.openapis.openapi.models.operations.ActionsSetGithubActionsPermissionsOrganizationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsSetGithubActionsPermissionsOrganizationRequest.class, baseUrl, "/orgs/{org}/actions/permissions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsSetGithubActionsPermissionsOrganizationResponse res = new org.openapis.openapi.models.operations.ActionsSetGithubActionsPermissionsOrganizationResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Set GitHub Actions permissions for a repository
     * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.
     * 
     * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.
     * 
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#set-github-actions-permissions-for-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsSetGithubActionsPermissionsRepositoryResponse actionsSetGithubActionsPermissionsRepository(org.openapis.openapi.models.operations.ActionsSetGithubActionsPermissionsRepositoryRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsSetGithubActionsPermissionsRepositoryRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/permissions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsSetGithubActionsPermissionsRepositoryResponse res = new org.openapis.openapi.models.operations.ActionsSetGithubActionsPermissionsRepositoryResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Set repository access for a self-hosted runner group in an organization
     * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#set-repository-access-to-a-self-hosted-runner-group-in-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponse actionsSetRepoAccessToSelfHostedRunnerGroupInOrg(org.openapis.openapi.models.operations.ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest.class, baseUrl, "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponse res = new org.openapis.openapi.models.operations.ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Set selected repositories for an organization secret
     * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.5/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#set-selected-repositories-for-an-organization-secret - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsSetSelectedReposForOrgSecretResponse actionsSetSelectedReposForOrgSecret(org.openapis.openapi.models.operations.ActionsSetSelectedReposForOrgSecretRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsSetSelectedReposForOrgSecretRequest.class, baseUrl, "/orgs/{org}/actions/secrets/{secret_name}/repositories", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsSetSelectedReposForOrgSecretResponse res = new org.openapis.openapi.models.operations.ActionsSetSelectedReposForOrgSecretResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Set selected repositories enabled for GitHub Actions in an organization
     * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponse actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(org.openapis.openapi.models.operations.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest.class, baseUrl, "/orgs/{org}/actions/permissions/repositories", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponse res = new org.openapis.openapi.models.operations.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Set self-hosted runners in a group for an organization
     * Replaces the list of self-hosted runners that are part of an organization runner group.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsSetSelfHostedRunnersInGroupForOrgResponse actionsSetSelfHostedRunnersInGroupForOrg(org.openapis.openapi.models.operations.ActionsSetSelfHostedRunnersInGroupForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsSetSelfHostedRunnersInGroupForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsSetSelfHostedRunnersInGroupForOrgResponse res = new org.openapis.openapi.models.operations.ActionsSetSelfHostedRunnersInGroupForOrgResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Set the level of access for workflows outside of the repository
     * Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
     * This endpoint only applies to internal repositories.
     * For more information, see "[Managing GitHub Actions settings for a repository](https://docs.github.com/enterprise-server@3.5/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)."
     * 
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
     * repository `administration` permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#set-workflow-access-to-a-repository - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsSetWorkflowAccessToRepositoryResponse actionsSetWorkflowAccessToRepository(org.openapis.openapi.models.operations.ActionsSetWorkflowAccessToRepositoryRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsSetWorkflowAccessToRepositoryRequest.class, baseUrl, "/repos/{owner}/{repo}/actions/permissions/access", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "actionsWorkflowAccessToRepository", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsSetWorkflowAccessToRepositoryResponse res = new org.openapis.openapi.models.operations.ActionsSetWorkflowAccessToRepositoryResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Update a self-hosted runner group for an organization
     * Updates the `name` and `visibility` of a self-hosted runner group in an organization.
     * 
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/actions#update-a-self-hosted-runner-group-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActionsUpdateSelfHostedRunnerGroupForOrgResponse actionsUpdateSelfHostedRunnerGroupForOrg(org.openapis.openapi.models.operations.ActionsUpdateSelfHostedRunnerGroupForOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActionsUpdateSelfHostedRunnerGroupForOrgRequest.class, baseUrl, "/orgs/{org}/actions/runner-groups/{runner_group_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActionsUpdateSelfHostedRunnerGroupForOrgResponse res = new org.openapis.openapi.models.operations.ActionsUpdateSelfHostedRunnerGroupForOrgResponse(contentType, httpRes.statusCode()) {{
            runnerGroupsOrg = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RunnerGroupsOrg out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RunnerGroupsOrg.class);
                res.runnerGroupsOrg = out;
            }
        }

        return res;
    }
}