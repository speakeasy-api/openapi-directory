// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PostAccountsAccountOrdersRequestBodySideEnum - Buy = '1', Sell = '2'
type PostAccountsAccountOrdersRequestBodySideEnum string

const (
	PostAccountsAccountOrdersRequestBodySideEnumOne PostAccountsAccountOrdersRequestBodySideEnum = "1"
	PostAccountsAccountOrdersRequestBodySideEnumTwo PostAccountsAccountOrdersRequestBodySideEnum = "2"
)

func (e *PostAccountsAccountOrdersRequestBodySideEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		*e = PostAccountsAccountOrdersRequestBodySideEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAccountsAccountOrdersRequestBodySideEnum: %s", s)
	}
}

// PostAccountsAccountOrdersRequestBody - Order Parameters
type PostAccountsAccountOrdersRequestBody struct {
	// Required Price to support Stop and Stop Limit orders
	AuxPrice *float64 `json:"Aux Price,omitempty"`
	// The internal IB identifier for the trading product specified as an integer (can be obtained in response to /secdef request)
	ContractID *float64 `json:"ContractId,omitempty"`
	// The currency in which the FX pair trades (only for InstrumentType=CASH)
	Currency *string `json:"Currency,omitempty"`
	// The order ID assigned by the customer.
	CustomerOrderID *string `json:"CustomerOrderId,omitempty"`
	// By setting this bool to false the customer attests that the order is not subject to German HFT Act, was not generated using any automated algorithm, and no algorithm determined or changed financial instrument, side, quantity, order type, limit or other price, trading venue or timing of this order. Currently we cannot accept orders where this flag is set to true. Such orders will be rejected.
	GermanHftAlgo *bool `json:"GermanHftAlgo,omitempty"`
	// The instrument type of the contract
	InstrumentType *string `json:"InstrumentType,omitempty"`
	// The exchange on which the trading product is listed (only for InstrumentType=STK)
	ListingExchange *string `json:"ListingExchange,omitempty"`
	// This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for investment decisions
	Mifid2Algo *string `json:"Mifid2Algo,omitempty"`
	// This field permits specification of the user's preregistered (via account management) MiFID II short code for decision makers.
	Mifid2DecisionMaker *string `json:"Mifid2DecisionMaker,omitempty"`
	// This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for handling/routing of the order.
	Mifid2ExecutionAlgo *string `json:"Mifid2ExecutionAlgo,omitempty"`
	// This field permits specification of the user's preregistered (via account management) MiFID II person responsible for handling/routing of the order
	Mifid2ExecutionTrader *string `json:"Mifid2ExecutionTrader,omitempty"`
	// Market = '1'
	// Limit = '2'
	// Stop = '3'
	// StopLimit = '4'
	//
	OrderType *shared.OrderTypeEnum `json:"Order Type,omitempty"`
	// MultiValueString representing the restrictions associated with
	// an order. If more than one restriction is applicable to an
	// order, this field can contain multiple instructions separated
	// by space.
	// '1' Program Trade
	// '2' Index Arbitrage
	// '3' Non-Index Arbitrage
	//
	OrderRestrictions *float64 `json:"OrderRestrictions,omitempty"`
	// Indicates if order is active outside regular trading hours, where defined. 0 = no (default), 1 = yes
	OutsideRTH *float64 `json:"Outside RTH,omitempty"`
	// The order price
	Price *float64 `json:"Price,omitempty"`
	// The number of units in the order; contracts or shares
	Quantity *float64 `json:"Quantity,omitempty"`
	// Buy = '1', Sell = '2'
	Side *PostAccountsAccountOrdersRequestBodySideEnum `json:"Side,omitempty"`
	// The symbol that identifies the trading product
	Ticker *string `json:"Ticker,omitempty"`
	// Defines order's active lifetime.
	// Day = '0'
	// GTC (Good till Cancel) = '1'
	// IOC (Immediate or Cancel) = '3'
	// Open = '2'
	// Close = '7'
	//
	TimeInForce *shared.TimeInForceEnum `json:"Time in Force,omitempty"`
}

type PostAccountsAccountOrdersRequest struct {
	// Order Parameters
	RequestBody PostAccountsAccountOrdersRequestBody `request:"mediaType=application/json"`
	// Account Number
	Account string `pathParam:"style=simple,explode=false,name=account"`
}

type PostAccountsAccountOrdersResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Returns order status information
	OrderStates []shared.OrderState
}
