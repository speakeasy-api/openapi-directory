"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GPUSharingConfigGPUSharingStrategyEnum(str, Enum):
    r"""The type of GPU sharing strategy to enable on the GPU node."""
    GPU_SHARING_STRATEGY_UNSPECIFIED = 'GPU_SHARING_STRATEGY_UNSPECIFIED'
    TIME_SHARING = 'TIME_SHARING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GPUSharingConfig:
    r"""GPUSharingConfig represents the GPU sharing configuration for Hardware Accelerators."""
    
    gpu_sharing_strategy: Optional[GPUSharingConfigGPUSharingStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gpuSharingStrategy'), 'exclude': lambda f: f is None }})
    r"""The type of GPU sharing strategy to enable on the GPU node."""  
    max_shared_clients_per_gpu: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxSharedClientsPerGpu'), 'exclude': lambda f: f is None }})
    r"""The max number of containers that can share a physical GPU."""  
    