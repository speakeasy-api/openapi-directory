"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Domains:
    r"""Operations for fetching domains"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_cms_v3_domains_get_page(self, request: operations.GetCmsV3DomainsGetPageRequest, security: operations.GetCmsV3DomainsGetPageSecurity) -> operations.GetCmsV3DomainsGetPageResponse:
        r"""Get current domains
        Returns all existing domains that have been created. Results can be limited and filtered by creation or updated date.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/cms/v3/domains/'
        
        query_params = utils.get_query_params(operations.GetCmsV3DomainsGetPageRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCmsV3DomainsGetPageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CollectionResponseWithTotalDomainForwardPaging])
                res.collection_response_with_total_domain_forward_paging = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_cms_v3_domains_domain_id_get_by_id(self, request: operations.GetCmsV3DomainsDomainIDGetByIDRequest, security: operations.GetCmsV3DomainsDomainIDGetByIDSecurity) -> operations.GetCmsV3DomainsDomainIDGetByIDResponse:
        r"""Get a single domain
        Returns a single domains with the id specified.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCmsV3DomainsDomainIDGetByIDRequest, base_url, '/cms/v3/domains/{domainId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCmsV3DomainsDomainIDGetByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Domain])
                res.domain = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    