"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateUploadRequestBodyTypeEnum(str, Enum):
    AVATAR = 'avatar'
    PROFILE_BACKGROUND = 'profile_background'
    CARD_BACKGROUND = 'card_background'
    CUSTOM_EMOJI = 'custom_emoji'
    COMPOSER = 'composer'


@dataclasses.dataclass
class CreateUploadRequestBody:
    
    type: CreateUploadRequestBodyTypeEnum = dataclasses.field(metadata={'multipart_form': { 'field_name': 'type' }})  
    file: Optional[Any] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'file' }})  
    synchronous: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'synchronous' }})
    r"""Use this flag to return an id and url"""  
    user_id: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'user_id' }})
    r"""required if uploading an avatar"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpload200ApplicationJSON:
    r"""file uploaded"""
    
    extension: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension') }})  
    filesize: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filesize') }})  
    height: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height') }})  
    human_filesize: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('human_filesize') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    original_filename: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_filename') }})  
    retain_hours: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retain_hours') }})  
    short_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('short_path') }})  
    short_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('short_url') }})  
    thumbnail_height: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnail_height') }})  
    thumbnail_width: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnail_width') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    width: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width') }})  
    dominant_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dominant_color'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CreateUploadResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_upload_200_application_json_object: Optional[CreateUpload200ApplicationJSON] = dataclasses.field(default=None)
    r"""file uploaded"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    