"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetAllFinancialProductsSecurity:
    
    api_secret_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' }})  
    

@dataclasses.dataclass
class GetAllFinancialProductsRequest:
    
    x_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'x-api-key', 'style': 'simple', 'explode': False }})
    r"""ApiSecretKey"""  
    product_types: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'product_types', 'style': 'form', 'explode': True }})
    r"""multiple product types as a comma seperated string"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllFinancialProducts500ApplicationJSON:
    r"""System error. Retry later. If the error persist, contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllFinancialProducts429ApplicationJSON:
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllFinancialProducts404ApplicationJSON:
    r"""The specified resource was not found"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllFinancialProducts403ApplicationJSON:
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllFinancialProducts401ApplicationJSON:
    r"""You do not have permissions to access this resource."""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllFinancialProducts400ApplicationJSON:
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    
class GetAllFinancialProducts200ApplicationJSONRootTypeForFinancialProductsFlexibleEnum(str, Enum):
    r"""Whether the regulations allow a financial product to be flexible"""
    YES = 'YES'
    NO = 'NO'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllFinancialProducts200ApplicationJSONRootTypeForFinancialProductsInterestPreferences:
    
    interest_accrual_basis: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interest_accrual_basis'), 'exclude': lambda f: f is None }})  
    interest_payment_frequency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interest_payment_frequency'), 'exclude': lambda f: f is None }})  
    pay_interest: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pay_interest'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllFinancialProducts200ApplicationJSONRootTypeForFinancialProductsInvestmentPreferences:
    
    minimum_one_off_investment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimum_one_off_investment'), 'exclude': lambda f: f is None }})  
    minimum_regular_monthly_investment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimum_regular_monthly_investment'), 'exclude': lambda f: f is None }})  
    regular_investment_dates: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regular_investment_dates'), 'exclude': lambda f: f is None }})  
    regular_investment_frequencies: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regular_investment_frequencies'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllFinancialProducts200ApplicationJSONRootTypeForFinancialProductsWithdrawalPreferences:
    
    minimum_one_off_withdrawal: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimum_one_off_withdrawal'), 'exclude': lambda f: f is None }})  
    minimum_regular_monthly_withdrawal: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimum_regular_monthly_withdrawal'), 'exclude': lambda f: f is None }})  
    regular_withdrawal_frequencies: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regular_withdrawal_frequencies'), 'exclude': lambda f: f is None }})  
    regular_withdrawal_payment_dates: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regular_withdrawal_payment_dates'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllFinancialProducts200ApplicationJSONRootTypeForFinancialProducts:
    
    financial_product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('financial_product_id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    product_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product_type') }})
    r"""Financial product type"""  
    additional_cash_currencies: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additional_cash_currencies'), 'exclude': lambda f: f is None }})  
    availability: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availability'), 'exclude': lambda f: f is None }})  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    dividend_options: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dividend_options'), 'exclude': lambda f: f is None }})  
    flexible: Optional[GetAllFinancialProducts200ApplicationJSONRootTypeForFinancialProductsFlexibleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flexible'), 'exclude': lambda f: f is None }})
    r"""Whether the regulations allow a financial product to be flexible"""  
    interest_preferences: Optional[GetAllFinancialProducts200ApplicationJSONRootTypeForFinancialProductsInterestPreferences] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interest_preferences'), 'exclude': lambda f: f is None }})  
    investment_preferences: Optional[GetAllFinancialProducts200ApplicationJSONRootTypeForFinancialProductsInvestmentPreferences] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_preferences'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    withdrawal_preferences: Optional[GetAllFinancialProducts200ApplicationJSONRootTypeForFinancialProductsWithdrawalPreferences] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('withdrawal_preferences'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllFinancialProducts200ApplicationJSON:
    r"""A paged array of financial products"""
    
    financial_products: list[GetAllFinancialProducts200ApplicationJSONRootTypeForFinancialProducts] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('financial_products') }})  
    

@dataclasses.dataclass
class GetAllFinancialProductsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_all_financial_products_200_application_json_object: Optional[GetAllFinancialProducts200ApplicationJSON] = dataclasses.field(default=None)
    r"""A paged array of financial products"""  
    get_all_financial_products_400_application_json_object: Optional[GetAllFinancialProducts400ApplicationJSON] = dataclasses.field(default=None)
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""  
    get_all_financial_products_401_application_json_object: Optional[GetAllFinancialProducts401ApplicationJSON] = dataclasses.field(default=None)
    r"""You do not have permissions to access this resource."""  
    get_all_financial_products_403_application_json_object: Optional[GetAllFinancialProducts403ApplicationJSON] = dataclasses.field(default=None)
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""  
    get_all_financial_products_404_application_json_object: Optional[GetAllFinancialProducts404ApplicationJSON] = dataclasses.field(default=None)
    r"""The specified resource was not found"""  
    get_all_financial_products_429_application_json_object: Optional[GetAllFinancialProducts429ApplicationJSON] = dataclasses.field(default=None)
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""  
    get_all_financial_products_500_application_json_object: Optional[GetAllFinancialProducts500ApplicationJSON] = dataclasses.field(default=None)
    r"""System error. Retry later. If the error persist, contact WOS support"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    