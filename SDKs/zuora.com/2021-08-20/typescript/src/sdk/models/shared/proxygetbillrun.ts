/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export class ProxyGetBillRun extends SpeakeasyBase {
  /**
   * ID of the account used for single account bill run.
   *
   * @remarks
   *
   * **Character limit:** 32
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccountId" })
  accountId?: string;

  /**
   * Determines whether to auto send email or not once the bill run completes.
   *
   * @remarks
   *
   * **Note:** You must enable the [Support Bill Run Auto-Post Billing](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Billing_Rules) rule to pass this field.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AutoEmail" })
  autoEmail?: boolean;

  /**
   * Determines whether to auto post bill run or not once the bill run completes.
   *
   * @remarks
   *
   * **Note:** You must enable the [Support Bill Run Auto-Post Billing](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Billing_Rules) rule to pass this field.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AutoPost" })
  autoPost?: boolean;

  /**
   * Determines whether to auto renew subscription or not by this bill run once the bill run completes.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AutoRenewal" })
  autoRenewal?: boolean;

  /**
   * Batch of accounts for this bill run.
   *
   * @remarks
   *
   * **Character limit:** 20
   *
   * **Values:** AllBatches or Batchn where n is a number between 1 and 50.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Batch" })
  batch?: string;

  /**
   * The day of the bill cycle.
   *
   * @remarks
   *
   * **Character limit:** 32
   *
   * **Values:** `AllBillCycleDays` or 01 - 31.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BillCycleDay" })
  billCycleDay?: string;

  /**
   * Number of the bill run.
   *
   * @remarks
   *
   * **Character limit:** 50
   *
   * **Values:** automatically generated
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BillRunNumber" })
  billRunNumber?: string;

  /**
   * The user ID of the person who created the bill run.
   *
   * @remarks
   *
   * **Character limit:** 32
   *
   * **Values:** automatically generated
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CreatedById" })
  createdById?: string;

  /**
   * The date and time when the bill run was created.
   *
   * @remarks
   *
   * **Character limit:** 29
   *
   * **Values:** automatically generated
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CreatedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdDate?: Date;

  /**
   * The date and time when the bill run was executed.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ExecutedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  executedDate?: Date;

  /**
   * ID of the object.
   *
   * @remarks
   *
   * **Character limit:** 32
   *
   * **Values:** automatically generated
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id?: string;

  /**
   * Invoice date for this bill run.
   *
   * @remarks
   *
   * **Character limit:** 29
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "InvoiceDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  invoiceDate?: Date;

  /**
   * Indicates whether the invoice has been sent or not.
   *
   * @remarks
   *
   * **Values:** automatically generated
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "InvoicesEmailed" })
  invoicesEmailed?: boolean;

  /**
   * The last time emails were sent for this bill run.
   *
   * @remarks
   *
   * **Character limit:** 29
   *
   * **Values:** automatically generated
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LastEmailSentTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastEmailSentTime?: Date;

  /**
   * Determines whether to suppress email for invoices with zero total or not for this bill run once the bill run completes. (Do not email invoices with 0 Invoice Total).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NoEmailForZeroAmountInvoice" })
  noEmailForZeroAmountInvoice?: boolean;

  /**
   * The number of accounts processed by this bill run.
   *
   * @remarks
   *
   * **Values:** automatically generated
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NumberOfAccounts" })
  numberOfAccounts?: number;

  /**
   * The number of invoices generated by this  run.
   *
   * @remarks
   *
   * **Values:** automatically generated
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NumberOfInvoices" })
  numberOfInvoices?: number;

  /**
   * The status  for this bill run. See [Status Types](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/G_Bill_Runs#Status_Types) for more information.
   *
   * @remarks
   *
   * **Character limit:** 20
   *
   * **Values:**
   *
   *   * `Pending`
   *   * `Processing`
   *   * `Completed`
   *   * `Error`
   *   * `Canceled`
   *   * `Posted`
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: string;

  /**
   * Target date for this bill run. See [Create Bill Run](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/G_Bill_Runs/Creating_Bill_Runs) for more information.
   *
   * @remarks
   *
   * **Character limit:** 29
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TargetDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  targetDate?: Date;

  /**
   * The user ID of the person who last updated the bill run.
   *
   * @remarks
   *
   * **Character limit:** 32
   *
   * **Values:** automatically generated
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpdatedById" })
  updatedById?: string;

  /**
   * The date and time when the bill run was last updated.
   *
   * @remarks
   *
   * **Character limit:** 29
   *
   * **Values:** automatically generated
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpdatedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedDate?: Date;
}
