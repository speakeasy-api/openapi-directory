"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import api_v2010_account_call as shared_api_v2010_account_call
from enum import Enum
from typing import Optional

CREATE_CALL_SERVERS = [
	"https://api.twilio.com",
]


@dataclasses.dataclass
class CreateCallSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class CreateCallCreateCallRequestAsyncAmdStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use when calling the `async_amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class CreateCallCreateCallRequestFallbackMethodEnum(str, Enum):
    r"""The HTTP method that we should use to request the `fallback_url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class CreateCallCreateCallRequestMethodEnum(str, Enum):
    r"""The HTTP method we should use when calling the `url` parameter's value. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class CreateCallCreateCallRequestRecordingStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use when calling the `recording_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class CreateCallCreateCallRequestStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use when calling the `status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclasses.dataclass
class CreateCallCreateCallRequest:
    
    from_: str = dataclasses.field(metadata={'form': { 'field_name': 'From' }})
    r"""The phone number or client identifier to use as the caller id. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `From` must also be a phone number."""  
    to: str = dataclasses.field(metadata={'form': { 'field_name': 'To' }})
    r"""The phone number, SIP address, or client identifier to call."""  
    application_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ApplicationSid' }})
    r"""The SID of the Application resource that will handle the call, if the call will be handled by an application."""  
    async_amd: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AsyncAmd' }})
    r"""Select whether to perform answering machine detection in the background. Default, blocks the execution of the call until Answering Machine Detection is completed. Can be: `true` or `false`."""  
    async_amd_status_callback: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AsyncAmdStatusCallback' }})
    r"""The URL that we should call using the `async_amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax."""  
    async_amd_status_callback_method: Optional[CreateCallCreateCallRequestAsyncAmdStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AsyncAmdStatusCallbackMethod' }})
    r"""The HTTP method we should use when calling the `async_amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`."""  
    byoc: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Byoc' }})
    r"""The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)"""  
    caller_id: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallerId' }})
    r"""The phone number, SIP address, or Client identifier that made this call. Phone numbers are in [E.164 format](https://wwnw.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as `name@company.com`."""  
    call_reason: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallReason' }})
    r"""The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)"""  
    call_token: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallToken' }})
    r"""A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call's call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call."""  
    fallback_method: Optional[CreateCallCreateCallRequestFallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FallbackMethod' }})
    r"""The HTTP method that we should use to request the `fallback_url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored."""  
    fallback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FallbackUrl' }})
    r"""The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored."""  
    machine_detection: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MachineDetection' }})
    r"""Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection)."""  
    machine_detection_silence_timeout: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MachineDetectionSilenceTimeout' }})
    r"""The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000."""  
    machine_detection_speech_end_threshold: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MachineDetectionSpeechEndThreshold' }})
    r"""The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200."""  
    machine_detection_speech_threshold: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MachineDetectionSpeechThreshold' }})
    r"""The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400."""  
    machine_detection_timeout: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MachineDetectionTimeout' }})
    r"""The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds."""  
    method: Optional[CreateCallCreateCallRequestMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Method' }})
    r"""The HTTP method we should use when calling the `url` parameter's value. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored."""  
    record: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Record' }})
    r"""Whether to record the call. Can be `true` to record the phone call, or `false` to not. The default is `false`. The `recording_url` is sent to the `status_callback` URL."""  
    recording_channels: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingChannels' }})
    r"""The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call."""  
    recording_status_callback: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingStatusCallback' }})
    r"""The URL that we call when the recording is available to be accessed."""  
    recording_status_callback_event: Optional[list[str]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingStatusCallbackEvent' }})
    r"""The recording status events that will trigger calls to the URL specified in `recording_status_callback`. Can be: `in-progress`, `completed` and `absent`. Defaults to `completed`. Separate  multiple values with a space."""  
    recording_status_callback_method: Optional[CreateCallCreateCallRequestRecordingStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingStatusCallbackMethod' }})
    r"""The HTTP method we should use when calling the `recording_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`."""  
    recording_track: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingTrack' }})
    r"""The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio."""  
    send_digits: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SendDigits' }})
    r"""A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (`0`-`9`), '`#`', '`*`' and '`w`', to insert a half second pause. For example, if you connected to a company phone number and wanted to pause for one second, and then dial extension 1234 followed by the pound key, the value of this parameter would be `ww1234#`. Remember to URL-encode this string, since the '`#`' character has special meaning in a URL. If both `SendDigits` and `MachineDetection` parameters are provided, then `MachineDetection` will be ignored."""  
    sip_auth_password: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SipAuthPassword' }})
    r"""The password required to authenticate the user account specified in `sip_auth_username`."""  
    sip_auth_username: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SipAuthUsername' }})
    r"""The username used to authenticate the caller making a SIP call."""  
    status_callback: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StatusCallback' }})
    r"""The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted)."""  
    status_callback_event: Optional[list[str]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StatusCallbackEvent' }})
    r"""The call progress events that we will send to the `status_callback` URL. Can be: `initiated`, `ringing`, `answered`, and `completed`. If no event is specified, we send the `completed` status. If you want to receive multiple events, specify each one in a separate `status_callback_event` parameter. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call-resource?code-sample=code-create-a-call-resource-and-specify-a-statuscallbackevent&code-sdk-version=json). If an `application_sid` is present, this parameter is ignored."""  
    status_callback_method: Optional[CreateCallCreateCallRequestStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StatusCallbackMethod' }})
    r"""The HTTP method we should use when calling the `status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored."""  
    time_limit: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'TimeLimit' }})
    r"""The maximum duration of the call in seconds. Constraints depend on account and configuration."""  
    timeout: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Timeout' }})
    r"""The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is `60` seconds and the maximum is `600` seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail."""  
    trim: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Trim' }})
    r"""Whether to trim any leading and trailing silence from the recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`."""  
    twiml: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Twiml' }})
    r"""TwiML instructions for the call Twilio will use without fetching Twiml from url parameter. If both `twiml` and `url` are provided then `twiml` parameter will be ignored. Max 4000 characters."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Url' }})
    r"""The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls)."""  
    

@dataclasses.dataclass
class CreateCallRequest:
    
    account_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'AccountSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource."""  
    request_body: Optional[CreateCallCreateCallRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class CreateCallResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_v2010_account_call: Optional[shared_api_v2010_account_call.APIV2010AccountCall] = dataclasses.field(default=None)
    r"""Created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    