/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Metric for computing similarity
 */
export enum GetSimCompareMetricEnum {
  Phenodigm = "phenodigm",
  Jaccard = "jaccard",
  SimGIC = "simGIC",
  Resnik = "resnik",
  SymmetricResnik = "symmetric_resnik",
}

export class GetSimCompareRequest extends SpeakeasyBase {
  /**
   * set to true if *all* input ids are phenotypic features, else set to false
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=is_feature_set",
  })
  isFeatureSet?: boolean;

  /**
   * Metric for computing similarity
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=metric",
  })
  metric?: GetSimCompareMetricEnum;

  /**
   * A phenotype or identifier that is composed of phenotypes (eg disease, gene)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=query_id",
  })
  queryId?: string[];

  /**
   * A phenotype or identifier that is composed of phenotypes (eg disease, gene)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ref_id",
  })
  refId?: string[];
}

export class GetSimCompareResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  simResult?: shared.SimResult;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
