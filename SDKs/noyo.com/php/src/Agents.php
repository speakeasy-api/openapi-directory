<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Agents 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create new Agent Contact
     * 
     * Creates a new agent contact for an agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAgentContactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAgentContactResponse
     */
	public function createAgentContact(
        \OpenAPI\OpenAPI\Models\Operations\CreateAgentContactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAgentContactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/agents/{agent_id}/contacts', \OpenAPI\OpenAPI\Models\Operations\CreateAgentContactRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "agentContactCreateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAgentContactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->agentContactResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AgentContactResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create new Agent Location
     * 
     * Creates a new agent location for an agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAgentLocationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAgentLocationResponse
     */
	public function createAgentLocation(
        \OpenAPI\OpenAPI\Models\Operations\CreateAgentLocationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAgentLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/agents/{agent_id}/locations', \OpenAPI\OpenAPI\Models\Operations\CreateAgentLocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "agentLocationCreateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAgentLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->agentLocationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AgentLocationResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create new Agent
     * 
     * Create a new agent for a group application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateApplicationAgentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateApplicationAgentResponse
     */
	public function createApplicationAgent(
        \OpenAPI\OpenAPI\Models\Operations\CreateApplicationAgentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateApplicationAgentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/applications/{application_id}/agents', \OpenAPI\OpenAPI\Models\Operations\CreateApplicationAgentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "agentCreateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateApplicationAgentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->agentResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AgentResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit an Agent
     * 
     * Edit an agent based on the ID provided. The version parameter must match the latest agent version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditAgentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EditAgentResponse
     */
	public function editAgent(
        \OpenAPI\OpenAPI\Models\Operations\EditAgentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EditAgentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/agents/{agent_id}/{version}', \OpenAPI\OpenAPI\Models\Operations\EditAgentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "agentEditRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditAgentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->agentResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AgentResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit an Agent Contact
     * 
     * Edit an agent contact based on the ID provided. The version parameter must match the latest agent contact version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditAgentContactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EditAgentContactResponse
     */
	public function editAgentContact(
        \OpenAPI\OpenAPI\Models\Operations\EditAgentContactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EditAgentContactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/agents/{agent_id}/contacts/{contact_id}/{version}', \OpenAPI\OpenAPI\Models\Operations\EditAgentContactRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "agentContactEditRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditAgentContactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->agentContactResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AgentContactResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit an Agent Location
     * 
     * Edit an agent location based on the ID provided. The version parameter must match the latest agent location version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditAgentLocationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EditAgentLocationResponse
     */
	public function editAgentLocation(
        \OpenAPI\OpenAPI\Models\Operations\EditAgentLocationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EditAgentLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/agents/{agent_id}/locations/{location_id}/{version}', \OpenAPI\OpenAPI\Models\Operations\EditAgentLocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "agentLocationEditRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditAgentLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->agentLocationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AgentLocationResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Agent
     * 
     * Returns the latest version of a single agent based on the ID provided
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAgentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAgentResponse
     */
	public function getAgent(
        \OpenAPI\OpenAPI\Models\Operations\GetAgentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAgentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/agents/{agent_id}', \OpenAPI\OpenAPI\Models\Operations\GetAgentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAgentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->agentResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AgentResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Agent
     * 
     * Returns the latest version of a single agent based on the ID provided
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAgentContactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAgentContactResponse
     */
	public function getAgentContact(
        \OpenAPI\OpenAPI\Models\Operations\GetAgentContactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAgentContactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/agents/{agent_id}/contacts/{contact_id}', \OpenAPI\OpenAPI\Models\Operations\GetAgentContactRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAgentContactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->agentContactResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AgentContactResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Agent Contacts
     * 
     * Returns a list of all contacts for the given agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAgentContactsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAgentContactsResponse
     */
	public function getAgentContacts(
        \OpenAPI\OpenAPI\Models\Operations\GetAgentContactsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAgentContactsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/agents/{agent_id}/contacts', \OpenAPI\OpenAPI\Models\Operations\GetAgentContactsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAgentContactsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAgentContactsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedAgentContactResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedAgentContactResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Agent
     * 
     * Returns the latest version of a single agent based on the ID provided
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAgentLocationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAgentLocationResponse
     */
	public function getAgentLocation(
        \OpenAPI\OpenAPI\Models\Operations\GetAgentLocationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAgentLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/agents/{agent_id}/locations/{location_id}', \OpenAPI\OpenAPI\Models\Operations\GetAgentLocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAgentLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->agentLocationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AgentLocationResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Agent Locations
     * 
     * Returns a list of all locations for the given agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAgentLocationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAgentLocationsResponse
     */
	public function getAgentLocations(
        \OpenAPI\OpenAPI\Models\Operations\GetAgentLocationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAgentLocationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/agents/{agent_id}/locations', \OpenAPI\OpenAPI\Models\Operations\GetAgentLocationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAgentLocationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAgentLocationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedAgentLocationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedAgentLocationResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Application Agents
     * 
     * Returns a list of all agents for the given application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApplicationAgentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApplicationAgentsResponse
     */
	public function getApplicationAgents(
        \OpenAPI\OpenAPI\Models\Operations\GetApplicationAgentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApplicationAgentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/applications/{application_id}/agents', \OpenAPI\OpenAPI\Models\Operations\GetApplicationAgentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApplicationAgentsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApplicationAgentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedAgentResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedAgentResult', 'json');
            }
        }

        return $response;
    }
}