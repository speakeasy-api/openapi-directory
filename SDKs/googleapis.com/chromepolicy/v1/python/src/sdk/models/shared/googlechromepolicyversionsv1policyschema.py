"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import chromecrosdpanelautosettingsprotopolicyapilifecycle as shared_chromecrosdpanelautosettingsprotopolicyapilifecycle
from ..shared import googlechromepolicyversionsv1additionaltargetkeyname as shared_googlechromepolicyversionsv1additionaltargetkeyname
from ..shared import googlechromepolicyversionsv1policyschemafielddescription as shared_googlechromepolicyversionsv1policyschemafielddescription
from ..shared import googlechromepolicyversionsv1policyschemanoticedescription as shared_googlechromepolicyversionsv1policyschemanoticedescription
from ..shared import proto2filedescriptorproto as shared_proto2filedescriptorproto
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleChromePolicyVersionsV1PolicySchemaValidTargetResourcesEnum(str, Enum):
    TARGET_RESOURCE_UNSPECIFIED = 'TARGET_RESOURCE_UNSPECIFIED'
    ORG_UNIT = 'ORG_UNIT'
    GROUP = 'GROUP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleChromePolicyVersionsV1PolicySchema:
    r"""Resource representing a policy schema."""
    
    access_restrictions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessRestrictions'), 'exclude': lambda f: f is None }})
    r"""Output only. Specific access restrictions related to this policy."""  
    additional_target_key_names: Optional[list[shared_googlechromepolicyversionsv1additionaltargetkeyname.GoogleChromePolicyVersionsV1AdditionalTargetKeyName]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalTargetKeyNames'), 'exclude': lambda f: f is None }})
    r"""Output only. Additional key names that will be used to identify the target of the policy value. When specifying a `policyTargetKey`, each of the additional keys specified here will have to be included in the `additionalTargetKeys` map."""  
    category_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryTitle'), 'exclude': lambda f: f is None }})
    r"""Title of the category in which a setting belongs."""  
    definition: Optional[shared_proto2filedescriptorproto.Proto2FileDescriptorProto] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('definition'), 'exclude': lambda f: f is None }})
    r"""Describes a complete .proto file."""  
    field_descriptions: Optional[list[shared_googlechromepolicyversionsv1policyschemafielddescription.GoogleChromePolicyVersionsV1PolicySchemaFieldDescription]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldDescriptions'), 'exclude': lambda f: f is None }})
    r"""Output only. Detailed description of each field that is part of the schema."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Format: name=customers/{customer}/policySchemas/{schema_namespace}"""  
    notices: Optional[list[shared_googlechromepolicyversionsv1policyschemanoticedescription.GoogleChromePolicyVersionsV1PolicySchemaNoticeDescription]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notices'), 'exclude': lambda f: f is None }})
    r"""Output only. Special notice messages related to setting certain values in certain fields in the schema."""  
    policy_api_lifecycle: Optional[shared_chromecrosdpanelautosettingsprotopolicyapilifecycle.ChromeCrosDpanelAutosettingsProtoPolicyAPILifecycle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyApiLifecycle'), 'exclude': lambda f: f is None }})  
    policy_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyDescription'), 'exclude': lambda f: f is None }})
    r"""Output only. Description about the policy schema for user consumption."""  
    schema_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemaName'), 'exclude': lambda f: f is None }})
    r"""Output only. The fully qualified name of the policy schema. This value is used to fill the field `policy_schema` in PolicyValue when calling BatchInheritOrgUnitPolicies BatchModifyOrgUnitPolicies BatchModifyGroupPolicies or BatchDeleteGroupPolicies."""  
    support_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportUri'), 'exclude': lambda f: f is None }})
    r"""Output only. URI to related support article for this schema."""  
    valid_target_resources: Optional[list[GoogleChromePolicyVersionsV1PolicySchemaValidTargetResourcesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validTargetResources'), 'exclude': lambda f: f is None }})
    r"""Output only. Information about applicable target resources for the policy."""  
    