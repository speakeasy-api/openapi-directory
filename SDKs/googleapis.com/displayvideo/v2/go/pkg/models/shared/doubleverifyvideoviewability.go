// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DoubleVerifyVideoViewabilityPlayerImpressionRateEnum - Target inventory to maximize impressions with 400x300 or greater player size.
type DoubleVerifyVideoViewabilityPlayerImpressionRateEnum string

const (
	DoubleVerifyVideoViewabilityPlayerImpressionRateEnumPlayerSize400X300Unspecified DoubleVerifyVideoViewabilityPlayerImpressionRateEnum = "PLAYER_SIZE_400X300_UNSPECIFIED"
	DoubleVerifyVideoViewabilityPlayerImpressionRateEnumPlayerSize400X30095          DoubleVerifyVideoViewabilityPlayerImpressionRateEnum = "PLAYER_SIZE_400X300_95"
	DoubleVerifyVideoViewabilityPlayerImpressionRateEnumPlayerSize400X30070          DoubleVerifyVideoViewabilityPlayerImpressionRateEnum = "PLAYER_SIZE_400X300_70"
	DoubleVerifyVideoViewabilityPlayerImpressionRateEnumPlayerSize400X30025          DoubleVerifyVideoViewabilityPlayerImpressionRateEnum = "PLAYER_SIZE_400X300_25"
	DoubleVerifyVideoViewabilityPlayerImpressionRateEnumPlayerSize400X3005           DoubleVerifyVideoViewabilityPlayerImpressionRateEnum = "PLAYER_SIZE_400X300_5"
)

func (e DoubleVerifyVideoViewabilityPlayerImpressionRateEnum) ToPointer() *DoubleVerifyVideoViewabilityPlayerImpressionRateEnum {
	return &e
}

func (e *DoubleVerifyVideoViewabilityPlayerImpressionRateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PLAYER_SIZE_400X300_UNSPECIFIED":
		fallthrough
	case "PLAYER_SIZE_400X300_95":
		fallthrough
	case "PLAYER_SIZE_400X300_70":
		fallthrough
	case "PLAYER_SIZE_400X300_25":
		fallthrough
	case "PLAYER_SIZE_400X300_5":
		*e = DoubleVerifyVideoViewabilityPlayerImpressionRateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DoubleVerifyVideoViewabilityPlayerImpressionRateEnum: %v", v)
	}
}

// DoubleVerifyVideoViewabilityVideoIabEnum - Target web inventory to maximize IAB viewable rate.
type DoubleVerifyVideoViewabilityVideoIabEnum string

const (
	DoubleVerifyVideoViewabilityVideoIabEnumVideoIabUnspecified           DoubleVerifyVideoViewabilityVideoIabEnum = "VIDEO_IAB_UNSPECIFIED"
	DoubleVerifyVideoViewabilityVideoIabEnumIabViewability80PercentHigher DoubleVerifyVideoViewabilityVideoIabEnum = "IAB_VIEWABILITY_80_PERCENT_HIGHER"
	DoubleVerifyVideoViewabilityVideoIabEnumIabViewability75PercentHigher DoubleVerifyVideoViewabilityVideoIabEnum = "IAB_VIEWABILITY_75_PERCENT_HIGHER"
	DoubleVerifyVideoViewabilityVideoIabEnumIabViewability70PercentHigher DoubleVerifyVideoViewabilityVideoIabEnum = "IAB_VIEWABILITY_70_PERCENT_HIGHER"
	DoubleVerifyVideoViewabilityVideoIabEnumIabViewability65PercentHihger DoubleVerifyVideoViewabilityVideoIabEnum = "IAB_VIEWABILITY_65_PERCENT_HIHGER"
	DoubleVerifyVideoViewabilityVideoIabEnumIabViewability60PercentHigher DoubleVerifyVideoViewabilityVideoIabEnum = "IAB_VIEWABILITY_60_PERCENT_HIGHER"
	DoubleVerifyVideoViewabilityVideoIabEnumIabViewability55PercentHihger DoubleVerifyVideoViewabilityVideoIabEnum = "IAB_VIEWABILITY_55_PERCENT_HIHGER"
	DoubleVerifyVideoViewabilityVideoIabEnumIabViewability50PercentHigher DoubleVerifyVideoViewabilityVideoIabEnum = "IAB_VIEWABILITY_50_PERCENT_HIGHER"
	DoubleVerifyVideoViewabilityVideoIabEnumIabViewability40PercentHihger DoubleVerifyVideoViewabilityVideoIabEnum = "IAB_VIEWABILITY_40_PERCENT_HIHGER"
	DoubleVerifyVideoViewabilityVideoIabEnumIabViewability30PercentHihger DoubleVerifyVideoViewabilityVideoIabEnum = "IAB_VIEWABILITY_30_PERCENT_HIHGER"
)

func (e DoubleVerifyVideoViewabilityVideoIabEnum) ToPointer() *DoubleVerifyVideoViewabilityVideoIabEnum {
	return &e
}

func (e *DoubleVerifyVideoViewabilityVideoIabEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VIDEO_IAB_UNSPECIFIED":
		fallthrough
	case "IAB_VIEWABILITY_80_PERCENT_HIGHER":
		fallthrough
	case "IAB_VIEWABILITY_75_PERCENT_HIGHER":
		fallthrough
	case "IAB_VIEWABILITY_70_PERCENT_HIGHER":
		fallthrough
	case "IAB_VIEWABILITY_65_PERCENT_HIHGER":
		fallthrough
	case "IAB_VIEWABILITY_60_PERCENT_HIGHER":
		fallthrough
	case "IAB_VIEWABILITY_55_PERCENT_HIHGER":
		fallthrough
	case "IAB_VIEWABILITY_50_PERCENT_HIGHER":
		fallthrough
	case "IAB_VIEWABILITY_40_PERCENT_HIHGER":
		fallthrough
	case "IAB_VIEWABILITY_30_PERCENT_HIHGER":
		*e = DoubleVerifyVideoViewabilityVideoIabEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DoubleVerifyVideoViewabilityVideoIabEnum: %v", v)
	}
}

// DoubleVerifyVideoViewabilityVideoViewableRateEnum - Target web inventory to maximize fully viewable rate.
type DoubleVerifyVideoViewabilityVideoViewableRateEnum string

const (
	DoubleVerifyVideoViewabilityVideoViewableRateEnumVideoViewableRateUnspecified     DoubleVerifyVideoViewabilityVideoViewableRateEnum = "VIDEO_VIEWABLE_RATE_UNSPECIFIED"
	DoubleVerifyVideoViewabilityVideoViewableRateEnumViewedPerformance40PercentHigher DoubleVerifyVideoViewabilityVideoViewableRateEnum = "VIEWED_PERFORMANCE_40_PERCENT_HIGHER"
	DoubleVerifyVideoViewabilityVideoViewableRateEnumViewedPerformance35PercentHigher DoubleVerifyVideoViewabilityVideoViewableRateEnum = "VIEWED_PERFORMANCE_35_PERCENT_HIGHER"
	DoubleVerifyVideoViewabilityVideoViewableRateEnumViewedPerformance30PercentHigher DoubleVerifyVideoViewabilityVideoViewableRateEnum = "VIEWED_PERFORMANCE_30_PERCENT_HIGHER"
	DoubleVerifyVideoViewabilityVideoViewableRateEnumViewedPerformance25PercentHigher DoubleVerifyVideoViewabilityVideoViewableRateEnum = "VIEWED_PERFORMANCE_25_PERCENT_HIGHER"
	DoubleVerifyVideoViewabilityVideoViewableRateEnumViewedPerformance20PercentHigher DoubleVerifyVideoViewabilityVideoViewableRateEnum = "VIEWED_PERFORMANCE_20_PERCENT_HIGHER"
	DoubleVerifyVideoViewabilityVideoViewableRateEnumViewedPerformance10PercentHigher DoubleVerifyVideoViewabilityVideoViewableRateEnum = "VIEWED_PERFORMANCE_10_PERCENT_HIGHER"
)

func (e DoubleVerifyVideoViewabilityVideoViewableRateEnum) ToPointer() *DoubleVerifyVideoViewabilityVideoViewableRateEnum {
	return &e
}

func (e *DoubleVerifyVideoViewabilityVideoViewableRateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VIDEO_VIEWABLE_RATE_UNSPECIFIED":
		fallthrough
	case "VIEWED_PERFORMANCE_40_PERCENT_HIGHER":
		fallthrough
	case "VIEWED_PERFORMANCE_35_PERCENT_HIGHER":
		fallthrough
	case "VIEWED_PERFORMANCE_30_PERCENT_HIGHER":
		fallthrough
	case "VIEWED_PERFORMANCE_25_PERCENT_HIGHER":
		fallthrough
	case "VIEWED_PERFORMANCE_20_PERCENT_HIGHER":
		fallthrough
	case "VIEWED_PERFORMANCE_10_PERCENT_HIGHER":
		*e = DoubleVerifyVideoViewabilityVideoViewableRateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DoubleVerifyVideoViewabilityVideoViewableRateEnum: %v", v)
	}
}

// DoubleVerifyVideoViewability - Details of DoubleVerify video viewability settings.
type DoubleVerifyVideoViewability struct {
	// Target inventory to maximize impressions with 400x300 or greater player size.
	PlayerImpressionRate *DoubleVerifyVideoViewabilityPlayerImpressionRateEnum `json:"playerImpressionRate,omitempty"`
	// Target web inventory to maximize IAB viewable rate.
	VideoIab *DoubleVerifyVideoViewabilityVideoIabEnum `json:"videoIab,omitempty"`
	// Target web inventory to maximize fully viewable rate.
	VideoViewableRate *DoubleVerifyVideoViewabilityVideoViewableRateEnum `json:"videoViewableRate,omitempty"`
}
