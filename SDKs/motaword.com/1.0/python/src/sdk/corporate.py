"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Corporate:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_available_corporate_permissions(self) -> operations.GetAvailableCorporatePermissionsResponse:
        r"""View available permissions
        View a list of available permissions for your corporate account. They are used when assigning permissions to your corporate users.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/corporate/permissions'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAvailableCorporatePermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PermissionList])
                res.permission_list = out

        return res

    def get_available_corporate_permissions_by_id(self, request: operations.GetAvailableCorporatePermissionsByIDRequest) -> operations.GetAvailableCorporatePermissionsByIDResponse:
        r"""Get a list of available permissions for this corporate account. They are used when assigning permissions to corporate users.
        Get a list of available permissions for this corporate account. They are used when assigning permissions to corporate users.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAvailableCorporatePermissionsByIDRequest, base_url, '/corporates/{corporateId}/permissions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAvailableCorporatePermissionsByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PermissionList])
                res.permission_list = out

        return res

    def get_corporate(self) -> operations.GetCorporateResponse:
        r"""View your corporate account
        View the details of the corporate account that your user account belongs to.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/corporate'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCorporateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CorporateAccount])
                res.corporate_account = out

        return res

    def get_corporate_by_id(self, request: operations.GetCorporateByIDRequest) -> operations.GetCorporateByIDResponse:
        r"""Get details of this corporate account
        Get details of this corporate account
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCorporateByIDRequest, base_url, '/corporates/{corporateId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCorporateByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CorporateAccount])
                res.corporate_account = out

        return res

    def get_corporate_user_groups(self) -> operations.GetCorporateUserGroupsResponse:
        r"""View user groups
        View a list of user groups under my corporate account. User groups are a part of our RBAC implementation and can be used to configure complex permission scenarios.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/corporate/user-groups'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCorporateUserGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserGroupList])
                res.user_group_list = out

        return res

    def get_corporate_user_groups_by_id(self, request: operations.GetCorporateUserGroupsByIDRequest) -> operations.GetCorporateUserGroupsByIDResponse:
        r"""Get a list of user groups for this corporate account
        Get a list of user groups for this corporate account
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCorporateUserGroupsByIDRequest, base_url, '/corporates/{corporateId}/user-groups', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCorporateUserGroupsByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserGroupList])
                res.user_group_list = out

        return res

    def get_corporate_users(self) -> operations.GetCorporateUsersResponse:
        r"""View users
        View a list of users under your corporate account. This endpoint will only return information if your user account is permitted to view corporate account users, configured by your administrator.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/corporate/users'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCorporateUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserList])
                res.user_list = out

        return res

    def get_corporate_users_by_id(self, request: operations.GetCorporateUsersByIDRequest) -> operations.GetCorporateUsersByIDResponse:
        r"""Get a list of users for this corporate account
        Get a list of users for this corporate account
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCorporateUsersByIDRequest, base_url, '/corporates/{corporateId}/users', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCorporateUsersByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserList])
                res.user_list = out

        return res

    def get_corporates_list(self) -> operations.GetCorporatesListResponse:
        r"""Get a list of corporate accounts
        Get a list of corporate accounts
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/corporates/all'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCorporatesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CorporateAccount]])
                res.corporate_accounts = out

        return res

    def save_corporate_user(self, request: shared.UserUpdateContent) -> operations.SaveCorporateUserResponse:
        r"""Create or update a user
        Create or update a user under your corporate account. This endpoint requires permissions for corporate user management, configured by your administrator.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/corporate/users'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SaveCorporateUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    def save_corporate_user_group(self, request: shared.UserGroup) -> operations.SaveCorporateUserGroupResponse:
        r"""Create or update a corporate user group
        Create or update a corporate user group
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/corporate/user-groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SaveCorporateUserGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserGroup])
                res.user_group = out

        return res

    def save_corporate_user_group_by_id(self, request: operations.SaveCorporateUserGroupByIDRequest) -> operations.SaveCorporateUserGroupByIDResponse:
        r"""Create or update a corporate user group for this corporate account
        Create or update a corporate user group for this corporate account
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SaveCorporateUserGroupByIDRequest, base_url, '/corporates/{corporateId}/user-groups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_group", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SaveCorporateUserGroupByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserGroup])
                res.user_group = out

        return res

    