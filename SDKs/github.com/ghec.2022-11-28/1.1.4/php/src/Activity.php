<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Activity 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Check if a repository is starred by the authenticated user
     * 
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#check-if-a-repository-is-starred-by-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityCheckRepoIsStarredByAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityCheckRepoIsStarredByAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#check-if-a-repository-is-starred-by-the-authenticated-user
     */
	public function activityCheckRepoIsStarredByAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\ActivityCheckRepoIsStarredByAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityCheckRepoIsStarredByAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/starred/{owner}/{repo}', \OpenAPI\OpenAPI\Models\Operations\ActivityCheckRepoIsStarredByAuthenticatedUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityCheckRepoIsStarredByAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a repository subscription
     * 
     * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#set-a-repository-subscription).
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#delete-a-repository-subscription - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityDeleteRepoSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityDeleteRepoSubscriptionResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#delete-a-repository-subscription
     */
	public function activityDeleteRepoSubscription(
        \OpenAPI\OpenAPI\Models\Operations\ActivityDeleteRepoSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityDeleteRepoSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/subscription', \OpenAPI\OpenAPI\Models\Operations\ActivityDeleteRepoSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityDeleteRepoSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a thread subscription
     * 
     * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#delete-a-thread-subscription - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityDeleteThreadSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityDeleteThreadSubscriptionResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#delete-a-thread-subscription
     */
	public function activityDeleteThreadSubscription(
        \OpenAPI\OpenAPI\Models\Operations\ActivityDeleteThreadSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityDeleteThreadSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/threads/{thread_id}/subscription', \OpenAPI\OpenAPI\Models\Operations\ActivityDeleteThreadSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityDeleteThreadSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get feeds
     * 
     * GitHub Enterprise Cloud provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
     * 
     * *   **Timeline**: The GitHub Enterprise Cloud global public timeline
     * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/enterprise-cloud@latest//rest/overview/resources-in-the-rest-api#hypermedia)
     * *   **Current user public**: The public timeline for the authenticated user
     * *   **Current user**: The private timeline for the authenticated user
     * *   **Current user actor**: The private timeline for activity created by the authenticated user
     * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
     * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub Enterprise Cloud.
     * 
     * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/enterprise-cloud@latest//rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#get-feeds - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityGetFeedsResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#get-feeds
     */
	public function activityGetFeeds(
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityGetFeedsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/feeds');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityGetFeedsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->feed = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Feed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a repository subscription
     * 
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#get-a-repository-subscription - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityGetRepoSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityGetRepoSubscriptionResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#get-a-repository-subscription
     */
	public function activityGetRepoSubscription(
        \OpenAPI\OpenAPI\Models\Operations\ActivityGetRepoSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityGetRepoSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/subscription', \OpenAPI\OpenAPI\Models\Operations\ActivityGetRepoSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityGetRepoSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositorySubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RepositorySubscription', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get a thread
     * 
     * Gets information about a notification thread.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#get-a-thread - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityGetThreadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityGetThreadResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#get-a-thread
     */
	public function activityGetThread(
        \OpenAPI\OpenAPI\Models\Operations\ActivityGetThreadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityGetThreadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/threads/{thread_id}', \OpenAPI\OpenAPI\Models\Operations\ActivityGetThreadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityGetThreadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->thread = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Thread', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a thread subscription for the authenticated user
     * 
     * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#get-a-repository-subscription).
     * 
     * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityGetThreadSubscriptionForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityGetThreadSubscriptionForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user
     */
	public function activityGetThreadSubscriptionForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\ActivityGetThreadSubscriptionForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityGetThreadSubscriptionForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/threads/{thread_id}/subscription', \OpenAPI\OpenAPI\Models\Operations\ActivityGetThreadSubscriptionForAuthenticatedUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityGetThreadSubscriptionForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->threadSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ThreadSubscription', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List events for the authenticated user
     * 
     * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-events-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListEventsForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListEventsForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-events-for-the-authenticated-user
     */
	public function activityListEventsForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListEventsForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListEventsForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/events', \OpenAPI\OpenAPI\Models\Operations\ActivityListEventsForAuthenticatedUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListEventsForAuthenticatedUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListEventsForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List notifications for the authenticated user
     * 
     * List all notifications for the current user, sorted by most recently updated.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-notifications-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListNotificationsForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListNotificationsForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-notifications-for-the-authenticated-user
     */
	public function activityListNotificationsForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListNotificationsForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListNotificationsForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListNotificationsForAuthenticatedUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListNotificationsForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->threads = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Thread>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List organization events for the authenticated user
     * 
     * This is the user's organization dashboard. You must be authenticated as the user to view this.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-organization-events-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListOrgEventsForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListOrgEventsForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-organization-events-for-the-authenticated-user
     */
	public function activityListOrgEventsForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListOrgEventsForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListOrgEventsForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/events/orgs/{org}', \OpenAPI\OpenAPI\Models\Operations\ActivityListOrgEventsForAuthenticatedUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListOrgEventsForAuthenticatedUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListOrgEventsForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List public events
     * 
     * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-public-events - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-public-events
     */
	public function activityListPublicEvents(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/events');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->activityListPublicEvents503ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEvents503ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List public events for a network of repositories
     * 
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-public-events-for-a-network-of-repositories - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsForRepoNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsForRepoNetworkResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-public-events-for-a-network-of-repositories
     */
	public function activityListPublicEventsForRepoNetwork(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsForRepoNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsForRepoNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{owner}/{repo}/events', \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsForRepoNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsForRepoNetworkRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsForRepoNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 301 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }

        return $response;
    }
	
    /**
     * List public events for a user
     * 
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-public-events-for-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsForUserResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-public-events-for-a-user
     */
	public function activityListPublicEventsForUser(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/events/public', \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsForUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicEventsForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List public organization events
     * 
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-public-organization-events - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicOrgEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicOrgEventsResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-public-organization-events
     */
	public function activityListPublicOrgEvents(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicOrgEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicOrgEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/events', \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicOrgEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListPublicOrgEventsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListPublicOrgEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List events received by the authenticated user
     * 
     * These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-events-received-by-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListReceivedEventsForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListReceivedEventsForUserResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-events-received-by-the-authenticated-user
     */
	public function activityListReceivedEventsForUser(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListReceivedEventsForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListReceivedEventsForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/received_events', \OpenAPI\OpenAPI\Models\Operations\ActivityListReceivedEventsForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListReceivedEventsForUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListReceivedEventsForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List public events received by a user
     * 
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-public-events-received-by-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListReceivedPublicEventsForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListReceivedPublicEventsForUserResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-public-events-received-by-a-user
     */
	public function activityListReceivedPublicEventsForUser(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListReceivedPublicEventsForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListReceivedPublicEventsForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/received_events/public', \OpenAPI\OpenAPI\Models\Operations\ActivityListReceivedPublicEventsForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListReceivedPublicEventsForUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListReceivedPublicEventsForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List repository events
     * 
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-repository-events - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListRepoEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListRepoEventsResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-repository-events
     */
	public function activityListRepoEvents(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListRepoEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListRepoEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/events', \OpenAPI\OpenAPI\Models\Operations\ActivityListRepoEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListRepoEventsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListRepoEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List repository notifications for the authenticated user
     * 
     * Lists all notifications for the current user in the specified repository.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-repository-notifications-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListRepoNotificationsForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListRepoNotificationsForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-repository-notifications-for-the-authenticated-user
     */
	public function activityListRepoNotificationsForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListRepoNotificationsForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListRepoNotificationsForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/notifications', \OpenAPI\OpenAPI\Models\Operations\ActivityListRepoNotificationsForAuthenticatedUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListRepoNotificationsForAuthenticatedUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListRepoNotificationsForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->threads = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Thread>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List repositories starred by the authenticated user
     * 
     * Lists repositories the authenticated user has starred.
     * 
     * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-cloud@latest//rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-repositories-starred-by-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListReposStarredByAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListReposStarredByAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-repositories-starred-by-the-authenticated-user
     */
	public function activityListReposStarredByAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListReposStarredByAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListReposStarredByAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/starred');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListReposStarredByAuthenticatedUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListReposStarredByAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositories = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Repository>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.github.v3.star+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->starredRepositories = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\StarredRepository>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List repositories starred by a user
     * 
     * Lists repositories a user has starred.
     * 
     * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-cloud@latest//rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-repositories-starred-by-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListReposStarredByUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListReposStarredByUserResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-repositories-starred-by-a-user
     */
	public function activityListReposStarredByUser(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListReposStarredByUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListReposStarredByUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/starred', \OpenAPI\OpenAPI\Models\Operations\ActivityListReposStarredByUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListReposStarredByUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListReposStarredByUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->activityListReposStarredByUser200ApplicationJSONAnyOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List repositories watched by a user
     * 
     * Lists repositories a user is watching.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-repositories-watched-by-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListReposWatchedByUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListReposWatchedByUserResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-repositories-watched-by-a-user
     */
	public function activityListReposWatchedByUser(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListReposWatchedByUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListReposWatchedByUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/subscriptions', \OpenAPI\OpenAPI\Models\Operations\ActivityListReposWatchedByUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListReposWatchedByUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListReposWatchedByUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->minimalRepositories = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MinimalRepository>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List stargazers
     * 
     * Lists the people that have starred the repository.
     * 
     * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-cloud@latest//rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-stargazers - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListStargazersForRepoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListStargazersForRepoResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-stargazers
     */
	public function activityListStargazersForRepo(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListStargazersForRepoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListStargazersForRepoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/stargazers', \OpenAPI\OpenAPI\Models\Operations\ActivityListStargazersForRepoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListStargazersForRepoRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListStargazersForRepoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->activityListStargazersForRepo200ApplicationJSONAnyOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List repositories watched by the authenticated user
     * 
     * Lists repositories the authenticated user is watching.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-repositories-watched-by-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListWatchedReposForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListWatchedReposForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-repositories-watched-by-the-authenticated-user
     */
	public function activityListWatchedReposForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListWatchedReposForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListWatchedReposForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/subscriptions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListWatchedReposForAuthenticatedUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListWatchedReposForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->minimalRepositories = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MinimalRepository>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List watchers
     * 
     * Lists the people watching the specified repository.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-watchers - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityListWatchersForRepoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityListWatchersForRepoResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-watchers
     */
	public function activityListWatchersForRepo(
        \OpenAPI\OpenAPI\Models\Operations\ActivityListWatchersForRepoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityListWatchersForRepoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/subscribers', \OpenAPI\OpenAPI\Models\Operations\ActivityListWatchersForRepoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivityListWatchersForRepoRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityListWatchersForRepoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->simpleUsers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SimpleUser>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Mark notifications as read
     * 
     * Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub Enterprise Cloud will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#mark-notifications-as-read - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityMarkNotificationsAsReadRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityMarkNotificationsAsReadResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#mark-notifications-as-read
     */
	public function activityMarkNotificationsAsRead(
        \OpenAPI\OpenAPI\Models\Operations\ActivityMarkNotificationsAsReadRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityMarkNotificationsAsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityMarkNotificationsAsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->activityMarkNotificationsAsRead202ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ActivityMarkNotificationsAsRead202ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 205 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Mark repository notifications as read
     * 
     * Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub Enterprise Cloud will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#mark-repository-notifications-as-read - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityMarkRepoNotificationsAsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityMarkRepoNotificationsAsReadResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#mark-repository-notifications-as-read
     */
	public function activityMarkRepoNotificationsAsRead(
        \OpenAPI\OpenAPI\Models\Operations\ActivityMarkRepoNotificationsAsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityMarkRepoNotificationsAsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/notifications', \OpenAPI\OpenAPI\Models\Operations\ActivityMarkRepoNotificationsAsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityMarkRepoNotificationsAsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->activityMarkRepoNotificationsAsRead202ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ActivityMarkRepoNotificationsAsRead202ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 205) {
        }

        return $response;
    }
	
    /**
     * Mark a thread as read
     * 
     * Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub Enterprise Cloud: https://github.com/notifications.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#mark-a-thread-as-read - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityMarkThreadAsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityMarkThreadAsReadResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#mark-a-thread-as-read
     */
	public function activityMarkThreadAsRead(
        \OpenAPI\OpenAPI\Models\Operations\ActivityMarkThreadAsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityMarkThreadAsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/threads/{thread_id}', \OpenAPI\OpenAPI\Models\Operations\ActivityMarkThreadAsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityMarkThreadAsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set a repository subscription
     * 
     * If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#delete-a-repository-subscription) completely.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#set-a-repository-subscription - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivitySetRepoSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivitySetRepoSubscriptionResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#set-a-repository-subscription
     */
	public function activitySetRepoSubscription(
        \OpenAPI\OpenAPI\Models\Operations\ActivitySetRepoSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivitySetRepoSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/subscription', \OpenAPI\OpenAPI\Models\Operations\ActivitySetRepoSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivitySetRepoSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositorySubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RepositorySubscription', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set a thread subscription
     * 
     * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
     * 
     * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
     * 
     * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#delete-a-thread-subscription) endpoint.
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#set-a-thread-subscription - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivitySetThreadSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivitySetThreadSubscriptionResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#set-a-thread-subscription
     */
	public function activitySetThreadSubscription(
        \OpenAPI\OpenAPI\Models\Operations\ActivitySetThreadSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivitySetThreadSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/notifications/threads/{thread_id}/subscription', \OpenAPI\OpenAPI\Models\Operations\ActivitySetThreadSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivitySetThreadSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->threadSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ThreadSubscription', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Star a repository for the authenticated user
     * 
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-cloud@latest//rest/overview/resources-in-the-rest-api#http-verbs)."
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#star-a-repository-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityStarRepoForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityStarRepoForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#star-a-repository-for-the-authenticated-user
     */
	public function activityStarRepoForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\ActivityStarRepoForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityStarRepoForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/starred/{owner}/{repo}', \OpenAPI\OpenAPI\Models\Operations\ActivityStarRepoForAuthenticatedUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityStarRepoForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unstar a repository for the authenticated user
     * 
     * https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#unstar-a-repository-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivityUnstarRepoForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivityUnstarRepoForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-cloud@latest//rest/reference/activity#unstar-a-repository-for-the-authenticated-user
     */
	public function activityUnstarRepoForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\ActivityUnstarRepoForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivityUnstarRepoForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/starred/{owner}/{repo}', \OpenAPI\OpenAPI\Models\Operations\ActivityUnstarRepoForAuthenticatedUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivityUnstarRepoForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
}