// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// LogEventStatusEnum - Operation status:
//
// * `0` - Success
//
// * `2` - Error
type LogEventStatusEnum string

const (
	LogEventStatusEnumZero LogEventStatusEnum = "0"
	LogEventStatusEnumTwo  LogEventStatusEnum = "2"
)

func (e *LogEventStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "2":
		*e = LogEventStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LogEventStatusEnum: %s", s)
	}
}

// LogEvent - Log event information
type LogEvent struct {
	// Attribute 1
	Attribute1 *string `json:"attribute1,omitempty"`
	// Attribute 2
	Attribute2 *string `json:"attribute2,omitempty"`
	// Attribute 3
	Attribute3 *string `json:"attribute3,omitempty"`
	// Auth parent source ID
	AuthParentSource *string `json:"authParentSource,omitempty"`
	// Auth parent target ID
	AuthParentTarget *string `json:"authParentTarget,omitempty"`
	// Unique identifier for the customer
	CustomerID *int64 `json:"customerId,omitempty"`
	// Event ID
	ID int64 `json:"id"`
	// Event description
	Message string `json:"message"`
	// Object ID 1
	ObjectId1 *int64 `json:"objectId1,omitempty"`
	// Object ID 2
	ObjectId2 *int64 `json:"objectId2,omitempty"`
	// Object name 1
	ObjectName1 *string `json:"objectName1,omitempty"`
	// Object name 2
	ObjectName2 *string `json:"objectName2,omitempty"`
	// Object type 1
	ObjectType1 *int `json:"objectType1,omitempty"`
	// Object type 2
	ObjectType2 *int `json:"objectType2,omitempty"`
	// Operation type ID
	OperationID *int `json:"operationId,omitempty"`
	// Operation name
	OperationName *string `json:"operationName,omitempty"`
	// Operation status:
	//
	// * `0` - Success
	//
	// * `2` - Error
	Status *LogEventStatusEnum `json:"status,omitempty"`
	// Event timestamp
	Time time.Time `json:"time"`
	// Client
	UserClient *string `json:"userClient,omitempty"`
	// Unique identifier for the user
	UserID int64 `json:"userId"`
	// User IP
	UserIP *string `json:"userIp,omitempty"`
	// Username
	UserName *string `json:"userName,omitempty"`
}
