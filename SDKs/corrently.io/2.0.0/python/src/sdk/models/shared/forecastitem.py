"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ForecastItem:
    
    co2_g_oekostrom: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('co2_g_oekostrom'), 'exclude': lambda f: f is None }})
    r"""CO2 footprint in Gramm per kwh (only Green Power)"""  
    energyprice: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('energyprice'), 'exclude': lambda f: f is None }})
    r"""Local/regional energyprice modification (cent per kWh or euro per MWh)."""  
    epochtime: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('epochtime'), 'exclude': lambda f: f is None }})
    r"""Timestamps in Seconds"""  
    gsi: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gsi'), 'exclude': lambda f: f is None }})
    r"""Actual GreenPowerIndex for given Timestamp (between 0-100)"""  
    scaled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scaled'), 'exclude': lambda f: f is None }})
    r"""Indicates if scaling is in operation to predict values"""  
    sci: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sci'), 'exclude': lambda f: f is None }})
    r"""Subindex just for Solar Energy"""  
    time_stamp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeStamp'), 'exclude': lambda f: f is None }})
    r"""Timestamp in Standard Milliseconds"""  
    