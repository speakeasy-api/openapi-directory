/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Attribute } from "./attribute";
import { CompatibilityEnum } from "./compatibilityenum";
import { ContainerDefinition } from "./containerdefinition";
import { EphemeralStorage } from "./ephemeralstorage";
import { InferenceAccelerator } from "./inferenceaccelerator";
import { IpcModeEnum } from "./ipcmodeenum";
import { NetworkModeEnum } from "./networkmodeenum";
import { PidModeEnum } from "./pidmodeenum";
import { ProxyConfiguration } from "./proxyconfiguration";
import { RuntimePlatform } from "./runtimeplatform";
import { TaskDefinitionPlacementConstraint } from "./taskdefinitionplacementconstraint";
import { TaskDefinitionStatusEnum } from "./taskdefinitionstatusenum";
import { Volume } from "./volume";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The details of a task definition which describes the container and volume definitions of an Amazon Elastic Container Service task. You can specify which Docker images to use, the required resources, and other configurations related to launching the task definition through an Amazon ECS service or task.
 */
export class TaskDefinition extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "compatibilities" })
  compatibilities?: CompatibilityEnum[];

  @SpeakeasyMetadata({ elemType: ContainerDefinition })
  @Expose({ name: "containerDefinitions" })
  @Type(() => ContainerDefinition)
  containerDefinitions?: ContainerDefinition[];

  @SpeakeasyMetadata()
  @Expose({ name: "cpu" })
  cpu?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deregisteredAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  deregisteredAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "ephemeralStorage" })
  @Type(() => EphemeralStorage)
  ephemeralStorage?: EphemeralStorage;

  @SpeakeasyMetadata()
  @Expose({ name: "executionRoleArn" })
  executionRoleArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "family" })
  family?: string;

  @SpeakeasyMetadata({ elemType: InferenceAccelerator })
  @Expose({ name: "inferenceAccelerators" })
  @Type(() => InferenceAccelerator)
  inferenceAccelerators?: InferenceAccelerator[];

  @SpeakeasyMetadata()
  @Expose({ name: "ipcMode" })
  ipcMode?: IpcModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "memory" })
  memory?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "networkMode" })
  networkMode?: NetworkModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "pidMode" })
  pidMode?: PidModeEnum;

  @SpeakeasyMetadata({ elemType: TaskDefinitionPlacementConstraint })
  @Expose({ name: "placementConstraints" })
  @Type(() => TaskDefinitionPlacementConstraint)
  placementConstraints?: TaskDefinitionPlacementConstraint[];

  @SpeakeasyMetadata()
  @Expose({ name: "proxyConfiguration" })
  @Type(() => ProxyConfiguration)
  proxyConfiguration?: ProxyConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "registeredAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  registeredAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "registeredBy" })
  registeredBy?: string;

  @SpeakeasyMetadata({ elemType: Attribute })
  @Expose({ name: "requiresAttributes" })
  @Type(() => Attribute)
  requiresAttributes?: Attribute[];

  @SpeakeasyMetadata()
  @Expose({ name: "requiresCompatibilities" })
  requiresCompatibilities?: CompatibilityEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "revision" })
  revision?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "runtimePlatform" })
  @Type(() => RuntimePlatform)
  runtimePlatform?: RuntimePlatform;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: TaskDefinitionStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "taskDefinitionArn" })
  taskDefinitionArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "taskRoleArn" })
  taskRoleArn?: string;

  @SpeakeasyMetadata({ elemType: Volume })
  @Expose({ name: "volumes" })
  @Type(() => Volume)
  volumes?: Volume[];
}
