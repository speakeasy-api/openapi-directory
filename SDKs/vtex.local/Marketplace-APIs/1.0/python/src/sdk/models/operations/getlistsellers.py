"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class GetListSellersRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand."""  
    account_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'accountName', 'style': 'form', 'explode': True }})
    r"""Name of the VTEX account that belongs to the marketplace."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    environment: str = dataclasses.field(metadata={'query_param': { 'field_name': 'environment', 'style': 'form', 'explode': True }})
    r"""Environment to use. Used as part of the URL."""  
    from_: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""The start number of pagination, being `0` the default value."""  
    group: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'group ', 'style': 'form', 'explode': True }})
    r"""Groups are defined by keywords that group sellers into categories defined by the marketplace."""  
    integration: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'integration', 'style': 'form', 'explode': True }})
    r"""Filters sellers by the name of who made the integration, if VTEX or an external hub. The possible values for VTEX integrations are: `vtex-sellerportal`, `vtex-seller` and `vtex-franchise`."""  
    is_active: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'isActive', 'style': 'form', 'explode': True }})
    r"""Enables to filter sellers that are active (`true`) or unactive (`false`) in the marketplace."""  
    is_better_scope: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'isBetterScope', 'style': 'form', 'explode': True }})
    r"""The flag `isBetterScope` is used by the VTEX Checkout to simulate shopping carts, products, and shipping only in sellers with the field set as `true`, avoiding performance issues. When used as a query param, `isBetterScope` filters sellers that have the flag set as `true` or `false`."""  
    is_vtex: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'isVtex', 'style': 'form', 'explode': True }})
    r"""When set as `true`, the list returned will be of sellers who have a VTEX store configured. When set as `false`, the list will be of sellers who do not have a VTEX store configured."""  
    keyword: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'keyword', 'style': 'form', 'explode': True }})
    r"""Search sellers by a keyword in `sellerId` or `sellerName`."""  
    sc: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sc', 'style': 'form', 'explode': True }})
    r"""Filters sellers available for the marketplace's sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) indicated in this field."""  
    seller_type: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sellerType', 'style': 'form', 'explode': True }})
    r"""Filters sellers by their type, which can be regular seller (`1`) or whitelabel seller (`2`)."""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Narrow the search filtering by the fields: `id`, `name` or `pendingoffers`. The list retrieved can be organized in an ascending (`asc`) or descending (`desc`) order. The standardized format is `{field}:{order}`, and the default value is `id:asc`."""  
    to: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""The end number of pagination, being `100` the default value."""  
    

@dataclasses.dataclass
class GetListSellersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    