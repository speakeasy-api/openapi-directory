/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class JWTRefreshResponse {
    
    public String contentType;

    public JWTRefreshResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * Invalid token
     */
    
    public java.util.Map<String, Object> jwtRefresh401ApplicationJSONObject;

    public JWTRefreshResponse withJWTRefresh401ApplicationJSONObject(java.util.Map<String, Object> jwtRefresh401ApplicationJSONObject) {
        this.jwtRefresh401ApplicationJSONObject = jwtRefresh401ApplicationJSONObject;
        return this;
    }
    
    /**
     * IP Access denied
     */
    
    public java.util.Map<String, Object> jwtRefresh403ApplicationJSONObject;

    public JWTRefreshResponse withJWTRefresh403ApplicationJSONObject(java.util.Map<String, Object> jwtRefresh403ApplicationJSONObject) {
        this.jwtRefresh403ApplicationJSONObject = jwtRefresh403ApplicationJSONObject;
        return this;
    }
    
    /**
     * Nordigen rate limit exceeded
     */
    
    public java.util.Map<String, Object> jwtRefresh429ApplicationJSONObject;

    public JWTRefreshResponse withJWTRefresh429ApplicationJSONObject(java.util.Map<String, Object> jwtRefresh429ApplicationJSONObject) {
        this.jwtRefresh429ApplicationJSONObject = jwtRefresh429ApplicationJSONObject;
        return this;
    }
    
    /**
     * Refresh access token.
     */
    
    public org.openapis.openapi.models.shared.SpectacularJWTRefresh spectacularJWTRefresh;

    public JWTRefreshResponse withSpectacularJWTRefresh(org.openapis.openapi.models.shared.SpectacularJWTRefresh spectacularJWTRefresh) {
        this.spectacularJWTRefresh = spectacularJWTRefresh;
        return this;
    }
    
    
    public Integer statusCode;

    public JWTRefreshResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public JWTRefreshResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    public JWTRefreshResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
