"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import batchaddfacettoobject as shared_batchaddfacettoobject
from ..shared import batchattachobject as shared_batchattachobject
from ..shared import batchattachpolicy as shared_batchattachpolicy
from ..shared import batchattachtoindex as shared_batchattachtoindex
from ..shared import batchattachtypedlink as shared_batchattachtypedlink
from ..shared import batchcreateindex as shared_batchcreateindex
from ..shared import batchcreateobject as shared_batchcreateobject
from ..shared import batchdeleteobject as shared_batchdeleteobject
from ..shared import batchdetachfromindex as shared_batchdetachfromindex
from ..shared import batchdetachobject as shared_batchdetachobject
from ..shared import batchdetachpolicy as shared_batchdetachpolicy
from ..shared import batchdetachtypedlink as shared_batchdetachtypedlink
from ..shared import batchremovefacetfromobject as shared_batchremovefacetfromobject
from ..shared import batchupdatelinkattributes as shared_batchupdatelinkattributes
from ..shared import batchupdateobjectattributes as shared_batchupdateobjectattributes
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchWriteOperation:
    r"""Represents the output of a <code>BatchWrite</code> operation."""
    
    add_facet_to_object: Optional[shared_batchaddfacettoobject.BatchAddFacetToObject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddFacetToObject'), 'exclude': lambda f: f is None }})  
    attach_object: Optional[shared_batchattachobject.BatchAttachObject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttachObject'), 'exclude': lambda f: f is None }})  
    attach_policy: Optional[shared_batchattachpolicy.BatchAttachPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttachPolicy'), 'exclude': lambda f: f is None }})  
    attach_to_index: Optional[shared_batchattachtoindex.BatchAttachToIndex] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttachToIndex'), 'exclude': lambda f: f is None }})  
    attach_typed_link: Optional[shared_batchattachtypedlink.BatchAttachTypedLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttachTypedLink'), 'exclude': lambda f: f is None }})  
    create_index: Optional[shared_batchcreateindex.BatchCreateIndex] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreateIndex'), 'exclude': lambda f: f is None }})  
    create_object: Optional[shared_batchcreateobject.BatchCreateObject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreateObject'), 'exclude': lambda f: f is None }})  
    delete_object: Optional[shared_batchdeleteobject.BatchDeleteObject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeleteObject'), 'exclude': lambda f: f is None }})  
    detach_from_index: Optional[shared_batchdetachfromindex.BatchDetachFromIndex] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DetachFromIndex'), 'exclude': lambda f: f is None }})  
    detach_object: Optional[shared_batchdetachobject.BatchDetachObject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DetachObject'), 'exclude': lambda f: f is None }})  
    detach_policy: Optional[shared_batchdetachpolicy.BatchDetachPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DetachPolicy'), 'exclude': lambda f: f is None }})  
    detach_typed_link: Optional[shared_batchdetachtypedlink.BatchDetachTypedLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DetachTypedLink'), 'exclude': lambda f: f is None }})  
    remove_facet_from_object: Optional[shared_batchremovefacetfromobject.BatchRemoveFacetFromObject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemoveFacetFromObject'), 'exclude': lambda f: f is None }})  
    update_link_attributes: Optional[shared_batchupdatelinkattributes.BatchUpdateLinkAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdateLinkAttributes'), 'exclude': lambda f: f is None }})  
    update_object_attributes: Optional[shared_batchupdateobjectattributes.BatchUpdateObjectAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdateObjectAttributes'), 'exclude': lambda f: f is None }})  
    