// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type EgipcSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type EgipcRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Policy Number
	Udf1 string `json:"UDF1"`
	// Customer Id
	Udf2 string `json:"UDF2"`
	// Policy Start Date
	Udf3 string `json:"UDF3"`
}

// EgipcRequestBodyFormatEnum - The format of the certificate in response.
type EgipcRequestBodyFormatEnum string

const (
	EgipcRequestBodyFormatEnumPdf EgipcRequestBodyFormatEnum = "pdf"
)

func (e *EgipcRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = EgipcRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EgipcRequestBodyFormatEnum: %s", s)
	}
}

// EgipcRequestBody - Request format
type EgipcRequestBody struct {
	CertificateParameters *EgipcRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format EgipcRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type EgipcRequest struct {
	// Request format
	Request  *EgipcRequestBody `request:"mediaType=application/json"`
	Security EgipcSecurity
}

type Egipc504ApplicationJSONErrorEnum string

const (
	Egipc504ApplicationJSONErrorEnumGatewayTimeout Egipc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Egipc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Egipc504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Egipc504ApplicationJSONErrorEnum: %s", s)
	}
}

type Egipc504ApplicationJSONErrorDescriptionEnum string

const (
	Egipc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Egipc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Egipc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Egipc504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Egipc504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Egipc504ApplicationJSON - Gateway timeout
type Egipc504ApplicationJSON struct {
	Error            *Egipc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Egipc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Egipc503ApplicationJSONErrorEnum string

const (
	Egipc503ApplicationJSONErrorEnumServiceUnavailable Egipc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Egipc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Egipc503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Egipc503ApplicationJSONErrorEnum: %s", s)
	}
}

type Egipc503ApplicationJSONErrorDescriptionEnum string

const (
	Egipc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Egipc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Egipc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Egipc503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Egipc503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Egipc503ApplicationJSON - Service unavailable
type Egipc503ApplicationJSON struct {
	Error            *Egipc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Egipc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Egipc502ApplicationJSONErrorEnum string

const (
	Egipc502ApplicationJSONErrorEnumBadGatewy Egipc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Egipc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Egipc502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Egipc502ApplicationJSONErrorEnum: %s", s)
	}
}

type Egipc502ApplicationJSONErrorDescriptionEnum string

const (
	Egipc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Egipc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Egipc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Egipc502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Egipc502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Egipc502ApplicationJSON - Bad gateway
type Egipc502ApplicationJSON struct {
	Error            *Egipc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Egipc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Egipc500ApplicationJSONErrorEnum string

const (
	Egipc500ApplicationJSONErrorEnumInternalServerError Egipc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Egipc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Egipc500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Egipc500ApplicationJSONErrorEnum: %s", s)
	}
}

type Egipc500ApplicationJSONErrorDescriptionEnum string

const (
	Egipc500ApplicationJSONErrorDescriptionEnumInternalServerError Egipc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Egipc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Egipc500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Egipc500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Egipc500ApplicationJSON - Internal server error
type Egipc500ApplicationJSON struct {
	Error            *Egipc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Egipc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Egipc404ApplicationJSONErrorEnum string

const (
	Egipc404ApplicationJSONErrorEnumRecordNotFound Egipc404ApplicationJSONErrorEnum = "record_not_found"
	Egipc404ApplicationJSONErrorEnumURLNotFound    Egipc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Egipc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Egipc404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Egipc404ApplicationJSONErrorEnum: %s", s)
	}
}

type Egipc404ApplicationJSONErrorDescriptionEnum string

const (
	Egipc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Egipc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Egipc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Egipc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Egipc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Egipc404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Egipc404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Egipc404ApplicationJSON - No record found
type Egipc404ApplicationJSON struct {
	Error            *Egipc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Egipc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Egipc401ApplicationJSONErrorEnum string

const (
	Egipc401ApplicationJSONErrorEnumInvalidAuthentication Egipc401ApplicationJSONErrorEnum = "invalid_authentication"
	Egipc401ApplicationJSONErrorEnumInvalidAuthorization  Egipc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Egipc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Egipc401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Egipc401ApplicationJSONErrorEnum: %s", s)
	}
}

type Egipc401ApplicationJSONErrorDescriptionEnum string

const (
	Egipc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Egipc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Egipc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Egipc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Egipc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Egipc401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Egipc401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Egipc401ApplicationJSON - Unauthorized access
type Egipc401ApplicationJSON struct {
	Error            *Egipc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Egipc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Egipc400ApplicationJSONErrorEnum string

const (
	Egipc400ApplicationJSONErrorEnumMissingParameter Egipc400ApplicationJSONErrorEnum = "missing_parameter"
	Egipc400ApplicationJSONErrorEnumInvalidParameter Egipc400ApplicationJSONErrorEnum = "invalid_parameter"
	Egipc400ApplicationJSONErrorEnumInvalidFormat    Egipc400ApplicationJSONErrorEnum = "invalid_format"
	Egipc400ApplicationJSONErrorEnumInvalidTxnid     Egipc400ApplicationJSONErrorEnum = "invalid_txnid"
	Egipc400ApplicationJSONErrorEnumInvalidConsentid Egipc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Egipc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Egipc400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Egipc400ApplicationJSONErrorEnum: %s", s)
	}
}

type Egipc400ApplicationJSONErrorDescriptionEnum string

const (
	Egipc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Egipc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Egipc400ApplicationJSONErrorDescriptionEnumBadRequest                              Egipc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Egipc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Egipc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Egipc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Egipc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Egipc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Egipc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Egipc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Egipc400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Egipc400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Egipc400ApplicationJSON - Bad request
type Egipc400ApplicationJSON struct {
	Error            *Egipc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Egipc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type EgipcResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Egipc400ApplicationJSONObject *Egipc400ApplicationJSON
	// Unauthorized access
	Egipc401ApplicationJSONObject *Egipc401ApplicationJSON
	// No record found
	Egipc404ApplicationJSONObject *Egipc404ApplicationJSON
	// Internal server error
	Egipc500ApplicationJSONObject *Egipc500ApplicationJSON
	// Bad gateway
	Egipc502ApplicationJSONObject *Egipc502ApplicationJSON
	// Service unavailable
	Egipc503ApplicationJSONObject *Egipc503ApplicationJSON
	// Gateway timeout
	Egipc504ApplicationJSONObject *Egipc504ApplicationJSON
}
