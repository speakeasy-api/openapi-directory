// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// TagsCountTypeEnum - Type of entity related to the tag
type TagsCountTypeEnum string

const (
	TagsCountTypeEnumTp TagsCountTypeEnum = "tp"
	TagsCountTypeEnumTl TagsCountTypeEnum = "tl"
	TagsCountTypeEnumDp TagsCountTypeEnum = "dp"
	TagsCountTypeEnumGr TagsCountTypeEnum = "gr"
)

func (e *TagsCountTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tp":
		fallthrough
	case "tl":
		fallthrough
	case "dp":
		fallthrough
	case "gr":
		*e = TagsCountTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TagsCountTypeEnum: %s", s)
	}
}

type TagsCountQueryParams struct {
	// Comma separated list of datapoints id to filter by
	Datapoints *string `queryParam:"style=form,explode=true,name=datapoints"`
	// Comma separated list of groups id to filter by
	Groups *string `queryParam:"style=form,explode=true,name=groups"`
	// Name of the tag
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Type of entity related to the tag
	Type *TagsCountTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type TagsCountRequest struct {
	QueryParams TagsCountQueryParams
}

type TagsCountResponse struct {
	ContentType  string
	StatusCode   int
	RawResponse  *http.Response
	SystemObject map[string]interface{}
}
