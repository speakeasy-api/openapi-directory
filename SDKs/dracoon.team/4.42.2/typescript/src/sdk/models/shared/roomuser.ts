/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NodePermissions } from "./nodepermissions";
import { PublicKeyContainer } from "./publickeycontainer";
import { UserInfo } from "./userinfo";
import { Expose, Type } from "class-transformer";

/**
 * User information
 */
export class RoomUser extends SpeakeasyBase {
  /**
   * &#128679; Deprecated since v4.11.0
   *
   * @remarks
   *
   * Display name
   *
   * use information from `UserInfo` instead to combine a display name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName: string;

  /**
   * &#128679; Deprecated since v4.11.0
   *
   * @remarks
   *
   * Email
   *
   * use `email` from `UserInfo` instead
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email: string;

  /**
   * &#128679; Deprecated since v4.11.0
   *
   * @remarks
   *
   * Unique identifier for the user
   *
   * use `id` from `UserInfo` instead
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Is user granted room permissions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isGranted" })
  isGranted: boolean;

  /**
   * &#128679; Deprecated since v4.11.0
   *
   * @remarks
   *
   * User login name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "login" })
  login: string;

  /**
   * Node permissions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "permissions" })
  @Type(() => NodePermissions)
  permissions?: NodePermissions;

  /**
   * Public key container
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publicKeyContainer" })
  @Type(() => PublicKeyContainer)
  publicKeyContainer?: PublicKeyContainer;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userInfo" })
  @Type(() => UserInfo)
  userInfo: UserInfo;
}
