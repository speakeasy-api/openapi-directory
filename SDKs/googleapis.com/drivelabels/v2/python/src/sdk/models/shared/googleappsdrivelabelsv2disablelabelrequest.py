"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleappsdrivelabelsv2lifecycledisabledpolicy as shared_googleappsdrivelabelsv2lifecycledisabledpolicy
from ..shared import googleappsdrivelabelsv2writecontrol as shared_googleappsdrivelabelsv2writecontrol
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleAppsDriveLabelsV2DisableLabelRequest:
    r"""Request to deprecate a published Label."""
    
    disabled_policy: Optional[shared_googleappsdrivelabelsv2lifecycledisabledpolicy.GoogleAppsDriveLabelsV2LifecycleDisabledPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabledPolicy'), 'exclude': lambda f: f is None }})
    r"""The policy that governs how to treat a disabled label, field, or selection choice in different contexts."""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCode'), 'exclude': lambda f: f is None }})
    r"""The BCP-47 language code to use for evaluating localized field labels. When not specified, values in the default configured language will be used."""  
    update_mask: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateMask'), 'exclude': lambda f: f is None }})
    r"""The fields that should be updated. At least one field must be specified. The root `disabled_policy` is implied and should not be specified. A single `*` can be used as short-hand for updating every field."""  
    use_admin_access: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useAdminAccess'), 'exclude': lambda f: f is None }})
    r"""Set to `true` in order to use the user's admin credentials. The server will verify the user is an admin for the Label before allowing access."""  
    write_control: Optional[shared_googleappsdrivelabelsv2writecontrol.GoogleAppsDriveLabelsV2WriteControl] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('writeControl'), 'exclude': lambda f: f is None }})
    r"""Provides control over how write requests are executed. When not specified, the last write wins."""  
    