<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Ontology 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns meta data of an ontology subset (slim)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOntologySubsetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOntologySubsetResponse
     */
	public function getOntologySubset(
        \OpenAPI\OpenAPI\Models\Operations\GetOntologySubsetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOntologySubsetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ontology/subset/{id}', \OpenAPI\OpenAPI\Models\Operations\GetOntologySubsetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOntologySubsetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns meta data of an ontology term
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermResponse
     */
	public function getOntologyTerm(
        \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ontology/term/{id}', \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns graph of an ontology term
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermGraphRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermGraphResponse
     */
	public function getOntologyTermGraph(
        \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermGraphRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermGraphResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ontology/term/{id}/graph', \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermGraphRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOntologyTermGraphRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermGraphResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Extract a subgraph from an ontology term
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermSubgraphRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermSubgraphResponse
     */
	public function getOntologyTermSubgraph(
        \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermSubgraphRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermSubgraphResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ontology/term/{id}/subgraph', \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermSubgraphRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOntologyTermSubgraphRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermSubgraphResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns subsets (slims) associated to an ontology term
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermSubsetsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermSubsetsResponse
     */
	public function getOntologyTermSubsets(
        \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermSubsetsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermSubsetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ontology/term/{id}/subsets', \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermSubsetsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermSubsetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns the ancestor ontology terms shared by two ontology terms
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermsSharedAncestorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermsSharedAncestorResponse
     */
	public function getOntologyTermsSharedAncestor(
        \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermsSharedAncestorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermsSharedAncestorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ontology/shared/{subject}/{object}', \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermsSharedAncestorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOntologyTermsSharedAncestorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}