"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class VideoStatusFailureReasonEnum(str, Enum):
    r"""This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed."""
    CONVERSION = 'conversion'
    INVALID_FILE = 'invalidFile'
    EMPTY_FILE = 'emptyFile'
    TOO_SMALL = 'tooSmall'
    CODEC = 'codec'
    UPLOAD_ABORTED = 'uploadAborted'

class VideoStatusLicenseEnum(str, Enum):
    r"""The video's license. @mutable youtube.videos.insert youtube.videos.update"""
    YOUTUBE = 'youtube'
    CREATIVE_COMMON = 'creativeCommon'

class VideoStatusPrivacyStatusEnum(str, Enum):
    r"""The video's privacy status."""
    PUBLIC = 'public'
    UNLISTED = 'unlisted'
    PRIVATE = 'private'

class VideoStatusRejectionReasonEnum(str, Enum):
    r"""This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected."""
    COPYRIGHT = 'copyright'
    INAPPROPRIATE = 'inappropriate'
    DUPLICATE = 'duplicate'
    TERMS_OF_USE = 'termsOfUse'
    UPLOADER_ACCOUNT_SUSPENDED = 'uploaderAccountSuspended'
    LENGTH = 'length'
    CLAIM = 'claim'
    UPLOADER_ACCOUNT_CLOSED = 'uploaderAccountClosed'
    TRADEMARK = 'trademark'
    LEGAL = 'legal'

class VideoStatusUploadStatusEnum(str, Enum):
    r"""The status of the uploaded video."""
    UPLOADED = 'uploaded'
    PROCESSED = 'processed'
    FAILED = 'failed'
    REJECTED = 'rejected'
    DELETED = 'deleted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoStatus:
    r"""Basic details about a video category, such as its localized title. Next Id: 18"""
    
    embeddable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embeddable'), 'exclude': lambda f: f is None }})
    r"""This value indicates if the video can be embedded on another website. @mutable youtube.videos.insert youtube.videos.update"""  
    failure_reason: Optional[VideoStatusFailureReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureReason'), 'exclude': lambda f: f is None }})
    r"""This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed."""  
    license: Optional[VideoStatusLicenseEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license'), 'exclude': lambda f: f is None }})
    r"""The video's license. @mutable youtube.videos.insert youtube.videos.update"""  
    made_for_kids: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('madeForKids'), 'exclude': lambda f: f is None }})  
    privacy_status: Optional[VideoStatusPrivacyStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacyStatus'), 'exclude': lambda f: f is None }})
    r"""The video's privacy status."""  
    public_stats_viewable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicStatsViewable'), 'exclude': lambda f: f is None }})
    r"""This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled. @mutable youtube.videos.insert youtube.videos.update"""  
    publish_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publishAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private.."""  
    rejection_reason: Optional[VideoStatusRejectionReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rejectionReason'), 'exclude': lambda f: f is None }})
    r"""This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected."""  
    self_declared_made_for_kids: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selfDeclaredMadeForKids'), 'exclude': lambda f: f is None }})  
    upload_status: Optional[VideoStatusUploadStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploadStatus'), 'exclude': lambda f: f is None }})
    r"""The status of the uploaded video."""  
    