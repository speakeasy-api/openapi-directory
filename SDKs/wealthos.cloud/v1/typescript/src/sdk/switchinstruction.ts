/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The Switch Instruction endpoints allow you to switch existing holdings (cash and investment products) to a new set of investment products via a single instruction. You can specify the holdings you want to sell along with a `mode` and `value` (e.g. number of units to be sold, total value of holding to be sold or % of holding to be sold) and the investment products you want to buy (using the proceeds of the sales and and/or free cash available in the pot). The buy instructions can also be specified with a `mode` and `value` (e.g. number of units to buy, total value of holding to be bought or % of proceeds to be used to buy specific investment product).
 *
 * @remarks
 *
 * You can view the status of your switch instruction at any point through the API (both the overall 'parent' switch instruction as well as the individual 'child' buy/sell transactions).
 */
export class SwitchInstruction {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Execute Switch Instruction
   *
   * @remarks
   * Send a switch instruction with details of the investment products to be sold, free cash to be used (if any) and investment products to be bought.
   */
  executeSwitchTrasaction(
    req: operations.ExecuteSwitchTrasactionRequest,
    security: operations.ExecuteSwitchTrasactionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ExecuteSwitchTrasactionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExecuteSwitchTrasactionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/tenant/transactions/v1/switch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ExecuteSwitchTrasactionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExecuteSwitchTrasactionResponse =
        new operations.ExecuteSwitchTrasactionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeSwitchTrasaction200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteSwitchTrasaction200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeSwitchTrasaction400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteSwitchTrasaction400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeSwitchTrasaction401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteSwitchTrasaction401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeSwitchTrasaction403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteSwitchTrasaction403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeSwitchTrasaction404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteSwitchTrasaction404ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeSwitchTrasaction409ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteSwitchTrasaction409ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeSwitchTrasaction429ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteSwitchTrasaction429ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.executeSwitchTrasaction500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExecuteSwitchTrasaction500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve Switch instruction from Switch ID
   *
   * @remarks
   * Retrieve the status of an existing switch instruction from the `switch_transaction_id`. If the status of the individual buy/sell transactions are required, you must send the request with include_details = `true`.
   */
  getSwitch(
    req: operations.GetSwitchRequest,
    security: operations.GetSwitchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSwitchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSwitchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tenant/transactions/v1/switch/{switch_transaction_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetSwitchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSwitchResponse =
        new operations.GetSwitchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSwitch200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetSwitch200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSwitch400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetSwitch400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSwitch401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetSwitch401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSwitch403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetSwitch403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSwitch404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetSwitch404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSwitch409ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetSwitch409ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSwitch429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetSwitch429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSwitch500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetSwitch500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
