/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Connection - Information about an Direct Connect connection.
 */
public class Connection {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("awsDevice")
    public String awsDevice;
    public Connection withAwsDevice(String awsDevice) {
        this.awsDevice = awsDevice;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("awsDeviceV2")
    public String awsDeviceV2;
    public Connection withAwsDeviceV2(String awsDeviceV2) {
        this.awsDeviceV2 = awsDeviceV2;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("awsLogicalDeviceId")
    public String awsLogicalDeviceId;
    public Connection withAwsLogicalDeviceId(String awsLogicalDeviceId) {
        this.awsLogicalDeviceId = awsLogicalDeviceId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bandwidth")
    public String bandwidth;
    public Connection withBandwidth(String bandwidth) {
        this.bandwidth = bandwidth;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectionId")
    public String connectionId;
    public Connection withConnectionId(String connectionId) {
        this.connectionId = connectionId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectionName")
    public String connectionName;
    public Connection withConnectionName(String connectionName) {
        this.connectionName = connectionName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectionState")
    public ConnectionStateEnum connectionState;
    public Connection withConnectionState(ConnectionStateEnum connectionState) {
        this.connectionState = connectionState;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptionMode")
    public String encryptionMode;
    public Connection withEncryptionMode(String encryptionMode) {
        this.encryptionMode = encryptionMode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasLogicalRedundancy")
    public HasLogicalRedundancyEnum hasLogicalRedundancy;
    public Connection withHasLogicalRedundancy(HasLogicalRedundancyEnum hasLogicalRedundancy) {
        this.hasLogicalRedundancy = hasLogicalRedundancy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jumboFrameCapable")
    public Boolean jumboFrameCapable;
    public Connection withJumboFrameCapable(Boolean jumboFrameCapable) {
        this.jumboFrameCapable = jumboFrameCapable;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lagId")
    public String lagId;
    public Connection withLagId(String lagId) {
        this.lagId = lagId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("loaIssueTime")
    public OffsetDateTime loaIssueTime;
    public Connection withLoaIssueTime(OffsetDateTime loaIssueTime) {
        this.loaIssueTime = loaIssueTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public Connection withLocation(String location) {
        this.location = location;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("macSecCapable")
    public Boolean macSecCapable;
    public Connection withMacSecCapable(Boolean macSecCapable) {
        this.macSecCapable = macSecCapable;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("macSecKeys")
    public MacSecKey[] macSecKeys;
    public Connection withMacSecKeys(MacSecKey[] macSecKeys) {
        this.macSecKeys = macSecKeys;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ownerAccount")
    public String ownerAccount;
    public Connection withOwnerAccount(String ownerAccount) {
        this.ownerAccount = ownerAccount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partnerName")
    public String partnerName;
    public Connection withPartnerName(String partnerName) {
        this.partnerName = partnerName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("portEncryptionStatus")
    public String portEncryptionStatus;
    public Connection withPortEncryptionStatus(String portEncryptionStatus) {
        this.portEncryptionStatus = portEncryptionStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("providerName")
    public String providerName;
    public Connection withProviderName(String providerName) {
        this.providerName = providerName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public String region;
    public Connection withRegion(String region) {
        this.region = region;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public Tag[] tags;
    public Connection withTags(Tag[] tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vlan")
    public Long vlan;
    public Connection withVlan(Long vlan) {
        this.vlan = vlan;
        return this;
    }
    
}
