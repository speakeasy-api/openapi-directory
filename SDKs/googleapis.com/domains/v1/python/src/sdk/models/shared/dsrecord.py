"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DsRecordAlgorithmEnum(str, Enum):
    r"""The algorithm used to generate the referenced DNSKEY."""
    ALGORITHM_UNSPECIFIED = 'ALGORITHM_UNSPECIFIED'
    RSAMD5 = 'RSAMD5'
    DH = 'DH'
    DSA = 'DSA'
    ECC = 'ECC'
    RSASHA1 = 'RSASHA1'
    DSANSEC3_SHA1 = 'DSANSEC3SHA1'
    RSASHA1_NSEC3_SHA1 = 'RSASHA1NSEC3SHA1'
    RSASHA256 = 'RSASHA256'
    RSASHA512 = 'RSASHA512'
    ECCGOST = 'ECCGOST'
    ECDSAP256_SHA256 = 'ECDSAP256SHA256'
    ECDSAP384_SHA384 = 'ECDSAP384SHA384'
    ED25519 = 'ED25519'
    ED448 = 'ED448'
    INDIRECT = 'INDIRECT'
    PRIVATEDNS = 'PRIVATEDNS'
    PRIVATEOID = 'PRIVATEOID'

class DsRecordDigestTypeEnum(str, Enum):
    r"""The hash function used to generate the digest of the referenced DNSKEY."""
    DIGEST_TYPE_UNSPECIFIED = 'DIGEST_TYPE_UNSPECIFIED'
    SHA1 = 'SHA1'
    SHA256 = 'SHA256'
    GOST3411 = 'GOST3411'
    SHA384 = 'SHA384'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DsRecord:
    r"""Defines a Delegation Signer (DS) record, which is needed to enable DNSSEC for a domain. It contains a digest (hash) of a DNSKEY record that must be present in the domain's DNS zone."""
    
    algorithm: Optional[DsRecordAlgorithmEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('algorithm'), 'exclude': lambda f: f is None }})
    r"""The algorithm used to generate the referenced DNSKEY."""  
    digest: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('digest'), 'exclude': lambda f: f is None }})
    r"""The digest generated from the referenced DNSKEY."""  
    digest_type: Optional[DsRecordDigestTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('digestType'), 'exclude': lambda f: f is None }})
    r"""The hash function used to generate the digest of the referenced DNSKEY."""  
    key_tag: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyTag'), 'exclude': lambda f: f is None }})
    r"""The key tag of the record. Must be set in range 0 -- 65535."""  
    