"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetNetworkApplianceTrafficShapingUplinkBandwidthRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONBandwidthLimitsCellular:
    r"""uplink cellular configued limits [optional]"""
    
    limit_down: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitDown'), 'exclude': lambda f: f is None }})
    r"""configured UP limit for the uplink (in Kbps).  Null indicated unlimited"""  
    limit_up: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitUp'), 'exclude': lambda f: f is None }})
    r"""configured UP limit for the uplink (in Kbps).  Null indicated unlimited"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONBandwidthLimitsWan1:
    r"""uplink wan1 configued limits [optional]"""
    
    limit_down: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitDown'), 'exclude': lambda f: f is None }})
    r"""configured UP limit for the uplink (in Kbps).  Null indicated unlimited"""  
    limit_up: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitUp'), 'exclude': lambda f: f is None }})
    r"""configured UP limit for the uplink (in Kbps).  Null indicated unlimited"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONBandwidthLimitsWan2:
    r"""uplink wan2 configued limits [optional]"""
    
    limit_down: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitDown'), 'exclude': lambda f: f is None }})
    r"""configured UP limit for the uplink (in Kbps).  Null indicated unlimited"""  
    limit_up: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitUp'), 'exclude': lambda f: f is None }})
    r"""configured UP limit for the uplink (in Kbps).  Null indicated unlimited"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONBandwidthLimits:
    r"""A hash uplink keys and their configured settings for the Appliance"""
    
    cellular: Optional[GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONBandwidthLimitsCellular] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cellular'), 'exclude': lambda f: f is None }})
    r"""uplink cellular configued limits [optional]"""  
    wan1: Optional[GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONBandwidthLimitsWan1] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wan1'), 'exclude': lambda f: f is None }})
    r"""uplink wan1 configued limits [optional]"""  
    wan2: Optional[GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONBandwidthLimitsWan2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wan2'), 'exclude': lambda f: f is None }})
    r"""uplink wan2 configued limits [optional]"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONCapabilitiesBandwidths:
    
    interface: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interface'), 'exclude': lambda f: f is None }})
    r"""name of uplink"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""limit in bytes (null indicates unlimited)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONCapabilities:
    
    bandwidths: Optional[list[GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONCapabilitiesBandwidths]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandwidths'), 'exclude': lambda f: f is None }})
    r"""array of uplink limits"""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""model number of appliance"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSON:
    r"""Successful operation"""
    
    bandwidth_limits: Optional[GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONBandwidthLimits] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandwidthLimits'), 'exclude': lambda f: f is None }})
    r"""A hash uplink keys and their configured settings for the Appliance"""  
    capabilities: Optional[list[GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONCapabilities]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capabilities'), 'exclude': lambda f: f is None }})
    r"""Array of appliances"""  
    

@dataclasses.dataclass
class GetNetworkApplianceTrafficShapingUplinkBandwidthResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_appliance_traffic_shaping_uplink_bandwidth_200_application_json_object: Optional[GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    