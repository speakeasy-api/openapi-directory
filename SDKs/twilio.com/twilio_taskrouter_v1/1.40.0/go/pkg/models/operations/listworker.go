// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

var ListWorkerServerList = []string{
	"https://taskrouter.twilio.com",
}

type ListWorkerSecurity struct {
	AccountSidAuthToken shared.SchemeAccountSidAuthToken `security:"scheme,type=http,subtype=basic"`
}

type ListWorkerPathParams struct {
	// The SID of the Workspace with the Workers to read.
	WorkspaceSid string `pathParam:"style=simple,explode=false,name=WorkspaceSid"`
}

type ListWorkerQueryParams struct {
	// The `activity_name` of the Worker resources to read.
	ActivityName *string `queryParam:"style=form,explode=true,name=ActivityName"`
	// The `activity_sid` of the Worker resources to read.
	ActivitySid *string `queryParam:"style=form,explode=true,name=ActivitySid"`
	// Whether to return only Worker resources that are available or unavailable. Can be `true`, `1`, or `yes` to return Worker resources that are available, and `false`, or any value returns the Worker resources that are not available.
	Available *string `queryParam:"style=form,explode=true,name=Available"`
	// The `friendly_name` of the Worker resources to read.
	FriendlyName *string `queryParam:"style=form,explode=true,name=FriendlyName"`
	// Sorting parameter for Workers
	Ordering *string `queryParam:"style=form,explode=true,name=Ordering"`
	// The page index. This value is simply for client state.
	Page *int64 `queryParam:"style=form,explode=true,name=Page"`
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int64 `queryParam:"style=form,explode=true,name=PageSize"`
	// The page token. This is provided by the API.
	PageToken *string `queryParam:"style=form,explode=true,name=PageToken"`
	// Filter by Workers that would match an expression on a TaskQueue. This is helpful for debugging which Workers would match a potential queue.
	TargetWorkersExpression *string `queryParam:"style=form,explode=true,name=TargetWorkersExpression"`
	// The `friendly_name` of the TaskQueue that the Workers to read are eligible for.
	TaskQueueName *string `queryParam:"style=form,explode=true,name=TaskQueueName"`
	// The SID of the TaskQueue that the Workers to read are eligible for.
	TaskQueueSid *string `queryParam:"style=form,explode=true,name=TaskQueueSid"`
}

type ListWorkerRequest struct {
	PathParams  ListWorkerPathParams
	QueryParams ListWorkerQueryParams
	Security    ListWorkerSecurity
	ServerURL   *string
}

type ListWorkerListWorkerResponseMeta struct {
	FirstPageURL    *string `json:"first_page_url,omitempty"`
	Key             *string `json:"key,omitempty"`
	NextPageURL     *string `json:"next_page_url,omitempty"`
	Page            *int64  `json:"page,omitempty"`
	PageSize        *int64  `json:"page_size,omitempty"`
	PreviousPageURL *string `json:"previous_page_url,omitempty"`
	URL             *string `json:"url,omitempty"`
}

// ListWorkerListWorkerResponse - OK
type ListWorkerListWorkerResponse struct {
	Meta    *ListWorkerListWorkerResponseMeta    `json:"meta,omitempty"`
	Workers []shared.TaskrouterV1WorkspaceWorker `json:"workers,omitempty"`
}

type ListWorkerResponse struct {
	ContentType string
	// OK
	ListWorkerResponse *ListWorkerListWorkerResponse
	StatusCode         int
	RawResponse        *http.Response
}
