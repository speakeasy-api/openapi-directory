"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import algorithmstatus_enum as shared_algorithmstatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AlgorithmSummary:
    r"""Provides summary information about an algorithm."""
    
    algorithm_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlgorithmArn') }})  
    algorithm_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlgorithmName') }})  
    algorithm_status: shared_algorithmstatus_enum.AlgorithmStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlgorithmStatus') }})  
    creation_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    algorithm_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlgorithmDescription'), 'exclude': lambda f: f is None }})  
    