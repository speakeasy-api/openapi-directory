"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetInvestorSecurity:
    
    api_secret_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' }})  
    

@dataclasses.dataclass
class GetInvestorRequest:
    
    investor_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'investor_id', 'style': 'simple', 'explode': False }})
    r"""Investor Id"""  
    x_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'x-api-key', 'style': 'simple', 'explode': False }})
    r"""ApiSecretKey"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestor500ApplicationJSON:
    r"""System error. Retry later. If the error persist, contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestor429ApplicationJSON:
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestor404ApplicationJSON:
    r"""The specified resource was not found"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestor403ApplicationJSON:
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestor401ApplicationJSON:
    r"""You do not have permissions to access this resource."""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestor400ApplicationJSON:
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestorRootTypeForInvestorAddress:
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""3 character country code inline with ISO 3166-1 alpha-3"""  
    postal_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postal_code') }})  
    address_line: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_line'), 'exclude': lambda f: f is None }})  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})  
    street_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_name'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestorRootTypeForInvestorDateOfBirth:
    
    day: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day'), 'exclude': lambda f: f is None }})
    r"""two digit string `DD`"""  
    month: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('month'), 'exclude': lambda f: f is None }})
    r"""two digit string `MM`"""  
    year: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('year'), 'exclude': lambda f: f is None }})
    r"""four digit string `YYYY`"""  
    
class GetInvestorRootTypeForInvestorDealingStatusEnum(str, Enum):
    INACTIVE = 'inactive'
    ACTIVE = 'active'

class GetInvestorRootTypeForInvestorEmploymentStatusEnum(str, Enum):
    r"""Status of an investor best describes their personal circumstances."""
    EMPLOYED = 'employed'
    SELF_EMPLOYED = 'self_employed'
    PENSIONER = 'pensioner'
    CHILD_UNDER_16 = 'child_under_16'
    IN_FULL_TIME_EDUCATION = 'in_full_time_education'
    UNEMPLOYED = 'unemployed'
    CARING_FOR_A_PERSON_OVER_16 = 'caring_for_a_person_over_16'
    CARING_FOR_A_PERSON_UNDER_16 = 'caring_for_a_person_under_16'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestorRootTypeForInvestorExpressionOfWishSippBeneficiaries:
    
    address: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})  
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name') }})  
    last_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name') }})  
    percentage: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentage') }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_number'), 'exclude': lambda f: f is None }})  
    tax_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_id'), 'exclude': lambda f: f is None }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestorRootTypeForInvestorExpressionOfWishSippNominees:
    
    address: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})  
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name') }})  
    last_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name') }})  
    percentage: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentage') }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_number'), 'exclude': lambda f: f is None }})  
    tax_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_id'), 'exclude': lambda f: f is None }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestorRootTypeForInvestorExpressionOfWish:
    r"""Beneficiary and nominee list of the expression of wish."""
    
    sipp_beneficiaries: Optional[list[GetInvestorRootTypeForInvestorExpressionOfWishSippBeneficiaries]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sipp_beneficiaries'), 'exclude': lambda f: f is None }})  
    sipp_nominees: Optional[list[GetInvestorRootTypeForInvestorExpressionOfWishSippNominees]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sipp_nominees'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestorRootTypeForInvestorIDNumbers:
    
    id_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id_number') }})  
    id_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id_type') }})  
    
class GetInvestorRootTypeForInvestorKycAmlStatusEnum(str, Enum):
    SUBMITTED = 'submitted'
    KYC_FAILED_ERROR = 'kyc_failed_error'
    PENDING = 'pending'
    CLEAR = 'clear'
    NOT_STARTED = 'not_started'

class GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum(str, Enum):
    PRIMARY = 'primary'
    ENHANCED = 'enhanced'
    FP12 = 'fp12'
    FP14 = 'fp14'
    IP14 = 'ip14'
    FP16 = 'fp16'
    IP16 = 'ip16'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestorRootTypeForInvestorLtaProtectionDetails:
    
    lta_protection_type: GetInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lta_protection_type') }})  
    lta_individual_protection_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lta_individual_protection_amount'), 'exclude': lambda f: f is None }})
    r"""Required when the lta_protection_type is ip14 or ip16."""  
    lta_primary_protection_factor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lta_primary_protection_factor'), 'exclude': lambda f: f is None }})
    r"""Required only when the lta_protection_type is primary"""  
    lta_protection_notification_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lta_protection_notification_number'), 'exclude': lambda f: f is None }})
    r"""Required when the lta_protection_type is fp14 or ip16."""  
    lta_protection_scheme_administrator_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lta_protection_scheme_administrator_reference'), 'exclude': lambda f: f is None }})
    r"""Required when the lta_protection_type is fp14 or ip16."""  
    
class GetInvestorRootTypeForInvestorStatusEnum(str, Enum):
    KYC_PENDING = 'kyc_pending'
    KYC_FAILED = 'kyc_failed'
    INACTIVE = 'inactive'
    ACTIVE = 'active'

class GetInvestorRootTypeForInvestorTaxResidenceEnum(str, Enum):
    r"""Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales"""
    GB_ENG = 'GB-ENG'
    GB_NIR = 'GB-NIR'
    GB_SCT = 'GB-SCT'
    GB_WLS = 'GB-WLS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestorRootTypeForInvestor:
    r"""JSON for the Investor resource type"""
    
    address: GetInvestorRootTypeForInvestorAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})  
    date_of_birth: GetInvestorRootTypeForInvestorDateOfBirth = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth') }})  
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name') }})  
    investor_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investor_id') }})  
    last_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name') }})  
    nationality: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nationality') }})
    r"""3 character country code inline with ISO 3166-1 alpha-3"""  
    tax_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_id') }})  
    tax_residency_compliant: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_residency_compliant') }})  
    bank_accounts: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank_accounts'), 'exclude': lambda f: f is None }})
    r"""Array of bank account IDs"""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    dealing_status: Optional[GetInvestorRootTypeForInvestorDealingStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dealing_status'), 'exclude': lambda f: f is None }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    employment_status: Optional[GetInvestorRootTypeForInvestorEmploymentStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employment_status'), 'exclude': lambda f: f is None }})
    r"""Status of an investor best describes their personal circumstances."""  
    expression_of_wish: Optional[GetInvestorRootTypeForInvestorExpressionOfWish] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expression_of_wish'), 'exclude': lambda f: f is None }})
    r"""Beneficiary and nominee list of the expression of wish."""  
    gender: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gender'), 'exclude': lambda f: f is None }})  
    home_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('home_number'), 'exclude': lambda f: f is None }})  
    id_numbers: Optional[list[GetInvestorRootTypeForInvestorIDNumbers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id_numbers'), 'exclude': lambda f: f is None }})  
    kyc_aml_status: Optional[GetInvestorRootTypeForInvestorKycAmlStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kyc_aml_status'), 'exclude': lambda f: f is None }})  
    kyc_aml_status_last_updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kyc_aml_status_last_updated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    lta_protection_details: Optional[list[GetInvestorRootTypeForInvestorLtaProtectionDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lta_protection_details'), 'exclude': lambda f: f is None }})
    r"""Additional details of the lifetime allowance protections of the investor"""  
    mifid_tax_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mifid_tax_id'), 'exclude': lambda f: f is None }})  
    mobile_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobile_number'), 'exclude': lambda f: f is None }})  
    mpaa_triggered: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mpaa_triggered'), 'exclude': lambda f: f is None }})
    r"""Whether the investor has triggered the Money Purchase Annual Allowance."""  
    mpaa_triggered_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mpaa_triggered_date'), 'exclude': lambda f: f is None }})
    r"""Date of triggering the Money Purchase Annual Allowance. It is required if mpaa_triggered is true."""  
    office_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('office_number'), 'exclude': lambda f: f is None }})  
    reference_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference_version'), 'exclude': lambda f: f is None }})  
    retirement_age: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retirement_age'), 'exclude': lambda f: f is None }})
    r"""Intended retirement age of the investor"""  
    status: Optional[GetInvestorRootTypeForInvestorStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    tax_residence: Optional[GetInvestorRootTypeForInvestorTaxResidenceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_residence'), 'exclude': lambda f: f is None }})
    r"""Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetInvestorResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_investor_400_application_json_object: Optional[GetInvestor400ApplicationJSON] = dataclasses.field(default=None)
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""  
    get_investor_401_application_json_object: Optional[GetInvestor401ApplicationJSON] = dataclasses.field(default=None)
    r"""You do not have permissions to access this resource."""  
    get_investor_403_application_json_object: Optional[GetInvestor403ApplicationJSON] = dataclasses.field(default=None)
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""  
    get_investor_404_application_json_object: Optional[GetInvestor404ApplicationJSON] = dataclasses.field(default=None)
    r"""The specified resource was not found"""  
    get_investor_429_application_json_object: Optional[GetInvestor429ApplicationJSON] = dataclasses.field(default=None)
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""  
    get_investor_500_application_json_object: Optional[GetInvestor500ApplicationJSON] = dataclasses.field(default=None)
    r"""System error. Retry later. If the error persist, contact WOS support"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    root_type_for_investor: Optional[GetInvestorRootTypeForInvestor] = dataclasses.field(default=None)
    r"""success"""  
    