"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class AuditLogs:
    r"""The Audit Logs API endpoints allow you to query audit log events across a
    namespace.
    
    For more information, see [Audit Log](https://docs.docker.com/docker-hub/audit-log/)
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def audit_logs_get_audit_actions(self, request: operations.AuditLogsGetAuditActionsRequest) -> operations.AuditLogsGetAuditActionsResponse:
        r"""Returns list of audit log actions.
        Get audit log actions for a namespace to be used as a filter for querying audit events.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AuditLogsGetAuditActionsRequest, base_url, '/v2/auditlogs/{account}/actions', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AuditLogsGetAuditActionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetAuditActionsResponse])
                res.get_audit_actions_response = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.audit_logs_get_audit_actions_429_application_json_any = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.audit_logs_get_audit_actions_500_application_json_any = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RPCStatus])
                res.rpc_status = out

        return res

    def audit_logs_get_audit_logs(self, request: operations.AuditLogsGetAuditLogsRequest) -> operations.AuditLogsGetAuditLogsResponse:
        r"""Returns list of audit log  events.
        Get audit log events for a given namespace.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AuditLogsGetAuditLogsRequest, base_url, '/v2/auditlogs/{account}', request)
        
        query_params = utils.get_query_params(operations.AuditLogsGetAuditLogsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AuditLogsGetAuditLogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetAuditLogsResponse])
                res.get_audit_logs_response = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.audit_logs_get_audit_logs_429_application_json_any = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.audit_logs_get_audit_logs_500_application_json_any = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RPCStatus])
                res.rpc_status = out

        return res

    