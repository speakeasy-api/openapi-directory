// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AuthorizationAttemptInfoFailureReasonEnum - Output only. Reason for failure of the authorization attempt for the domain.
type AuthorizationAttemptInfoFailureReasonEnum string

const (
	AuthorizationAttemptInfoFailureReasonEnumFailureReasonUnspecified AuthorizationAttemptInfoFailureReasonEnum = "FAILURE_REASON_UNSPECIFIED"
	AuthorizationAttemptInfoFailureReasonEnumConfig                   AuthorizationAttemptInfoFailureReasonEnum = "CONFIG"
	AuthorizationAttemptInfoFailureReasonEnumCaa                      AuthorizationAttemptInfoFailureReasonEnum = "CAA"
	AuthorizationAttemptInfoFailureReasonEnumRateLimited              AuthorizationAttemptInfoFailureReasonEnum = "RATE_LIMITED"
)

func (e AuthorizationAttemptInfoFailureReasonEnum) ToPointer() *AuthorizationAttemptInfoFailureReasonEnum {
	return &e
}

func (e *AuthorizationAttemptInfoFailureReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FAILURE_REASON_UNSPECIFIED":
		fallthrough
	case "CONFIG":
		fallthrough
	case "CAA":
		fallthrough
	case "RATE_LIMITED":
		*e = AuthorizationAttemptInfoFailureReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthorizationAttemptInfoFailureReasonEnum: %v", v)
	}
}

// AuthorizationAttemptInfoStateEnum - Output only. State of the domain for managed certificate issuance.
type AuthorizationAttemptInfoStateEnum string

const (
	AuthorizationAttemptInfoStateEnumStateUnspecified AuthorizationAttemptInfoStateEnum = "STATE_UNSPECIFIED"
	AuthorizationAttemptInfoStateEnumAuthorizing      AuthorizationAttemptInfoStateEnum = "AUTHORIZING"
	AuthorizationAttemptInfoStateEnumAuthorized       AuthorizationAttemptInfoStateEnum = "AUTHORIZED"
	AuthorizationAttemptInfoStateEnumFailed           AuthorizationAttemptInfoStateEnum = "FAILED"
)

func (e AuthorizationAttemptInfoStateEnum) ToPointer() *AuthorizationAttemptInfoStateEnum {
	return &e
}

func (e *AuthorizationAttemptInfoStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "AUTHORIZING":
		fallthrough
	case "AUTHORIZED":
		fallthrough
	case "FAILED":
		*e = AuthorizationAttemptInfoStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthorizationAttemptInfoStateEnum: %v", v)
	}
}

// AuthorizationAttemptInfo - State of the latest attempt to authorize a domain for certificate issuance.
type AuthorizationAttemptInfo struct {
	// Output only. Human readable explanation for reaching the state. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use FailureReason enum.
	Details *string `json:"details,omitempty"`
	// Domain name of the authorization attempt.
	Domain *string `json:"domain,omitempty"`
	// Output only. Reason for failure of the authorization attempt for the domain.
	FailureReason *AuthorizationAttemptInfoFailureReasonEnum `json:"failureReason,omitempty"`
	// Output only. State of the domain for managed certificate issuance.
	State *AuthorizationAttemptInfoStateEnum `json:"state,omitempty"`
}
