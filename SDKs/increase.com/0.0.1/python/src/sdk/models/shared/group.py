"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils

class GroupAchDebitStatusEnum(str, Enum):
    r"""If the Group is allowed to create ACH debits."""
    DISABLED = 'disabled'
    ENABLED = 'enabled'

class GroupActivationStatusEnum(str, Enum):
    r"""If the Group is activated or not."""
    UNACTIVATED = 'unactivated'
    ACTIVATED = 'activated'

class GroupTypeEnum(str, Enum):
    r"""A constant representing the object's type. For this resource it will always be `group`."""
    GROUP = 'group'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Group:
    r"""Groups represent organizations using Increase. You can retrieve information about your own organization via the API, or (more commonly) OAuth platforms can retrieve information about the organizations that have granted them access."""
    
    ach_debit_status: GroupAchDebitStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ach_debit_status') }})
    r"""If the Group is allowed to create ACH debits."""  
    activation_status: GroupActivationStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activation_status') }})
    r"""If the Group is activated or not."""  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Group was created."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The Group identifier."""  
    type: GroupTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""A constant representing the object's type. For this resource it will always be `group`."""  
    