"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class MXWarmSpareSettings:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_network_warm_spare_settings(self, request: operations.GetNetworkWarmSpareSettingsRequest) -> operations.GetNetworkWarmSpareSettingsResponse:
        r"""Return MX warm spare settings
        Return MX warm spare settings
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkWarmSpareSettingsRequest, base_url, '/networks/{networkId}/warmSpareSettings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkWarmSpareSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_warm_spare_settings_200_application_json_object = out

        return res

    def swap_network_warm_spare(self, request: operations.SwapNetworkWarmSpareRequest) -> operations.SwapNetworkWarmSpareResponse:
        r"""Swap MX primary and warm spare appliances
        Swap MX primary and warm spare appliances
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SwapNetworkWarmSpareRequest, base_url, '/networks/{networkId}/swapWarmSpare', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SwapNetworkWarmSpareResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.swap_network_warm_spare_200_application_json_object = out

        return res

    def update_network_warm_spare_settings(self, request: operations.UpdateNetworkWarmSpareSettingsRequest) -> operations.UpdateNetworkWarmSpareSettingsResponse:
        r"""Update MX warm spare settings
        Update MX warm spare settings
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkWarmSpareSettingsRequest, base_url, '/networks/{networkId}/warmSpareSettings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkWarmSpareSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_warm_spare_settings_200_application_json_object = out

        return res

    