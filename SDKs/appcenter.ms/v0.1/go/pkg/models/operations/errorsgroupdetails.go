// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ErrorsGroupDetailsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ErrorsGroupDetailsRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the error group
	ErrorGroupID string `pathParam:"style=simple,explode=false,name=errorGroupId"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnumConflict            ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type ErrorsGroupDetailsDefaultApplicationJSONError struct {
	Code    ErrorsGroupDetailsDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                `json:"message"`
}

// ErrorsGroupDetailsDefaultApplicationJSON - Error code with reason
type ErrorsGroupDetailsDefaultApplicationJSON struct {
	Error ErrorsGroupDetailsDefaultApplicationJSONError `json:"error"`
}

// ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnum - programming language of the frame
type ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnum string

const (
	ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnumJavaScript   ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnum = "JavaScript"
	ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnumCSharp       ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnum = "CSharp"
	ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnumObjectiveC   ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnum = "Objective-C"
	ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnumObjectiveCpp ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnum = "Objective-Cpp"
	ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnumCpp          ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnum = "Cpp"
	ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnumC            ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnum = "C"
	ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnumSwift        ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnum = "Swift"
	ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnumJava         ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnum = "Java"
	ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnumUnknown      ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnum = "Unknown"
)

func (e *ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "JavaScript":
		fallthrough
	case "CSharp":
		fallthrough
	case "Objective-C":
		fallthrough
	case "Objective-Cpp":
		fallthrough
	case "Cpp":
		fallthrough
	case "C":
		fallthrough
	case "Swift":
		fallthrough
	case "Java":
		fallthrough
	case "Unknown":
		*e = ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnum: %s", s)
	}
}

type ErrorsGroupDetails200ApplicationJSONReasonFrames struct {
	// this line isn't from any framework
	AppCode *bool `json:"appCode,omitempty"`
	// is a class method
	ClassMethod *bool `json:"classMethod,omitempty"`
	// name of the class
	ClassName *string `json:"className,omitempty"`
	// Formatted frame string
	CodeFormatted *string `json:"codeFormatted,omitempty"`
	// Unformatted Frame string
	CodeRaw *string `json:"codeRaw,omitempty"`
	// Exception type.
	ExceptionType *string `json:"exceptionType,omitempty"`
	// name of the file
	File *string `json:"file,omitempty"`
	// Name of the framework
	FrameworkName *string `json:"frameworkName,omitempty"`
	// programming language of the frame
	Language *ErrorsGroupDetails200ApplicationJSONReasonFramesLanguageEnum `json:"language,omitempty"`
	// line number
	Line *int64 `json:"line,omitempty"`
	// name of the method
	Method *string `json:"method,omitempty"`
	// parameters of the frames method
	MethodParams *string `json:"methodParams,omitempty"`
	// OS exception type. (aka. SIGNAL)
	OsExceptionType *string `json:"osExceptionType,omitempty"`
}

type ErrorsGroupDetails200ApplicationJSONStateEnum string

const (
	ErrorsGroupDetails200ApplicationJSONStateEnumOpen    ErrorsGroupDetails200ApplicationJSONStateEnum = "open"
	ErrorsGroupDetails200ApplicationJSONStateEnumClosed  ErrorsGroupDetails200ApplicationJSONStateEnum = "closed"
	ErrorsGroupDetails200ApplicationJSONStateEnumIgnored ErrorsGroupDetails200ApplicationJSONStateEnum = "ignored"
)

func (e *ErrorsGroupDetails200ApplicationJSONStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "open":
		fallthrough
	case "closed":
		fallthrough
	case "ignored":
		*e = ErrorsGroupDetails200ApplicationJSONStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsGroupDetails200ApplicationJSONStateEnum: %s", s)
	}
}

// ErrorsGroupDetails200ApplicationJSON - Error group details
type ErrorsGroupDetails200ApplicationJSON struct {
	Annotation           *string                                            `json:"annotation,omitempty"`
	AppBuild             *string                                            `json:"appBuild,omitempty"`
	AppVersion           string                                             `json:"appVersion"`
	CodeRaw              *string                                            `json:"codeRaw,omitempty"`
	Count                int64                                              `json:"count"`
	DeviceCount          int64                                              `json:"deviceCount"`
	ErrorGroupID         string                                             `json:"errorGroupId"`
	ExceptionAppCode     *bool                                              `json:"exceptionAppCode,omitempty"`
	ExceptionClassMethod *bool                                              `json:"exceptionClassMethod,omitempty"`
	ExceptionClassName   *string                                            `json:"exceptionClassName,omitempty"`
	ExceptionFile        *string                                            `json:"exceptionFile,omitempty"`
	ExceptionLine        *string                                            `json:"exceptionLine,omitempty"`
	ExceptionMessage     *string                                            `json:"exceptionMessage,omitempty"`
	ExceptionMethod      *string                                            `json:"exceptionMethod,omitempty"`
	ExceptionType        *string                                            `json:"exceptionType,omitempty"`
	FirstOccurrence      time.Time                                          `json:"firstOccurrence"`
	Hidden               *bool                                              `json:"hidden,omitempty"`
	LastOccurrence       time.Time                                          `json:"lastOccurrence"`
	ReasonFrames         []ErrorsGroupDetails200ApplicationJSONReasonFrames `json:"reasonFrames,omitempty"`
	State                ErrorsGroupDetails200ApplicationJSONStateEnum      `json:"state"`
}

type ErrorsGroupDetailsResponse struct {
	ContentType string
	// Error group details
	ErrorsGroupDetails200ApplicationJSONObject *ErrorsGroupDetails200ApplicationJSON
	// Error code with reason
	ErrorsGroupDetailsDefaultApplicationJSONObject *ErrorsGroupDetailsDefaultApplicationJSON
	StatusCode                                     int
	RawResponse                                    *http.Response
}
