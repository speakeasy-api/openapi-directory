"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class RoadDistance:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def confirm_carbon_offset5(self, request: operations.ConfirmCarbonOffset5RequestBody, server_url: Optional[str] = None) -> operations.ConfirmCarbonOffset5Response:
        r"""confirmCarbonOffset"""
        base_url = operations.CONFIRM_CARBON_OFFSET5_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/roadDistance/confirmCarbonOffset'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfirmCarbonOffset5Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def confirm_payment5(self, request: operations.ConfirmPayment5RequestBody, server_url: Optional[str] = None) -> operations.ConfirmPayment5Response:
        r"""confirmPayment"""
        base_url = operations.CONFIRM_PAYMENT5_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/roadDistance/confirmPayment'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfirmPayment5Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def confirm_payment_of_transaction5(self, request: operations.ConfirmPaymentOfTransaction5RequestBody, server_url: Optional[str] = None) -> operations.ConfirmPaymentOfTransaction5Response:
        r"""confirmTransaction"""
        base_url = operations.CONFIRM_PAYMENT_OF_TRANSACTION5_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/roadDistance/confirmTransaction'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfirmPaymentOfTransaction5Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def confirms_planting5(self, request: operations.ConfirmsPlanting5RequestBody, server_url: Optional[str] = None) -> operations.ConfirmsPlanting5Response:
        r"""confirmPlanting"""
        base_url = operations.CONFIRMS_PLANTING5_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/roadDistance/confirmPlanting'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfirmsPlanting5Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def road_distance(self, request: operations.RoadDistanceRequestBody, server_url: Optional[str] = None) -> operations.RoadDistanceResponse:
        r"""RoadDistance"""
        base_url = operations.ROAD_DISTANCE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/roadDistance'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RoadDistanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    