"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class JobStateEnum(str, Enum):
    r"""Output only. The current state of the Job."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    DISABLED = 'DISABLED'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    ABORTED = 'ABORTED'
    SKIPPED = 'SKIPPED'
    IGNORED = 'IGNORED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Job:
    r"""Job represents an operation for a `Rollout`."""
    
    advance_child_rollout_job: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advanceChildRolloutJob'), 'exclude': lambda f: f is None }})
    r"""An advanceChildRollout Job."""  
    create_child_rollout_job: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createChildRolloutJob'), 'exclude': lambda f: f is None }})
    r"""A createChildRollout Job."""  
    deploy_job: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deployJob'), 'exclude': lambda f: f is None }})
    r"""A deploy Job."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Output only. The ID of the Job."""  
    job_run: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobRun'), 'exclude': lambda f: f is None }})
    r"""Output only. The name of the `JobRun` responsible for the most recent invocation of this Job."""  
    skip_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skipMessage'), 'exclude': lambda f: f is None }})
    r"""Output only. Additional information on why the Job was skipped, if available."""  
    state: Optional[JobStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The current state of the Job."""  
    verify_job: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verifyJob'), 'exclude': lambda f: f is None }})
    r"""A verify Job."""  
    