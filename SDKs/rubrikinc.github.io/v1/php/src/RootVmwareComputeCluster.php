<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootVmwareComputeCluster 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get asynchronous request details for VMware cluster
     * 
     * Get the details of an asynchronous request that involves a VMware compute cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAsyncRequestStatusForComputeClusterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAsyncRequestStatusForComputeClusterResponse
     */
	public function getAsyncRequestStatusForComputeCluster(
        \OpenAPI\OpenAPI\Models\Operations\GetAsyncRequestStatusForComputeClusterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAsyncRequestStatusForComputeClusterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vmware/compute_cluster/request/{id}', \OpenAPI\OpenAPI\Models\Operations\GetAsyncRequestStatusForComputeClusterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAsyncRequestStatusForComputeClusterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get details for the compute cluster
     * 
     * Get details for the compute cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetComputeClusterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetComputeClusterResponse
     */
	public function getComputeCluster(
        \OpenAPI\OpenAPI\Models\Operations\GetComputeClusterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetComputeClusterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vmware/compute_cluster/{id}', \OpenAPI\OpenAPI\Models\Operations\GetComputeClusterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetComputeClusterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->computeClusterDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ComputeClusterDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the ioFilters on the VMware compute cluster with a specific ID
     * 
     * Get the summary of the ioFilters on the VMware compute cluster with a specific ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIoFiltersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIoFiltersResponse
     */
	public function getIoFilters(
        \OpenAPI\OpenAPI\Models\Operations\GetIoFiltersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIoFiltersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vmware/compute_cluster/{id}/io_filter', \OpenAPI\OpenAPI\Models\Operations\GetIoFiltersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIoFiltersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ioFilterSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IoFilterSummaryListResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Install the Rubrik ioFilter to the VMware cluster with a specific ID
     * 
     * Install the latest version of Rubrik ioFilter to the VMware cluster with a specific ID. The cluster must be in maintenance mode to install the ioFilter successfully. The vCenter of the VMware compute cluster must be of version 6.7 and above.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InstallIoFilterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InstallIoFilterResponse
     */
	public function installIoFilter(
        \OpenAPI\OpenAPI\Models\Operations\InstallIoFilterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InstallIoFilterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vmware/compute_cluster/{id}/install_io_filter', \OpenAPI\OpenAPI\Models\Operations\InstallIoFilterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "fullyQualifiedDomainNameInfo", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InstallIoFilterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get all the clusters belonging to this datacenter
     * 
     * Get all the clusters belonging to this datacenter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryComputeClusterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryComputeClusterResponse
     */
	public function queryComputeCluster(
        \OpenAPI\OpenAPI\Models\Operations\QueryComputeClusterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryComputeClusterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vmware/compute_cluster');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryComputeClusterRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryComputeClusterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->computeClusterSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ComputeClusterSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Uninstall the Rubrik ioFilter from the VMware cluster with a specific ID
     * 
     * Uninstall the Rubrik ioFilter from the VMware cluster with a specific ID. The cluster must be in maintenance mode to uninstall the ioFilter successfully. The vCenter of the VMware compute cluster must be of version 6.7 and above.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UninstallIoFilterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UninstallIoFilterResponse
     */
	public function uninstallIoFilter(
        \OpenAPI\OpenAPI\Models\Operations\UninstallIoFilterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UninstallIoFilterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vmware/compute_cluster/{id}/uninstall_io_filter', \OpenAPI\OpenAPI\Models\Operations\UninstallIoFilterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UninstallIoFilterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Modify information for a VMware compute cluster
     * 
     * Update the configuredSlaDomainId for a VMware compute cluster with a specific ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateComputeClusterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateComputeClusterResponse
     */
	public function updateComputeCluster(
        \OpenAPI\OpenAPI\Models\Operations\UpdateComputeClusterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateComputeClusterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vmware/compute_cluster/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateComputeClusterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "computeClusterUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateComputeClusterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->computeClusterDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ComputeClusterDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upgrade the Rubrik ioFilter for the VMware cluster with a specific ID
     * 
     * Upgrade the Rubrik ioFilter for a VMware cluster with a specific ID. The cluster must be in maintenance mode to upgrade the ioFilter successfully. The vCenter of the VMware compute cluster must be of version 6.7 and above.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpgradeIoFilterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpgradeIoFilterResponse
     */
	public function upgradeIoFilter(
        \OpenAPI\OpenAPI\Models\Operations\UpgradeIoFilterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpgradeIoFilterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vmware/compute_cluster/{id}/upgrade_io_filter', \OpenAPI\OpenAPI\Models\Operations\UpgradeIoFilterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "fullyQualifiedDomainNameInfo", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpgradeIoFilterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}