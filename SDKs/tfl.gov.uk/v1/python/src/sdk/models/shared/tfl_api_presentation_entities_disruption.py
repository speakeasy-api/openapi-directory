"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import tfl_api_presentation_entities_disruptedroute as shared_tfl_api_presentation_entities_disruptedroute
from ..shared import tfl_api_presentation_entities_stoppoint as shared_tfl_api_presentation_entities_stoppoint
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class TflAPIPresentationEntitiesDisruptionCategoryEnum(str, Enum):
    r"""Gets or sets the category of this dispruption."""
    UNDEFINED = 'Undefined'
    REAL_TIME = 'RealTime'
    PLANNED_WORK = 'PlannedWork'
    INFORMATION = 'Information'
    EVENT = 'Event'
    CROWDING = 'Crowding'
    STATUS_ALERT = 'StatusAlert'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesDisruption:
    r"""Represents a disruption to a route within the transport network."""
    
    additional_info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalInfo'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the additionaInfo of this disruption."""  
    affected_routes: Optional[list[shared_tfl_api_presentation_entities_disruptedroute.TflAPIPresentationEntitiesDisruptedRoute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('affectedRoutes'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the routes affected by this disruption"""  
    affected_stops: Optional[list[shared_tfl_api_presentation_entities_stoppoint.TflAPIPresentationEntitiesStopPoint]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('affectedStops'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the stops affected by this disruption"""  
    category: Optional[TflAPIPresentationEntitiesDisruptionCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the category of this dispruption."""  
    category_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryDescription'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the description of the category."""  
    closure_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closureText'), 'exclude': lambda f: f is None }})
    r"""Text describing the closure type"""  
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the date/time when this disruption was created."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the description of this disruption."""  
    last_update: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the date/time when this disruption was last updated."""  
    summary: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the summary of this disruption."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the disruption type of this dispruption."""  
    