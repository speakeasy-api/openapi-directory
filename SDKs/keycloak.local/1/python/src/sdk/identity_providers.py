"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class IdentityProviders:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_realm_identity_provider_instances_alias_(self, request: operations.DeleteRealmIdentityProviderInstancesAliasRequest) -> operations.DeleteRealmIdentityProviderInstancesAliasResponse:
        r"""Delete the identity provider"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmIdentityProviderInstancesAliasRequest, base_url, '/{realm}/identity-provider/instances/{alias}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmIdentityProviderInstancesAliasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_identity_provider_instances_alias_mappers_id_(self, request: operations.DeleteRealmIdentityProviderInstancesAliasMappersIDRequest) -> operations.DeleteRealmIdentityProviderInstancesAliasMappersIDResponse:
        r"""Delete a mapper for the identity provider"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmIdentityProviderInstancesAliasMappersIDRequest, base_url, '/{realm}/identity-provider/instances/{alias}/mappers/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmIdentityProviderInstancesAliasMappersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_identity_provider_instances(self, request: operations.GetRealmIdentityProviderInstancesRequest) -> operations.GetRealmIdentityProviderInstancesResponse:
        r"""Get identity providers"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmIdentityProviderInstancesRequest, base_url, '/{realm}/identity-provider/instances', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmIdentityProviderInstancesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.IdentityProviderRepresentation]])
                res.identity_provider_representations = out

        return res

    def get_realm_identity_provider_instances_alias_(self, request: operations.GetRealmIdentityProviderInstancesAliasRequest) -> operations.GetRealmIdentityProviderInstancesAliasResponse:
        r"""Get the identity provider"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmIdentityProviderInstancesAliasRequest, base_url, '/{realm}/identity-provider/instances/{alias}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmIdentityProviderInstancesAliasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.IdentityProviderRepresentation])
                res.identity_provider_representation = out

        return res

    def get_realm_identity_provider_instances_alias_export(self, request: operations.GetRealmIdentityProviderInstancesAliasExportRequest) -> operations.GetRealmIdentityProviderInstancesAliasExportResponse:
        r"""Export public broker configuration for identity provider"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmIdentityProviderInstancesAliasExportRequest, base_url, '/{realm}/identity-provider/instances/{alias}/export', request)
        
        query_params = utils.get_query_params(operations.GetRealmIdentityProviderInstancesAliasExportRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmIdentityProviderInstancesAliasExportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_identity_provider_instances_alias_management_permissions(self, request: operations.GetRealmIdentityProviderInstancesAliasManagementPermissionsRequest) -> operations.GetRealmIdentityProviderInstancesAliasManagementPermissionsResponse:
        r"""Return object stating whether client Authorization permissions have been initialized or not and a reference"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmIdentityProviderInstancesAliasManagementPermissionsRequest, base_url, '/{realm}/identity-provider/instances/{alias}/management/permissions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmIdentityProviderInstancesAliasManagementPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagementPermissionReference])
                res.management_permission_reference = out

        return res

    def get_realm_identity_provider_instances_alias_mapper_types(self, request: operations.GetRealmIdentityProviderInstancesAliasMapperTypesRequest) -> operations.GetRealmIdentityProviderInstancesAliasMapperTypesResponse:
        r"""Get mapper types for identity provider"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmIdentityProviderInstancesAliasMapperTypesRequest, base_url, '/{realm}/identity-provider/instances/{alias}/mapper-types', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmIdentityProviderInstancesAliasMapperTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_identity_provider_instances_alias_mappers(self, request: operations.GetRealmIdentityProviderInstancesAliasMappersRequest) -> operations.GetRealmIdentityProviderInstancesAliasMappersResponse:
        r"""Get mappers for identity provider"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmIdentityProviderInstancesAliasMappersRequest, base_url, '/{realm}/identity-provider/instances/{alias}/mappers', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmIdentityProviderInstancesAliasMappersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.IdentityProviderMapperRepresentation]])
                res.identity_provider_mapper_representations = out

        return res

    def get_realm_identity_provider_instances_alias_mappers_id_(self, request: operations.GetRealmIdentityProviderInstancesAliasMappersIDRequest) -> operations.GetRealmIdentityProviderInstancesAliasMappersIDResponse:
        r"""Get mapper by id for the identity provider"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmIdentityProviderInstancesAliasMappersIDRequest, base_url, '/{realm}/identity-provider/instances/{alias}/mappers/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmIdentityProviderInstancesAliasMappersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.IdentityProviderMapperRepresentation])
                res.identity_provider_mapper_representation = out

        return res

    def get_realm_identity_provider_providers_provider_id_(self, request: operations.GetRealmIdentityProviderProvidersProviderIDRequest) -> operations.GetRealmIdentityProviderProvidersProviderIDResponse:
        r"""Get identity providers"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmIdentityProviderProvidersProviderIDRequest, base_url, '/{realm}/identity-provider/providers/{provider_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmIdentityProviderProvidersProviderIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_identity_provider_import_config(self, request: operations.PostRealmIdentityProviderImportConfigRequest) -> operations.PostRealmIdentityProviderImportConfigResponse:
        r"""Import identity provider from uploaded JSON file"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmIdentityProviderImportConfigRequest, base_url, '/{realm}/identity-provider/import-config', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmIdentityProviderImportConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.post_realm_identity_provider_import_config_2_xx_application_json_object = out

        return res

    def post_realm_identity_provider_instances(self, request: operations.PostRealmIdentityProviderInstancesRequest) -> operations.PostRealmIdentityProviderInstancesResponse:
        r"""Create a new identity provider"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmIdentityProviderInstancesRequest, base_url, '/{realm}/identity-provider/instances', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identity_provider_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmIdentityProviderInstancesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_identity_provider_instances_alias_mappers(self, request: operations.PostRealmIdentityProviderInstancesAliasMappersRequest) -> operations.PostRealmIdentityProviderInstancesAliasMappersResponse:
        r"""Add a mapper to identity provider"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmIdentityProviderInstancesAliasMappersRequest, base_url, '/{realm}/identity-provider/instances/{alias}/mappers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identity_provider_mapper_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmIdentityProviderInstancesAliasMappersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_identity_provider_instances_alias_(self, request: operations.PutRealmIdentityProviderInstancesAliasRequest) -> operations.PutRealmIdentityProviderInstancesAliasResponse:
        r"""Update the identity provider"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmIdentityProviderInstancesAliasRequest, base_url, '/{realm}/identity-provider/instances/{alias}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identity_provider_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmIdentityProviderInstancesAliasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_identity_provider_instances_alias_management_permissions(self, request: operations.PutRealmIdentityProviderInstancesAliasManagementPermissionsRequest) -> operations.PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse:
        r"""Return object stating whether client Authorization permissions have been initialized or not and a reference"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmIdentityProviderInstancesAliasManagementPermissionsRequest, base_url, '/{realm}/identity-provider/instances/{alias}/management/permissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "management_permission_reference", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagementPermissionReference])
                res.management_permission_reference = out

        return res

    def put_realm_identity_provider_instances_alias_mappers_id_(self, request: operations.PutRealmIdentityProviderInstancesAliasMappersIDRequest) -> operations.PutRealmIdentityProviderInstancesAliasMappersIDResponse:
        r"""Update a mapper for the identity provider"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmIdentityProviderInstancesAliasMappersIDRequest, base_url, '/{realm}/identity-provider/instances/{alias}/mappers/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identity_provider_mapper_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmIdentityProviderInstancesAliasMappersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    