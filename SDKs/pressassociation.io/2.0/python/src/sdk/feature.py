"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Feature:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_feature(self, request: operations.GetFeatureRequest, security: operations.GetFeatureSecurity) -> operations.GetFeatureResponse:
        r"""Feature Detail
        Return the content of the selected feature.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFeatureRequest, base_url, '/feature/{featureId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFeatureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_feature_200_application_json_object = out

        return res

    def list_feature_types(self) -> operations.ListFeatureTypesResponse:
        r"""Feature Type Collection
        Return a collection of Feature Types.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/feature-type'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListFeatureTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.list_feature_types_200_application_json_object = out

        return res

    def list_features(self, request: operations.ListFeaturesRequest, security: operations.ListFeaturesSecurity) -> operations.ListFeaturesResponse:
        r"""Feature Collection
        Return a collection of Feature.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/feature'
        
        query_params = utils.get_query_params(operations.ListFeaturesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListFeaturesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.list_features_200_application_json_object = out

        return res

    