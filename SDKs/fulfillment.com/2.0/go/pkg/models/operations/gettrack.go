// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type GetTrackQueryParams struct {
	TrackingNumber *string `queryParam:"style=form,explode=true,name=trackingNumber"`
}

type GetTrackRequest struct {
	QueryParams GetTrackQueryParams
}

type GetTrackTrackingResponseFeatureGeometryCoordinatesType string

const (
	GetTrackTrackingResponseFeatureGeometryCoordinatesTypeArrayOfarrayOfnumber GetTrackTrackingResponseFeatureGeometryCoordinatesType = "arrayOfarrayOfnumber"
	GetTrackTrackingResponseFeatureGeometryCoordinatesTypeArrayOfnumber        GetTrackTrackingResponseFeatureGeometryCoordinatesType = "arrayOfnumber"
)

type GetTrackTrackingResponseFeatureGeometryCoordinates struct {
	ArrayOfarrayOfnumber [][]float64
	ArrayOfnumber        []float64

	Type GetTrackTrackingResponseFeatureGeometryCoordinatesType
}

func CreateGetTrackTrackingResponseFeatureGeometryCoordinatesArrayOfarrayOfnumber(arrayOfarrayOfnumber [][]float64) GetTrackTrackingResponseFeatureGeometryCoordinates {
	typ := GetTrackTrackingResponseFeatureGeometryCoordinatesTypeArrayOfarrayOfnumber

	return GetTrackTrackingResponseFeatureGeometryCoordinates{
		ArrayOfarrayOfnumber: arrayOfarrayOfnumber,
		Type:                 typ,
	}
}

func CreateGetTrackTrackingResponseFeatureGeometryCoordinatesArrayOfnumber(arrayOfnumber []float64) GetTrackTrackingResponseFeatureGeometryCoordinates {
	typ := GetTrackTrackingResponseFeatureGeometryCoordinatesTypeArrayOfnumber

	return GetTrackTrackingResponseFeatureGeometryCoordinates{
		ArrayOfnumber: arrayOfnumber,
		Type:          typ,
	}
}

func (u *GetTrackTrackingResponseFeatureGeometryCoordinates) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	arrayOfarrayOfnumber := [][]float64{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfarrayOfnumber); err == nil {
		u.ArrayOfarrayOfnumber = arrayOfarrayOfnumber
		u.Type = GetTrackTrackingResponseFeatureGeometryCoordinatesTypeArrayOfarrayOfnumber
		return nil
	}

	arrayOfnumber := []float64{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfnumber); err == nil {
		u.ArrayOfnumber = arrayOfnumber
		u.Type = GetTrackTrackingResponseFeatureGeometryCoordinatesTypeArrayOfnumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTrackTrackingResponseFeatureGeometryCoordinates) MarshalJSON() ([]byte, error) {
	if u.ArrayOfarrayOfnumber != nil {
		return json.Marshal(u.ArrayOfarrayOfnumber)
	}

	if u.ArrayOfnumber != nil {
		return json.Marshal(u.ArrayOfnumber)
	}

	return nil, nil
}

// GetTrackTrackingResponseFeatureGeometryTypeEnum - the geometry type
type GetTrackTrackingResponseFeatureGeometryTypeEnum string

const (
	GetTrackTrackingResponseFeatureGeometryTypeEnumPoint           GetTrackTrackingResponseFeatureGeometryTypeEnum = "Point"
	GetTrackTrackingResponseFeatureGeometryTypeEnumLineString      GetTrackTrackingResponseFeatureGeometryTypeEnum = "LineString"
	GetTrackTrackingResponseFeatureGeometryTypeEnumPolygon         GetTrackTrackingResponseFeatureGeometryTypeEnum = "Polygon"
	GetTrackTrackingResponseFeatureGeometryTypeEnumMultiPoint      GetTrackTrackingResponseFeatureGeometryTypeEnum = "MultiPoint"
	GetTrackTrackingResponseFeatureGeometryTypeEnumMultiLineString GetTrackTrackingResponseFeatureGeometryTypeEnum = "MultiLineString"
	GetTrackTrackingResponseFeatureGeometryTypeEnumMultiPolygon    GetTrackTrackingResponseFeatureGeometryTypeEnum = "MultiPolygon"
)

func (e *GetTrackTrackingResponseFeatureGeometryTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Point":
		fallthrough
	case "LineString":
		fallthrough
	case "Polygon":
		fallthrough
	case "MultiPoint":
		fallthrough
	case "MultiLineString":
		fallthrough
	case "MultiPolygon":
		*e = GetTrackTrackingResponseFeatureGeometryTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTrackTrackingResponseFeatureGeometryTypeEnum: %s", s)
	}
}

// GetTrackTrackingResponseFeatureGeometry - GeoJSon geometry
// http://geojson.org/geojson-spec.html#geometry-objects
type GetTrackTrackingResponseFeatureGeometry struct {
	Coordinates GetTrackTrackingResponseFeatureGeometryCoordinates `json:"coordinates"`
	// the geometry type
	Type GetTrackTrackingResponseFeatureGeometryTypeEnum `json:"type"`
}

type GetTrackTrackingResponseFeatureProperties struct {
	Name *string `json:"name,omitempty"`
}

type GetTrackTrackingResponseFeatureTypeEnum string

const (
	GetTrackTrackingResponseFeatureTypeEnumFeature GetTrackTrackingResponseFeatureTypeEnum = "Feature"
)

func (e *GetTrackTrackingResponseFeatureTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Feature":
		*e = GetTrackTrackingResponseFeatureTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTrackTrackingResponseFeatureTypeEnum: %s", s)
	}
}

// GetTrackTrackingResponseFeature - GeoJSon Feature
// https://tools.ietf.org/html/rfc7946#section-3.2
type GetTrackTrackingResponseFeature struct {
	Bbox []interface{} `json:"bbox,omitempty"`
	// GeoJSon geometry
	Centerline *shared.OnetrackGetResponses200ContentApplication1jsonSchemaPropertiesOriginPropertiesGeometry `json:"centerline,omitempty"`
	// GeoJSon geometry
	Geometry   GetTrackTrackingResponseFeatureGeometry   `json:"geometry"`
	ID         *int64                                    `json:"id,omitempty"`
	Properties GetTrackTrackingResponseFeatureProperties `json:"properties"`
	Title      *string                                   `json:"title,omitempty"`
	Type       GetTrackTrackingResponseFeatureTypeEnum   `json:"type"`
}

type GetTrackTrackingResponseTrackingEventV2EventSourceEnum string

const (
	GetTrackTrackingResponseTrackingEventV2EventSourceEnumCarrier  GetTrackTrackingResponseTrackingEventV2EventSourceEnum = "carrier"
	GetTrackTrackingResponseTrackingEventV2EventSourceEnumInternal GetTrackTrackingResponseTrackingEventV2EventSourceEnum = "internal"
)

func (e *GetTrackTrackingResponseTrackingEventV2EventSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "carrier":
		fallthrough
	case "internal":
		*e = GetTrackTrackingResponseTrackingEventV2EventSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTrackTrackingResponseTrackingEventV2EventSourceEnum: %s", s)
	}
}

type GetTrackTrackingResponseTrackingEventV2 struct {
	EventCategory     *string    `json:"eventCategory,omitempty"`
	EventCategoryCode *int64     `json:"eventCategoryCode,omitempty"`
	EventDateTime     *time.Time `json:"eventDateTime,omitempty"`
	// GeoJSon Feature
	EventLocation *shared.OnetrackGetResponses200ContentApplication1jsonSchemaPropertiesOrigin `json:"eventLocation,omitempty"`
	EventSource   *GetTrackTrackingResponseTrackingEventV2EventSourceEnum                      `json:"eventSource,omitempty"`
	EventStatus   *string                                                                      `json:"eventStatus,omitempty"`
}

type GetTrackTrackingResponseTrackingNumberV2CarrierSimpleV2 struct {
	ID int64 `json:"id"`
}

type GetTrackTrackingResponseTrackingNumberV2 struct {
	// The computer readable alternative to the human readable
	BarcodeScanValue *string                                                  `json:"barcodeScanValue,omitempty"`
	Carrier          *GetTrackTrackingResponseTrackingNumberV2CarrierSimpleV2 `json:"carrier,omitempty"`
	// The human readable tracking number recipients (consignee) expect
	Value *string `json:"value,omitempty"`
}

// GetTrackTrackingResponse - OK
type GetTrackTrackingResponse struct {
	// GeoJSon Feature
	Destination          *shared.OnetrackGetResponses200ContentApplication1jsonSchemaPropertiesOrigin `json:"destination,omitempty"`
	FdcOrderID           *int64                                                                       `json:"fdcOrderId,omitempty"`
	FirstCheckedDateTime *time.Time                                                                   `json:"firstCheckedDateTime,omitempty"`
	FirstTransitEvent    *time.Time                                                                   `json:"firstTransitEvent,omitempty"`
	LastCheckedDateTime  *time.Time                                                                   `json:"lastCheckedDateTime,omitempty"`
	LastUpdatedDateTime  *time.Time                                                                   `json:"lastUpdatedDateTime,omitempty"`
	// GeoJSon Feature
	Origin             *GetTrackTrackingResponseFeature          `json:"origin,omitempty"`
	Status             *string                                   `json:"status,omitempty"`
	StatusCategoryCode *int64                                    `json:"statusCategoryCode,omitempty"`
	StatusDateTime     *time.Time                                `json:"statusDateTime,omitempty"`
	StatusMessage      *string                                   `json:"statusMessage,omitempty"`
	TrackedEvents      []GetTrackTrackingResponseTrackingEventV2 `json:"trackedEvents,omitempty"`
	TrackingNumber     *GetTrackTrackingResponseTrackingNumberV2 `json:"trackingNumber,omitempty"`
}

type GetTrackResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	TrackingResponse *GetTrackTrackingResponse
}
