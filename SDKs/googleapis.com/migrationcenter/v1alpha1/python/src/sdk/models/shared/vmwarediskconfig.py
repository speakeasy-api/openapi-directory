"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class VmwareDiskConfigBackingTypeEnum(str, Enum):
    r"""VMDK backing type."""
    BACKING_TYPE_UNSPECIFIED = 'BACKING_TYPE_UNSPECIFIED'
    BACKING_TYPE_FLAT_V1 = 'BACKING_TYPE_FLAT_V1'
    BACKING_TYPE_FLAT_V2 = 'BACKING_TYPE_FLAT_V2'
    BACKING_TYPE_PMEM = 'BACKING_TYPE_PMEM'
    BACKING_TYPE_RDM_V1 = 'BACKING_TYPE_RDM_V1'
    BACKING_TYPE_RDM_V2 = 'BACKING_TYPE_RDM_V2'
    BACKING_TYPE_SESPARSE = 'BACKING_TYPE_SESPARSE'
    BACKING_TYPE_SESPARSE_V1 = 'BACKING_TYPE_SESPARSE_V1'
    BACKING_TYPE_SESPARSE_V2 = 'BACKING_TYPE_SESPARSE_V2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VmwareDiskConfig:
    r"""VMware disk config details."""
    
    backing_type: Optional[VmwareDiskConfigBackingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backingType'), 'exclude': lambda f: f is None }})
    r"""VMDK backing type."""  
    rdm_compatibility_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rdmCompatibilityMode'), 'exclude': lambda f: f is None }})
    r"""RDM compatibility mode."""  
    shared: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared'), 'exclude': lambda f: f is None }})
    r"""Is VMDK shared with other VMs."""  
    vmdk_disk_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmdkDiskMode'), 'exclude': lambda f: f is None }})
    r"""VMDK disk mode."""  
    