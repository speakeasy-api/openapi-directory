// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CompositeTypeStatusEnum string

const (
	CompositeTypeStatusEnumUnknownStatus CompositeTypeStatusEnum = "UNKNOWN_STATUS"
	CompositeTypeStatusEnumDeprecated    CompositeTypeStatusEnum = "DEPRECATED"
	CompositeTypeStatusEnumExperimental  CompositeTypeStatusEnum = "EXPERIMENTAL"
	CompositeTypeStatusEnumSupported     CompositeTypeStatusEnum = "SUPPORTED"
)

func (e CompositeTypeStatusEnum) ToPointer() *CompositeTypeStatusEnum {
	return &e
}

func (e *CompositeTypeStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN_STATUS":
		fallthrough
	case "DEPRECATED":
		fallthrough
	case "EXPERIMENTAL":
		fallthrough
	case "SUPPORTED":
		*e = CompositeTypeStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompositeTypeStatusEnum: %v", v)
	}
}

// CompositeType - Holds the composite type.
type CompositeType struct {
	// An optional textual description of the resource; provided by the client when the resource is created.
	Description *string `json:"description,omitempty"`
	ID          *string `json:"id,omitempty"`
	// Output only. Creation timestamp in RFC3339 text format.
	InsertTime *string `json:"insertTime,omitempty"`
	// Map of labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
	Labels []CompositeTypeLabelEntry `json:"labels,omitempty"`
	// Name of the composite type, must follow the expression: `[a-z]([-a-z0-9_.]{0,61}[a-z0-9])?`.
	Name *string `json:"name,omitempty"`
	// Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zonalOperations` resource. For more information, read Global, Regional, and Zonal Resources.
	Operation *Operation `json:"operation,omitempty"`
	// Output only. Server defined URL for the resource.
	SelfLink *string                  `json:"selfLink,omitempty"`
	Status   *CompositeTypeStatusEnum `json:"status,omitempty"`
	// Files that make up the template contents of a template type.
	TemplateContents *TemplateContents `json:"templateContents,omitempty"`
}
