// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETApplySecurityGroupsToClientVpnTargetNetworkActionEnum
type GETApplySecurityGroupsToClientVpnTargetNetworkActionEnum string

const (
	GETApplySecurityGroupsToClientVpnTargetNetworkActionEnumApplySecurityGroupsToClientVpnTargetNetwork GETApplySecurityGroupsToClientVpnTargetNetworkActionEnum = "ApplySecurityGroupsToClientVpnTargetNetwork"
)

func (e GETApplySecurityGroupsToClientVpnTargetNetworkActionEnum) ToPointer() *GETApplySecurityGroupsToClientVpnTargetNetworkActionEnum {
	return &e
}

func (e *GETApplySecurityGroupsToClientVpnTargetNetworkActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ApplySecurityGroupsToClientVpnTargetNetwork":
		*e = GETApplySecurityGroupsToClientVpnTargetNetworkActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETApplySecurityGroupsToClientVpnTargetNetworkActionEnum: %v", v)
	}
}

// GETApplySecurityGroupsToClientVpnTargetNetworkVersionEnum
type GETApplySecurityGroupsToClientVpnTargetNetworkVersionEnum string

const (
	GETApplySecurityGroupsToClientVpnTargetNetworkVersionEnumTwoThousandAndSixteen1115 GETApplySecurityGroupsToClientVpnTargetNetworkVersionEnum = "2016-11-15"
)

func (e GETApplySecurityGroupsToClientVpnTargetNetworkVersionEnum) ToPointer() *GETApplySecurityGroupsToClientVpnTargetNetworkVersionEnum {
	return &e
}

func (e *GETApplySecurityGroupsToClientVpnTargetNetworkVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETApplySecurityGroupsToClientVpnTargetNetworkVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETApplySecurityGroupsToClientVpnTargetNetworkVersionEnum: %v", v)
	}
}

type GETApplySecurityGroupsToClientVpnTargetNetworkRequest struct {
	Action GETApplySecurityGroupsToClientVpnTargetNetworkActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointID string `queryParam:"style=form,explode=true,name=ClientVpnEndpointId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The IDs of the security groups to apply to the associated target network. Up to 5 security groups can be applied to an associated target network.
	SecurityGroupID []string                                                  `queryParam:"style=form,explode=true,name=SecurityGroupId"`
	Version         GETApplySecurityGroupsToClientVpnTargetNetworkVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The ID of the VPC in which the associated target network is located.
	VpcID             string  `queryParam:"style=form,explode=true,name=VpcId"`
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETApplySecurityGroupsToClientVpnTargetNetworkResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
