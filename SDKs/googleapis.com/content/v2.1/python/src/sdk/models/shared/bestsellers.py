"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import date_ as shared_date_
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class BestSellersPreviousRelativeDemandEnum(str, Enum):
    r"""Estimated demand in relation to the item with the highest popularity rank in the same category and country in the previous week or month."""
    RELATIVE_DEMAND_UNSPECIFIED = 'RELATIVE_DEMAND_UNSPECIFIED'
    VERY_LOW = 'VERY_LOW'
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'
    VERY_HIGH = 'VERY_HIGH'

class BestSellersRelativeDemandEnum(str, Enum):
    r"""Estimated demand in relation to the item with the highest popularity rank in the same category and country."""
    RELATIVE_DEMAND_UNSPECIFIED = 'RELATIVE_DEMAND_UNSPECIFIED'
    VERY_LOW = 'VERY_LOW'
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'
    VERY_HIGH = 'VERY_HIGH'

class BestSellersRelativeDemandChangeEnum(str, Enum):
    r"""Change in the estimated demand. Whether it rose, sank or remained flat."""
    RELATIVE_DEMAND_CHANGE_TYPE_UNSPECIFIED = 'RELATIVE_DEMAND_CHANGE_TYPE_UNSPECIFIED'
    SINKER = 'SINKER'
    FLAT = 'FLAT'
    RISER = 'RISER'

class BestSellersReportGranularityEnum(str, Enum):
    r"""Granularity of the report. The ranking can be done over a week or a month timeframe. A `WHERE` condition on `best_sellers.report_granularity` is required in the query."""
    REPORT_GRANULARITY_UNSPECIFIED = 'REPORT_GRANULARITY_UNSPECIFIED'
    WEEKLY = 'WEEKLY'
    MONTHLY = 'MONTHLY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BestSellers:
    r"""Fields related to the [Best sellers reports](https://support.google.com/merchants/answer/9488679)."""
    
    category_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryId'), 'exclude': lambda f: f is None }})
    r"""Google product category ID to calculate the ranking for, represented in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436). If a `WHERE` condition on `best_sellers.category_id` is not specified in the query, rankings for all top-level categories are returned."""  
    country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countryCode'), 'exclude': lambda f: f is None }})
    r"""Country where the ranking is calculated. A `WHERE` condition on `best_sellers.country_code` is required in the query."""  
    previous_rank: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previousRank'), 'exclude': lambda f: f is None }})
    r"""Popularity rank in the previous week or month."""  
    previous_relative_demand: Optional[BestSellersPreviousRelativeDemandEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previousRelativeDemand'), 'exclude': lambda f: f is None }})
    r"""Estimated demand in relation to the item with the highest popularity rank in the same category and country in the previous week or month."""  
    rank: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rank'), 'exclude': lambda f: f is None }})
    r"""Popularity on Shopping ads and free listings, in the selected category and country, based on the estimated number of units sold."""  
    relative_demand: Optional[BestSellersRelativeDemandEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relativeDemand'), 'exclude': lambda f: f is None }})
    r"""Estimated demand in relation to the item with the highest popularity rank in the same category and country."""  
    relative_demand_change: Optional[BestSellersRelativeDemandChangeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relativeDemandChange'), 'exclude': lambda f: f is None }})
    r"""Change in the estimated demand. Whether it rose, sank or remained flat."""  
    report_date: Optional[shared_date_.Date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportDate'), 'exclude': lambda f: f is None }})
    r"""Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp"""  
    report_granularity: Optional[BestSellersReportGranularityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportGranularity'), 'exclude': lambda f: f is None }})
    r"""Granularity of the report. The ranking can be done over a week or a month timeframe. A `WHERE` condition on `best_sellers.report_granularity` is required in the query."""  
    