// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

var UpdateConferenceServerList = []string{
	"https://api.twilio.com",
}

type UpdateConferenceSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

// UpdateConferenceUpdateConferenceRequestAnnounceMethodEnum - The HTTP method used to call `announce_url`. Can be: `GET` or `POST` and the default is `POST`
type UpdateConferenceUpdateConferenceRequestAnnounceMethodEnum string

const (
	UpdateConferenceUpdateConferenceRequestAnnounceMethodEnumHead   UpdateConferenceUpdateConferenceRequestAnnounceMethodEnum = "HEAD"
	UpdateConferenceUpdateConferenceRequestAnnounceMethodEnumGet    UpdateConferenceUpdateConferenceRequestAnnounceMethodEnum = "GET"
	UpdateConferenceUpdateConferenceRequestAnnounceMethodEnumPost   UpdateConferenceUpdateConferenceRequestAnnounceMethodEnum = "POST"
	UpdateConferenceUpdateConferenceRequestAnnounceMethodEnumPatch  UpdateConferenceUpdateConferenceRequestAnnounceMethodEnum = "PATCH"
	UpdateConferenceUpdateConferenceRequestAnnounceMethodEnumPut    UpdateConferenceUpdateConferenceRequestAnnounceMethodEnum = "PUT"
	UpdateConferenceUpdateConferenceRequestAnnounceMethodEnumDelete UpdateConferenceUpdateConferenceRequestAnnounceMethodEnum = "DELETE"
)

func (e *UpdateConferenceUpdateConferenceRequestAnnounceMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = UpdateConferenceUpdateConferenceRequestAnnounceMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateConferenceUpdateConferenceRequestAnnounceMethodEnum: %s", s)
	}
}

type UpdateConferenceUpdateConferenceRequest struct {
	// The HTTP method used to call `announce_url`. Can be: `GET` or `POST` and the default is `POST`
	AnnounceMethod *UpdateConferenceUpdateConferenceRequestAnnounceMethodEnum `form:"name=AnnounceMethod"`
	// The URL we should call to announce something into the conference. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
	AnnounceURL *string                                `form:"name=AnnounceUrl"`
	Status      *shared.ConferenceEnumUpdateStatusEnum `form:"name=Status"`
}

type UpdateConferenceRequest struct {
	// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to update.
	AccountSid  string                                   `pathParam:"style=simple,explode=false,name=AccountSid"`
	RequestBody *UpdateConferenceUpdateConferenceRequest `request:"mediaType=application/x-www-form-urlencoded"`
	// The Twilio-provided string that uniquely identifies the Conference resource to update
	Sid string `pathParam:"style=simple,explode=false,name=Sid"`
}

type UpdateConferenceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	APIV2010AccountConference *shared.APIV2010AccountConference
}
