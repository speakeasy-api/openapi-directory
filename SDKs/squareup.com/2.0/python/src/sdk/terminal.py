"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Terminal:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cancel_terminal_checkout(self, request: operations.CancelTerminalCheckoutRequest, security: operations.CancelTerminalCheckoutSecurity) -> operations.CancelTerminalCheckoutResponse:
        r"""CancelTerminalCheckout
        Cancels a Terminal checkout request if the status of the request permits it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CancelTerminalCheckoutRequest, base_url, '/v2/terminals/checkouts/{checkout_id}/cancel', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelTerminalCheckoutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CancelTerminalCheckoutResponse])
                res.cancel_terminal_checkout_response = out

        return res

    def cancel_terminal_refund(self, request: operations.CancelTerminalRefundRequest, security: operations.CancelTerminalRefundSecurity) -> operations.CancelTerminalRefundResponse:
        r"""CancelTerminalRefund
        Cancels an Interac Terminal refund request by refund request ID if the status of the request permits it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CancelTerminalRefundRequest, base_url, '/v2/terminals/refunds/{terminal_refund_id}/cancel', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelTerminalRefundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CancelTerminalRefundResponse])
                res.cancel_terminal_refund_response = out

        return res

    def create_terminal_checkout(self, request: shared.CreateTerminalCheckoutRequest, security: operations.CreateTerminalCheckoutSecurity) -> operations.CreateTerminalCheckoutResponse:
        r"""CreateTerminalCheckout
        Creates a Terminal checkout request and sends it to the specified device to take a payment
        for the requested amount.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/terminals/checkouts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTerminalCheckoutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateTerminalCheckoutResponse])
                res.create_terminal_checkout_response = out

        return res

    def create_terminal_refund(self, request: shared.CreateTerminalRefundRequest, security: operations.CreateTerminalRefundSecurity) -> operations.CreateTerminalRefundResponse:
        r"""CreateTerminalRefund
        Creates a request to refund an Interac payment completed on a Square Terminal.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/terminals/refunds'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTerminalRefundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateTerminalRefundResponse])
                res.create_terminal_refund_response = out

        return res

    def get_terminal_checkout(self, request: operations.GetTerminalCheckoutRequest, security: operations.GetTerminalCheckoutSecurity) -> operations.GetTerminalCheckoutResponse:
        r"""GetTerminalCheckout
        Retrieves a Terminal checkout request by `checkout_id`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTerminalCheckoutRequest, base_url, '/v2/terminals/checkouts/{checkout_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTerminalCheckoutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetTerminalCheckoutResponse])
                res.get_terminal_checkout_response = out

        return res

    def get_terminal_refund(self, request: operations.GetTerminalRefundRequest, security: operations.GetTerminalRefundSecurity) -> operations.GetTerminalRefundResponse:
        r"""GetTerminalRefund
        Retrieves an Interac Terminal refund object by ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTerminalRefundRequest, base_url, '/v2/terminals/refunds/{terminal_refund_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTerminalRefundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetTerminalRefundResponse])
                res.get_terminal_refund_response = out

        return res

    def search_terminal_checkouts(self, request: shared.SearchTerminalCheckoutsRequest, security: operations.SearchTerminalCheckoutsSecurity) -> operations.SearchTerminalCheckoutsResponse:
        r"""SearchTerminalCheckouts
        Retrieves a filtered list of Terminal checkout requests created by the account making the request.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/terminals/checkouts/search'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchTerminalCheckoutsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchTerminalCheckoutsResponse])
                res.search_terminal_checkouts_response = out

        return res

    def search_terminal_refunds(self, request: shared.SearchTerminalRefundsRequest, security: operations.SearchTerminalRefundsSecurity) -> operations.SearchTerminalRefundsResponse:
        r"""SearchTerminalRefunds
        Retrieves a filtered list of Interac Terminal refund requests created by the seller making the request.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/terminals/refunds/search'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchTerminalRefundsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchTerminalRefundsResponse])
                res.search_terminal_refunds_response = out

        return res

    