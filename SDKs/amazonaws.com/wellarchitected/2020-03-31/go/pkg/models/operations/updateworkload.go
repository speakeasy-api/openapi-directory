// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateWorkloadRequestBodyDiscoveryConfig - Discovery configuration associated to the workload.
type UpdateWorkloadRequestBodyDiscoveryConfig struct {
	TrustedAdvisorIntegrationStatus *shared.TrustedAdvisorIntegrationStatusEnum `json:"TrustedAdvisorIntegrationStatus,omitempty"`
}

// UpdateWorkloadRequestBodyEnvironmentEnum - The environment for the workload.
type UpdateWorkloadRequestBodyEnvironmentEnum string

const (
	UpdateWorkloadRequestBodyEnvironmentEnumProduction    UpdateWorkloadRequestBodyEnvironmentEnum = "PRODUCTION"
	UpdateWorkloadRequestBodyEnvironmentEnumPreproduction UpdateWorkloadRequestBodyEnvironmentEnum = "PREPRODUCTION"
)

func (e *UpdateWorkloadRequestBodyEnvironmentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PRODUCTION":
		fallthrough
	case "PREPRODUCTION":
		*e = UpdateWorkloadRequestBodyEnvironmentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateWorkloadRequestBodyEnvironmentEnum: %s", s)
	}
}

// UpdateWorkloadRequestBodyImprovementStatusEnum - The improvement status for a workload.
type UpdateWorkloadRequestBodyImprovementStatusEnum string

const (
	UpdateWorkloadRequestBodyImprovementStatusEnumNotApplicable    UpdateWorkloadRequestBodyImprovementStatusEnum = "NOT_APPLICABLE"
	UpdateWorkloadRequestBodyImprovementStatusEnumNotStarted       UpdateWorkloadRequestBodyImprovementStatusEnum = "NOT_STARTED"
	UpdateWorkloadRequestBodyImprovementStatusEnumInProgress       UpdateWorkloadRequestBodyImprovementStatusEnum = "IN_PROGRESS"
	UpdateWorkloadRequestBodyImprovementStatusEnumComplete         UpdateWorkloadRequestBodyImprovementStatusEnum = "COMPLETE"
	UpdateWorkloadRequestBodyImprovementStatusEnumRiskAcknowledged UpdateWorkloadRequestBodyImprovementStatusEnum = "RISK_ACKNOWLEDGED"
)

func (e *UpdateWorkloadRequestBodyImprovementStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NOT_APPLICABLE":
		fallthrough
	case "NOT_STARTED":
		fallthrough
	case "IN_PROGRESS":
		fallthrough
	case "COMPLETE":
		fallthrough
	case "RISK_ACKNOWLEDGED":
		*e = UpdateWorkloadRequestBodyImprovementStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateWorkloadRequestBodyImprovementStatusEnum: %s", s)
	}
}

type UpdateWorkloadRequestBody struct {
	// The list of Amazon Web Services account IDs associated with the workload.
	AccountIds []string `json:"AccountIds,omitempty"`
	// List of AppRegistry application ARNs to associate to the workload.
	Applications []string `json:"Applications,omitempty"`
	// The URL of the architectural design for the workload.
	ArchitecturalDesign *string `json:"ArchitecturalDesign,omitempty"`
	// The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.
	AwsRegions []string `json:"AwsRegions,omitempty"`
	// The description for the workload.
	Description *string `json:"Description,omitempty"`
	// Discovery configuration associated to the workload.
	DiscoveryConfig *UpdateWorkloadRequestBodyDiscoveryConfig `json:"DiscoveryConfig,omitempty"`
	// The environment for the workload.
	Environment *UpdateWorkloadRequestBodyEnvironmentEnum `json:"Environment,omitempty"`
	// The improvement status for a workload.
	ImprovementStatus *UpdateWorkloadRequestBodyImprovementStatusEnum `json:"ImprovementStatus,omitempty"`
	// The industry for the workload.
	Industry *string `json:"Industry,omitempty"`
	// <p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>
	IndustryType *string `json:"IndustryType,omitempty"`
	// <p>Flag indicating whether the workload owner has acknowledged that the <i>Review owner</i> field is required.</p> <p>If a <b>Review owner</b> is not added to the workload within 60 days of acknowledgement, access to the workload is restricted until an owner is added.</p>
	IsReviewOwnerUpdateAcknowledged *bool `json:"IsReviewOwnerUpdateAcknowledged,omitempty"`
	//  The list of non-Amazon Web Services Regions associated with the workload.
	NonAwsRegions []string `json:"NonAwsRegions,omitempty"`
	// The notes associated with the workload.
	Notes *string `json:"Notes,omitempty"`
	// The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.
	PillarPriorities []string `json:"PillarPriorities,omitempty"`
	// The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.
	ReviewOwner *string `json:"ReviewOwner,omitempty"`
	// <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
	WorkloadName *string `json:"WorkloadName,omitempty"`
}

type UpdateWorkloadRequest struct {
	RequestBody       UpdateWorkloadRequestBody `request:"mediaType=application/json"`
	WorkloadID        string                    `pathParam:"style=simple,explode=false,name=WorkloadId"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type UpdateWorkloadResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// Success
	UpdateWorkloadOutput *shared.UpdateWorkloadOutput
	// ValidationException
	ValidationException interface{}
}
