<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Financial 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * 
     * Each report represents the summary information from Form 3, Form 3X and Form 3P.
     * These reports have key statistics that illuminate the financial status of a given committee.
     * Things like cash on hand, debts owed by committee, total receipts, and total disbursements
     * are especially helpful for understanding a committee's financial dealings.
     * 
     * By default, this endpoint includes both amended and final versions of each report. To restrict
     * to only the final versions of each report, use `is_amended=false`; to retrieve only reports that
     * have been amended, use `is_amended=true`.
     * 
     * Several different reporting structures exist, depending on the type of organization that
     * submits financial information. To see an example of these reporting requirements,
     * look at the summary and detailed summary pages of Form 3, Form 3X, and Form 3P.
     * 
     * DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly
     * label these fields while conveying clear meaning to ensure accessibility for all users.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdReportsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdReportsResponse
     */
	public function getCommitteeCommitteeIdReports(
        \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdReportsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdReportsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/committee/{committee_id}/reports/', \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdReportsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdReportsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdReportsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->committeeReportsPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommitteeReportsPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports,
     * which are aggregated by two-year period. We refer to two-year periods as a `cycle`.
     * 
     * The cycle is named after the even-numbered year and includes the year before it. To obtain
     * totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle
     * is the next year â€” for example, in 2015, the current cycle is 2016.
     * 
     * For presidential and Senate candidates, multiple two-year cycles exist between elections.
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdTotalsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdTotalsResponse
     */
	public function getCommitteeCommitteeIdTotals(
        \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdTotalsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdTotalsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/committee/{committee_id}/totals/', \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdTotalsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdTotalsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdTotalsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->committeeTotalsPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommitteeTotalsPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Look at the top-level financial information for all candidates running for the same
     * office.
     * 
     * Choose a 2-year cycle, and `house`, `senate` or `presidential`.
     * 
     * If you are looking for a Senate seat, you will need to select the state using a two-letter
     * abbreviation.
     * 
     * House races require state and a two-digit district number.
     * 
     * Since this endpoint reflects financial information, it will only have candidates once they file
     * financial reporting forms. Query the `/candidates` endpoint to retrieve an-up-to-date list of all the
     * candidates that filed to run for a particular seat.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetElectionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetElectionsResponse
     */
	public function getElections(
        \OpenAPI\OpenAPI\Models\Operations\GetElectionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetElectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/elections/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetElectionsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetElectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->electionPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ElectionPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * List elections by cycle, office, state, and district.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetElectionsSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetElectionsSearchResponse
     */
	public function getElectionsSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetElectionsSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetElectionsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/elections/search/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetElectionsSearchRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetElectionsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->electionsListPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ElectionsListPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * List elections by cycle, office, state, and district.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetElectionsSummaryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetElectionsSummaryResponse
     */
	public function getElectionsSummary(
        \OpenAPI\OpenAPI\Models\Operations\GetElectionsSummaryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetElectionsSummaryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/elections/summary/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetElectionsSummaryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetElectionsSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->electionSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ElectionSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Each report represents the summary information from Form 3, Form 3X and Form 3P.
     * These reports have key statistics that illuminate the financial status of a given committee.
     * Things like cash on hand, debts owed by committee, total receipts, and total disbursements
     * are especially helpful for understanding a committee's financial dealings.
     * 
     * By default, this endpoint includes both amended and final versions of each report. To restrict
     * to only the final versions of each report, use `is_amended=false`; to retrieve only reports that
     * have been amended, use `is_amended=true`.
     * 
     * Several different reporting structures exist, depending on the type of organization that
     * submits financial information. To see an example of these reporting requirements,
     * look at the summary and detailed summary pages of Form 3, Form 3X, and Form 3P.
     * 
     * DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly
     * label these fields while conveying clear meaning to ensure accessibility for all users.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetReportsEntityTypeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetReportsEntityTypeResponse
     */
	public function getReportsEntityType(
        \OpenAPI\OpenAPI\Models\Operations\GetReportsEntityTypeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetReportsEntityTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reports/{entity_type}/', \OpenAPI\OpenAPI\Models\Operations\GetReportsEntityTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetReportsEntityTypeRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetReportsEntityTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->committeeReportsPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommitteeReportsPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Provides cumulative receipt totals by entity type, over a two year cycle. Totals are adjusted to avoid double counting.
     * 
     * This is [the sql](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V41__large_aggregates.sql) that creates these calculations.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTotalsByEntityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTotalsByEntityResponse
     */
	public function getTotalsByEntity(
        \OpenAPI\OpenAPI\Models\Operations\GetTotalsByEntityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTotalsByEntityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/totals/by_entity/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTotalsByEntityRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTotalsByEntityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityReceiptDisbursementTotalsPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EntityReceiptDisbursementTotalsPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * This endpoint provides information about an inaugural committee's Form 13 report of donations accepted.
     * The data is aggregated by the contributor and the two-year period. We refer to two-year periods as a `cycle`.
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTotalsInauguralCommitteesByContributorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTotalsInauguralCommitteesByContributorResponse
     */
	public function getTotalsInauguralCommitteesByContributor(
        \OpenAPI\OpenAPI\Models\Operations\GetTotalsInauguralCommitteesByContributorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTotalsInauguralCommitteesByContributorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/totals/inaugural_committees/by_contributor/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTotalsInauguralCommitteesByContributorRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTotalsInauguralCommitteesByContributorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inauguralDonationsPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InauguralDonationsPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports,
     * which are aggregated by two-year period. We refer to two-year periods as a `cycle`.
     * 
     * The cycle is named after the even-numbered year and includes the year before it. To obtain
     * totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle
     * is the next year â€” for example, in 2015, the current cycle is 2016.
     * 
     * For presidential and Senate candidates, multiple two-year cycles exist between elections.
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTotalsEntityTypeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTotalsEntityTypeResponse
     */
	public function getTotalsEntityType(
        \OpenAPI\OpenAPI\Models\Operations\GetTotalsEntityTypeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTotalsEntityTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/totals/{entity_type}/', \OpenAPI\OpenAPI\Models\Operations\GetTotalsEntityTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTotalsEntityTypeRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTotalsEntityTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->committeeTotalsPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommitteeTotalsPage', 'json');
            }
        }

        return $response;
    }
}