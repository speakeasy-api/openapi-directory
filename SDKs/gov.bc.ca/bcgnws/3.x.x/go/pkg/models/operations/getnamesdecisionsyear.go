// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetNamesDecisionsYearEmbedEnum - A flag to indicate whether to embed the corresponding 'feature' into each matching name
type GetNamesDecisionsYearEmbedEnum string

const (
	GetNamesDecisionsYearEmbedEnumZero GetNamesDecisionsYearEmbedEnum = "0"
	GetNamesDecisionsYearEmbedEnumOne  GetNamesDecisionsYearEmbedEnum = "1"
)

func (e *GetNamesDecisionsYearEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		*e = GetNamesDecisionsYearEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesDecisionsYearEmbedEnum: %s", s)
	}
}

// GetNamesDecisionsYearOutputFormatEnum - The format of the output.
type GetNamesDecisionsYearOutputFormatEnum string

const (
	GetNamesDecisionsYearOutputFormatEnumJSON GetNamesDecisionsYearOutputFormatEnum = "json"
	GetNamesDecisionsYearOutputFormatEnumXML  GetNamesDecisionsYearOutputFormatEnum = "xml"
	GetNamesDecisionsYearOutputFormatEnumKml  GetNamesDecisionsYearOutputFormatEnum = "kml"
	GetNamesDecisionsYearOutputFormatEnumCsv  GetNamesDecisionsYearOutputFormatEnum = "csv"
)

func (e *GetNamesDecisionsYearOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "kml":
		fallthrough
	case "csv":
		*e = GetNamesDecisionsYearOutputFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesDecisionsYearOutputFormatEnum: %s", s)
	}
}

// GetNamesDecisionsYearOutputSrsEnum - The EPSG code of the spatial reference system (SRS) to use for output geometries.
type GetNamesDecisionsYearOutputSrsEnum string

const (
	GetNamesDecisionsYearOutputSrsEnumFourThousandThreeHundredAndTwentySix   GetNamesDecisionsYearOutputSrsEnum = "4326"
	GetNamesDecisionsYearOutputSrsEnumFourThousandTwoHundredAndSixtyNine     GetNamesDecisionsYearOutputSrsEnum = "4269"
	GetNamesDecisionsYearOutputSrsEnumThreeThousandAndFive                   GetNamesDecisionsYearOutputSrsEnum = "3005"
	GetNamesDecisionsYearOutputSrsEnumThreeThousandEightHundredAndFiftySeven GetNamesDecisionsYearOutputSrsEnum = "3857"
	GetNamesDecisionsYearOutputSrsEnumTwentySixThousandNineHundredAndSeven   GetNamesDecisionsYearOutputSrsEnum = "26907"
	GetNamesDecisionsYearOutputSrsEnumTwentySixThousandNineHundredAndEight   GetNamesDecisionsYearOutputSrsEnum = "26908"
	GetNamesDecisionsYearOutputSrsEnumTwentySixThousandNineHundredAndNine    GetNamesDecisionsYearOutputSrsEnum = "26909"
	GetNamesDecisionsYearOutputSrsEnumTwentySixThousandNineHundredAndTen     GetNamesDecisionsYearOutputSrsEnum = "26910"
	GetNamesDecisionsYearOutputSrsEnumTwentySixThousandNineHundredAndEleven  GetNamesDecisionsYearOutputSrsEnum = "26911"
)

func (e *GetNamesDecisionsYearOutputSrsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4326":
		fallthrough
	case "4269":
		fallthrough
	case "3005":
		fallthrough
	case "3857":
		fallthrough
	case "26907":
		fallthrough
	case "26908":
		fallthrough
	case "26909":
		fallthrough
	case "26910":
		fallthrough
	case "26911":
		*e = GetNamesDecisionsYearOutputSrsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesDecisionsYearOutputSrsEnum: %s", s)
	}
}

// GetNamesDecisionsYearOutputStyleEnum - A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
type GetNamesDecisionsYearOutputStyleEnum string

const (
	GetNamesDecisionsYearOutputStyleEnumSummary GetNamesDecisionsYearOutputStyleEnum = "summary"
	GetNamesDecisionsYearOutputStyleEnumDetail  GetNamesDecisionsYearOutputStyleEnum = "detail"
)

func (e *GetNamesDecisionsYearOutputStyleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "summary":
		fallthrough
	case "detail":
		*e = GetNamesDecisionsYearOutputStyleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesDecisionsYearOutputStyleEnum: %s", s)
	}
}

// GetNamesDecisionsYearSortByEnum - The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
type GetNamesDecisionsYearSortByEnum string

const (
	GetNamesDecisionsYearSortByEnumName         GetNamesDecisionsYearSortByEnum = "name"
	GetNamesDecisionsYearSortByEnumFeatureType  GetNamesDecisionsYearSortByEnum = "featureType"
	GetNamesDecisionsYearSortByEnumDecisionDate GetNamesDecisionsYearSortByEnum = "decisionDate"
)

func (e *GetNamesDecisionsYearSortByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "name":
		fallthrough
	case "featureType":
		fallthrough
	case "decisionDate":
		*e = GetNamesDecisionsYearSortByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesDecisionsYearSortByEnum: %s", s)
	}
}

type GetNamesDecisionsYearRequest struct {
	// A flag to indicate whether to embed the corresponding 'feature' into each matching name
	Embed *GetNamesDecisionsYearEmbedEnum `queryParam:"style=form,explode=true,name=embed"`
	// A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.
	FeatureCategory *string `queryParam:"style=form,explode=true,name=featureCategory"`
	// A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.
	FeatureClass *string `queryParam:"style=form,explode=true,name=featureClass"`
	// A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included
	FeatureType *string `queryParam:"style=form,explode=true,name=featureType"`
	// The number of search results to return (1-200)
	ItemsPerPage *int64 `queryParam:"style=form,explode=true,name=itemsPerPage"`
	// The format of the output.
	OutputFormat GetNamesDecisionsYearOutputFormatEnum `queryParam:"style=form,explode=true,name=outputFormat"`
	// The EPSG code of the spatial reference system (SRS) to use for output geometries.
	OutputSRS *GetNamesDecisionsYearOutputSrsEnum `queryParam:"style=form,explode=true,name=outputSRS"`
	// A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
	OutputStyle *GetNamesDecisionsYearOutputStyleEnum `queryParam:"style=form,explode=true,name=outputStyle"`
	// The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
	SortBy *GetNamesDecisionsYearSortByEnum `queryParam:"style=form,explode=true,name=sortBy"`
	// The index of the first record to be returned (>= 1)
	StartIndex *int64 `queryParam:"style=form,explode=true,name=startIndex"`
	// The year in which to search for names affected by naming decisions'.
	Year int64 `queryParam:"style=form,explode=true,name=year"`
}

type GetNamesDecisionsYearResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
