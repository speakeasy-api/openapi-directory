// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ImportInstanceResultConversionTaskImportInstancePlatformEnum - The instance operating system.
type ImportInstanceResultConversionTaskImportInstancePlatformEnum string

const (
	ImportInstanceResultConversionTaskImportInstancePlatformEnumWindows ImportInstanceResultConversionTaskImportInstancePlatformEnum = "Windows"
)

func (e *ImportInstanceResultConversionTaskImportInstancePlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Windows":
		*e = ImportInstanceResultConversionTaskImportInstancePlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportInstanceResultConversionTaskImportInstancePlatformEnum: %s", s)
	}
}

// ImportInstanceResultConversionTaskImportInstanceVolumesImageFormatEnum - The disk image format.
type ImportInstanceResultConversionTaskImportInstanceVolumesImageFormatEnum string

const (
	ImportInstanceResultConversionTaskImportInstanceVolumesImageFormatEnumVmdk ImportInstanceResultConversionTaskImportInstanceVolumesImageFormatEnum = "VMDK"
	ImportInstanceResultConversionTaskImportInstanceVolumesImageFormatEnumRaw  ImportInstanceResultConversionTaskImportInstanceVolumesImageFormatEnum = "RAW"
	ImportInstanceResultConversionTaskImportInstanceVolumesImageFormatEnumVhd  ImportInstanceResultConversionTaskImportInstanceVolumesImageFormatEnum = "VHD"
)

func (e *ImportInstanceResultConversionTaskImportInstanceVolumesImageFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "VMDK":
		fallthrough
	case "RAW":
		fallthrough
	case "VHD":
		*e = ImportInstanceResultConversionTaskImportInstanceVolumesImageFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportInstanceResultConversionTaskImportInstanceVolumesImageFormatEnum: %s", s)
	}
}

// ImportInstanceResultConversionTaskImportInstanceVolumesImage - The image.
type ImportInstanceResultConversionTaskImportInstanceVolumesImage struct {
	Checksum          *string
	Format            *ImportInstanceResultConversionTaskImportInstanceVolumesImageFormatEnum
	ImportManifestURL *string
	Size              *int64
}

// ImportInstanceResultConversionTaskImportInstanceVolumesVolume - The volume.
type ImportInstanceResultConversionTaskImportInstanceVolumesVolume struct {
	ID   *string
	Size *int64
}

// ImportInstanceResultConversionTaskImportInstanceVolumes - Describes an import volume task.
type ImportInstanceResultConversionTaskImportInstanceVolumes struct {
	AvailabilityZone *string
	BytesConverted   *int64
	Description      *string
	Image            *ImportInstanceResultConversionTaskImportInstanceVolumesImage
	Status           *string
	StatusMessage    *string
	Volume           *ImportInstanceResultConversionTaskImportInstanceVolumesVolume
}

// ImportInstanceResultConversionTaskImportInstance - If the task is for importing an instance, this contains information about the import instance task.
type ImportInstanceResultConversionTaskImportInstance struct {
	Description *string
	InstanceID  *string
	Platform    *ImportInstanceResultConversionTaskImportInstancePlatformEnum
	Volumes     []ImportInstanceResultConversionTaskImportInstanceVolumes
}

// ImportInstanceResultConversionTaskImportVolumeImageFormatEnum - The disk image format.
type ImportInstanceResultConversionTaskImportVolumeImageFormatEnum string

const (
	ImportInstanceResultConversionTaskImportVolumeImageFormatEnumVmdk ImportInstanceResultConversionTaskImportVolumeImageFormatEnum = "VMDK"
	ImportInstanceResultConversionTaskImportVolumeImageFormatEnumRaw  ImportInstanceResultConversionTaskImportVolumeImageFormatEnum = "RAW"
	ImportInstanceResultConversionTaskImportVolumeImageFormatEnumVhd  ImportInstanceResultConversionTaskImportVolumeImageFormatEnum = "VHD"
)

func (e *ImportInstanceResultConversionTaskImportVolumeImageFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "VMDK":
		fallthrough
	case "RAW":
		fallthrough
	case "VHD":
		*e = ImportInstanceResultConversionTaskImportVolumeImageFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportInstanceResultConversionTaskImportVolumeImageFormatEnum: %s", s)
	}
}

// ImportInstanceResultConversionTaskImportVolumeImage - The image.
type ImportInstanceResultConversionTaskImportVolumeImage struct {
	Checksum          *string
	Format            *ImportInstanceResultConversionTaskImportVolumeImageFormatEnum
	ImportManifestURL *string
	Size              *int64
}

// ImportInstanceResultConversionTaskImportVolumeVolume - The volume.
type ImportInstanceResultConversionTaskImportVolumeVolume struct {
	ID   *string
	Size *int64
}

// ImportInstanceResultConversionTaskImportVolume - If the task is for importing a volume, this contains information about the import volume task.
type ImportInstanceResultConversionTaskImportVolume struct {
	AvailabilityZone *string
	BytesConverted   *int64
	Description      *string
	Image            *ImportInstanceResultConversionTaskImportVolumeImage
	Volume           *ImportInstanceResultConversionTaskImportVolumeVolume
}

// ImportInstanceResultConversionTaskStateEnum - The state of the conversion task.
type ImportInstanceResultConversionTaskStateEnum string

const (
	ImportInstanceResultConversionTaskStateEnumActive     ImportInstanceResultConversionTaskStateEnum = "active"
	ImportInstanceResultConversionTaskStateEnumCancelling ImportInstanceResultConversionTaskStateEnum = "cancelling"
	ImportInstanceResultConversionTaskStateEnumCancelled  ImportInstanceResultConversionTaskStateEnum = "cancelled"
	ImportInstanceResultConversionTaskStateEnumCompleted  ImportInstanceResultConversionTaskStateEnum = "completed"
)

func (e *ImportInstanceResultConversionTaskStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "cancelling":
		fallthrough
	case "cancelled":
		fallthrough
	case "completed":
		*e = ImportInstanceResultConversionTaskStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportInstanceResultConversionTaskStateEnum: %s", s)
	}
}

// ImportInstanceResultConversionTaskTags - Describes a tag.
type ImportInstanceResultConversionTaskTags struct {
	Key   *string
	Value *string
}

// ImportInstanceResultConversionTask - Information about the conversion task.
type ImportInstanceResultConversionTask struct {
	ConversionTaskID *string
	ExpirationTime   *string
	ImportInstance   *ImportInstanceResultConversionTaskImportInstance
	ImportVolume     *ImportInstanceResultConversionTaskImportVolume
	State            *ImportInstanceResultConversionTaskStateEnum
	StatusMessage    *string
	Tags             []ImportInstanceResultConversionTaskTags
}

// ImportInstanceResult - Success
type ImportInstanceResult struct {
	ConversionTask *ImportInstanceResultConversionTask
}
