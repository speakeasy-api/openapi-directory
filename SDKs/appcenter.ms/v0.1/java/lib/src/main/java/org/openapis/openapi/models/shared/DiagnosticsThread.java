/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DiagnosticsThread - a thread representation
 */
public class DiagnosticsThread {
    /**
     * True if this thread crashed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crashed")
    public Boolean crashed;

    public DiagnosticsThread withCrashed(Boolean crashed) {
        this.crashed = crashed;
        return this;
    }
    
    /**
     * a exception
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exception")
    public DiagnosticsException exception;

    public DiagnosticsThread withException(DiagnosticsException exception) {
        this.exception = exception;
        return this;
    }
    
    /**
     * frames of that thread
     */
    @JsonProperty("frames")
    public DiagnosticsThreadFrames[] frames;

    public DiagnosticsThread withFrames(DiagnosticsThreadFrames[] frames) {
        this.frames = frames;
        return this;
    }
    
    /**
     * SDK/Platform this thread is beeing generated from
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platform")
    public DiagnosticsThreadPlatformEnum platform;

    public DiagnosticsThread withPlatform(DiagnosticsThreadPlatformEnum platform) {
        this.platform = platform;
        return this;
    }
    
    /**
     * Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relevant")
    public Boolean relevant;

    public DiagnosticsThread withRelevant(Boolean relevant) {
        this.relevant = relevant;
        return this;
    }
    
    /**
     * name of the thread
     */
    @JsonProperty("title")
    public String title;

    public DiagnosticsThread withTitle(String title) {
        this.title = title;
        return this;
    }
    
    public DiagnosticsThread(@JsonProperty("frames") DiagnosticsThreadFrames[] frames, @JsonProperty("title") String title) {
        this.frames = frames;
        this.title = title;
  }
}
