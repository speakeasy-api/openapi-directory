/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { CPUTime } from "./cputime";
import { MemInfo } from "./meminfo";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Worker metrics exported from workers. This contains resource utilization metrics accumulated from a variety of sources. For more information, see go/df-resource-signals.
 */
export class ResourceUtilizationReport extends SpeakeasyBase {
  /**
   * Per container information. Key: container name.
   */
  @SpeakeasyMetadata({ elemType: ResourceUtilizationReport })
  @Expose({ name: "containers" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ResourceUtilizationReport> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ResourceUtilizationReport);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  containers?: Record<string, ResourceUtilizationReport>;

  /**
   * CPU utilization samples.
   */
  @SpeakeasyMetadata({ elemType: CPUTime })
  @Expose({ name: "cpuTime" })
  @Type(() => CPUTime)
  cpuTime?: CPUTime[];

  /**
   * Memory utilization samples.
   */
  @SpeakeasyMetadata({ elemType: MemInfo })
  @Expose({ name: "memoryInfo" })
  @Type(() => MemInfo)
  memoryInfo?: MemInfo[];
}
