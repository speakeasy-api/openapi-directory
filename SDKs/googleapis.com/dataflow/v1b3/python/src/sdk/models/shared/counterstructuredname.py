"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CounterStructuredNameOriginEnum(str, Enum):
    r"""One of the standard Origins defined above."""
    SYSTEM = 'SYSTEM'
    USER = 'USER'

class CounterStructuredNamePortionEnum(str, Enum):
    r"""Portion of this counter, either key or value."""
    ALL = 'ALL'
    KEY = 'KEY'
    VALUE = 'VALUE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CounterStructuredName:
    r"""Identifies a counter within a per-job namespace. Counters whose structured names are the same get merged into a single value for the job."""
    
    component_step_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('componentStepName'), 'exclude': lambda f: f is None }})
    r"""Name of the optimized step being executed by the workers."""  
    execution_step_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionStepName'), 'exclude': lambda f: f is None }})
    r"""Name of the stage. An execution step contains multiple component steps."""  
    input_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputIndex'), 'exclude': lambda f: f is None }})
    r"""Index of an input collection that's being read from/written to as a side input. The index identifies a step's side inputs starting by 1 (e.g. the first side input has input_index 1, the third has input_index 3). Side inputs are identified by a pair of (original_step_name, input_index). This field helps uniquely identify them."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Counter name. Not necessarily globally-unique, but unique within the context of the other fields. Required."""  
    origin: Optional[CounterStructuredNameOriginEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin'), 'exclude': lambda f: f is None }})
    r"""One of the standard Origins defined above."""  
    original_requesting_step_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originalRequestingStepName'), 'exclude': lambda f: f is None }})
    r"""The step name requesting an operation, such as GBK. I.e. the ParDo causing a read/write from shuffle to occur, or a read from side inputs."""  
    original_step_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originalStepName'), 'exclude': lambda f: f is None }})
    r"""System generated name of the original step in the user's graph, before optimization."""  
    origin_namespace: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originNamespace'), 'exclude': lambda f: f is None }})
    r"""A string containing a more specific namespace of the counter's origin."""  
    portion: Optional[CounterStructuredNamePortionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portion'), 'exclude': lambda f: f is None }})
    r"""Portion of this counter, either key or value."""  
    worker_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerId'), 'exclude': lambda f: f is None }})
    r"""ID of a particular worker."""  
    