/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VmwareCluster - Resource that represents a VMware user cluster. ##
 */
public class VmwareCluster {
    /**
     * Required. The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adminClusterMembership")
    public String adminClusterMembership;

    public VmwareCluster withAdminClusterMembership(String adminClusterMembership) {
        this.adminClusterMembership = adminClusterMembership;
        return this;
    }
    
    /**
     * Output only. The resource name of the VMware admin cluster hosting this user cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adminClusterName")
    public String adminClusterName;

    public VmwareCluster withAdminClusterName(String adminClusterName) {
        this.adminClusterName = adminClusterName;
        return this;
    }
    
    /**
     * Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annotations")
    public java.util.Map<String, String> annotations;

    public VmwareCluster withAnnotations(java.util.Map<String, String> annotations) {
        this.annotations = annotations;
        return this;
    }
    
    /**
     * Specifies anti affinity group config for the VMware user cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("antiAffinityGroups")
    public VmwareAAGConfig antiAffinityGroups;

    public VmwareCluster withAntiAffinityGroups(VmwareAAGConfig antiAffinityGroups) {
        this.antiAffinityGroups = antiAffinityGroups;
        return this;
    }
    
    /**
     * Authorization defines the On-Prem cluster authorization configuration to bootstrap onto the admin cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorization")
    public Authorization authorization;

    public VmwareCluster withAuthorization(Authorization authorization) {
        this.authorization = authorization;
        return this;
    }
    
    /**
     * Specifies config to enable/disable auto repair. The cluster-health-controller is deployed only if Enabled is true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoRepairConfig")
    public VmwareAutoRepairConfig autoRepairConfig;

    public VmwareCluster withAutoRepairConfig(VmwareAutoRepairConfig autoRepairConfig) {
        this.autoRepairConfig = autoRepairConfig;
        return this;
    }
    
    /**
     * Specifies control plane node config for the VMware user cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("controlPlaneNode")
    public VmwareControlPlaneNodeConfig controlPlaneNode;

    public VmwareCluster withControlPlaneNode(VmwareControlPlaneNodeConfig controlPlaneNode) {
        this.controlPlaneNode = controlPlaneNode;
        return this;
    }
    
    /**
     * Output only. The time at which VMware user cluster was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public VmwareCluster withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Contains configurations for Dataplane V2, which is optimized dataplane for Kubernetes networking. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dataplane-v2
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataplaneV2")
    public VmwareDataplaneV2Config dataplaneV2;

    public VmwareCluster withDataplaneV2(VmwareDataplaneV2Config dataplaneV2) {
        this.dataplaneV2 = dataplaneV2;
        return this;
    }
    
    /**
     * Output only. The time at which VMware user cluster was deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteTime")
    public String deleteTime;

    public VmwareCluster withDeleteTime(String deleteTime) {
        this.deleteTime = deleteTime;
        return this;
    }
    
    /**
     * A human readable description of this VMware user cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public VmwareCluster withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Enable control plane V2. Default to false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableControlPlaneV2")
    public Boolean enableControlPlaneV2;

    public VmwareCluster withEnableControlPlaneV2(Boolean enableControlPlaneV2) {
        this.enableControlPlaneV2 = enableControlPlaneV2;
        return this;
    }
    
    /**
     * Output only. The DNS name of VMware user cluster's API server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endpoint")
    public String endpoint;

    public VmwareCluster withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }
    
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public VmwareCluster withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Fleet related configuration. Fleets are a Google Cloud concept for logically organizing clusters, letting you use and manage multi-cluster capabilities and apply consistent policies across your systems. See [Anthos Fleets](`https://cloud.google.com/anthos/multicluster-management/fleets`) for more details on Anthos multi-cluster capabilities using Fleets. ##
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fleet")
    public Fleet fleet;

    public VmwareCluster withFleet(Fleet fleet) {
        this.fleet = fleet;
        return this;
    }
    
    /**
     * Specifies the locad balancer config for the VMware user cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loadBalancer")
    public VmwareLoadBalancerConfig loadBalancer;

    public VmwareCluster withLoadBalancer(VmwareLoadBalancerConfig loadBalancer) {
        this.loadBalancer = loadBalancer;
        return this;
    }
    
    /**
     * Output only. The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localName")
    public String localName;

    public VmwareCluster withLocalName(String localName) {
        this.localName = localName;
        return this;
    }
    
    /**
     * Immutable. The VMware user cluster resource name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public VmwareCluster withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Specifies network config for the VMware user cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkConfig")
    public VmwareNetworkConfig networkConfig;

    public VmwareCluster withNetworkConfig(VmwareNetworkConfig networkConfig) {
        this.networkConfig = networkConfig;
        return this;
    }
    
    /**
     * The Anthos clusters on the VMware version for your user cluster. Defaults to the admin cluster version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onPremVersion")
    public String onPremVersion;

    public VmwareCluster withOnPremVersion(String onPremVersion) {
        this.onPremVersion = onPremVersion;
        return this;
    }
    
    /**
     * Output only. If set, there are currently changes in flight to the VMware user cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reconciling")
    public Boolean reconciling;

    public VmwareCluster withReconciling(Boolean reconciling) {
        this.reconciling = reconciling;
        return this;
    }
    
    /**
     * Output only. The current state of VMware user cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public VmwareClusterStateEnum state;

    public VmwareCluster withState(VmwareClusterStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public ResourceStatus status;

    public VmwareCluster withStatus(ResourceStatus status) {
        this.status = status;
        return this;
    }
    
    /**
     * Specifies vSphere CSI components deployment config in the VMware user cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storage")
    public VmwareStorageConfig storage;

    public VmwareCluster withStorage(VmwareStorageConfig storage) {
        this.storage = storage;
        return this;
    }
    
    /**
     * Output only. The unique identifier of the VMware user cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;

    public VmwareCluster withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
    /**
     * Output only. The time at which VMware user cluster was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;

    public VmwareCluster withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * ValidationCheck represents the result of preflight check.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validationCheck")
    public ValidationCheck validationCheck;

    public VmwareCluster withValidationCheck(ValidationCheck validationCheck) {
        this.validationCheck = validationCheck;
        return this;
    }
    
    /**
     * Represents configuration for the VMware VCenter for the user cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vcenter")
    public VmwareVCenterConfig vcenter;

    public VmwareCluster withVcenter(VmwareVCenterConfig vcenter) {
        this.vcenter = vcenter;
        return this;
    }
    
    /**
     * Enable VM tracking.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vmTrackingEnabled")
    public Boolean vmTrackingEnabled;

    public VmwareCluster withVmTrackingEnabled(Boolean vmTrackingEnabled) {
        this.vmTrackingEnabled = vmTrackingEnabled;
        return this;
    }
    
    public VmwareCluster(){}
}
