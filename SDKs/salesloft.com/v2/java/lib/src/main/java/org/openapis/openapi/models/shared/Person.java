/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import java.time.OffsetDateTime;

/**
 * Person - Success
 */
public class Person {
    
    public EmbeddedResource account;
    public Person withAccount(EmbeddedResource account) {
        this.account = account;
        return this;
    }
    
    /**
     * Whether this person's current email address has bounced
     */
    
    public Boolean bouncing;
    public Person withBouncing(Boolean bouncing) {
        this.bouncing = bouncing;
        return this;
    }
    
    /**
     * The list of active cadences person is added to
     */
    
    public EmbeddedResource[] cadences;
    public Person withCadences(EmbeddedResource[] cadences) {
        this.cadences = cadences;
        return this;
    }
    
    /**
     * City
     */
    
    public String city;
    public Person withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message
     */
    
    public String[] contactRestrictions;
    public Person withContactRestrictions(String[] contactRestrictions) {
        this.contactRestrictions = contactRestrictions;
        return this;
    }
    
    /**
     * Country
     */
    
    public String country;
    public Person withCountry(String country) {
        this.country = country;
        return this;
    }
    
    
    public PersonCounts counts;
    public Person withCounts(PersonCounts counts) {
        this.counts = counts;
        return this;
    }
    
    /**
     * Datetime of when the person was created
     */
    
    public OffsetDateTime createdAt;
    public Person withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * CRM ID
     */
    
    public String crmId;
    public Person withCrmId(String crmId) {
        this.crmId = crmId;
        return this;
    }
    
    /**
     * CRM object type
     */
    
    public String crmObjectType;
    public Person withCrmObjectType(String crmObjectType) {
        this.crmObjectType = crmObjectType;
        return this;
    }
    
    /**
     * CRM url
     */
    
    public String crmUrl;
    public Person withCrmUrl(String crmUrl) {
        this.crmUrl = crmUrl;
        return this;
    }
    
    /**
     * Custom fields are defined by the user's team. Only fields with values are presented in the API.
     */
    
    public java.util.Map<String, Object> customFields;
    public Person withCustomFields(java.util.Map<String, Object> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * Either the full name or the email address. Use this when showing a person's name
     */
    
    public String displayName;
    public Person withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed.
     */
    
    public Boolean doNotContact;
    public Person withDoNotContact(Boolean doNotContact) {
        this.doNotContact = doNotContact;
        return this;
    }
    
    /**
     * Email address
     */
    
    public String emailAddress;
    public Person withEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }
    
    /**
     * Whether this person is marked as a European Union Resident or not
     */
    
    public Boolean euResident;
    public Person withEuResident(Boolean euResident) {
        this.euResident = euResident;
        return this;
    }
    
    /**
     * First name
     */
    
    public String firstName;
    public Person withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * Full email address with name
     */
    
    public String fullEmailAddress;
    public Person withFullEmailAddress(String fullEmailAddress) {
        this.fullEmailAddress = fullEmailAddress;
        return this;
    }
    
    /**
     * Home phone without formatting
     */
    
    public String homePhone;
    public Person withHomePhone(String homePhone) {
        this.homePhone = homePhone;
        return this;
    }
    
    /**
     * Person ID
     */
    
    public Long id;
    public Person withId(Long id) {
        this.id = id;
        return this;
    }
    
    
    public EmbeddedResource import_;
    public Person withImport(EmbeddedResource import_) {
        this.import_ = import_;
        return this;
    }
    
    /**
     * The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown
     */
    
    public String jobSeniority;
    public Person withJobSeniority(String jobSeniority) {
        this.jobSeniority = jobSeniority;
        return this;
    }
    
    
    public EmbeddedResource lastCompletedStep;
    public Person withLastCompletedStep(EmbeddedResource lastCompletedStep) {
        this.lastCompletedStep = lastCompletedStep;
        return this;
    }
    
    
    public EmbeddedResource lastCompletedStepCadence;
    public Person withLastCompletedStepCadence(EmbeddedResource lastCompletedStepCadence) {
        this.lastCompletedStepCadence = lastCompletedStepCadence;
        return this;
    }
    
    /**
     * Last datetime this person was contacted
     */
    
    public OffsetDateTime lastContactedAt;
    public Person withLastContactedAt(OffsetDateTime lastContactedAt) {
        this.lastContactedAt = lastContactedAt;
        return this;
    }
    
    
    public EmbeddedResource lastContactedBy;
    public Person withLastContactedBy(EmbeddedResource lastContactedBy) {
        this.lastContactedBy = lastContactedBy;
        return this;
    }
    
    /**
     * The type of the last touch to this person. Can be call, email, other
     */
    
    public String lastContactedType;
    public Person withLastContactedType(String lastContactedType) {
        this.lastContactedType = lastContactedType;
        return this;
    }
    
    /**
     * Last name
     */
    
    public String lastName;
    public Person withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * Last datetime this person replied to an email
     */
    
    public OffsetDateTime lastRepliedAt;
    public Person withLastRepliedAt(OffsetDateTime lastRepliedAt) {
        this.lastRepliedAt = lastRepliedAt;
        return this;
    }
    
    /**
     * Linkedin URL
     */
    
    public String linkedinUrl;
    public Person withLinkedinUrl(String linkedinUrl) {
        this.linkedinUrl = linkedinUrl;
        return this;
    }
    
    /**
     * Time locale of the person
     */
    
    public String locale;
    public Person withLocale(String locale) {
        this.locale = locale;
        return this;
    }
    
    /**
     * The locale's timezone offset from UTC in minutes
     */
    
    public Long localeUtcOffset;
    public Person withLocaleUtcOffset(Long localeUtcOffset) {
        this.localeUtcOffset = localeUtcOffset;
        return this;
    }
    
    /**
     * Mobile phone without formatting
     */
    
    public String mobilePhone;
    public Person withMobilePhone(String mobilePhone) {
        this.mobilePhone = mobilePhone;
        return this;
    }
    
    
    public EmbeddedResource mostRecentCadence;
    public Person withMostRecentCadence(EmbeddedResource mostRecentCadence) {
        this.mostRecentCadence = mostRecentCadence;
        return this;
    }
    
    
    public EmbeddedResource owner;
    public Person withOwner(EmbeddedResource owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * Mapped owner field from your CRM
     */
    
    public String ownerCrmId;
    public Person withOwnerCrmId(String ownerCrmId) {
        this.ownerCrmId = ownerCrmId;
        return this;
    }
    
    /**
     * Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended
     */
    
    public String personCompanyIndustry;
    public Person withPersonCompanyIndustry(String personCompanyIndustry) {
        this.personCompanyIndustry = personCompanyIndustry;
        return this;
    }
    
    /**
     * Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended
     */
    
    public String personCompanyName;
    public Person withPersonCompanyName(String personCompanyName) {
        this.personCompanyName = personCompanyName;
        return this;
    }
    
    /**
     * Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended
     */
    
    public String personCompanyWebsite;
    public Person withPersonCompanyWebsite(String personCompanyWebsite) {
        this.personCompanyWebsite = personCompanyWebsite;
        return this;
    }
    
    
    public EmbeddedResource personStage;
    public Person withPersonStage(EmbeddedResource personStage) {
        this.personStage = personStage;
        return this;
    }
    
    /**
     * Personal email address
     */
    
    public String personalEmailAddress;
    public Person withPersonalEmailAddress(String personalEmailAddress) {
        this.personalEmailAddress = personalEmailAddress;
        return this;
    }
    
    /**
     * The website of this person
     */
    
    public String personalWebsite;
    public Person withPersonalWebsite(String personalWebsite) {
        this.personalWebsite = personalWebsite;
        return this;
    }
    
    /**
     * Phone without formatting
     */
    
    public String phone;
    public Person withPhone(String phone) {
        this.phone = phone;
        return this;
    }
    
    /**
     * Phone extension without formatting
     */
    
    public String phoneExtension;
    public Person withPhoneExtension(String phoneExtension) {
        this.phoneExtension = phoneExtension;
        return this;
    }
    
    /**
     * Alternate email address
     */
    
    public String secondaryEmailAddress;
    public Person withSecondaryEmailAddress(String secondaryEmailAddress) {
        this.secondaryEmailAddress = secondaryEmailAddress;
        return this;
    }
    
    /**
     * Whether this person is starred by the current user
     */
    
    public Boolean starred;
    public Person withStarred(Boolean starred) {
        this.starred = starred;
        return this;
    }
    
    /**
     * State
     */
    
    public String state;
    public Person withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * The person's success count. 1 if person has any active successes, 0 otherwise.
     */
    
    public Long successCount;
    public Person withSuccessCount(Long successCount) {
        this.successCount = successCount;
        return this;
    }
    
    /**
     * All tags applied to this person
     */
    
    public String[] tags;
    public Person withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * Job title
     */
    
    public String title;
    public Person withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The twitter handle of this person
     */
    
    public String twitterHandle;
    public Person withTwitterHandle(String twitterHandle) {
        this.twitterHandle = twitterHandle;
        return this;
    }
    
    /**
     * The person's untouched status
     */
    
    public Boolean untouched;
    public Person withUntouched(Boolean untouched) {
        this.untouched = untouched;
        return this;
    }
    
    /**
     * Datetime of when the person was last updated
     */
    
    public OffsetDateTime updatedAt;
    public Person withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Work location - city
     */
    
    public String workCity;
    public Person withWorkCity(String workCity) {
        this.workCity = workCity;
        return this;
    }
    
    /**
     * Work location - country
     */
    
    public String workCountry;
    public Person withWorkCountry(String workCountry) {
        this.workCountry = workCountry;
        return this;
    }
    
    /**
     * Work location - state
     */
    
    public String workState;
    public Person withWorkState(String workState) {
        this.workState = workState;
        return this;
    }
    
}
