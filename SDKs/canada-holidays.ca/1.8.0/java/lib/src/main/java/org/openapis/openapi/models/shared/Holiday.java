/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * Holiday - A Canadian holiday. Includes a name, the literal date of the holiday, the observed date of the holiday (ie, accommodating for weekends), and a list of regions that observe this holiday.
 */
public class Holiday {
    /**
     * ISO date: the literal date of the holiday
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("date")
    public LocalDate date;

    public Holiday withDate(LocalDate date) {
        this.date = date;
        return this;
    }
    
    /**
     * Whether this holiday is observed by federally-regulated industries.
     */
    @JsonProperty("federal")
    public HolidayFederalEnum federal;

    public Holiday withFederal(HolidayFederalEnum federal) {
        this.federal = federal;
        return this;
    }
    
    /**
     * Primary key for a holiday
     */
    @JsonProperty("id")
    public Long id;

    public Holiday withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * English name
     */
    @JsonProperty("nameEn")
    public String nameEn;

    public Holiday withNameEn(String nameEn) {
        this.nameEn = nameEn;
        return this;
    }
    
    /**
     * French name
     */
    @JsonProperty("nameFr")
    public String nameFr;

    public Holiday withNameFr(String nameFr) {
        this.nameFr = nameFr;
        return this;
    }
    
    /**
     * ISO date: when this holiday is observed
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("observedDate")
    public LocalDate observedDate;

    public Holiday withObservedDate(LocalDate observedDate) {
        this.observedDate = observedDate;
        return this;
    }
    
    /**
     * Whether this is a province-wide statutory holiday, or one that is optional for employers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("optional")
    public HolidayOptionalEnum optional;

    public Holiday withOptional(HolidayOptionalEnum optional) {
        this.optional = optional;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provinces")
    public Province[] provinces;

    public Holiday withProvinces(Province[] provinces) {
        this.provinces = provinces;
        return this;
    }
    
    public Holiday(@JsonProperty("date") LocalDate date, @JsonProperty("federal") HolidayFederalEnum federal, @JsonProperty("id") Long id, @JsonProperty("nameEn") String nameEn, @JsonProperty("nameFr") String nameFr, @JsonProperty("observedDate") LocalDate observedDate) {
        this.date = date;
        this.federal = federal;
        this.id = id;
        this.nameEn = nameEn;
        this.nameFr = nameFr;
        this.observedDate = observedDate;
  }
}
