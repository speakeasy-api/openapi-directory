// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProjectCollaboratorInviteRoleNameEnum - Role of the the collaborator inside the project
type ProjectCollaboratorInviteRoleNameEnum string

const (
	ProjectCollaboratorInviteRoleNameEnumViewer       ProjectCollaboratorInviteRoleNameEnum = "viewer"
	ProjectCollaboratorInviteRoleNameEnumCollaborator ProjectCollaboratorInviteRoleNameEnum = "collaborator"
)

func (e ProjectCollaboratorInviteRoleNameEnum) ToPointer() *ProjectCollaboratorInviteRoleNameEnum {
	return &e
}

func (e *ProjectCollaboratorInviteRoleNameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "viewer":
		fallthrough
	case "collaborator":
		*e = ProjectCollaboratorInviteRoleNameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectCollaboratorInviteRoleNameEnum: %v", v)
	}
}

// ProjectCollaboratorInvite - viewer or collaborator role. User user_id or email of user
type ProjectCollaboratorInvite struct {
	// Text sent when inviting the user to the project
	Comment *string `json:"comment,omitempty"`
	// Collaborator email
	Email *string `json:"email,omitempty"`
	// Role of the the collaborator inside the project
	RoleName ProjectCollaboratorInviteRoleNameEnum `json:"role_name"`
	// User id of the collaborator
	UserID *int64 `json:"user_id,omitempty"`
}
