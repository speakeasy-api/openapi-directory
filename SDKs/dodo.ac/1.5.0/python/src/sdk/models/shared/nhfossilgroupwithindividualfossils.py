"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NHFossilGroupWithIndividualFossilsFossilsColorsEnum(str, Enum):
    AQUA = 'Aqua'
    BEIGE = 'Beige'
    BLACK = 'Black'
    BLUE = 'Blue'
    BROWN = 'Brown'
    COLORFUL = 'Colorful'
    GRAY = 'Gray'
    GREEN = 'Green'
    ORANGE = 'Orange'
    PINK = 'Pink'
    PURPLE = 'Purple'
    RED = 'Red'
    WHITE = 'White'
    YELLOW = 'Yellow'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NHFossilGroupWithIndividualFossilsFossils:
    
    colors: Optional[list[NHFossilGroupWithIndividualFossilsFossilsColorsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('colors'), 'exclude': lambda f: f is None }})  
    fossil_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fossil_group'), 'exclude': lambda f: f is None }})  
    hha_base: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hha_base'), 'exclude': lambda f: f is None }})  
    image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_url'), 'exclude': lambda f: f is None }})  
    interactable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interactable'), 'exclude': lambda f: f is None }})  
    length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    sell: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sell'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    width: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NHFossilGroupWithIndividualFossilsMatched:
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the fossil or fossil group that matched the given query."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""If the query given was a fossil group, `group` would be returned. Otherwise, `individual` is returned."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NHFossilGroupWithIndividualFossils:
    r"""A JSON object describing the fossil group."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description of the fossil group."""  
    fossils: Optional[list[NHFossilGroupWithIndividualFossilsFossils]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fossils'), 'exclude': lambda f: f is None }})
    r"""An array of objects, each object representing a fossil that belongs to the given group."""  
    matched: Optional[NHFossilGroupWithIndividualFossilsMatched] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matched'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the fossil group."""  
    room: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('room'), 'exclude': lambda f: f is None }})
    r"""The room where the fossil group can be found in the museum's fossil section."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Link to the respective Nookipedia article."""  
    