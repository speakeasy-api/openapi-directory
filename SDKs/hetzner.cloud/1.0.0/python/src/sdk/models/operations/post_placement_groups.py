"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PostPlacementGroupsCreatePlacementGroupRequestTypeEnum(str, Enum):
    r"""Define the Placement Group Type."""
    SPREAD = 'spread'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPlacementGroupsCreatePlacementGroupRequest:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the PlacementGroup"""  
    type: PostPlacementGroupsCreatePlacementGroupRequestTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Define the Placement Group Type."""  
    labels: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""User-defined labels (key-value pairs)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPlacementGroupsCreatePlacementGroupResponseNullableActionError:
    r"""Error message for the Action if error occurred, otherwise null"""
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Fixed machine readable code"""  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Humanized error message"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPlacementGroupsCreatePlacementGroupResponseNullableActionResources:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of resource referenced"""  
    
class PostPlacementGroupsCreatePlacementGroupResponseNullableActionStatusEnum(str, Enum):
    r"""Status of the Action"""
    SUCCESS = 'success'
    RUNNING = 'running'
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPlacementGroupsCreatePlacementGroupResponseNullableAction:
    
    command: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('command') }})
    r"""Command executed in the Action"""  
    error: PostPlacementGroupsCreatePlacementGroupResponseNullableActionError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})
    r"""Error message for the Action if error occurred, otherwise null"""  
    finished: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finished') }})
    r"""Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    progress: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progress') }})
    r"""Progress of Action in percent"""  
    resources: list[PostPlacementGroupsCreatePlacementGroupResponseNullableActionResources] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources') }})
    r"""Resources the Action relates to"""  
    started: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('started') }})
    r"""Point in time when the Action was started (in ISO-8601 format)"""  
    status: PostPlacementGroupsCreatePlacementGroupResponseNullableActionStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of the Action"""  
    
class PostPlacementGroupsCreatePlacementGroupResponsePlacementGroupTypeEnum(str, Enum):
    r"""Type of the Placement Group"""
    SPREAD = 'spread'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPlacementGroupsCreatePlacementGroupResponsePlacementGroup:
    
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Resource was created (in ISO-8601 format)"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    labels: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""User-defined labels (key-value pairs)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Resource. Must be unique per Project."""  
    servers: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servers') }})
    r"""Array of IDs of Servers that are part of this Placement Group"""  
    type: PostPlacementGroupsCreatePlacementGroupResponsePlacementGroupTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of the Placement Group"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPlacementGroupsCreatePlacementGroupResponse:
    r"""The `PlacementGroup` key contains the PlacementGroup that was just created."""
    
    placement_group: PostPlacementGroupsCreatePlacementGroupResponsePlacementGroup = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placement_group') }})  
    action: Optional[PostPlacementGroupsCreatePlacementGroupResponseNullableAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostPlacementGroupsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_placement_group_response: Optional[PostPlacementGroupsCreatePlacementGroupResponse] = dataclasses.field(default=None)
    r"""The `PlacementGroup` key contains the PlacementGroup that was just created."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    