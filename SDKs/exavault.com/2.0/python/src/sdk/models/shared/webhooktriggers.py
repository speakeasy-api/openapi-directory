"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebhookTriggersResources:
    
    compress: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compress'), 'exclude': lambda f: f is None }})
    r"""Send webhook messages when resources are compressed into an archive."""  
    copy: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copy'), 'exclude': lambda f: f is None }})
    r"""Send webhook messages when resources are copied."""  
    create_folder: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createFolder'), 'exclude': lambda f: f is None }})
    r"""Send webhook messages when a new folder is created."""  
    delete: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete'), 'exclude': lambda f: f is None }})
    r"""Send webhook messages when resources are deleted"""  
    download: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download'), 'exclude': lambda f: f is None }})
    r"""Send webhook messages when resources are downloaded."""  
    extract: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extract'), 'exclude': lambda f: f is None }})
    r"""Send webhook messages when resources are extracted from an archive."""  
    move: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('move'), 'exclude': lambda f: f is None }})
    r"""Send webhook messages when resources are moved."""  
    rename: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rename'), 'exclude': lambda f: f is None }})
    r"""Send webhook messages when resources are renamed."""  
    upload: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload'), 'exclude': lambda f: f is None }})
    r"""Send webhook messages when resources are uploaded."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebhookTriggersShares:
    
    form_submit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formSubmit'), 'exclude': lambda f: f is None }})
    r"""Send webhook messages when a receive folder form is submitted."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebhookTriggers:
    
    resources: Optional[WebhookTriggersResources] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources'), 'exclude': lambda f: f is None }})  
    shares: Optional[WebhookTriggersShares] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shares'), 'exclude': lambda f: f is None }})  
    