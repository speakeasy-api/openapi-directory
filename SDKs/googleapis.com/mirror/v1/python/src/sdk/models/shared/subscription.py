"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import notification as shared_notification
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Subscription:
    r"""A subscription to events on a collection."""
    
    callback_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callbackUrl'), 'exclude': lambda f: f is None }})
    r"""The URL where notifications should be delivered (must start with https://)."""  
    collection: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collection'), 'exclude': lambda f: f is None }})
    r"""The collection to subscribe to. Allowed values are:
    - timeline - Changes in the timeline including insertion, deletion, and updates. 
    - locations - Location updates. 
    - settings - Settings updates.
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the subscription."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The type of resource. This is always mirror#subscription."""  
    notification: Optional[shared_notification.Notification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notification'), 'exclude': lambda f: f is None }})
    r"""A notification delivered by the API."""  
    operation: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operation'), 'exclude': lambda f: f is None }})
    r"""A list of operations that should be subscribed to. An empty list indicates that all operations on the collection should be subscribed to. Allowed values are:
    - UPDATE - The item has been updated. 
    - INSERT - A new item has been inserted. 
    - DELETE - The item has been deleted. 
    - MENU_ACTION - A custom menu item has been triggered by the user.
    """  
    updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time at which this subscription was last modified, formatted according to RFC 3339."""  
    user_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userToken'), 'exclude': lambda f: f is None }})
    r"""An opaque token sent to the subscriber in notifications so that it can determine the ID of the user."""  
    verify_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verifyToken'), 'exclude': lambda f: f is None }})
    r"""A secret token sent to the subscriber in notifications so that it can verify that the notification was generated by Google."""  
    