// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CustomerFieldsWithPasswordNoIDStatusEnum - Status of the Customer
type CustomerFieldsWithPasswordNoIDStatusEnum string

const (
	CustomerFieldsWithPasswordNoIDStatusEnumApproved CustomerFieldsWithPasswordNoIDStatusEnum = "approved"
	CustomerFieldsWithPasswordNoIDStatusEnumPending  CustomerFieldsWithPasswordNoIDStatusEnum = "pending"
	CustomerFieldsWithPasswordNoIDStatusEnumDisabled CustomerFieldsWithPasswordNoIDStatusEnum = "disabled"
)

func (e *CustomerFieldsWithPasswordNoIDStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "approved":
		fallthrough
	case "pending":
		fallthrough
	case "disabled":
		*e = CustomerFieldsWithPasswordNoIDStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomerFieldsWithPasswordNoIDStatusEnum: %s", s)
	}
}

type CustomerFieldsWithPasswordNoID struct {
	BillingAddress   *BillingAddress `json:"billing_address,omitempty"`
	CustomerCategory []int64         `json:"customer_category,omitempty"`
	// Email of the Customer
	Email *string `json:"email,omitempty"`
	// Password
	Password *string `json:"password,omitempty"`
	// Phone of the Customer
	Phone           *string          `json:"phone,omitempty"`
	ShippingAddress *ShippingAddress `json:"shipping_address,omitempty"`
	// Status of the Customer
	Status *CustomerFieldsWithPasswordNoIDStatusEnum `json:"status,omitempty"`
}
