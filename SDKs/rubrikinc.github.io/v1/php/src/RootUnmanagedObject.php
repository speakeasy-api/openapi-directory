<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootUnmanagedObject 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Assign relic/unmanaged entities to an SLA Domain for managing retention asynchronously
     * 
     * Assign relic/unmanaged entities to the specified SLA Domain for managing retention. The assignment event runs asynchronously.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\UnmanagedObjectSlaAssignmentInfo $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AssignToRetentionSlaAsyncResponse
     */
	public function assignToRetentionSlaAsync(
        \OpenAPI\OpenAPI\Models\Shared\UnmanagedObjectSlaAssignmentInfo $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AssignToRetentionSlaAsyncResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/unmanaged_object/assign_retention_sla');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssignToRetentionSlaAsyncResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managedObjectPendingSlaInfos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ManagedObjectPendingSlaInfo>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bulk tier existing snapshots to cold storage
     * 
     * Schedules a job to tier existing snapshots of the specified objects to cold storage.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BulkTierSnapshotsConfig $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BulkTierExistingSnapshotsResponse
     */
	public function bulkTierExistingSnapshots(
        \OpenAPI\OpenAPI\Models\Shared\BulkTierSnapshotsConfig $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BulkTierExistingSnapshotsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/unmanaged_object/snapshot/bulk_archive_tier');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BulkTierExistingSnapshotsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get summary of all the snapshots for a given object
     * 
     * Gets summary information for all snapshots of the object with the specified object ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedObjectSnapshotsV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedObjectSnapshotsV1Response
     */
	public function queryUnmanagedObjectSnapshotsV1(
        \OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedObjectSnapshotsV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedObjectSnapshotsV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/unmanaged_object/{id}/snapshot', \OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedObjectSnapshotsV1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedObjectSnapshotsV1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedObjectSnapshotsV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snapshotSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SnapshotSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get summary of all the objects with unmanaged snapshots
     * 
     * Get summary of all the objects with unmanaged snapshots.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedObjectV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedObjectV1Response
     */
	public function queryUnmanagedObjectV1(
        \OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedObjectV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedObjectV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/unmanaged_object');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedObjectV1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedObjectV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unmanagedObjectDetailsListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UnmanagedObjectDetailsListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get summary of all unmanaged reader objects
     * 
     * A summary of all unmanaged objects recovered from reader archival locations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedReaderObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedReaderObjectResponse
     */
	public function queryUnmanagedReaderObject(
        \OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedReaderObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedReaderObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/unmanaged_object/reader_object');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedReaderObjectRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryUnmanagedReaderObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unmanagedObjectSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UnmanagedObjectSummaryListResponse', 'json');
            }
        }

        return $response;
    }
}