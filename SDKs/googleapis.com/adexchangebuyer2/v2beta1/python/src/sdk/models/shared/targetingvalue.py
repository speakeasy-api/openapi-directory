"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import creativesize as shared_creativesize
from ..shared import dayparttargeting as shared_dayparttargeting
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TargetingValue:
    r"""A polymorphic targeting value used as part of Shared Targeting."""
    
    creative_size_value: Optional[shared_creativesize.CreativeSize] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeSizeValue'), 'exclude': lambda f: f is None }})
    r"""Specifies the size of the creative."""  
    day_part_targeting_value: Optional[shared_dayparttargeting.DayPartTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayPartTargetingValue'), 'exclude': lambda f: f is None }})
    r"""Specifies the day part targeting criteria."""  
    long_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longValue'), 'exclude': lambda f: f is None }})
    r"""The long value to include/exclude."""  
    string_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stringValue'), 'exclude': lambda f: f is None }})
    r"""The string value to include/exclude."""  
    