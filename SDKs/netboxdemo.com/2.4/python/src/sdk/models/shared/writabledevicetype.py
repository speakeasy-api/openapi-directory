"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class WritableDeviceTypeInterfaceOrderingEnum(str, Enum):
    ONE = '1'
    TWO = '2'

class WritableDeviceTypeParentChildStatusEnum(str, Enum):
    r"""Parent devices house child devices in device bays. Select \\"None\\" if this device type is neither a parent nor a child."""
    NULL = 'null'
    TRUE = 'true'
    FALSE = 'false'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WritableDeviceTypeInput:
    
    manufacturer: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manufacturer') }})  
    model: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model') }})  
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})  
    comments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields'), 'exclude': lambda f: f is None }})  
    interface_ordering: Optional[WritableDeviceTypeInterfaceOrderingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interface_ordering'), 'exclude': lambda f: f is None }})  
    is_console_server: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_console_server'), 'exclude': lambda f: f is None }})
    r"""This type of device has console server ports"""  
    is_full_depth: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_full_depth'), 'exclude': lambda f: f is None }})
    r"""Device consumes both front and rear rack faces"""  
    is_network_device: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_network_device'), 'exclude': lambda f: f is None }})
    r"""This type of device has network interfaces"""  
    is_pdu: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_pdu'), 'exclude': lambda f: f is None }})
    r"""This type of device has power outlets"""  
    part_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('part_number'), 'exclude': lambda f: f is None }})
    r"""Discrete part number (optional)"""  
    subdevice_role: Optional[WritableDeviceTypeParentChildStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subdevice_role'), 'exclude': lambda f: f is None }})
    r"""Parent devices house child devices in device bays. Select \\"None\\" if this device type is neither a parent nor a child."""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    u_height: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('u_height'), 'exclude': lambda f: f is None }})  
    