"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import ocrphototextelement as shared_ocrphototextelement
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PhotoToWordsWithLocationResult:
    r"""Result of an photo to words-with-location OCR operation"""
    
    diagnostic_image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DiagnosticImage'), 'exclude': lambda f: f is None }})
    r"""Typically null.  To analyze OCR performance, enable diagnostic mode by adding the HTTP header \\"DiagnosticMode\\" with the value \\"true\\".  When this is true, a diagnostic image showing the details of the OCR result will be set in PNG format into DiagnosticImage."""  
    successful: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Successful'), 'exclude': lambda f: f is None }})
    r"""True if successful, false otherwise"""  
    text_elements: Optional[list[shared_ocrphototextelement.OcrPhotoTextElement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TextElements'), 'exclude': lambda f: f is None }})
    r"""Word elements in the image"""  
    