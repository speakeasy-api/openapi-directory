"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import amazonopensearchserverlessdestinationconfiguration as shared_amazonopensearchserverlessdestinationconfiguration
from ..shared import amazonopensearchservicedestinationconfiguration as shared_amazonopensearchservicedestinationconfiguration
from ..shared import bufferinghints as shared_bufferinghints
from ..shared import cloudwatchloggingoptions as shared_cloudwatchloggingoptions
from ..shared import compressionformat_enum as shared_compressionformat_enum
from ..shared import deliverystreamencryptionconfigurationinput as shared_deliverystreamencryptionconfigurationinput
from ..shared import deliverystreamtype_enum as shared_deliverystreamtype_enum
from ..shared import elasticsearchdestinationconfiguration as shared_elasticsearchdestinationconfiguration
from ..shared import encryptionconfiguration as shared_encryptionconfiguration
from ..shared import extendeds3destinationconfiguration as shared_extendeds3destinationconfiguration
from ..shared import httpendpointdestinationconfiguration as shared_httpendpointdestinationconfiguration
from ..shared import kinesisstreamsourceconfiguration as shared_kinesisstreamsourceconfiguration
from ..shared import redshiftdestinationconfiguration as shared_redshiftdestinationconfiguration
from ..shared import splunkdestinationconfiguration as shared_splunkdestinationconfiguration
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeliveryStreamInputS3DestinationConfiguration:
    r"""[Deprecated] The destination in Amazon S3. You can specify only one destination."""
    
    bucket_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BucketARN') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleARN') }})  
    buffering_hints: Optional[shared_bufferinghints.BufferingHints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BufferingHints'), 'exclude': lambda f: f is None }})  
    cloud_watch_logging_options: Optional[shared_cloudwatchloggingoptions.CloudWatchLoggingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudWatchLoggingOptions'), 'exclude': lambda f: f is None }})  
    compression_format: Optional[shared_compressionformat_enum.CompressionFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompressionFormat'), 'exclude': lambda f: f is None }})  
    encryption_configuration: Optional[shared_encryptionconfiguration.EncryptionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionConfiguration'), 'exclude': lambda f: f is None }})  
    error_output_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ErrorOutputPrefix'), 'exclude': lambda f: f is None }})  
    prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Prefix'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeliveryStreamInput:
    
    delivery_stream_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliveryStreamName') }})  
    amazon_open_search_serverless_destination_configuration: Optional[shared_amazonopensearchserverlessdestinationconfiguration.AmazonOpenSearchServerlessDestinationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AmazonOpenSearchServerlessDestinationConfiguration'), 'exclude': lambda f: f is None }})  
    amazonopensearchservice_destination_configuration: Optional[shared_amazonopensearchservicedestinationconfiguration.AmazonopensearchserviceDestinationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AmazonopensearchserviceDestinationConfiguration'), 'exclude': lambda f: f is None }})  
    delivery_stream_encryption_configuration_input: Optional[shared_deliverystreamencryptionconfigurationinput.DeliveryStreamEncryptionConfigurationInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliveryStreamEncryptionConfigurationInput'), 'exclude': lambda f: f is None }})  
    delivery_stream_type: Optional[shared_deliverystreamtype_enum.DeliveryStreamTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliveryStreamType'), 'exclude': lambda f: f is None }})  
    elasticsearch_destination_configuration: Optional[shared_elasticsearchdestinationconfiguration.ElasticsearchDestinationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ElasticsearchDestinationConfiguration'), 'exclude': lambda f: f is None }})  
    extended_s3_destination_configuration: Optional[shared_extendeds3destinationconfiguration.ExtendedS3DestinationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtendedS3DestinationConfiguration'), 'exclude': lambda f: f is None }})  
    http_endpoint_destination_configuration: Optional[shared_httpendpointdestinationconfiguration.HTTPEndpointDestinationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HttpEndpointDestinationConfiguration'), 'exclude': lambda f: f is None }})  
    kinesis_stream_source_configuration: Optional[shared_kinesisstreamsourceconfiguration.KinesisStreamSourceConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KinesisStreamSourceConfiguration'), 'exclude': lambda f: f is None }})  
    redshift_destination_configuration: Optional[shared_redshiftdestinationconfiguration.RedshiftDestinationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedshiftDestinationConfiguration'), 'exclude': lambda f: f is None }})  
    s3_destination_configuration: Optional[CreateDeliveryStreamInputS3DestinationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3DestinationConfiguration'), 'exclude': lambda f: f is None }})  
    splunk_destination_configuration: Optional[shared_splunkdestinationconfiguration.SplunkDestinationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SplunkDestinationConfiguration'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    