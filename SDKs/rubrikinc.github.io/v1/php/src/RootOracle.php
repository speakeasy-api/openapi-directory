<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootOracle 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Update Oracle Databases
     * 
     * Update the properties of the objects that represent the specified Oracle Databases.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\OracleBulkUpdate $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BulkUpdateOracleDbResponse
     */
	public function bulkUpdateOracleDb(
        \OpenAPI\OpenAPI\Models\Shared\OracleBulkUpdate $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BulkUpdateOracleDbResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oracle/db/bulk');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BulkUpdateOracleDbResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkOracleDbDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkOracleDbDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Oracle Hosts
     * 
     * Update properties to Oracle Host objects.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\OracleBulkUpdate $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BulkUpdateOracleHostResponse
     */
	public function bulkUpdateOracleHost(
        \OpenAPI\OpenAPI\Models\Shared\OracleBulkUpdate $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BulkUpdateOracleHostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oracle/host/bulk');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BulkUpdateOracleHostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkOracleHostDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkOracleHostDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Oracle RACs
     * 
     * Update the properties of the objects that represent the specified Oracle RAC.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\OracleBulkUpdate $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BulkUpdateOracleRacResponse
     */
	public function bulkUpdateOracleRac(
        \OpenAPI\OpenAPI\Models\Shared\OracleBulkUpdate $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BulkUpdateOracleRacResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oracle/rac/bulk');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BulkUpdateOracleRacResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkOracleRacDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkOracleRacDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validate Oracle database backups
     * 
     * Queue a job to validate Oracle backups for a database snapshot or a specified timestamp.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOracleValidateBackupJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOracleValidateBackupJobResponse
     */
	public function createOracleValidateBackupJob(
        \OpenAPI\OpenAPI\Models\Operations\CreateOracleValidateBackupJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOracleValidateBackupJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oracle/db/{id}/validate', \OpenAPI\OpenAPI\Models\Operations\CreateOracleValidateBackupJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "oracleValidateConfig", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOracleValidateBackupJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete downloaded Oracle database snapshots and log snapshots
     * 
     * Requests an asynchronous job to expire downloaded database snapshots taken during a specified time period as well as log snapshots that contain any logs with timestamps within that time period.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDownloadedSnapshotsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDownloadedSnapshotsResponse
     */
	public function deleteDownloadedSnapshots(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDownloadedSnapshotsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDownloadedSnapshotsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oracle/db/{id}/downloaded_snapshots', \OpenAPI\OpenAPI\Models\Operations\DeleteDownloadedSnapshotsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteDownloadedSnapshotsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDownloadedSnapshotsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List of supported Advanced Cloning Options
     * 
     * Get the list of supported Advanced Cloning Options (ACO) parameters.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAcoParameterListResponse
     */
	public function getAcoParameterList(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAcoParameterListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oracle/aco_parameter_list');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAcoParameterListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oracleAcoParameterList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OracleAcoParameterList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Link to download the Advanced Recovery Options example file
     * 
     * Link to download the Advanced Recovery Options example file which can be used to customize Oracle recoveries.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetExampleAcoDownloadLinkResponse
     */
	public function getExampleAcoDownloadLink(
    ): \OpenAPI\OpenAPI\Models\Operations\GetExampleAcoDownloadLinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oracle/aco_example_download_link');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetExampleAcoDownloadLinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oracleFileDownloadLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OracleFileDownloadLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Oracle database information
     * 
     * Retrieves detailed information for a specified Oracle database object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOracleDbV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOracleDbV1Response
     */
	public function getOracleDbV1(
        \OpenAPI\OpenAPI\Models\Operations\GetOracleDbV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOracleDbV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oracle/db/{id}', \OpenAPI\OpenAPI\Models\Operations\GetOracleDbV1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOracleDbV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oracleDbDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OracleDbDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a size estimate for a restore or export
     * 
     * The estimated size of the data to download from an archival location in order to perform a specified restore or export operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OracleRestoreEstimateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OracleRestoreEstimateResponse
     */
	public function oracleRestoreEstimate(
        \OpenAPI\OpenAPI\Models\Operations\OracleRestoreEstimateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OracleRestoreEstimateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oracle/db/{id}/restore_estimate', \OpenAPI\OpenAPI\Models\Operations\OracleRestoreEstimateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OracleRestoreEstimateRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OracleRestoreEstimateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oracleRestoreEstimateResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OracleRestoreEstimateResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get summary information for Oracle databases
     * 
     * Retrieves an array containing summary information about the Oracle database objects in the Rubrik cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryOracleDbV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryOracleDbV1Response
     */
	public function queryOracleDbV1(
        \OpenAPI\OpenAPI\Models\Operations\QueryOracleDbV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryOracleDbV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oracle/db');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryOracleDbV1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryOracleDbV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oracleDbSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OracleDbSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an Oracle Data Guard group
     * 
     * Update properties of an Oracle Data Guard group object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOracleDataGuardGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOracleDataGuardGroupResponse
     */
	public function updateOracleDataGuardGroup(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOracleDataGuardGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOracleDataGuardGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oracle/data_guard_group/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateOracleDataGuardGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "oracleDataGuardGroupUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOracleDataGuardGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oracleDbDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OracleDbDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an Oracle database
     * 
     * Updates the properties of a specified Oracle database object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOracleDbV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOracleDbV1Response
     */
	public function updateOracleDbV1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOracleDbV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOracleDbV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oracle/db/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateOracleDbV1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "oracleUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOracleDbV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oracleDbDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OracleDbDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validate Oracle ACO file
     * 
     * Validate the provided Oracle ACO (Advanced Cloning Options) file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ValidateOracleAcoFileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ValidateOracleAcoFileResponse
     */
	public function validateOracleAcoFile(
        \OpenAPI\OpenAPI\Models\Operations\ValidateOracleAcoFileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ValidateOracleAcoFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oracle/validate_aco_file');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "string");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ValidateOracleAcoFileRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ValidateOracleAcoFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oracleAcoValidationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OracleAcoValidationResult', 'json');
            }
        }

        return $response;
    }
}