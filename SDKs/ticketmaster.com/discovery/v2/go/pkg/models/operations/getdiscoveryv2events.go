// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetDiscoveryV2EventsIncludeLicensedContentEnum - Yes if you want to display licensed content
type GetDiscoveryV2EventsIncludeLicensedContentEnum string

const (
	GetDiscoveryV2EventsIncludeLicensedContentEnumYes GetDiscoveryV2EventsIncludeLicensedContentEnum = "yes"
	GetDiscoveryV2EventsIncludeLicensedContentEnumNo  GetDiscoveryV2EventsIncludeLicensedContentEnum = " no"
)

func (e *GetDiscoveryV2EventsIncludeLicensedContentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yes":
		fallthrough
	case " no":
		*e = GetDiscoveryV2EventsIncludeLicensedContentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2EventsIncludeLicensedContentEnum: %s", s)
	}
}

// GetDiscoveryV2EventsIncludeSpellcheckEnum - yes, to include spell check suggestions in the response.
type GetDiscoveryV2EventsIncludeSpellcheckEnum string

const (
	GetDiscoveryV2EventsIncludeSpellcheckEnumYes GetDiscoveryV2EventsIncludeSpellcheckEnum = "yes"
	GetDiscoveryV2EventsIncludeSpellcheckEnumNo  GetDiscoveryV2EventsIncludeSpellcheckEnum = " no"
)

func (e *GetDiscoveryV2EventsIncludeSpellcheckEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yes":
		fallthrough
	case " no":
		*e = GetDiscoveryV2EventsIncludeSpellcheckEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2EventsIncludeSpellcheckEnum: %s", s)
	}
}

// GetDiscoveryV2EventsIncludeTbaEnum - True, to include events with date to be announce (TBA)
type GetDiscoveryV2EventsIncludeTbaEnum string

const (
	GetDiscoveryV2EventsIncludeTbaEnumYes  GetDiscoveryV2EventsIncludeTbaEnum = "yes"
	GetDiscoveryV2EventsIncludeTbaEnumNo   GetDiscoveryV2EventsIncludeTbaEnum = " no"
	GetDiscoveryV2EventsIncludeTbaEnumOnly GetDiscoveryV2EventsIncludeTbaEnum = " only"
)

func (e *GetDiscoveryV2EventsIncludeTbaEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yes":
		fallthrough
	case " no":
		fallthrough
	case " only":
		*e = GetDiscoveryV2EventsIncludeTbaEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2EventsIncludeTbaEnum: %s", s)
	}
}

// GetDiscoveryV2EventsIncludeTbdEnum - True, to include event with a date to be defined (TBD)
type GetDiscoveryV2EventsIncludeTbdEnum string

const (
	GetDiscoveryV2EventsIncludeTbdEnumYes  GetDiscoveryV2EventsIncludeTbdEnum = "yes"
	GetDiscoveryV2EventsIncludeTbdEnumNo   GetDiscoveryV2EventsIncludeTbdEnum = " no"
	GetDiscoveryV2EventsIncludeTbdEnumOnly GetDiscoveryV2EventsIncludeTbdEnum = " only"
)

func (e *GetDiscoveryV2EventsIncludeTbdEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yes":
		fallthrough
	case " no":
		fallthrough
	case " only":
		*e = GetDiscoveryV2EventsIncludeTbdEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2EventsIncludeTbdEnum: %s", s)
	}
}

// GetDiscoveryV2EventsIncludeTestEnum - True if you want to have entities flag as test in the response. Only, if you only wanted test entities
type GetDiscoveryV2EventsIncludeTestEnum string

const (
	GetDiscoveryV2EventsIncludeTestEnumYes  GetDiscoveryV2EventsIncludeTestEnum = "yes"
	GetDiscoveryV2EventsIncludeTestEnumNo   GetDiscoveryV2EventsIncludeTestEnum = " no"
	GetDiscoveryV2EventsIncludeTestEnumOnly GetDiscoveryV2EventsIncludeTestEnum = " only"
)

func (e *GetDiscoveryV2EventsIncludeTestEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yes":
		fallthrough
	case " no":
		fallthrough
	case " only":
		*e = GetDiscoveryV2EventsIncludeTestEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2EventsIncludeTestEnum: %s", s)
	}
}

// GetDiscoveryV2EventsSourceEnum - Filter entities by its source name
type GetDiscoveryV2EventsSourceEnum string

const (
	GetDiscoveryV2EventsSourceEnumTicketmaster GetDiscoveryV2EventsSourceEnum = "ticketmaster"
	GetDiscoveryV2EventsSourceEnumUniverse     GetDiscoveryV2EventsSourceEnum = " universe"
	GetDiscoveryV2EventsSourceEnumFrontgate    GetDiscoveryV2EventsSourceEnum = " frontgate"
	GetDiscoveryV2EventsSourceEnumTmr          GetDiscoveryV2EventsSourceEnum = " tmr"
)

func (e *GetDiscoveryV2EventsSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ticketmaster":
		fallthrough
	case " universe":
		fallthrough
	case " frontgate":
		fallthrough
	case " tmr":
		*e = GetDiscoveryV2EventsSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2EventsSourceEnum: %s", s)
	}
}

// GetDiscoveryV2EventsUnitEnum - Unit of the radius
type GetDiscoveryV2EventsUnitEnum string

const (
	GetDiscoveryV2EventsUnitEnumMiles GetDiscoveryV2EventsUnitEnum = "miles"
	GetDiscoveryV2EventsUnitEnumKm    GetDiscoveryV2EventsUnitEnum = "km"
)

func (e *GetDiscoveryV2EventsUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "miles":
		fallthrough
	case "km":
		*e = GetDiscoveryV2EventsUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2EventsUnitEnum: %s", s)
	}
}

type GetDiscoveryV2EventsQueryParams struct {
	// Filter events by attraction id
	AttractionID *string `queryParam:"style=form,explode=true,name=attractionId"`
	// Filter events by city
	City *string `queryParam:"style=form,explode=true,name=city"`
	// Filter events by classification id: id of any segment, genre, sub-genre, type, sub-type
	ClassificationID []interface{} `queryParam:"style=form,explode=true,name=classificationId"`
	// Filter events by classification name: name of any segment, genre, sub-genre, type, sub-type
	ClassificationName []interface{} `queryParam:"style=form,explode=true,name=classificationName"`
	// Filter events by clientName
	ClientVisibility *string `queryParam:"style=form,explode=true,name=clientVisibility"`
	// Filter events by country code
	CountryCode *string `queryParam:"style=form,explode=true,name=countryCode"`
	// Filter events by dma id
	DmaID *string `queryParam:"style=form,explode=true,name=dmaId"`
	// Filter events with a start date before this date
	EndDateTime *string `queryParam:"style=form,explode=true,name=endDateTime"`
	// filter events by geoHash
	GeoPoint *string `queryParam:"style=form,explode=true,name=geoPoint"`
	// Filter entities by its id
	ID *string `queryParam:"style=form,explode=true,name=id"`
	// Yes if you want to display licensed content
	IncludeLicensedContent *GetDiscoveryV2EventsIncludeLicensedContentEnum `queryParam:"style=form,explode=true,name=includeLicensedContent"`
	// yes, to include spell check suggestions in the response.
	IncludeSpellcheck *GetDiscoveryV2EventsIncludeSpellcheckEnum `queryParam:"style=form,explode=true,name=includeSpellcheck"`
	// True, to include events with date to be announce (TBA)
	IncludeTBA *GetDiscoveryV2EventsIncludeTbaEnum `queryParam:"style=form,explode=true,name=includeTBA"`
	// True, to include event with a date to be defined (TBD)
	IncludeTBD *GetDiscoveryV2EventsIncludeTbdEnum `queryParam:"style=form,explode=true,name=includeTBD"`
	// True if you want to have entities flag as test in the response. Only, if you only wanted test entities
	IncludeTest *GetDiscoveryV2EventsIncludeTestEnum `queryParam:"style=form,explode=true,name=includeTest"`
	// Keyword to search on
	Keyword *string `queryParam:"style=form,explode=true,name=keyword"`
	// Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
	Latlong *string `queryParam:"style=form,explode=true,name=latlong"`
	// The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*')
	Locale *string `queryParam:"style=form,explode=true,name=locale"`
	// Filter events by market id
	MarketID *string `queryParam:"style=form,explode=true,name=marketId"`
	// Filter events with onsale end date before this date
	OnsaleEndDateTime *string `queryParam:"style=form,explode=true,name=onsaleEndDateTime"`
	// Filter events with onsale range within this date
	OnsaleOnAfterStartDate *string `queryParam:"style=form,explode=true,name=onsaleOnAfterStartDate"`
	// Filter events with onsale start date on this date
	OnsaleOnStartDate *string `queryParam:"style=form,explode=true,name=onsaleOnStartDate"`
	// Filter events with onsale start date after this date
	OnsaleStartDateTime *string `queryParam:"style=form,explode=true,name=onsaleStartDateTime"`
	// Page number
	Page *string `queryParam:"style=form,explode=true,name=page"`
	// Filter events by postal code / zipcode
	PostalCode *string `queryParam:"style=form,explode=true,name=postalCode"`
	// Filter events by promoter id
	PromoterID *string `queryParam:"style=form,explode=true,name=promoterId"`
	// Radius of the area in which we want to search for events.
	Radius *string `queryParam:"style=form,explode=true,name=radius"`
	// Filter events by segment id
	SegmentID *string `queryParam:"style=form,explode=true,name=segmentId"`
	// Filter events by segment name
	SegmentName *string `queryParam:"style=form,explode=true,name=segmentName"`
	// Page size of the response
	Size *string `queryParam:"style=form,explode=true,name=size"`
	// Sorting order of the search result. Allowable values : 'name,asc', 'name,desc', 'date,asc', 'date,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'name,date,asc', 'name,date,desc', 'date,name,asc', 'date,name,desc','onsaleStartDate,asc', 'id,asc'
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Filter entities by its source name
	Source *GetDiscoveryV2EventsSourceEnum `queryParam:"style=form,explode=true,name=source"`
	// Filter events with a start date after this date
	StartDateTime *string `queryParam:"style=form,explode=true,name=startDateTime"`
	// Filter events by state code
	StateCode *string `queryParam:"style=form,explode=true,name=stateCode"`
	// Unit of the radius
	Unit *GetDiscoveryV2EventsUnitEnum `queryParam:"style=form,explode=true,name=unit"`
	// Filter events by venue id
	VenueID *string `queryParam:"style=form,explode=true,name=venueId"`
}

type GetDiscoveryV2EventsRequest struct {
	QueryParams GetDiscoveryV2EventsQueryParams
}

type GetDiscoveryV2EventsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
