"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ChannelCatalogsLegacyTrackingGlobal:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_legacy_tracking_channel_catalog(self, request: operations.GetLegacyTrackingChannelCatalogRequest) -> operations.GetLegacyTrackingChannelCatalogResponse:
        r"""Get the channel catalog configured to use legacy tracking format information"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetLegacyTrackingChannelCatalogRequest, base_url, '/v2/user/legacyTracking/channelCatalogs/{channelCatalogId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLegacyTrackingChannelCatalogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyTrackingChannelCatalog])
                res.legacy_tracking_channel_catalog = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def get_legacy_tracking_channel_catalogs(self, request: operations.GetLegacyTrackingChannelCatalogsRequest) -> operations.GetLegacyTrackingChannelCatalogsResponse:
        r"""List all your current channel catalogs configured to use legacy tracking format"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/user/legacyTracking/channelCatalogs/'
        
        query_params = utils.get_query_params(operations.GetLegacyTrackingChannelCatalogsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLegacyTrackingChannelCatalogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyTrackingChannelCatalogList])
                res.legacy_tracking_channel_catalog_list = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def migrate_legacy_tracking_channel_catalog(self, request: operations.MigrateLegacyTrackingChannelCatalogRequest) -> operations.MigrateLegacyTrackingChannelCatalogResponse:
        r"""Migrate a channel catalog to current tracking format"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrateLegacyTrackingChannelCatalogRequest, base_url, '/v2/user/legacyTracking/channelCatalogs/{channelCatalogId}/migrate', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrateLegacyTrackingChannelCatalogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    