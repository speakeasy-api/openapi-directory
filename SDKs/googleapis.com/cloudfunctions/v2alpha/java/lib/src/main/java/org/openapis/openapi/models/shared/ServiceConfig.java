/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ServiceConfig - Describes the Service being deployed. Currently Supported : Cloud Run (fully managed). Next tag: 23
 */
public class ServiceConfig {
    /**
     * Whether 100% of traffic is routed to the latest revision. On CreateFunction and UpdateFunction, when set to true, the revision being deployed will serve 100% of traffic, ignoring any traffic split settings, if any. On GetFunction, true will be returned if the latest revision is serving 100% of traffic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allTrafficOnLatestRevision")
    public Boolean allTrafficOnLatestRevision;
    public ServiceConfig withAllTrafficOnLatestRevision(Boolean allTrafficOnLatestRevision) {
        this.allTrafficOnLatestRevision = allTrafficOnLatestRevision;
        return this;
    }
    
    /**
     * The number of CPUs used in a single container instance. Default value is calculated from available memory. Supports the same values as Cloud Run, see https://cloud.google.com/run/docs/reference/rest/v1/Container#resourcerequirements Example: "1" indicates 1 vCPU
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableCpu")
    public String availableCpu;
    public ServiceConfig withAvailableCpu(String availableCpu) {
        this.availableCpu = availableCpu;
        return this;
    }
    
    /**
     * The amount of memory available for a function. Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is supplied the value is interpreted as bytes. See https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go a full description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableMemory")
    public String availableMemory;
    public ServiceConfig withAvailableMemory(String availableMemory) {
        this.availableMemory = availableMemory;
        return this;
    }
    
    /**
     * Environment variables that shall be available during function execution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environmentVariables")
    public java.util.Map<String, String> environmentVariables;
    public ServiceConfig withEnvironmentVariables(java.util.Map<String, String> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }
    
    /**
     * The ingress settings for the function, controlling what traffic can reach it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ingressSettings")
    public ServiceConfigIngressSettingsEnum ingressSettings;
    public ServiceConfig withIngressSettings(ServiceConfigIngressSettingsEnum ingressSettings) {
        this.ingressSettings = ingressSettings;
        return this;
    }
    
    /**
     * The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxInstanceCount")
    public Integer maxInstanceCount;
    public ServiceConfig withMaxInstanceCount(Integer maxInstanceCount) {
        this.maxInstanceCount = maxInstanceCount;
        return this;
    }
    
    /**
     * Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxInstanceRequestConcurrency")
    public Integer maxInstanceRequestConcurrency;
    public ServiceConfig withMaxInstanceRequestConcurrency(Integer maxInstanceRequestConcurrency) {
        this.maxInstanceRequestConcurrency = maxInstanceRequestConcurrency;
        return this;
    }
    
    /**
     * The limit on the minimum number of function instances that may coexist at a given time. Function instances are kept in idle state for a short period after they finished executing the request to reduce cold start time for subsequent requests. Setting a minimum instance count will ensure that the given number of instances are kept running in idle state always. This can help with cold start times when jump in incoming request count occurs after the idle instance would have been stopped in the default case.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minInstanceCount")
    public Integer minInstanceCount;
    public ServiceConfig withMinInstanceCount(Integer minInstanceCount) {
        this.minInstanceCount = minInstanceCount;
        return this;
    }
    
    /**
     * Output only. The name of service revision.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revision")
    public String revision;
    public ServiceConfig withRevision(String revision) {
        this.revision = revision;
        return this;
    }
    
    /**
     * Secret environment variables configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secretEnvironmentVariables")
    public SecretEnvVar[] secretEnvironmentVariables;
    public ServiceConfig withSecretEnvironmentVariables(SecretEnvVar[] secretEnvironmentVariables) {
        this.secretEnvironmentVariables = secretEnvironmentVariables;
        return this;
    }
    
    /**
     * Secret volumes configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secretVolumes")
    public SecretVolume[] secretVolumes;
    public ServiceConfig withSecretVolumes(SecretVolume[] secretVolumes) {
        this.secretVolumes = secretVolumes;
        return this;
    }
    
    /**
     * Security level configure whether the function only accepts https. This configuration is only applicable to 1st Gen functions with Http trigger. By default https is optional for 1st Gen functions; 2nd Gen functions are https ONLY.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("securityLevel")
    public ServiceConfigSecurityLevelEnum securityLevel;
    public ServiceConfig withSecurityLevel(ServiceConfigSecurityLevelEnum securityLevel) {
        this.securityLevel = securityLevel;
        return this;
    }
    
    /**
     * Output only. Name of the service associated with a Function. The format of this field is `projects/{project}/locations/{region}/services/{service}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service")
    public String service;
    public ServiceConfig withService(String service) {
        this.service = service;
        return this;
    }
    
    /**
     * The email of the service's service account. If empty, defaults to `{project_number}-compute@developer.gserviceaccount.com`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAccountEmail")
    public String serviceAccountEmail;
    public ServiceConfig withServiceAccountEmail(String serviceAccountEmail) {
        this.serviceAccountEmail = serviceAccountEmail;
        return this;
    }
    
    /**
     * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeoutSeconds")
    public Integer timeoutSeconds;
    public ServiceConfig withTimeoutSeconds(Integer timeoutSeconds) {
        this.timeoutSeconds = timeoutSeconds;
        return this;
    }
    
    /**
     * Output only. URI of the Service deployed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri")
    public String uri;
    public ServiceConfig withUri(String uri) {
        this.uri = uri;
        return this;
    }
    
    /**
     * The Serverless VPC Access connector that this cloud function can connect to. The format of this field is `projects/* /locations/* /connectors/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vpcConnector")
    public String vpcConnector;
    public ServiceConfig withVpcConnector(String vpcConnector) {
        this.vpcConnector = vpcConnector;
        return this;
    }
    
    /**
     * The egress settings for the connector, controlling what traffic is diverted through it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vpcConnectorEgressSettings")
    public ServiceConfigVpcConnectorEgressSettingsEnum vpcConnectorEgressSettings;
    public ServiceConfig withVpcConnectorEgressSettings(ServiceConfigVpcConnectorEgressSettingsEnum vpcConnectorEgressSettings) {
        this.vpcConnectorEgressSettings = vpcConnectorEgressSettings;
        return this;
    }
    
}
