<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TransactionProcess 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * 1. Starts a new transaction
     * 
     * This request is the first step to create a new transaction.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OneCreateanewtransactionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OneCreateanewtransactionResponse
     */
	public function oneCreateanewtransaction(
        \OpenAPI\OpenAPI\Models\Operations\OneCreateanewtransactionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OneCreateanewtransactionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/transactions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "oneCreateanewtransactionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OneCreateanewtransactionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->startTransactionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StartTransactionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 2.1 Send Payments Information Public
     * 
     * The second step to create a new transaction. Here, you have the option to send the data in three diferent ways: doing a private request, a public request or a private request that uses a saved Credit Card. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TwoSendPaymentsPublicRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TwoSendPaymentsPublicResponse
     */
	public function twoSendPaymentsPublic(
        \OpenAPI\OpenAPI\Models\Operations\TwoSendPaymentsPublicRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TwoSendPaymentsPublicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pub/transactions/{transactionId}/payments', \OpenAPI\OpenAPI\Models\Operations\TwoSendPaymentsPublicRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TwoSendPaymentsPublicRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TwoSendPaymentsPublicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * 2.2 Send Payments With Saved Credit Card
     * 
     * The second step to create a new transaction. Here, you have the option to send the data in three diferent ways: doing a private request, a public request or a private request that uses a saved Credit Card.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TwoSendPaymentsWithSavedCreditCardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TwoSendPaymentsWithSavedCreditCardResponse
     */
	public function twoSendPaymentsWithSavedCreditCard(
        \OpenAPI\OpenAPI\Models\Operations\TwoSendPaymentsWithSavedCreditCardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TwoSendPaymentsWithSavedCreditCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/transactions/{transactionId}/payments', \OpenAPI\OpenAPI\Models\Operations\TwoSendPaymentsWithSavedCreditCardRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TwoSendPaymentsWithSavedCreditCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * 3. Send Additional Data
     * 
     * The third step to create a new transaction. It will send the additional related data to the transaction, like billig and shipping adress.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ThreeSendAdditionalDataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ThreeSendAdditionalDataResponse
     */
	public function threeSendAdditionalData(
        \OpenAPI\OpenAPI\Models\Operations\ThreeSendAdditionalDataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ThreeSendAdditionalDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/transactions/{transactionId}/additional-data', \OpenAPI\OpenAPI\Models\Operations\ThreeSendAdditionalDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ThreeSendAdditionalDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Do authorization
     * 
     * The fouth and last step to create a new transaction. It will authorized the new transction creation acorrdint to the data previously informed in the latests requests.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FourDoauthorizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FourDoauthorizationResponse
     */
	public function fourDoauthorization(
        \OpenAPI\OpenAPI\Models\Operations\FourDoauthorizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FourDoauthorizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/transactions/{transactionId}/authorization-request', \OpenAPI\OpenAPI\Models\Operations\FourDoauthorizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "fourDoauthorizationRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FourDoauthorizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Payment Details
     * 
     * Returns associated information details for the specified payment id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PaymentDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PaymentDetailsResponse
     */
	public function paymentDetails(
        \OpenAPI\OpenAPI\Models\Operations\PaymentDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PaymentDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/transactions/{transactionId}/payments/{paymentId}', \OpenAPI\OpenAPI\Models\Operations\PaymentDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PaymentDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paymentDetailsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaymentDetailsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Transaction Details
     * 
     * Returns associated data for the specified transaction id, like value and status, for exemple.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TransactionDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TransactionDetailsResponse
     */
	public function transactionDetails(
        \OpenAPI\OpenAPI\Models\Operations\TransactionDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TransactionDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/transactions/{transactionId}', \OpenAPI\OpenAPI\Models\Operations\TransactionDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TransactionDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->transactionDetailsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TransactionDetailsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Transaction Settlement  Details
     * 
     * Returns associated settlements data for the specified transaction id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TransactionSettlementDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TransactionSettlementDetailsResponse
     */
	public function transactionSettlementDetails(
        \OpenAPI\OpenAPI\Models\Operations\TransactionSettlementDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TransactionSettlementDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pvt/transactions/{transactionId}/settlements', \OpenAPI\OpenAPI\Models\Operations\TransactionSettlementDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TransactionSettlementDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->transactionSettlementDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TransactionSettlementDetails', 'json');
            }
        }

        return $response;
    }
}