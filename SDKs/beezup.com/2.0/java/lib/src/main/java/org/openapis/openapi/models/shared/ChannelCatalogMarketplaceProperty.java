/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ChannelCatalogMarketplaceProperty - Model for fetching a channel catalog marketplace property
 */
public class ChannelCatalogMarketplaceProperty {
    /**
     * Indicate the description of the property
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public ChannelCatalogMarketplaceProperty withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonProperty("discriminatorType")
    public ChannelCatalogMarketplacePropertyDiscriminatorTypeEnum discriminatorType;

    public ChannelCatalogMarketplaceProperty withDiscriminatorType(ChannelCatalogMarketplacePropertyDiscriminatorTypeEnum discriminatorType) {
        this.discriminatorType = discriminatorType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("info")
    public BeezUPCommonInfoSummaries info;

    public ChannelCatalogMarketplaceProperty withInfo(BeezUPCommonInfoSummaries info) {
        this.info = info;
        return this;
    }
    
    /**
     * Describe the way you have to follow to get access to the LOV
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lovLink")
    public BeezUPCommonLOVLink3 lovLink;

    public ChannelCatalogMarketplaceProperty withLovLink(BeezUPCommonLOVLink3 lovLink) {
        this.lovLink = lovLink;
        return this;
    }
    
    /**
     * Indicates if the property value must be in the list of value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lovRequired")
    public Boolean lovRequired;

    public ChannelCatalogMarketplaceProperty withLovRequired(Boolean lovRequired) {
        this.lovRequired = lovRequired;
        return this;
    }
    
    /**
     * Indicates the maximum item count of the property value
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxItems")
    public Integer maxItems;

    public ChannelCatalogMarketplaceProperty withMaxItems(Integer maxItems) {
        this.maxItems = maxItems;
        return this;
    }
    
    /**
     * Indicates the maximum size of the property value
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxLength")
    public Integer maxLength;

    public ChannelCatalogMarketplaceProperty withMaxLength(Integer maxLength) {
        this.maxLength = maxLength;
        return this;
    }
    
    /**
     * Indicates the minimum item count of the property value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minItems")
    public Integer minItems;

    public ChannelCatalogMarketplaceProperty withMinItems(Integer minItems) {
        this.minItems = minItems;
        return this;
    }
    
    /**
     * Indicates the minimum size of the property value
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minLength")
    public Integer minLength;

    public ChannelCatalogMarketplaceProperty withMinLength(Integer minLength) {
        this.minLength = minLength;
        return this;
    }
    
    /**
     * Channel catalog marketplace property name
     */
    @JsonProperty("name")
    public String name;

    public ChannelCatalogMarketplaceProperty withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Indicates the offer identifier required to configure this property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offerIdRequired")
    public Long offerIdRequired;

    public ChannelCatalogMarketplaceProperty withOfferIdRequired(Long offerIdRequired) {
        this.offerIdRequired = offerIdRequired;
        return this;
    }
    
    /**
     * Channel catalog marketplace setting value format validation regular expression
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pattern")
    public String pattern;

    public ChannelCatalogMarketplaceProperty withPattern(String pattern) {
        this.pattern = pattern;
        return this;
    }
    
    /**
     * Indicate the position of the property in the display group
     */
    @JsonProperty("position")
    public Long position;

    public ChannelCatalogMarketplaceProperty withPosition(Long position) {
        this.position = position;
        return this;
    }
    
    /**
     * Indicate if the value cannot be changed. This is used for example for ebay token that should not be changed.
     */
    @JsonProperty("readOnly")
    public Boolean readOnly;

    public ChannelCatalogMarketplaceProperty withReadOnly(Boolean readOnly) {
        this.readOnly = readOnly;
        return this;
    }
    
    /**
     * Indicate if the property is required or not
     */
    @JsonProperty("required")
    public Boolean required;

    public ChannelCatalogMarketplaceProperty withRequired(Boolean required) {
        this.required = required;
        return this;
    }
    
    /**
     * The Data Type
     */
    @JsonProperty("type")
    public TypeEnum type;

    public ChannelCatalogMarketplaceProperty withType(TypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Indicates if this property should be displayed in the configuration page.
     */
    @JsonProperty("visible")
    public Boolean visible;

    public ChannelCatalogMarketplaceProperty withVisible(Boolean visible) {
        this.visible = visible;
        return this;
    }
    
    public ChannelCatalogMarketplaceProperty(@JsonProperty("discriminatorType") ChannelCatalogMarketplacePropertyDiscriminatorTypeEnum discriminatorType, @JsonProperty("name") String name, @JsonProperty("position") Long position, @JsonProperty("readOnly") Boolean readOnly, @JsonProperty("required") Boolean required, @JsonProperty("type") TypeEnum type, @JsonProperty("visible") Boolean visible) {
        this.discriminatorType = discriminatorType;
        this.name = name;
        this.position = position;
        this.readOnly = readOnly;
        this.required = required;
        this.type = type;
        this.visible = visible;
  }
}
