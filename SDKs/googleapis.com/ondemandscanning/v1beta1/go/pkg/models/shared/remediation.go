// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RemediationRemediationTypeEnum - The type of remediation that can be applied.
type RemediationRemediationTypeEnum string

const (
	RemediationRemediationTypeEnumRemediationTypeUnspecified RemediationRemediationTypeEnum = "REMEDIATION_TYPE_UNSPECIFIED"
	RemediationRemediationTypeEnumMitigation                 RemediationRemediationTypeEnum = "MITIGATION"
	RemediationRemediationTypeEnumNoFixPlanned               RemediationRemediationTypeEnum = "NO_FIX_PLANNED"
	RemediationRemediationTypeEnumNoneAvailable              RemediationRemediationTypeEnum = "NONE_AVAILABLE"
	RemediationRemediationTypeEnumVendorFix                  RemediationRemediationTypeEnum = "VENDOR_FIX"
	RemediationRemediationTypeEnumWorkaround                 RemediationRemediationTypeEnum = "WORKAROUND"
)

func (e *RemediationRemediationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "REMEDIATION_TYPE_UNSPECIFIED":
		fallthrough
	case "MITIGATION":
		fallthrough
	case "NO_FIX_PLANNED":
		fallthrough
	case "NONE_AVAILABLE":
		fallthrough
	case "VENDOR_FIX":
		fallthrough
	case "WORKAROUND":
		*e = RemediationRemediationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RemediationRemediationTypeEnum: %s", s)
	}
}

// Remediation - Specifies details on how to handle (and presumably, fix) a vulnerability.
type Remediation struct {
	// Contains a comprehensive human-readable discussion of the remediation.
	Details *string `json:"details,omitempty"`
	// The type of remediation that can be applied.
	RemediationType *RemediationRemediationTypeEnum `json:"remediationType,omitempty"`
	// Metadata for any related URL information.
	RemediationURI *RelatedURL `json:"remediationUri,omitempty"`
}
