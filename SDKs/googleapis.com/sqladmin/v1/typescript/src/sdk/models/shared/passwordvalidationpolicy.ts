/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The complexity of the password.
 */
export enum PasswordValidationPolicyComplexityEnum {
  ComplexityUnspecified = "COMPLEXITY_UNSPECIFIED",
  ComplexityDefault = "COMPLEXITY_DEFAULT",
}

/**
 * Database instance local user password validation policy
 */
export class PasswordValidationPolicy extends SpeakeasyBase {
  /**
   * The complexity of the password.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "complexity" })
  complexity?: PasswordValidationPolicyComplexityEnum;

  /**
   * Disallow username as a part of the password.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disallowUsernameSubstring" })
  disallowUsernameSubstring?: boolean;

  /**
   * Whether the password policy is enabled or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enablePasswordPolicy" })
  enablePasswordPolicy?: boolean;

  /**
   * Minimum number of characters allowed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minLength" })
  minLength?: number;

  /**
   * Minimum interval after which the password can be changed. This flag is only supported for PostgreSQL.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "passwordChangeInterval" })
  passwordChangeInterval?: string;

  /**
   * Number of previous passwords that cannot be reused.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reuseInterval" })
  reuseInterval?: number;
}
