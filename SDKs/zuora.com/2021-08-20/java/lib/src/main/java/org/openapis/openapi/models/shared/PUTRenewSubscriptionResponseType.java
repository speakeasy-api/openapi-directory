/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

public class PUTRenewSubscriptionResponseType {
    /**
     * The credit memo ID, if a credit memo is generated during the subscription process.
     * 
     * **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creditMemoId")
    public String creditMemoId;
    public PUTRenewSubscriptionResponseType withCreditMemoId(String creditMemoId) {
        this.creditMemoId = creditMemoId;
        return this;
    }
    
    /**
     * Invoice ID, if one is generated.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceId")
    public String invoiceId;
    public PUTRenewSubscriptionResponseType withInvoiceId(String invoiceId) {
        this.invoiceId = invoiceId;
        return this;
    }
    
    /**
     * Payment amount, if payment is collected.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paidAmount")
    public Double paidAmount;
    public PUTRenewSubscriptionResponseType withPaidAmount(Double paidAmount) {
        this.paidAmount = paidAmount;
        return this;
    }
    
    /**
     * Payment ID, if payment is collected.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentId")
    public String paymentId;
    public PUTRenewSubscriptionResponseType withPaymentId(String paymentId) {
        this.paymentId = paymentId;
        return this;
    }
    
    /**
     * Returns `true` if the request was processed successfully.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    public Boolean success;
    public PUTRenewSubscriptionResponseType withSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    
    /**
     * Date the new subscription term ends, as yyyy-mm-dd.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("termEndDate")
    public LocalDate termEndDate;
    public PUTRenewSubscriptionResponseType withTermEndDate(LocalDate termEndDate) {
        this.termEndDate = termEndDate;
        return this;
    }
    
    /**
     * Date the new subscription term begins, as yyyy-mm-dd.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("termStartDate")
    public LocalDate termStartDate;
    public PUTRenewSubscriptionResponseType withTermStartDate(LocalDate termStartDate) {
        this.termStartDate = termStartDate;
        return this;
    }
    
    /**
     * Change in the subscription monthly recurring revenue as a result of the update. For a renewal, this is the MRR of the subscription in the new term.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalDeltaMrr")
    public Double totalDeltaMrr;
    public PUTRenewSubscriptionResponseType withTotalDeltaMrr(Double totalDeltaMrr) {
        this.totalDeltaMrr = totalDeltaMrr;
        return this;
    }
    
    /**
     * Change in the total contracted value of the subscription as a result of the update. For a renewal, this is the TCV of the subscription in the new term.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalDeltaTcv")
    public Double totalDeltaTcv;
    public PUTRenewSubscriptionResponseType withTotalDeltaTcv(Double totalDeltaTcv) {
        this.totalDeltaTcv = totalDeltaTcv;
        return this;
    }
    
}
