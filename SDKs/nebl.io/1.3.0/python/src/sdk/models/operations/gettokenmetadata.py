"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import gettokenmetadataresponse as shared_gettokenmetadataresponse
from typing import Optional


@dataclasses.dataclass
class GetTokenMetadataRequest:
    
    tokenid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'tokenid', 'style': 'simple', 'explode': False }})
    r"""TokenId to request metadata for"""  
    verbosity: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'verbosity', 'style': 'form', 'explode': True }})
    r"""0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses"""  
    

@dataclasses.dataclass
class GetTokenMetadataResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Unexpected error"""  
    get_token_metadata_response: Optional[shared_gettokenmetadataresponse.GetTokenMetadataResponse] = dataclasses.field(default=None)
    r"""An object containing the metadata of a token"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    