"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def migrationcenter_projects_locations_assets_aggregate_values(self, request: operations.MigrationcenterProjectsLocationsAssetsAggregateValuesRequest, security: operations.MigrationcenterProjectsLocationsAssetsAggregateValuesSecurity) -> operations.MigrationcenterProjectsLocationsAssetsAggregateValuesResponse:
        r"""Aggregates the requested fields based on provided function."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsAssetsAggregateValuesRequest, base_url, '/v1alpha1/{parent}/assets:aggregateValues', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "aggregate_assets_values_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsAssetsAggregateValuesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsAssetsAggregateValuesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AggregateAssetsValuesResponse])
                res.aggregate_assets_values_response = out

        return res

    def migrationcenter_projects_locations_assets_batch_delete(self, request: operations.MigrationcenterProjectsLocationsAssetsBatchDeleteRequest, security: operations.MigrationcenterProjectsLocationsAssetsBatchDeleteSecurity) -> operations.MigrationcenterProjectsLocationsAssetsBatchDeleteResponse:
        r"""Deletes list of Assets."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsAssetsBatchDeleteRequest, base_url, '/v1alpha1/{parent}/assets:batchDelete', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_delete_assets_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsAssetsBatchDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsAssetsBatchDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def migrationcenter_projects_locations_assets_batch_update(self, request: operations.MigrationcenterProjectsLocationsAssetsBatchUpdateRequest, security: operations.MigrationcenterProjectsLocationsAssetsBatchUpdateSecurity) -> operations.MigrationcenterProjectsLocationsAssetsBatchUpdateResponse:
        r"""Updates the parameters of a list of assets."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsAssetsBatchUpdateRequest, base_url, '/v1alpha1/{parent}/assets:batchUpdate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_update_assets_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsAssetsBatchUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsAssetsBatchUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchUpdateAssetsResponse])
                res.batch_update_assets_response = out

        return res

    def migrationcenter_projects_locations_assets_list(self, request: operations.MigrationcenterProjectsLocationsAssetsListRequest, security: operations.MigrationcenterProjectsLocationsAssetsListSecurity) -> operations.MigrationcenterProjectsLocationsAssetsListResponse:
        r"""Lists all the assets in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsAssetsListRequest, base_url, '/v1alpha1/{parent}/assets', request)
        
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsAssetsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsAssetsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAssetsResponse])
                res.list_assets_response = out

        return res

    def migrationcenter_projects_locations_assets_report_asset_frames(self, request: operations.MigrationcenterProjectsLocationsAssetsReportAssetFramesRequest, security: operations.MigrationcenterProjectsLocationsAssetsReportAssetFramesSecurity) -> operations.MigrationcenterProjectsLocationsAssetsReportAssetFramesResponse:
        r"""Reports a set of frames."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsAssetsReportAssetFramesRequest, base_url, '/v1alpha1/{parent}/assets:reportAssetFrames', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "frames", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsAssetsReportAssetFramesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsAssetsReportAssetFramesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.report_asset_frames_response = out

        return res

    def migrationcenter_projects_locations_groups_add_assets(self, request: operations.MigrationcenterProjectsLocationsGroupsAddAssetsRequest, security: operations.MigrationcenterProjectsLocationsGroupsAddAssetsSecurity) -> operations.MigrationcenterProjectsLocationsGroupsAddAssetsResponse:
        r"""Adds assets to a group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsGroupsAddAssetsRequest, base_url, '/v1alpha1/{group}:addAssets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_assets_to_group_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsGroupsAddAssetsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsGroupsAddAssetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def migrationcenter_projects_locations_groups_create(self, request: operations.MigrationcenterProjectsLocationsGroupsCreateRequest, security: operations.MigrationcenterProjectsLocationsGroupsCreateSecurity) -> operations.MigrationcenterProjectsLocationsGroupsCreateResponse:
        r"""Creates a new group in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsGroupsCreateRequest, base_url, '/v1alpha1/{parent}/groups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "group_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsGroupsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsGroupsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def migrationcenter_projects_locations_groups_list(self, request: operations.MigrationcenterProjectsLocationsGroupsListRequest, security: operations.MigrationcenterProjectsLocationsGroupsListSecurity) -> operations.MigrationcenterProjectsLocationsGroupsListResponse:
        r"""Lists all groups in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsGroupsListRequest, base_url, '/v1alpha1/{parent}/groups', request)
        
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsGroupsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListGroupsResponse])
                res.list_groups_response = out

        return res

    def migrationcenter_projects_locations_groups_remove_assets(self, request: operations.MigrationcenterProjectsLocationsGroupsRemoveAssetsRequest, security: operations.MigrationcenterProjectsLocationsGroupsRemoveAssetsSecurity) -> operations.MigrationcenterProjectsLocationsGroupsRemoveAssetsResponse:
        r"""Removes assets from a group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsGroupsRemoveAssetsRequest, base_url, '/v1alpha1/{group}:removeAssets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "remove_assets_from_group_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsGroupsRemoveAssetsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsGroupsRemoveAssetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def migrationcenter_projects_locations_import_jobs_create(self, request: operations.MigrationcenterProjectsLocationsImportJobsCreateRequest, security: operations.MigrationcenterProjectsLocationsImportJobsCreateSecurity) -> operations.MigrationcenterProjectsLocationsImportJobsCreateResponse:
        r"""Creates an import job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsImportJobsCreateRequest, base_url, '/v1alpha1/{parent}/importJobs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "import_job_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsImportJobsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsImportJobsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def migrationcenter_projects_locations_import_jobs_import_data_files_create(self, request: operations.MigrationcenterProjectsLocationsImportJobsImportDataFilesCreateRequest, security: operations.MigrationcenterProjectsLocationsImportJobsImportDataFilesCreateSecurity) -> operations.MigrationcenterProjectsLocationsImportJobsImportDataFilesCreateResponse:
        r"""Creates an import data file."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsImportJobsImportDataFilesCreateRequest, base_url, '/v1alpha1/{parent}/importDataFiles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "import_data_file_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsImportJobsImportDataFilesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsImportJobsImportDataFilesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def migrationcenter_projects_locations_import_jobs_import_data_files_list(self, request: operations.MigrationcenterProjectsLocationsImportJobsImportDataFilesListRequest, security: operations.MigrationcenterProjectsLocationsImportJobsImportDataFilesListSecurity) -> operations.MigrationcenterProjectsLocationsImportJobsImportDataFilesListResponse:
        r"""List import data files."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsImportJobsImportDataFilesListRequest, base_url, '/v1alpha1/{parent}/importDataFiles', request)
        
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsImportJobsImportDataFilesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsImportJobsImportDataFilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListImportDataFilesResponse])
                res.list_import_data_files_response = out

        return res

    def migrationcenter_projects_locations_import_jobs_list(self, request: operations.MigrationcenterProjectsLocationsImportJobsListRequest, security: operations.MigrationcenterProjectsLocationsImportJobsListSecurity) -> operations.MigrationcenterProjectsLocationsImportJobsListResponse:
        r"""Lists all import jobs."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsImportJobsListRequest, base_url, '/v1alpha1/{parent}/importJobs', request)
        
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsImportJobsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsImportJobsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListImportJobsResponse])
                res.list_import_jobs_response = out

        return res

    def migrationcenter_projects_locations_import_jobs_run(self, request: operations.MigrationcenterProjectsLocationsImportJobsRunRequest, security: operations.MigrationcenterProjectsLocationsImportJobsRunSecurity) -> operations.MigrationcenterProjectsLocationsImportJobsRunResponse:
        r"""Runs an import job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsImportJobsRunRequest, base_url, '/v1alpha1/{name}:run', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "run_import_job_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsImportJobsRunRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsImportJobsRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def migrationcenter_projects_locations_import_jobs_validate(self, request: operations.MigrationcenterProjectsLocationsImportJobsValidateRequest, security: operations.MigrationcenterProjectsLocationsImportJobsValidateSecurity) -> operations.MigrationcenterProjectsLocationsImportJobsValidateResponse:
        r"""Validates an import job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsImportJobsValidateRequest, base_url, '/v1alpha1/{name}:validate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "validate_import_job_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsImportJobsValidateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsImportJobsValidateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def migrationcenter_projects_locations_list(self, request: operations.MigrationcenterProjectsLocationsListRequest, security: operations.MigrationcenterProjectsLocationsListSecurity) -> operations.MigrationcenterProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsListRequest, base_url, '/v1alpha1/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def migrationcenter_projects_locations_operations_cancel(self, request: operations.MigrationcenterProjectsLocationsOperationsCancelRequest, security: operations.MigrationcenterProjectsLocationsOperationsCancelSecurity) -> operations.MigrationcenterProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsOperationsCancelRequest, base_url, '/v1alpha1/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def migrationcenter_projects_locations_operations_list(self, request: operations.MigrationcenterProjectsLocationsOperationsListRequest, security: operations.MigrationcenterProjectsLocationsOperationsListSecurity) -> operations.MigrationcenterProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsOperationsListRequest, base_url, '/v1alpha1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    def migrationcenter_projects_locations_preference_sets_create(self, request: operations.MigrationcenterProjectsLocationsPreferenceSetsCreateRequest, security: operations.MigrationcenterProjectsLocationsPreferenceSetsCreateSecurity) -> operations.MigrationcenterProjectsLocationsPreferenceSetsCreateResponse:
        r"""Creates a new preference set in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsPreferenceSetsCreateRequest, base_url, '/v1alpha1/{parent}/preferenceSets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "preference_set_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsPreferenceSetsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsPreferenceSetsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def migrationcenter_projects_locations_preference_sets_list(self, request: operations.MigrationcenterProjectsLocationsPreferenceSetsListRequest, security: operations.MigrationcenterProjectsLocationsPreferenceSetsListSecurity) -> operations.MigrationcenterProjectsLocationsPreferenceSetsListResponse:
        r"""Lists all the preference sets in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsPreferenceSetsListRequest, base_url, '/v1alpha1/{parent}/preferenceSets', request)
        
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsPreferenceSetsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsPreferenceSetsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPreferenceSetsResponse])
                res.list_preference_sets_response = out

        return res

    def migrationcenter_projects_locations_sources_create(self, request: operations.MigrationcenterProjectsLocationsSourcesCreateRequest, security: operations.MigrationcenterProjectsLocationsSourcesCreateSecurity) -> operations.MigrationcenterProjectsLocationsSourcesCreateResponse:
        r"""Creates a new source in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsSourcesCreateRequest, base_url, '/v1alpha1/{parent}/sources', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "source_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsSourcesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsSourcesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def migrationcenter_projects_locations_sources_delete(self, request: operations.MigrationcenterProjectsLocationsSourcesDeleteRequest, security: operations.MigrationcenterProjectsLocationsSourcesDeleteSecurity) -> operations.MigrationcenterProjectsLocationsSourcesDeleteResponse:
        r"""Deletes a source."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsSourcesDeleteRequest, base_url, '/v1alpha1/{name}', request)
        
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsSourcesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsSourcesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def migrationcenter_projects_locations_sources_get(self, request: operations.MigrationcenterProjectsLocationsSourcesGetRequest, security: operations.MigrationcenterProjectsLocationsSourcesGetSecurity) -> operations.MigrationcenterProjectsLocationsSourcesGetResponse:
        r"""Gets the details of a source."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsSourcesGetRequest, base_url, '/v1alpha1/{name}', request)
        
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsSourcesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsSourcesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Source])
                res.source = out

        return res

    def migrationcenter_projects_locations_sources_list(self, request: operations.MigrationcenterProjectsLocationsSourcesListRequest, security: operations.MigrationcenterProjectsLocationsSourcesListSecurity) -> operations.MigrationcenterProjectsLocationsSourcesListResponse:
        r"""Lists all the sources in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsSourcesListRequest, base_url, '/v1alpha1/{parent}/sources', request)
        
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsSourcesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsSourcesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListSourcesResponse])
                res.list_sources_response = out

        return res

    def migrationcenter_projects_locations_sources_patch(self, request: operations.MigrationcenterProjectsLocationsSourcesPatchRequest, security: operations.MigrationcenterProjectsLocationsSourcesPatchSecurity) -> operations.MigrationcenterProjectsLocationsSourcesPatchResponse:
        r"""Updates the parameters of a source."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MigrationcenterProjectsLocationsSourcesPatchRequest, base_url, '/v1alpha1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "source_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MigrationcenterProjectsLocationsSourcesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MigrationcenterProjectsLocationsSourcesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    