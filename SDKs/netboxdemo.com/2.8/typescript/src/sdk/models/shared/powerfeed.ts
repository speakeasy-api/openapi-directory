/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NestedPowerPanel } from "./nestedpowerpanel";
import { NestedRack } from "./nestedrack";
import { Expose, Transform, Type } from "class-transformer";

export enum PowerFeedPhaseLabelEnum {
  SinglePhase = "Single phase",
  ThreePhase = "Three-phase",
}

export enum PowerFeedPhaseValueEnum {
  SinglePhase = "single-phase",
  ThreePhase = "three-phase",
}

export class PowerFeedPhase extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label: PowerFeedPhaseLabelEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: PowerFeedPhaseValueEnum;
}

export enum PowerFeedStatusLabelEnum {
  Offline = "Offline",
  Active = "Active",
  Planned = "Planned",
  Failed = "Failed",
}

export enum PowerFeedStatusValueEnum {
  Offline = "offline",
  Active = "active",
  Planned = "planned",
  Failed = "failed",
}

export class PowerFeedStatus extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label: PowerFeedStatusLabelEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: PowerFeedStatusValueEnum;
}

export enum PowerFeedSupplyLabelEnum {
  Ac = "AC",
  Dc = "DC",
}

export enum PowerFeedSupplyValueEnum {
  Ac = "ac",
  Dc = "dc",
}

export class PowerFeedSupply extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label: PowerFeedSupplyLabelEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: PowerFeedSupplyValueEnum;
}

export enum PowerFeedTypeLabelEnum {
  Primary = "Primary",
  Redundant = "Redundant",
}

export enum PowerFeedTypeValueEnum {
  Primary = "primary",
  Redundant = "redundant",
}

export class PowerFeedType extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label: PowerFeedTypeLabelEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: PowerFeedTypeValueEnum;
}

export class PowerFeed extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "amperage" })
  amperage?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  created?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "custom_fields" })
  customFields?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "last_updated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdated?: Date;

  /**
   * Maximum permissible draw (percentage)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max_utilization" })
  maxUtilization?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "phase" })
  @Type(() => PowerFeedPhase)
  phase?: PowerFeedPhase;

  @SpeakeasyMetadata()
  @Expose({ name: "power_panel" })
  @Type(() => NestedPowerPanel)
  powerPanel: NestedPowerPanel;

  @SpeakeasyMetadata()
  @Expose({ name: "rack" })
  @Type(() => NestedRack)
  rack?: NestedRack;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(() => PowerFeedStatus)
  status?: PowerFeedStatus;

  @SpeakeasyMetadata()
  @Expose({ name: "supply" })
  @Type(() => PowerFeedSupply)
  supply?: PowerFeedSupply;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  @Type(() => PowerFeedType)
  type?: PowerFeedType;

  @SpeakeasyMetadata()
  @Expose({ name: "voltage" })
  voltage?: number;
}
