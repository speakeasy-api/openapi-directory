/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class IssuesUpdateRequestBody {
    /**
     * Username to assign to this issue. **This field is deprecated.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignee")
    public String assignee;

    public IssuesUpdateRequestBody withAssignee(String assignee) {
        this.assignee = assignee;
        return this;
    }
    
    /**
     * Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignees")
    public String[] assignees;

    public IssuesUpdateRequestBody withAssignees(String[] assignees) {
        this.assignees = assignees;
        return this;
    }
    
    /**
     * The contents of the issue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    public String body;

    public IssuesUpdateRequestBody withBody(String body) {
        this.body = body;
        return this;
    }
    
    /**
     * Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public Object[] labels;

    public IssuesUpdateRequestBody withLabels(Object[] labels) {
        this.labels = labels;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("milestone")
    public Object milestone;

    public IssuesUpdateRequestBody withMilestone(Object milestone) {
        this.milestone = milestone;
        return this;
    }
    
    /**
     * The open or closed state of the issue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public IssuesUpdateRequestBodyStateEnum state;

    public IssuesUpdateRequestBody withState(IssuesUpdateRequestBodyStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * The reason for the state change. Ignored unless `state` is changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state_reason")
    public IssuesUpdateRequestBodyStateReasonEnum stateReason;

    public IssuesUpdateRequestBody withStateReason(IssuesUpdateRequestBodyStateReasonEnum stateReason) {
        this.stateReason = stateReason;
        return this;
    }
    
    /**
     * The title of the issue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public Object title;

    public IssuesUpdateRequestBody withTitle(Object title) {
        this.title = title;
        return this;
    }
    
    public IssuesUpdateRequestBody(){}
}
