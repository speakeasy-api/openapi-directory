"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import servicemeshtype as shared_servicemeshtype
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ServiceMeshAnalysisMessageBaseLevelEnum(str, Enum):
    r"""Represents how severe a message is."""
    LEVEL_UNSPECIFIED = 'LEVEL_UNSPECIFIED'
    ERROR = 'ERROR'
    WARNING = 'WARNING'
    INFO = 'INFO'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServiceMeshAnalysisMessageBase:
    r"""AnalysisMessageBase describes some common information that is needed for all messages."""
    
    documentation_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentationUrl'), 'exclude': lambda f: f is None }})
    r"""A url pointing to the Service Mesh or Istio documentation for this specific error type."""  
    level: Optional[ServiceMeshAnalysisMessageBaseLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('level'), 'exclude': lambda f: f is None }})
    r"""Represents how severe a message is."""  
    type: Optional[shared_servicemeshtype.ServiceMeshType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""A unique identifier for the type of message. Display_name is intended to be human-readable, code is intended to be machine readable. There should be a one-to-one mapping between display_name and code. (i.e. do not re-use display_names or codes between message types.) See istio.analysis.v1alpha1.AnalysisMessageBase.Type"""  
    