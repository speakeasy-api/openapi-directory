// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RenewDomainXAmzTargetEnum
type RenewDomainXAmzTargetEnum string

const (
	RenewDomainXAmzTargetEnumRoute53DomainsV20140515RenewDomain RenewDomainXAmzTargetEnum = "Route53Domains_v20140515.RenewDomain"
)

func (e RenewDomainXAmzTargetEnum) ToPointer() *RenewDomainXAmzTargetEnum {
	return &e
}

func (e *RenewDomainXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Route53Domains_v20140515.RenewDomain":
		*e = RenewDomainXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RenewDomainXAmzTargetEnum: %v", v)
	}
}

type RenewDomainRequest struct {
	RenewDomainRequest shared.RenewDomainRequest `request:"mediaType=application/json"`
	XAmzAlgorithm      *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget         RenewDomainXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type RenewDomainResponse struct {
	ContentType string
	// DuplicateRequest
	DuplicateRequest interface{}
	// InvalidInput
	InvalidInput interface{}
	// OperationLimitExceeded
	OperationLimitExceeded interface{}
	// Success
	RenewDomainResponse *shared.RenewDomainResponse
	StatusCode          int
	RawResponse         *http.Response
	// TLDRulesViolation
	TLDRulesViolation interface{}
	// UnsupportedTLD
	UnsupportedTLD interface{}
}
