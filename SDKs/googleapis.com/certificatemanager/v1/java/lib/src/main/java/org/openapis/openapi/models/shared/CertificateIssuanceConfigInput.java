/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CertificateIssuanceConfigInput - CertificateIssuanceConfig specifies how to issue and manage a certificate.
 */
public class CertificateIssuanceConfigInput {
    /**
     * The CA that issues the workload certificate. It includes CA address, type, authentication to CA service, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateAuthorityConfig")
    public CertificateAuthorityConfig certificateAuthorityConfig;
    public CertificateIssuanceConfigInput withCertificateAuthorityConfig(CertificateAuthorityConfig certificateAuthorityConfig) {
        this.certificateAuthorityConfig = certificateAuthorityConfig;
        return this;
    }
    
    /**
     * One or more paragraphs of text description of a CertificateIssuanceConfig.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public CertificateIssuanceConfigInput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Required. The key algorithm to use when generating the private key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keyAlgorithm")
    public CertificateIssuanceConfigKeyAlgorithmEnum keyAlgorithm;
    public CertificateIssuanceConfigInput withKeyAlgorithm(CertificateIssuanceConfigKeyAlgorithmEnum keyAlgorithm) {
        this.keyAlgorithm = keyAlgorithm;
        return this;
    }
    
    /**
     * Set of labels associated with a CertificateIssuanceConfig.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public CertificateIssuanceConfigInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Required. Workload certificate lifetime requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lifetime")
    public String lifetime;
    public CertificateIssuanceConfigInput withLifetime(String lifetime) {
        this.lifetime = lifetime;
        return this;
    }
    
    /**
     * A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern `projects/* /locations/* /certificateIssuanceConfigs/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public CertificateIssuanceConfigInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Required. Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rotationWindowPercentage")
    public Integer rotationWindowPercentage;
    public CertificateIssuanceConfigInput withRotationWindowPercentage(Integer rotationWindowPercentage) {
        this.rotationWindowPercentage = rotationWindowPercentage;
        return this;
    }
    
}
