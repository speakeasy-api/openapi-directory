"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared

class Gene:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_all_annotated_genes_using_get(self, request: operations.GETAllAnnotatedGenesUsingGETRequest) -> operations.GETAllAnnotatedGenesUsingGETResponse:
        r"""Return a list of genes annotated to an ontology term"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETAllAnnotatedGenesUsingGETRequest, base_url, '/genes/annotation/{accId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAllAnnotatedGenesUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_annotated_genes_using_post(self, request: shared.AnnotatedGeneRequest) -> operations.GetAnnotatedGenesUsingPOSTResponse:
        r"""Return a list of genes annotated to an ontology term"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/genes/annotation'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAnnotatedGenesUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [201, 401, 403, 404]:
            pass

        return res

    def get_gene_alleles_using_get(self, request: operations.GETGeneAllelesUsingGETRequest) -> operations.GETGeneAllelesUsingGETResponse:
        r"""Return a list of gene alleles"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGeneAllelesUsingGETRequest, base_url, '/genes/allele/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGeneAllelesUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_gene_by_map_key_using_get(self, request: operations.GETGeneByMapKeyUsingGETRequest) -> operations.GETGeneByMapKeyUsingGETResponse:
        r"""Return a list of all genes with position information for an assembly"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGeneByMapKeyUsingGETRequest, base_url, '/genes/map/{mapKey}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGeneByMapKeyUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_gene_by_rgd_id_using_get(self, request: operations.GETGeneByRgdIDUsingGETRequest) -> operations.GETGeneByRgdIDUsingGETResponse:
        r"""Get a gene record by RGD ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGeneByRgdIDUsingGETRequest, base_url, '/genes/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGeneByRgdIDUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_gene_by_symbol_using_get(self, request: operations.GETGeneBySymbolUsingGETRequest) -> operations.GETGeneBySymbolUsingGETResponse:
        r"""Get a gene record by symbol and species type key"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGeneBySymbolUsingGETRequest, base_url, '/genes/{symbol}/{speciesTypeKey}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGeneBySymbolUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_gene_orthologs_using_get(self, request: operations.GETGeneOrthologsUsingGETRequest) -> operations.GETGeneOrthologsUsingGETResponse:
        r"""Return a list of gene orthologs"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGeneOrthologsUsingGETRequest, base_url, '/genes/orthologs/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGeneOrthologsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_genes_annotated_using_get(self, request: operations.GETGenesAnnotatedUsingGETRequest) -> operations.GETGenesAnnotatedUsingGETResponse:
        r"""Return a list of genes annotated to an ontology term"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGenesAnnotatedUsingGETRequest, base_url, '/genes/annotation/{accId}/{speciesTypeKey}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGenesAnnotatedUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_genes_by_affy_id_using_get(self, request: operations.GETGenesByAffyIDUsingGETRequest) -> operations.GETGenesByAffyIDUsingGETResponse:
        r"""Return a list of genes for an affymetrix ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGenesByAffyIDUsingGETRequest, base_url, '/genes/affyId/{affyId}/{speciesTypeKey}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGenesByAffyIDUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_genes_by_alias_symbol_using_get(self, request: operations.GETGenesByAliasSymbolUsingGETRequest) -> operations.GETGenesByAliasSymbolUsingGETResponse:
        r"""Return a list of genes for an alias and species"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGenesByAliasSymbolUsingGETRequest, base_url, '/genes/alias/{aliasSymbol}/{speciesTypeKey}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGenesByAliasSymbolUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_genes_by_keyword_using_get(self, request: operations.GETGenesByKeywordUsingGETRequest) -> operations.GETGenesByKeywordUsingGETResponse:
        r"""Return a list of genes by keyword and species type key"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGenesByKeywordUsingGETRequest, base_url, '/genes/keyword/{keyword}/{speciesTypeKey}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGenesByKeywordUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_genes_by_position_using_get(self, request: operations.GETGenesByPositionUsingGETRequest) -> operations.GETGenesByPositionUsingGETResponse:
        r"""Return a list of genes position and map key"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGenesByPositionUsingGETRequest, base_url, '/genes/{chr}/{start}/{stop}/{mapKey}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGenesByPositionUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_genes_by_species_using_get(self, request: operations.GETGenesBySpeciesUsingGETRequest) -> operations.GETGenesBySpeciesUsingGETResponse:
        r"""Return a list of all genes for a species in RGD"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGenesBySpeciesUsingGETRequest, base_url, '/genes/species/{speciesTypeKey}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGenesBySpeciesUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_genes_in_region_using_get(self, request: operations.GETGenesInRegionUsingGETRequest) -> operations.GETGenesInRegionUsingGETResponse:
        r"""Return a list of genes in region"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGenesInRegionUsingGETRequest, base_url, '/genes/region/{chr}/{start}/{stop}/{mapKey}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGenesInRegionUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_mapped_genes_by_position_using_get(self, request: operations.GETMappedGenesByPositionUsingGETRequest) -> operations.GETMappedGenesByPositionUsingGETResponse:
        r"""Return a list of genes position and map key"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETMappedGenesByPositionUsingGETRequest, base_url, '/genes/mapped/{chr}/{start}/{stop}/{mapKey}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETMappedGenesByPositionUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_orthologs_by_list_using_post(self, request: shared.OrthologRequest) -> operations.GetOrthologsByListUsingPOSTResponse:
        r"""Return a list of gene orthologs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/genes/orthologs'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrthologsByListUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [201, 401, 403, 404]:
            pass

        return res

    