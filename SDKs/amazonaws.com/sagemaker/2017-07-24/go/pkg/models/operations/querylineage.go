// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// QueryLineageXAmzTargetEnum
type QueryLineageXAmzTargetEnum string

const (
	QueryLineageXAmzTargetEnumSageMakerQueryLineage QueryLineageXAmzTargetEnum = "SageMaker.QueryLineage"
)

func (e QueryLineageXAmzTargetEnum) ToPointer() *QueryLineageXAmzTargetEnum {
	return &e
}

func (e *QueryLineageXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SageMaker.QueryLineage":
		*e = QueryLineageXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryLineageXAmzTargetEnum: %v", v)
	}
}

type QueryLineageRequest struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken           *string                    `queryParam:"style=form,explode=true,name=NextToken"`
	QueryLineageRequest shared.QueryLineageRequest `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          QueryLineageXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type QueryLineageResponse struct {
	ContentType string
	// Success
	QueryLineageResponse *shared.QueryLineageResponse
	// ResourceNotFound
	ResourceNotFound interface{}
	StatusCode       int
	RawResponse      *http.Response
}
