/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { FacetAttributeTypeEnum } from "./facetattributetypeenum";
import { Rule } from "./rule";
import { TypedAttributeValue } from "./typedattributevalue";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A facet attribute definition. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_attributereferences.html">Attribute References</a> for more information.
 */
export class FacetAttributeDefinition extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DefaultValue" })
  @Type(() => TypedAttributeValue)
  defaultValue?: TypedAttributeValue;

  @SpeakeasyMetadata()
  @Expose({ name: "IsImmutable" })
  isImmutable?: boolean;

  @SpeakeasyMetadata({ elemType: Rule })
  @Expose({ name: "Rules" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Rule> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Rule);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  rules?: Record<string, Rule>;

  @SpeakeasyMetadata()
  @Expose({ name: "Type" })
  type: FacetAttributeTypeEnum;
}
