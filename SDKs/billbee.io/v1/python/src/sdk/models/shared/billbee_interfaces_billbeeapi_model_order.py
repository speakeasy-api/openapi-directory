"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import billbee_interfaces_billbeeapi_model_commentapimodel as shared_billbee_interfaces_billbeeapi_model_commentapimodel
from ..shared import billbee_interfaces_billbeeapi_model_customerapimodel as shared_billbee_interfaces_billbeeapi_model_customerapimodel
from ..shared import billbee_interfaces_billbeeapi_model_orderaddressapimodel as shared_billbee_interfaces_billbeeapi_model_orderaddressapimodel
from ..shared import billbee_interfaces_billbeeapi_model_orderitem as shared_billbee_interfaces_billbeeapi_model_orderitem
from ..shared import billbee_interfaces_billbeeapi_model_orderuser as shared_billbee_interfaces_billbeeapi_model_orderuser
from ..shared import billbee_interfaces_billbeeapi_model_shipment as shared_billbee_interfaces_billbeeapi_model_shipment
from ..shared import billbee_interfaces_billbeeapi_models_orderpayment as shared_billbee_interfaces_billbeeapi_models_orderpayment
from ..shared import billbee_interfaces_order_historyentry as shared_billbee_interfaces_order_historyentry
from ..shared import billbee_interfaces_shipping_productservice as shared_billbee_interfaces_shipping_productservice
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class BillbeeInterfacesBillbeeAPIModelOrderPaymentMethodEnum(str, Enum):
    r"""The payment method"""
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    SIX = '6'
    NINETEEN = '19'
    TWENTY = '20'
    TWENTY_ONE = '21'
    TWENTY_TWO = '22'
    TWENTY_THREE = '23'
    TWENTY_FOUR = '24'
    TWENTY_FIVE = '25'
    TWENTY_SIX = '26'
    TWENTY_SEVEN = '27'
    TWENTY_EIGHT = '28'
    TWENTY_NINE = '29'
    THIRTY = '30'
    THIRTY_ONE = '31'
    THIRTY_TWO = '32'
    THIRTY_THREE = '33'
    THIRTY_FOUR = '34'
    THIRTY_FIVE = '35'
    THIRTY_SIX = '36'
    THIRTY_SEVEN = '37'
    THIRTY_EIGHT = '38'
    THIRTY_NINE = '39'
    FORTY = '40'
    FORTY_ONE = '41'
    FORTY_TWO = '42'
    FORTY_THREE = '43'
    FORTY_FOUR = '44'
    FORTY_FIVE = '45'
    FORTY_SIX = '46'
    FORTY_SEVEN = '47'
    FORTY_EIGHT = '48'
    FORTY_NINE = '49'
    FIFTY = '50'
    FIFTY_ONE = '51'
    FIFTY_TWO = '52'
    FIFTY_THREE = '53'
    FIFTY_FOUR = '54'
    FIFTY_FIVE = '55'
    FIFTY_SIX = '56'
    FIFTY_SEVEN = '57'
    FIFTY_EIGHT = '58'
    FIFTY_NINE = '59'
    SIXTY = '60'
    SIXTY_ONE = '61'
    SIXTY_TWO = '62'
    SIXTY_THREE = '63'
    SIXTY_FOUR = '64'
    SIXTY_FIVE = '65'
    SIXTY_SIX = '66'
    SIXTY_SEVEN = '67'
    SIXTY_EIGHT = '68'
    SIXTY_NINE = '69'
    SEVENTY = '70'
    SEVENTY_ONE = '71'
    SEVENTY_TWO = '72'
    SEVENTY_THREE = '73'
    SEVENTY_FOUR = '74'
    SEVENTY_FIVE = '75'
    SEVENTY_SIX = '76'
    SEVENTY_SEVEN = '77'
    SEVENTY_EIGHT = '78'
    SEVENTY_NINE = '79'
    EIGHTY = '80'
    EIGHTY_ONE = '81'
    EIGHTY_TWO = '82'
    EIGHTY_THREE = '83'
    EIGHTY_FOUR = '84'
    EIGHTY_FIVE = '85'
    EIGHTY_SIX = '86'
    EIGHTY_SEVEN = '87'
    EIGHTY_EIGHT = '88'
    EIGHTY_NINE = '89'
    NINETY = '90'
    NINETY_ONE = '91'
    NINETY_TWO = '92'
    NINETY_THREE = '93'
    NINETY_FOUR = '94'
    NINETY_FIVE = '95'
    NINETY_SIX = '96'
    NINETY_SEVEN = '97'
    NINETY_EIGHT = '98'
    NINETY_NINE = '99'
    ONE_HUNDRED = '100'
    ONE_HUNDRED_AND_ONE = '101'
    ONE_HUNDRED_AND_TWO = '102'
    ONE_HUNDRED_AND_THREE = '103'
    ONE_HUNDRED_AND_FOUR = '104'
    ONE_HUNDRED_AND_FIVE = '105'
    ONE_HUNDRED_AND_SIX = '106'
    ONE_HUNDRED_AND_SEVEN = '107'
    ONE_HUNDRED_AND_EIGHT = '108'
    ONE_HUNDRED_AND_NINE = '109'
    ONE_HUNDRED_AND_TEN = '110'
    ONE_HUNDRED_AND_ELEVEN = '111'
    ONE_HUNDRED_AND_TWELVE = '112'
    ONE_HUNDRED_AND_THIRTEEN = '113'
    ONE_HUNDRED_AND_FOURTEEN = '114'
    ONE_HUNDRED_AND_FIFTEEN = '115'
    ONE_HUNDRED_AND_SIXTEEN = '116'
    ONE_HUNDRED_AND_SEVENTEEN = '117'
    ONE_HUNDRED_AND_EIGHTEEN = '118'
    ONE_HUNDRED_AND_NINETEEN = '119'
    ONE_HUNDRED_AND_TWENTY = '120'
    ONE_HUNDRED_AND_TWENTY_ONE = '121'
    ONE_HUNDRED_AND_TWENTY_TWO = '122'
    ONE_HUNDRED_AND_TWENTY_THREE = '123'
    ONE_HUNDRED_AND_TWENTY_FOUR = '124'
    ONE_HUNDRED_AND_TWENTY_FIVE = '125'
    ONE_HUNDRED_AND_TWENTY_SIX = '126'
    ONE_HUNDRED_AND_TWENTY_SEVEN = '127'
    ONE_HUNDRED_AND_TWENTY_EIGHT = '128'
    ONE_HUNDRED_AND_TWENTY_NINE = '129'
    ONE_HUNDRED_AND_THIRTY = '130'
    ONE_HUNDRED_AND_THIRTY_ONE = '131'
    ONE_HUNDRED_AND_THIRTY_TWO = '132'
    ONE_HUNDRED_AND_THIRTY_THREE = '133'
    ONE_HUNDRED_AND_THIRTY_FOUR = '134'
    ONE_HUNDRED_AND_THIRTY_FIVE = '135'
    ONE_HUNDRED_AND_THIRTY_SIX = '136'

class BillbeeInterfacesBillbeeAPIModelOrderStateEnum(str, Enum):
    r"""The current state of the order"""
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'
    EIGHT = '8'
    NINE = '9'
    TEN = '10'
    ELEVEN = '11'
    TWELVE = '12'
    THIRTEEN = '13'
    FOURTEEN = '14'
    FIFTEEN = '15'
    SIXTEEN = '16'

class BillbeeInterfacesBillbeeAPIModelOrderVatModeEnum(str, Enum):
    r"""The vat mode of the order"""
    ZERO = '0'
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillbeeInterfacesBillbeeAPIModelOrderInput:
    r"""A class that represents the Billbee data model of a single order"""
    
    accept_loss_of_return_right: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AcceptLossOfReturnRight'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'AcceptLossOfReturnRight' }})
    r"""Customer accepts loss due to withdrawal"""  
    adjustment_cost: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdjustmentCost'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'AdjustmentCost' }})  
    adjustment_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdjustmentReason'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'AdjustmentReason' }})  
    api_account_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApiAccountId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ApiAccountId' }})
    r"""Id of the account, this order belongs to"""  
    api_account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApiAccountName'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ApiAccountName' }})
    r"""The name of the account, this order belongs to. Will be ignored on order creation."""  
    archived_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchivedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ArchivedAt' }})
    r"""If set, the order was already archived at the given date. Further modification is disabled."""  
    bill_bee_order_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BillBeeOrderId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'BillBeeOrderId' }})
    r"""The Order.Id from the Billbee database"""  
    bill_bee_parent_order_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BillBeeParentOrderId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'BillBeeParentOrderId' }})
    r"""The Id of the parent order in the Billbee database"""  
    buyer: Optional[shared_billbee_interfaces_billbeeapi_model_orderuser.BillbeeInterfacesBillbeeAPIModelOrderUserInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Buyer'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Buyer', 'json': True }})  
    comments: Optional[list[shared_billbee_interfaces_billbeeapi_model_commentapimodel.BillbeeInterfacesBillbeeAPIModelCommentAPIModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comments'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Comments', 'json': True }})
    r"""All messages / comments of the order"""  
    confirmed_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConfirmedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ConfirmedAt' }})
    r"""The date on which the order was confirmed"""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'CreatedAt' }})
    r"""The date on which the order was created"""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Currency' }})
    r"""The three letter currency code."""  
    customer: Optional[shared_billbee_interfaces_billbeeapi_model_customerapimodel.BillbeeInterfacesBillbeeAPIModelCustomerAPIModelInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Customer'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Customer', 'json': True }})  
    customer_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerNumber'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'CustomerNumber' }})
    r"""The customer number (not to be confused with the id of the customer)"""  
    customer_vat_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerVatId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'CustomerVatId' }})
    r"""The vat-id, that was given by the customer to fulfill this order"""  
    custom_invoice_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomInvoiceNote'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'CustomInvoiceNote' }})
    r"""An optional multiline text which is printed on the invoice"""  
    delivery_source_country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliverySourceCountryCode'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'DeliverySourceCountryCode' }})
    r"""An optional Country ISO2 Code of the country where order is shipped from (FBA)"""  
    distribution_center: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DistributionCenter'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'DistributionCenter' }})
    r"""An optional code for the distribution center delivering this order"""  
    history: Optional[list[shared_billbee_interfaces_order_historyentry.BillbeeInterfacesOrderHistoryEntry]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('History'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'History', 'json': True }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Id' }})
    r"""Id of the order in the external system (marketplace)"""  
    invoice_address: Optional[shared_billbee_interfaces_billbeeapi_model_orderaddressapimodel.BillbeeInterfacesBillbeeAPIModelOrderAddressAPIModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceAddress'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'InvoiceAddress', 'json': True }})  
    invoice_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'InvoiceDate' }})
    r"""The date on which the invoice was created"""  
    invoice_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceNumber'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'InvoiceNumber' }})
    r"""The invoice number"""  
    invoice_number_postfix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceNumberPostfix'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'InvoiceNumberPostfix' }})
    r"""The postfix of the invoice number"""  
    invoice_number_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceNumberPrefix'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'InvoiceNumberPrefix' }})
    r"""The prefix of the invoice number"""  
    is_cancelation_for: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsCancelationFor'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'IsCancelationFor' }})
    r"""An optional Order Id (externalid) for an order if this is a cancel order (shopify only at the moment)"""  
    is_from_billbee_api: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsFromBillbeeApi'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'IsFromBillbeeApi' }})
    r"""Indicates whether the order was created through the Billbee-Api or not."""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LanguageCode'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'LanguageCode' }})
    r"""The two-letter language code of the customer"""  
    last_modified_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'LastModifiedAt' }})
    r"""Date of the last update, the order got"""  
    merchant_vat_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MerchantVatId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'MerchantVatId' }})
    r"""The vat-id, that should be displayed on the invoice and other order documents"""  
    order_items: Optional[list[shared_billbee_interfaces_billbeeapi_model_orderitem.BillbeeInterfacesBillbeeAPIModelOrderItemInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrderItems'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'OrderItems', 'json': True }})
    r"""The list of items purchased like shirt, pant, toys etc"""  
    order_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrderNumber'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'OrderNumber' }})
    r"""Order number of the order in the external system (marketplace)"""  
    paid_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaidAmount'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PaidAmount' }})  
    payed_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PayedAt' }})
    r"""The date on which the order was paid"""  
    payment_instruction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentInstruction'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PaymentInstruction' }})
    r"""A textfield optionaly filled with a payment instruction text for printout on the invoice (z.B. Ebay Kauf auf Rechnung)"""  
    payment_method: Optional[BillbeeInterfacesBillbeeAPIModelOrderPaymentMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentMethod'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PaymentMethod' }})
    r"""The payment method"""  
    payment_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentReference'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PaymentReference' }})
    r"""A payment reference. Should not be used any more. Please use 'Payments' instead."""  
    payments: Optional[list[shared_billbee_interfaces_billbeeapi_models_orderpayment.BillbeeInterfacesBillbeeAPIModelsOrderPayment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Payments'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Payments', 'json': True }})  
    payment_transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentTransactionId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PaymentTransactionId' }})
    r"""The id of the payment transaction. For example the transaction id of PayPal payment. Should not be used any more. Please use 'Payments' instead."""  
    restored_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RestoredAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'RestoredAt' }})
    r"""If set, the order was restored from the archive at the given date."""  
    seller: Optional[shared_billbee_interfaces_billbeeapi_model_orderuser.BillbeeInterfacesBillbeeAPIModelOrderUserInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Seller'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Seller', 'json': True }})  
    seller_comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SellerComment'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'SellerComment' }})
    r"""An internal seller comment"""  
    shipped_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ShippedAt' }})
    r"""The date on which the order was shipped"""  
    shipping_address: Optional[shared_billbee_interfaces_billbeeapi_model_orderaddressapimodel.BillbeeInterfacesBillbeeAPIModelOrderAddressAPIModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingAddress'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ShippingAddress', 'json': True }})  
    shipping_cost: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingCost'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ShippingCost' }})
    r"""The shipping cost"""  
    shipping_ids: Optional[list[shared_billbee_interfaces_billbeeapi_model_shipment.BillbeeInterfacesBillbeeAPIModelShipment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingIds'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ShippingIds', 'json': True }})
    r"""The shipments of the order"""  
    shipping_profile_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingProfileId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ShippingProfileId' }})
    r"""Internal Id for the shipping profile for that order"""  
    shipping_profile_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingProfileName'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ShippingProfileName' }})
    r"""Display Name of Shipping profile, if available"""  
    shipping_provider_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingProviderId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ShippingProviderId' }})
    r"""Internal Id for the used shipping provider"""  
    shipping_provider_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingProviderName'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ShippingProviderName' }})
    r"""The Name for of used shipping provider"""  
    shipping_provider_product_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingProviderProductId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ShippingProviderProductId' }})
    r"""Internal Id for the used shipping product"""  
    shipping_provider_product_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingProviderProductName'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ShippingProviderProductName' }})
    r"""The Name of the used shipping product"""  
    ship_weight_kg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShipWeightKg'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ShipWeightKg' }})
    r"""The total weight of the shipment(s)"""  
    state: Optional[BillbeeInterfacesBillbeeAPIModelOrderStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'State' }})
    r"""The current state of the order"""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Tags' }})
    r"""The Tags of the order"""  
    tax_rate1: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxRate1'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'TaxRate1' }})
    r"""The regular tax rate"""  
    tax_rate2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxRate2'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'TaxRate2' }})
    r"""The reduced tax rate"""  
    total_cost: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalCost'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'TotalCost' }})
    r"""The total cost excluding shipping cost"""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'UpdatedAt' }})
    r"""The date on which the order was last updated"""  
    vat_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VatId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'VatId' }})
    r"""The customers vat id"""  
    vat_mode: Optional[BillbeeInterfacesBillbeeAPIModelOrderVatModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VatMode'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'VatMode' }})
    r"""The vat mode of the order"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillbeeInterfacesBillbeeAPIModelOrder:
    r"""A class that represents the Billbee data model of a single order"""
    
    accept_loss_of_return_right: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AcceptLossOfReturnRight'), 'exclude': lambda f: f is None }})
    r"""Customer accepts loss due to withdrawal"""  
    adjustment_cost: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdjustmentCost'), 'exclude': lambda f: f is None }})  
    adjustment_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdjustmentReason'), 'exclude': lambda f: f is None }})  
    api_account_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApiAccountId'), 'exclude': lambda f: f is None }})
    r"""Id of the account, this order belongs to"""  
    api_account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApiAccountName'), 'exclude': lambda f: f is None }})
    r"""The name of the account, this order belongs to. Will be ignored on order creation."""  
    archived_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchivedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""If set, the order was already archived at the given date. Further modification is disabled."""  
    bill_bee_order_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BillBeeOrderId'), 'exclude': lambda f: f is None }})
    r"""The Order.Id from the Billbee database"""  
    bill_bee_parent_order_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BillBeeParentOrderId'), 'exclude': lambda f: f is None }})
    r"""The Id of the parent order in the Billbee database"""  
    buyer: Optional[shared_billbee_interfaces_billbeeapi_model_orderuser.BillbeeInterfacesBillbeeAPIModelOrderUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Buyer'), 'exclude': lambda f: f is None }})  
    comments: Optional[list[shared_billbee_interfaces_billbeeapi_model_commentapimodel.BillbeeInterfacesBillbeeAPIModelCommentAPIModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comments'), 'exclude': lambda f: f is None }})
    r"""All messages / comments of the order"""  
    confirmed_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConfirmedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date on which the order was confirmed"""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date on which the order was created"""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency'), 'exclude': lambda f: f is None }})
    r"""The three letter currency code."""  
    customer: Optional[shared_billbee_interfaces_billbeeapi_model_customerapimodel.BillbeeInterfacesBillbeeAPIModelCustomerAPIModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Customer'), 'exclude': lambda f: f is None }})  
    customer_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerNumber'), 'exclude': lambda f: f is None }})
    r"""The customer number (not to be confused with the id of the customer)"""  
    customer_vat_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerVatId'), 'exclude': lambda f: f is None }})
    r"""The vat-id, that was given by the customer to fulfill this order"""  
    custom_invoice_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomInvoiceNote'), 'exclude': lambda f: f is None }})
    r"""An optional multiline text which is printed on the invoice"""  
    delivery_source_country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliverySourceCountryCode'), 'exclude': lambda f: f is None }})
    r"""An optional Country ISO2 Code of the country where order is shipped from (FBA)"""  
    distribution_center: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DistributionCenter'), 'exclude': lambda f: f is None }})
    r"""An optional code for the distribution center delivering this order"""  
    history: Optional[list[shared_billbee_interfaces_order_historyentry.BillbeeInterfacesOrderHistoryEntry]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('History'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})
    r"""Id of the order in the external system (marketplace)"""  
    invoice_address: Optional[shared_billbee_interfaces_billbeeapi_model_orderaddressapimodel.BillbeeInterfacesBillbeeAPIModelOrderAddressAPIModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceAddress'), 'exclude': lambda f: f is None }})  
    invoice_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date on which the invoice was created"""  
    invoice_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceNumber'), 'exclude': lambda f: f is None }})
    r"""The invoice number"""  
    invoice_number_postfix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceNumberPostfix'), 'exclude': lambda f: f is None }})
    r"""The postfix of the invoice number"""  
    invoice_number_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceNumberPrefix'), 'exclude': lambda f: f is None }})
    r"""The prefix of the invoice number"""  
    is_cancelation_for: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsCancelationFor'), 'exclude': lambda f: f is None }})
    r"""An optional Order Id (externalid) for an order if this is a cancel order (shopify only at the moment)"""  
    is_from_billbee_api: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsFromBillbeeApi'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the order was created through the Billbee-Api or not."""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LanguageCode'), 'exclude': lambda f: f is None }})
    r"""The two-letter language code of the customer"""  
    last_modified_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date of the last update, the order got"""  
    merchant_vat_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MerchantVatId'), 'exclude': lambda f: f is None }})
    r"""The vat-id, that should be displayed on the invoice and other order documents"""  
    order_items: Optional[list[shared_billbee_interfaces_billbeeapi_model_orderitem.BillbeeInterfacesBillbeeAPIModelOrderItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrderItems'), 'exclude': lambda f: f is None }})
    r"""The list of items purchased like shirt, pant, toys etc"""  
    order_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrderNumber'), 'exclude': lambda f: f is None }})
    r"""Order number of the order in the external system (marketplace)"""  
    paid_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaidAmount'), 'exclude': lambda f: f is None }})  
    payed_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date on which the order was paid"""  
    payment_instruction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentInstruction'), 'exclude': lambda f: f is None }})
    r"""A textfield optionaly filled with a payment instruction text for printout on the invoice (z.B. Ebay Kauf auf Rechnung)"""  
    payment_method: Optional[BillbeeInterfacesBillbeeAPIModelOrderPaymentMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentMethod'), 'exclude': lambda f: f is None }})
    r"""The payment method"""  
    payment_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentReference'), 'exclude': lambda f: f is None }})
    r"""A payment reference. Should not be used any more. Please use 'Payments' instead."""  
    payments: Optional[list[shared_billbee_interfaces_billbeeapi_models_orderpayment.BillbeeInterfacesBillbeeAPIModelsOrderPayment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Payments'), 'exclude': lambda f: f is None }})  
    payment_transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentTransactionId'), 'exclude': lambda f: f is None }})
    r"""The id of the payment transaction. For example the transaction id of PayPal payment. Should not be used any more. Please use 'Payments' instead."""  
    rebate_difference: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RebateDifference'), 'exclude': lambda f: f is None }})  
    restored_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RestoredAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""If set, the order was restored from the archive at the given date."""  
    seller: Optional[shared_billbee_interfaces_billbeeapi_model_orderuser.BillbeeInterfacesBillbeeAPIModelOrderUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Seller'), 'exclude': lambda f: f is None }})  
    seller_comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SellerComment'), 'exclude': lambda f: f is None }})
    r"""An internal seller comment"""  
    shipped_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date on which the order was shipped"""  
    shipping_address: Optional[shared_billbee_interfaces_billbeeapi_model_orderaddressapimodel.BillbeeInterfacesBillbeeAPIModelOrderAddressAPIModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingAddress'), 'exclude': lambda f: f is None }})  
    shipping_cost: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingCost'), 'exclude': lambda f: f is None }})
    r"""The shipping cost"""  
    shipping_ids: Optional[list[shared_billbee_interfaces_billbeeapi_model_shipment.BillbeeInterfacesBillbeeAPIModelShipment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingIds'), 'exclude': lambda f: f is None }})
    r"""The shipments of the order"""  
    shipping_profile_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingProfileId'), 'exclude': lambda f: f is None }})
    r"""Internal Id for the shipping profile for that order"""  
    shipping_profile_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingProfileName'), 'exclude': lambda f: f is None }})
    r"""Display Name of Shipping profile, if available"""  
    shipping_provider_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingProviderId'), 'exclude': lambda f: f is None }})
    r"""Internal Id for the used shipping provider"""  
    shipping_provider_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingProviderName'), 'exclude': lambda f: f is None }})
    r"""The Name for of used shipping provider"""  
    shipping_provider_product_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingProviderProductId'), 'exclude': lambda f: f is None }})
    r"""Internal Id for the used shipping product"""  
    shipping_provider_product_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingProviderProductName'), 'exclude': lambda f: f is None }})
    r"""The Name of the used shipping product"""  
    shipping_services: Optional[list[shared_billbee_interfaces_shipping_productservice.BillbeeInterfacesShippingProductService]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingServices'), 'exclude': lambda f: f is None }})
    r"""Additional services for the shipment"""  
    ship_weight_kg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShipWeightKg'), 'exclude': lambda f: f is None }})
    r"""The total weight of the shipment(s)"""  
    state: Optional[BillbeeInterfacesBillbeeAPIModelOrderStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }})
    r"""The current state of the order"""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})
    r"""The Tags of the order"""  
    tax_rate1: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxRate1'), 'exclude': lambda f: f is None }})
    r"""The regular tax rate"""  
    tax_rate2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxRate2'), 'exclude': lambda f: f is None }})
    r"""The reduced tax rate"""  
    total_cost: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalCost'), 'exclude': lambda f: f is None }})
    r"""The total cost excluding shipping cost"""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date on which the order was last updated"""  
    vat_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VatId'), 'exclude': lambda f: f is None }})
    r"""The customers vat id"""  
    vat_mode: Optional[BillbeeInterfacesBillbeeAPIModelOrderVatModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VatMode'), 'exclude': lambda f: f is None }})
    r"""The vat mode of the order"""  
    