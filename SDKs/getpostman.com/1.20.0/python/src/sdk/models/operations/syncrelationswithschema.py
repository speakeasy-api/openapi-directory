"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class SyncRelationsWithSchemaRequest:
    
    api_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'apiId', 'style': 'simple', 'explode': False }})
    r"""Id of the API"""  
    api_version_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'apiVersionId', 'style': 'simple', 'explode': False }})
    r"""Id of the API version"""  
    entity_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'entityId', 'style': 'simple', 'explode': False }})
    r"""Relation id"""  
    entity_type: str = dataclasses.field(metadata={'path_param': { 'field_name': 'entityType', 'style': 'simple', 'explode': False }})
    r"""Relation type (e.g documentation, contracttest, integrationtest, testsuite, mock, monitor)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SyncRelationsWithSchema400ApplicationJSONError:
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SyncRelationsWithSchema400ApplicationJSON:
    r"""Failed to sync"""
    
    error: Optional[SyncRelationsWithSchema400ApplicationJSONError] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SyncRelationsWithSchema200ApplicationJSON:
    r"""Successful sync"""
    
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class SyncRelationsWithSchemaResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    sync_relations_with_schema_200_application_json_object: Optional[SyncRelationsWithSchema200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful sync"""  
    sync_relations_with_schema_400_application_json_object: Optional[SyncRelationsWithSchema400ApplicationJSON] = dataclasses.field(default=None)
    r"""Failed to sync"""  
    