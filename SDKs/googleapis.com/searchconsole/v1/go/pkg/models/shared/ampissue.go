// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AmpIssueSeverityEnum - Severity of this issue: WARNING or ERROR.
type AmpIssueSeverityEnum string

const (
	AmpIssueSeverityEnumSeverityUnspecified AmpIssueSeverityEnum = "SEVERITY_UNSPECIFIED"
	AmpIssueSeverityEnumWarning             AmpIssueSeverityEnum = "WARNING"
	AmpIssueSeverityEnumError               AmpIssueSeverityEnum = "ERROR"
)

func (e AmpIssueSeverityEnum) ToPointer() *AmpIssueSeverityEnum {
	return &e
}

func (e *AmpIssueSeverityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SEVERITY_UNSPECIFIED":
		fallthrough
	case "WARNING":
		fallthrough
	case "ERROR":
		*e = AmpIssueSeverityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AmpIssueSeverityEnum: %v", v)
	}
}

// AmpIssue - AMP issue.
type AmpIssue struct {
	// Brief description of this issue.
	IssueMessage *string `json:"issueMessage,omitempty"`
	// Severity of this issue: WARNING or ERROR.
	Severity *AmpIssueSeverityEnum `json:"severity,omitempty"`
}
