// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ObjectTokenDataTypeEnum string

const (
	ObjectTokenDataTypeEnumBoolean  ObjectTokenDataTypeEnum = "BOOLEAN"
	ObjectTokenDataTypeEnumCurrency ObjectTokenDataTypeEnum = "CURRENCY"
	ObjectTokenDataTypeEnumDate     ObjectTokenDataTypeEnum = "DATE"
	ObjectTokenDataTypeEnumDatetime ObjectTokenDataTypeEnum = "DATETIME"
	ObjectTokenDataTypeEnumEmail    ObjectTokenDataTypeEnum = "EMAIL"
	ObjectTokenDataTypeEnumLink     ObjectTokenDataTypeEnum = "LINK"
	ObjectTokenDataTypeEnumNumeric  ObjectTokenDataTypeEnum = "NUMERIC"
	ObjectTokenDataTypeEnumString   ObjectTokenDataTypeEnum = "STRING"
	ObjectTokenDataTypeEnumStatus   ObjectTokenDataTypeEnum = "STATUS"
)

func (e ObjectTokenDataTypeEnum) ToPointer() *ObjectTokenDataTypeEnum {
	return &e
}

func (e *ObjectTokenDataTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BOOLEAN":
		fallthrough
	case "CURRENCY":
		fallthrough
	case "DATE":
		fallthrough
	case "DATETIME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "LINK":
		fallthrough
	case "NUMERIC":
		fallthrough
	case "STRING":
		fallthrough
	case "STATUS":
		*e = ObjectTokenDataTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ObjectTokenDataTypeEnum: %v", v)
	}
}

type ObjectToken struct {
	DataType *ObjectTokenDataTypeEnum `json:"dataType,omitempty"`
	Label    *string                  `json:"label,omitempty"`
	Name     *string                  `json:"name,omitempty"`
	Value    string                   `json:"value"`
}
