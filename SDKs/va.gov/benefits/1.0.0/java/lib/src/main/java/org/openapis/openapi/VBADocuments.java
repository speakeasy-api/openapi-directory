/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * VA Benefits document upload functionality
 */
public class VBADocuments {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public VBADocuments(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Download zip of "what the server sees"
     * An endpoint that will allow you to see exactly what the server sees. We split apart all submitted docs and metadata and zip the file to make it available to you to help with debugging purposes. Files are deleted after 10 days. Only available in testing environments, not production.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBenefitsDocumentUploadDownloadResponse getBenefitsDocumentUploadDownload(org.openapis.openapi.models.operations.GetBenefitsDocumentUploadDownloadRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetBenefitsDocumentUploadDownloadPathParams.class, baseUrl, "/uploads/{id}/download", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBenefitsDocumentUploadDownloadResponse res = new org.openapis.openapi.models.operations.GetBenefitsDocumentUploadDownloadResponse() {{
            getBenefitsDocumentUploadDownload200ApplicationZipBinaryString = null;
            getBenefitsDocumentUploadDownload401ApplicationJSONObject = null;
            getBenefitsDocumentUploadDownload403ApplicationJSONObject = null;
            getBenefitsDocumentUploadDownload404ApplicationJSONObject = null;
            getBenefitsDocumentUploadDownload429ApplicationJSONObject = null;
            getBenefitsDocumentUploadDownload500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/zip")) {
                byte[] out = httpRes.body();
                res.getBenefitsDocumentUploadDownload200ApplicationZipBinaryString = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadDownload401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadDownload401ApplicationJSON.class);
                res.getBenefitsDocumentUploadDownload401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadDownload403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadDownload403ApplicationJSON.class);
                res.getBenefitsDocumentUploadDownload403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadDownload404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadDownload404ApplicationJSON.class);
                res.getBenefitsDocumentUploadDownload404ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadDownload429ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadDownload429ApplicationJSON.class);
                res.getBenefitsDocumentUploadDownload429ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadDownload500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadDownload500ApplicationJSON.class);
                res.getBenefitsDocumentUploadDownload500ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get status for a previous benefits document upload
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusResponse getBenefitsDocumentUploadStatus(org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusPathParams.class, baseUrl, "/uploads/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusResponse res = new org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusResponse() {{
            getBenefitsDocumentUploadStatus200ApplicationJSONObject = null;
            getBenefitsDocumentUploadStatus401ApplicationJSONObject = null;
            getBenefitsDocumentUploadStatus403ApplicationJSONObject = null;
            getBenefitsDocumentUploadStatus404ApplicationJSONObject = null;
            getBenefitsDocumentUploadStatus429ApplicationJSONObject = null;
            getBenefitsDocumentUploadStatus500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatus200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatus200ApplicationJSON.class);
                res.getBenefitsDocumentUploadStatus200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatus401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatus401ApplicationJSON.class);
                res.getBenefitsDocumentUploadStatus401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatus403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatus403ApplicationJSON.class);
                res.getBenefitsDocumentUploadStatus403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatus404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatus404ApplicationJSON.class);
                res.getBenefitsDocumentUploadStatus404ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatus429ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatus429ApplicationJSON.class);
                res.getBenefitsDocumentUploadStatus429ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatus500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatus500ApplicationJSON.class);
                res.getBenefitsDocumentUploadStatus500ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get a bulk status report for a list of previous uploads
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusReportResponse getBenefitsDocumentUploadStatusReport(org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusReportRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/uploads/report");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusReportResponse res = new org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusReportResponse() {{
            getBenefitsDocumentUploadStatusReport200ApplicationJSONObject = null;
            getBenefitsDocumentUploadStatusReport401ApplicationJSONObject = null;
            getBenefitsDocumentUploadStatusReport403ApplicationJSONObject = null;
            getBenefitsDocumentUploadStatusReport422ApplicationJSONObject = null;
            getBenefitsDocumentUploadStatusReport429ApplicationJSONObject = null;
            getBenefitsDocumentUploadStatusReport500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusReport200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusReport200ApplicationJSON.class);
                res.getBenefitsDocumentUploadStatusReport200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusReport401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusReport401ApplicationJSON.class);
                res.getBenefitsDocumentUploadStatusReport401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusReport403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusReport403ApplicationJSON.class);
                res.getBenefitsDocumentUploadStatusReport403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusReport422ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusReport422ApplicationJSON.class);
                res.getBenefitsDocumentUploadStatusReport422ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusReport429ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusReport429ApplicationJSON.class);
                res.getBenefitsDocumentUploadStatusReport429ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusReport500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBenefitsDocumentUploadStatusReport500ApplicationJSON.class);
                res.getBenefitsDocumentUploadStatusReport500ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get a location for subsequent document upload PUT request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostBenefitsDocumentUploadResponse postBenefitsDocumentUpload(org.openapis.openapi.models.operations.PostBenefitsDocumentUploadRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/uploads");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostBenefitsDocumentUploadResponse res = new org.openapis.openapi.models.operations.PostBenefitsDocumentUploadResponse() {{
            postBenefitsDocumentUpload202ApplicationJSONObject = null;
            postBenefitsDocumentUpload401ApplicationJSONObject = null;
            postBenefitsDocumentUpload403ApplicationJSONObject = null;
            postBenefitsDocumentUpload422ApplicationJSONObject = null;
            postBenefitsDocumentUpload429ApplicationJSONObject = null;
            postBenefitsDocumentUpload500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 202) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostBenefitsDocumentUpload202ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostBenefitsDocumentUpload202ApplicationJSON.class);
                res.postBenefitsDocumentUpload202ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostBenefitsDocumentUpload401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostBenefitsDocumentUpload401ApplicationJSON.class);
                res.postBenefitsDocumentUpload401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostBenefitsDocumentUpload403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostBenefitsDocumentUpload403ApplicationJSON.class);
                res.postBenefitsDocumentUpload403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostBenefitsDocumentUpload422ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostBenefitsDocumentUpload422ApplicationJSON.class);
                res.postBenefitsDocumentUpload422ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostBenefitsDocumentUpload429ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostBenefitsDocumentUpload429ApplicationJSON.class);
                res.postBenefitsDocumentUpload429ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostBenefitsDocumentUpload500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostBenefitsDocumentUpload500ApplicationJSON.class);
                res.postBenefitsDocumentUpload500ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Validate an individual document against system file requirements
     * Using this endpoint will decrease the likelihood of errors associated with individual documents during
     * the submission process. Validations performed:
     * * Document is a valid PDF (Note: `Content-Type` header value must be "application/pdf")
     * * Document does not have a user password (an owner password is acceptable)
     * * File size does not exceed 100 MB
     * * Page size does not exceed 21" x 21"
     * 
     * Each PDF document is sent as a direct file upload. The request body should contain nothing other than the document in
     * binary format. Binary multipart/form-data encoding is not supported. This endpoint does NOT validate metadata in JSON
     * format.
     * 
     * This endpoint does NOT initiate the claims intake process or submit data to that process. After using this endpoint,
     * individual PDF documents can be combined and submitted as a payload using PUT `/path`.
     * 
     * A `200` response confirms that the individual document provided passes the system requirements.
     * 
     * A `422` response indicates one or more problems with the document that should be resolved before submitting it in the
     * full document submission payload.
     * 
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostBenefitsDocumentUploadValidateDocumentResponse postBenefitsDocumentUploadValidateDocument() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/uploads/validate_document");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostBenefitsDocumentUploadValidateDocumentResponse res = new org.openapis.openapi.models.operations.PostBenefitsDocumentUploadValidateDocumentResponse() {{
            postBenefitsDocumentUploadValidateDocument200ApplicationJSONObject = null;
            postBenefitsDocumentUploadValidateDocument401ApplicationJSONObject = null;
            postBenefitsDocumentUploadValidateDocument403ApplicationJSONObject = null;
            postBenefitsDocumentUploadValidateDocument422ApplicationJSONObject = null;
            postBenefitsDocumentUploadValidateDocument429ApplicationJSONObject = null;
            postBenefitsDocumentUploadValidateDocument500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostBenefitsDocumentUploadValidateDocument200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostBenefitsDocumentUploadValidateDocument200ApplicationJSON.class);
                res.postBenefitsDocumentUploadValidateDocument200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostBenefitsDocumentUploadValidateDocument401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostBenefitsDocumentUploadValidateDocument401ApplicationJSON.class);
                res.postBenefitsDocumentUploadValidateDocument401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostBenefitsDocumentUploadValidateDocument403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostBenefitsDocumentUploadValidateDocument403ApplicationJSON.class);
                res.postBenefitsDocumentUploadValidateDocument403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostBenefitsDocumentUploadValidateDocument422ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostBenefitsDocumentUploadValidateDocument422ApplicationJSON.class);
                res.postBenefitsDocumentUploadValidateDocument422ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostBenefitsDocumentUploadValidateDocument429ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostBenefitsDocumentUploadValidateDocument429ApplicationJSON.class);
                res.postBenefitsDocumentUploadValidateDocument429ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostBenefitsDocumentUploadValidateDocument500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostBenefitsDocumentUploadValidateDocument500ApplicationJSON.class);
                res.postBenefitsDocumentUploadValidateDocument500ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Accepts document upload.
     * Accepts document metadata, document binary, and attachment binaries. Full URL, including
     * query parameters, provided from POST `/document_uploads`.
     * 
     * ## Example Payload
     * 
     * The following demonstrates a (redacted) multipart payload suitable for submitting to the PUT
     * endpoint. Most programming languages should have provisions for assembling a multipart
     * payload like this without having to do so manually.
     * 
     * ```
     * --17de1ed8f01442b2a2d7a93506314b76
     * Content-Disposition: form-data; name="metadata"
     * Content-Type: application/json
     * 
     * {"veteranFirstName": "Jane",
     * "veteranLastName": "Doe",
     * "fileNumber": "012345678",
     * "zipCode": "97202",
     * "source": "MyVSO",
     * "docType": "21-22"
     * "businessLine": "CMP"}
     * --17de1ed8f01442b2a2d7a93506314b76
     * Content-Disposition: form-data; name="content"
     * Content-Type: application/pdf
     * 
     * &lt;Binary PDF contents&gt;
     * --17de1ed8f01442b2a2d7a93506314b76
     * Content-Disposition: form-data; name="attachment1"
     * Content-Type: application/pdf
     * 
     * &lt;Binary PDF attachment contents&gt;
     * --17de1ed8f01442b2a2d7a93506314b76--
     * ```
     * 
     * This PUT request would have an overall HTTP Content-Type header:
     * 
     * ```
     * Content-Type: multipart/form-data; boundary=17de1ed8f01442b2a2d7a93506314b76
     * ```
     * 
     * Note that the Content-Disposition parameter "name" in each part must be the expected values
     * "metadata", "content", "attachment1"..."attachmentN". The attachment attributes must be named 
     * exactly as they are listed here (case sensitive), for example: "attachment_1" or "Attachment2"
     * are invalid.
     * 
     * This is an example curl command:
     * 
     * ```
     * curl -v -L -X PUT '&lt;Location from \ uploads&gt;' -F 'metadata="{\"veteranFirstName\": \"Jane\",\"veteranLastName\": \"Doe\",\"fileNumber\": \"012345678\",\"zipCode\": \"97202\",\"source\": \"MyVSO\",\"docType\": \"21-22\",\"businessLine\": \"CMP\"}";type=application/json' -F 'content=@"content.pdf"' -F 'attachment1=@"file1.pdf"' -F 'attachment2=@"another_file.pdf"'
     * ```
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutBenefitsDocumentUploadResponse putBenefitsDocumentUpload(org.openapis.openapi.models.operations.PutBenefitsDocumentUploadRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/path");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutBenefitsDocumentUploadResponse res = new org.openapis.openapi.models.operations.PutBenefitsDocumentUploadResponse() {{
            putBenefitsDocumentUpload401ApplicationJSONObject = null;
            body = null;
            putBenefitsDocumentUpload422ApplicationJSONObject = null;
            putBenefitsDocumentUpload429ApplicationJSONObject = null;
            putBenefitsDocumentUpload500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutBenefitsDocumentUpload401ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutBenefitsDocumentUpload401ApplicationJSON.class);
                res.putBenefitsDocumentUpload401ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutBenefitsDocumentUpload422ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutBenefitsDocumentUpload422ApplicationJSON.class);
                res.putBenefitsDocumentUpload422ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutBenefitsDocumentUpload429ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutBenefitsDocumentUpload429ApplicationJSON.class);
                res.putBenefitsDocumentUpload429ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutBenefitsDocumentUpload500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutBenefitsDocumentUpload500ApplicationJSON.class);
                res.putBenefitsDocumentUpload500ApplicationJSONObject = out;
            }
        }

        return res;
    }
}