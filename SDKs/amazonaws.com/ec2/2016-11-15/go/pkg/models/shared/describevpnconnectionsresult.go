// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum - The current state of the gateway association.
type DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum string

const (
	DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnumAssociated     DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum = "associated"
	DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnumNotAssociated  DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum = "not-associated"
	DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnumAssociating    DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum = "associating"
	DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnumDisassociating DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum = "disassociating"
)

func (e *DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "associated":
		fallthrough
	case "not-associated":
		fallthrough
	case "associating":
		fallthrough
	case "disassociating":
		*e = DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum: %s", s)
	}
}

// DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIPVersionEnum - Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
type DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIPVersionEnum string

const (
	DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIPVersionEnumIpv4 DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIPVersionEnum = "ipv4"
	DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIPVersionEnumIpv6 DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIPVersionEnum = "ipv6"
)

func (e *DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIPVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIPVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIPVersionEnum: %s", s)
	}
}

// DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsIkeVersions - The internet key exchange (IKE) version permitted for the VPN tunnel.
type DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsIkeVersions struct {
	Value *string
}

// DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptionsCloudWatchLogOptions - Options for sending VPN tunnel logs to CloudWatch.
type DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptionsCloudWatchLogOptions struct {
	LogEnabled      *bool
	LogGroupArn     *string
	LogOutputFormat *string
}

// DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptions - Options for logging VPN tunnel activity.
type DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptions struct {
	CloudWatchLogOptions *DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptionsCloudWatchLogOptions
}

// DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1DHGroupNumbers - The Diffie-Hellmann group number for phase 1 IKE negotiations.
type DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1DHGroupNumbers struct {
	Value *int64
}

// DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1EncryptionAlgorithms - The encryption algorithm for phase 1 IKE negotiations.
type DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1EncryptionAlgorithms struct {
	Value *string
}

// DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1IntegrityAlgorithms - The integrity algorithm for phase 1 IKE negotiations.
type DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1IntegrityAlgorithms struct {
	Value *string
}

// DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2DHGroupNumbers - The Diffie-Hellmann group number for phase 2 IKE negotiations.
type DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2DHGroupNumbers struct {
	Value *int64
}

// DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2EncryptionAlgorithms - The encryption algorithm for phase 2 IKE negotiations.
type DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2EncryptionAlgorithms struct {
	Value *string
}

// DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2IntegrityAlgorithms - The integrity algorithm for phase 2 IKE negotiations.
type DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2IntegrityAlgorithms struct {
	Value *string
}

// DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions - The VPN tunnel options.
type DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions struct {
	DpdTimeoutAction           *string
	DpdTimeoutSeconds          *int64
	IkeVersions                []DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsIkeVersions
	LogOptions                 *DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptions
	OutsideIPAddress           *string
	Phase1DHGroupNumbers       []DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1DHGroupNumbers
	Phase1EncryptionAlgorithms []DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1EncryptionAlgorithms
	Phase1IntegrityAlgorithms  []DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1IntegrityAlgorithms
	Phase1LifetimeSeconds      *int64
	Phase2DHGroupNumbers       []DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2DHGroupNumbers
	Phase2EncryptionAlgorithms []DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2EncryptionAlgorithms
	Phase2IntegrityAlgorithms  []DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2IntegrityAlgorithms
	Phase2LifetimeSeconds      *int64
	PreSharedKey               *string
	RekeyFuzzPercentage        *int64
	RekeyMarginTimeSeconds     *int64
	ReplayWindowSize           *int64
	StartupAction              *string
	TunnelInsideCidr           *string
	TunnelInsideIpv6Cidr       *string
}

// DescribeVpnConnectionsResultVpnConnectionsOptions - The VPN connection options.
type DescribeVpnConnectionsResultVpnConnectionsOptions struct {
	EnableAcceleration                  *bool
	LocalIpv4NetworkCidr                *string
	LocalIpv6NetworkCidr                *string
	OutsideIPAddressType                *string
	RemoteIpv4NetworkCidr               *string
	RemoteIpv6NetworkCidr               *string
	StaticRoutesOnly                    *bool
	TransportTransitGatewayAttachmentID *string
	TunnelInsideIPVersion               *DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIPVersionEnum
	TunnelOptions                       []DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions
}

// DescribeVpnConnectionsResultVpnConnectionsRoutesSourceEnum - Indicates how the routes were provided.
type DescribeVpnConnectionsResultVpnConnectionsRoutesSourceEnum string

const (
	DescribeVpnConnectionsResultVpnConnectionsRoutesSourceEnumStatic DescribeVpnConnectionsResultVpnConnectionsRoutesSourceEnum = "Static"
)

func (e *DescribeVpnConnectionsResultVpnConnectionsRoutesSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Static":
		*e = DescribeVpnConnectionsResultVpnConnectionsRoutesSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpnConnectionsResultVpnConnectionsRoutesSourceEnum: %s", s)
	}
}

// DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum - The current state of the static route.
type DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum string

const (
	DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnumPending   DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum = "pending"
	DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnumAvailable DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum = "available"
	DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnumDeleting  DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum = "deleting"
	DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnumDeleted   DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum = "deleted"
)

func (e *DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "available":
		fallthrough
	case "deleting":
		fallthrough
	case "deleted":
		*e = DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum: %s", s)
	}
}

// DescribeVpnConnectionsResultVpnConnectionsRoutes - Describes a static route for a VPN connection.
type DescribeVpnConnectionsResultVpnConnectionsRoutes struct {
	DestinationCidrBlock *string
	Source               *DescribeVpnConnectionsResultVpnConnectionsRoutesSourceEnum
	State                *DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum
}

// DescribeVpnConnectionsResultVpnConnectionsStateEnum - The current state of the VPN connection.
type DescribeVpnConnectionsResultVpnConnectionsStateEnum string

const (
	DescribeVpnConnectionsResultVpnConnectionsStateEnumPending   DescribeVpnConnectionsResultVpnConnectionsStateEnum = "pending"
	DescribeVpnConnectionsResultVpnConnectionsStateEnumAvailable DescribeVpnConnectionsResultVpnConnectionsStateEnum = "available"
	DescribeVpnConnectionsResultVpnConnectionsStateEnumDeleting  DescribeVpnConnectionsResultVpnConnectionsStateEnum = "deleting"
	DescribeVpnConnectionsResultVpnConnectionsStateEnumDeleted   DescribeVpnConnectionsResultVpnConnectionsStateEnum = "deleted"
)

func (e *DescribeVpnConnectionsResultVpnConnectionsStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "available":
		fallthrough
	case "deleting":
		fallthrough
	case "deleted":
		*e = DescribeVpnConnectionsResultVpnConnectionsStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpnConnectionsResultVpnConnectionsStateEnum: %s", s)
	}
}

// DescribeVpnConnectionsResultVpnConnectionsTags - Describes a tag.
type DescribeVpnConnectionsResultVpnConnectionsTags struct {
	Key   *string
	Value *string
}

// DescribeVpnConnectionsResultVpnConnectionsTypeEnum - The type of VPN connection.
type DescribeVpnConnectionsResultVpnConnectionsTypeEnum string

const (
	DescribeVpnConnectionsResultVpnConnectionsTypeEnumIpsec1 DescribeVpnConnectionsResultVpnConnectionsTypeEnum = "ipsec.1"
)

func (e *DescribeVpnConnectionsResultVpnConnectionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ipsec.1":
		*e = DescribeVpnConnectionsResultVpnConnectionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpnConnectionsResultVpnConnectionsTypeEnum: %s", s)
	}
}

// DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnum - The status of the VPN tunnel.
type DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnum string

const (
	DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnumUp   DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnum = "UP"
	DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnumDown DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnum = "DOWN"
)

func (e *DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UP":
		fallthrough
	case "DOWN":
		*e = DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnum: %s", s)
	}
}

// DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry - Describes telemetry for a VPN tunnel.
type DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry struct {
	AcceptedRouteCount *int64
	CertificateArn     *string
	LastStatusChange   *time.Time
	OutsideIPAddress   *string
	Status             *DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnum
	StatusMessage      *string
}

// DescribeVpnConnectionsResultVpnConnections - Describes a VPN connection.
type DescribeVpnConnectionsResultVpnConnections struct {
	Category                     *string
	CoreNetworkArn               *string
	CoreNetworkAttachmentArn     *string
	CustomerGatewayConfiguration *string
	CustomerGatewayID            *string
	GatewayAssociationState      *DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum
	Options                      *DescribeVpnConnectionsResultVpnConnectionsOptions
	Routes                       []DescribeVpnConnectionsResultVpnConnectionsRoutes
	State                        *DescribeVpnConnectionsResultVpnConnectionsStateEnum
	Tags                         []DescribeVpnConnectionsResultVpnConnectionsTags
	TransitGatewayID             *string
	Type                         *DescribeVpnConnectionsResultVpnConnectionsTypeEnum
	VgwTelemetry                 []DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry
	VpnConnectionID              *string
	VpnGatewayID                 *string
}

// DescribeVpnConnectionsResult - Contains the output of DescribeVpnConnections.
type DescribeVpnConnectionsResult struct {
	VpnConnections []DescribeVpnConnectionsResultVpnConnections
}
