"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class PeriodicPaymentExecutionRuleEnum(str, Enum):
    r"""Behavior when periodic payment dates fall on holiday."""
    FOLLOWING = 'following'
    PRECEDING = 'preceding'

class PeriodicPaymentFrequencyEnum(str, Enum):
    DAILY = 'Daily'
    WEEKLY = 'Weekly'
    EVERY_TWO_WEEKS = 'EveryTwoWeeks'
    MONTHLY = 'Monthly'
    EVERY_TWO_MONTHS = 'EveryTwoMonths'
    QUARTERLY = 'Quarterly'
    SEMI_ANNUAL = 'SemiAnnual'
    ANNUAL = 'Annual'
    MONTHLY_VARIABLE = 'MonthlyVariable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PeriodicPayment:
    r"""Periodic Payment Serializer."""
    
    start_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})  
    day_of_execution: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_of_execution'), 'exclude': lambda f: f is None }})  
    end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    execution_rule: Optional[PeriodicPaymentExecutionRuleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('execution_rule'), 'exclude': lambda f: f is None }})
    r"""Behavior when periodic payment dates fall on holiday."""  
    frequency: Optional[PeriodicPaymentFrequencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency'), 'exclude': lambda f: f is None }})  
    