"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from datetime import date
from typing import Any, Optional


@dataclasses.dataclass
class PostV2CalendarEventsUpsertRequestBody:
    
    calendar_id: str = dataclasses.field(metadata={'form': { 'field_name': 'calendar_id' }})
    r"""Calendar ID of the calendar event owner.
      For the External Calendar connection use `external_{salesloft_user_guid}` format.
      Example: `external_00210d1a-df8a-459f-af75-89b953b618b0`.
    """  
    end_time: date = dataclasses.field(metadata={'form': { 'field_name': 'end_time' }})
    r"""End time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.
      Example: `2022-02-14T10:12:59+00:00`.
    """  
    i_cal_uid: str = dataclasses.field(metadata={'form': { 'field_name': 'i_cal_uid' }})
    r"""icalUID of the calendar event. Unique identifier for a calendar event across calendars.
    
      Used as an upsert key.
    """  
    id: str = dataclasses.field(metadata={'form': { 'field_name': 'id' }})
    r"""Id of the calendar event, different for each occurrence in a recurring series.
    
      Used as an upsert key.
    """  
    start_time: date = dataclasses.field(metadata={'form': { 'field_name': 'start_time' }})
    r"""Start time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.
      Example: `2022-02-14T10:12:59+00:00`.
    """  
    all_day: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'all_day' }})
    r"""Should be set to `true` for all day calendar events."""  
    attendees: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'attendees', 'json': True }})
    r"""List of attendees of the calendar event.
      Example:
      ```
        {
          ...
          \"attendees\": [
            {
              \"name\": \"Alice\",
              \"email\": \"alice@example.com\",
              \"status\": \"accepted\",
              \"organizer\": true
            },
            {
              \"name\": \"Bob\",
              \"email\": \"bob@example.com\",
              \"status\": \"needsAction\",
              \"organizer\": false
            }
          ]
        }
      ```
      `name`: full name of the attendee
    
      `email`: email address of the attendee
    
      `status`: one of the following - needsAction, accepted, tentative, declined
    
      `organizer`: whether the attendee is the organizer of the calendar event
    """  
    canceled_at: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'canceled_at' }})
    r"""Cancellation time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.
      Example: `2022-02-14T10:12:59+00:00`.
    """  
    description: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'description' }})
    r"""Description of the calendar event"""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'location' }})
    r"""Location of the calendar event as free-form text."""  
    organizer: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'organizer' }})
    r"""Email address of the organizer"""  
    recurring: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'recurring' }})
    r"""Should be set to `true` if this is one of recurring series calendar event."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'status' }})
    r"""Status of the calendar event. Depending on the status, the calendar event will or will not impact user's availability.
      Possible values: `confirmed`, `tentative`, `cancelled`.
      Example: `confirmed`.
    """  
    title: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'title' }})
    r"""Title of the calendar event"""  
    

@dataclasses.dataclass
class PostV2CalendarEventsUpsertResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    