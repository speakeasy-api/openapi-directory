/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://video.twilio.com"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * This is the public Twilio REST API.
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  createComposition(
    req: operations.CreateCompositionCreateCompositionRequest,
    security: operations.CreateCompositionSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateCompositionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateCompositionCreateCompositionRequest(req);
    }

    let baseURL: string = operations.CreateCompositionServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/Compositions";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateCompositionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateCompositionResponse =
        new operations.CreateCompositionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1Composition = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1Composition
            );
          }
          break;
      }

      return res;
    });
  }

  createCompositionHook(
    req: operations.CreateCompositionHookCreateCompositionHookRequest,
    security: operations.CreateCompositionHookSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateCompositionHookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateCompositionHookCreateCompositionHookRequest(
        req
      );
    }

    let baseURL: string = operations.CreateCompositionHookServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/CompositionHooks";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateCompositionHookSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateCompositionHookResponse =
        new operations.CreateCompositionHookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1CompositionHook = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1CompositionHook
            );
          }
          break;
      }

      return res;
    });
  }

  createCompositionSettings(
    req: operations.CreateCompositionSettingsCreateCompositionSettingsRequest,
    security: operations.CreateCompositionSettingsSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateCompositionSettingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CreateCompositionSettingsCreateCompositionSettingsRequest(
          req
        );
    }

    let baseURL: string = operations.CreateCompositionSettingsServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/CompositionSettings/Default";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateCompositionSettingsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateCompositionSettingsResponse =
        new operations.CreateCompositionSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1CompositionSettings = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1CompositionSettings
            );
          }
          break;
      }

      return res;
    });
  }

  createRecordingSettings(
    req: operations.CreateRecordingSettingsCreateRecordingSettingsRequest,
    security: operations.CreateRecordingSettingsSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateRecordingSettingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CreateRecordingSettingsCreateRecordingSettingsRequest(
          req
        );
    }

    let baseURL: string = operations.CreateRecordingSettingsServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/RecordingSettings/Default";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateRecordingSettingsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateRecordingSettingsResponse =
        new operations.CreateRecordingSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1RecordingSettings = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1RecordingSettings
            );
          }
          break;
      }

      return res;
    });
  }

  createRoom(
    req: operations.CreateRoomCreateRoomRequest,
    security: operations.CreateRoomSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateRoomResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateRoomCreateRoomRequest(req);
    }

    let baseURL: string = operations.CreateRoomServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/Rooms";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateRoomSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateRoomResponse =
        new operations.CreateRoomResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1Room = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1Room
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a Recording Composition resource identified by a Composition SID.
   */
  deleteComposition(
    req: operations.DeleteCompositionRequest,
    security: operations.DeleteCompositionSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteCompositionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteCompositionRequest(req);
    }

    let baseURL: string = operations.DeleteCompositionServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Compositions/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteCompositionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteCompositionResponse =
        new operations.DeleteCompositionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a Recording CompositionHook resource identified by a `CompositionHook SID`.
   */
  deleteCompositionHook(
    req: operations.DeleteCompositionHookRequest,
    security: operations.DeleteCompositionHookSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteCompositionHookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteCompositionHookRequest(req);
    }

    let baseURL: string = operations.DeleteCompositionHookServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/CompositionHooks/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteCompositionHookSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteCompositionHookResponse =
        new operations.DeleteCompositionHookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a Recording resource identified by a Recording SID.
   */
  deleteRecording(
    req: operations.DeleteRecordingRequest,
    security: operations.DeleteRecordingSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRecordingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRecordingRequest(req);
    }

    let baseURL: string = operations.DeleteRecordingServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(baseURL, "/v1/Recordings/{Sid}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteRecordingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRecordingResponse =
        new operations.DeleteRecordingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  deleteRoomRecording(
    req: operations.DeleteRoomRecordingRequest,
    security: operations.DeleteRoomRecordingSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRoomRecordingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRoomRecordingRequest(req);
    }

    let baseURL: string = operations.DeleteRoomRecordingServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Rooms/{RoomSid}/Recordings/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteRoomRecordingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRoomRecordingResponse =
        new operations.DeleteRoomRecordingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Returns a single Composition resource identified by a Composition SID.
   */
  fetchComposition(
    req: operations.FetchCompositionRequest,
    security: operations.FetchCompositionSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchCompositionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchCompositionRequest(req);
    }

    let baseURL: string = operations.FetchCompositionServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Compositions/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchCompositionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchCompositionResponse =
        new operations.FetchCompositionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1Composition = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1Composition
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a single CompositionHook resource identified by a CompositionHook SID.
   */
  fetchCompositionHook(
    req: operations.FetchCompositionHookRequest,
    security: operations.FetchCompositionHookSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchCompositionHookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchCompositionHookRequest(req);
    }

    let baseURL: string = operations.FetchCompositionHookServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/CompositionHooks/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchCompositionHookSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchCompositionHookResponse =
        new operations.FetchCompositionHookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1CompositionHook = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1CompositionHook
            );
          }
          break;
      }

      return res;
    });
  }

  fetchCompositionSettings(
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchCompositionSettingsResponse> {
    let baseURL: string = operations.FetchCompositionSettingsServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/CompositionSettings/Default";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchCompositionSettingsResponse =
        new operations.FetchCompositionSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1CompositionSettings = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1CompositionSettings
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a single Recording resource identified by a Recording SID.
   */
  fetchRecording(
    req: operations.FetchRecordingRequest,
    security: operations.FetchRecordingSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchRecordingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchRecordingRequest(req);
    }

    let baseURL: string = operations.FetchRecordingServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(baseURL, "/v1/Recordings/{Sid}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchRecordingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchRecordingResponse =
        new operations.FetchRecordingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1Recording = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1Recording
            );
          }
          break;
      }

      return res;
    });
  }

  fetchRecordingSettings(
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchRecordingSettingsResponse> {
    let baseURL: string = operations.FetchRecordingSettingsServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/RecordingSettings/Default";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchRecordingSettingsResponse =
        new operations.FetchRecordingSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1RecordingSettings = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1RecordingSettings
            );
          }
          break;
      }

      return res;
    });
  }

  fetchRoom(
    req: operations.FetchRoomRequest,
    security: operations.FetchRoomSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchRoomResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchRoomRequest(req);
    }

    let baseURL: string = operations.FetchRoomServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(baseURL, "/v1/Rooms/{Sid}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchRoomSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchRoomResponse =
        new operations.FetchRoomResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1Room = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1Room
            );
          }
          break;
      }

      return res;
    });
  }

  fetchRoomParticipant(
    req: operations.FetchRoomParticipantRequest,
    security: operations.FetchRoomParticipantSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchRoomParticipantResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchRoomParticipantRequest(req);
    }

    let baseURL: string = operations.FetchRoomParticipantServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Rooms/{RoomSid}/Participants/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchRoomParticipantSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchRoomParticipantResponse =
        new operations.FetchRoomParticipantResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1RoomRoomParticipant = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1RoomRoomParticipant
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a single Track resource represented by TrackName or SID.
   */
  fetchRoomParticipantPublishedTrack(
    req: operations.FetchRoomParticipantPublishedTrackRequest,
    security: operations.FetchRoomParticipantPublishedTrackSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchRoomParticipantPublishedTrackResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchRoomParticipantPublishedTrackRequest(req);
    }

    let baseURL: string =
      operations.FetchRoomParticipantPublishedTrackServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/PublishedTracks/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchRoomParticipantPublishedTrackSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchRoomParticipantPublishedTrackResponse =
        new operations.FetchRoomParticipantPublishedTrackResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1RoomRoomParticipantRoomParticipantPublishedTrack =
              utils.objectToClass(
                httpRes?.data,
                shared.VideoV1RoomRoomParticipantRoomParticipantPublishedTrack
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of Subscribe Rules for the Participant.
   */
  fetchRoomParticipantSubscribeRule(
    req: operations.FetchRoomParticipantSubscribeRuleRequest,
    security: operations.FetchRoomParticipantSubscribeRuleSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchRoomParticipantSubscribeRuleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchRoomParticipantSubscribeRuleRequest(req);
    }

    let baseURL: string =
      operations.FetchRoomParticipantSubscribeRuleServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribeRules",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchRoomParticipantSubscribeRuleSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchRoomParticipantSubscribeRuleResponse =
        new operations.FetchRoomParticipantSubscribeRuleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1RoomRoomParticipantRoomParticipantSubscribeRule =
              utils.objectToClass(
                httpRes?.data,
                shared.VideoV1RoomRoomParticipantRoomParticipantSubscribeRule
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a single Track resource represented by `track_sid`.  Note: This is one resource with the Video API that requires a SID, be Track Name on the subscriber side is not guaranteed to be unique.
   */
  fetchRoomParticipantSubscribedTrack(
    req: operations.FetchRoomParticipantSubscribedTrackRequest,
    security: operations.FetchRoomParticipantSubscribedTrackSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchRoomParticipantSubscribedTrackResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchRoomParticipantSubscribedTrackRequest(req);
    }

    let baseURL: string =
      operations.FetchRoomParticipantSubscribedTrackServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribedTracks/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchRoomParticipantSubscribedTrackSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchRoomParticipantSubscribedTrackResponse =
        new operations.FetchRoomParticipantSubscribedTrackResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1RoomRoomParticipantRoomParticipantSubscribedTrack =
              utils.objectToClass(
                httpRes?.data,
                shared.VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack
              );
          }
          break;
      }

      return res;
    });
  }

  fetchRoomRecording(
    req: operations.FetchRoomRecordingRequest,
    security: operations.FetchRoomRecordingSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchRoomRecordingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchRoomRecordingRequest(req);
    }

    let baseURL: string = operations.FetchRoomRecordingServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Rooms/{RoomSid}/Recordings/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchRoomRecordingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchRoomRecordingResponse =
        new operations.FetchRoomRecordingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1RoomRoomRecording = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1RoomRoomRecording
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of Recording Rules for the Room.
   */
  fetchRoomRecordingRule(
    req: operations.FetchRoomRecordingRuleRequest,
    security: operations.FetchRoomRecordingRuleSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchRoomRecordingRuleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchRoomRecordingRuleRequest(req);
    }

    let baseURL: string = operations.FetchRoomRecordingRuleServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Rooms/{RoomSid}/RecordingRules",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchRoomRecordingRuleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchRoomRecordingRuleResponse =
        new operations.FetchRoomRecordingRuleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1RoomRoomRecordingRule = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1RoomRoomRecordingRule
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List of all Recording compositions.
   */
  listComposition(
    req: operations.ListCompositionRequest,
    security: operations.ListCompositionSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListCompositionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListCompositionRequest(req);
    }

    let baseURL: string = operations.ListCompositionServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/Compositions";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListCompositionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListCompositionResponse =
        new operations.ListCompositionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCompositionResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListCompositionListCompositionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List of all Recording CompositionHook resources.
   */
  listCompositionHook(
    req: operations.ListCompositionHookRequest,
    security: operations.ListCompositionHookSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListCompositionHookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListCompositionHookRequest(req);
    }

    let baseURL: string = operations.ListCompositionHookServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/CompositionHooks";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListCompositionHookSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListCompositionHookResponse =
        new operations.ListCompositionHookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCompositionHookResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListCompositionHookListCompositionHookResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List of all Track recordings.
   */
  listRecording(
    req: operations.ListRecordingRequest,
    security: operations.ListRecordingSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListRecordingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListRecordingRequest(req);
    }

    let baseURL: string = operations.ListRecordingServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/Recordings";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListRecordingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListRecordingResponse =
        new operations.ListRecordingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listRecordingResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListRecordingListRecordingResponse
            );
          }
          break;
      }

      return res;
    });
  }

  listRoom(
    req: operations.ListRoomRequest,
    security: operations.ListRoomSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListRoomResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListRoomRequest(req);
    }

    let baseURL: string = operations.ListRoomServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/Rooms";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListRoomSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListRoomResponse = new operations.ListRoomResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listRoomResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListRoomListRoomResponse
            );
          }
          break;
      }

      return res;
    });
  }

  listRoomParticipant(
    req: operations.ListRoomParticipantRequest,
    security: operations.ListRoomParticipantSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListRoomParticipantResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListRoomParticipantRequest(req);
    }

    let baseURL: string = operations.ListRoomParticipantServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Rooms/{RoomSid}/Participants",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListRoomParticipantSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListRoomParticipantResponse =
        new operations.ListRoomParticipantResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listRoomParticipantResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListRoomParticipantListRoomParticipantResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of tracks associated with a given Participant. Only `currently` Published Tracks are in the list resource.
   */
  listRoomParticipantPublishedTrack(
    req: operations.ListRoomParticipantPublishedTrackRequest,
    security: operations.ListRoomParticipantPublishedTrackSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListRoomParticipantPublishedTrackResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListRoomParticipantPublishedTrackRequest(req);
    }

    let baseURL: string =
      operations.ListRoomParticipantPublishedTrackServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/PublishedTracks",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListRoomParticipantPublishedTrackSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListRoomParticipantPublishedTrackResponse =
        new operations.ListRoomParticipantPublishedTrackResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listRoomParticipantPublishedTrackResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListRoomParticipantPublishedTrackListRoomParticipantPublishedTrackResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of tracks that are subscribed for the participant.
   */
  listRoomParticipantSubscribedTrack(
    req: operations.ListRoomParticipantSubscribedTrackRequest,
    security: operations.ListRoomParticipantSubscribedTrackSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListRoomParticipantSubscribedTrackResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListRoomParticipantSubscribedTrackRequest(req);
    }

    let baseURL: string =
      operations.ListRoomParticipantSubscribedTrackServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribedTracks",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListRoomParticipantSubscribedTrackSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListRoomParticipantSubscribedTrackResponse =
        new operations.ListRoomParticipantSubscribedTrackResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listRoomParticipantSubscribedTrackResponse =
              utils.objectToClass(
                httpRes?.data,
                operations.ListRoomParticipantSubscribedTrackListRoomParticipantSubscribedTrackResponse
              );
          }
          break;
      }

      return res;
    });
  }

  listRoomRecording(
    req: operations.ListRoomRecordingRequest,
    security: operations.ListRoomRecordingSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListRoomRecordingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListRoomRecordingRequest(req);
    }

    let baseURL: string = operations.ListRoomRecordingServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Rooms/{RoomSid}/Recordings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListRoomRecordingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListRoomRecordingResponse =
        new operations.ListRoomRecordingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listRoomRecordingResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListRoomRecordingListRoomRecordingResponse
            );
          }
          break;
      }

      return res;
    });
  }

  updateCompositionHook(
    req: operations.UpdateCompositionHookRequest,
    security: operations.UpdateCompositionHookSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateCompositionHookResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateCompositionHookRequest(req);
    }

    let baseURL: string = operations.UpdateCompositionHookServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/CompositionHooks/{Sid}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateCompositionHookSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateCompositionHookResponse =
        new operations.UpdateCompositionHookResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1CompositionHook = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1CompositionHook
            );
          }
          break;
      }

      return res;
    });
  }

  updateRoom(
    req: operations.UpdateRoomRequest,
    security: operations.UpdateRoomSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateRoomResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateRoomRequest(req);
    }

    let baseURL: string = operations.UpdateRoomServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(baseURL, "/v1/Rooms/{Sid}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateRoomSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateRoomResponse =
        new operations.UpdateRoomResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1Room = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1Room
            );
          }
          break;
      }

      return res;
    });
  }

  updateRoomParticipant(
    req: operations.UpdateRoomParticipantRequest,
    security: operations.UpdateRoomParticipantSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateRoomParticipantResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateRoomParticipantRequest(req);
    }

    let baseURL: string = operations.UpdateRoomParticipantServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Rooms/{RoomSid}/Participants/{Sid}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateRoomParticipantSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateRoomParticipantResponse =
        new operations.UpdateRoomParticipantResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1RoomRoomParticipant = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1RoomRoomParticipant
            );
          }
          break;
      }

      return res;
    });
  }

  updateRoomParticipantAnonymize(
    req: operations.UpdateRoomParticipantAnonymizeRequest,
    security: operations.UpdateRoomParticipantAnonymizeSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateRoomParticipantAnonymizeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateRoomParticipantAnonymizeRequest(req);
    }

    let baseURL: string =
      operations.UpdateRoomParticipantAnonymizeServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Rooms/{RoomSid}/Participants/{Sid}/Anonymize",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateRoomParticipantAnonymizeSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateRoomParticipantAnonymizeResponse =
        new operations.UpdateRoomParticipantAnonymizeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1RoomRoomParticipantRoomParticipantAnonymize =
              utils.objectToClass(
                httpRes?.data,
                shared.VideoV1RoomRoomParticipantRoomParticipantAnonymize
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update the Subscribe Rules for the Participant
   */
  updateRoomParticipantSubscribeRule(
    req: operations.UpdateRoomParticipantSubscribeRuleRequest,
    security: operations.UpdateRoomParticipantSubscribeRuleSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateRoomParticipantSubscribeRuleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateRoomParticipantSubscribeRuleRequest(req);
    }

    let baseURL: string =
      operations.UpdateRoomParticipantSubscribeRuleServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribeRules",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateRoomParticipantSubscribeRuleSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateRoomParticipantSubscribeRuleResponse =
        new operations.UpdateRoomParticipantSubscribeRuleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1RoomRoomParticipantRoomParticipantSubscribeRule =
              utils.objectToClass(
                httpRes?.data,
                shared.VideoV1RoomRoomParticipantRoomParticipantSubscribeRule
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update the Recording Rules for the Room
   */
  updateRoomRecordingRule(
    req: operations.UpdateRoomRecordingRuleRequest,
    security: operations.UpdateRoomRecordingRuleSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateRoomRecordingRuleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateRoomRecordingRuleRequest(req);
    }

    let baseURL: string = operations.UpdateRoomRecordingRuleServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Rooms/{RoomSid}/RecordingRules",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateRoomRecordingRuleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateRoomRecordingRuleResponse =
        new operations.UpdateRoomRecordingRuleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoV1RoomRoomRecordingRule = utils.objectToClass(
              httpRes?.data,
              shared.VideoV1RoomRoomRecordingRule
            );
          }
          break;
      }

      return res;
    });
  }
}
