<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RegionAutoscalers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified autoscaler.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersDeleteResponse
     */
	public function computeRegionAutoscalersDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/autoscalers/{autoscaler}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified autoscaler.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersGetResponse
     */
	public function computeRegionAutoscalersGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/autoscalers/{autoscaler}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autoscaler = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Autoscaler', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an autoscaler in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersInsertResponse
     */
	public function computeRegionAutoscalersInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/autoscalers', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "autoscaler", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of autoscalers contained within the specified region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersListResponse
     */
	public function computeRegionAutoscalersList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/autoscalers', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->regionAutoscalerList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RegionAutoscalerList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersPatchResponse
     */
	public function computeRegionAutoscalersPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/autoscalers', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "autoscaler1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersTestIamPermissionsResponse
     */
	public function computeRegionAutoscalersTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/autoscalers/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an autoscaler in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersUpdateResponse
     */
	public function computeRegionAutoscalersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/autoscalers', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "autoscaler1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionAutoscalersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}