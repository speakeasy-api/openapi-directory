/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AEAssessment } from "./aeassessment";
import { Application } from "./application";
import { Cis } from "./cis";
import { DpsMessage } from "./dpsmessage";
import { Employee } from "./employee";
import { Employer } from "./employer";
import { Healthcheck } from "./healthcheck";
import { HolidayScheme } from "./holidayscheme";
import { Jobs } from "./jobs";
import { JournalLine } from "./journalline";
import { Journals } from "./journals";
import { NominalCode } from "./nominalcode";
import { PayCode } from "./paycode";
import { PayInstruction } from "./payinstruction";
import { PayLine } from "./payline";
import { PayRun } from "./payrun";
import { PaySchedule } from "./payschedule";
import { Pension } from "./pension";
import { Permission } from "./permission";
import { Query } from "./query";
import { Reference } from "./reference";
import { ReportLine } from "./reportline";
import { ReportLineInstruction } from "./reportlineinstruction";
import { Reports } from "./reports";
import { Rti } from "./rti";
import { Schemas } from "./schemas";
import { SubContractor } from "./subcontractor";
import { Tagging } from "./tagging";
import { Templates } from "./templates";
import { ThirdPartyTransaction } from "./thirdpartytransaction";
import { ThirdPartyTransmission } from "./thirdpartytransmission";
import { User } from "./user";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.test.payrun.io"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * Open, scableable, transparent payroll API.
 *
 * @see {@link https://developer.test.payrun.io/docs} - External Documents
 */
export class SDK {
  public aeAssessment: AEAssessment;
  public application: Application;
  public cis: Cis;
  public dpsMessage: DpsMessage;
  public employee: Employee;
  public employer: Employer;
  public healthcheck: Healthcheck;
  public holidayScheme: HolidayScheme;
  public jobs: Jobs;
  public journalLine: JournalLine;
  public journals: Journals;
  public nominalCode: NominalCode;
  public payCode: PayCode;
  public payInstruction: PayInstruction;
  public payLine: PayLine;
  public payRun: PayRun;
  public paySchedule: PaySchedule;
  public pension: Pension;
  public permission: Permission;
  public query: Query;
  public rti: Rti;
  public reference: Reference;
  public reportLine: ReportLine;
  public reportLineInstruction: ReportLineInstruction;
  public reports: Reports;
  public schemas: Schemas;
  public subContractor: SubContractor;
  public tagging: Tagging;
  public templates: Templates;
  public thirdPartyTransaction: ThirdPartyTransaction;
  public thirdPartyTransmission: ThirdPartyTransmission;
  public user: User;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.aeAssessment = new AEAssessment(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.application = new Application(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.cis = new Cis(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.dpsMessage = new DpsMessage(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.employee = new Employee(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.employer = new Employer(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.healthcheck = new Healthcheck(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.holidayScheme = new HolidayScheme(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.jobs = new Jobs(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.journalLine = new JournalLine(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.journals = new Journals(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.nominalCode = new NominalCode(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.payCode = new PayCode(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.payInstruction = new PayInstruction(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.payLine = new PayLine(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.payRun = new PayRun(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.paySchedule = new PaySchedule(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.pension = new Pension(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.permission = new Permission(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.query = new Query(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.rti = new Rti(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.reference = new Reference(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.reportLine = new ReportLine(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.reportLineInstruction = new ReportLineInstruction(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.reports = new Reports(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.schemas = new Schemas(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.subContractor = new SubContractor(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.tagging = new Tagging(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.templates = new Templates(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.thirdPartyTransaction = new ThirdPartyTransaction(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.thirdPartyTransmission = new ThirdPartyTransmission(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.user = new User(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
