"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Program:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_opted_in_programs(self) -> operations.GetOptedInProgramsResponse:
        r"""This method gets a list of the seller programs that the seller has opted-in to."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/program/get_opted_in_programs'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOptedInProgramsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Programs])
                res.programs = out
        elif http_res.status_code in [400, 404, 500]:
            pass

        return res

    def opt_in_to_program(self, request: shared.Program, security: operations.OptInToProgramSecurity) -> operations.OptInToProgramResponse:
        r"""This method opts the seller in to an eBay seller program. Refer to the <a href=\\"/api-docs/sell/account/overview.html#opt-in\\" target=\\"_blank\\">Account API overview</a> for information about available eBay seller programs.<br /><br /><span class=\\"tablenote\\"><b>Note:</b> It can take up to 24-hours for eBay to process your request to opt-in to a Seller Program. Use the <a href=\\"/api-docs/sell/account/resources/program/methods/getOptedInPrograms\\" target=\\"_blank\\">getOptedInPrograms</a> call to check the status of your request after the processing period has passed.</span>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/program/opt_in'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OptInToProgramResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.opt_in_to_program_200_application_json_object = out
        elif http_res.status_code in [400, 404, 409, 500]:
            pass

        return res

    def opt_out_of_program(self, request: shared.Program, security: operations.OptOutOfProgramSecurity) -> operations.OptOutOfProgramResponse:
        r"""This method opts the seller out of a seller program to which you have previously opted-in to. Get a list of the seller programs you have opted-in to using the <b>getOptedInPrograms</b> call."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/program/opt_out'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OptOutOfProgramResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.opt_out_of_program_200_application_json_object = out
        elif http_res.status_code in [400, 404, 409, 500]:
            pass

        return res

    