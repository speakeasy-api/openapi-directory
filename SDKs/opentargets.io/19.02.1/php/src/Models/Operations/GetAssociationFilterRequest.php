<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GetAssociationFilterRequest
{
    /**
     * Data source to consider.
     * 
     * @var ?string $datasource
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=datasource')]
    public ?string $datasource = null;
    
    /**
     * Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.
     * 
     * @var ?string $datastructure
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=datastructure')]
    public ?string $datastructure = null;
    
    /**
     * Data type to consider.
     * 
     * @var ?string $datatype
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=datatype')]
    public ?string $datatype = null;
    
    /**
     * If `true`, it returns associations that have at least one direct evidence connecting the target and the disease. If `false` it only returns associations for which there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology.
     * 
     * @var ?bool $direct
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=direct')]
    public ?bool $direct = null;
    
    /**
     * An EFO code listed as disease.id.
     * 
     * @var ?string $disease
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=disease')]
    public ?string $disease = null;
    
    /**
     * Returns facets
     * 
     * @var ?bool $facets
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=facets')]
    public ?bool $facets = null;
    
    /**
     * Fields you want to retrieve. This will get priority over the data structure requested.
     * 
     * @var ?string $fields
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=fields')]
    public ?string $fields = null;
    
    /**
     * Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.
     * 
     * @var ?string $format
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=format')]
    public ?string $format = null;
    
    /**
     * How many initial results should be skipped. Defaults to 0.
     * 
     * @var ?float $from
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=from')]
    public ?float $from = null;
    
    /**
     * A Reactome pathway identifier (returning only those targets linked to the specified pathway).
     * 
     * @var ?string $pathway
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=pathway')]
    public ?string $pathway = null;
    
    /**
     * Filter by maximum score value.
     * 
     * @var ?float $scorevalueMax
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=scorevalue_max')]
    public ?float $scorevalueMax = null;
    
    /**
     * Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.
     * 
     * @var ?float $scorevalueMin
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=scorevalue_min')]
    public ?float $scorevalueMin = null;
    
    /**
     * Score types to apply the score value min and max filters. The default is `overall`.
     * 
     * @var ?string $scorevalueTypes
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=scorevalue_types')]
    public ?string $scorevalueTypes = null;
    
    /**
     * Restrict the filtered results to those matching the passed string. The matching is done with a
     * 
     * phrase match prefix.
     * 
     * 
     * @var ?string $search
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=search')]
    public ?string $search = null;
    
    /**
     * Maximum amount of results to return. Defaults to 10, max is 10000.
     * 
     * @var ?float $size
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=size')]
    public ?float $size = null;
    
    /**
     * Sort by the given score type. Defaults to 'overall' and descending order. Use '~' prefix to do ascending
     * 
     * order e.g. '~overall'. You will call a data type score like: 'datatypes.literature', and a data source as
     * 'datasources.gwas'. Supports multiple entries.
     * 
     * 
     * @var ?string $sort
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort')]
    public ?string $sort = null;
    
    /**
     * A target identifier listed as target.id.
     * 
     * @var ?string $target
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=target')]
    public ?string $target = null;
    
    /**
     * A ChEMBL target class identifier (returning only those targets belonging to the specified class).
     * 
     * @var ?string $targetClass
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=target_class')]
    public ?string $targetClass = null;
    
    /**
     * An EFO code of a therapeutic area.
     * 
     * @var ?string $therapeuticArea
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=therapeutic_area')]
    public ?string $therapeuticArea = null;
    
    /**
     * A UniProt keyword (meaning all the targets linked to that keyword).
     * 
     * @var ?string $uniprotkw
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=uniprotkw')]
    public ?string $uniprotkw = null;
    
	public function __construct()
	{
		$this->datasource = null;
		$this->datastructure = null;
		$this->datatype = null;
		$this->direct = null;
		$this->disease = null;
		$this->facets = null;
		$this->fields = null;
		$this->format = null;
		$this->from = null;
		$this->pathway = null;
		$this->scorevalueMax = null;
		$this->scorevalueMin = null;
		$this->scorevalueTypes = null;
		$this->search = null;
		$this->size = null;
		$this->sort = null;
		$this->target = null;
		$this->targetClass = null;
		$this->therapeuticArea = null;
		$this->uniprotkw = null;
	}
}
