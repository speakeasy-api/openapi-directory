"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Tokens:
    r"""tokens"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def tokens_apply_missing_partner_offers_without_claim(self, request: operations.TokensApplyMissingPartnerOffersWithoutClaimRequest, security: operations.TokensApplyMissingPartnerOffersWithoutClaimSecurity) -> operations.TokensApplyMissingPartnerOffersWithoutClaimResponse:
        r"""Apply a partner offer to the targeted user. This endpoint does not claim a new offer, but any already claimed offers will be applied to the game if not already."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TokensApplyMissingPartnerOffersWithoutClaimRequest, base_url, '/Tokens/Partner/ApplyMissingOffers/{partnerApplicationId}/{targetBnetMembershipId}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TokensApplyMissingPartnerOffersWithoutClaimResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def tokens_claim_partner_offer(self) -> operations.TokensClaimPartnerOfferResponse:
        r"""Claim a partner offer as the authenticated user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Tokens/Partner/ClaimOffer/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TokensClaimPartnerOfferResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def tokens_force_drops_repair(self) -> operations.TokensForceDropsRepairResponse:
        r"""Twitch Drops self-repair function - scans twitch for drops not marked as fulfilled and resyncs them."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Tokens/Partner/ForceDropsRepair/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TokensForceDropsRepairResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def tokens_get_bungie_rewards_for_platform_user(self, request: operations.TokensGetBungieRewardsForPlatformUserRequest, security: operations.TokensGetBungieRewardsForPlatformUserSecurity) -> operations.TokensGetBungieRewardsForPlatformUserResponse:
        r"""Returns the bungie rewards for the targeted user when a platform membership Id and Type are used."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TokensGetBungieRewardsForPlatformUserRequest, base_url, '/Tokens/Rewards/GetRewardsForPlatformUser/{membershipId}/{membershipType}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TokensGetBungieRewardsForPlatformUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def tokens_get_bungie_rewards_for_user(self, request: operations.TokensGetBungieRewardsForUserRequest, security: operations.TokensGetBungieRewardsForUserSecurity) -> operations.TokensGetBungieRewardsForUserResponse:
        r"""Returns the bungie rewards for the targeted user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TokensGetBungieRewardsForUserRequest, base_url, '/Tokens/Rewards/GetRewardsForUser/{membershipId}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TokensGetBungieRewardsForUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def tokens_get_bungie_rewards_list(self) -> operations.TokensGetBungieRewardsListResponse:
        r"""Returns a list of the current bungie rewards"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Tokens/Rewards/BungieRewards/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TokensGetBungieRewardsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def tokens_get_partner_offer_sku_history(self, request: operations.TokensGetPartnerOfferSkuHistoryRequest, security: operations.TokensGetPartnerOfferSkuHistorySecurity) -> operations.TokensGetPartnerOfferSkuHistoryResponse:
        r"""Returns the partner sku and offer history of the targeted user. Elevated permissions are required to see users that are not yourself."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TokensGetPartnerOfferSkuHistoryRequest, base_url, '/Tokens/Partner/History/{partnerApplicationId}/{targetBnetMembershipId}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TokensGetPartnerOfferSkuHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def tokens_get_partner_reward_history(self, request: operations.TokensGetPartnerRewardHistoryRequest, security: operations.TokensGetPartnerRewardHistorySecurity) -> operations.TokensGetPartnerRewardHistoryResponse:
        r"""Returns the partner rewards history of the targeted user, both partner offers and Twitch drops."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TokensGetPartnerRewardHistoryRequest, base_url, '/Tokens/Partner/History/{targetBnetMembershipId}/Application/{partnerApplicationId}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TokensGetPartnerRewardHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    