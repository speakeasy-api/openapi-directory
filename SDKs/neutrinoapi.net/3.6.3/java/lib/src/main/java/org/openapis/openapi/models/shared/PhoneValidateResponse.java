/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

public class PhoneValidateResponse {
    /**
     * The phone number country
     */
    @JsonProperty("country")
    public String country;
    public PhoneValidateResponse withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * The phone number country as an ISO 2-letter country code
     */
    @JsonProperty("country-code")
    public String countryCode;
    public PhoneValidateResponse withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }
    
    /**
     * The phone number country as an ISO 3-letter country code
     */
    @JsonProperty("country-code3")
    public String countryCode3;
    public PhoneValidateResponse withCountryCode3(String countryCode3) {
        this.countryCode3 = countryCode3;
        return this;
    }
    
    /**
     * ISO 4217 currency code associated with the country
     */
    @JsonProperty("currency-code")
    public String currencyCode;
    public PhoneValidateResponse withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * The international calling code
     */
    @JsonProperty("international-calling-code")
    public String internationalCallingCode;
    public PhoneValidateResponse withInternationalCallingCode(String internationalCallingCode) {
        this.internationalCallingCode = internationalCallingCode;
        return this;
    }
    
    /**
     * The number represented in full international format (E.164)
     */
    @JsonProperty("international-number")
    public String internationalNumber;
    public PhoneValidateResponse withInternationalNumber(String internationalNumber) {
        this.internationalNumber = internationalNumber;
        return this;
    }
    
    /**
     * True if this is a mobile number. If the number type is unknown this value will be false
     */
    @JsonProperty("is-mobile")
    public Boolean isMobile;
    public PhoneValidateResponse withIsMobile(Boolean isMobile) {
        this.isMobile = isMobile;
        return this;
    }
    
    /**
     * The number represented in local dialing format
     */
    @JsonProperty("local-number")
    public String localNumber;
    public PhoneValidateResponse withLocalNumber(String localNumber) {
        this.localNumber = localNumber;
        return this;
    }
    
    /**
     * The phone number location. Could be the city, region or country depending on the type of number
     */
    @JsonProperty("location")
    public String location;
    public PhoneValidateResponse withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * The network/carrier who owns the prefix (this only works for some countries, use HLR lookup for global network detection)
     */
    @JsonProperty("prefix-network")
    public String prefixNetwork;
    public PhoneValidateResponse withPrefixNetwork(String prefixNetwork) {
        this.prefixNetwork = prefixNetwork;
        return this;
    }
    
    /**
     * The number type based on the number prefix. &lt;br&gt;Possible values are: &lt;br&gt; &lt;ul&gt; &lt;li&gt;mobile&lt;/li&gt; &lt;li&gt;fixed-line&lt;/li&gt; &lt;li&gt;premium-rate&lt;/li&gt; &lt;li&gt;toll-free&lt;/li&gt; &lt;li&gt;voip&lt;/li&gt; &lt;li&gt;unknown (use HLR lookup)&lt;/li&gt; &lt;/ul&gt;
     */
    @JsonProperty("type")
    public String type;
    public PhoneValidateResponse withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Is this a valid phone number
     */
    @JsonProperty("valid")
    public Boolean valid;
    public PhoneValidateResponse withValid(Boolean valid) {
        this.valid = valid;
        return this;
    }
    
}
