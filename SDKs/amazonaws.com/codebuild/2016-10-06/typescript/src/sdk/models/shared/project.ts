/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { LogsConfig } from "./logsconfig";
import { ProjectArtifacts } from "./projectartifacts";
import { ProjectBadge } from "./projectbadge";
import { ProjectBuildBatchConfig } from "./projectbuildbatchconfig";
import { ProjectCache } from "./projectcache";
import { ProjectEnvironment } from "./projectenvironment";
import { ProjectFileSystemLocation } from "./projectfilesystemlocation";
import { ProjectSource } from "./projectsource";
import { ProjectSourceVersion } from "./projectsourceversion";
import { ProjectVisibilityTypeEnum } from "./projectvisibilitytypeenum";
import { Tag } from "./tag";
import { VpcConfig } from "./vpcconfig";
import { Webhook } from "./webhook";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Information about a build project.
 */
export class Project extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "artifacts" })
  @Type(() => ProjectArtifacts)
  artifacts?: ProjectArtifacts;

  @SpeakeasyMetadata()
  @Expose({ name: "badge" })
  @Type(() => ProjectBadge)
  badge?: ProjectBadge;

  @SpeakeasyMetadata()
  @Expose({ name: "buildBatchConfig" })
  @Type(() => ProjectBuildBatchConfig)
  buildBatchConfig?: ProjectBuildBatchConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "cache" })
  @Type(() => ProjectCache)
  cache?: ProjectCache;

  @SpeakeasyMetadata()
  @Expose({ name: "concurrentBuildLimit" })
  concurrentBuildLimit?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  created?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "encryptionKey" })
  encryptionKey?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "environment" })
  @Type(() => ProjectEnvironment)
  environment?: ProjectEnvironment;

  @SpeakeasyMetadata({ elemType: ProjectFileSystemLocation })
  @Expose({ name: "fileSystemLocations" })
  @Type(() => ProjectFileSystemLocation)
  fileSystemLocations?: ProjectFileSystemLocation[];

  @SpeakeasyMetadata()
  @Expose({ name: "lastModified" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModified?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "logsConfig" })
  @Type(() => LogsConfig)
  logsConfig?: LogsConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * <p>Specifies the visibility of the project's builds. Possible values are:</p> <dl> <dt>PUBLIC_READ</dt> <dd> <p>The project builds are visible to the public.</p> </dd> <dt>PRIVATE</dt> <dd> <p>The project builds are not visible to the public.</p> </dd> </dl>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "projectVisibility" })
  projectVisibility?: ProjectVisibilityTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "publicProjectAlias" })
  publicProjectAlias?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "queuedTimeoutInMinutes" })
  queuedTimeoutInMinutes?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "resourceAccessRole" })
  resourceAccessRole?: string;

  @SpeakeasyMetadata({ elemType: ProjectArtifacts })
  @Expose({ name: "secondaryArtifacts" })
  @Type(() => ProjectArtifacts)
  secondaryArtifacts?: ProjectArtifacts[];

  @SpeakeasyMetadata({ elemType: ProjectSourceVersion })
  @Expose({ name: "secondarySourceVersions" })
  @Type(() => ProjectSourceVersion)
  secondarySourceVersions?: ProjectSourceVersion[];

  @SpeakeasyMetadata({ elemType: ProjectSource })
  @Expose({ name: "secondarySources" })
  @Type(() => ProjectSource)
  secondarySources?: ProjectSource[];

  @SpeakeasyMetadata()
  @Expose({ name: "serviceRole" })
  serviceRole?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(() => ProjectSource)
  source?: ProjectSource;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceVersion" })
  sourceVersion?: string;

  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "tags" })
  @Type(() => Tag)
  tags?: Tag[];

  @SpeakeasyMetadata()
  @Expose({ name: "timeoutInMinutes" })
  timeoutInMinutes?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "vpcConfig" })
  @Type(() => VpcConfig)
  vpcConfig?: VpcConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "webhook" })
  @Type(() => Webhook)
  webhook?: Webhook;
}
