<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - Domain API (WHOIS, Check, Batch)
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'http://localhost:5000',
		'https://apispot.io/api',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Check domain availability
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckDomainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckDomainResponse
     */
	public function checkDomain(
        \OpenAPI\OpenAPI\Models\Operations\CheckDomainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckDomainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/{domain}/check', \OpenAPI\OpenAPI\Models\Operations\CheckDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkDomain200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CheckDomain200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create batch. Batch is then being processed until all provided items have been completed. At any time it can be `get` to provide current status with results optionally.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBatchRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateBatchResponse
     */
	public function createBatch(
        \OpenAPI\OpenAPI\Models\Operations\CreateBatchRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/batch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batch = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Batch', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete batch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteBatchResponse
     */
	public function deleteBatch(
        \OpenAPI\OpenAPI\Models\Operations\DeleteBatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/batch/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteBatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Check domain rank (authority).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DomainRankRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DomainRankResponse
     */
	public function domainRank(
        \OpenAPI\OpenAPI\Models\Operations\DomainRankRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DomainRankResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/{domain}/rank', \OpenAPI\OpenAPI\Models\Operations\DomainRankRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DomainRankResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->domainRank200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DomainRank200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get batch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBatchResponse
     */
	public function getBatch(
        \OpenAPI\OpenAPI\Models\Operations\GetBatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/batch/{id}', \OpenAPI\OpenAPI\Models\Operations\GetBatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batch = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Batch', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get your batches
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBatchesResponse
     */
	public function getBatches(
    ): \OpenAPI\OpenAPI\Models\Operations\GetBatchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/batch');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBatchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->arrayOfBatch = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArrayOfBatch', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Query domain database
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryDbRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryDbResponse
     */
	public function queryDb(
        \OpenAPI\OpenAPI\Models\Operations\QueryDbRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryDbResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/db');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryDbRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryDbResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->queryDb200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * WHOIS query for a domain
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WhoisRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WhoisResponse
     */
	public function whois(
        \OpenAPI\OpenAPI\Models\Operations\WhoisRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WhoisResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/{domain}/whois', \OpenAPI\OpenAPI\Models\Operations\WhoisRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WhoisRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WhoisResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}