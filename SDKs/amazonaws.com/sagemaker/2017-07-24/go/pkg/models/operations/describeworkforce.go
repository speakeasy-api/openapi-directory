// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeWorkforceXAmzTargetEnum
type DescribeWorkforceXAmzTargetEnum string

const (
	DescribeWorkforceXAmzTargetEnumSageMakerDescribeWorkforce DescribeWorkforceXAmzTargetEnum = "SageMaker.DescribeWorkforce"
)

func (e DescribeWorkforceXAmzTargetEnum) ToPointer() *DescribeWorkforceXAmzTargetEnum {
	return &e
}

func (e *DescribeWorkforceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SageMaker.DescribeWorkforce":
		*e = DescribeWorkforceXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeWorkforceXAmzTargetEnum: %v", v)
	}
}

type DescribeWorkforceRequest struct {
	DescribeWorkforceRequest shared.DescribeWorkforceRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               DescribeWorkforceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeWorkforceResponse struct {
	ContentType string
	// Success
	DescribeWorkforceResponse *shared.DescribeWorkforceResponse
	StatusCode                int
	RawResponse               *http.Response
}
