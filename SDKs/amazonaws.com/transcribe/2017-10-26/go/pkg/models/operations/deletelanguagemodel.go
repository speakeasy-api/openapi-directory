// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteLanguageModelXAmzTargetEnum
type DeleteLanguageModelXAmzTargetEnum string

const (
	DeleteLanguageModelXAmzTargetEnumTranscribeDeleteLanguageModel DeleteLanguageModelXAmzTargetEnum = "Transcribe.DeleteLanguageModel"
)

func (e *DeleteLanguageModelXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Transcribe.DeleteLanguageModel":
		*e = DeleteLanguageModelXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteLanguageModelXAmzTargetEnum: %s", s)
	}
}

type DeleteLanguageModelHeaders struct {
	XAmzAlgorithm     *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DeleteLanguageModelXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteLanguageModelRequest struct {
	Headers DeleteLanguageModelHeaders
	Request shared.DeleteLanguageModelRequest `request:"mediaType=application/json"`
}

type DeleteLanguageModelResponse struct {
	// BadRequestException
	BadRequestException interface{}
	ContentType         string
	// InternalFailureException
	InternalFailureException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
}
