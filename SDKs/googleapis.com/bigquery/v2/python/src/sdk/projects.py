"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def bigquery_projects_get_service_account(self, request: operations.BigqueryProjectsGetServiceAccountRequest, security: operations.BigqueryProjectsGetServiceAccountSecurity) -> operations.BigqueryProjectsGetServiceAccountResponse:
        r"""Returns the email address of the service account for your project used for interactions with Google Cloud KMS."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryProjectsGetServiceAccountRequest, base_url, '/projects/{projectId}/serviceAccount', request)
        
        query_params = utils.get_query_params(operations.BigqueryProjectsGetServiceAccountRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryProjectsGetServiceAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetServiceAccountResponse])
                res.get_service_account_response = out

        return res

    def bigquery_projects_list(self, request: operations.BigqueryProjectsListRequest, security: operations.BigqueryProjectsListSecurity) -> operations.BigqueryProjectsListResponse:
        r"""Lists all projects to which you have been granted any project role."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/projects'
        
        query_params = utils.get_query_params(operations.BigqueryProjectsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryProjectsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectList])
                res.project_list = out

        return res

    