// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateEmailIdentityHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateEmailIdentityRequestBodyDkimSigningAttributes - An object that contains configuration for Bring Your Own DKIM (BYODKIM), or, for Easy DKIM
type CreateEmailIdentityRequestBodyDkimSigningAttributes struct {
	DomainSigningPrivateKey *string                          `json:"DomainSigningPrivateKey,omitempty"`
	DomainSigningSelector   *string                          `json:"DomainSigningSelector,omitempty"`
	NextSigningKeyLength    *shared.DkimSigningKeyLengthEnum `json:"NextSigningKeyLength,omitempty"`
}

type CreateEmailIdentityRequestBody struct {
	// <p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
	ConfigurationSetName *string `json:"ConfigurationSetName,omitempty"`
	// An object that contains configuration for Bring Your Own DKIM (BYODKIM), or, for Easy DKIM
	DkimSigningAttributes *CreateEmailIdentityRequestBodyDkimSigningAttributes `json:"DkimSigningAttributes,omitempty"`
	// The email address or domain to verify.
	EmailIdentity string `json:"EmailIdentity"`
	// An array of objects that define the tags (keys and values) to associate with the email identity.
	Tags []shared.Tag `json:"Tags,omitempty"`
}

type CreateEmailIdentityRequest struct {
	Headers CreateEmailIdentityHeaders
	Request CreateEmailIdentityRequestBody `request:"mediaType=application/json"`
}

type CreateEmailIdentityResponse struct {
	// AlreadyExistsException
	AlreadyExistsException interface{}
	// BadRequestException
	BadRequestException interface{}
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// Success
	CreateEmailIdentityResponse *shared.CreateEmailIdentityResponse
	// LimitExceededException
	LimitExceededException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
	// TooManyRequestsException
	TooManyRequestsException interface{}
}
