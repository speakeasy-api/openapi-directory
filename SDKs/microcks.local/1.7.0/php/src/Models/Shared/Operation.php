<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Operation - An Operation of a Service or API
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Operation
{
    /**
     * Map of protocol binding details for this operation
     * 
     * @var ?array<string, \OpenAPI\OpenAPI\Models\Shared\Binding> $bindings
     */
	#[\JMS\Serializer\Annotation\SerializedName('bindings')]
    #[\JMS\Serializer\Annotation\Type('array<string, OpenAPI\OpenAPI\Models\Shared\Binding>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $bindings = null;
    
    /**
     * Default response time delay for mocks
     * 
     * @var ?float $defaultDelay
     */
	#[\JMS\Serializer\Annotation\SerializedName('defaultDelay')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $defaultDelay = null;
    
    /**
     * Dispatcher strategy used for mocks
     * 
     * @var ?string $dispatcher
     */
	#[\JMS\Serializer\Annotation\SerializedName('dispatcher')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $dispatcher = null;
    
    /**
     * DispatcherRules used for mocks
     * 
     * @var ?string $dispatcherRules
     */
	#[\JMS\Serializer\Annotation\SerializedName('dispatcherRules')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $dispatcherRules = null;
    
    /**
     * Name of input parameters in case of Xml based Service
     * 
     * @var ?string $inputName
     */
	#[\JMS\Serializer\Annotation\SerializedName('inputName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $inputName = null;
    
    /**
     * Represents transport method
     * 
     * @var string $method
     */
	#[\JMS\Serializer\Annotation\SerializedName('method')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $method;
    
    /**
     * Unique name of this Operation within Service scope
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * Name of output parameters in case of Xml based Service
     * 
     * @var ?string $outputName
     */
	#[\JMS\Serializer\Annotation\SerializedName('outputName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $outputName = null;
    
    /**
     * Contraints that may apply to mock invocatino on this operation
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\ParameterConstraint> $parameterContraints
     */
	#[\JMS\Serializer\Annotation\SerializedName('parameterContraints')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\ParameterConstraint>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $parameterContraints = null;
    
    /**
     * Paths the mocks endpoints are mapped on
     * 
     * @var ?array<string> $resourcePaths
     */
	#[\JMS\Serializer\Annotation\SerializedName('resourcePaths')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $resourcePaths = null;
    
	public function __construct()
	{
		$this->bindings = null;
		$this->defaultDelay = null;
		$this->dispatcher = null;
		$this->dispatcherRules = null;
		$this->inputName = null;
		$this->method = "";
		$this->name = "";
		$this->outputName = null;
		$this->parameterContraints = null;
		$this->resourcePaths = null;
	}
}
