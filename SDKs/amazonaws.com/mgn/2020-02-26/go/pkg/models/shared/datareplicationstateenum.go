// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DataReplicationStateEnum string

const (
	DataReplicationStateEnumStopped                 DataReplicationStateEnum = "STOPPED"
	DataReplicationStateEnumInitiating              DataReplicationStateEnum = "INITIATING"
	DataReplicationStateEnumInitialSync             DataReplicationStateEnum = "INITIAL_SYNC"
	DataReplicationStateEnumBacklog                 DataReplicationStateEnum = "BACKLOG"
	DataReplicationStateEnumCreatingSnapshot        DataReplicationStateEnum = "CREATING_SNAPSHOT"
	DataReplicationStateEnumContinuous              DataReplicationStateEnum = "CONTINUOUS"
	DataReplicationStateEnumPaused                  DataReplicationStateEnum = "PAUSED"
	DataReplicationStateEnumRescan                  DataReplicationStateEnum = "RESCAN"
	DataReplicationStateEnumStalled                 DataReplicationStateEnum = "STALLED"
	DataReplicationStateEnumDisconnected            DataReplicationStateEnum = "DISCONNECTED"
	DataReplicationStateEnumPendingSnapshotShipping DataReplicationStateEnum = "PENDING_SNAPSHOT_SHIPPING"
	DataReplicationStateEnumShippingSnapshot        DataReplicationStateEnum = "SHIPPING_SNAPSHOT"
)

func (e DataReplicationStateEnum) ToPointer() *DataReplicationStateEnum {
	return &e
}

func (e *DataReplicationStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STOPPED":
		fallthrough
	case "INITIATING":
		fallthrough
	case "INITIAL_SYNC":
		fallthrough
	case "BACKLOG":
		fallthrough
	case "CREATING_SNAPSHOT":
		fallthrough
	case "CONTINUOUS":
		fallthrough
	case "PAUSED":
		fallthrough
	case "RESCAN":
		fallthrough
	case "STALLED":
		fallthrough
	case "DISCONNECTED":
		fallthrough
	case "PENDING_SNAPSHOT_SHIPPING":
		fallthrough
	case "SHIPPING_SNAPSHOT":
		*e = DataReplicationStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataReplicationStateEnum: %v", v)
	}
}
