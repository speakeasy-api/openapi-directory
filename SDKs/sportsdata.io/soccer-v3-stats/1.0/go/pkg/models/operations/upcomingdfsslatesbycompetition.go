// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpcomingDfsSlatesByCompetitionFormatEnum - Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
type UpcomingDfsSlatesByCompetitionFormatEnum string

const (
	UpcomingDfsSlatesByCompetitionFormatEnumJSON UpcomingDfsSlatesByCompetitionFormatEnum = "json"
	UpcomingDfsSlatesByCompetitionFormatEnumXML  UpcomingDfsSlatesByCompetitionFormatEnum = "xml"
)

func (e UpcomingDfsSlatesByCompetitionFormatEnum) ToPointer() *UpcomingDfsSlatesByCompetitionFormatEnum {
	return &e
}

func (e *UpcomingDfsSlatesByCompetitionFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "xml":
		*e = UpcomingDfsSlatesByCompetitionFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpcomingDfsSlatesByCompetitionFormatEnum: %v", v)
	}
}

type UpcomingDfsSlatesByCompetitionRequest struct {
	// The id of the competition.
	// <br>Examples: <code>3</code>
	CompetitionID string `pathParam:"style=simple,explode=false,name=competitionId"`
	// Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
	Format UpcomingDfsSlatesByCompetitionFormatEnum `pathParam:"style=simple,explode=false,name=format"`
}

type UpcomingDfsSlatesByCompetitionResponse struct {
	ContentType string
	DfsSlates   []shared.DfsSlate
	StatusCode  int
	RawResponse *http.Response
}
