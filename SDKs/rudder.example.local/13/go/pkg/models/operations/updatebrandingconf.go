// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateBRandingConfRequest struct {
	Request shared.BrandingConf `request:"mediaType=application/json"`
}

// UpdateBRandingConf200ApplicationJSONActionEnum - The id of the action
type UpdateBRandingConf200ApplicationJSONActionEnum string

const (
	UpdateBRandingConf200ApplicationJSONActionEnumUpdateBRandingConf UpdateBRandingConf200ApplicationJSONActionEnum = "updateBRandingConf"
)

func (e *UpdateBRandingConf200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "updateBRandingConf":
		*e = UpdateBRandingConf200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateBRandingConf200ApplicationJSONActionEnum: %s", s)
	}
}

type UpdateBRandingConf200ApplicationJSONData struct {
	Branding shared.BrandingConf `json:"branding"`
}

// UpdateBRandingConf200ApplicationJSONResultEnum - Result of the request
type UpdateBRandingConf200ApplicationJSONResultEnum string

const (
	UpdateBRandingConf200ApplicationJSONResultEnumSuccess UpdateBRandingConf200ApplicationJSONResultEnum = "success"
	UpdateBRandingConf200ApplicationJSONResultEnumError   UpdateBRandingConf200ApplicationJSONResultEnum = "error"
)

func (e *UpdateBRandingConf200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = UpdateBRandingConf200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateBRandingConf200ApplicationJSONResultEnum: %s", s)
	}
}

// UpdateBRandingConf200ApplicationJSON - Updated
type UpdateBRandingConf200ApplicationJSON struct {
	// The id of the action
	Action UpdateBRandingConf200ApplicationJSONActionEnum `json:"action"`
	Data   UpdateBRandingConf200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result UpdateBRandingConf200ApplicationJSONResultEnum `json:"result"`
}

type UpdateBRandingConfResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Updated
	UpdateBRandingConf200ApplicationJSONObject *UpdateBRandingConf200ApplicationJSON
}
