"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TranslateTextGlossaryConfig:
    r"""Configures which glossary should be used for a specific target language, and defines options for applying that glossary."""
    
    glossary: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('glossary'), 'exclude': lambda f: f is None }})
    r"""Required. Specifies the glossary used for this translation. Use this format: projects/*/locations/*/glossaries/*"""  
    ignore_case: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignoreCase'), 'exclude': lambda f: f is None }})
    r"""Optional. Indicates match is case-insensitive. Default value is false if missing."""  
    