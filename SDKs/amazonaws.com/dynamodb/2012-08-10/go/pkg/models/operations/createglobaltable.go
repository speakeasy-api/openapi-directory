// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateGlobalTableXAmzTargetEnum
type CreateGlobalTableXAmzTargetEnum string

const (
	CreateGlobalTableXAmzTargetEnumDynamoDb20120810CreateGlobalTable CreateGlobalTableXAmzTargetEnum = "DynamoDB_20120810.CreateGlobalTable"
)

func (e *CreateGlobalTableXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DynamoDB_20120810.CreateGlobalTable":
		*e = CreateGlobalTableXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateGlobalTableXAmzTargetEnum: %s", s)
	}
}

type CreateGlobalTableHeaders struct {
	XAmzAlgorithm     *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateGlobalTableXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateGlobalTableRequest struct {
	Headers CreateGlobalTableHeaders
	Request shared.CreateGlobalTableInput `request:"mediaType=application/json"`
}

type CreateGlobalTableResponse struct {
	ContentType string
	// Success
	CreateGlobalTableOutput *shared.CreateGlobalTableOutput
	// GlobalTableAlreadyExistsException
	GlobalTableAlreadyExistsException interface{}
	// InternalServerError
	InternalServerError interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// TableNotFoundException
	TableNotFoundException interface{}
}
