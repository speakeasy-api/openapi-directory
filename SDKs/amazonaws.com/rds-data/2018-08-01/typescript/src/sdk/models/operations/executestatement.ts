/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * <p>A value that indicates whether to format the result set as a single JSON string. This parameter only applies to <code>SELECT</code> statements and is ignored for other types of statements. Allowed values are <code>NONE</code> and <code>JSON</code>. The default value is <code>NONE</code>. The result is returned in the <code>formattedRecords</code> field.</p> <p>For usage information about the JSON format for result sets, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API</a> in the <i>Amazon Aurora User Guide</i>.</p>
 */
export enum ExecuteStatementRequestBodyFormatRecordsAsEnum {
  None = "NONE",
  Json = "JSON",
}

/**
 * Options that control how the result set is returned.
 */
export class ExecuteStatementRequestBodyResultSetOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "decimalReturnType" })
  decimalReturnType?: shared.DecimalReturnTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "longReturnType" })
  longReturnType?: shared.LongReturnTypeEnum;
}

export class ExecuteStatementRequestBody extends SpeakeasyBase {
  /**
   * <p>A value that indicates whether to continue running the statement after the call times out. By default, the statement stops running when the call times out.</p> <note> <p>For DDL statements, we recommend continuing to run the statement after the call times out. When a DDL statement terminates before it is finished running, it can result in errors and possibly corrupted data structures.</p> </note>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "continueAfterTimeout" })
  continueAfterTimeout?: boolean;

  /**
   * The name of the database.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "database" })
  database?: string;

  /**
   * <p>A value that indicates whether to format the result set as a single JSON string. This parameter only applies to <code>SELECT</code> statements and is ignored for other types of statements. Allowed values are <code>NONE</code> and <code>JSON</code>. The default value is <code>NONE</code>. The result is returned in the <code>formattedRecords</code> field.</p> <p>For usage information about the JSON format for result sets, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API</a> in the <i>Amazon Aurora User Guide</i>.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formatRecordsAs" })
  formatRecordsAs?: ExecuteStatementRequestBodyFormatRecordsAsEnum;

  /**
   * A value that indicates whether to include metadata in the results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "includeResultMetadata" })
  includeResultMetadata?: boolean;

  /**
   * <p>The parameters for the SQL statement.</p> <note> <p>Array parameters are not supported.</p> </note>
   */
  @SpeakeasyMetadata({ elemType: shared.SqlParameter })
  @Expose({ name: "parameters" })
  @Type(() => shared.SqlParameter)
  parameters?: shared.SqlParameter[];

  /**
   * The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourceArn" })
  resourceArn: string;

  /**
   * Options that control how the result set is returned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resultSetOptions" })
  @Type(() => ExecuteStatementRequestBodyResultSetOptions)
  resultSetOptions?: ExecuteStatementRequestBodyResultSetOptions;

  /**
   * <p>The name of the database schema.</p> <note> <p>Currently, the <code>schema</code> parameter isn't supported.</p> </note>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schema" })
  schema?: string;

  /**
   * <p>The ARN of the secret that enables access to the DB cluster. Enter the database user name and password for the credentials in the secret.</p> <p>For information about creating the secret, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/create_database_secret.html">Create a database secret</a>.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secretArn" })
  secretArn: string;

  /**
   * The SQL statement to run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sql" })
  sql: string;

  /**
   * <p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p> <p>If the SQL statement is not part of a transaction, don't set this parameter.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transactionId" })
  transactionId?: string;
}

export class ExecuteStatementRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ExecuteStatementRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class ExecuteStatementResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  executeStatementResponse?: shared.ExecuteStatementResponse;

  /**
   * ForbiddenException
   */
  @SpeakeasyMetadata()
  forbiddenException?: any;

  /**
   * InternalServerErrorException
   */
  @SpeakeasyMetadata()
  internalServerErrorException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceUnavailableError
   */
  @SpeakeasyMetadata()
  serviceUnavailableError?: any;

  /**
   * StatementTimeoutException
   */
  @SpeakeasyMetadata()
  statementTimeoutException?: any;
}
