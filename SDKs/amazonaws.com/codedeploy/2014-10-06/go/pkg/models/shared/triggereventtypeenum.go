// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TriggerEventTypeEnum string

const (
	TriggerEventTypeEnumDeploymentStart    TriggerEventTypeEnum = "DeploymentStart"
	TriggerEventTypeEnumDeploymentSuccess  TriggerEventTypeEnum = "DeploymentSuccess"
	TriggerEventTypeEnumDeploymentFailure  TriggerEventTypeEnum = "DeploymentFailure"
	TriggerEventTypeEnumDeploymentStop     TriggerEventTypeEnum = "DeploymentStop"
	TriggerEventTypeEnumDeploymentRollback TriggerEventTypeEnum = "DeploymentRollback"
	TriggerEventTypeEnumDeploymentReady    TriggerEventTypeEnum = "DeploymentReady"
	TriggerEventTypeEnumInstanceStart      TriggerEventTypeEnum = "InstanceStart"
	TriggerEventTypeEnumInstanceSuccess    TriggerEventTypeEnum = "InstanceSuccess"
	TriggerEventTypeEnumInstanceFailure    TriggerEventTypeEnum = "InstanceFailure"
	TriggerEventTypeEnumInstanceReady      TriggerEventTypeEnum = "InstanceReady"
)

func (e *TriggerEventTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeploymentStart":
		fallthrough
	case "DeploymentSuccess":
		fallthrough
	case "DeploymentFailure":
		fallthrough
	case "DeploymentStop":
		fallthrough
	case "DeploymentRollback":
		fallthrough
	case "DeploymentReady":
		fallthrough
	case "InstanceStart":
		fallthrough
	case "InstanceSuccess":
		fallthrough
	case "InstanceFailure":
		fallthrough
	case "InstanceReady":
		*e = TriggerEventTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TriggerEventTypeEnum: %s", s)
	}
}
