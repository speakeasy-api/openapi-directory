"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class TaxonomyCategoriesRequest:
    
    accept_language: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept-Language', 'style': 'simple', 'explode': False }})
    r"""Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)"""  
    dest_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'destId', 'style': 'form', 'explode': True }})
    r"""**unique numeric identifier** of the destination to enquire about (optional)
    - `destinationId` is returned by [/taxonomy/destinations](#operation/taxonomyDestinations)
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaxonomyCategories200ApplicationJSONDataSubcategories:
    
    category_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** of *this* product category"""  
    sortorder: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortorder'), 'exclude': lambda f: f is None }})
    r"""**sort order** (suggested) of the subcategory within the category"""  
    subcategory_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subcategoryId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** of *this* product subcategory"""  
    subcategory_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subcategoryName'), 'exclude': lambda f: f is None }})
    r"""**natural-language name** of *this* product subcategory"""  
    sub_category_url_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subCategoryUrlName'), 'exclude': lambda f: f is None }})
    r"""**URL-formatted name** of *this* product subcategory"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaxonomyCategories200ApplicationJSONData:
    
    group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupName'), 'exclude': lambda f: f is None }})
    r"""**natural-language name** of *this* product category"""  
    group_url_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupUrlName'), 'exclude': lambda f: f is None }})
    r"""**URL-formatted name** of *this* product category"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** for the category"""  
    product_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productCount'), 'exclude': lambda f: f is None }})
    r"""**number** of products in this category in the destination specified by `destId`
    - **note**: will be `null` if no `destId` is included in the query
    """  
    subcategories: Optional[list[TaxonomyCategories200ApplicationJSONDataSubcategories]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subcategories'), 'exclude': lambda f: f is None }})
    r"""**array** of subcategory objects"""  
    thumbnail_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnailURL'), 'exclude': lambda f: f is None }})
    r"""**URL** for this category's thumbnail image, selected from the most popular product within the category
    - **note:** will be `null` if no `destId` is included in the query
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaxonomyCategories200ApplicationJSON:
    r"""Success"""
    
    data: Optional[list[TaxonomyCategories200ApplicationJSONData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""**array** of category data objects"""  
    date_stamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateStamp'), 'exclude': lambda f: f is None }})
    r"""**timestamp** of *this* response"""  
    error_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCodes'), 'exclude': lambda f: f is None }})
    r"""**array** of error codes pertaining to *this* error
    - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
    """  
    error_message: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})
    r"""**array** of error message strings"""  
    error_message_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessageText'), 'exclude': lambda f: f is None }})
    r"""**array** of error message strings in plain text"""  
    error_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorName'), 'exclude': lambda f: f is None }})
    r"""**name** of *this* type of error"""  
    error_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorReference'), 'exclude': lambda f: f is None }})
    r"""**reference number** of *this* error"""  
    error_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorType'), 'exclude': lambda f: f is None }})
    r"""**code** specifying the type of error"""  
    extra_info: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraInfo'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    extra_object: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraObject'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})
    r"""**boolean indicator** of *this* request's outcome
    - `true`: the request was successful with no errors
    - `false`: an error was encountered
    """  
    total_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCount'), 'exclude': lambda f: f is None }})
    r"""**number** of results available for *this* service"""  
    vmid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmid'), 'exclude': lambda f: f is None }})
    r"""**unique numeric id** of the server that processed *this* request"""  
    

@dataclasses.dataclass
class TaxonomyCategoriesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    taxonomy_categories_200_application_json_object: Optional[TaxonomyCategories200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    