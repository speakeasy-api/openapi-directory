// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PurchaseReservedNodesOfferingXAmzTargetEnum
type PurchaseReservedNodesOfferingXAmzTargetEnum string

const (
	PurchaseReservedNodesOfferingXAmzTargetEnumAmazonMemoryDbPurchaseReservedNodesOffering PurchaseReservedNodesOfferingXAmzTargetEnum = "AmazonMemoryDB.PurchaseReservedNodesOffering"
)

func (e PurchaseReservedNodesOfferingXAmzTargetEnum) ToPointer() *PurchaseReservedNodesOfferingXAmzTargetEnum {
	return &e
}

func (e *PurchaseReservedNodesOfferingXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonMemoryDB.PurchaseReservedNodesOffering":
		*e = PurchaseReservedNodesOfferingXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PurchaseReservedNodesOfferingXAmzTargetEnum: %v", v)
	}
}

type PurchaseReservedNodesOfferingRequest struct {
	PurchaseReservedNodesOfferingRequest shared.PurchaseReservedNodesOfferingRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                        *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                    *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                       *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                             *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                    *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                        *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                    *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                           PurchaseReservedNodesOfferingXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PurchaseReservedNodesOfferingResponse struct {
	ContentType string
	// InvalidParameterCombinationException
	InvalidParameterCombinationException interface{}
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	// Success
	PurchaseReservedNodesOfferingResponse *shared.PurchaseReservedNodesOfferingResponse
	// ReservedNodeAlreadyExistsFault
	ReservedNodeAlreadyExistsFault interface{}
	// ReservedNodeQuotaExceededFault
	ReservedNodeQuotaExceededFault interface{}
	// ReservedNodesOfferingNotFoundFault
	ReservedNodesOfferingNotFoundFault interface{}
	// ServiceLinkedRoleNotFoundFault
	ServiceLinkedRoleNotFoundFault interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// TagQuotaPerResourceExceeded
	TagQuotaPerResourceExceeded interface{}
}
