// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetVehiclesVehicleidSecurity struct {
	UserAccessToken  *string `security:"scheme,type=oauth2,name=Authorization"`
	UserAccessToken1 *string `security:"scheme,type=oauth2,name=Authorization"`
	UserAccessToken2 *string `security:"scheme,type=oauth2,name=Authorization"`
	UserAccessToken3 *string `security:"scheme,type=oauth2,name=Authorization"`
	UserAccessToken4 *string `security:"scheme,type=oauth2,name=Authorization"`
	UserAccessToken5 *string `security:"scheme,type=oauth2,name=Authorization"`
}

type GetVehiclesVehicleidFieldEnum string

const (
	GetVehiclesVehicleidFieldEnumSmartChargingPolicy GetVehiclesVehicleidFieldEnum = "smartChargingPolicy"
	GetVehiclesVehicleidFieldEnumChargeState         GetVehiclesVehicleidFieldEnum = "chargeState"
	GetVehiclesVehicleidFieldEnumLocation            GetVehiclesVehicleidFieldEnum = "location"
	GetVehiclesVehicleidFieldEnumInformation         GetVehiclesVehicleidFieldEnum = "information"
	GetVehiclesVehicleidFieldEnumOdometer            GetVehiclesVehicleidFieldEnum = "odometer"
)

func (e *GetVehiclesVehicleidFieldEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "smartChargingPolicy":
		fallthrough
	case "chargeState":
		fallthrough
	case "location":
		fallthrough
	case "information":
		fallthrough
	case "odometer":
		*e = GetVehiclesVehicleidFieldEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVehiclesVehicleidFieldEnum: %s", s)
	}
}

type GetVehiclesVehicleidRequest struct {
	// An optional array of Vehicle fields that should be included in the response, for example: `?field[]=information&field[]=location`
	//
	// By default, no fields are included and only the Vehicle ID will be returned. Response time may be impacted by which fields you request.
	Field []GetVehiclesVehicleidFieldEnum `queryParam:"style=form,explode=true,name=field[]"`
	// ID of the Vehicle
	VehicleID string `pathParam:"style=simple,explode=false,name=vehicleId"`
}

// GetVehiclesVehicleid200ApplicationJSON - Successful
type GetVehiclesVehicleid200ApplicationJSON struct {
	ChargeState *shared.Onevehicles1Percent7BvehicleIDPercent7D1chargeStateGetResponses200ContentApplication1jsonSchema `json:"chargeState,omitempty"`
	// Id of the charging location the vehicle is currently positioned at (if any)
	ChargingLocationID string `json:"chargingLocationId"`
	// Vehicle ID
	ID string `json:"id"`
	// Descriptive information about the Vehicle
	Information *shared.Onevehicles1Percent7BvehicleIDPercent7D1informationGetResponses200ContentApplication1jsonSchema `json:"information,omitempty"`
	// Is the vehicle currently reachable?
	IsReachable bool `json:"isReachable"`
	// The last time vehicle was successfully communicated with
	LastSeen types.Date `json:"lastSeen"`
	// Vehicle's GPS coordinates with timestamp
	Location *shared.Onevehicles1Percent7BvehicleIDPercent7D1locationGetResponses200ContentApplication1jsonSchema `json:"location,omitempty"`
	// Vehicle's odometer with timestamp
	Odometer            *shared.Onevehicles1Percent7BvehicleIDPercent7D1odometerGetResponses200ContentApplication1jsonSchema           `json:"odometer,omitempty"`
	SmartChargingPolicy *shared.Onevehicles1Percent7BvehicleIDPercent7D1smartChargingPolicyPutRequestBodyContentApplication1jsonSchema `json:"smartChargingPolicy,omitempty"`
}

type GetVehiclesVehicleidResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful
	GetVehiclesVehicleid200ApplicationJSONObject *GetVehiclesVehicleid200ApplicationJSON
}
