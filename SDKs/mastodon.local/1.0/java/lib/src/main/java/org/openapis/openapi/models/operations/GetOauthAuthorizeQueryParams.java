/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetOauthAuthorizeQueryParams {
    /**
     * Client ID, obtained during app registration.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=client_id")
    public String clientId;
    public GetOauthAuthorizeQueryParams withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * Added in 2.6.0. Forces the user to re-login, which is necessary for authorizing with multiple accounts from the same instance.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=force_login")
    public Boolean forceLogin;
    public GetOauthAuthorizeQueryParams withForceLogin(Boolean forceLogin) {
        this.forceLogin = forceLogin;
        return this;
    }
    
    /**
     * Set a URI to redirect the user to. If this parameter is set to urn:ietf:wg:oauth:2.0:oob then the authorization code will be shown instead. Must match one of the redirect URIs declared during app registration.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=redirect_uri")
    public String redirectUri;
    public GetOauthAuthorizeQueryParams withRedirectUri(String redirectUri) {
        this.redirectUri = redirectUri;
        return this;
    }
    
    /**
     * Should be set equal to code.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=response_type")
    public String responseType;
    public GetOauthAuthorizeQueryParams withResponseType(String responseType) {
        this.responseType = responseType;
        return this;
    }
    
    /**
     * List of requested OAuth scopes, separated by spaces (or by pluses, if using query parameters). Must be a subset of scopes declared during app registration. If not provided, defaults to read.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=scope")
    public String scope;
    public GetOauthAuthorizeQueryParams withScope(String scope) {
        this.scope = scope;
        return this;
    }
    
}
