/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VolumeInput - A storage volume.
 */
public class VolumeInput {
    /**
     * The size, in GiB, that this storage volume has expanded as a result of an auto grow policy. In the absence of auto-grow, the value is 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoGrownSizeGib")
    public String autoGrownSizeGib;
    public VolumeInput withAutoGrownSizeGib(String autoGrownSizeGib) {
        this.autoGrownSizeGib = autoGrownSizeGib;
        return this;
    }
    
    /**
     * The current size of this storage volume, in GiB, including space reserved for snapshots. This size might be different than the requested size if the storage volume has been configured with auto grow or auto shrink.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentSizeGib")
    public String currentSizeGib;
    public VolumeInput withCurrentSizeGib(String currentSizeGib) {
        this.currentSizeGib = currentSizeGib;
        return this;
    }
    
    /**
     * Additional emergency size that was requested for this Volume, in GiB. current_size_gib includes this value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emergencySizeGib")
    public String emergencySizeGib;
    public VolumeInput withEmergencySizeGib(String emergencySizeGib) {
        this.emergencySizeGib = emergencySizeGib;
        return this;
    }
    
    /**
     * An identifier for the `Volume`, generated by the backend.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public VolumeInput withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Labels as key value pairs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public VolumeInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Maximum size volume can be expanded to in case of evergency, in GiB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxSizeGib")
    public String maxSizeGib;
    public VolumeInput withMaxSizeGib(String maxSizeGib) {
        this.maxSizeGib = maxSizeGib;
        return this;
    }
    
    /**
     * Input only. User-specified notes for new Volume. Used to provision Volumes that require manual intervention.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;
    public VolumeInput withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * Originally requested size, in GiB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originallyRequestedSizeGib")
    public String originallyRequestedSizeGib;
    public VolumeInput withOriginallyRequestedSizeGib(String originallyRequestedSizeGib) {
        this.originallyRequestedSizeGib = originallyRequestedSizeGib;
        return this;
    }
    
    /**
     * Immutable. Performance tier of the Volume. Default is SHARED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("performanceTier")
    public VolumePerformanceTierEnum performanceTier;
    public VolumeInput withPerformanceTier(VolumePerformanceTierEnum performanceTier) {
        this.performanceTier = performanceTier;
        return this;
    }
    
    /**
     * Immutable. Pod name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pod")
    public String pod;
    public VolumeInput withPod(String pod) {
        this.pod = pod;
        return this;
    }
    
    /**
     * The space remaining in the storage volume for new LUNs, in GiB, excluding space reserved for snapshots.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remainingSpaceGib")
    public String remainingSpaceGib;
    public VolumeInput withRemainingSpaceGib(String remainingSpaceGib) {
        this.remainingSpaceGib = remainingSpaceGib;
        return this;
    }
    
    /**
     * The requested size of this storage volume, in GiB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedSizeGib")
    public String requestedSizeGib;
    public VolumeInput withRequestedSizeGib(String requestedSizeGib) {
        this.requestedSizeGib = requestedSizeGib;
        return this;
    }
    
    /**
     * The behavior to use when snapshot reserved space is full.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotAutoDeleteBehavior")
    public VolumeSnapshotAutoDeleteBehaviorEnum snapshotAutoDeleteBehavior;
    public VolumeInput withSnapshotAutoDeleteBehavior(VolumeSnapshotAutoDeleteBehaviorEnum snapshotAutoDeleteBehavior) {
        this.snapshotAutoDeleteBehavior = snapshotAutoDeleteBehavior;
        return this;
    }
    
    /**
     * Whether snapshots are enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotEnabled")
    public Boolean snapshotEnabled;
    public VolumeInput withSnapshotEnabled(Boolean snapshotEnabled) {
        this.snapshotEnabled = snapshotEnabled;
        return this;
    }
    
    /**
     * Details about snapshot space reservation and usage on the storage volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotReservationDetail")
    public SnapshotReservationDetail snapshotReservationDetail;
    public VolumeInput withSnapshotReservationDetail(SnapshotReservationDetail snapshotReservationDetail) {
        this.snapshotReservationDetail = snapshotReservationDetail;
        return this;
    }
    
    /**
     * The name of the snapshot schedule policy in use for this volume, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotSchedulePolicy")
    public String snapshotSchedulePolicy;
    public VolumeInput withSnapshotSchedulePolicy(String snapshotSchedulePolicy) {
        this.snapshotSchedulePolicy = snapshotSchedulePolicy;
        return this;
    }
    
    /**
     * The state of this storage volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public VolumeStateEnum state;
    public VolumeInput withState(VolumeStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Input only. Name of the storage aggregate pool to allocate the volume in. Can be used only for VOLUME_PERFORMANCE_TIER_ASSIGNED volumes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageAggregatePool")
    public String storageAggregatePool;
    public VolumeInput withStorageAggregatePool(String storageAggregatePool) {
        this.storageAggregatePool = storageAggregatePool;
        return this;
    }
    
    /**
     * The storage type for this volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageType")
    public VolumeStorageTypeEnum storageType;
    public VolumeInput withStorageType(VolumeStorageTypeEnum storageType) {
        this.storageType = storageType;
        return this;
    }
    
    /**
     * The workload profile for the volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workloadProfile")
    public VolumeWorkloadProfileEnum workloadProfile;
    public VolumeInput withWorkloadProfile(VolumeWorkloadProfileEnum workloadProfile) {
        this.workloadProfile = workloadProfile;
        return this;
    }
    
}
