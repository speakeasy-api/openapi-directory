"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerConfig = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
var ContainerConfig = /** @class */ (function (_super) {
    __extends(ContainerConfig, _super);
    function ContainerConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ArgsEscaped" }),
        __metadata("design:type", Boolean)
    ], ContainerConfig.prototype, "argsEscaped", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "AttachStderr" }),
        __metadata("design:type", String)
    ], ContainerConfig.prototype, "attachStderr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "AttachStdin" }),
        __metadata("design:type", String)
    ], ContainerConfig.prototype, "attachStdin", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "AttachStdout" }),
        __metadata("design:type", String)
    ], ContainerConfig.prototype, "attachStdout", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Cmd" }),
        __metadata("design:type", Array)
    ], ContainerConfig.prototype, "cmd", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Domainname" }),
        __metadata("design:type", String)
    ], ContainerConfig.prototype, "domainname", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Env" }),
        __metadata("design:type", Array)
    ], ContainerConfig.prototype, "env", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ExposedPorts" }),
        __metadata("design:type", Array)
    ], ContainerConfig.prototype, "exposedPorts", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Hostname" }),
        __metadata("design:type", String)
    ], ContainerConfig.prototype, "hostname", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Image" }),
        __metadata("design:type", String)
    ], ContainerConfig.prototype, "image", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ImageArchitecture" }),
        __metadata("design:type", String)
    ], ContainerConfig.prototype, "imageArchitecture", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Labels" }),
        __metadata("design:type", Array)
    ], ContainerConfig.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Memory" }),
        __metadata("design:type", Number)
    ], ContainerConfig.prototype, "memory", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "MemorySwap" }),
        __metadata("design:type", String)
    ], ContainerConfig.prototype, "memorySwap", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "OpenStdin" }),
        __metadata("design:type", String)
    ], ContainerConfig.prototype, "openStdin", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "PortSpecs" }),
        __metadata("design:type", String)
    ], ContainerConfig.prototype, "portSpecs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "StdinOnce" }),
        __metadata("design:type", String)
    ], ContainerConfig.prototype, "stdinOnce", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Tty" }),
        __metadata("design:type", String)
    ], ContainerConfig.prototype, "tty", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "User" }),
        __metadata("design:type", String)
    ], ContainerConfig.prototype, "user", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "VCPU" }),
        __metadata("design:type", Number)
    ], ContainerConfig.prototype, "vcpu", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "VolumesFrom" }),
        __metadata("design:type", String)
    ], ContainerConfig.prototype, "volumesFrom", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "WorkingDir" }),
        __metadata("design:type", String)
    ], ContainerConfig.prototype, "workingDir", void 0);
    return ContainerConfig;
}(utils_1.SpeakeasyBase));
exports.ContainerConfig = ContainerConfig;
