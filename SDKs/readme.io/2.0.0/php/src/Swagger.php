<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Swagger 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * DEPRECATED. Instead, use https://docs.readme.com/developers/reference/api-specification#deleteapispecification to delete a Swagger file in ReadMe
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSwaggerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSwaggerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSwaggerResponse
     */
	public function deleteSwagger(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSwaggerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSwaggerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSwaggerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/swagger/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteSwaggerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSwaggerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * DEPRECATED. Instead, use https://docs.readme.com/developers/reference/api-specification#updateapispecification to update a Swagger file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSwaggerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSwaggerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSwaggerResponse
     */
	public function updateSwagger(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSwaggerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSwaggerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSwaggerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/swagger/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateSwaggerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSwaggerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * DEPRECATED. Instead use https://docs.readme.com/developers/reference/api-specification#uploadapispecification to upload a Swagger file to ReadMe
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadSwaggerRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadSwaggerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UploadSwaggerResponse
     */
	public function uploadSwagger(
        \OpenAPI\OpenAPI\Models\Operations\UploadSwaggerRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\UploadSwaggerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UploadSwaggerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/swagger');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UploadSwaggerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}