// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DataSourceAuthorizationTypeEnum - Indicates the type of authorization.
type DataSourceAuthorizationTypeEnum string

const (
	DataSourceAuthorizationTypeEnumAuthorizationTypeUnspecified DataSourceAuthorizationTypeEnum = "AUTHORIZATION_TYPE_UNSPECIFIED"
	DataSourceAuthorizationTypeEnumAuthorizationCode            DataSourceAuthorizationTypeEnum = "AUTHORIZATION_CODE"
	DataSourceAuthorizationTypeEnumGooglePlusAuthorizationCode  DataSourceAuthorizationTypeEnum = "GOOGLE_PLUS_AUTHORIZATION_CODE"
	DataSourceAuthorizationTypeEnumFirstPartyOauth              DataSourceAuthorizationTypeEnum = "FIRST_PARTY_OAUTH"
)

func (e *DataSourceAuthorizationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AUTHORIZATION_TYPE_UNSPECIFIED":
		fallthrough
	case "AUTHORIZATION_CODE":
		fallthrough
	case "GOOGLE_PLUS_AUTHORIZATION_CODE":
		fallthrough
	case "FIRST_PARTY_OAUTH":
		*e = DataSourceAuthorizationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataSourceAuthorizationTypeEnum: %s", s)
	}
}

// DataSourceDataRefreshTypeEnum - Specifies whether the data source supports automatic data refresh for the past few days, and how it's supported. For some data sources, data might not be complete until a few days later, so it's useful to refresh data automatically.
type DataSourceDataRefreshTypeEnum string

const (
	DataSourceDataRefreshTypeEnumDataRefreshTypeUnspecified DataSourceDataRefreshTypeEnum = "DATA_REFRESH_TYPE_UNSPECIFIED"
	DataSourceDataRefreshTypeEnumSlidingWindow              DataSourceDataRefreshTypeEnum = "SLIDING_WINDOW"
	DataSourceDataRefreshTypeEnumCustomSlidingWindow        DataSourceDataRefreshTypeEnum = "CUSTOM_SLIDING_WINDOW"
)

func (e *DataSourceDataRefreshTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DATA_REFRESH_TYPE_UNSPECIFIED":
		fallthrough
	case "SLIDING_WINDOW":
		fallthrough
	case "CUSTOM_SLIDING_WINDOW":
		*e = DataSourceDataRefreshTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataSourceDataRefreshTypeEnum: %s", s)
	}
}

// DataSourceTransferTypeEnum - Deprecated. This field has no effect.
type DataSourceTransferTypeEnum string

const (
	DataSourceTransferTypeEnumTransferTypeUnspecified DataSourceTransferTypeEnum = "TRANSFER_TYPE_UNSPECIFIED"
	DataSourceTransferTypeEnumBatch                   DataSourceTransferTypeEnum = "BATCH"
	DataSourceTransferTypeEnumStreaming               DataSourceTransferTypeEnum = "STREAMING"
)

func (e *DataSourceTransferTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TRANSFER_TYPE_UNSPECIFIED":
		fallthrough
	case "BATCH":
		fallthrough
	case "STREAMING":
		*e = DataSourceTransferTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataSourceTransferTypeEnum: %s", s)
	}
}

// DataSource - Defines the properties and custom parameters for a data source.
type DataSource struct {
	// Indicates the type of authorization.
	AuthorizationType *DataSourceAuthorizationTypeEnum `json:"authorizationType,omitempty"`
	// Data source client id which should be used to receive refresh token.
	ClientID *string `json:"clientId,omitempty"`
	// Specifies whether the data source supports automatic data refresh for the past few days, and how it's supported. For some data sources, data might not be complete until a few days later, so it's useful to refresh data automatically.
	DataRefreshType *DataSourceDataRefreshTypeEnum `json:"dataRefreshType,omitempty"`
	// Data source id.
	DataSourceID *string `json:"dataSourceId,omitempty"`
	// Default data refresh window on days. Only meaningful when `data_refresh_type` = `SLIDING_WINDOW`.
	DefaultDataRefreshWindowDays *int `json:"defaultDataRefreshWindowDays,omitempty"`
	// Default data transfer schedule. Examples of valid schedules include: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`.
	DefaultSchedule *string `json:"defaultSchedule,omitempty"`
	// User friendly data source description string.
	Description *string `json:"description,omitempty"`
	// User friendly data source name.
	DisplayName *string `json:"displayName,omitempty"`
	// Url for the help document for this data source.
	HelpURL *string `json:"helpUrl,omitempty"`
	// Disables backfilling and manual run scheduling for the data source.
	ManualRunsDisabled *bool `json:"manualRunsDisabled,omitempty"`
	// The minimum interval for scheduler to schedule runs.
	MinimumScheduleInterval *string `json:"minimumScheduleInterval,omitempty"`
	// Output only. Data source resource name.
	Name *string `json:"name,omitempty"`
	// Data source parameters.
	Parameters []DataSourceParameter `json:"parameters,omitempty"`
	// Api auth scopes for which refresh token needs to be obtained. These are scopes needed by a data source to prepare data and ingest them into BigQuery, e.g., https://www.googleapis.com/auth/bigquery
	Scopes []string `json:"scopes,omitempty"`
	// Specifies whether the data source supports a user defined schedule, or operates on the default schedule. When set to `true`, user can override default schedule.
	SupportsCustomSchedule *bool `json:"supportsCustomSchedule,omitempty"`
	// Deprecated. This field has no effect.
	SupportsMultipleTransfers *bool `json:"supportsMultipleTransfers,omitempty"`
	// Deprecated. This field has no effect.
	TransferType *DataSourceTransferTypeEnum `json:"transferType,omitempty"`
	// The number of seconds to wait for an update from the data source before the Data Transfer Service marks the transfer as FAILED.
	UpdateDeadlineSeconds *int `json:"updateDeadlineSeconds,omitempty"`
}
