"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createpullrequestapprovalruleinput as shared_createpullrequestapprovalruleinput
from ..shared import createpullrequestapprovalruleoutput as shared_createpullrequestapprovalruleoutput
from enum import Enum
from typing import Any, Optional

class CreatePullRequestApprovalRuleXAmzTargetEnum(str, Enum):
    CODE_COMMIT_20150413_CREATE_PULL_REQUEST_APPROVAL_RULE = 'CodeCommit_20150413.CreatePullRequestApprovalRule'


@dataclasses.dataclass
class CreatePullRequestApprovalRuleRequest:
    
    create_pull_request_approval_rule_input: shared_createpullrequestapprovalruleinput.CreatePullRequestApprovalRuleInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: CreatePullRequestApprovalRuleXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreatePullRequestApprovalRuleResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    approval_rule_content_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ApprovalRuleContentRequiredException"""  
    approval_rule_name_already_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ApprovalRuleNameAlreadyExistsException"""  
    approval_rule_name_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ApprovalRuleNameRequiredException"""  
    create_pull_request_approval_rule_output: Optional[shared_createpullrequestapprovalruleoutput.CreatePullRequestApprovalRuleOutput] = dataclasses.field(default=None)
    r"""Success"""  
    encryption_integrity_checks_failed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionIntegrityChecksFailedException"""  
    encryption_key_access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyAccessDeniedException"""  
    encryption_key_disabled_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyDisabledException"""  
    encryption_key_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyNotFoundException"""  
    encryption_key_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyUnavailableException"""  
    invalid_approval_rule_content_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidApprovalRuleContentException"""  
    invalid_approval_rule_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidApprovalRuleNameException"""  
    invalid_pull_request_id_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidPullRequestIdException"""  
    number_of_rules_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NumberOfRulesExceededException"""  
    pull_request_already_closed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PullRequestAlreadyClosedException"""  
    pull_request_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PullRequestDoesNotExistException"""  
    pull_request_id_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PullRequestIdRequiredException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    