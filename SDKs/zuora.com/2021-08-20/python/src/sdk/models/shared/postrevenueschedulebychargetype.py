"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import postdistributionitemtype as shared_postdistributionitemtype
from ..shared import postrevenueschedulebychargetyperevenueevent as shared_postrevenueschedulebychargetyperevenueevent
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class POSTRevenueScheduleByChargeTypeOverrideChargeAccountingCodesEnum(str, Enum):
    r"""When overriding accounting codes from a charge, `recognizedRevenueAccountingCode` and `deferredRevenue AccountingCode` must be in the request body and can have the empty value."""
    TRUE = 'true'
    FALSE = 'false'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class POSTRevenueScheduleByChargeType:
    r"""Container for custom fields of a Revenue Schedule object."""
    
    amount: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as `JPY 30` or `USD 30.15`. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned: `Allocation amount with wrong decimal places.`"""  
    revenue_schedule_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueScheduleDate'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The effective date of the revenue schedule. For example, the revenue schedule date for bookings-based revenue recognition is typically set to the order date or contract date.
    
    The date cannot be in a closed accounting period. The date must be in `yyyy-mm-dd` format.
    """  
    deferred_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deferredRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for deferred revenue, such as Monthly Recurring Liability. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored."""  
    deferred_revenue_accounting_code_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deferredRevenueAccountingCodeType'), 'exclude': lambda f: f is None }})
    r"""The type of the deferred revenue accounting code, such as Deferred Revenue. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored."""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Additional information about this record.
    
    Character Limit: 2,000
    """  
    override_charge_accounting_codes: Optional[POSTRevenueScheduleByChargeTypeOverrideChargeAccountingCodesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overrideChargeAccountingCodes'), 'exclude': lambda f: f is None }})
    r"""When overriding accounting codes from a charge, `recognizedRevenueAccountingCode` and `deferredRevenue AccountingCode` must be in the request body and can have the empty value."""  
    recognized_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognizedRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for recognized revenue, such as Monthly Recurring Charges or Overage Charges. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, the value is ignored."""  
    recognized_revenue_accounting_code_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognizedRevenueAccountingCodeType'), 'exclude': lambda f: f is None }})
    r"""The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored."""  
    reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referenceId'), 'exclude': lambda f: f is None }})
    r"""Reference ID is used only in the custom unlimited rule to create a revenue schedule. In this scenario, the revenue schedule is not linked to an invoice item or invoice item adjustment.
    
    Character Limit: 100
    """  
    revenue_distributions: Optional[list[shared_postdistributionitemtype.POSTDistributionItemType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueDistributions'), 'exclude': lambda f: f is None }})
    r"""An array of revenue distributions. Represents how you want to distribute revenue for this revenue schedule. You can distribute revenue into a maximum of 250 accounting periods with one revenue schedule.
    
    The sum of the newAmount fields must be equal to the amount field.
    """  
    revenue_event: Optional[shared_postrevenueschedulebychargetyperevenueevent.POSTRevenueScheduleByChargeTypeRevenueEvent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueEvent'), 'exclude': lambda f: f is None }})
    r"""Represents a change to a revenue schedule, such as posting an invoice or distributing revenue."""  
    