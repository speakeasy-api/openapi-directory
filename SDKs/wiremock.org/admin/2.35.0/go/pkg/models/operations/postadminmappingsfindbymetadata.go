// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type PostAdminMappingsFindByMetadataRequestBodyXPathMatch struct {
	MatchesXpath string                 `json:"matchesXpath"`
	Namespaces   map[string]interface{} `json:"namespaces,omitempty"`
	ValuePattern map[string]interface{} `json:"valuePattern,omitempty"`
}

type PostAdminMappingsFindByMetadataRequestBodyXMLEquality struct {
	EqualToXML string `json:"equalToXml"`
}

type PostAdminMappingsFindByMetadataRequestBodyJSONPathMatch struct {
	IgnoreArrayOrder    *bool  `json:"ignoreArrayOrder,omitempty"`
	IgnoreExtraElements *bool  `json:"ignoreExtraElements,omitempty"`
	MatchesJSONPath     string `json:"matchesJsonPath"`
}

type PostAdminMappingsFindByMetadataRequestBodyJSONEquals struct {
	EqualToJSON string `json:"equalToJson"`
}

type PostAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch struct {
	DoesNotMatch string `json:"doesNotMatch"`
}

type PostAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch struct {
	Matches string `json:"matches"`
}

type PostAdminMappingsFindByMetadataRequestBodyStringContains struct {
	Contains string `json:"contains"`
}

type PostAdminMappingsFindByMetadataRequestBodyStringEquals struct {
	CaseInsensitive *bool `json:"caseInsensitive,omitempty"`
	EqualTo         bool  `json:"equalTo"`
}

type PostAdminMappingsFindByMetadataRequestBodyType string

const (
	PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyStringEquals                   PostAdminMappingsFindByMetadataRequestBodyType = "post_/__admin/mappings/find-by-metadata_requestBody_String equals"
	PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyStringContains                 PostAdminMappingsFindByMetadataRequestBodyType = "post_/__admin/mappings/find-by-metadata_requestBody_String contains"
	PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch         PostAdminMappingsFindByMetadataRequestBodyType = "post_/__admin/mappings/find-by-metadata_requestBody_Regular expression match"
	PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch PostAdminMappingsFindByMetadataRequestBodyType = "post_/__admin/mappings/find-by-metadata_requestBody_Negative regular expression match"
	PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyJSONEquals                     PostAdminMappingsFindByMetadataRequestBodyType = "post_/__admin/mappings/find-by-metadata_requestBody_JSON equals"
	PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyJSONPathMatch                  PostAdminMappingsFindByMetadataRequestBodyType = "post_/__admin/mappings/find-by-metadata_requestBody_JSONPath match"
	PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyXMLEquality                    PostAdminMappingsFindByMetadataRequestBodyType = "post_/__admin/mappings/find-by-metadata_requestBody_XML equality"
	PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyXPathMatch                     PostAdminMappingsFindByMetadataRequestBodyType = "post_/__admin/mappings/find-by-metadata_requestBody_XPath match"
)

type PostAdminMappingsFindByMetadataRequestBody struct {
	PostAdminMappingsFindByMetadataRequestBodyStringEquals                   *PostAdminMappingsFindByMetadataRequestBodyStringEquals
	PostAdminMappingsFindByMetadataRequestBodyStringContains                 *PostAdminMappingsFindByMetadataRequestBodyStringContains
	PostAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch         *PostAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch
	PostAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch *PostAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch
	PostAdminMappingsFindByMetadataRequestBodyJSONEquals                     *PostAdminMappingsFindByMetadataRequestBodyJSONEquals
	PostAdminMappingsFindByMetadataRequestBodyJSONPathMatch                  *PostAdminMappingsFindByMetadataRequestBodyJSONPathMatch
	PostAdminMappingsFindByMetadataRequestBodyXMLEquality                    *PostAdminMappingsFindByMetadataRequestBodyXMLEquality
	PostAdminMappingsFindByMetadataRequestBodyXPathMatch                     *PostAdminMappingsFindByMetadataRequestBodyXPathMatch

	Type PostAdminMappingsFindByMetadataRequestBodyType
}

func CreatePostAdminMappingsFindByMetadataRequestBodyPostAdminMappingsFindByMetadataRequestBodyStringEquals(postAdminMappingsFindByMetadataRequestBodyStringEquals PostAdminMappingsFindByMetadataRequestBodyStringEquals) PostAdminMappingsFindByMetadataRequestBody {
	typ := PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyStringEquals

	return PostAdminMappingsFindByMetadataRequestBody{
		PostAdminMappingsFindByMetadataRequestBodyStringEquals: &postAdminMappingsFindByMetadataRequestBodyStringEquals,
		Type: typ,
	}
}

func CreatePostAdminMappingsFindByMetadataRequestBodyPostAdminMappingsFindByMetadataRequestBodyStringContains(postAdminMappingsFindByMetadataRequestBodyStringContains PostAdminMappingsFindByMetadataRequestBodyStringContains) PostAdminMappingsFindByMetadataRequestBody {
	typ := PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyStringContains

	return PostAdminMappingsFindByMetadataRequestBody{
		PostAdminMappingsFindByMetadataRequestBodyStringContains: &postAdminMappingsFindByMetadataRequestBodyStringContains,
		Type: typ,
	}
}

func CreatePostAdminMappingsFindByMetadataRequestBodyPostAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch(postAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch PostAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch) PostAdminMappingsFindByMetadataRequestBody {
	typ := PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch

	return PostAdminMappingsFindByMetadataRequestBody{
		PostAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch: &postAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch,
		Type: typ,
	}
}

func CreatePostAdminMappingsFindByMetadataRequestBodyPostAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch(postAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch PostAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch) PostAdminMappingsFindByMetadataRequestBody {
	typ := PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch

	return PostAdminMappingsFindByMetadataRequestBody{
		PostAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch: &postAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch,
		Type: typ,
	}
}

func CreatePostAdminMappingsFindByMetadataRequestBodyPostAdminMappingsFindByMetadataRequestBodyJSONEquals(postAdminMappingsFindByMetadataRequestBodyJSONEquals PostAdminMappingsFindByMetadataRequestBodyJSONEquals) PostAdminMappingsFindByMetadataRequestBody {
	typ := PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyJSONEquals

	return PostAdminMappingsFindByMetadataRequestBody{
		PostAdminMappingsFindByMetadataRequestBodyJSONEquals: &postAdminMappingsFindByMetadataRequestBodyJSONEquals,
		Type: typ,
	}
}

func CreatePostAdminMappingsFindByMetadataRequestBodyPostAdminMappingsFindByMetadataRequestBodyJSONPathMatch(postAdminMappingsFindByMetadataRequestBodyJSONPathMatch PostAdminMappingsFindByMetadataRequestBodyJSONPathMatch) PostAdminMappingsFindByMetadataRequestBody {
	typ := PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyJSONPathMatch

	return PostAdminMappingsFindByMetadataRequestBody{
		PostAdminMappingsFindByMetadataRequestBodyJSONPathMatch: &postAdminMappingsFindByMetadataRequestBodyJSONPathMatch,
		Type: typ,
	}
}

func CreatePostAdminMappingsFindByMetadataRequestBodyPostAdminMappingsFindByMetadataRequestBodyXMLEquality(postAdminMappingsFindByMetadataRequestBodyXMLEquality PostAdminMappingsFindByMetadataRequestBodyXMLEquality) PostAdminMappingsFindByMetadataRequestBody {
	typ := PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyXMLEquality

	return PostAdminMappingsFindByMetadataRequestBody{
		PostAdminMappingsFindByMetadataRequestBodyXMLEquality: &postAdminMappingsFindByMetadataRequestBodyXMLEquality,
		Type: typ,
	}
}

func CreatePostAdminMappingsFindByMetadataRequestBodyPostAdminMappingsFindByMetadataRequestBodyXPathMatch(postAdminMappingsFindByMetadataRequestBodyXPathMatch PostAdminMappingsFindByMetadataRequestBodyXPathMatch) PostAdminMappingsFindByMetadataRequestBody {
	typ := PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyXPathMatch

	return PostAdminMappingsFindByMetadataRequestBody{
		PostAdminMappingsFindByMetadataRequestBodyXPathMatch: &postAdminMappingsFindByMetadataRequestBodyXPathMatch,
		Type: typ,
	}
}

func (u *PostAdminMappingsFindByMetadataRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postAdminMappingsFindByMetadataRequestBodyStringEquals := new(PostAdminMappingsFindByMetadataRequestBodyStringEquals)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappingsFindByMetadataRequestBodyStringEquals); err == nil {
		u.PostAdminMappingsFindByMetadataRequestBodyStringEquals = postAdminMappingsFindByMetadataRequestBodyStringEquals
		u.Type = PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyStringEquals
		return nil
	}

	postAdminMappingsFindByMetadataRequestBodyStringContains := new(PostAdminMappingsFindByMetadataRequestBodyStringContains)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappingsFindByMetadataRequestBodyStringContains); err == nil {
		u.PostAdminMappingsFindByMetadataRequestBodyStringContains = postAdminMappingsFindByMetadataRequestBodyStringContains
		u.Type = PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyStringContains
		return nil
	}

	postAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch := new(PostAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch); err == nil {
		u.PostAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch = postAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch
		u.Type = PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch
		return nil
	}

	postAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch := new(PostAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch); err == nil {
		u.PostAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch = postAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch
		u.Type = PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch
		return nil
	}

	postAdminMappingsFindByMetadataRequestBodyJSONEquals := new(PostAdminMappingsFindByMetadataRequestBodyJSONEquals)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappingsFindByMetadataRequestBodyJSONEquals); err == nil {
		u.PostAdminMappingsFindByMetadataRequestBodyJSONEquals = postAdminMappingsFindByMetadataRequestBodyJSONEquals
		u.Type = PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyJSONEquals
		return nil
	}

	postAdminMappingsFindByMetadataRequestBodyJSONPathMatch := new(PostAdminMappingsFindByMetadataRequestBodyJSONPathMatch)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappingsFindByMetadataRequestBodyJSONPathMatch); err == nil {
		u.PostAdminMappingsFindByMetadataRequestBodyJSONPathMatch = postAdminMappingsFindByMetadataRequestBodyJSONPathMatch
		u.Type = PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyJSONPathMatch
		return nil
	}

	postAdminMappingsFindByMetadataRequestBodyXMLEquality := new(PostAdminMappingsFindByMetadataRequestBodyXMLEquality)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappingsFindByMetadataRequestBodyXMLEquality); err == nil {
		u.PostAdminMappingsFindByMetadataRequestBodyXMLEquality = postAdminMappingsFindByMetadataRequestBodyXMLEquality
		u.Type = PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyXMLEquality
		return nil
	}

	postAdminMappingsFindByMetadataRequestBodyXPathMatch := new(PostAdminMappingsFindByMetadataRequestBodyXPathMatch)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappingsFindByMetadataRequestBodyXPathMatch); err == nil {
		u.PostAdminMappingsFindByMetadataRequestBodyXPathMatch = postAdminMappingsFindByMetadataRequestBodyXPathMatch
		u.Type = PostAdminMappingsFindByMetadataRequestBodyTypePostAdminMappingsFindByMetadataRequestBodyXPathMatch
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostAdminMappingsFindByMetadataRequestBody) MarshalJSON() ([]byte, error) {
	if u.PostAdminMappingsFindByMetadataRequestBodyStringEquals != nil {
		return json.Marshal(u.PostAdminMappingsFindByMetadataRequestBodyStringEquals)
	}

	if u.PostAdminMappingsFindByMetadataRequestBodyStringContains != nil {
		return json.Marshal(u.PostAdminMappingsFindByMetadataRequestBodyStringContains)
	}

	if u.PostAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch != nil {
		return json.Marshal(u.PostAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch)
	}

	if u.PostAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch != nil {
		return json.Marshal(u.PostAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch)
	}

	if u.PostAdminMappingsFindByMetadataRequestBodyJSONEquals != nil {
		return json.Marshal(u.PostAdminMappingsFindByMetadataRequestBodyJSONEquals)
	}

	if u.PostAdminMappingsFindByMetadataRequestBodyJSONPathMatch != nil {
		return json.Marshal(u.PostAdminMappingsFindByMetadataRequestBodyJSONPathMatch)
	}

	if u.PostAdminMappingsFindByMetadataRequestBodyXMLEquality != nil {
		return json.Marshal(u.PostAdminMappingsFindByMetadataRequestBodyXMLEquality)
	}

	if u.PostAdminMappingsFindByMetadataRequestBodyXPathMatch != nil {
		return json.Marshal(u.PostAdminMappingsFindByMetadataRequestBodyXPathMatch)
	}

	return nil, nil
}

type PostAdminMappingsFindByMetadataRequest struct {
	Request PostAdminMappingsFindByMetadataRequestBody `request:"mediaType=application/json"`
}

// PostAdminMappingsFindByMetadata200ApplicationJSONMappingsRequestBasicAuthCredentials - Pre-emptive basic auth credentials to match against
type PostAdminMappingsFindByMetadata200ApplicationJSONMappingsRequestBasicAuthCredentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type PostAdminMappingsFindByMetadata200ApplicationJSONMappingsRequest struct {
	// Pre-emptive basic auth credentials to match against
	BasicAuthCredentials *PostAdminMappingsFindByMetadata200ApplicationJSONMappingsRequestBasicAuthCredentials `json:"basicAuthCredentials,omitempty"`
	// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
	BodyPatterns []map[string]interface{} `json:"bodyPatterns,omitempty"`
	// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Cookies map[string]interface{} `json:"cookies,omitempty"`
	// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The HTTP request method e.g. GET
	Method *string `json:"method,omitempty"`
	// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
	QueryParameters map[string]interface{} `json:"queryParameters,omitempty"`
	// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URL *string `json:"url,omitempty"`
	// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPath *string `json:"urlPath,omitempty"`
	// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPathPattern *string `json:"urlPathPattern,omitempty"`
	// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPattern *string `json:"urlPattern,omitempty"`
}

type PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniformTypeEnum string

const (
	PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniformTypeEnumUniform PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniformTypeEnum = "uniform"
)

func (e *PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniformTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uniform":
		*e = PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniformTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniformTypeEnum: %s", s)
	}
}

// PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform - Uniformly distributed random response delay.
type PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform struct {
	Lower *int64                                                                                             `json:"lower,omitempty"`
	Type  *PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniformTypeEnum `json:"type,omitempty"`
	Upper *int64                                                                                             `json:"upper,omitempty"`
}

type PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormalTypeEnum string

const (
	PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormalTypeEnumLognormal PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormalTypeEnum = "lognormal"
)

func (e *PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lognormal":
		*e = PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormalTypeEnum: %s", s)
	}
}

// PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal - Log normal randomly distributed response delay.
type PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal struct {
	Median *int64                                                                                               `json:"median,omitempty"`
	Sigma  *float64                                                                                             `json:"sigma,omitempty"`
	Type   *PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormalTypeEnum `json:"type,omitempty"`
}

type PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionType string

const (
	PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionTypePostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionType = "post_/__admin/mappings/find-by-metadata_200ApplicationJSON_mappings_response_delayDistribution_Log normal"
	PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionTypePostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform   PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionType = "post_/__admin/mappings/find-by-metadata_200ApplicationJSON_mappings_response_delayDistribution_Uniform"
)

type PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistribution struct {
	PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal *PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal
	PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform   *PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform

	Type PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionType
}

func CreatePostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionPostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal(postAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal) PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistribution {
	typ := PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionTypePostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal

	return PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistribution{
		PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal: &postAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal,
		Type: typ,
	}
}

func CreatePostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionPostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform(postAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform) PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistribution {
	typ := PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionTypePostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform

	return PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistribution{
		PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform: &postAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform,
		Type: typ,
	}
}

func (u *PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistribution) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal := new(PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal); err == nil {
		u.PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal = postAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal
		u.Type = PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionTypePostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal
		return nil
	}

	postAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform := new(PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform); err == nil {
		u.PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform = postAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform
		u.Type = PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionTypePostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistribution) MarshalJSON() ([]byte, error) {
	if u.PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal != nil {
		return json.Marshal(u.PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal)
	}

	if u.PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform != nil {
		return json.Marshal(u.PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform)
	}

	return nil, nil
}

// PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseFaultEnum - The fault to apply (instead of a full, valid response).
type PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseFaultEnum string

const (
	PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseFaultEnumConnectionResetByPeer  PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseFaultEnum = "CONNECTION_RESET_BY_PEER"
	PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseFaultEnumEmptyResponse          PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseFaultEnum = "EMPTY_RESPONSE"
	PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseFaultEnumMalformedResponseChunk PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseFaultEnumRandomDataThenClose    PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseFaultEnum: %s", s)
	}
}

type PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponse struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
	DelayDistribution *PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistribution `json:"delayDistribution,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string `json:"proxyBaseUrl,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string `json:"transformers,omitempty"`
}

type PostAdminMappingsFindByMetadata200ApplicationJSONMappings struct {
	// This stub mapping's unique identifier
	ID *string `json:"id,omitempty"`
	// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The stub mapping's name
	Name *string `json:"name,omitempty"`
	// The new state for the scenario to be updated to after this stub is served.
	NewScenarioState *string `json:"newScenarioState,omitempty"`
	// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
	Persistent *bool `json:"persistent,omitempty"`
	// A map of the names of post serve action extensions to trigger and their parameters.
	PostServeActions map[string]interface{} `json:"postServeActions,omitempty"`
	// This stub mapping's priority relative to others. 1 is highest.
	Priority *int64                                                            `json:"priority,omitempty"`
	Request  *PostAdminMappingsFindByMetadata200ApplicationJSONMappingsRequest `json:"request,omitempty"`
	// The required state of the scenario in order for this stub to be matched.
	RequiredScenarioState *string                                                            `json:"requiredScenarioState,omitempty"`
	Response              *PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponse `json:"response,omitempty"`
	// The name of the scenario that this stub mapping is part of
	ScenarioName *string `json:"scenarioName,omitempty"`
	// Alias for the id
	UUID *string `json:"uuid,omitempty"`
}

type PostAdminMappingsFindByMetadata200ApplicationJSONMeta struct {
	Total int64 `json:"total"`
}

// PostAdminMappingsFindByMetadata200ApplicationJSON - Matched stub mappings
type PostAdminMappingsFindByMetadata200ApplicationJSON struct {
	Mappings []PostAdminMappingsFindByMetadata200ApplicationJSONMappings `json:"mappings,omitempty"`
	Meta     *PostAdminMappingsFindByMetadata200ApplicationJSONMeta      `json:"meta,omitempty"`
}

type PostAdminMappingsFindByMetadataResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Matched stub mappings
	PostAdminMappingsFindByMetadata200ApplicationJSONObject *PostAdminMappingsFindByMetadata200ApplicationJSON
}
