"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import templatedefinition as shared_templatedefinition
from ..shared import templatedefinitionnew as shared_templatedefinitionnew
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class UpdateTemplateRequest:
    
    template_definition_new: shared_templatedefinitionnew.TemplateDefinitionNew = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Template configuration as JSON string"""  
    template_id: int = dataclasses.field(metadata={'query_param': { 'field_name': 'templateId', 'style': 'form', 'explode': True }})
    r"""Template unique identifier"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateTemplate500ApplicationJSON:
    r"""Internal Server Error"""
    
    error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""Error description"""  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""HTTP Error code"""  
    
class UpdateTemplate422ApplicationJSONErrorEnum(str, Enum):
    r"""Error description"""
    UNABLE_TO_PARSE_JSON_PLEASE_CHECK_FORMATTING = 'Unable to parse JSON, please check formatting'
    REQUIRED_PARAMETER_MISSING = 'Required parameter missing'
    REQUIRED_PARAMETER_MISSING_TEMPLATE_DEFINITION_NOT_DEFINED = 'Required parameter missing: template definition not defined'
    REQUIRED_PARAMETER_MISSING_TEMPLATE_NOT_DEFINED = 'Required parameter missing: template not defined'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateTemplate422ApplicationJSON:
    r"""Unprocessable Entity"""
    
    error: Optional[UpdateTemplate422ApplicationJSONErrorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""Error description"""  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""HTTP Error code"""  
    
class UpdateTemplate404ApplicationJSONErrorEnum(str, Enum):
    r"""Error description"""
    ENTITY_NOT_FOUND = 'Entity not found'
    RESOURCE_NOT_FOUND = 'Resource not found'
    NONE_OF_THE_TEMPLATES_IS_AVAILABLE_FOR_THE_WORKSPACE_ = 'None of the templates is available for the workspace.'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateTemplate404ApplicationJSON:
    r"""Not Found"""
    
    error: Optional[UpdateTemplate404ApplicationJSONErrorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""Error description"""  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""HTTP Error code"""  
    
class UpdateTemplate403ApplicationJSONErrorEnum(str, Enum):
    r"""Error description"""
    YOUR_ACCOUNT_HAS_EXCEEDED_THE_MONTHLY_DOCUMENT_GENERATION_LIMIT_ = 'Your account has exceeded the monthly document generation limit.'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateTemplate403ApplicationJSON:
    r"""Forbidden"""
    
    error: Optional[UpdateTemplate403ApplicationJSONErrorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""Error description"""  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""HTTP Error code"""  
    
class UpdateTemplate401ApplicationJSONErrorEnum(str, Enum):
    r"""Error description"""
    AUTHENTICATION_FAILED_REQUEST_EXPIRED = 'Authentication failed: request expired'
    AUTHENTICATION_FAILED_SIGNATURE_OR_SECRET_MISSING = 'Authentication failed: signature or secret missing'
    AUTHENTICATION_FAILED_WORKSPACE_MISSING = 'Authentication failed: workspace missing'
    AUTHENTICATION_FAILED_KEY_MISSING = 'Authentication failed: key missing'
    AUTHENTICATION_FAILED_PROPERTY_ISS_ISSUER_MISSING_IN_JWT = 'Authentication failed: property \'iss\' (issuer) missing in JWT'
    AUTHENTICATION_FAILED_PROPERTY_SUB_SUBJECT_MISSING_IN_JWT = 'Authentication failed: property \'sub\' (subject) missing in JWT'
    AUTHENTICATION_FAILED_PROPERTY_EXP_EXPIRATION_TIME_MISSING_IN_JWT = 'Authentication failed: property \'exp\' (expiration time) missing in JWT'
    AUTHENTICATION_FAILED_INVALID_ISS_ISSUER_ = 'Authentication failed: invalid \'iss\' (issuer)'
    AUTHENTICATION_FAILED_INCORRECT_SIGNATURE = 'Authentication failed: incorrect signature'
    AUTHENTICATION_FAILED = 'Authentication failed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateTemplate401ApplicationJSON:
    r"""Unauthorized"""
    
    error: Optional[UpdateTemplate401ApplicationJSONErrorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""Error description"""  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""HTTP Error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateTemplate200ApplicationJSON:
    r"""Template configuration as JSON object"""
    
    response: Optional[shared_templatedefinition.TemplateDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class UpdateTemplateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_template_200_application_json_object: Optional[UpdateTemplate200ApplicationJSON] = dataclasses.field(default=None)
    r"""Template configuration as JSON object"""  
    update_template_401_application_json_object: Optional[UpdateTemplate401ApplicationJSON] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    update_template_403_application_json_object: Optional[UpdateTemplate403ApplicationJSON] = dataclasses.field(default=None)
    r"""Forbidden"""  
    update_template_404_application_json_object: Optional[UpdateTemplate404ApplicationJSON] = dataclasses.field(default=None)
    r"""Not Found"""  
    update_template_422_application_json_object: Optional[UpdateTemplate422ApplicationJSON] = dataclasses.field(default=None)
    r"""Unprocessable Entity"""  
    update_template_500_application_json_object: Optional[UpdateTemplate500ApplicationJSON] = dataclasses.field(default=None)
    r"""Internal Server Error"""  
    