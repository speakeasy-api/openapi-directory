// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UnknownEmailCatchallEnum - Catch-all status is not known
type UnknownEmailCatchallEnum string

const (
	UnknownEmailCatchallEnumNull UnknownEmailCatchallEnum = "null"
)

func (e *UnknownEmailCatchallEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "null":
		*e = UnknownEmailCatchallEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UnknownEmailCatchallEnum: %s", s)
	}
}

// UnknownEmailDeliverableEnum - Deliverability is not known
type UnknownEmailDeliverableEnum string

const (
	UnknownEmailDeliverableEnumNull UnknownEmailDeliverableEnum = "null"
)

func (e *UnknownEmailDeliverableEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "null":
		*e = UnknownEmailDeliverableEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UnknownEmailDeliverableEnum: %s", s)
	}
}

// UnknownEmailDisposableEnum - Disposability is not known
type UnknownEmailDisposableEnum string

const (
	UnknownEmailDisposableEnumNull UnknownEmailDisposableEnum = "null"
)

func (e *UnknownEmailDisposableEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "null":
		*e = UnknownEmailDisposableEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UnknownEmailDisposableEnum: %s", s)
	}
}

// UnknownEmailFreeEnum - Free email provider is not known
type UnknownEmailFreeEnum string

const (
	UnknownEmailFreeEnumNull UnknownEmailFreeEnum = "null"
)

func (e *UnknownEmailFreeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "null":
		*e = UnknownEmailFreeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UnknownEmailFreeEnum: %s", s)
	}
}

type UnknownEmailResultEnum string

const (
	UnknownEmailResultEnumUnknown UnknownEmailResultEnum = "unknown"
)

func (e *UnknownEmailResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "unknown":
		*e = UnknownEmailResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UnknownEmailResultEnum: %s", s)
	}
}

// UnknownEmailRoleEnum - Role is not known
type UnknownEmailRoleEnum string

const (
	UnknownEmailRoleEnumNull UnknownEmailRoleEnum = "null"
)

func (e *UnknownEmailRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "null":
		*e = UnknownEmailRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UnknownEmailRoleEnum: %s", s)
	}
}

type UnknownEmail struct {
	// Catch-all status is not known
	Catchall UnknownEmailCatchallEnum `json:"catchall"`
	// Deliverability is not known
	Deliverable UnknownEmailDeliverableEnum `json:"deliverable"`
	// Disposability is not known
	Disposable UnknownEmailDisposableEnum `json:"disposable"`
	// Free email provider is not known
	Free   UnknownEmailFreeEnum   `json:"free"`
	Result UnknownEmailResultEnum `json:"result"`
	// Role is not known
	Role UnknownEmailRoleEnum `json:"role"`
}
