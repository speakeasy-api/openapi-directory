/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export enum MigrationsStartForOrgRequestBodyExcludeEnum {
  Repositories = "repositories",
}

export class MigrationsStartForOrgRequestBody extends SpeakeasyBase {
  /**
   * Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exclude" })
  exclude?: MigrationsStartForOrgRequestBodyExcludeEnum[];

  /**
   * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exclude_attachments" })
  excludeAttachments?: boolean;

  /**
   * Indicates whether the repository git data should be excluded from the migration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exclude_git_data" })
  excludeGitData?: boolean;

  /**
   * Indicates whether metadata should be excluded and only git source should be included for the migration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exclude_metadata" })
  excludeMetadata?: boolean;

  /**
   * Indicates whether projects owned by the organization or users should be excluded. from the migration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exclude_owner_projects" })
  excludeOwnerProjects?: boolean;

  /**
   * Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exclude_releases" })
  excludeReleases?: boolean;

  /**
   * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lock_repositories" })
  lockRepositories?: boolean;

  /**
   * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "org_metadata_only" })
  orgMetadataOnly?: boolean;

  /**
   * A list of arrays indicating which repositories should be migrated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repositories" })
  repositories: string[];
}

export class MigrationsStartForOrgRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: MigrationsStartForOrgRequestBody;

  /**
   * The organization name. The name is not case sensitive.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=org" })
  org: string;
}

export class MigrationsStartForOrgResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Resource not found
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  migration?: shared.Migration;

  /**
   * Validation failed, or the endpoint has been spammed.
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
