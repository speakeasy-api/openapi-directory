/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class QueryMatch {
    /**
     * The unique ID of a vector
     */
    @JsonProperty("id")
    public String id;

    public QueryMatch withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, Object> metadata;

    public QueryMatch withMetadata(java.util.Map<String, Object> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("score")
    public Float score;

    public QueryMatch withScore(Float score) {
        this.score = score;
        return this;
    }
    
    /**
     * Vector sparse data. Represented as a list of indices and a list of corresponded values, which must be the same length.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sparseValues")
    public SparseVectorData sparseValues;

    public QueryMatch withSparseValues(SparseVectorData sparseValues) {
        this.sparseValues = sparseValues;
        return this;
    }
    
    /**
     * Vector dense data. This should be the same length as the dimension of the index being queried.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("values")
    public Float[] values;

    public QueryMatch withValues(Float[] values) {
        this.values = values;
        return this;
    }
    
    public QueryMatch(@JsonProperty("id") String id) {
        this.id = id;
  }
}
