"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class District:
    r"""Calls that return district, or district-related information."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_district_events(self, request: operations.GetDistrictEventsRequest, security: operations.GetDistrictEventsSecurity) -> operations.GetDistrictEventsResponse:
        r"""Gets a list of events in the given district."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDistrictEventsRequest, base_url, '/district/{district_key}/events', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistrictEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Event]])
                res.events = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_district_events_keys(self, request: operations.GetDistrictEventsKeysRequest, security: operations.GetDistrictEventsKeysSecurity) -> operations.GetDistrictEventsKeysResponse:
        r"""Gets a list of event keys for events in the given district."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDistrictEventsKeysRequest, base_url, '/district/{district_key}/events/keys', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistrictEventsKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_district_events_keys_200_application_json_strings = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_district_events_simple(self, request: operations.GetDistrictEventsSimpleRequest, security: operations.GetDistrictEventsSimpleSecurity) -> operations.GetDistrictEventsSimpleResponse:
        r"""Gets a short-form list of events in the given district."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDistrictEventsSimpleRequest, base_url, '/district/{district_key}/events/simple', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistrictEventsSimpleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.EventSimple]])
                res.event_simples = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_district_rankings(self, request: operations.GetDistrictRankingsRequest, security: operations.GetDistrictRankingsSecurity) -> operations.GetDistrictRankingsResponse:
        r"""Gets a list of team district rankings for the given district."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDistrictRankingsRequest, base_url, '/district/{district_key}/rankings', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistrictRankingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DistrictRanking]])
                res.district_rankings = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_district_teams(self, request: operations.GetDistrictTeamsRequest, security: operations.GetDistrictTeamsSecurity) -> operations.GetDistrictTeamsResponse:
        r"""Gets a list of `Team` objects that competed in events in the given district."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDistrictTeamsRequest, base_url, '/district/{district_key}/teams', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistrictTeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Team]])
                res.teams = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_district_teams_keys(self, request: operations.GetDistrictTeamsKeysRequest, security: operations.GetDistrictTeamsKeysSecurity) -> operations.GetDistrictTeamsKeysResponse:
        r"""Gets a list of `Team` objects that competed in events in the given district."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDistrictTeamsKeysRequest, base_url, '/district/{district_key}/teams/keys', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistrictTeamsKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_district_teams_keys_200_application_json_strings = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_district_teams_simple(self, request: operations.GetDistrictTeamsSimpleRequest, security: operations.GetDistrictTeamsSimpleSecurity) -> operations.GetDistrictTeamsSimpleResponse:
        r"""Gets a short-form list of `Team` objects that competed in events in the given district."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDistrictTeamsSimpleRequest, base_url, '/district/{district_key}/teams/simple', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistrictTeamsSimpleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamSimple]])
                res.team_simples = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_districts_by_year(self, request: operations.GetDistrictsByYearRequest, security: operations.GetDistrictsByYearSecurity) -> operations.GetDistrictsByYearResponse:
        r"""Gets a list of districts and their corresponding district key, for the given year."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDistrictsByYearRequest, base_url, '/districts/{year}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistrictsByYearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DistrictList]])
                res.district_lists = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_event_district_points(self, request: operations.GetEventDistrictPointsRequest, security: operations.GetEventDistrictPointsSecurity) -> operations.GetEventDistrictPointsResponse:
        r"""Gets a list of team rankings for the Event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEventDistrictPointsRequest, base_url, '/event/{event_key}/district_points', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEventDistrictPointsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventDistrictPoints])
                res.event_district_points = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_districts(self, request: operations.GetTeamDistrictsRequest, security: operations.GetTeamDistrictsSecurity) -> operations.GetTeamDistrictsResponse:
        r"""Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamDistrictsRequest, base_url, '/team/{team_key}/districts', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamDistrictsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DistrictList]])
                res.district_lists = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    