// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type PepRetrieveSecurity struct {
	UserKey shared.SchemeUserKey `security:"scheme,type=apiKey,subtype=header"`
}

type PepRetrievePathParams struct {
	// The id of the ordered Pep Sanction Check (id as returned by orderPepSanction call)
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

// PepRetrieveAcceptEnum - The type (pdf or json) in which the check should be returned
type PepRetrieveAcceptEnum string

const (
	PepRetrieveAcceptEnumApplicationJSON PepRetrieveAcceptEnum = "application/json"
	PepRetrieveAcceptEnumApplicationPdf  PepRetrieveAcceptEnum = "application/pdf"
)

func (e *PepRetrieveAcceptEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "application/json":
		fallthrough
	case "application/pdf":
		*e = PepRetrieveAcceptEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PepRetrieveAcceptEnum: %s", s)
	}
}

type PepRetrieveHeaders struct {
	// The type (pdf or json) in which the check should be returned
	Accept *PepRetrieveAcceptEnum `header:"style=simple,explode=false,name=accept"`
}

type PepRetrieveRequest struct {
	PathParams PepRetrievePathParams
	Headers    PepRetrieveHeaders
	Security   PepRetrieveSecurity
}

// PepRetrieveDefaultApplicationJSON - Detailed information about the error
type PepRetrieveDefaultApplicationJSON struct {
	Code    int     `json:"code"`
	Fault   *string `json:"fault,omitempty"`
	Message string  `json:"message"`
	Tag     string  `json:"tag"`
}

type PepRetrieve200ApplicationJSONResults struct {
	Excerpts     *string `json:"Excerpts,omitempty"`
	ResultsURL   *string `json:"ResultsURL,omitempty"`
	SearchType   *string `json:"SearchType,omitempty"`
	SourceAgency *string `json:"SourceAgency,omitempty"`
	SourceEntity *string `json:"SourceEntity,omitempty"`
	SourceID     *int64  `json:"SourceID,omitempty"`
	SourceName   *string `json:"SourceName,omitempty"`
	SourceType   *string `json:"SourceType,omitempty"`
}

// PepRetrieve200ApplicationJSON - Result of a PEP and sanctions list check
type PepRetrieve200ApplicationJSON struct {
	ListsChecked string                                `json:"listsChecked"`
	Results      *PepRetrieve200ApplicationJSONResults `json:"results,omitempty"`
	Search       string                                `json:"search"`
	Status       string                                `json:"status"`
	Timestamp    types.Date                            `json:"timestamp"`
	Type         string                                `json:"type"`
}

type PepRetrieveResponse struct {
	ContentType string
	// Result of a PEP and sanctions list check
	PepRetrieve200ApplicationJSONObject *PepRetrieve200ApplicationJSON
	// Detailed information about the error
	PepRetrieveDefaultApplicationJSONObject *PepRetrieveDefaultApplicationJSON
	StatusCode                              int
	RawResponse                             *http.Response
}
