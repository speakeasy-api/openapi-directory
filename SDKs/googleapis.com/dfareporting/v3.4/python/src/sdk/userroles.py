"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class UserRoles:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dfareporting_user_roles_delete(self, request: operations.DfareportingUserRolesDeleteRequest, security: operations.DfareportingUserRolesDeleteSecurity) -> operations.DfareportingUserRolesDeleteResponse:
        r"""Deletes an existing user role."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingUserRolesDeleteRequest, base_url, '/userprofiles/{profileId}/userRoles/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingUserRolesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingUserRolesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dfareporting_user_roles_get(self, request: operations.DfareportingUserRolesGetRequest, security: operations.DfareportingUserRolesGetSecurity) -> operations.DfareportingUserRolesGetResponse:
        r"""Gets one user role by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingUserRolesGetRequest, base_url, '/userprofiles/{profileId}/userRoles/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingUserRolesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingUserRolesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRole])
                res.user_role = out

        return res

    def dfareporting_user_roles_insert(self, request: operations.DfareportingUserRolesInsertRequest, security: operations.DfareportingUserRolesInsertSecurity) -> operations.DfareportingUserRolesInsertResponse:
        r"""Inserts a new user role."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingUserRolesInsertRequest, base_url, '/userprofiles/{profileId}/userRoles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_role", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingUserRolesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingUserRolesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRole])
                res.user_role = out

        return res

    def dfareporting_user_roles_list(self, request: operations.DfareportingUserRolesListRequest, security: operations.DfareportingUserRolesListSecurity) -> operations.DfareportingUserRolesListResponse:
        r"""Retrieves a list of user roles, possibly filtered. This method supports paging."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingUserRolesListRequest, base_url, '/userprofiles/{profileId}/userRoles', request)
        
        query_params = utils.get_query_params(operations.DfareportingUserRolesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingUserRolesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRolesListResponse])
                res.user_roles_list_response = out

        return res

    def dfareporting_user_roles_patch(self, request: operations.DfareportingUserRolesPatchRequest, security: operations.DfareportingUserRolesPatchSecurity) -> operations.DfareportingUserRolesPatchResponse:
        r"""Updates an existing user role. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingUserRolesPatchRequest, base_url, '/userprofiles/{profileId}/userRoles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_role", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingUserRolesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingUserRolesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRole])
                res.user_role = out

        return res

    def dfareporting_user_roles_update(self, request: operations.DfareportingUserRolesUpdateRequest, security: operations.DfareportingUserRolesUpdateSecurity) -> operations.DfareportingUserRolesUpdateResponse:
        r"""Updates an existing user role."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingUserRolesUpdateRequest, base_url, '/userprofiles/{profileId}/userRoles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_role", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingUserRolesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingUserRolesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRole])
                res.user_role = out

        return res

    