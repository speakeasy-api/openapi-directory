"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsredshiftclusterclusternode as shared_awsredshiftclusterclusternode
from ..shared import awsredshiftclusterclusterparametergroup as shared_awsredshiftclusterclusterparametergroup
from ..shared import awsredshiftclusterclustersecuritygroup as shared_awsredshiftclusterclustersecuritygroup
from ..shared import awsredshiftclusterclustersnapshotcopystatus as shared_awsredshiftclusterclustersnapshotcopystatus
from ..shared import awsredshiftclusterdeferredmaintenancewindow as shared_awsredshiftclusterdeferredmaintenancewindow
from ..shared import awsredshiftclusterelasticipstatus as shared_awsredshiftclusterelasticipstatus
from ..shared import awsredshiftclusterendpoint as shared_awsredshiftclusterendpoint
from ..shared import awsredshiftclusterhsmstatus as shared_awsredshiftclusterhsmstatus
from ..shared import awsredshiftclusteriamrole as shared_awsredshiftclusteriamrole
from ..shared import awsredshiftclusterloggingstatus as shared_awsredshiftclusterloggingstatus
from ..shared import awsredshiftclusterpendingmodifiedvalues as shared_awsredshiftclusterpendingmodifiedvalues
from ..shared import awsredshiftclusterresizeinfo as shared_awsredshiftclusterresizeinfo
from ..shared import awsredshiftclusterrestorestatus as shared_awsredshiftclusterrestorestatus
from ..shared import awsredshiftclustervpcsecuritygroup as shared_awsredshiftclustervpcsecuritygroup
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsRedshiftClusterDetails:
    r"""Details about an Amazon Redshift cluster."""
    
    allow_version_upgrade: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllowVersionUpgrade'), 'exclude': lambda f: f is None }})  
    automated_snapshot_retention_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutomatedSnapshotRetentionPeriod'), 'exclude': lambda f: f is None }})  
    availability_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailabilityZone'), 'exclude': lambda f: f is None }})  
    cluster_availability_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterAvailabilityStatus'), 'exclude': lambda f: f is None }})  
    cluster_create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterCreateTime'), 'exclude': lambda f: f is None }})  
    cluster_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterIdentifier'), 'exclude': lambda f: f is None }})  
    cluster_nodes: Optional[list[shared_awsredshiftclusterclusternode.AwsRedshiftClusterClusterNode]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterNodes'), 'exclude': lambda f: f is None }})  
    cluster_parameter_groups: Optional[list[shared_awsredshiftclusterclusterparametergroup.AwsRedshiftClusterClusterParameterGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterParameterGroups'), 'exclude': lambda f: f is None }})  
    cluster_public_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterPublicKey'), 'exclude': lambda f: f is None }})  
    cluster_revision_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterRevisionNumber'), 'exclude': lambda f: f is None }})  
    cluster_security_groups: Optional[list[shared_awsredshiftclusterclustersecuritygroup.AwsRedshiftClusterClusterSecurityGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterSecurityGroups'), 'exclude': lambda f: f is None }})  
    cluster_snapshot_copy_status: Optional[shared_awsredshiftclusterclustersnapshotcopystatus.AwsRedshiftClusterClusterSnapshotCopyStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterSnapshotCopyStatus'), 'exclude': lambda f: f is None }})  
    cluster_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterStatus'), 'exclude': lambda f: f is None }})  
    cluster_subnet_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterSubnetGroupName'), 'exclude': lambda f: f is None }})  
    cluster_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterVersion'), 'exclude': lambda f: f is None }})  
    db_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DBName'), 'exclude': lambda f: f is None }})  
    deferred_maintenance_windows: Optional[list[shared_awsredshiftclusterdeferredmaintenancewindow.AwsRedshiftClusterDeferredMaintenanceWindow]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeferredMaintenanceWindows'), 'exclude': lambda f: f is None }})  
    elastic_ip_status: Optional[shared_awsredshiftclusterelasticipstatus.AwsRedshiftClusterElasticIPStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ElasticIpStatus'), 'exclude': lambda f: f is None }})  
    elastic_resize_number_of_node_options: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ElasticResizeNumberOfNodeOptions'), 'exclude': lambda f: f is None }})  
    encrypted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Encrypted'), 'exclude': lambda f: f is None }})  
    endpoint: Optional[shared_awsredshiftclusterendpoint.AwsRedshiftClusterEndpoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Endpoint'), 'exclude': lambda f: f is None }})  
    enhanced_vpc_routing: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnhancedVpcRouting'), 'exclude': lambda f: f is None }})  
    expected_next_snapshot_schedule_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpectedNextSnapshotScheduleTime'), 'exclude': lambda f: f is None }})  
    expected_next_snapshot_schedule_time_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpectedNextSnapshotScheduleTimeStatus'), 'exclude': lambda f: f is None }})  
    hsm_status: Optional[shared_awsredshiftclusterhsmstatus.AwsRedshiftClusterHsmStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HsmStatus'), 'exclude': lambda f: f is None }})  
    iam_roles: Optional[list[shared_awsredshiftclusteriamrole.AwsRedshiftClusterIamRole]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IamRoles'), 'exclude': lambda f: f is None }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})  
    logging_status: Optional[shared_awsredshiftclusterloggingstatus.AwsRedshiftClusterLoggingStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LoggingStatus'), 'exclude': lambda f: f is None }})  
    maintenance_track_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaintenanceTrackName'), 'exclude': lambda f: f is None }})  
    manual_snapshot_retention_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ManualSnapshotRetentionPeriod'), 'exclude': lambda f: f is None }})  
    master_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MasterUsername'), 'exclude': lambda f: f is None }})  
    next_maintenance_window_start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextMaintenanceWindowStartTime'), 'exclude': lambda f: f is None }})  
    node_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NodeType'), 'exclude': lambda f: f is None }})  
    number_of_nodes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfNodes'), 'exclude': lambda f: f is None }})  
    pending_actions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PendingActions'), 'exclude': lambda f: f is None }})  
    pending_modified_values: Optional[shared_awsredshiftclusterpendingmodifiedvalues.AwsRedshiftClusterPendingModifiedValues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PendingModifiedValues'), 'exclude': lambda f: f is None }})  
    preferred_maintenance_window: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreferredMaintenanceWindow'), 'exclude': lambda f: f is None }})  
    publicly_accessible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PubliclyAccessible'), 'exclude': lambda f: f is None }})  
    resize_info: Optional[shared_awsredshiftclusterresizeinfo.AwsRedshiftClusterResizeInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResizeInfo'), 'exclude': lambda f: f is None }})  
    restore_status: Optional[shared_awsredshiftclusterrestorestatus.AwsRedshiftClusterRestoreStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RestoreStatus'), 'exclude': lambda f: f is None }})  
    snapshot_schedule_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SnapshotScheduleIdentifier'), 'exclude': lambda f: f is None }})  
    snapshot_schedule_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SnapshotScheduleState'), 'exclude': lambda f: f is None }})  
    vpc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcId'), 'exclude': lambda f: f is None }})  
    vpc_security_groups: Optional[list[shared_awsredshiftclustervpcsecuritygroup.AwsRedshiftClusterVpcSecurityGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcSecurityGroups'), 'exclude': lambda f: f is None }})  
    