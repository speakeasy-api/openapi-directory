/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class ListHotelsQueryParams {
    /**
     * Allows for filtering based on the country of a property. The only available modifier for this parameter is equal to (`eq`). Usage example: `?country[eq]=GBR`
     */
    @SpeakeasyMetadata("queryParam:style=deepObject,explode=true,name=country")
    public java.util.Map<String, Object> country;
    public ListHotelsQueryParams withCountry(java.util.Map<String, Object> country) {
        this.country = country;
        return this;
    }
    
    /**
     * Allows for filtering based on the date and time when this hotel was first added to the Impala platform, in ISO 8601 format (e.g. `2020-11-04T17:37:37Z`) and UTC timezone. Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?created[lte]=2020-11-04T19:37:37Z&amp;created[gte]=2020-11-04T15:56:37.000Z`
     */
    @SpeakeasyMetadata("queryParam:style=deepObject,explode=true,name=created")
    public java.util.Map<String, Object> created;
    public ListHotelsQueryParams withCreated(java.util.Map<String, Object> created) {
        this.created = created;
        return this;
    }
    
    /**
     * The departure day of the desired stay range in ISO 8601 format (`YYYY-MM-DD`).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=end")
    public String end;
    public ListHotelsQueryParams withEnd(String end) {
        this.end = end;
        return this;
    }
    
    /**
     * A comma-separated list of hotel ids you wish to filter by (e.g. `60a06628-2c71-44bf-9685-efbd2df4179e,60a06628-2c71-44bf-9685-efbd2df4179e`).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=hotelIds")
    public String[] hotelIds;
    public ListHotelsQueryParams withHotelIds(String[] hotelIds) {
        this.hotelIds = hotelIds;
        return this;
    }
    
    /**
     * The WGS 84 latitude of the location to search around (e.g. `58.386186`).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=latitude")
    public Double latitude;
    public ListHotelsQueryParams withLatitude(Double latitude) {
        this.latitude = latitude;
        return this;
    }
    
    /**
     * The WGS 84 longitude of the location to search around (e.g. `-9.952549`).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=longitude")
    public Double longitude;
    public ListHotelsQueryParams withLongitude(Double longitude) {
        this.longitude = longitude;
        return this;
    }
    
    /**
     * Allows for filtering based on the property name. Available modifiers include equal to (`eq`) or case insensitive search (`like`). Usage example: `?name[like]=palace`
     */
    @SpeakeasyMetadata("queryParam:style=deepObject,explode=true,name=name")
    public java.util.Map<String, Object> name;
    public ListHotelsQueryParams withName(java.util.Map<String, Object> name) {
        this.name = name;
        return this;
    }
    
    /**
     * Offset from the first hotel in the result (for pagination).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    public Double offset;
    public ListHotelsQueryParams withOffset(Double offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * The distance (in meters) to search around the specified location (e.g. `10000` for 10 km).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=radius")
    public Integer radius;
    public ListHotelsQueryParams withRadius(Integer radius) {
        this.radius = radius;
        return this;
    }
    
    /**
     * Number of hotels returned on a given page (pagination).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=size")
    public Double size;
    public ListHotelsQueryParams withSize(Double size) {
        this.size = size;
        return this;
    }
    
    /**
     * Order in which the results should be sorted. Currently allows you to sort by `name` (alphabetical), star `rating`, and `distance_m` in meters from the specified latitude/longitude. Allows for a comma-separated list of of arguments with modifiers for `:asc` (ascending) and `:desc` (descending) ordering.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sortBy")
    public String sortBy;
    public ListHotelsQueryParams withSortBy(String sortBy) {
        this.sortBy = sortBy;
        return this;
    }
    
    /**
     * Allows for filtering based on the starRating of a property. Available modifiers include less than (`lt`), greater than (`gt`), less than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?starRating[gt]=3&amp;starRating[lt]=5`
     */
    @SpeakeasyMetadata("queryParam:style=deepObject,explode=true,name=starRating")
    public java.util.Map<String, Object> starRating;
    public ListHotelsQueryParams withStarRating(java.util.Map<String, Object> starRating) {
        this.starRating = starRating;
        return this;
    }
    
    /**
     * The arrival day of the desired stay range in ISO 8601 format (`YYYY-MM-DD`).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=start")
    public String start;
    public ListHotelsQueryParams withStart(String start) {
        this.start = start;
        return this;
    }
    
    /**
     * Allows for filtering based on the date and time the content of this hotel was last updated, in ISO 8601 format (e.g. `2020-11-04T17:37:37Z`) and UTC timezone. Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?updated[lte]=2020-11-04T19:37:37Z&amp;updated[gte]=2020-11-04T15:56:37.000Z`
     */
    @SpeakeasyMetadata("queryParam:style=deepObject,explode=true,name=updated")
    public java.util.Map<String, Object> updated;
    public ListHotelsQueryParams withUpdated(java.util.Map<String, Object> updated) {
        this.updated = updated;
        return this;
    }
    
}
