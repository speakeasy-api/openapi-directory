/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CrmlogErrorCode } from "./crmlogerrorcode";
import { EnterpriseCrmEventbusProtoErrorDetail } from "./enterprisecrmeventbusprotoerrordetail";
import { EnterpriseCrmEventbusProtoExecutionTraceInfo } from "./enterprisecrmeventbusprotoexecutiontraceinfo";
import { EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails } from "./enterprisecrmfrontendseventbusprotoeventexecutiondetails";
import { EnterpriseCrmFrontendsEventbusProtoEventParameters } from "./enterprisecrmfrontendseventbusprotoeventparameters";
import { Expose, Type } from "class-transformer";

/**
 * The ways user posts this event.
 */
export enum EnterpriseCrmFrontendsEventbusProtoEventExecutionInfoPostMethodEnum {
  Unspecified = "UNSPECIFIED",
  Post = "POST",
  PostToQueue = "POST_TO_QUEUE",
  Schedule = "SCHEDULE",
  PostByEventConfigId = "POST_BY_EVENT_CONFIG_ID",
  PostWithEventDetails = "POST_WITH_EVENT_DETAILS",
}

/**
 * Which Google product the execution_info belongs to. If not set, the execution_info belongs to Integration Platform by default.
 */
export enum EnterpriseCrmFrontendsEventbusProtoEventExecutionInfoProductEnum {
  UnspecifiedProduct = "UNSPECIFIED_PRODUCT",
  Ip = "IP",
  Apigee = "APIGEE",
  Security = "SECURITY",
}

/**
 * Contains all the execution details for a workflow instance. Next available id: 24
 */
export class EnterpriseCrmFrontendsEventbusProtoEventExecutionInfo extends SpeakeasyBase {
  /**
   * The event data user sends as request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientId" })
  clientId?: string;

  /**
   * Auto-generated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * Registered ids for errors, as "oneof" enums. Each task or logical grouping of tasks may share the same enum.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorCode" })
  @Type(() => CrmlogErrorCode)
  errorCode?: CrmlogErrorCode;

  /**
   * Errors, warnings, and informationals associated with the workflow/task. The order in which the errors were added by the workflow/task is maintained.
   */
  @SpeakeasyMetadata({ elemType: EnterpriseCrmEventbusProtoErrorDetail })
  @Expose({ name: "errors" })
  @Type(() => EnterpriseCrmEventbusProtoErrorDetail)
  errors?: EnterpriseCrmEventbusProtoErrorDetail[];

  /**
   * Contains the details of the execution info of this event: this includes the tasks execution details plus the event execution statistics. Next available id: 10
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventExecutionDetails" })
  @Type(() => EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails)
  eventExecutionDetails?: EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails;

  /**
   * Auto-generated primary key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventExecutionInfoId" })
  eventExecutionInfoId?: string;

  /**
   * Message that helps aggregate all sub-executions triggered by one execution and keeps track of child-parent relationships.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "executionTraceInfo" })
  @Type(() => EnterpriseCrmEventbusProtoExecutionTraceInfo)
  executionTraceInfo?: EnterpriseCrmEventbusProtoExecutionTraceInfo;

  /**
   * Auto-generated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastModifiedTime" })
  lastModifiedTime?: string;

  /**
   * The ways user posts this event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postMethod" })
  postMethod?: EnterpriseCrmFrontendsEventbusProtoEventExecutionInfoPostMethodEnum;

  /**
   * Which Google product the execution_info belongs to. If not set, the execution_info belongs to Integration Platform by default.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "product" })
  product?: EnterpriseCrmFrontendsEventbusProtoEventExecutionInfoProductEnum;

  /**
   * Optional. This is used to de-dup incoming request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId?: string;

  /**
   * LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestParams" })
  @Type(() => EnterpriseCrmFrontendsEventbusProtoEventParameters)
  requestParams?: EnterpriseCrmFrontendsEventbusProtoEventParameters;

  /**
   * LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see
   */
  @SpeakeasyMetadata()
  @Expose({ name: "responseParams" })
  @Type(() => EnterpriseCrmFrontendsEventbusProtoEventParameters)
  responseParams?: EnterpriseCrmFrontendsEventbusProtoEventParameters;

  /**
   * Workflow snapshot number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "snapshotNumber" })
  snapshotNumber?: string;

  /**
   * Tenant this event is created. Used to reschedule the event to correct tenant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tenant" })
  tenant?: string;

  /**
   * The trigger id of the workflow trigger config. If both trigger_id and client_id is present, the workflow is executed from the start tasks provided by the matching trigger config otherwise it is executed from the default start tasks.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "triggerId" })
  triggerId?: string;

  /**
   * Required. Pointer to the workflow it is executing.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workflowId" })
  workflowId?: string;

  /**
   * Name of the workflow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workflowName" })
  workflowName?: string;

  /**
   * Time interval in seconds to schedule retry of workflow in manifold when workflow is already running
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workflowRetryBackoffIntervalSeconds" })
  workflowRetryBackoffIntervalSeconds?: string;
}
