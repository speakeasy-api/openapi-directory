/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EventType } from "./eventtype";
import { Expose, Type } from "class-transformer";

/**
 * OK
 */
export class EventTrigger extends SpeakeasyBase {
  /**
   * The status of the trigger.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active?: boolean;

  /**
   * The base object that the trigger rule is defined upon. Should be specified in the pattern: ^[A-Z][\\w\\-]*$
   */
  @SpeakeasyMetadata()
  @Expose({ name: "baseObject" })
  baseObject?: string;

  /**
   * The JEXL expression to be evaluated against object changes. See above for more information and an example.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "condition" })
  condition?: string;

  /**
   * The description of the trigger.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "eventType" })
  @Type(() => EventType)
  eventType?: EventType;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}
