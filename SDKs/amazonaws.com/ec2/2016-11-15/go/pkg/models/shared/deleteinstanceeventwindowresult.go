// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DeleteInstanceEventWindowResultInstanceEventWindowStateStateEnum - The current state of the event window.
type DeleteInstanceEventWindowResultInstanceEventWindowStateStateEnum string

const (
	DeleteInstanceEventWindowResultInstanceEventWindowStateStateEnumCreating DeleteInstanceEventWindowResultInstanceEventWindowStateStateEnum = "creating"
	DeleteInstanceEventWindowResultInstanceEventWindowStateStateEnumDeleting DeleteInstanceEventWindowResultInstanceEventWindowStateStateEnum = "deleting"
	DeleteInstanceEventWindowResultInstanceEventWindowStateStateEnumActive   DeleteInstanceEventWindowResultInstanceEventWindowStateStateEnum = "active"
	DeleteInstanceEventWindowResultInstanceEventWindowStateStateEnumDeleted  DeleteInstanceEventWindowResultInstanceEventWindowStateStateEnum = "deleted"
)

func (e DeleteInstanceEventWindowResultInstanceEventWindowStateStateEnum) ToPointer() *DeleteInstanceEventWindowResultInstanceEventWindowStateStateEnum {
	return &e
}

func (e *DeleteInstanceEventWindowResultInstanceEventWindowStateStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "creating":
		fallthrough
	case "deleting":
		fallthrough
	case "active":
		fallthrough
	case "deleted":
		*e = DeleteInstanceEventWindowResultInstanceEventWindowStateStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteInstanceEventWindowResultInstanceEventWindowStateStateEnum: %v", v)
	}
}

// DeleteInstanceEventWindowResultInstanceEventWindowState - The state of the event window.
type DeleteInstanceEventWindowResultInstanceEventWindowState struct {
	InstanceEventWindowID *string
	State                 *DeleteInstanceEventWindowResultInstanceEventWindowStateStateEnum
}

// DeleteInstanceEventWindowResult - Success
type DeleteInstanceEventWindowResult struct {
	InstanceEventWindowState *DeleteInstanceEventWindowResultInstanceEventWindowState
}
