/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The tabular conditions.
 */
export class GetPropertyValueRequestBodyTabularConditions extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.OrderBy })
  @Expose({ name: "orderBy" })
  @Type(() => shared.OrderBy)
  orderBy?: shared.OrderBy[];

  @SpeakeasyMetadata({ elemType: shared.PropertyFilter })
  @Expose({ name: "propertyFilters" })
  @Type(() => shared.PropertyFilter)
  propertyFilters?: shared.PropertyFilter[];
}

export class GetPropertyValueRequestBody extends SpeakeasyBase {
  /**
   * The name of the component whose property values the operation returns.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "componentName" })
  componentName?: string;

  /**
   * The ID of the component type whose property values the operation returns.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "componentTypeId" })
  componentTypeId?: string;

  /**
   * The ID of the entity whose property values the operation returns.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entityId" })
  entityId?: string;

  /**
   * <p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   * The string that specifies the next page of results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;

  /**
   * The property group name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "propertyGroupName" })
  propertyGroupName?: string;

  /**
   * The properties whose values the operation returns.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectedProperties" })
  selectedProperties: string[];

  /**
   * The tabular conditions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tabularConditions" })
  @Type(() => GetPropertyValueRequestBodyTabularConditions)
  tabularConditions?: GetPropertyValueRequestBodyTabularConditions;
}

export class GetPropertyValueRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: GetPropertyValueRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;

  /**
   * The ID of the workspace whose values the operation returns.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=workspaceId",
  })
  workspaceId: string;
}

export class GetPropertyValueResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConnectorFailureException
   */
  @SpeakeasyMetadata()
  connectorFailureException?: any;

  /**
   * ConnectorTimeoutException
   */
  @SpeakeasyMetadata()
  connectorTimeoutException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  getPropertyValueResponse?: shared.GetPropertyValueResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
