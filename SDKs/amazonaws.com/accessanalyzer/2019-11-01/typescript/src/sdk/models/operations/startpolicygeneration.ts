/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Contains information about CloudTrail access.
 */
export class StartPolicyGenerationRequestBodyCloudTrailDetails extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "accessRole" })
  accessRole?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  @SpeakeasyMetadata({ elemType: shared.Trail })
  @Expose({ name: "trails" })
  @Type(() => shared.Trail)
  trails?: shared.Trail[];
}

/**
 * Contains the ARN details about the IAM entity for which the policy is generated.
 */
export class StartPolicyGenerationRequestBodyPolicyGenerationDetails extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "principalArn" })
  principalArn?: string;
}

export class StartPolicyGenerationRequestBody extends SpeakeasyBase {
  /**
   * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p> <p>If you do not specify a client token, one is automatically generated by the Amazon Web Services SDK.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken?: string;

  /**
   * Contains information about CloudTrail access.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cloudTrailDetails" })
  @Type(() => StartPolicyGenerationRequestBodyCloudTrailDetails)
  cloudTrailDetails?: StartPolicyGenerationRequestBodyCloudTrailDetails;

  /**
   * Contains the ARN details about the IAM entity for which the policy is generated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policyGenerationDetails" })
  @Type(() => StartPolicyGenerationRequestBodyPolicyGenerationDetails)
  policyGenerationDetails: StartPolicyGenerationRequestBodyPolicyGenerationDetails;
}

export class StartPolicyGenerationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: StartPolicyGenerationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class StartPolicyGenerationResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  startPolicyGenerationResponse?: shared.StartPolicyGenerationResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
