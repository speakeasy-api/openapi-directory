/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Lists all contacts for the resource that are subscribed to the specified notification categories, including contacts inherited from any parent resources.
   */
  essentialcontactsProjectsContactsCompute(
    req: operations.EssentialcontactsProjectsContactsComputeRequest,
    security: operations.EssentialcontactsProjectsContactsComputeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EssentialcontactsProjectsContactsComputeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EssentialcontactsProjectsContactsComputeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/contacts:compute",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.EssentialcontactsProjectsContactsComputeSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EssentialcontactsProjectsContactsComputeResponse =
        new operations.EssentialcontactsProjectsContactsComputeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudEssentialcontactsV1ComputeContactsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudEssentialcontactsV1ComputeContactsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Adds a new contact for a resource.
   */
  essentialcontactsProjectsContactsCreate(
    req: operations.EssentialcontactsProjectsContactsCreateRequest,
    security: operations.EssentialcontactsProjectsContactsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EssentialcontactsProjectsContactsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EssentialcontactsProjectsContactsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/contacts",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudEssentialcontactsV1ContactInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EssentialcontactsProjectsContactsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EssentialcontactsProjectsContactsCreateResponse =
        new operations.EssentialcontactsProjectsContactsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudEssentialcontactsV1Contact = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudEssentialcontactsV1Contact
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a contact.
   */
  essentialcontactsProjectsContactsDelete(
    req: operations.EssentialcontactsProjectsContactsDeleteRequest,
    security: operations.EssentialcontactsProjectsContactsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EssentialcontactsProjectsContactsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EssentialcontactsProjectsContactsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EssentialcontactsProjectsContactsDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EssentialcontactsProjectsContactsDeleteResponse =
        new operations.EssentialcontactsProjectsContactsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleProtobufEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a single contact.
   */
  essentialcontactsProjectsContactsGet(
    req: operations.EssentialcontactsProjectsContactsGetRequest,
    security: operations.EssentialcontactsProjectsContactsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EssentialcontactsProjectsContactsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EssentialcontactsProjectsContactsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EssentialcontactsProjectsContactsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EssentialcontactsProjectsContactsGetResponse =
        new operations.EssentialcontactsProjectsContactsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudEssentialcontactsV1Contact = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudEssentialcontactsV1Contact
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the contacts that have been set on a resource.
   */
  essentialcontactsProjectsContactsList(
    req: operations.EssentialcontactsProjectsContactsListRequest,
    security: operations.EssentialcontactsProjectsContactsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EssentialcontactsProjectsContactsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EssentialcontactsProjectsContactsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/contacts",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EssentialcontactsProjectsContactsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EssentialcontactsProjectsContactsListResponse =
        new operations.EssentialcontactsProjectsContactsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudEssentialcontactsV1ListContactsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudEssentialcontactsV1ListContactsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a contact. Note: A contact's email address cannot be changed.
   */
  essentialcontactsProjectsContactsPatch(
    req: operations.EssentialcontactsProjectsContactsPatchRequest,
    security: operations.EssentialcontactsProjectsContactsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EssentialcontactsProjectsContactsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EssentialcontactsProjectsContactsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudEssentialcontactsV1ContactInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EssentialcontactsProjectsContactsPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EssentialcontactsProjectsContactsPatchResponse =
        new operations.EssentialcontactsProjectsContactsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudEssentialcontactsV1Contact = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudEssentialcontactsV1Contact
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Allows a contact admin to send a test message to contact to verify that it has been configured correctly.
   */
  essentialcontactsProjectsContactsSendTestMessage(
    req: operations.EssentialcontactsProjectsContactsSendTestMessageRequest,
    security: operations.EssentialcontactsProjectsContactsSendTestMessageSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EssentialcontactsProjectsContactsSendTestMessageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EssentialcontactsProjectsContactsSendTestMessageRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{resource}/contacts:sendTestMessage",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudEssentialcontactsV1SendTestMessageRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.EssentialcontactsProjectsContactsSendTestMessageSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EssentialcontactsProjectsContactsSendTestMessageResponse =
        new operations.EssentialcontactsProjectsContactsSendTestMessageResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleProtobufEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }
}
