/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PaymentLineLink {
    /**
     * Amount by which the balance of the linked entity is altered, in the currency of the linked entity.  
     * A negative link amount _reduces_ the outstanding amount on the accounts receivable account.  
     * A positive link amount _increases_ the outstanding amount on the accounts receivable account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    public Double amount;

    public PaymentLineLink withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     * 
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
     * 
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
     * 
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     * 
     * ## Examples with base currency of GBP
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | \u00a315.62                     |
     * | **EUR**          | \u20ac20            | 0.885         | \u00a317.70                     |
     * | **RUB**          | \u20bd20            | 0.011         | \u00a30.22                      |
     * 
     * ## Examples with base currency of USD
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | \u00a320            | 1.277         | $25.54                     |
     * | **EUR**          | \u20ac20            | 1.134         | $22.68                     |
     * | **RUB**          | \u20bd20            | 0.015         | $0.30                      |
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyRate")
    public Double currencyRate;

    public PaymentLineLink withCurrencyRate(Double currencyRate) {
        this.currencyRate = currencyRate;
        return this;
    }
    
    /**
     * Unique identifier of the transaction represented by the link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public PaymentLineLink withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Types of payment line links, either:  
     * `Unknown`  
     * `Unlinked` - Not used  
     * `Invoice` - ID refers to the invoice  
     * `CreditNote` - ID refers to the credit note  
     * `Refund` - ID refers to the sibling payment  
     * `Payment` - ID refers to the sibling payment  
     * `PaymentOnAccount` - ID refers to the customer  
     * `Other` - ID refers to the customer  
     * `Manual Journal`  
     * `Discount` - ID refers to the payment
     */
    @JsonProperty("type")
    public PaymentLinkTypeEnum type;

    public PaymentLineLink withType(PaymentLinkTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public PaymentLineLink(@JsonProperty("type") PaymentLinkTypeEnum type) {
        this.type = type;
  }
}
