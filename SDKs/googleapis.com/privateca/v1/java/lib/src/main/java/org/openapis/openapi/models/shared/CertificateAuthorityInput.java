/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CertificateAuthorityInput - A CertificateAuthority represents an individual Certificate Authority. A CertificateAuthority can be used to create Certificates.
 */
public class CertificateAuthorityInput {
    /**
     * URLs where a CertificateAuthority will publish content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessUrls")
    public AccessUrls accessUrls;
    public CertificateAuthorityInput withAccessUrls(AccessUrls accessUrls) {
        this.accessUrls = accessUrls;
        return this;
    }
    
    /**
     * A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("config")
    public CertificateConfig config;
    public CertificateAuthorityInput withConfig(CertificateConfig config) {
        this.config = config;
        return this;
    }
    
    /**
     * Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gcsBucket")
    public String gcsBucket;
    public CertificateAuthorityInput withGcsBucket(String gcsBucket) {
        this.gcsBucket = gcsBucket;
        return this;
    }
    
    /**
     * A Cloud KMS key configuration that a CertificateAuthority will use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keySpec")
    public KeyVersionSpec keySpec;
    public CertificateAuthorityInput withKeySpec(KeyVersionSpec keySpec) {
        this.keySpec = keySpec;
        return this;
    }
    
    /**
     * Optional. Labels with user-defined metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public CertificateAuthorityInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Required. Immutable. The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lifetime")
    public String lifetime;
    public CertificateAuthorityInput withLifetime(String lifetime) {
        this.lifetime = lifetime;
        return this;
    }
    
    /**
     * Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subordinateConfig")
    public SubordinateConfig subordinateConfig;
    public CertificateAuthorityInput withSubordinateConfig(SubordinateConfig subordinateConfig) {
        this.subordinateConfig = subordinateConfig;
        return this;
    }
    
    /**
     * Required. Immutable. The Type of this CertificateAuthority.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public CertificateAuthorityTypeEnum type;
    public CertificateAuthorityInput withType(CertificateAuthorityTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
