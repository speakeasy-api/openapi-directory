/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum DeleteResourceXAmzTargetEnum {
  CloudApiServiceDeleteResource = "CloudApiService.DeleteResource",
}

export class DeleteResourceRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  deleteResourceInput: shared.DeleteResourceInput;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: DeleteResourceXAmzTargetEnum;
}

export class DeleteResourceResponse extends SpeakeasyBase {
  /**
   * AlreadyExistsException
   */
  @SpeakeasyMetadata()
  alreadyExistsException?: any;

  /**
   * ClientTokenConflictException
   */
  @SpeakeasyMetadata()
  clientTokenConflictException?: any;

  /**
   * ConcurrentOperationException
   */
  @SpeakeasyMetadata()
  concurrentOperationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  deleteResourceOutput?: shared.DeleteResourceOutput;

  /**
   * GeneralServiceException
   */
  @SpeakeasyMetadata()
  generalServiceException?: any;

  /**
   * HandlerFailureException
   */
  @SpeakeasyMetadata()
  handlerFailureException?: any;

  /**
   * HandlerInternalFailureException
   */
  @SpeakeasyMetadata()
  handlerInternalFailureException?: any;

  /**
   * InvalidCredentialsException
   */
  @SpeakeasyMetadata()
  invalidCredentialsException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * NetworkFailureException
   */
  @SpeakeasyMetadata()
  networkFailureException?: any;

  /**
   * NotStabilizedException
   */
  @SpeakeasyMetadata()
  notStabilizedException?: any;

  /**
   * NotUpdatableException
   */
  @SpeakeasyMetadata()
  notUpdatableException?: any;

  /**
   * PrivateTypeException
   */
  @SpeakeasyMetadata()
  privateTypeException?: any;

  /**
   * ResourceConflictException
   */
  @SpeakeasyMetadata()
  resourceConflictException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceInternalErrorException
   */
  @SpeakeasyMetadata()
  serviceInternalErrorException?: any;

  /**
   * ServiceLimitExceededException
   */
  @SpeakeasyMetadata()
  serviceLimitExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * TypeNotFoundException
   */
  @SpeakeasyMetadata()
  typeNotFoundException?: any;

  /**
   * UnsupportedActionException
   */
  @SpeakeasyMetadata()
  unsupportedActionException?: any;
}
