"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import androidpushnotificationtemplate as shared_androidpushnotificationtemplate
from ..shared import apnspushnotificationtemplate as shared_apnspushnotificationtemplate
from ..shared import createpushtemplateresponse as shared_createpushtemplateresponse
from ..shared import defaultpushnotificationtemplate as shared_defaultpushnotificationtemplate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreatePushTemplateRequestBodyPushNotificationTemplateRequest:
    r"""Specifies the content and settings for a message template that can be used in messages that are sent through a push notification channel."""
    
    adm: Optional[shared_androidpushnotificationtemplate.AndroidPushNotificationTemplate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ADM'), 'exclude': lambda f: f is None }})  
    apns: Optional[shared_apnspushnotificationtemplate.APNSPushNotificationTemplate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('APNS'), 'exclude': lambda f: f is None }})  
    baidu: Optional[shared_androidpushnotificationtemplate.AndroidPushNotificationTemplate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Baidu'), 'exclude': lambda f: f is None }})  
    default: Optional[shared_defaultpushnotificationtemplate.DefaultPushNotificationTemplate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Default'), 'exclude': lambda f: f is None }})  
    default_substitutions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultSubstitutions'), 'exclude': lambda f: f is None }})  
    gcm: Optional[shared_androidpushnotificationtemplate.AndroidPushNotificationTemplate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GCM'), 'exclude': lambda f: f is None }})  
    recommender_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecommenderId'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    template_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TemplateDescription'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreatePushTemplateRequestBody:
    
    push_notification_template_request: CreatePushTemplateRequestBodyPushNotificationTemplateRequest = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PushNotificationTemplateRequest') }})
    r"""Specifies the content and settings for a message template that can be used in messages that are sent through a push notification channel."""  
    

@dataclasses.dataclass
class CreatePushTemplateRequest:
    
    request_body: CreatePushTemplateRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    template_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'template-name', 'style': 'simple', 'explode': False }})
    r"""The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreatePushTemplateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    create_push_template_response: Optional[shared_createpushtemplateresponse.CreatePushTemplateResponse] = dataclasses.field(default=None)
    r"""Success"""  
    forbidden_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ForbiddenException"""  
    internal_server_error_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerErrorException"""  
    method_not_allowed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MethodNotAllowedException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    