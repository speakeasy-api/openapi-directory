/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Review {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete Multiple Reviews
   *
   * @remarks
   * Deletes multiple reviews at once.
   */
  deleteMultipleReviews(
    req: operations.DeleteMultipleReviewsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteMultipleReviewsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteMultipleReviewsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reviews";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteMultipleReviewsResponse =
        new operations.DeleteMultipleReviewsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteMultipleReviews200ApplicationJSONBoolean = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete Review
   *
   * @remarks
   * Deletes an existing review.
   */
  deleteReview(
    req: operations.DeleteReviewRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteReviewResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteReviewRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/review/{reviewId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteReviewResponse =
        new operations.DeleteReviewResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteReview200ApplicationJSONBoolean = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a Review
   *
   * @remarks
   * Updates the information of a review.
   */
  editReview(
    req: operations.EditReviewRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EditReviewResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EditReviewRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/review/{reviewId}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EditReviewResponse =
        new operations.EditReviewResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.editReview200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.EditReview200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Review by Review ID
   *
   * @remarks
   * Retrieves information of a product review by its ID.
   */
  getReviewbyReviewId(
    req: operations.GetReviewbyReviewIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetReviewbyReviewIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetReviewbyReviewIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/review/{reviewId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetReviewbyReviewIdResponse =
        new operations.GetReviewbyReviewIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getReviewbyReviewId200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetReviewbyReviewId200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of Reviews
   *
   * @remarks
   * Retrieves a list of reviews.
   */
  getalistofReviews(
    req: operations.GetalistofReviewsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetalistofReviewsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetalistofReviewsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reviews";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetalistofReviewsResponse =
        new operations.GetalistofReviewsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getalistofReviews200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetalistofReviews200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create Multiple Reviews
   *
   * @remarks
   * Creates multiple reviews.
   */
  saveMultipleReviews(
    req: operations.SaveMultipleReviewsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SaveMultipleReviewsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SaveMultipleReviewsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reviews";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SaveMultipleReviewsResponse =
        new operations.SaveMultipleReviewsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.saveMultipleReviews200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a Review
   *
   * @remarks
   * Creates a single review
   */
  saveReview(
    req: operations.SaveReviewRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SaveReviewResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SaveReviewRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/review";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "saveReviewRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SaveReviewResponse =
        new operations.SaveReviewResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.saveReview200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SaveReview200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
