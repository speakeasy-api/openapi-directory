/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DestinationConfiguration } from "./destinationconfiguration";
import { RecordingConfigurationStateEnum } from "./recordingconfigurationstateenum";
import { ThumbnailConfiguration } from "./thumbnailconfiguration";
import { Expose, Type } from "class-transformer";

/**
 * An object representing a configuration to record a channel stream.
 */
export class RecordingConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn: string;

  @SpeakeasyMetadata()
  @Expose({ name: "destinationConfiguration" })
  @Type(() => DestinationConfiguration)
  destinationConfiguration: DestinationConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "recordingReconnectWindowSeconds" })
  recordingReconnectWindowSeconds?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: RecordingConfigurationStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "thumbnailConfiguration" })
  @Type(() => ThumbnailConfiguration)
  thumbnailConfiguration?: ThumbnailConfiguration;
}
