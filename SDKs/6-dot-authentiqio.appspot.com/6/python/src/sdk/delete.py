"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Delete:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def key_revoke(self, request: operations.KeyRevokeRequest) -> operations.KeyRevokeResponse:
        r"""Revoke an Identity (Key) with a revocation secret"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.KeyRevokeRequest, base_url, '/key/{PK}', request)
        
        query_params = utils.get_query_params(operations.KeyRevokeRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeyRevokeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.KeyRevoke200ApplicationJSON])
                res.key_revoke_200_application_json_object = out
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def key_revoke_nosecret(self, request: operations.KeyRevokeNosecretRequest) -> operations.KeyRevokeNosecretResponse:
        r"""Revoke an Authentiq ID using email & phone.
        
        If called with `email` and `phone` only, a verification code 
        will be sent by email. Do a second call adding `code` to 
        complete the revocation.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/key'
        
        query_params = utils.get_query_params(operations.KeyRevokeNosecretRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeyRevokeNosecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.KeyRevokeNosecret200ApplicationJSON])
                res.key_revoke_nosecret_200_application_json_object = out
        elif http_res.status_code in [401, 404, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def sign_delete(self, request: operations.SignDeleteRequest) -> operations.SignDeleteResponse:
        r"""delete a verification job"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SignDeleteRequest, base_url, '/scope/{job}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SignDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SignDelete200ApplicationJSON])
                res.sign_delete_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    