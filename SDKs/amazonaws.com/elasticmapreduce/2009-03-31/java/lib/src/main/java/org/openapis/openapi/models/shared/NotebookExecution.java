/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * NotebookExecution - A notebook execution. An execution is a specific instance that an EMR Notebook is run using the &lt;code&gt;StartNotebookExecution&lt;/code&gt; action.
 */
public class NotebookExecution {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Arn")
    public String arn;
    public NotebookExecution withArn(String arn) {
        this.arn = arn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EditorId")
    public String editorId;
    public NotebookExecution withEditorId(String editorId) {
        this.editorId = editorId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("EndTime")
    public OffsetDateTime endTime;
    public NotebookExecution withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExecutionEngine")
    public ExecutionEngineConfig executionEngine;
    public NotebookExecution withExecutionEngine(ExecutionEngineConfig executionEngine) {
        this.executionEngine = executionEngine;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LastStateChangeReason")
    public String lastStateChangeReason;
    public NotebookExecution withLastStateChangeReason(String lastStateChangeReason) {
        this.lastStateChangeReason = lastStateChangeReason;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NotebookExecutionId")
    public String notebookExecutionId;
    public NotebookExecution withNotebookExecutionId(String notebookExecutionId) {
        this.notebookExecutionId = notebookExecutionId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NotebookExecutionName")
    public String notebookExecutionName;
    public NotebookExecution withNotebookExecutionName(String notebookExecutionName) {
        this.notebookExecutionName = notebookExecutionName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NotebookInstanceSecurityGroupId")
    public String notebookInstanceSecurityGroupId;
    public NotebookExecution withNotebookInstanceSecurityGroupId(String notebookInstanceSecurityGroupId) {
        this.notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NotebookParams")
    public String notebookParams;
    public NotebookExecution withNotebookParams(String notebookParams) {
        this.notebookParams = notebookParams;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OutputNotebookURI")
    public String outputNotebookURI;
    public NotebookExecution withOutputNotebookURI(String outputNotebookURI) {
        this.outputNotebookURI = outputNotebookURI;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("StartTime")
    public OffsetDateTime startTime;
    public NotebookExecution withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public NotebookExecutionStatusEnum status;
    public NotebookExecution withStatus(NotebookExecutionStatusEnum status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Tags")
    public Tag[] tags;
    public NotebookExecution withTags(Tag[] tags) {
        this.tags = tags;
        return this;
    }
    
}
