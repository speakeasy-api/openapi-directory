<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class WebResource 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Relinquish ownership of a website or domain.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceDeleteResponse
     */
	public function siteVerificationWebResourceDelete(
        \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webResource/{id}', \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the most current data for a website or domain.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetResponse
     */
	public function siteVerificationWebResourceGet(
        \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webResource/{id}', \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->siteVerificationWebResourceResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SiteVerificationWebResourceResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a verification token for placing on a website or domain.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetTokenResponse
     */
	public function siteVerificationWebResourceGetToken(
        \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/token');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "siteVerificationWebResourceGettokenRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetTokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceGetTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->siteVerificationWebResourceGettokenResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SiteVerificationWebResourceGettokenResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Attempt verification of a website or domain.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceInsertResponse
     */
	public function siteVerificationWebResourceInsert(
        \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webResource');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "siteVerificationWebResourceResource", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->siteVerificationWebResourceResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SiteVerificationWebResourceResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the list of your verified websites and domains.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceListResponse
     */
	public function siteVerificationWebResourceList(
        \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webResource');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->siteVerificationWebResourceListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SiteVerificationWebResourceListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify the list of owners for your website or domain. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourcePatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourcePatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourcePatchResponse
     */
	public function siteVerificationWebResourcePatch(
        \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourcePatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourcePatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourcePatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webResource/{id}', \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourcePatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "siteVerificationWebResourceResource", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourcePatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourcePatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->siteVerificationWebResourceResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SiteVerificationWebResourceResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify the list of owners for your website or domain.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceUpdateResponse
     */
	public function siteVerificationWebResourceUpdate(
        \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webResource/{id}', \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "siteVerificationWebResourceResource", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SiteVerificationWebResourceUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->siteVerificationWebResourceResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SiteVerificationWebResourceResource', 'json');
            }
        }

        return $response;
    }
}