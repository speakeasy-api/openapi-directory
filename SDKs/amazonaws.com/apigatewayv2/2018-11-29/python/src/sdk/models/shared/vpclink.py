"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class VpcLinkVpcLinkStatusEnum(str, Enum):
    r"""The status of the VPC link."""
    PENDING = 'PENDING'
    AVAILABLE = 'AVAILABLE'
    DELETING = 'DELETING'
    FAILED = 'FAILED'
    INACTIVE = 'INACTIVE'

class VpcLinkVpcLinkVersionEnum(str, Enum):
    r"""The version of the VPC link."""
    V2 = 'V2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VpcLink:
    r"""Represents a VPC link."""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    security_group_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityGroupIds') }})  
    subnet_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubnetIds') }})  
    vpc_link_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcLinkId') }})  
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    vpc_link_status: Optional[VpcLinkVpcLinkStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcLinkStatus'), 'exclude': lambda f: f is None }})  
    vpc_link_status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcLinkStatusMessage'), 'exclude': lambda f: f is None }})  
    vpc_link_version: Optional[VpcLinkVpcLinkVersionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcLinkVersion'), 'exclude': lambda f: f is None }})  
    