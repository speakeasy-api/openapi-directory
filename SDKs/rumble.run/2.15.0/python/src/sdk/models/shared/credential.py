"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CredentialTypeEnum(str, Enum):
    r"""The service the credentials are for."""
    MIRADORE_API_KEY_V1 = 'miradore_api_key_v1'
    AWS_ACCESS_SECRET = 'aws_access_secret'
    CROWDSTRIKE_API_KEY = 'crowdstrike_api_key'
    AZURE_CLIENT_SECRET = 'azure_client_secret'
    AZURE_USERNAME_PASSWORD = 'azure_username_password'
    CENSYS_SEARCH_API_KEY = 'censys_search_api_key'
    SNMPV2_COMMUNITY = 'snmpv2_community'
    SNMPV3_CREDENTIAL = 'snmpv3_credential'
    VMWARE_USERNAME_PASSWORD = 'vmware_username_password'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Credential:
    r"""credential details"""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    acl: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acl'), 'exclude': lambda f: f is None }})  
    cidrs: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cidrs'), 'exclude': lambda f: f is None }})  
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_id'), 'exclude': lambda f: f is None }})  
    created_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})  
    created_by_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_by_email'), 'exclude': lambda f: f is None }})  
    created_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_by_id'), 'exclude': lambda f: f is None }})  
    global_: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('global'), 'exclude': lambda f: f is None }})  
    last_used_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_used_at'), 'exclude': lambda f: f is None }})  
    last_used_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_used_by_id'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    type: Optional[CredentialTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The service the credentials are for."""  
    