// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReposAddStatusCheckContextsPathParams struct {
	// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.5/graphql).
	Branch string `pathParam:"style=simple,explode=false,name=branch"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

// ReposAddStatusCheckContextsRequestBody1 - The name of the status checks
type ReposAddStatusCheckContextsRequestBody1 struct {
	// The name of the status checks
	Contexts []string `json:"contexts"`
}

type ReposAddStatusCheckContextsRequestBodyType string

const (
	ReposAddStatusCheckContextsRequestBodyTypeReposAddStatusCheckContextsRequestBody1 ReposAddStatusCheckContextsRequestBodyType = "repos/add-status-check-contexts_requestBody_1"
	ReposAddStatusCheckContextsRequestBodyTypeArrayOfstr                              ReposAddStatusCheckContextsRequestBodyType = "arrayOfstr"
)

type ReposAddStatusCheckContextsRequestBody struct {
	ReposAddStatusCheckContextsRequestBody1 *ReposAddStatusCheckContextsRequestBody1
	ArrayOfstr                              []string

	Type ReposAddStatusCheckContextsRequestBodyType
}

func CreateReposAddStatusCheckContextsRequestBodyReposAddStatusCheckContextsRequestBody1(reposAddStatusCheckContextsRequestBody1 ReposAddStatusCheckContextsRequestBody1) ReposAddStatusCheckContextsRequestBody {
	typ := ReposAddStatusCheckContextsRequestBodyTypeReposAddStatusCheckContextsRequestBody1

	return ReposAddStatusCheckContextsRequestBody{
		ReposAddStatusCheckContextsRequestBody1: &reposAddStatusCheckContextsRequestBody1,
		Type:                                    typ,
	}
}

func CreateReposAddStatusCheckContextsRequestBodyArrayOfstr(arrayOfstr []string) ReposAddStatusCheckContextsRequestBody {
	typ := ReposAddStatusCheckContextsRequestBodyTypeArrayOfstr

	return ReposAddStatusCheckContextsRequestBody{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *ReposAddStatusCheckContextsRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	reposAddStatusCheckContextsRequestBody1 := new(ReposAddStatusCheckContextsRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&reposAddStatusCheckContextsRequestBody1); err == nil {
		u.ReposAddStatusCheckContextsRequestBody1 = reposAddStatusCheckContextsRequestBody1
		u.Type = ReposAddStatusCheckContextsRequestBodyTypeReposAddStatusCheckContextsRequestBody1
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = ReposAddStatusCheckContextsRequestBodyTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ReposAddStatusCheckContextsRequestBody) MarshalJSON() ([]byte, error) {
	if u.ReposAddStatusCheckContextsRequestBody1 != nil {
		return json.Marshal(u.ReposAddStatusCheckContextsRequestBody1)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type ReposAddStatusCheckContextsRequest struct {
	PathParams ReposAddStatusCheckContextsPathParams
	Request    *ReposAddStatusCheckContextsRequestBody `request:"mediaType=application/json"`
}

type ReposAddStatusCheckContextsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Response
	ReposAddStatusCheckContexts200ApplicationJSONStrings []string
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
