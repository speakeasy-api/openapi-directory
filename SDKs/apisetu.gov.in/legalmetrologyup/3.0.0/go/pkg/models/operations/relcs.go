// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RelcsSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type RelcsRequestBodyCertificateParameters struct {
	// Application No.
	ApplicationNo string `json:"applicationNo"`
	// License No.
	LicenseNo string `json:"licenseNo"`
}

// RelcsRequestBodyFormatEnum - The format of the certificate in response.
type RelcsRequestBodyFormatEnum string

const (
	RelcsRequestBodyFormatEnumPdf RelcsRequestBodyFormatEnum = "pdf"
)

func (e RelcsRequestBodyFormatEnum) ToPointer() *RelcsRequestBodyFormatEnum {
	return &e
}

func (e *RelcsRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = RelcsRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelcsRequestBodyFormatEnum: %v", v)
	}
}

// RelcsRequestBody - Request format
type RelcsRequestBody struct {
	CertificateParameters *RelcsRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format RelcsRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Relcs504ApplicationJSONErrorEnum string

const (
	Relcs504ApplicationJSONErrorEnumGatewayTimeout Relcs504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Relcs504ApplicationJSONErrorEnum) ToPointer() *Relcs504ApplicationJSONErrorEnum {
	return &e
}

func (e *Relcs504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Relcs504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Relcs504ApplicationJSONErrorEnum: %v", v)
	}
}

type Relcs504ApplicationJSONErrorDescriptionEnum string

const (
	Relcs504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Relcs504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Relcs504ApplicationJSONErrorDescriptionEnum) ToPointer() *Relcs504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Relcs504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Relcs504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Relcs504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Relcs504ApplicationJSON - Gateway timeout
type Relcs504ApplicationJSON struct {
	Error            *Relcs504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Relcs504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Relcs503ApplicationJSONErrorEnum string

const (
	Relcs503ApplicationJSONErrorEnumServiceUnavailable Relcs503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Relcs503ApplicationJSONErrorEnum) ToPointer() *Relcs503ApplicationJSONErrorEnum {
	return &e
}

func (e *Relcs503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Relcs503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Relcs503ApplicationJSONErrorEnum: %v", v)
	}
}

type Relcs503ApplicationJSONErrorDescriptionEnum string

const (
	Relcs503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Relcs503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Relcs503ApplicationJSONErrorDescriptionEnum) ToPointer() *Relcs503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Relcs503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Relcs503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Relcs503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Relcs503ApplicationJSON - Service unavailable
type Relcs503ApplicationJSON struct {
	Error            *Relcs503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Relcs503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Relcs502ApplicationJSONErrorEnum string

const (
	Relcs502ApplicationJSONErrorEnumBadGatewy Relcs502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Relcs502ApplicationJSONErrorEnum) ToPointer() *Relcs502ApplicationJSONErrorEnum {
	return &e
}

func (e *Relcs502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Relcs502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Relcs502ApplicationJSONErrorEnum: %v", v)
	}
}

type Relcs502ApplicationJSONErrorDescriptionEnum string

const (
	Relcs502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Relcs502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Relcs502ApplicationJSONErrorDescriptionEnum) ToPointer() *Relcs502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Relcs502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Relcs502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Relcs502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Relcs502ApplicationJSON - Bad gateway
type Relcs502ApplicationJSON struct {
	Error            *Relcs502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Relcs502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Relcs500ApplicationJSONErrorEnum string

const (
	Relcs500ApplicationJSONErrorEnumInternalServerError Relcs500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Relcs500ApplicationJSONErrorEnum) ToPointer() *Relcs500ApplicationJSONErrorEnum {
	return &e
}

func (e *Relcs500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Relcs500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Relcs500ApplicationJSONErrorEnum: %v", v)
	}
}

type Relcs500ApplicationJSONErrorDescriptionEnum string

const (
	Relcs500ApplicationJSONErrorDescriptionEnumInternalServerError Relcs500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Relcs500ApplicationJSONErrorDescriptionEnum) ToPointer() *Relcs500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Relcs500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Relcs500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Relcs500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Relcs500ApplicationJSON - Internal server error
type Relcs500ApplicationJSON struct {
	Error            *Relcs500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Relcs500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Relcs404ApplicationJSONErrorEnum string

const (
	Relcs404ApplicationJSONErrorEnumRecordNotFound Relcs404ApplicationJSONErrorEnum = "record_not_found"
	Relcs404ApplicationJSONErrorEnumURLNotFound    Relcs404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Relcs404ApplicationJSONErrorEnum) ToPointer() *Relcs404ApplicationJSONErrorEnum {
	return &e
}

func (e *Relcs404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Relcs404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Relcs404ApplicationJSONErrorEnum: %v", v)
	}
}

type Relcs404ApplicationJSONErrorDescriptionEnum string

const (
	Relcs404ApplicationJSONErrorDescriptionEnumNoRecordFound               Relcs404ApplicationJSONErrorDescriptionEnum = "No record found"
	Relcs404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Relcs404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Relcs404ApplicationJSONErrorDescriptionEnum) ToPointer() *Relcs404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Relcs404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Relcs404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Relcs404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Relcs404ApplicationJSON - No record found
type Relcs404ApplicationJSON struct {
	Error            *Relcs404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Relcs404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Relcs401ApplicationJSONErrorEnum string

const (
	Relcs401ApplicationJSONErrorEnumInvalidAuthentication Relcs401ApplicationJSONErrorEnum = "invalid_authentication"
	Relcs401ApplicationJSONErrorEnumInvalidAuthorization  Relcs401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Relcs401ApplicationJSONErrorEnum) ToPointer() *Relcs401ApplicationJSONErrorEnum {
	return &e
}

func (e *Relcs401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Relcs401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Relcs401ApplicationJSONErrorEnum: %v", v)
	}
}

type Relcs401ApplicationJSONErrorDescriptionEnum string

const (
	Relcs401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Relcs401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Relcs401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Relcs401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Relcs401ApplicationJSONErrorDescriptionEnum) ToPointer() *Relcs401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Relcs401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Relcs401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Relcs401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Relcs401ApplicationJSON - Unauthorized access
type Relcs401ApplicationJSON struct {
	Error            *Relcs401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Relcs401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Relcs400ApplicationJSONErrorEnum string

const (
	Relcs400ApplicationJSONErrorEnumMissingParameter Relcs400ApplicationJSONErrorEnum = "missing_parameter"
	Relcs400ApplicationJSONErrorEnumInvalidParameter Relcs400ApplicationJSONErrorEnum = "invalid_parameter"
	Relcs400ApplicationJSONErrorEnumInvalidFormat    Relcs400ApplicationJSONErrorEnum = "invalid_format"
	Relcs400ApplicationJSONErrorEnumInvalidTxnid     Relcs400ApplicationJSONErrorEnum = "invalid_txnid"
	Relcs400ApplicationJSONErrorEnumInvalidConsentid Relcs400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Relcs400ApplicationJSONErrorEnum) ToPointer() *Relcs400ApplicationJSONErrorEnum {
	return &e
}

func (e *Relcs400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Relcs400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Relcs400ApplicationJSONErrorEnum: %v", v)
	}
}

type Relcs400ApplicationJSONErrorDescriptionEnum string

const (
	Relcs400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Relcs400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Relcs400ApplicationJSONErrorDescriptionEnumBadRequest                              Relcs400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Relcs400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Relcs400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Relcs400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Relcs400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Relcs400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Relcs400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Relcs400ApplicationJSONErrorDescriptionEnum) ToPointer() *Relcs400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Relcs400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Relcs400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Relcs400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Relcs400ApplicationJSON - Bad request
type Relcs400ApplicationJSON struct {
	Error            *Relcs400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Relcs400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type RelcsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Relcs400ApplicationJSONObject *Relcs400ApplicationJSON
	// Unauthorized access
	Relcs401ApplicationJSONObject *Relcs401ApplicationJSON
	// No record found
	Relcs404ApplicationJSONObject *Relcs404ApplicationJSON
	// Internal server error
	Relcs500ApplicationJSONObject *Relcs500ApplicationJSON
	// Bad gateway
	Relcs502ApplicationJSONObject *Relcs502ApplicationJSON
	// Service unavailable
	Relcs503ApplicationJSONObject *Relcs503ApplicationJSON
	// Gateway timeout
	Relcs504ApplicationJSONObject *Relcs504ApplicationJSON
}
