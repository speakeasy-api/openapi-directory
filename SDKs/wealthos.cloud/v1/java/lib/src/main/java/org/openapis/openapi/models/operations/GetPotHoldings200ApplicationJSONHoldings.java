/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class GetPotHoldings200ApplicationJSONHoldings {
    /**
     * Additional external details of the holding. This may be populated in reconciliation process
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additional_external_details")
    public java.util.Map<String, Object> additionalExternalDetails;
    public GetPotHoldings200ApplicationJSONHoldings withAdditionalExternalDetails(java.util.Map<String, Object> additionalExternalDetails) {
        this.additionalExternalDetails = additionalExternalDetails;
        return this;
    }
    
    /**
     * Per-unit book cost for a particular holding (applicable for investment product holdings only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("average_book_cost")
    public String averageBookCost;
    public GetPotHoldings200ApplicationJSONHoldings withAverageBookCost(String averageBookCost) {
        this.averageBookCost = averageBookCost;
        return this;
    }
    
    /**
     * Total book cost for the total units currently held within the pot (applicable for investment product holdings only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cost_of_holding")
    public String costOfHolding;
    public GetPotHoldings200ApplicationJSONHoldings withCostOfHolding(String costOfHolding) {
        this.costOfHolding = costOfHolding;
        return this;
    }
    
    /**
     * Currency of the pot
     */
    @JsonProperty("currency")
    public String currency;
    public GetPotHoldings200ApplicationJSONHoldings withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Free quantity of the investment product holding. Will be empty for the cash holding
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("free_quantity")
    public String freeQuantity;
    public GetPotHoldings200ApplicationJSONHoldings withFreeQuantity(String freeQuantity) {
        this.freeQuantity = freeQuantity;
        return this;
    }
    
    /**
     * Free value of the holding
     */
    @JsonProperty("free_value")
    public String freeValue;
    public GetPotHoldings200ApplicationJSONHoldings withFreeValue(String freeValue) {
        this.freeValue = freeValue;
        return this;
    }
    
    /**
     * Investment product id of the holding. Will be 'cash' for cash holdings
     */
    @JsonProperty("investment_product_id")
    public String investmentProductId;
    public GetPotHoldings200ApplicationJSONHoldings withInvestmentProductId(String investmentProductId) {
        this.investmentProductId = investmentProductId;
        return this;
    }
    
    /**
     * Investment product name of the holding. Will be empty for cash holdings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("investment_product_name")
    public String investmentProductName;
    public GetPotHoldings200ApplicationJSONHoldings withInvestmentProductName(String investmentProductName) {
        this.investmentProductName = investmentProductName;
        return this;
    }
    
    /**
     * Locked quantity of the investment product holding. Will be empty for the cash holding
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locked_quantity")
    public String lockedQuantity;
    public GetPotHoldings200ApplicationJSONHoldings withLockedQuantity(String lockedQuantity) {
        this.lockedQuantity = lockedQuantity;
        return this;
    }
    
    /**
     * Locked value of the holding
     */
    @JsonProperty("locked_value")
    public String lockedValue;
    public GetPotHoldings200ApplicationJSONHoldings withLockedValue(String lockedValue) {
        this.lockedValue = lockedValue;
        return this;
    }
    
    /**
     * Last price available for the investment product. Will be empty for the cash holding
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    public String price;
    public GetPotHoldings200ApplicationJSONHoldings withPrice(String price) {
        this.price = price;
        return this;
    }
    
    /**
     * Last price updated date for the investment product. Will be empty for the cash holding
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_date")
    public String priceDate;
    public GetPotHoldings200ApplicationJSONHoldings withPriceDate(String priceDate) {
        this.priceDate = priceDate;
        return this;
    }
    
    /**
     * Settled cash amount within the pot (applicable for cash holdings only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settled_cash_position")
    public String settledCashPosition;
    public GetPotHoldings200ApplicationJSONHoldings withSettledCashPosition(String settledCashPosition) {
        this.settledCashPosition = settledCashPosition;
        return this;
    }
    
    /**
     * Total quantity of the investment product holding. Will be empty for the cash holding
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_quantity")
    public String totalQuantity;
    public GetPotHoldings200ApplicationJSONHoldings withTotalQuantity(String totalQuantity) {
        this.totalQuantity = totalQuantity;
        return this;
    }
    
    /**
     * Total value of the holding
     */
    @JsonProperty("total_value")
    public String totalValue;
    public GetPotHoldings200ApplicationJSONHoldings withTotalValue(String totalValue) {
        this.totalValue = totalValue;
        return this;
    }
    
}
