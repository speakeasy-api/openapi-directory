// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PutLoadBalancersIDPathParams struct {
	// ID of the Load Balancer
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

type PutLoadBalancersIDRequestBody struct {
	// User-defined labels (key-value pairs)
	Labels map[string]interface{} `json:"labels,omitempty"`
	// New Load Balancer name
	Name *string `json:"name,omitempty"`
}

type PutLoadBalancersIDRequest struct {
	PathParams PutLoadBalancersIDPathParams
	Request    *PutLoadBalancersIDRequestBody `request:"mediaType=application/json"`
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnum - Type of the algorithm
type PutLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnum string

const (
	PutLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnumRoundRobin       PutLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnum = "round_robin"
	PutLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnumLeastConnections PutLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnum = "least_connections"
)

func (e *PutLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "round_robin":
		fallthrough
	case "least_connections":
		*e = PutLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnum: %s", s)
	}
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerAlgorithm - Algorithm of the Load Balancer
type PutLoadBalancersID200ApplicationJSONLoadBalancerAlgorithm struct {
	// Type of the algorithm
	Type PutLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnum `json:"type"`
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceHourly - Hourly costs for a Resource in this Location
type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceHourly struct {
	// Price with VAT added
	Gross string `json:"gross"`
	// Price without VAT
	Net string `json:"net"`
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceMonthly - Monthly costs for a Resource in this Location
type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceMonthly struct {
	// Price with VAT added
	Gross string `json:"gross"`
	// Price without VAT
	Net string `json:"net"`
}

type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTypePrices struct {
	// Name of the Location the price is for
	Location string `json:"location"`
	// Hourly costs for a Resource in this Location
	PriceHourly PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceHourly `json:"price_hourly"`
	// Monthly costs for a Resource in this Location
	PriceMonthly PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceMonthly `json:"price_monthly"`
}

type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerType struct {
	// Point in time when the Load Balancer type is deprecated (in ISO-8601 format)
	Deprecated string `json:"deprecated"`
	// Description of the Load Balancer type
	Description string `json:"description"`
	// ID of the Load Balancer type
	ID float64 `json:"id"`
	// Number of SSL Certificates that can be assigned to a single Load Balancer
	MaxAssignedCertificates float64 `json:"max_assigned_certificates"`
	// Number of maximum simultaneous open connections
	MaxConnections float64 `json:"max_connections"`
	// Number of services a Load Balancer of this type can have
	MaxServices float64 `json:"max_services"`
	// Number of targets a single Load Balancer can have
	MaxTargets float64 `json:"max_targets"`
	// Unique identifier of the Load Balancer type
	Name string `json:"name"`
	// Prices in different network zones
	Prices []PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTypePrices `json:"prices"`
}

type PutLoadBalancersID200ApplicationJSONLoadBalancerLocation struct {
	// City the Location is closest to
	City string `json:"city"`
	// ISO 3166-1 alpha-2 code of the country the Location resides in
	Country string `json:"country"`
	// Description of the Location
	Description string `json:"description"`
	// ID of the Location
	ID float64 `json:"id"`
	// Latitude of the city closest to the Location
	Latitude float64 `json:"latitude"`
	// Longitude of the city closest to the Location
	Longitude float64 `json:"longitude"`
	// Unique identifier of the Location
	Name string `json:"name"`
	// Name of network zone this Location resides in
	NetworkZone string `json:"network_zone"`
}

type PutLoadBalancersID200ApplicationJSONLoadBalancerPrivateNet struct {
	IP      *string `json:"ip,omitempty"`
	Network *int64  `json:"network,omitempty"`
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerProtection - Protection configuration for the Resource
type PutLoadBalancersID200ApplicationJSONLoadBalancerProtection struct {
	// If true, prevents the Resource from being deleted
	Delete bool `json:"delete"`
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerPublicNetIpv4 - IP address (v4)
type PutLoadBalancersID200ApplicationJSONLoadBalancerPublicNetIpv4 struct {
	// Reverse DNS PTR entry for the IPv4 address of this Load Balancer
	DNSPtr *string `json:"dns_ptr,omitempty"`
	// IP address (v4) of this Load Balancer
	IP *string `json:"ip,omitempty"`
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerPublicNetIpv6 - IP address (v6)
type PutLoadBalancersID200ApplicationJSONLoadBalancerPublicNetIpv6 struct {
	// Reverse DNS PTR entry for the IPv6 address of this Load Balancer
	DNSPtr *string `json:"dns_ptr,omitempty"`
	// IP address (v6) of this Load Balancer
	IP *string `json:"ip,omitempty"`
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerPublicNet - Public network information
type PutLoadBalancersID200ApplicationJSONLoadBalancerPublicNet struct {
	// Public Interface enabled or not
	Enabled bool `json:"enabled"`
	// IP address (v4)
	Ipv4 PutLoadBalancersID200ApplicationJSONLoadBalancerPublicNetIpv4 `json:"ipv4"`
	// IP address (v6)
	Ipv6 PutLoadBalancersID200ApplicationJSONLoadBalancerPublicNetIpv6 `json:"ipv6"`
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP - Additional configuration for protocol http
type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP struct {
	// Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
	Domain string `json:"domain"`
	// HTTP path to use for health checks
	Path string `json:"path"`
	// String that must be contained in HTTP response in order to pass the health check
	Response *string `json:"response,omitempty"`
	// List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.
	StatusCodes []string `json:"status_codes,omitempty"`
	// Use HTTPS for health check
	TLS *bool `json:"tls,omitempty"`
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum - Type of the health check
type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum string

const (
	PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnumTCP  PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum = "tcp"
	PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnumHTTP PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum = "http"
)

func (e *PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tcp":
		fallthrough
	case "http":
		*e = PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum: %s", s)
	}
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheck - Service health check
type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheck struct {
	// Additional configuration for protocol http
	HTTP *PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP `json:"http,omitempty"`
	// Time interval in seconds health checks are performed
	Interval int64 `json:"interval"`
	// Port the health check will be performed on
	Port int64 `json:"port"`
	// Type of the health check
	Protocol PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum `json:"protocol"`
	// Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again
	Retries int64 `json:"retries"`
	// Time in seconds after an attempt is considered a timeout
	Timeout int64 `json:"timeout"`
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceHTTP - Configuration option for protocols http and https
type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceHTTP struct {
	// IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is "http"
	Certificates []int64 `json:"certificates,omitempty"`
	// Lifetime of the cookie used for sticky sessions
	CookieLifetime int64 `json:"cookie_lifetime"`
	// Name of the cookie used for sticky sessions
	CookieName string `json:"cookie_name"`
	// Redirect HTTP requests to HTTPS. Only available if protocol is "https". Default `false`
	RedirectHTTP *bool `json:"redirect_http,omitempty"`
	// Use sticky sessions. Only available if protocol is "http" or "https". Default `false`
	StickySessions *bool `json:"sticky_sessions,omitempty"`
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum - Protocol of the Load Balancer
type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum string

const (
	PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnumTCP   PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum = "tcp"
	PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnumHTTP  PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum = "http"
	PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnumHTTPS PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum = "https"
)

func (e *PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tcp":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum: %s", s)
	}
}

type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerService struct {
	// Port the Load Balancer will balance to
	DestinationPort int64 `json:"destination_port"`
	// Service health check
	HealthCheck PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheck `json:"health_check"`
	// Configuration option for protocols http and https
	HTTP *PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceHTTP `json:"http,omitempty"`
	// Port the Load Balancer listens on
	ListenPort int64 `json:"listen_port"`
	// Protocol of the Load Balancer
	Protocol PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum `json:"protocol"`
	// Is Proxyprotocol enabled or not
	Proxyprotocol bool `json:"proxyprotocol"`
}

type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatus struct {
	ListenPort *int64  `json:"listen_port,omitempty"`
	Status     *string `json:"status,omitempty"`
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetIP - IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetIP struct {
	// IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a Subnetwork type vswitch.
	IP string `json:"ip"`
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetLabelSelector - Label selector and a list of selected targets
type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetLabelSelector struct {
	// Label selector
	Selector string `json:"selector"`
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetServer - Server where the traffic should be routed through
type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetServer struct {
	// ID of the Server
	ID int64 `json:"id"`
}

type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTargetsHealthStatus struct {
	ListenPort *int64  `json:"listen_port,omitempty"`
	Status     *string `json:"status,omitempty"`
}

type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTargetsServer struct {
	// ID of the Server
	ID int64 `json:"id"`
}

type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTargets struct {
	HealthStatus []PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTargetsHealthStatus `json:"health_status,omitempty"`
	Server       *PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTargetsServer        `json:"server,omitempty"`
	Type         *string                                                                                 `json:"type,omitempty"`
	UsePrivateIP *bool                                                                                   `json:"use_private_ip,omitempty"`
}

// PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum - Type of the resource
type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum string

const (
	PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnumServer        PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum = "server"
	PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnumLabelSelector PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum = "label_selector"
	PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnumIP            PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum = "ip"
)

func (e *PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "server":
		fallthrough
	case "label_selector":
		fallthrough
	case "ip":
		*e = PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum: %s", s)
	}
}

type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTarget struct {
	// List of health statuses of the services on this target
	HealthStatus []PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatus `json:"health_status,omitempty"`
	// IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
	IP *PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetIP `json:"ip,omitempty"`
	// Label selector and a list of selected targets
	LabelSelector *PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetLabelSelector `json:"label_selector,omitempty"`
	// Server where the traffic should be routed through
	Server *PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetServer `json:"server,omitempty"`
	// List of selected targets
	Targets []PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTargets `json:"targets,omitempty"`
	// Type of the resource
	Type PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum `json:"type"`
	// Use the private network IP instead of the public IP. Default value is false.
	UsePrivateIP *bool `json:"use_private_ip,omitempty"`
}

type PutLoadBalancersID200ApplicationJSONLoadBalancer struct {
	// Algorithm of the Load Balancer
	Algorithm PutLoadBalancersID200ApplicationJSONLoadBalancerAlgorithm `json:"algorithm"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Free Traffic for the current billing period in bytes
	IncludedTraffic int64 `json:"included_traffic"`
	// Inbound Traffic for the current billing period in bytes
	IngoingTraffic int64 `json:"ingoing_traffic"`
	// User-defined labels (key-value pairs)
	Labels           map[string]string                                                `json:"labels"`
	LoadBalancerType PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerType `json:"load_balancer_type"`
	Location         PutLoadBalancersID200ApplicationJSONLoadBalancerLocation         `json:"location"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Outbound Traffic for the current billing period in bytes
	OutgoingTraffic int64 `json:"outgoing_traffic"`
	// Private networks information
	PrivateNet []PutLoadBalancersID200ApplicationJSONLoadBalancerPrivateNet `json:"private_net"`
	// Protection configuration for the Resource
	Protection PutLoadBalancersID200ApplicationJSONLoadBalancerProtection `json:"protection"`
	// Public network information
	PublicNet PutLoadBalancersID200ApplicationJSONLoadBalancerPublicNet `json:"public_net"`
	// List of services that belong to this Load Balancer
	Services []PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerService `json:"services"`
	// List of targets that belong to this Load Balancer
	Targets []PutLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTarget `json:"targets"`
}

// PutLoadBalancersID200ApplicationJSON - The `load_balancer` key contains the updated Load Balancer
type PutLoadBalancersID200ApplicationJSON struct {
	LoadBalancer PutLoadBalancersID200ApplicationJSONLoadBalancer `json:"load_balancer"`
}

type PutLoadBalancersIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `load_balancer` key contains the updated Load Balancer
	PutLoadBalancersID200ApplicationJSONObject *PutLoadBalancersID200ApplicationJSON
}
