"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .intersections import Intersections
from .occupants import Occupants
from .parcels import Parcels
from .sites import Sites
from sdk.models import shared

SERVERS = [
    "https://geocoder.api.gov.bc.ca/",
    r"""Production (gated)"""
    "https://geocodertst.api.gov.bc.ca/",
    r"""Test (gated)"""
    "https://geocoderdlv.api.gov.bc.ca/",
    r"""Delivery (gated)"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This API represents address cleaning, correction, completion, geocoding, reverse geocoding, and proximity resources for intersection addresses, physical addresses and their occupants in British Columbia. Please read our [data collection notice](https://github.com/bcgov/api-specs/blob/master/COLLECTION_NOTICE.md#collection-notice).
    
    Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers. 
    
    [API keys](https://api.gov.bc.ca/devportal/api-directory/273) are unique and can be acquired with a GitHub or IDIR account. 
    
     **Notification:** If you have applications or web pages that link to the BC Address Geocoder you must use the following URL. 
    
     *https://geocoder.api.gov.bc.ca* 
    
     Please note that the following URLs were deprecated in September 2018 [More Details](https://www2.gov.bc.ca/gov/content?id=103ADC5A956842828554238DEF28D6E5). 
    
     - http://apps.gov.bc.ca/pub/geocoder 
     - https://apps.gov.bc.ca/pub/geocoder
    \
    \ 
    https://www2.gov.bc.ca/gov/content?id=118DD57CD9674D57BDBD511C2E78DC0D - BC Address Geocoder
    """
    intersections: Intersections
    occupants: Occupants
    parcels: Parcels
    sites: Sites

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.intersections = Intersections(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.occupants = Occupants(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.parcels = Parcels(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.sites = Sites(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    