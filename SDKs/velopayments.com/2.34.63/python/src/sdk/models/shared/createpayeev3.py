"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import challengev3 as shared_challengev3
from ..shared import companyv3 as shared_companyv3
from ..shared import createindividualv3 as shared_createindividualv3
from ..shared import createpayeeaddressv3 as shared_createpayeeaddressv3
from ..shared import createpaymentchannelv3 as shared_createpaymentchannelv3
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreatePayeeV3Input:
    
    address: shared_createpayeeaddressv3.CreatePayeeAddressV3 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})  
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})  
    remote_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteId') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of Payee. One of the following values: Individual, Company"""  
    challenge: Optional[shared_challengev3.ChallengeV3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('challenge'), 'exclude': lambda f: f is None }})  
    company: Optional[shared_companyv3.CompanyV3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company'), 'exclude': lambda f: f is None }})  
    individual: Optional[shared_createindividualv3.CreateIndividualV3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual'), 'exclude': lambda f: f is None }})  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
    See the /v1/supportedLanguages endpoint to list the available codes for an environment.
    """  
    payment_channel: Optional[shared_createpaymentchannelv3.CreatePaymentChannelV3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentChannel'), 'exclude': lambda f: f is None }})  
    