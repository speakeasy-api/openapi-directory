"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import attribute as shared_attribute
from ..shared import compatibility_enum as shared_compatibility_enum
from ..shared import containerdefinition as shared_containerdefinition
from ..shared import ephemeralstorage as shared_ephemeralstorage
from ..shared import inferenceaccelerator as shared_inferenceaccelerator
from ..shared import ipcmode_enum as shared_ipcmode_enum
from ..shared import networkmode_enum as shared_networkmode_enum
from ..shared import pidmode_enum as shared_pidmode_enum
from ..shared import proxyconfiguration as shared_proxyconfiguration
from ..shared import runtimeplatform as shared_runtimeplatform
from ..shared import taskdefinitionplacementconstraint as shared_taskdefinitionplacementconstraint
from ..shared import taskdefinitionstatus_enum as shared_taskdefinitionstatus_enum
from ..shared import volume as shared_volume
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaskDefinition:
    r"""The details of a task definition which describes the container and volume definitions of an Amazon Elastic Container Service task. You can specify which Docker images to use, the required resources, and other configurations related to launching the task definition through an Amazon ECS service or task."""
    
    compatibilities: Optional[list[shared_compatibility_enum.CompatibilityEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compatibilities'), 'exclude': lambda f: f is None }})  
    container_definitions: Optional[list[shared_containerdefinition.ContainerDefinition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containerDefinitions'), 'exclude': lambda f: f is None }})  
    cpu: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpu'), 'exclude': lambda f: f is None }})  
    deregistered_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deregisteredAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    ephemeral_storage: Optional[shared_ephemeralstorage.EphemeralStorage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ephemeralStorage'), 'exclude': lambda f: f is None }})  
    execution_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionRoleArn'), 'exclude': lambda f: f is None }})  
    family: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('family'), 'exclude': lambda f: f is None }})  
    inference_accelerators: Optional[list[shared_inferenceaccelerator.InferenceAccelerator]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inferenceAccelerators'), 'exclude': lambda f: f is None }})  
    ipc_mode: Optional[shared_ipcmode_enum.IpcModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipcMode'), 'exclude': lambda f: f is None }})  
    memory: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memory'), 'exclude': lambda f: f is None }})  
    network_mode: Optional[shared_networkmode_enum.NetworkModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkMode'), 'exclude': lambda f: f is None }})  
    pid_mode: Optional[shared_pidmode_enum.PidModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pidMode'), 'exclude': lambda f: f is None }})  
    placement_constraints: Optional[list[shared_taskdefinitionplacementconstraint.TaskDefinitionPlacementConstraint]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placementConstraints'), 'exclude': lambda f: f is None }})  
    proxy_configuration: Optional[shared_proxyconfiguration.ProxyConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proxyConfiguration'), 'exclude': lambda f: f is None }})  
    registered_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registeredAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    registered_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registeredBy'), 'exclude': lambda f: f is None }})  
    requires_attributes: Optional[list[shared_attribute.Attribute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requiresAttributes'), 'exclude': lambda f: f is None }})  
    requires_compatibilities: Optional[list[shared_compatibility_enum.CompatibilityEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requiresCompatibilities'), 'exclude': lambda f: f is None }})  
    revision: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revision'), 'exclude': lambda f: f is None }})  
    runtime_platform: Optional[shared_runtimeplatform.RuntimePlatform] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runtimePlatform'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_taskdefinitionstatus_enum.TaskDefinitionStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    task_definition_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskDefinitionArn'), 'exclude': lambda f: f is None }})  
    task_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskRoleArn'), 'exclude': lambda f: f is None }})  
    volumes: Optional[list[shared_volume.Volume]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumes'), 'exclude': lambda f: f is None }})  
    