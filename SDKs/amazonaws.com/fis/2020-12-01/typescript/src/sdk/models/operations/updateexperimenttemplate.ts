/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Specifies the configuration for experiment logging.
 */
export class UpdateExperimentTemplateRequestBodyLogConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "cloudWatchLogsConfiguration" })
  @Type(() => shared.ExperimentTemplateCloudWatchLogsLogConfigurationInput)
  cloudWatchLogsConfiguration?: shared.ExperimentTemplateCloudWatchLogsLogConfigurationInput;

  @SpeakeasyMetadata()
  @Expose({ name: "logSchemaVersion" })
  logSchemaVersion?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "s3Configuration" })
  @Type(() => shared.ExperimentTemplateS3LogConfigurationInput)
  s3Configuration?: shared.ExperimentTemplateS3LogConfigurationInput;
}

export class UpdateExperimentTemplateRequestBody extends SpeakeasyBase {
  /**
   * The actions for the experiment.
   */
  @SpeakeasyMetadata({
    elemType: shared.UpdateExperimentTemplateActionInputItem,
  })
  @Expose({ name: "actions" })
  @Transform(
    ({ value }) => {
      const obj: Record<
        string,
        shared.UpdateExperimentTemplateActionInputItem
      > = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          shared.UpdateExperimentTemplateActionInputItem
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  actions?: Record<string, shared.UpdateExperimentTemplateActionInputItem>;

  /**
   * A description for the template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Specifies the configuration for experiment logging.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "logConfiguration" })
  @Type(() => UpdateExperimentTemplateRequestBodyLogConfiguration)
  logConfiguration?: UpdateExperimentTemplateRequestBodyLogConfiguration;

  /**
   * The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn?: string;

  /**
   * The stop conditions for the experiment.
   */
  @SpeakeasyMetadata({
    elemType: shared.UpdateExperimentTemplateStopConditionInput,
  })
  @Expose({ name: "stopConditions" })
  @Type(() => shared.UpdateExperimentTemplateStopConditionInput)
  stopConditions?: shared.UpdateExperimentTemplateStopConditionInput[];

  /**
   * The targets for the experiment.
   */
  @SpeakeasyMetadata({ elemType: shared.UpdateExperimentTemplateTargetInput })
  @Expose({ name: "targets" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.UpdateExperimentTemplateTargetInput> =
        {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          shared.UpdateExperimentTemplateTargetInput
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  targets?: Record<string, shared.UpdateExperimentTemplateTargetInput>;
}

export class UpdateExperimentTemplateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateExperimentTemplateRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The ID of the experiment template.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;
}

export class UpdateExperimentTemplateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateExperimentTemplateResponse?: shared.UpdateExperimentTemplateResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
