"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import authenticationresulttype as shared_authenticationresulttype
from ..shared import challengenametype_enum as shared_challengenametype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdminInitiateAuthResponse:
    r"""Initiates the authentication response, as an administrator."""
    
    authentication_result: Optional[shared_authenticationresulttype.AuthenticationResultType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthenticationResult'), 'exclude': lambda f: f is None }})  
    challenge_name: Optional[shared_challengenametype_enum.ChallengeNameTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChallengeName'), 'exclude': lambda f: f is None }})  
    challenge_parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChallengeParameters'), 'exclude': lambda f: f is None }})  
    session: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Session'), 'exclude': lambda f: f is None }})  
    