/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Ramps {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve a ramp
   *
   * @remarks
   * **Note**: This operation is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.
   *
   * Retrieves the latest definition of a specified ramp.
   *
   */
  getRampByRampNumber(
    req: operations.GETRampByRampNumberRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETRampByRampNumberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETRampByRampNumberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/ramps/{rampNumber}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETRampByRampNumberResponse =
        new operations.GETRampByRampNumberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getRampByRampNumberResponseType = utils.objectToClass(
              httpRes?.data,
              shared.GETRampByRampNumberResponseType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List ramp metrics by order number
   *
   * @remarks
   * **Note**: This operation is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.
   *
   * Retrieves key ramp metrics about a specified order, including the following metrics:
   *
   * * TCB, TCV in the Ramp level
   * * TCB, TCV in the Interval level
   * * TCB, TCV, Quantity, and MRR in Interval Metrics
   * * Delta TCB, Delta TCV, Delta Quantity, and Delta MRR in Interval Delta Metrics
   *
   * See [Key metrics for Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/F_Key_metrics_for_Ramps) for more information.
   *
   */
  getRampMetricsByOrderNumber(
    req: operations.GETRampMetricsByOrderNumberRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETRampMetricsByOrderNumberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETRampMetricsByOrderNumberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/orders/{orderNumber}/ramp-metrics",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETRampMetricsByOrderNumberResponse =
        new operations.GETRampMetricsByOrderNumberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getRampMetricsByOrderNumberResponseType = utils.objectToClass(
              httpRes?.data,
              shared.GETRampMetricsByOrderNumberResponseType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all ramp metrics of a ramp
   *
   * @remarks
   * **Note**: This operation is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.
   *
   * Retrieves key metrics about a specified ramp, including the following metrics:
   *
   * * TCB, TCV in the Ramp level
   * * TCB, TCV in the Interval level
   * * TCB, TCV, Quantity, and MRR in Interval Metrics
   * * Delta TCB, Delta TCV, Delta Quantity, and Delta MRR in Interval Delta Metrics
   *
   * See [Key metrics for Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/F_Key_metrics_for_Ramps) for more information.
   *
   */
  getRampMetricsByRampNumber(
    req: operations.GETRampMetricsByRampNumberRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETRampMetricsByRampNumberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETRampMetricsByRampNumberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/ramps/{rampNumber}/ramp-metrics",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETRampMetricsByRampNumberResponse =
        new operations.GETRampMetricsByRampNumberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getRampMetricsByRampNumberResponseType = utils.objectToClass(
              httpRes?.data,
              shared.GETRampMetricsByRampNumberResponseType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List ramp metrics by subscription key
   *
   * @remarks
   * **Note**: This operation is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.
   *
   * Retrieves key ramp metrics about a specified subscription, including the following metrics:
   *
   * * TCB, TCV in the Ramp level
   * * TCB, TCV in the Interval level
   * * TCB, TCV, Quantity, and MRR in Interval Metrics
   * * Delta TCB, Delta TCV, Delta Quantity, and Delta MRR in Interval Delta Metrics
   *
   * See [Key metrics for Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/F_Key_metrics_for_Ramps) for more information.
   *
   */
  getRampMetricsBySubscriptionKey(
    req: operations.GETRampMetricsBySubscriptionKeyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETRampMetricsBySubscriptionKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETRampMetricsBySubscriptionKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/subscriptions/{subscriptionKey}/ramp-metrics",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETRampMetricsBySubscriptionKeyResponse =
        new operations.GETRampMetricsBySubscriptionKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getRampMetricsBySubscriptionKeyResponseType =
              utils.objectToClass(
                httpRes?.data,
                shared.GETRampMetricsBySubscriptionKeyResponseType
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a ramp by subscription key
   *
   * @remarks
   * **Note**: This operation is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.
   *
   *  Retrieves the definition of the ramp associated with a specified subscription.
   *
   */
  getRampsBySubscriptionKey(
    req: operations.GETRampsBySubscriptionKeyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETRampsBySubscriptionKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETRampsBySubscriptionKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/subscriptions/{subscriptionKey}/ramps",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETRampsBySubscriptionKeyResponse =
        new operations.GETRampsBySubscriptionKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getRampsBySubscriptionKeyResponseType = utils.objectToClass(
              httpRes?.data,
              shared.GETRampsBySubscriptionKeyResponseType
            );
          }
          break;
      }

      return res;
    });
  }
}
