/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Repository owners and administrators can set branch management
 *
 * @remarks
 * rules on a repository that control what can be pushed by whom.
 * Through these rules, you can enforce a project or team
 * workflow. For example, owners or administrators can:
 *
 * * Limit push powers
 * * Prevent branch deletion
 * * Prevent history re-writes (Git only)
 *
 */
export class BranchRestrictions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a branch restriction rule
   *
   * @remarks
   * Deletes an existing branch restriction rule.
   */
  deleteRepositoriesWorkspaceRepoSlugBranchRestrictionsId(
    req: operations.DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequest,
    security: operations.DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repositories/{workspace}/{repo_slug}/branch-restrictions/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse =
        new operations.DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List branch restrictions
   *
   * @remarks
   * Returns a paginated list of all branch restrictions on the
   * repository.
   */
  getRepositoriesWorkspaceRepoSlugBranchRestrictions(
    req: operations.GetRepositoriesWorkspaceRepoSlugBranchRestrictionsRequest,
    security: operations.GetRepositoriesWorkspaceRepoSlugBranchRestrictionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRepositoriesWorkspaceRepoSlugBranchRestrictionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repositories/{workspace}/{repo_slug}/branch-restrictions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetRepositoriesWorkspaceRepoSlugBranchRestrictionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse =
        new operations.GetRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paginatedBranchrestrictions = utils.objectToClass(
              httpRes?.data,
              shared.PaginatedBranchrestrictions
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a branch restriction rule
   *
   * @remarks
   * Returns a specific branch restriction rule.
   */
  getRepositoriesWorkspaceRepoSlugBranchRestrictionsId(
    req: operations.GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequest,
    security: operations.GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repositories/{workspace}/{repo_slug}/branch-restrictions/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse =
        new operations.GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.branchrestriction = utils.objectToClass(httpRes?.data);
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a branch restriction rule
   *
   * @remarks
   * Creates a new branch restriction rule for a repository.
   *
   * `kind` describes what will be restricted. Allowed values include:
   * `push`, `force`, `delete` and `restrict_merges`.
   *
   * Different kinds of branch restrictions have different requirements:
   *
   * * `push` and `restrict_merges` require `users` and `groups` to be
   *   specified. Empty lists are allowed, in which case permission is
   *   denied for everybody.
   *
   * The restriction applies to all branches that match. There are
   * two ways to match a branch. It is configured in `branch_match_kind`:
   *
   * 1. `glob`: Matches a branch against the `pattern`. A `'*'` in
   *    `pattern` will expand to match zero or more characters, and every
   *    other character matches itself. For example, `'foo*'` will match
   *    `'foo'` and `'foobar'`, but not `'barfoo'`. `'*'` will match all
   *    branches.
   * 2. `branching_model`: Matches a branch against the repository's
   *    branching model. The `branch_type` controls the type of branch
   *    to match. Allowed values include: `production`, `development`,
   *    `bugfix`, `release`, `feature` and `hotfix`.
   *
   * The combination of `kind` and match must be unique. This means that
   * two `glob` restrictions in a repository cannot have the same `kind` and
   * `pattern`. Additionally, two `branching_model` restrictions in a
   * repository cannot have the same `kind` and `branch_type`.
   *
   * `users` and `groups` are lists of users and groups that are except from
   * the restriction. They can only be configured in `push` and
   * `restrict_merges` restrictions. The `push` restriction stops a user
   * pushing to matching branches unless that user is in `users` or is a
   * member of a group in `groups`. The `restrict_merges` stops a user
   * merging pull requests to matching branches unless that user is in
   * `users` or is a member of a group in `groups`. Adding new users or
   * groups to an existing restriction should be done via `PUT`.
   *
   * Note that branch restrictions with overlapping matchers is allowed,
   * but the resulting behavior may be surprising.
   */
  postRepositoriesWorkspaceRepoSlugBranchRestrictions(
    req: operations.PostRepositoriesWorkspaceRepoSlugBranchRestrictionsRequest,
    security: operations.PostRepositoriesWorkspaceRepoSlugBranchRestrictionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostRepositoriesWorkspaceRepoSlugBranchRestrictionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repositories/{workspace}/{repo_slug}/branch-restrictions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PostRepositoriesWorkspaceRepoSlugBranchRestrictionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse =
        new operations.PostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.branchrestriction = utils.objectToClass(httpRes?.data);
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a branch restriction rule
   *
   * @remarks
   * Updates an existing branch restriction rule.
   *
   * Fields not present in the request body are ignored.
   *
   * See [`POST`](/cloud/bitbucket/rest/api-group-branch-restrictions/#api-repositories-workspace-repo-slug-branch-restrictions-post) for details.
   */
  putRepositoriesWorkspaceRepoSlugBranchRestrictionsId(
    req: operations.PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequest,
    security: operations.PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repositories/{workspace}/{repo_slug}/branch-restrictions/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse =
        new operations.PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.branchrestriction = utils.objectToClass(httpRes?.data);
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }
}
