"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import instancefleetprovisioningspecifications as shared_instancefleetprovisioningspecifications
from ..shared import instancefleetresizingspecifications as shared_instancefleetresizingspecifications
from ..shared import instancefleettype_enum as shared_instancefleettype_enum
from ..shared import instancetypeconfig as shared_instancetypeconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InstanceFleetConfig:
    r"""<p>The configuration that defines an instance fleet.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>"""
    
    instance_fleet_type: shared_instancefleettype_enum.InstanceFleetTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceFleetType') }})  
    instance_type_configs: Optional[list[shared_instancetypeconfig.InstanceTypeConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceTypeConfigs'), 'exclude': lambda f: f is None }})  
    launch_specifications: Optional[shared_instancefleetprovisioningspecifications.InstanceFleetProvisioningSpecifications] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LaunchSpecifications'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    resize_specifications: Optional[shared_instancefleetresizingspecifications.InstanceFleetResizingSpecifications] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResizeSpecifications'), 'exclude': lambda f: f is None }})  
    target_on_demand_capacity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetOnDemandCapacity'), 'exclude': lambda f: f is None }})  
    target_spot_capacity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetSpotCapacity'), 'exclude': lambda f: f is None }})  
    