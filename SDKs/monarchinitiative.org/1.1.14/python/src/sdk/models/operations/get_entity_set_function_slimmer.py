"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetEntitySetFunctionSlimmerRelationshipTypeEnum(str, Enum):
    r"""relationship type ('involved_in' or 'acts_upstream_of_or_within')"""
    INVOLVED_IN = 'involved_in'
    ACTS_UPSTREAM_OF_OR_WITHIN = 'acts_upstream_of_or_within'


@dataclasses.dataclass
class GetEntitySetFunctionSlimmerRequest:
    
    slim: list[str] = dataclasses.field(metadata={'query_param': { 'field_name': 'slim', 'style': 'form', 'explode': True }})
    r"""Map objects up (slim) to a higher level category. Value can be ontology class ID (IMPLEMENTED) or subset ID (TODO)"""  
    subject: list[str] = dataclasses.field(metadata={'query_param': { 'field_name': 'subject', 'style': 'form', 'explode': True }})
    r"""Entity ids to be examined, e.g. NCBIGene:9342, NCBIGene:7227, NCBIGene:8131, NCBIGene:157570, NCBIGene:51164, NCBIGene:6689, NCBIGene:6387"""  
    exclude_automatic_assertions: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exclude_automatic_assertions', 'style': 'form', 'explode': True }})
    r"""If set, excludes associations that involve IEAs (ECO:0000501)"""  
    relationship_type: Optional[GetEntitySetFunctionSlimmerRelationshipTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'relationship_type', 'style': 'form', 'explode': True }})
    r"""relationship type ('involved_in' or 'acts_upstream_of_or_within')"""  
    rows: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'rows', 'style': 'form', 'explode': True }})
    r"""number of rows"""  
    start: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start', 'style': 'form', 'explode': True }})
    r"""beginning row"""  
    

@dataclasses.dataclass
class GetEntitySetFunctionSlimmerResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    