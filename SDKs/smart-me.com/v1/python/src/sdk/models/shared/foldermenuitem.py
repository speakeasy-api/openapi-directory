"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import autoexportsettings as shared_autoexportsettings
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FolderMenuItemFolderTypeEnum(str, Enum):
    r"""The folder type of the item"""
    FOLDER = 'Folder'
    LOCATION = 'Location'
    FACTORY = 'Factory'
    HOUSE = 'House'
    OFFICE = 'Office'
    MACHINE = 'Machine'
    VIRTUAL_METER = 'VirtualMeter'
    ELECTICITY_FOLDER = 'ElecticityFolder'
    WATER_FOLDER = 'WaterFolder'
    HEAT_FOLDER = 'HeatFolder'
    GAS_FOLDER = 'GasFolder'
    TEMPERATURE_FOLDER = 'TemperatureFolder'
    SUN = 'Sun'
    LIGHT = 'Light'
    ICE = 'Ice'
    SOFA = 'Sofa'
    FOOD = 'Food'
    COFFEE = 'Coffee'
    CAR = 'Car'
    CHARGING_STATION = 'ChargingStation'
    METER = 'Meter'
    USER = 'User'
    TRASH = 'Trash'
    GRID_PHOTOVOLTAIC_POWER_SYSTEM = 'GridPhotovoltaicPowerSystem'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FolderMenuItem:
    r"""A folder menu item"""
    
    auto_export_settings: Optional[shared_autoexportsettings.AutoExportSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoExportSettings'), 'exclude': lambda f: f is None }})
    r"""Settings for the auto export functionality of a meter"""  
    children: Optional[list[FolderMenuItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Children'), 'exclude': lambda f: f is None }})
    r"""Children folder menu items (sub folder menu items)"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    r"""The Description of the folder"""  
    folder_type: Optional[FolderMenuItemFolderTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FolderType'), 'exclude': lambda f: f is None }})
    r"""The folder type of the item"""  
    icon: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Icon'), 'exclude': lambda f: f is None }})
    r"""The path to the Icon of this folder"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})
    r"""The id of the folder menu item"""  
    meter_serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MeterSerialNumber'), 'exclude': lambda f: f is None }})
    r"""The serial number if the folder menu item is a meter.
                Serial number is handled as a string, as javascript on client side cannot handle long integers properly.
    """  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The Name of the item"""  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserId'), 'exclude': lambda f: f is None }})
    r"""The ID of the user of this folder (only for foldertype user)"""  
    