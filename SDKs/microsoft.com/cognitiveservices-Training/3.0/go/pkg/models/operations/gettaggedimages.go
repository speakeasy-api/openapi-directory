// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetTaggedImagesPathParams struct {
	// The project id.
	ProjectID string `pathParam:"style=simple,explode=false,name=projectId"`
}

// GetTaggedImagesOrderByEnum - The ordering. Defaults to newest.
type GetTaggedImagesOrderByEnum string

const (
	GetTaggedImagesOrderByEnumNewest GetTaggedImagesOrderByEnum = "Newest"
	GetTaggedImagesOrderByEnumOldest GetTaggedImagesOrderByEnum = "Oldest"
)

func (e *GetTaggedImagesOrderByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Newest":
		fallthrough
	case "Oldest":
		*e = GetTaggedImagesOrderByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTaggedImagesOrderByEnum: %s", s)
	}
}

type GetTaggedImagesQueryParams struct {
	// The iteration id. Defaults to workspace.
	IterationID *string `queryParam:"style=form,explode=true,name=iterationId"`
	// The ordering. Defaults to newest.
	OrderBy *GetTaggedImagesOrderByEnum `queryParam:"style=form,explode=true,name=orderBy"`
	// Number of images to skip before beginning the image batch. Defaults to 0.
	Skip *int `queryParam:"style=form,explode=true,name=skip"`
	// A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20.
	TagIds []string `queryParam:"style=form,explode=false,name=tagIds"`
	// Maximum number of images to return. Defaults to 50, limited to 256.
	Take *int `queryParam:"style=form,explode=true,name=take"`
}

type GetTaggedImagesHeaders struct {
	// API key.
	TrainingKey string `header:"style=simple,explode=false,name=Training-Key"`
}

type GetTaggedImagesRequest struct {
	PathParams  GetTaggedImagesPathParams
	QueryParams GetTaggedImagesQueryParams
	Headers     GetTaggedImagesHeaders
}

type GetTaggedImagesResponse struct {
	Body        []byte
	ContentType string
	// Error response
	CustomVisionError *shared.CustomVisionError
	// OK
	Images      []shared.Image
	StatusCode  int
	RawResponse *http.Response
}
