// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type GbrResolveAddressResponseCodeEnum string

const (
	GbrResolveAddressResponseCodeEnumTwoThousand GbrResolveAddressResponseCodeEnum = "2000"
)

func (e *GbrResolveAddressResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = GbrResolveAddressResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrResolveAddressResponseCodeEnum: %s", s)
	}
}

type GbrResolveAddressResponseMessageEnum string

const (
	GbrResolveAddressResponseMessageEnumSuccess GbrResolveAddressResponseMessageEnum = "Success"
)

func (e *GbrResolveAddressResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = GbrResolveAddressResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrResolveAddressResponseMessageEnum: %s", s)
	}
}

type GbrResolveAddressResponseResultType string

const (
	GbrResolveAddressResponseResultTypePafAddress       GbrResolveAddressResponseResultType = "PafAddress"
	GbrResolveAddressResponseResultTypeMrAddress        GbrResolveAddressResponseResultType = "MrAddress"
	GbrResolveAddressResponseResultTypeWelshPafAddress  GbrResolveAddressResponseResultType = "WelshPafAddress"
	GbrResolveAddressResponseResultTypePafAliasAddress  GbrResolveAddressResponseResultType = "PafAliasAddress"
	GbrResolveAddressResponseResultTypeNybAddress       GbrResolveAddressResponseResultType = "NybAddress"
	GbrResolveAddressResponseResultTypeGbrGlobalAddress GbrResolveAddressResponseResultType = "GbrGlobalAddress"
)

type GbrResolveAddressResponseResult struct {
	PafAddress       *PafAddress
	MrAddress        *MrAddress
	WelshPafAddress  *WelshPafAddress
	PafAliasAddress  *PafAliasAddress
	NybAddress       *NybAddress
	GbrGlobalAddress *GbrGlobalAddress

	Type GbrResolveAddressResponseResultType
}

func CreateGbrResolveAddressResponseResultPafAddress(pafAddress PafAddress) GbrResolveAddressResponseResult {
	typ := GbrResolveAddressResponseResultTypePafAddress

	return GbrResolveAddressResponseResult{
		PafAddress: &pafAddress,
		Type:       typ,
	}
}

func CreateGbrResolveAddressResponseResultMrAddress(mrAddress MrAddress) GbrResolveAddressResponseResult {
	typ := GbrResolveAddressResponseResultTypeMrAddress

	return GbrResolveAddressResponseResult{
		MrAddress: &mrAddress,
		Type:      typ,
	}
}

func CreateGbrResolveAddressResponseResultWelshPafAddress(welshPafAddress WelshPafAddress) GbrResolveAddressResponseResult {
	typ := GbrResolveAddressResponseResultTypeWelshPafAddress

	return GbrResolveAddressResponseResult{
		WelshPafAddress: &welshPafAddress,
		Type:            typ,
	}
}

func CreateGbrResolveAddressResponseResultPafAliasAddress(pafAliasAddress PafAliasAddress) GbrResolveAddressResponseResult {
	typ := GbrResolveAddressResponseResultTypePafAliasAddress

	return GbrResolveAddressResponseResult{
		PafAliasAddress: &pafAliasAddress,
		Type:            typ,
	}
}

func CreateGbrResolveAddressResponseResultNybAddress(nybAddress NybAddress) GbrResolveAddressResponseResult {
	typ := GbrResolveAddressResponseResultTypeNybAddress

	return GbrResolveAddressResponseResult{
		NybAddress: &nybAddress,
		Type:       typ,
	}
}

func CreateGbrResolveAddressResponseResultGbrGlobalAddress(gbrGlobalAddress GbrGlobalAddress) GbrResolveAddressResponseResult {
	typ := GbrResolveAddressResponseResultTypeGbrGlobalAddress

	return GbrResolveAddressResponseResult{
		GbrGlobalAddress: &gbrGlobalAddress,
		Type:             typ,
	}
}

func (u *GbrResolveAddressResponseResult) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	pafAddress := new(PafAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&pafAddress); err == nil {
		u.PafAddress = pafAddress
		u.Type = GbrResolveAddressResponseResultTypePafAddress
		return nil
	}

	mrAddress := new(MrAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mrAddress); err == nil {
		u.MrAddress = mrAddress
		u.Type = GbrResolveAddressResponseResultTypeMrAddress
		return nil
	}

	welshPafAddress := new(WelshPafAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&welshPafAddress); err == nil {
		u.WelshPafAddress = welshPafAddress
		u.Type = GbrResolveAddressResponseResultTypeWelshPafAddress
		return nil
	}

	pafAliasAddress := new(PafAliasAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&pafAliasAddress); err == nil {
		u.PafAliasAddress = pafAliasAddress
		u.Type = GbrResolveAddressResponseResultTypePafAliasAddress
		return nil
	}

	nybAddress := new(NybAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&nybAddress); err == nil {
		u.NybAddress = nybAddress
		u.Type = GbrResolveAddressResponseResultTypeNybAddress
		return nil
	}

	gbrGlobalAddress := new(GbrGlobalAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&gbrGlobalAddress); err == nil {
		u.GbrGlobalAddress = gbrGlobalAddress
		u.Type = GbrResolveAddressResponseResultTypeGbrGlobalAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GbrResolveAddressResponseResult) MarshalJSON() ([]byte, error) {
	if u.PafAddress != nil {
		return json.Marshal(u.PafAddress)
	}

	if u.MrAddress != nil {
		return json.Marshal(u.MrAddress)
	}

	if u.WelshPafAddress != nil {
		return json.Marshal(u.WelshPafAddress)
	}

	if u.PafAliasAddress != nil {
		return json.Marshal(u.PafAliasAddress)
	}

	if u.NybAddress != nil {
		return json.Marshal(u.NybAddress)
	}

	if u.GbrGlobalAddress != nil {
		return json.Marshal(u.GbrGlobalAddress)
	}

	return nil, nil
}

// GbrResolveAddressResponse - Success
type GbrResolveAddressResponse struct {
	Code    GbrResolveAddressResponseCodeEnum    `json:"code"`
	Message GbrResolveAddressResponseMessageEnum `json:"message"`
	Result  GbrResolveAddressResponseResult      `json:"result"`
}
