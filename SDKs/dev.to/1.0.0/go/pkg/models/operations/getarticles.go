// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetArticlesStateEnum - Using this parameter will allow the client to check which articles are fresh or rising.
//
//	If `state=fresh` the server will return fresh articles.
//	If `state=rising` the server will return rising articles.
//	This param can be used in conjuction with `username`, only if set to `all`.
type GetArticlesStateEnum string

const (
	GetArticlesStateEnumFresh  GetArticlesStateEnum = "fresh"
	GetArticlesStateEnumRising GetArticlesStateEnum = "rising"
	GetArticlesStateEnumAll    GetArticlesStateEnum = "all"
)

func (e *GetArticlesStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fresh":
		fallthrough
	case "rising":
		fallthrough
	case "all":
		*e = GetArticlesStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetArticlesStateEnum: %s", s)
	}
}

type GetArticlesQueryParams struct {
	// Adding this will allow the client to return the list of articles
	// belonging to the requested collection, ordered by ascending publication date.
	CollectionID *int `queryParam:"style=form,explode=true,name=collection_id"`
	// Pagination page
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Using this parameter will allow the client to check which articles are fresh or rising.
	//             If `state=fresh` the server will return fresh articles.
	//             If `state=rising` the server will return rising articles.
	//             This param can be used in conjuction with `username`, only if set to `all`.
	State *GetArticlesStateEnum `queryParam:"style=form,explode=true,name=state"`
	// Using this parameter will retrieve articles that contain the requested tag. Articles
	// will be ordered by descending popularity.This parameter can be used in conjuction with `top`.
	Tag *string `queryParam:"style=form,explode=true,name=tag"`
	// Using this parameter will retrieve articles with any of the comma-separated tags.
	// Articles will be ordered by descending popularity.
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
	// Using this parameter will retrieve articles that do _not_ contain _any_
	// of comma-separated tags. Articles will be ordered by descending popularity.
	TagsExclude *string `queryParam:"style=form,explode=true,name=tags_exclude"`
	// Using this parameter will allow the client to return the most popular articles
	// in the last `N` days.
	// `top` indicates the number of days since publication of the articles returned.
	// This param can be used in conjuction with `tag`.
	Top *int `queryParam:"style=form,explode=true,name=top"`
	// Using this parameter will retrieve articles belonging
	//             to a User or Organization ordered by descending publication date.
	//             If `state=all` the number of items returned will be `1000` instead of the default `30`.
	//             This parameter can be used in conjuction with `state`.
	Username *string `queryParam:"style=form,explode=true,name=username"`
}

type GetArticlesRequest struct {
	QueryParams GetArticlesQueryParams
}

type GetArticlesResponse struct {
	// A List of Articles
	ArticleIndices []shared.ArticleIndex
	ContentType    string
	StatusCode     int
	RawResponse    *http.Response
}
