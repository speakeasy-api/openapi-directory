"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DiffEntryStatusEnum(str, Enum):
    ADDED = 'added'
    REMOVED = 'removed'
    MODIFIED = 'modified'
    RENAMED = 'renamed'
    COPIED = 'copied'
    CHANGED = 'changed'
    UNCHANGED = 'unchanged'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DiffEntry:
    r"""Diff Entry"""
    
    additions: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additions') }})  
    blob_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blob_url') }})  
    changes: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changes') }})  
    contents_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contents_url') }})  
    deletions: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deletions') }})  
    filename: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filename') }})  
    raw_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('raw_url') }})  
    sha: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sha') }})  
    status: DiffEntryStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    patch: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patch'), 'exclude': lambda f: f is None }})  
    previous_filename: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_filename'), 'exclude': lambda f: f is None }})  
    