/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * OrderBy. Ordering mechanism for your results.
 */
export enum SuggestedTagAndRegionQueryTokenSortByEnum {
  UncertaintyAscending = "UncertaintyAscending",
  UncertaintyDescending = "UncertaintyDescending",
}

/**
 * Contains properties we need to fetch suggested tags for. For the first call, Session and continuation set to null.
 *
 * @remarks
 * Then on subsequent calls, uses the session/continuation from the previous SuggestedTagAndRegionQuery result to fetch additional results.
 */
export class SuggestedTagAndRegionQueryToken extends SpeakeasyBase {
  /**
   * Continuation Id for database pagination. Initially null but later used to paginate.
   */
  @SpeakeasyMetadata({ data: "form, name=continuation" })
  @Expose({ name: "continuation" })
  continuation?: string;

  /**
   * Maximum number of results you want to be returned in the response.
   */
  @SpeakeasyMetadata({ data: "form, name=maxCount" })
  @Expose({ name: "maxCount" })
  maxCount?: number;

  /**
   * SessionId for database query. Initially set to null but later used to paginate.
   */
  @SpeakeasyMetadata({ data: "form, name=session" })
  @Expose({ name: "session" })
  session?: string;

  /**
   * OrderBy. Ordering mechanism for your results.
   */
  @SpeakeasyMetadata({ data: "form, name=sortBy" })
  @Expose({ name: "sortBy" })
  sortBy?: SuggestedTagAndRegionQueryTokenSortByEnum;

  /**
   * Existing TagIds in project to filter suggested tags on.
   */
  @SpeakeasyMetadata({ data: "form, name=tagIds" })
  @Expose({ name: "tagIds" })
  tagIds?: string[];

  /**
   * Confidence threshold to filter suggested tags on.
   */
  @SpeakeasyMetadata({ data: "form, name=threshold" })
  @Expose({ name: "threshold" })
  threshold?: number;
}
