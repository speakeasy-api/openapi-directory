"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import downloadhistorymediadetails as shared_downloadhistorymediadetails
from ..shared import downloadhistoryrevsharedetails as shared_downloadhistoryrevsharedetails
from ..shared import downloadhistoryuserdetails as shared_downloadhistoryuserdetails
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DownloadHistory:
    r"""Information about a downloaded media item. Applicable for all media types, only one of 'audio', 'image' or 'video' will be in a single DownloadHistory object"""
    
    download_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download_time'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date the media was downloaded the first time"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the download"""  
    license: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license') }})
    r"""The name of the license of this download"""  
    audio: Optional[shared_downloadhistorymediadetails.DownloadHistoryMediaDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio'), 'exclude': lambda f: f is None }})
    r"""Information about the downloaded media"""  
    image: Optional[shared_downloadhistorymediadetails.DownloadHistoryMediaDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""Information about the downloaded media"""  
    is_downloadable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_downloadable'), 'exclude': lambda f: f is None }})
    r"""Specifies if the media is downloadable via its respective downloads endpoint"""  
    metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""The metadata that was passed in the original licensing request"""  
    revshare: Optional[shared_downloadhistoryrevsharedetails.DownloadHistoryRevshareDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revshare'), 'exclude': lambda f: f is None }})
    r"""Pricing information for revenue-sharing transactions"""  
    subscription_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscription_id'), 'exclude': lambda f: f is None }})
    r"""ID of the subscription used to perform this download"""  
    user: Optional[shared_downloadhistoryuserdetails.DownloadHistoryUserDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""Information about a user"""  
    video: Optional[shared_downloadhistorymediadetails.DownloadHistoryMediaDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('video'), 'exclude': lambda f: f is None }})
    r"""Information about the downloaded media"""  
    