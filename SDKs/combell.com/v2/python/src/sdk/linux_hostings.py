"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class LinuxHostings:
    r"""Manage your linux hostings."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_scheduled_tasks(self, request: operations.AddScheduledTasksRequest) -> operations.AddScheduledTasksResponse:
        r"""Add a scheduled task"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddScheduledTasksRequest, base_url, '/linuxhostings/{domainName}/scheduledtasks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "scheduled_task", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AddScheduledTasksRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddScheduledTasksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            

        return res

    def add_ssh_key(self, request: operations.AddSSHKeyRequest) -> operations.AddSSHKeyResponse:
        r"""Add a SSH key"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddSSHKeyRequest, base_url, '/linuxhostings/{domainName}/ssh/keys', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_ssh_key_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AddSSHKeyRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddSSHKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            

        return res

    def change_apcu(self, request: operations.ChangeApcuRequest) -> operations.ChangeApcuResponse:
        r"""Configure PHP APCu setting"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangeApcuRequest, base_url, '/linuxhostings/{domainName}/phpsettings/apcu', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_php_a_pcu_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ChangeApcuRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeApcuResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def change_auto_redirect(self, request: operations.ChangeAutoRedirectRequest) -> operations.ChangeAutoRedirectResponse:
        r"""Configure auto redirect"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangeAutoRedirectRequest, base_url, '/linuxhostings/{domainName}/sslsettings/{hostname}/autoredirect', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "auto_redirect_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ChangeAutoRedirectRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeAutoRedirectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def change_gzip_compression(self, request: operations.ChangeGzipCompressionRequest) -> operations.ChangeGzipCompressionResponse:
        r"""Enable/disable GZIP compression"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangeGzipCompressionRequest, base_url, '/linuxhostings/{domainName}/settings/gzipcompression', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "gzip_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ChangeGzipCompressionRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeGzipCompressionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def change_lets_encrypt(self, request: operations.ChangeLetsEncryptRequest) -> operations.ChangeLetsEncryptResponse:
        r"""Configure let's encrypt"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangeLetsEncryptRequest, base_url, '/linuxhostings/{domainName}/sslsettings/{hostname}/letsencrypt', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "lets_encrypt_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ChangeLetsEncryptRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeLetsEncryptResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def change_php_memory_limit(self, request: operations.ChangePhpMemoryLimitRequest) -> operations.ChangePhpMemoryLimitResponse:
        r"""Configure PHP memory limit"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangePhpMemoryLimitRequest, base_url, '/linuxhostings/{domainName}/phpsettings/memorylimit', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_php_memory_limit_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ChangePhpMemoryLimitRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangePhpMemoryLimitResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def change_php_version(self, request: operations.ChangePhpVersionRequest) -> operations.ChangePhpVersionResponse:
        r"""Change the Linux hosting PHP version."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangePhpVersionRequest, base_url, '/linuxhostings/{domainName}/phpsettings/version', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "php_version", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ChangePhpVersionRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangePhpVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def configure_ftp(self, request: operations.ConfigureFtpRequest) -> operations.ConfigureFtpResponse:
        r"""Configure FTP"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConfigureFtpRequest, base_url, '/linuxhostings/{domainName}/ftp/configuration', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "ftp_configuration", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ConfigureFtpRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfigureFtpResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def configure_http2(self, request: operations.ConfigureHttp2Request) -> operations.ConfigureHttp2Response:
        r"""Configure HTTP/2"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConfigureHttp2Request, base_url, '/linuxhostings/{domainName}/sites/{siteName}/http2/configuration', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "http2_configuration", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ConfigureHttp2Request, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfigureHttp2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def configure_scheduled_task(self, request: operations.ConfigureScheduledTaskRequest) -> operations.ConfigureScheduledTaskResponse:
        r"""Configure a scheduled task"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConfigureScheduledTaskRequest, base_url, '/linuxhostings/{domainName}/scheduledtasks/{scheduledTaskId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "scheduled_task", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ConfigureScheduledTaskRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfigureScheduledTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def configure_ssh(self, request: operations.ConfigureSSHRequest) -> operations.ConfigureSSHResponse:
        r"""Configure SSH"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConfigureSSHRequest, base_url, '/linuxhostings/{domainName}/ssh/configuration', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "ssh_configuration", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ConfigureSSHRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfigureSSHResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_host_header(self, request: operations.CreateHostHeaderRequest) -> operations.CreateHostHeaderResponse:
        r"""Create a host header"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateHostHeaderRequest, base_url, '/linuxhostings/{domainName}/sites/{siteName}/hostheaders', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_host_header_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CreateHostHeaderRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateHostHeaderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            

        return res

    def create_subsite(self, request: operations.CreateSubsiteRequest) -> operations.CreateSubsiteResponse:
        r"""Create a subsite"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateSubsiteRequest, base_url, '/linuxhostings/{domainName}/subsites', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_subsite_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CreateSubsiteRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSubsiteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            

        return res

    def delete_scheduled_task(self, request: operations.DeleteScheduledTaskRequest) -> operations.DeleteScheduledTaskResponse:
        r"""Delete a scheduled task"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteScheduledTaskRequest, base_url, '/linuxhostings/{domainName}/scheduledtasks/{scheduledTaskId}', request)
        
        query_params = utils.get_query_params(operations.DeleteScheduledTaskRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteScheduledTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_ssh_key(self, request: operations.DeleteSSHKeyRequest) -> operations.DeleteSSHKeyResponse:
        r"""Delete a SSH key"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSSHKeyRequest, base_url, '/linuxhostings/{domainName}/ssh/keys/{fingerprint}', request)
        
        query_params = utils.get_query_params(operations.DeleteSSHKeyRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSSHKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_subsite(self, request: operations.DeleteSubsiteRequest) -> operations.DeleteSubsiteResponse:
        r"""Delete a subsite"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSubsiteRequest, base_url, '/linuxhostings/{domainName}/subsites/{siteName}', request)
        
        query_params = utils.get_query_params(operations.DeleteSubsiteRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSubsiteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_available_php_versions(self, request: operations.GetAvailablePhpVersionsRequest) -> operations.GetAvailablePhpVersionsResponse:
        r"""Get the available PHP versions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAvailablePhpVersionsRequest, base_url, '/linuxhostings/{domainName}/phpsettings/availableversions', request)
        
        query_params = utils.get_query_params(operations.GetAvailablePhpVersionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAvailablePhpVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PhpVersion]])
                res.php_versions = out

        return res

    def get_linux_hosting(self, request: operations.GetLinuxHostingRequest) -> operations.GetLinuxHostingResponse:
        r"""Linux hosting detail"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetLinuxHostingRequest, base_url, '/linuxhostings/{domainName}', request)
        
        query_params = utils.get_query_params(operations.GetLinuxHostingRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLinuxHostingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinuxHostingDetail])
                res.linux_hosting_detail = out

        return res

    def get_linux_hostings(self, request: operations.GetLinuxHostingsRequest) -> operations.GetLinuxHostingsResponse:
        r"""Overview of linux hostings"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/linuxhostings'
        
        query_params = utils.get_query_params(operations.GetLinuxHostingsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLinuxHostingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.LinuxHosting]])
                res.linux_hostings = out

        return res

    def get_scheduled_task(self, request: operations.GetScheduledTaskRequest) -> operations.GetScheduledTaskResponse:
        r"""Get scheduled task detail"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetScheduledTaskRequest, base_url, '/linuxhostings/{domainName}/scheduledtasks/{scheduledTaskId}', request)
        
        query_params = utils.get_query_params(operations.GetScheduledTaskRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetScheduledTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScheduledTask])
                res.scheduled_task = out

        return res

    def get_scheduled_tasks(self, request: operations.GetScheduledTasksRequest) -> operations.GetScheduledTasksResponse:
        r"""Overview of scheduled tasks
        Manage scheduled tasks which are also manageable via the control panel.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetScheduledTasksRequest, base_url, '/linuxhostings/{domainName}/scheduledtasks', request)
        
        query_params = utils.get_query_params(operations.GetScheduledTasksRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetScheduledTasksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ScheduledTask]])
                res.scheduled_tasks = out

        return res

    def get_ssh_keys(self, request: operations.GetSSHKeysRequest) -> operations.GetSSHKeysResponse:
        r"""Overview of SSH keys"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSSHKeysRequest, base_url, '/linuxhostings/{domainName}/ssh/keys', request)
        
        query_params = utils.get_query_params(operations.GetSSHKeysRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSSHKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SSHKey]])
                res.ssh_keys = out

        return res

    