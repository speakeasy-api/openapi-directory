/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AggregatedUtterancesSummary } from "./aggregatedutterancessummary";
import { UtteranceAggregationDuration } from "./utteranceaggregationduration";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class ListAggregatedUtterancesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: AggregatedUtterancesSummary })
  @Expose({ name: "aggregatedUtterancesSummaries" })
  @Type(() => AggregatedUtterancesSummary)
  aggregatedUtterancesSummaries?: AggregatedUtterancesSummary[];

  @SpeakeasyMetadata()
  @Expose({ name: "aggregationDuration" })
  @Type(() => UtteranceAggregationDuration)
  aggregationDuration?: UtteranceAggregationDuration;

  @SpeakeasyMetadata()
  @Expose({ name: "aggregationLastRefreshedDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  aggregationLastRefreshedDateTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "aggregationWindowEndTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  aggregationWindowEndTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "aggregationWindowStartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  aggregationWindowStartTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "botAliasId" })
  botAliasId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "botId" })
  botId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "botVersion" })
  botVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "localeId" })
  localeId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;
}
