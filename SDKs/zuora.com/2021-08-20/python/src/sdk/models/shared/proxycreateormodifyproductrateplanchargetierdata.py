"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProxyCreateOrModifyProductRatePlanChargeTierDataProductRatePlanChargeTierPriceFormatEnum(str, Enum):
    r"""Indicates if pricing is a flat fee or is per unit. This field is for tiered and volume pricing models only."""
    FLAT_FEE = 'Flat Fee'
    PER_UNIT = 'Per Unit'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProxyCreateOrModifyProductRatePlanChargeTierDataProductRatePlanChargeTier:
    
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency'), 'exclude': lambda f: f is None }})
    r"""The code corresponding to the currency for the tier's price."""  
    discount_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DiscountAmount'), 'exclude': lambda f: f is None }})
    r"""The specific amount for a fixed discount. Required if the charge model of the product rate plan charge is `Discount-Fixed Amount`."""  
    discount_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DiscountPercentage'), 'exclude': lambda f: f is None }})
    r"""The percentage of discount for a percentage discount. Required if the charge model of the product rate plan charge is `Discount-Percentage`."""  
    ending_unit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndingUnit'), 'exclude': lambda f: f is None }})
    r"""The end number of a range of units for the tier. Required if the charge model of the product rate plan charge is `Tiered Pricing` or `Tiered with Overage Pricing`."""  
    is_overage_price: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsOveragePrice'), 'exclude': lambda f: f is None }})
    r"""Indicates if the price is an overage price, which is the price when usage surpasses the last defined tier."""  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Price'), 'exclude': lambda f: f is None }})
    r"""The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing."""  
    price_format: Optional[ProxyCreateOrModifyProductRatePlanChargeTierDataProductRatePlanChargeTierPriceFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PriceFormat'), 'exclude': lambda f: f is None }})
    r"""Indicates if pricing is a flat fee or is per unit. This field is for tiered and volume pricing models only."""  
    starting_unit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartingUnit'), 'exclude': lambda f: f is None }})
    r"""The starting number of a range of units for the tier. Required if the charge model of the product rate plan charge is `Tiered Pricing` or `Tiered with Overage Pricing`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProxyCreateOrModifyProductRatePlanChargeTierData:
    r"""Container for pricing information associated with the product rate plan charge."""
    
    product_rate_plan_charge_tier: Optional[list[ProxyCreateOrModifyProductRatePlanChargeTierDataProductRatePlanChargeTier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductRatePlanChargeTier'), 'exclude': lambda f: f is None }})
    r"""Array of product rate plan charge tiers.
    
    You should specify all relevant fields of all tiers, including pricing information for each currency.
    
    For each currency, ensure that the tiers appear in ascending order of `StartingUnit`.
    
    For example:
    
    ```
    [
      {
        \"StartingUnit\": \"1\",
        \"EndingUnit\": \"150\",
        \"Currency\": \"USD\",
        \"Price\": 1.95,
        \"PriceFormat\": \"Per Unit\"
      },
      {
        \"StartingUnit\": \"151\",
        \"EndingUnit\": \"300\",
        \"Currency\": \"USD\",
        \"Price\": 1.45,
        \"PriceFormat\": \"Per Unit\"
      },
      {
        \"StartingUnit\": \"1\",
        \"EndingUnit\": \"150\",
        \"Currency\": \"EUR\",
        \"Price\": 1.75,
        \"PriceFormat\": \"Per Unit\"
      },
      {
        \"StartingUnit\": \"151\",
        \"EndingUnit\": \"300\",
        \"Currency\": \"EUR\",
        \"Price\": 1.30,
        \"PriceFormat\": \"Per Unit\"
      }
    ]
    ```
    """  
    