// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PlayerFriendStatusEnum - The friend status of the given player, relative to the requester. This is unset if the player is not sharing their friends list with the game.
type PlayerFriendStatusEnum string

const (
	PlayerFriendStatusEnumFriendStatusUnspecified PlayerFriendStatusEnum = "FRIEND_STATUS_UNSPECIFIED"
	PlayerFriendStatusEnumNoRelationship          PlayerFriendStatusEnum = "NO_RELATIONSHIP"
	PlayerFriendStatusEnumFriend                  PlayerFriendStatusEnum = "FRIEND"
)

func (e PlayerFriendStatusEnum) ToPointer() *PlayerFriendStatusEnum {
	return &e
}

func (e *PlayerFriendStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FRIEND_STATUS_UNSPECIFIED":
		fallthrough
	case "NO_RELATIONSHIP":
		fallthrough
	case "FRIEND":
		*e = PlayerFriendStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlayerFriendStatusEnum: %v", v)
	}
}

// PlayerName - A representation of the individual components of the name.
type PlayerName struct {
	// The family name of this player. In some places, this is known as the last name.
	FamilyName *string `json:"familyName,omitempty"`
	// The given name of this player. In some places, this is known as the first name.
	GivenName *string `json:"givenName,omitempty"`
}

// Player - A Player resource.
type Player struct {
	// The base URL for the image that represents the player.
	AvatarImageURL *string `json:"avatarImageUrl,omitempty"`
	// The url to the landscape mode player banner image.
	BannerURLLandscape *string `json:"bannerUrlLandscape,omitempty"`
	// The url to the portrait mode player banner image.
	BannerURLPortrait *string `json:"bannerUrlPortrait,omitempty"`
	// The name to display for the player.
	DisplayName *string `json:"displayName,omitempty"`
	// 1P/3P metadata about the player's experience.
	ExperienceInfo *PlayerExperienceInfo `json:"experienceInfo,omitempty"`
	// The friend status of the given player, relative to the requester. This is unset if the player is not sharing their friends list with the game.
	FriendStatus *PlayerFriendStatusEnum `json:"friendStatus,omitempty"`
	// Per-application unique player identifier.
	GamePlayerID *string `json:"gamePlayerId,omitempty"`
	// Uniquely identifies the type of this resource. Value is always the fixed string `games#player`
	Kind *string `json:"kind,omitempty"`
	// A representation of the individual components of the name.
	Name *PlayerName `json:"name,omitempty"`
	// The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs.
	OriginalPlayerID *string `json:"originalPlayerId,omitempty"`
	// The ID of the player.
	PlayerID *string `json:"playerId,omitempty"`
	// Profile settings
	ProfileSettings *ProfileSettings `json:"profileSettings,omitempty"`
	// The player's title rewarded for their game activities.
	Title *string `json:"title,omitempty"`
}
