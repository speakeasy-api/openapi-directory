// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// CallDirectionEnum - Direction of the call
type CallDirectionEnum string

const (
	CallDirectionEnumInbound  CallDirectionEnum = "INBOUND"
	CallDirectionEnumOutbound CallDirectionEnum = "OUTBOUND"
)

func (e *CallDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INBOUND":
		fallthrough
	case "OUTBOUND":
		*e = CallDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CallDirectionEnum: %s", s)
	}
}

// CallStateEnum - Status of the call
type CallStateEnum string

const (
	CallStateEnumInitializing CallStateEnum = "INITIALIZING"
	CallStateEnumRinging      CallStateEnum = "RINGING"
	CallStateEnumActive       CallStateEnum = "ACTIVE"
	CallStateEnumHeld         CallStateEnum = "HELD"
	CallStateEnumRemoteHeld   CallStateEnum = "REMOTE_HELD"
	CallStateEnumDetached     CallStateEnum = "DETACHED"
	CallStateEnumRejected     CallStateEnum = "REJECTED"
	CallStateEnumCancelled    CallStateEnum = "CANCELLED"
	CallStateEnumAnswered     CallStateEnum = "ANSWERED"
	CallStateEnumMissed       CallStateEnum = "MISSED"
)

func (e *CallStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INITIALIZING":
		fallthrough
	case "RINGING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "HELD":
		fallthrough
	case "REMOTE_HELD":
		fallthrough
	case "DETACHED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "ANSWERED":
		fallthrough
	case "MISSED":
		*e = CallStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CallStateEnum: %s", s)
	}
}

// CallTypeEnum - Record type
type CallTypeEnum string

const (
	CallTypeEnumCall CallTypeEnum = "CALL"
)

func (e *CallTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CALL":
		*e = CallTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CallTypeEnum: %s", s)
	}
}

// Call - Successful
type Call struct {
	// Unique identifier of the account
	AccountID int64 `json:"accountId"`
	// Time to answer the call
	AnswerTime *types.Date `json:"answerTime,omitempty"`
	// Remote caller ID
	CallerID *string `json:"callerId,omitempty"`
	// Direction of the call
	Direction CallDirectionEnum `json:"direction"`
	// Duration of the call in milliseconds
	Duration int64 `json:"duration"`
	// End time of the call
	EndTime *types.Date `json:"endTime,omitempty"`
	// External identifier of the call
	ExternalID *string `json:"externalId,omitempty"`
	// Unique identifier of the call
	ID int64 `json:"id"`
	// Unique identifier of the account
	PhoneNumber string `json:"phoneNumber"`
	// Start time of the call
	StartTime types.Date `json:"startTime"`
	// Status of the call
	State CallStateEnum `json:"state"`
	// Record type
	Type CallTypeEnum `json:"type"`
	// Unique identifier of communications provider
	UciID int64 `json:"uciId"`
	// Unique identifier of the user
	UserID int64 `json:"userId"`
}
