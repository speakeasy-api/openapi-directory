// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnum string

const (
	GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnumUnknown GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnum = ""
	GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnumN       GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnum = "N"
	GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnumA       GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnum = "A"
	GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnumT       GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnum = "T"
	GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnumC       GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnum = "C"
	GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnumM       GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnum = "M"
	GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnumS       GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnum = "S"
)

func (e *GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "N":
		fallthrough
	case "A":
		fallthrough
	case "T":
		fallthrough
	case "C":
		fallthrough
	case "M":
		fallthrough
	case "S":
		*e = GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnum: %s", s)
	}
}

// GetCommitteeCommitteeIDFilingsFilerTypeEnum - The method used to file with the FEC, either electronic or on paper.
type GetCommitteeCommitteeIDFilingsFilerTypeEnum string

const (
	GetCommitteeCommitteeIDFilingsFilerTypeEnumEFile GetCommitteeCommitteeIDFilingsFilerTypeEnum = "e-file"
	GetCommitteeCommitteeIDFilingsFilerTypeEnumPaper GetCommitteeCommitteeIDFilingsFilerTypeEnum = "paper"
)

func (e *GetCommitteeCommitteeIDFilingsFilerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "e-file":
		fallthrough
	case "paper":
		*e = GetCommitteeCommitteeIDFilingsFilerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommitteeCommitteeIDFilingsFilerTypeEnum: %s", s)
	}
}

type GetCommitteeCommitteeIDFilingsOfficeEnum string

const (
	GetCommitteeCommitteeIDFilingsOfficeEnumUnknown GetCommitteeCommitteeIDFilingsOfficeEnum = ""
	GetCommitteeCommitteeIDFilingsOfficeEnumH       GetCommitteeCommitteeIDFilingsOfficeEnum = "H"
	GetCommitteeCommitteeIDFilingsOfficeEnumS       GetCommitteeCommitteeIDFilingsOfficeEnum = "S"
	GetCommitteeCommitteeIDFilingsOfficeEnumP       GetCommitteeCommitteeIDFilingsOfficeEnum = "P"
)

func (e *GetCommitteeCommitteeIDFilingsOfficeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "H":
		fallthrough
	case "S":
		fallthrough
	case "P":
		*e = GetCommitteeCommitteeIDFilingsOfficeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommitteeCommitteeIDFilingsOfficeEnum: %s", s)
	}
}

type GetCommitteeCommitteeIDFilingsRequest struct {
	// Amendent types:
	//     -N   new
	//     -A   amendment
	//     -T   terminated
	//     -C   consolidated
	//     -M   multi-candidate
	//     -S   secondary
	//
	// NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
	//
	AmendmentIndicator []GetCommitteeCommitteeIDFilingsAmendmentIndicatorEnum `queryParam:"style=form,explode=true,name=amendment_indicator"`
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// Unique identifier for the electronic or paper report. This number is used to construct
	// PDF URLs to the original document.
	//
	BeginningImageNumber []string `queryParam:"style=form,explode=true,name=beginning_image_number"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID string `pathParam:"style=simple,explode=false,name=committee_id"`
	// The one-letter type code of the organization:
	//         - C communication cost
	//         - D delegate
	//         - E electioneering communication
	//         - H House
	//         - I independent expenditure filer (not a committee)
	//         - N PAC - nonqualified
	//         - O independent expenditure-only (super PACs)
	//         - P presidential
	//         - Q PAC - qualified
	//         - S Senate
	//         - U single candidate independent expenditure
	//         - V PAC with non-contribution account, nonqualified
	//         - W PAC with non-contribution account, qualified
	//         - X party, nonqualified
	//         - Y party, qualified
	//         - Z national party non-federal account
	//
	CommitteeType *string `queryParam:"style=form,explode=true,name=committee_type"`
	// Filter records to only those that were applicable to a given
	// two-year period.The cycle begins with an odd year and is named
	// for its ending, even year.
	//
	Cycle []int `queryParam:"style=form,explode=true,name=cycle"`
	// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
	District []string `queryParam:"style=form,explode=true,name=district"`
	// The type of document for documents other than reports:
	//     - 2 24 Hour Contribution Notice
	//     - 4 48 Hour Contribution Notice
	//     - A Debt Settlement Statement
	//     - B Acknowledgment of Receipt of Debt Settlement Statement
	//     - C RFAI: Debt Settlement First Notice
	//     - D Commission Debt Settlement Review
	//     - E Commission Response TO Debt Settlement Request
	//     - F Administrative Termination
	//     - G Debt Settlement Plan Amendment
	//     - H Disavowal Notice
	//     - I Disavowal Response
	//     - J Conduit Report
	//     - K Termination Approval
	//     - L Repeat Non-Filer Notice
	//     - M Filing Frequency Change Notice
	//     - N Paper Amendment to Electronic Report
	//     - O Acknowledgment of Filing Frequency Change
	//     - S RFAI: Debt Settlement Second
	//     - T Miscellaneous Report TO FEC
	//     - V Repeat Violation Notice (441A OR 441B)
	//     - P Notice of Paper Filing
	//     - R F3L Filing Frequency Change Notice
	//     - Q Acknowledgment of F3L Filing Frequency Change
	//     - U Unregistered Committee Notice
	//
	DocumentType []string `queryParam:"style=form,explode=true,name=document_type"`
	// Filing ID number
	FileNumber []int `queryParam:"style=form,explode=true,name=file_number"`
	// The method used to file with the FEC, either electronic or on paper.
	FilerType *GetCommitteeCommitteeIDFilingsFilerTypeEnum `queryParam:"style=form,explode=true,name=filer_type"`
	// The forms filed are categorized based on the nature of the filing:
	//     - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13
	//     - NOTICE F5, F24, F6, F9, F10, F11
	//     - STATEMENT F1, F2
	//     - OTHER F1M, F8, F99, F12, FRQ
	//
	FormCategory []string `queryParam:"style=form,explode=true,name=form_category"`
	// The form where the underlying data comes from, for example, Form 1 would appear as F1:
	//     - F1   Statement of Organization
	//     - F1M  Notification of Multicandidate Status
	//     - F2   Statement of Candidacy
	//     - F3   Report of Receipts and Disbursements for an Authorized Committee
	//     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
	//     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
	//     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
	//     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
	//     - F5   Report of Independent Expenditures Made and Contributions Received
	//     - F6   48 Hour Notice of Contributions/Loans Received
	//     - F7   Report of Communication Costs by Corporations and Membership Organizations
	//     - F8   Debt Settlement Plan
	//     - F9   24 Hour Notice of Disbursements for Electioneering Communications
	//     - F13  Report of Donations Accepted for Inaugural Committee
	//     - F99  Miscellaneous Text
	//     - FRQ  Request for Additional Information
	//
	FormType []string `queryParam:"style=form,explode=true,name=form_type"`
	// False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
	//
	IsAmended *bool `queryParam:"style=form,explode=true,name=is_amended"`
	// Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
	//
	MaxReceiptDate *types.Date `queryParam:"style=form,explode=true,name=max_receipt_date"`
	// Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
	//
	MinReceiptDate *types.Date `queryParam:"style=form,explode=true,name=min_receipt_date"`
	// Report is either new or is the most-recently filed amendment
	//
	MostRecent *bool `queryParam:"style=form,explode=true,name=most_recent"`
	// Federal office candidate runs for: H, S or P
	Office []GetCommitteeCommitteeIDFilingsOfficeEnum `queryParam:"style=form,explode=true,name=office"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
	Party []string `queryParam:"style=form,explode=true,name=party"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Primary, general or special election indicator.
	//
	PrimaryGeneralIndicator []string `queryParam:"style=form,explode=true,name=primary_general_indicator"`
	// Keyword search for filer name or ID
	//
	QFiler []string `queryParam:"style=form,explode=true,name=q_filer"`
	// Name of report where the underlying data comes from:
	//     - 10D Pre-Election
	//     - 10G Pre-General
	//     - 10P Pre-Primary
	//     - 10R Pre-Run-Off
	//     - 10S Pre-Special
	//     - 12C Pre-Convention
	//     - 12G Pre-General
	//     - 12P Pre-Primary
	//     - 12R Pre-Run-Off
	//     - 12S Pre-Special
	//     - 30D Post-Election
	//     - 30G Post-General
	//     - 30P Post-Primary
	//     - 30R Post-Run-Off
	//     - 30S Post-Special
	//     - 60D Post-Convention
	//     - M1  January Monthly
	//     - M10 October Monthly
	//     - M11 November Monthly
	//     - M12 December Monthly
	//     - M2  February Monthly
	//     - M3  March Monthly
	//     - M4  April Monthly
	//     - M5  May Monthly
	//     - M6  June Monthly
	//     - M7  July Monthly
	//     - M8  August Monthly
	//     - M9  September Monthly
	//     - MY  Mid-Year Report
	//     - Q1  April Quarterly
	//     - Q2  July Quarterly
	//     - Q3  October Quarterly
	//     - TER Termination Report
	//     - YE  Year-End
	//     - ADJ COMP ADJUST AMEND
	//     - CA  COMPREHENSIVE AMEND
	//     - 90S Post Inaugural Supplement
	//     - 90D Post Inaugural
	//     - 48  48 Hour Notification
	//     - 24  24 Hour Notification
	//     - M7S July Monthly/Semi-Annual
	//     - MSA Monthly Semi-Annual (MY)
	//     - MYS Monthly Year End/Semi-Annual
	//     - Q2S July Quarterly/Semi-Annual
	//     - QSA Quarterly Semi-Annual (MY)
	//     - QYS Quarterly Year End/Semi-Annual
	//     - QYE Quarterly Semi-Annual (YE)
	//     - QMS Quarterly Mid-Year/ Semi-Annual
	//     - MSY Monthly Semi-Annual (YE)
	//
	ReportType []string `queryParam:"style=form,explode=true,name=report_type"`
	// Forms with coverage date -
	//     year from the coverage ending date.
	// Forms without coverage date -
	//     year from the receipt date.
	//
	ReportYear []int `queryParam:"style=form,explode=true,name=report_year"`
	// Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:
	//     - 1 Statement of Organization
	//     - 2 Report of Receipts and Expenditures (Form 3 and 3X)
	//     - 3 Second Notice - Reports
	//     - 4 Request for Additional Information
	//     - 5 Informational - Reports
	//     - 6 Second Notice - Statement of Organization
	//     - 7 Failure to File
	//     - 8 From Public Disclosure
	//     - 9 From Multi Candidate Status
	//
	RequestType []string `queryParam:"style=form,explode=true,name=request_type"`
	// Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
	//
	Sort []string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	// US state or territory where a candidate runs for office
	State []string `queryParam:"style=form,explode=true,name=state"`
}

type GetCommitteeCommitteeIDFilingsResponse struct {
	ContentType string
	FilingsPage *shared.FilingsPage
	StatusCode  int
	RawResponse *http.Response
}
