// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreatePredictorXAmzTargetEnum
type CreatePredictorXAmzTargetEnum string

const (
	CreatePredictorXAmzTargetEnumAmazonForecastCreatePredictor CreatePredictorXAmzTargetEnum = "AmazonForecast.CreatePredictor"
)

func (e *CreatePredictorXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonForecast.CreatePredictor":
		*e = CreatePredictorXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePredictorXAmzTargetEnum: %s", s)
	}
}

type CreatePredictorRequest struct {
	CreatePredictorRequest shared.CreatePredictorRequest `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             CreatePredictorXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreatePredictorResponse struct {
	ContentType string
	// Success
	CreatePredictorResponse *shared.CreatePredictorResponse
	// InvalidInputException
	InvalidInputException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
}
