"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import ext_enum as shared_ext_enum
from ..shared import versionnumber_enum as shared_versionnumber_enum
from typing import Optional


@dataclasses.dataclass
class GetSearchVersionNumberReverseGeocodePositionExtRequest:
    
    ext: shared_ext_enum.ExtEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'ext', 'style': 'simple', 'explode': False }})
    r"""Expected response format."""  
    position: str = dataclasses.field(metadata={'path_param': { 'field_name': 'position', 'style': 'simple', 'explode': False }})
    r"""This is specified as a comma separated string composed of lat., lon."""  
    version_number: shared_versionnumber_enum.VersionNumberEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'versionNumber', 'style': 'simple', 'explode': False }})
    r"""Service version number. The current value is 2."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""Specifies the jsonp callback method."""  
    heading: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'heading', 'style': 'form', 'explode': True }})
    r"""The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.)"""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'number', 'style': 'form', 'explode': True }})
    r"""If a number is sent in along with the request, the response may include the side of the street (Left/Right) and an offset position for that number."""  
    radius: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'radius', 'style': 'form', 'explode': True }})
    r"""The maximum distance in meters from the specified position for the reverse geocoder to consider."""  
    return_road_use: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'returnRoadUse', 'style': 'form', 'explode': True }})
    r"""Enables return of the road use array for reverse geocodes at street level."""  
    return_speed_limit: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'returnSpeedLimit', 'style': 'form', 'explode': True }})
    r"""To enable return of the posted speed limit (where available)."""  
    road_use: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'roadUse', 'style': 'form', 'explode': True }})
    r"""Restricts reverse geocodes to a certain type of road use. The road use array for reverse geocodes can be one or more of: [\\"LimitedAccess\\", \\"Arterial\\", \\"Terminal\\", \\"Ramp\\", \\"Rotary\\", \\"LocalStreet\\"]."""  
    spatial_keys: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'spatialKeys', 'style': 'form', 'explode': True }})
    r"""If the \\"spatialKeys\\" flag is set, the response will also contain a proprietary geospatial keys for a specified location."""  
    

@dataclasses.dataclass
class GetSearchVersionNumberReverseGeocodePositionExtResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    