"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import accessdeniedexception as shared_accessdeniedexception
from ..shared import directorynotenabledexception as shared_directorynotenabledexception
from ..shared import facetvalidationexception as shared_facetvalidationexception
from ..shared import internalserviceexception as shared_internalserviceexception
from ..shared import invalidarnexception as shared_invalidarnexception
from ..shared import invalidnexttokenexception as shared_invalidnexttokenexception
from ..shared import limitexceededexception as shared_limitexceededexception
from ..shared import listindexresponse as shared_listindexresponse
from ..shared import notindexexception as shared_notindexexception
from ..shared import objectattributerange as shared_objectattributerange
from ..shared import resourcenotfoundexception as shared_resourcenotfoundexception
from ..shared import retryableconflictexception as shared_retryableconflictexception
from ..shared import validationexception as shared_validationexception
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListIndexRequestBodyIndexReference:
    r"""The reference that identifies an object."""
    
    selector: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Selector'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListIndexRequestBody:
    
    index_reference: ListIndexRequestBodyIndexReference = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndexReference') }})
    r"""The reference that identifies an object."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxResults'), 'exclude': lambda f: f is None }})
    r"""The maximum number of objects in a single page to retrieve from the index during a request. For more information, see <a href=\\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/limits.html#limits_cd\\">AWS Directory Service Limits</a>."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextToken'), 'exclude': lambda f: f is None }})
    r"""The pagination token."""  
    ranges_on_indexed_values: Optional[list[shared_objectattributerange.ObjectAttributeRange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RangesOnIndexedValues'), 'exclude': lambda f: f is None }})
    r"""Specifies the ranges of indexed values that you want to query."""  
    
class ListIndexXAmzConsistencyLevelEnum(str, Enum):
    r"""The consistency level to execute the request at."""
    SERIALIZABLE = 'SERIALIZABLE'
    EVENTUAL = 'EVENTUAL'


@dataclasses.dataclass
class ListIndexRequest:
    
    request_body: ListIndexRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_data_partition: str = dataclasses.field(metadata={'header': { 'field_name': 'x-amz-data-partition', 'style': 'simple', 'explode': False }})
    r"""The ARN of the directory that the index exists in."""  
    max_results: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxResults', 'style': 'form', 'explode': True }})
    r"""Pagination limit"""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})
    r"""Pagination token"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_consistency_level: Optional[ListIndexXAmzConsistencyLevelEnum] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'x-amz-consistency-level', 'style': 'simple', 'explode': False }})
    r"""The consistency level to execute the request at."""  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListIndexResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[shared_accessdeniedexception.AccessDeniedException] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    directory_not_enabled_exception: Optional[shared_directorynotenabledexception.DirectoryNotEnabledException] = dataclasses.field(default=None)
    r"""DirectoryNotEnabledException"""  
    facet_validation_exception: Optional[shared_facetvalidationexception.FacetValidationException] = dataclasses.field(default=None)
    r"""FacetValidationException"""  
    internal_service_exception: Optional[shared_internalserviceexception.InternalServiceException] = dataclasses.field(default=None)
    r"""InternalServiceException"""  
    invalid_arn_exception: Optional[shared_invalidarnexception.InvalidArnException] = dataclasses.field(default=None)
    r"""InvalidArnException"""  
    invalid_next_token_exception: Optional[shared_invalidnexttokenexception.InvalidNextTokenException] = dataclasses.field(default=None)
    r"""InvalidNextTokenException"""  
    limit_exceeded_exception: Optional[shared_limitexceededexception.LimitExceededException] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    list_index_response: Optional[shared_listindexresponse.ListIndexResponse] = dataclasses.field(default=None)
    r"""Success"""  
    not_index_exception: Optional[shared_notindexexception.NotIndexException] = dataclasses.field(default=None)
    r"""NotIndexException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[shared_resourcenotfoundexception.ResourceNotFoundException] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    retryable_conflict_exception: Optional[shared_retryableconflictexception.RetryableConflictException] = dataclasses.field(default=None)
    r"""RetryableConflictException"""  
    validation_exception: Optional[shared_validationexception.ValidationException] = dataclasses.field(default=None)
    r"""ValidationException"""  
    