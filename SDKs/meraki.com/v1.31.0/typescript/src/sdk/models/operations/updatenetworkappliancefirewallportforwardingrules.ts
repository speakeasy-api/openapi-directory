/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * TCP or UDP
 */
export enum UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesProtocolEnum {
  Tcp = "tcp",
  Udp = "udp",
}

/**
 * The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2' or 'both')
 */
export enum UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesUplinkEnum {
  Both = "both",
  Internet1 = "internet1",
  Internet2 = "internet2",
}

export class UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRules extends SpeakeasyBase {
  /**
   * An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges (or any)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowedIps" })
  allowedIps: string[];

  /**
   * The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lanIp" })
  lanIp: string;

  /**
   * A port or port ranges that will receive the forwarded traffic from the WAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "localPort" })
  localPort: string;

  /**
   * A descriptive name for the rule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * TCP or UDP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol: UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesProtocolEnum;

  /**
   * A port or port ranges that will be forwarded to the host on the LAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publicPort" })
  publicPort: string;

  /**
   * The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2' or 'both')
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uplink" })
  uplink?: UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesUplinkEnum;
}

export class UpdateNetworkApplianceFirewallPortForwardingRulesRequestBody extends SpeakeasyBase {
  /**
   * An array of port forwarding params
   */
  @SpeakeasyMetadata({
    elemType: UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRules,
  })
  @Expose({ name: "rules" })
  @Type(() => UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRules)
  rules: UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRules[];
}

export class UpdateNetworkApplianceFirewallPortForwardingRulesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateNetworkApplianceFirewallPortForwardingRulesRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

export class UpdateNetworkApplianceFirewallPortForwardingRulesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkApplianceFirewallPortForwardingRules200ApplicationJSONObject?: Record<
    string,
    any
  >;
}
