"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from enum import Enum
from typing import Optional

class DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnum(str, Enum):
    r"""The state of the CIDR block."""
    ASSOCIATING = 'associating'
    ASSOCIATED = 'associated'
    DISASSOCIATING = 'disassociating'
    DISASSOCIATED = 'disassociated'
    FAILING = 'failing'
    FAILED = 'failed'


@dataclasses.dataclass
class DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockState:
    r"""Information about the state of the CIDR block."""
    
    state: Optional[DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockStateStateEnum] = dataclasses.field(default=None)  
    status_message: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class DescribeVpcsResultVpcsCidrBlockAssociationSet:
    r"""Describes an IPv4 CIDR block associated with a VPC."""
    
    association_id: Optional[str] = dataclasses.field(default=None)  
    cidr_block: Optional[str] = dataclasses.field(default=None)  
    cidr_block_state: Optional[DescribeVpcsResultVpcsCidrBlockAssociationSetCidrBlockState] = dataclasses.field(default=None)  
    
class DescribeVpcsResultVpcsInstanceTenancyEnum(str, Enum):
    r"""The allowed tenancy of instances launched into the VPC."""
    DEFAULT = 'default'
    DEDICATED = 'dedicated'
    HOST = 'host'

class DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum(str, Enum):
    r"""The state of the CIDR block."""
    ASSOCIATING = 'associating'
    ASSOCIATED = 'associated'
    DISASSOCIATING = 'disassociating'
    DISASSOCIATED = 'disassociated'
    FAILING = 'failing'
    FAILED = 'failed'


@dataclasses.dataclass
class DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockState:
    r"""Information about the state of the CIDR block."""
    
    state: Optional[DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum] = dataclasses.field(default=None)  
    status_message: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class DescribeVpcsResultVpcsIpv6CidrBlockAssociationSet:
    r"""Describes an IPv6 CIDR block associated with a VPC."""
    
    association_id: Optional[str] = dataclasses.field(default=None)  
    ipv6_cidr_block: Optional[str] = dataclasses.field(default=None)  
    ipv6_cidr_block_state: Optional[DescribeVpcsResultVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockState] = dataclasses.field(default=None)  
    ipv6_pool: Optional[str] = dataclasses.field(default=None)  
    network_border_group: Optional[str] = dataclasses.field(default=None)  
    
class DescribeVpcsResultVpcsStateEnum(str, Enum):
    r"""The current state of the VPC."""
    PENDING = 'pending'
    AVAILABLE = 'available'


@dataclasses.dataclass
class DescribeVpcsResultVpcsTags:
    r"""Describes a tag."""
    
    key: Optional[str] = dataclasses.field(default=None)  
    value: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class DescribeVpcsResultVpcs:
    r"""Describes a VPC."""
    
    cidr_block: Optional[str] = dataclasses.field(default=None)  
    cidr_block_association_set: Optional[list[DescribeVpcsResultVpcsCidrBlockAssociationSet]] = dataclasses.field(default=None)  
    dhcp_options_id: Optional[str] = dataclasses.field(default=None)  
    instance_tenancy: Optional[DescribeVpcsResultVpcsInstanceTenancyEnum] = dataclasses.field(default=None)  
    ipv6_cidr_block_association_set: Optional[list[DescribeVpcsResultVpcsIpv6CidrBlockAssociationSet]] = dataclasses.field(default=None)  
    is_default: Optional[bool] = dataclasses.field(default=None)  
    owner_id: Optional[str] = dataclasses.field(default=None)  
    state: Optional[DescribeVpcsResultVpcsStateEnum] = dataclasses.field(default=None)  
    tags: Optional[list[DescribeVpcsResultVpcsTags]] = dataclasses.field(default=None)  
    vpc_id: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class DescribeVpcsResult:
    r"""Success"""
    
    next_token: Optional[str] = dataclasses.field(default=None)  
    vpcs: Optional[list[DescribeVpcsResultVpcs]] = dataclasses.field(default=None)  
    