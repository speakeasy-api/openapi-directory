"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import table as shared_table
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils

class CheckDetailsGroupEnum(str, Enum):
    r"""table group type"""
    PROFILE = 'profile'
    LEGAL = 'legal'
    AFFILIATIONS = 'affiliations'
    VEHICLE = 'vehicle'
    GLOBAL = 'global'
    MEDIA = 'media'
    UNKNOWN = 'unknown'

class CheckDetailsResultEnum(str, Enum):
    r"""Database result"""
    PENDING = 'pending'
    FOUND = 'found'
    NOT_FOUND = 'not_found'
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckDetails:
    r"""Represents background check details"""
    
    check_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('check_id') }})
    r"""Associated background check ID"""  
    data_set: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data_set') }})
    r"""Details dataset"""  
    database_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('database_name') }})
    r"""Database name. Do not use this field to identify the database as its value may vary as the check is completed"""  
    group: CheckDetailsGroupEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group') }})
    r"""table group type"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Detail ID"""  
    result: CheckDetailsResultEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result') }})
    r"""Database result"""  
    score: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score') }})
    r"""Partial detail score. Scores are aggregated later in the background check"""  
    tables: list[shared_table.Table] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tables') }})
    r"""Query detailed information"""  
    