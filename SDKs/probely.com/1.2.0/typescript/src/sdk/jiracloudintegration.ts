/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * To start integrating Probely with Jira you will first need to add the
 *
 * @remarks
 * Probely app to your Jira instance.
 * Go to the marketplace, search for Probely and install the application.
 * When prompted click the "Get Started" button and follow the steps described
 * to connect both accounts.
 * A short explanation of the sync options can be found
 * [here](https://help.probely.com/integrations/jira-syncronization-settings).
 *
 */
export class JiraCloudIntegration {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List Jira Projects
   */
  getIntegrationsJiraCloudProjects(
    config?: AxiosRequestConfig
  ): Promise<operations.GetIntegrationsJiraCloudProjectsResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/integrations/jira-cloud/projects/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIntegrationsJiraCloudProjectsResponse =
        new operations.GetIntegrationsJiraCloudProjectsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraProjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.jiraProjects = utils.objectToClass(
              httpRes?.data,
              shared.JiraProject,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraCloudProjects401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraCloudProjects401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraCloudProjects403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraCloudProjects403ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve project issue types
   */
  getIntegrationsJiraCloudProjectsProjectIdIssueTypes(
    req: operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/integrations/jira-cloud/projects/{project_id}/issue_types/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesResponse =
        new operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraIssueTypes = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.jiraIssueTypes = utils.objectToClass(
              httpRes?.data,
              shared.JiraIssueType,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraCloudProjectsProjectIdIssueTypes401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypes401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraCloudProjectsProjectIdIssueTypes403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypes403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraCloudProjectsProjectIdIssueTypes404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypes404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve issue priorities
   */
  getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities(
    req: operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPrioritiesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPrioritiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPrioritiesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/integrations/jira-cloud/projects/{project_id}/issue_types/{issue_type_id}/priorities/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPrioritiesResponse =
        new operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPrioritiesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraIssuePriorities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.jiraIssuePriorities = utils.objectToClass(
              httpRes?.data,
              shared.JiraIssuePriority,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdPriorities403ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve issue statuses
   */
  getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus(
    req: operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatusRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatusRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/integrations/jira-cloud/projects/{project_id}/issue_types/{issue_type_id}/status/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatusResponse =
        new operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatusResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraIssueStatuses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.jiraIssueStatuses = utils.objectToClass(
              httpRes?.data,
              shared.JiraIssueStatus,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetIntegrationsJiraCloudProjectsProjectIdIssueTypesIssueTypeIdStatus404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve Jira Cloud finding configuration
   */
  getTargetsTargetIdFindingsIdIntegrationsJiraCloud(
    req: operations.GetTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/findings/{id}/integrations/jira-cloud/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse =
        new operations.GetTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraFinding = utils.objectToClass(
              httpRes?.data,
              shared.JiraFinding
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve Jira Cloud Target configuration
   */
  getTargetsTargetIdIntegrationsJiraCloud(
    req: operations.GetTargetsTargetIdIntegrationsJiraCloudRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdIntegrationsJiraCloudResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdIntegrationsJiraCloudRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/integrations/jira-cloud/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdIntegrationsJiraCloudResponse =
        new operations.GetTargetsTargetIdIntegrationsJiraCloudResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraScope = utils.objectToClass(
              httpRes?.data,
              shared.JiraScope
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdIntegrationsJiraCloud401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdIntegrationsJiraCloud401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdIntegrationsJiraCloud403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdIntegrationsJiraCloud403ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Jira Cloud finding configuration
   */
  patchTargetsTargetIdFindingsIdIntegrationsJiraCloud(
    req: operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/findings/{id}/integrations/jira-cloud/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "jiraFinding",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse =
        new operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraFinding = utils.objectToClass(
              httpRes?.data,
              shared.JiraFinding
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdFindingsIdIntegrationsJiraCloud404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdFindingsIdIntegrationsJiraCloud404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Jira Cloud target configuration
   */
  patchTargetsTargetIdIntegrationsJiraCloud(
    req: operations.PatchTargetsTargetIdIntegrationsJiraCloudRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchTargetsTargetIdIntegrationsJiraCloudResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchTargetsTargetIdIntegrationsJiraCloudRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/integrations/jira-cloud/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "jiraScope",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchTargetsTargetIdIntegrationsJiraCloudResponse =
        new operations.PatchTargetsTargetIdIntegrationsJiraCloudResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraScope = utils.objectToClass(
              httpRes?.data,
              shared.JiraScope
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdIntegrationsJiraCloud401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdIntegrationsJiraCloud401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdIntegrationsJiraCloud403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdIntegrationsJiraCloud403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdIntegrationsJiraCloud404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdIntegrationsJiraCloud404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Jira Cloud finding configuration
   */
  putTargetsTargetIdFindingsIdIntegrationsJiraCloud(
    req: operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloudRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/findings/{id}/integrations/jira-cloud/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "jiraFinding",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse =
        new operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloudResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraFinding = utils.objectToClass(
              httpRes?.data,
              shared.JiraFinding
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloud401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloud403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdFindingsIdIntegrationsJiraCloud404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdFindingsIdIntegrationsJiraCloud404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Jira Cloud target configuration
   */
  putTargetsTargetIdIntegrationsJiraCloud(
    req: operations.PutTargetsTargetIdIntegrationsJiraCloudRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutTargetsTargetIdIntegrationsJiraCloudResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutTargetsTargetIdIntegrationsJiraCloudRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/integrations/jira-cloud/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "jiraScope",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutTargetsTargetIdIntegrationsJiraCloudResponse =
        new operations.PutTargetsTargetIdIntegrationsJiraCloudResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jiraScope = utils.objectToClass(
              httpRes?.data,
              shared.JiraScope
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdIntegrationsJiraCloud401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdIntegrationsJiraCloud401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdIntegrationsJiraCloud403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdIntegrationsJiraCloud403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdIntegrationsJiraCloud404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdIntegrationsJiraCloud404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
