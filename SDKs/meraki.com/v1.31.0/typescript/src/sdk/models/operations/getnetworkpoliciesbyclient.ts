/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetNetworkPoliciesByClientRequest extends SpeakeasyBase {
  /**
   * A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=endingBefore",
  })
  endingBefore?: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;

  /**
   * The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=perPage",
  })
  perPage?: number;

  /**
   * A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=startingAfter",
  })
  startingAfter?: string;

  /**
   * The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=t0" })
  t0?: string;

  /**
   * The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=timespan",
  })
  timespan?: number;
}

export class GetNetworkPoliciesByClient200ApplicationJSONAssignedSsid extends SpeakeasyBase {
  /**
   * number of ssid
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ssidNumber" })
  ssidNumber?: number;
}

export class GetNetworkPoliciesByClient200ApplicationJSONAssigned extends SpeakeasyBase {
  /**
   * id of policy
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groupPolicyId" })
  groupPolicyId?: string;

  /**
   * name of policy
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * ssid
   */
  @SpeakeasyMetadata({
    elemType: GetNetworkPoliciesByClient200ApplicationJSONAssignedSsid,
  })
  @Expose({ name: "ssid" })
  @Type(() => GetNetworkPoliciesByClient200ApplicationJSONAssignedSsid)
  ssid?: GetNetworkPoliciesByClient200ApplicationJSONAssignedSsid[];

  /**
   * type of policy
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class GetNetworkPoliciesByClient200ApplicationJSON extends SpeakeasyBase {
  /**
   * Assigned policies
   */
  @SpeakeasyMetadata({
    elemType: GetNetworkPoliciesByClient200ApplicationJSONAssigned,
  })
  @Expose({ name: "assigned" })
  @Type(() => GetNetworkPoliciesByClient200ApplicationJSONAssigned)
  assigned?: GetNetworkPoliciesByClient200ApplicationJSONAssigned[];

  /**
   * ID of client
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientId" })
  clientId?: string;

  /**
   * Name of client
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class GetNetworkPoliciesByClientResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata({ elemType: GetNetworkPoliciesByClient200ApplicationJSON })
  getNetworkPoliciesByClient200ApplicationJSONObjects?: GetNetworkPoliciesByClient200ApplicationJSON[];
}
