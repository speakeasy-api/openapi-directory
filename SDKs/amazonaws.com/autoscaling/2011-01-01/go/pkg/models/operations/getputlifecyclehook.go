// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETPutLifecycleHookActionEnum
type GETPutLifecycleHookActionEnum string

const (
	GETPutLifecycleHookActionEnumPutLifecycleHook GETPutLifecycleHookActionEnum = "PutLifecycleHook"
)

func (e GETPutLifecycleHookActionEnum) ToPointer() *GETPutLifecycleHookActionEnum {
	return &e
}

func (e *GETPutLifecycleHookActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PutLifecycleHook":
		*e = GETPutLifecycleHookActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPutLifecycleHookActionEnum: %v", v)
	}
}

// GETPutLifecycleHookVersionEnum
type GETPutLifecycleHookVersionEnum string

const (
	GETPutLifecycleHookVersionEnumTwoThousandAndEleven0101 GETPutLifecycleHookVersionEnum = "2011-01-01"
)

func (e GETPutLifecycleHookVersionEnum) ToPointer() *GETPutLifecycleHookVersionEnum {
	return &e
}

func (e *GETPutLifecycleHookVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2011-01-01":
		*e = GETPutLifecycleHookVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPutLifecycleHookVersionEnum: %v", v)
	}
}

type GETPutLifecycleHookRequest struct {
	Action GETPutLifecycleHookActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The name of the Auto Scaling group.
	AutoScalingGroupName string `queryParam:"style=form,explode=true,name=AutoScalingGroupName"`
	// <p>The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is <code>ABANDON</code>.</p> <p>Valid values: <code>CONTINUE</code> | <code>ABANDON</code> </p>
	DefaultResult *string `queryParam:"style=form,explode=true,name=DefaultResult"`
	// The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).
	HeartbeatTimeout *int64 `queryParam:"style=form,explode=true,name=HeartbeatTimeout"`
	// The name of the lifecycle hook.
	LifecycleHookName string `queryParam:"style=form,explode=true,name=LifecycleHookName"`
	// <p>The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.</p> <ul> <li> <p>To create a lifecycle hook for scale-out events, specify <code>autoscaling:EC2_INSTANCE_LAUNCHING</code>.</p> </li> <li> <p>To create a lifecycle hook for scale-in events, specify <code>autoscaling:EC2_INSTANCE_TERMINATING</code>.</p> </li> </ul> <p>Required for new lifecycle hooks, but optional when updating existing hooks.</p>
	LifecycleTransition *string `queryParam:"style=form,explode=true,name=LifecycleTransition"`
	// Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
	NotificationMetadata *string `queryParam:"style=form,explode=true,name=NotificationMetadata"`
	// <p>The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in a wait state for the lifecycle hook. You can specify either an Amazon SNS topic or an Amazon SQS queue.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
	NotificationTargetARN *string `queryParam:"style=form,explode=true,name=NotificationTargetARN"`
	// <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.</p> <p>Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue. Required for new lifecycle hooks, but optional when updating existing hooks.</p>
	RoleARN           *string                        `queryParam:"style=form,explode=true,name=RoleARN"`
	Version           GETPutLifecycleHookVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETPutLifecycleHookResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
