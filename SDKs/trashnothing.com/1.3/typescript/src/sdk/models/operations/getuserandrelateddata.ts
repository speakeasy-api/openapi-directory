/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetUserAndRelatedDataRequest extends SpeakeasyBase {
  /**
   * A user ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=user_id",
  })
  userId: string;
}

/**
 * The user and related data.
 */
export class GetUserAndRelatedData200ApplicationJSON extends SpeakeasyBase {
  /**
   * Feedback the current user has left on the user.
   */
  @SpeakeasyMetadata({ elemType: shared.Feedback })
  @Expose({ name: "feedback" })
  @Type(() => shared.Feedback)
  feedback?: shared.Feedback[];

  /**
   * Count of offer posts made by the user in the last 90 days.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "offer_count" })
  offerCount?: number;

  /**
   * Other active posts from the user in the last 90 days. A maximum of 30 posts will be returned.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ elemType: shared.Post })
  @Expose({ name: "posts" })
  @Type(() => shared.Post)
  posts?: shared.Post[];

  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => shared.User)
  user?: shared.User;

  /**
   * Count of wanted posts made by the user in the last 90 days.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wanted_count" })
  wantedCount?: number;
}

export class GetUserAndRelatedDataResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The user and related data.
   */
  @SpeakeasyMetadata()
  getUserAndRelatedData200ApplicationJSONObject?: GetUserAndRelatedData200ApplicationJSON;
}
