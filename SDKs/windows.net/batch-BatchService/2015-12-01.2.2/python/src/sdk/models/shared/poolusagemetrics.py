"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PoolUsageMetrics:
    r"""Usage metrics for a pool across an aggregation interval."""
    
    data_egress_gi_b: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataEgressGiB') }})
    r"""Gets or sets the cross data center network egress in GiB from the pool during this interval."""  
    data_ingress_gi_b: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataIngressGiB') }})
    r"""Gets or sets the cross data center network ingress in GiB to the pool during this interval."""  
    end_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Gets or sets the end time of the aggregation interval."""  
    pool_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('poolId') }})
    r"""Gets or sets the id of the pool whose metrics are being aggregated."""  
    start_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Gets or sets the start time of the aggregation interval."""  
    total_core_hours: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCoreHours') }})
    r"""Gets or sets the total core hours used in the pool during this aggregation interval."""  
    vm_size: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmSize') }})
    r"""Gets or sets the size of virtual machines in the pool.  All VMs in a pool are the same size."""  
    