// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetOrganizationDevicesStatusesOverviewPathParams struct {
	OrganizationID string `pathParam:"style=simple,explode=false,name=organizationId"`
}

type GetOrganizationDevicesStatusesOverviewProductTypesEnum string

const (
	GetOrganizationDevicesStatusesOverviewProductTypesEnumAppliance       GetOrganizationDevicesStatusesOverviewProductTypesEnum = "appliance"
	GetOrganizationDevicesStatusesOverviewProductTypesEnumCamera          GetOrganizationDevicesStatusesOverviewProductTypesEnum = "camera"
	GetOrganizationDevicesStatusesOverviewProductTypesEnumCellularGateway GetOrganizationDevicesStatusesOverviewProductTypesEnum = "cellularGateway"
	GetOrganizationDevicesStatusesOverviewProductTypesEnumSensor          GetOrganizationDevicesStatusesOverviewProductTypesEnum = "sensor"
	GetOrganizationDevicesStatusesOverviewProductTypesEnumSwitch          GetOrganizationDevicesStatusesOverviewProductTypesEnum = "switch"
	GetOrganizationDevicesStatusesOverviewProductTypesEnumSystemsManager  GetOrganizationDevicesStatusesOverviewProductTypesEnum = "systemsManager"
	GetOrganizationDevicesStatusesOverviewProductTypesEnumWireless        GetOrganizationDevicesStatusesOverviewProductTypesEnum = "wireless"
)

func (e *GetOrganizationDevicesStatusesOverviewProductTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appliance":
		fallthrough
	case "camera":
		fallthrough
	case "cellularGateway":
		fallthrough
	case "sensor":
		fallthrough
	case "switch":
		fallthrough
	case "systemsManager":
		fallthrough
	case "wireless":
		*e = GetOrganizationDevicesStatusesOverviewProductTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesStatusesOverviewProductTypesEnum: %s", s)
	}
}

type GetOrganizationDevicesStatusesOverviewQueryParams struct {
	// An optional parameter to filter device statuses by network.
	NetworkIds []string `queryParam:"style=form,explode=false,name=networkIds"`
	// An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
	ProductTypes []GetOrganizationDevicesStatusesOverviewProductTypesEnum `queryParam:"style=form,explode=false,name=productTypes"`
}

type GetOrganizationDevicesStatusesOverviewRequest struct {
	PathParams  GetOrganizationDevicesStatusesOverviewPathParams
	QueryParams GetOrganizationDevicesStatusesOverviewQueryParams
}

// GetOrganizationDevicesStatusesOverview200ApplicationJSONCountsByStatus - byStatus
type GetOrganizationDevicesStatusesOverview200ApplicationJSONCountsByStatus struct {
	// alerting count
	Alerting *int64 `json:"alerting,omitempty"`
	// dormant count
	Dormant *int64 `json:"dormant,omitempty"`
	// offline count
	Offline *int64 `json:"offline,omitempty"`
	// online count
	Online *int64 `json:"online,omitempty"`
}

// GetOrganizationDevicesStatusesOverview200ApplicationJSONCounts - counts
type GetOrganizationDevicesStatusesOverview200ApplicationJSONCounts struct {
	// byStatus
	ByStatus *GetOrganizationDevicesStatusesOverview200ApplicationJSONCountsByStatus `json:"byStatus,omitempty"`
}

// GetOrganizationDevicesStatusesOverview200ApplicationJSON - Successful operation
type GetOrganizationDevicesStatusesOverview200ApplicationJSON struct {
	// counts
	Counts *GetOrganizationDevicesStatusesOverview200ApplicationJSONCounts `json:"counts,omitempty"`
}

type GetOrganizationDevicesStatusesOverviewResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationDevicesStatusesOverview200ApplicationJSONObject *GetOrganizationDevicesStatusesOverview200ApplicationJSON
}
